//
// KeyRemo.h
// Default function for Key Input and Remocon Input
//
//=============================================================================
//		                    Operation Key Mapping
//=============================================================================
#include "config.h"
#include "typedefs.h"
#include "keyremo.h"
#include "measure.h"
#include "audio.h"
#include "dispinfo.h"
#include "main.h"
#include "i2c.h"
#include "osdmenu.h"
#include "debug.h"
#include "cpu.h"
#include "printf.h"
#include "regmap.h"
#include "reg.h"
#include "etc_eep.h"
#include "osdbasic.h"
#include "HS_keyremo.h"
#include "HS_DisplayOSD.h"
#include "HS_DVRProtocol.h"
#include "HS_IOdef.h"
#include "audio.h"
bit CAM_PTZ_RUN_flag;
BYTE lock_keycnt; 
extern 	bit SpeedDomeMode;
extern  bit		OnChangingValue;
extern 	bit		RepeatKey;
#ifdef SUPPORT_DEBUG
extern  bit Debug_On;
#endif
extern  BYTE  PcMode;
extern  		WORD  OSDLastKeyInTime;		// in ms
//extern   		bit   DisplayInputHold;		//william-981029
extern  DATA  WORD  tic_pc;
extern  		bit KeyReady;
extern  DATA BYTE Key;
#ifdef REMO_RC5
extern   BYTE	RemoDataReady;
#endif
extern BYTE RemoSystemCode, RemoDataCode;

extern	bit	ChannelEdit_Flag;
extern 	bit	ChannelEdit_on;
//extern 	bit 	GetDVRVersionOK		;
extern 	bit	GetDVRStatusflag;
#ifdef E_Wintek
extern	bit	FactoryMenu;
#endif
void RemoMenu_MenuKey(void)
{
	if(  GetDisplayedOSD() & MENU  ) 		OSDHighMenu();
	else 									OpenOSDMenu();
}

void RemoChnUp_UpKey(void)
{

	#ifdef SUPPORT_DEBUG
	if( Debug_On ) {
		DebugWindowData(UP);
		return;
	}
	else 
	#endif	
	if( GetDisplayedOSD() & MENU  )	
		#ifdef PAL_TV
		if( ChannelEdit_Flag) {
			if( ChannelEdit_on )					ChannelEdit_Char(UP);
			else {		
				UpDownTVChannel(DN);
				ChannelEdit_display();
			}
		}
		else
		#endif	
		OSDCursorMove(UP);	
	#ifdef SUPPORT_PC
	else if( GetInputSelection()==PC )		AutoAdjust();
	#endif

	else	
		return;

}

void RemoChnDn_DnKey(void)
{

	#ifdef SUPPORT_DEBUG
	if( Debug_On ) {
		DebugWindowData(DN);
		return;
	}
	else 
	#endif	
	if( GetDisplayedOSD() & MENU  ) {
		OSDCursorMove(DN);	
	}
	else
		#ifdef SUPPORT_LINE_OSDDEMO
		DisplayLineOSD();
		#endif
		return;

}

void RemoVolUp_RightKey(void)
{
	#ifdef SUPPORT_DEBUG
	if( Debug_On ) {
		DebugWindowCursor(UP);
		return;
	}
	else 
	#endif	
	if(  GetDisplayedOSD() & MENU  ) {
		if( OnChangingValue ) 						OSDValueUpDn(UP );
		else										OSDSelect();			
	}
	else 
	{
		ChangeVol(1);
		DisplayVol();
	}
}

void RemoVolDn_LeftKey(void)
{
	#ifdef SUPPORT_DEBUG
	if( Debug_On ) {
		DebugWindowCursor(DN);
		return;
	}
	else 
	#endif
	if(  GetDisplayedOSD() & MENU  ) {
		if( OnChangingValue )						OSDValueUpDn(DN );
		else OSDHighMenu();	
	}
	else 
	{
		ChangeVol(-1);
		DisplayVol();
	}
}


//=============================================================================
//
//=============================================================================
BYTE ActionRemo(BYTE _RemoDataCode, BYTE AutoKey)
{

	SetOSDLastKeyInTime();
	
	 #if (defined SUPPORT_PC) || (defined SUPPORT_DTV) 	
     #if 0//andy ML084 980930
	  if( (PcMode==EE_PC_NO_SIGNAL) && (GetInputSelection()==PC || GetInputSelection()==DTV) ) {
		 if( PcMode==EE_PC_NO_SIGNAL ) {
			 switch (_RemoDataCode) {
			   case REMO_INPUT:
			 //case REMO_STANDBY:	
			 break;
				
			default:
				tic_pc = 0;
				return 1;
			}
		}
	}
     #endif
	#endif // SUPPORT_PC

	switch(_RemoDataCode) {

	case REMO_STANDBY:				// power
		#ifdef DEBUG_KEYREMO
		dPrintf("\r\nSTANDBY Mode, Autokey:%02x", AutoKey);
		#endif
		OSDLastKeyInTime = 0xffff;
		if( AutoKey ) return 1;
		return 0;					// power off

	case REMO_MUTE:
		#if 0
		#ifdef DEBUG_KEYREMO
		dPrintf("\r\nMUTE Mode, Autokey:%02x", AutoKey);
		#endif
		if( AutoKey ) return 1;
		ToggleAudioMute();
		if( IsAudioMuteOn() )		DisplayMuteInfo();
		else{						
			ClearMuteInfo();
			//if( DisplayInputHold ) DisplayInput();		//william-981029
		}
		#endif
		break;

	case REMO_INPUT:
		#ifdef DEBUG_KEYREMO
		dPrintf("\r\nChange INPUT, Autokey:%02x", AutoKey);
		#endif
		ChangeInput(GetNextInputSelection());
		return 1;

	case REMO_INFO:
		#ifdef DEBUG_KEYREMO
		dPrintf("\r\nINFO display, Autokey:%02x", AutoKey);
		#endif
		if( GetDisplayedOSD() & INPUTINFO )	ClearInput();
		else		DisplayInput();
		return 1;

	case REMO_NUM0:
	case REMO_NUM1:
	case REMO_NUM2:
	case REMO_NUM3:
	case REMO_NUM4:
	case REMO_NUM5:
	case REMO_NUM6:
	case REMO_NUM7:
	case REMO_NUM8:
	case REMO_NUM9:
		#ifdef DEBUG_KEYREMO
		dPrintf("\r\nNumber %02x Key Pressed, Autokey:%02x", (_RemoDataCode-0x30), AutoKey);
		#endif
		if( AutoKey )								return 1;

		else										return 1;
		break;

	case REMO_CHNUP:
		#ifdef DEBUG_KEYREMO
		dPuts("\r\nChannel UP");
		#endif
		RemoChnUp_UpKey();
		break;
	
	case REMO_CHNDN:
		#ifdef DEBUG_KEYREMO
		dPuts("\r\nChannel DOWN");
		#endif
		RemoChnDn_DnKey();
		break;
	
	case REMO_SELECT:
		#ifdef DEBUG_KEYREMO
		dPrintf("\r\nSELECT key pressed, Autokey:%02x", AutoKey);
		#endif
		if( AutoKey ) return 1;
		if(  GetDisplayedOSD() & MENU  )		{
				OSDSelect();
		}
		break;

	case REMO_VOLUP:
		#ifdef DEBUG_KEYREMO
		dPuts("\r\nVolumn UP");
		#endif
		RemoVolUp_RightKey();
		break;
	case REMO_VOLDN:
		#ifdef DEBUG_KEYREMO
		dPuts("\r\nVolumn DOWN");
		#endif
		RemoVolDn_LeftKey();
		break;


	case REMO_MENU:
		#ifdef DEBUG_KEYREMO
		dPrintf("\r\nMENU display, Autokey:%02x", AutoKey);
		#endif
		if( AutoKey ) return 1;
		RemoMenu_MenuKey();
		break;

	case REMO_EXIT:
		#ifdef DEBUG_KEYREMO
		dPuts("\r\n EXIT");
		#endif
		if(  GetDisplayedOSD() & MENU  )		
			DoAction(EXITMENU);
		break;

	#ifdef SUPPORT_PC
	case REMO_AUTO:
		#ifdef DEBUG_KEYREMO
		dPuts("\r\n AUTO mode adjust for PC input");
		#endif
		if( GetInputSelection()==PC )
			AutoAdjust();
		break;
	#endif

	#ifdef WIDE_SCREEN
	case REMO_ASPECT:
		#ifdef DEBUG_KEYREMO
		dPuts("\r\n Screen Aspect Ratio change to WIDE");
		#endif
		SetItemValue(WIDESCREEN,UP);
		break;
	#endif
	}

	#ifdef SUPPORT_DEBUG
	switch(_RemoDataCode) {		
	case REMO_DEBUG:		DebugWindowControl();		break;
	case REMO_READ:			Debug_Read();		break;
	case REMO_WRITE:		Debug_Write();	
							Debug_Read();	// Read back
												break;
	}
	#endif

	return 1;
}


BYTE CheckKeyIn(void)
{
	BYTE ret=1, ikey,OSD_LOCK;
//	if( (ikey = keyIn()) ) {



	if( (ikey = GetKey(1)) ) {
		#ifdef DEBUG
       
		switch (ikey) {
			case POWERKEY : Printf("\r\nPOWER key pressed"); break;
			case MENUKEY: Printf("\r\nMENU key pressed"); break;
			case INPUTSOURCEKEY: Printf("\r\nINPUTSOURCE key pressed"); break;
			case UPKEY:	 Printf("\r\nUP key pressed"); break;
			case DOWNKEY: Printf("\r\nDOWN key pressed"); break;
            case SELECTKEY: break;//Printf("\r\nSELECTKEY key pressed"); break;
			default: Printf("\r\nNOT ASSIGNED key pressed"); break;
		}
		#endif

		if(!(TriggerFlag==0x00||TriggerFlag==0x08))
			{
			ikey=0;
			return 1;
			}


	
		OSD_LOCK= ReadEEP(EEP_ONOFFChoice);	
		if((~P2&0x60)==0x60  &&  OSD_LOCK==0)   //	¸Ñosd lock
		 { 
			//delay(2000);	
			Wait_ms(2000);
			if((~P2&0x60)==0x60)
			{
			  //if(lock_keycnt>20)		
				//{	
				  WriteEEP(EEP_ONOFFChoice,0x01);
				  DisplayactvOSD();
				  delay(3000);
				  ClearGAUGEINFO();
				  lock_keycnt=0;
				  DisplayInput();
			    //}
			 //else
				//{ lock_keycnt++;}
		   }
		//else
		//{lock_keycnt=0; }
	   }


		
		SetOSDLastKeyInTime();

		switch( ikey ) {
			case  POWERKEY :
				if(SpeedDomeMode==0)
				{
				if(TriggerFlag==0x00)
					{
					ret = ActionRemo( REMO_STANDBY, RepeatKey );
					PowerFlag=0;//2007.3.28  Justin
					//Hs_DvrTxCmdPaser(Halt_Start);
	                		WriteEEP(EEP_Powerflag,PowerFlag);//2007.3.28 Justin
					}
				}
				else
				{
				SpeedDomeMode=0;
				RS232Select=0;	
				//ClearDataCnt(INPUTINFO_ADDR,19);
				//DrawAttrCnt(INPUTINFO_ADDR,0x00,19); 
				DisplayInput();
				}
                break;


			case MENUKEY:
				if(SpeedDomeMode==0)
				{
				if(OSD_LOCK==0){DisplaylockOSD();delay(500); ClearGAUGEINFO(); DisplayInput();}
				else
				{
                if(  GetDisplayedOSD() & MENU  ) 
                  {
                   if( OnChangingValue )
					  ret = ActionRemo( REMO_MENU, RepeatKey );
                    else
				 	  OSDSelect();
                  }
				else
                  ret = ActionRemo( REMO_MENU, RepeatKey );  
				}
					
				}
				else
				{
					CAM_TxCommand_toRS485(CAM_Iris_Open);
					CAM_PTZ_RUN_flag = 1;
				}
				
				break;

			//------------------------------------------------------------------------		
			
			case UPKEY:
				if(SpeedDomeMode==0)
				{
				if(  GetDisplayedOSD() & MENU  ) 
					{
					if( OnChangingValue )				
						OSDValueUpDn(UP );
					else								
					   OSDCursorMove( UP );
					}
				else	
					{
                      ret=ActionRemo(REMO_VOLUP,0);
					  return 1;
					}
				}
				else
				{
					CAM_TxCommand_toRS485(CAM_PTZ_UP);
					CAM_PTZ_RUN_flag = 1;

				}
				break;
			case DOWNKEY:
				if(SpeedDomeMode==0)
				{
				if(  GetDisplayedOSD() & MENU  )
					{
					if( OnChangingValue )				
						OSDValueUpDn(DN );
					else								
						OSDCursorMove( DN );
					}
				else	
					{
                    ret=ActionRemo(REMO_VOLDN,0);
					return 1;
					}
				}
				else
				{
					CAM_TxCommand_toRS485(CAM_PTZ_DOWN);
					CAM_PTZ_RUN_flag = 1;

				}
				break;

			case SELECTKEY:
				if(SpeedDomeMode==0)
				{
				SetSelectMode();
				}
				else
				{
					CAM_TxCommand_toRS485(CAM_PTZ_LEFT);
					CAM_PTZ_RUN_flag = 1;

				}
				break;

			//------------------------------------------------------------------------		

			case INPUTSOURCEKEY:
				if(SpeedDomeMode==0)
				{
				if(NowModeState==SelectMode)
					NowModeState=JumpMode;
				else
					NowModeState=SelectMode;
					
                		SetJumpMode();
				}
				else
				{
					CAM_TxCommand_toRS485(CAM_PTZ_RIGHT);	
					CAM_PTZ_RUN_flag = 1;

				}
	break;

			case VersionKEY:
				#ifdef E_Wintek
				FactoryMenu=1;
				#endif
				if(DVR_Ready)
					{
					
					#if  1
					if(AudioVol==15)
						{
							Hs_DvrTxCmdPaser(GetDVRVersion);
					//Wait_ms(2000);
					//DvrReceivePaser();
						//if(GetDVRVersionOK==1)
						//	{

						//	DisplayFWVersion();
						//	}
						//else
						//	{
						//	DisplayDVRnotReady();
						//	}
							//Wait_ms(3000);
							//GetDVRStatusflag=1;
				  			//ClearGAUGEINFO();
							//DisplayInput();
							//DisplayDVRStatus();
						}
					#ifndef SUPPORT_SDCARD
						else
							DisplayDVRStatus();
					#endif	
					#endif
					}	

				//else
				//	{
				//	CloseOSDMenu();	
				//	DisplayInput();
				//	}
				break;
				
		}

	}
	return (ret);
}


//=============================================================================
//		Get Key 
//=============================================================================
BYTE GetKey(BYTE repeat)
{

bit ready;

	ready = KeyReady;
	KeyReady = 0;

	if( !ready ) return 0;
	if( repeat ) return Key;
	if( !RepeatKey ) return Key;

	return 0;

}


//=============================================================================
//		CheckRemo
//=============================================================================
#ifdef REMO_RC5

BYTE IsRemoDataReady(BYTE *DataCode, BYTE *AutoKey)
{
	bit togglebit;
	static bit	LastToggle=0;
	static BYTE AutoWait=0;

	BYTE _RemoSystemCode, _RemoDataCode, _RemoDataReady;

	if( !RemoDataReady ) return 0;

	_RemoDataReady = RemoDataReady;
	_RemoDataCode = RemoDataCode;
	_RemoSystemCode = RemoSystemCode;

	*AutoKey = 0;

	EnableRemoconInt();

	#ifdef DEBUG_KEYREMO
	dPrintf("\r\n(CheckRemo)R-S:%02x, R-D:%02x", (WORD)_RemoSystemCode, (WORD)_RemoDataCode);
	#endif

	if( (_RemoSystemCode & 0xc0) != 0xc0 ) return 0;
	if( (_RemoSystemCode & 0x1f) != REMO_CUSTOM ) return 0;

	togglebit = LastToggle;
	if( _RemoSystemCode & 0x20 ) LastToggle = 1;
	else LastToggle = 0;

	#ifdef DEBUG_KEYREMO
	dPrintf("**** %d  %d ", (WORD)LastToggle, (WORD)_RemoDataReady);
	#endif

	if( LastToggle != togglebit ) {			// new key
		AutoWait =  0;
	}
	else if( AutoWait>=4 ) {				// auto key
		AutoWait++;
		if( AutoWait>=6 ) {
			AutoWait = 4;
			*AutoKey = 1;
		}
		else return 0;
	}
	else {									// wait auto key
		AutoWait++;
		return 0;
	}
	
	#ifdef DEBUG_KEYREMO
	if( *AutoKey ) {
		dPuts(" ---> AutoKey ");
	}
	else {
		dPuts(" ---> New Key ");
	}
	#endif

	*DataCode = _RemoDataCode;
	return 1;
}

#elif defined REMO_NEC
extern DATA		BYTE	 RemoData[4];

BYTE IsRemoDataReady(BYTE *DataCode, BYTE *AutoKey)
{
	static BYTE AutoWait=0;
	static IDATA BYTE LastDataCode=0xff;
	static IDATA BYTE repeatcnt=0;
	BYTE ret =0 ;

	*AutoKey = 0;
	switch ( RemoDataReady ) {

	case 0: return 0;

	case 1:
		#ifdef DEBUG_KEYREMO
		dPrintf("\r\nNEC RemoData = %02x %02x %02x %02x", (WORD)RemoData[0], (WORD)RemoData[1], (WORD)RemoData[2], (WORD)RemoData[3] );
		#endif
		if( (RemoData[0]==REMO_CUSTOM1) && (RemoData[1]==REMO_CUSTOM2 ) && (RemoData[2]+RemoData[3])==0xff ) {
			RemoDataCode = RemoData[2];
			LastDataCode = RemoDataCode;
			AutoWait = 0;
			*AutoKey = 0;
			repeatcnt = 0;
		}
		else {
			RemoDataCode = 0xff;
			LastDataCode = 0xff;

			EnableRemoconInt();		//
			return 0;
		}
		break;

	case 2:
		AutoWait++;
		if( AutoWait>=6 ) {
			RemoDataCode = LastDataCode;
			repeatcnt++;
			if( repeatcnt>=5 ) {
				AutoWait = 5;
			}
			else
				AutoWait = 4;

			*AutoKey = 1;
		}
		else {
			EnableRemoconInt();		//
			return 0;
		}
		break;

	}

	EnableRemoconInt();		////LJY052902
	if( RemoDataCode==0xff )	return 0;

	#ifdef DEBUG_KEYREMO
	dPrintf("(R-D:%02x)  ", (WORD)RemoDataCode);
	#endif

	*DataCode = RemoDataCode;
	return 1;
}

#endif	// REMO_NEC


