C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE TW88
OBJECT MODULE PLACED IN .\Output\TW88.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE TW88.c LARGE OPTIMIZE(9,SIZE) BROWSE INCDIR(.\Include\) DEBUG OBJECTEXTE
                    -ND CODE LISTINCLUDE SYMBOLS PRINT(.\Source\TW88.lst) TABS(2) OBJECT(.\Output\TW88.obj)

line level    source

   1          #include "Config.h"
   1      =1  /*****************************************************************************/
   2      =1  /*                           System Configurations                           */
   3      =1  /*              rev 0.10 include auto test             */
   4      =1  // 0.11 change DTV, PC input initial download data correct for Charge Pump
   5      =1  // 0.12 correct phase measurement routine '>>3'
   6      =1  // 0.13 enable function for SPI control... only EXT MCU case
   7      =1  // 0.14 corrected PC measurement......
   8      =1  // 0.0a test function only for CVBS, SVIDEO
   9      =1  // 0.15 corrected DTV scaler setting for panel resolutions
  10      =1  // 0.0b panel for AND 640x480 TICON panel
  11      =1  // 0.16 corrected COMPONENT scaler setting for panel resolutions  11/21/2007
  12      =1  // 0.0c automatic chip test
  13      =1  // 0.17 add monitor function, osd grid for writing grid
  14      =1  // 0.18 add component, dtv pc for analogpanel, 12/06/2007
  15      =1  // 0.19 correct pal input for CES, 12/20/2007
  16      =1  // 0.1a CCFL control, 12/28/2007
  17      =1  // 0.19 Multi Grid for Banking on Internal MCU  01/17/2008
  18      =1  // 0.20 CCFL contol for backlight brightness  01/21/2008
  19      =1  // 0.21 CCFL contol for backlight brightness  01/25/2008
  20      =1  // 0.22 phase setting 02/07/2008
  21      =1  // 0.221 display input correction 04/03/2008
  22      =1  // 0.23 PC, DTV mode, no signal display
  23      =1  // 0.24 PC Auto Color adjustment
  24      =1  // 0.25 revised PC Auto Clock adjustment - find divide number and phase
  25      =1  // 0.26 Digital RGB for TW8826
  26      =1  // 0.27 Correct LVDS control          08/22/2008
  27      =1  // 0.28 Add WSVGA resolution          10/23/2008
  28      =1  // 0.29 Add NEW GRID              11/14/2008
  29      =1  // 0.30 Fix DTV input             12/10/2008
  30      =1  // 0.31 Add 1080i23, 24, 25A, 25B       01/20/2009
  31      =1  // 0.32 TCON setting FIX all mode       01/22/2009
  32      =1  // 0.33 autodetect is auto on/off by dip sw1  02/02/2009
  33      =1  // 0.34 Fix autocolor function and clamp position 02/08/2009
  34      =1  /*****************************************************************************/
  35      =1  #ifndef __CONFIG_H__
  36      =1  #define __CONFIG_H__
  37      =1  
  38      =1  //#define INTERNAL_MCU -- defined by Project Compiler session
  39      =1  #define   HS        
  40      =1  //#define   E_Wintek  
  41      =1  //#define   AWT 
  42      =1  //#define Holtz
  43      =1  
  44      =1  //#define QUAD
  45      =1  
  46      =1  #ifdef QUAD
           =1   #define AWT_ML072Q  //Pinchi 20150827 disable for HTRV
           =1 //  #define HTRV  //Pinchi 20140902 disable for AWT ML072Q
           =1 #else
  50      =1    #define AWT_ML072S
  51      =1  #endif
  52      =1  
  53      =1  //--------------------------------------------------
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 2   

  54      =1  //              Common Feature Define
  55      =1  //--------------------------------------------------
  56      =1  //#define FIRST_RUN_FROM_AC  //Pinchi 20150831 disable for Screen re-setting by Set4WideScreen()  //Pinchi
             - 20141029 add
  57      =1  #define SUPPORT_ML072Q_AUTO_DAY_NIGHT  //Pinchi 20150825 add for function define
  58      =1  #define SUPPORT_TRIGGER_EXIT_MENU  //Pinchi 20150827 add for exit OSD Menu by CAM trigger
  59      =1  #define SUPPORT_AC_ON_NORMAL_SCREEN  //Pinchi 20150901 add to set 4:3 screen when AC on
  60      =1  
  61      =1  #define FIX_DISPLAY_OFF_TRIGGER_ISSUE  //Pinchi 20150908 add to fix [Display] set OFF and trigger release 
             -then trigger again during display info the CAM will change from trigger CH to original CH
  62      =1  #define FIX_EXIT_STANDBY_NO_AUDIO  //Pinchi 20150908 add to fix no audio output when exit Standby mode
  63      =1  #ifdef AWT_ML072Q
           =1 #define FIX_2835_SCREEN_NOISE  //Pinchi 20160929 add to fix the screen noise of TW2835 by change DDR to ma
             -ke clock shift
           =1 #endif
  66      =1  
  67      =1  #define SUPPORT_NEW_TRIGGER_FUNCTION  /////修改新的Trigger方式減少trigger polling 時間 add by ryan@2018012
             -4
  68      =1  
  69      =1  //#define AWT_ML072QS_MSG  //Pinchi 20140925 add
  70      =1  //#define REDUCE_DELAY_TIME  //Pinchi 20141029 add
  71      =1  //#define DISPLAY_TECHWELL_LOGO  //Pinchi 2050903 add to disable the Techwell logo
  72      =1  
  73      =1  //#define SUPPORT_SVIDEO                     //andy Awt 20090914
  74      =1  //#define SUPPORT_COMPONENT     // support component analog to decoder//andy Awt 20090914
  75      =1  //#define SUPPORT_DTV           // support DTV input through component( to ADC ).//andy Awt 20090914
  76      =1  //#define SUPPORT_PC        // support PC function
  77      =1  //#define SUPPORT_DVI       // support DVI input
  78      =1  //#define SUPPORT_SDCARD
  79      =1  
  80      =1  #define SUPPORT_2835_CLK_TUNE_BACK_DOOR  //Pinchi 20160913 add to fine tune TW2835 clock by hot key
  81      =1  //#define SUPPORT_DISPLAY_TEST_VERSION  //Pinchi 20150929 add to display test software version on OSD
  82      =1  
  83      =1  //--------------------------------------------------
  84      =1  //              Model Feature Define
  85      =1  //--------------------------------------------------
  86      =1  #if (defined AWT_ML072Q) || (defined AWT_ML072S)
  87      =1  #define AWT_ML072QS_FW_RULE  //Pinchi 20140902 add
  88      =1  //#define AWT_NEW_SLIM_MODEL  //Pinchi 20150203 add for AWT new slim model
  89      =1  #define AWT_NO_SIGNAL_MSG  //Pinchi 20150319 add for display "NO VIDEO SIGNAL" by AWT request of 20150302
  90      =1  #define AWT_TW2835_DRAW_T_ICON  //Pinchi 20150415 add to draw T icon by TW2835 when CAM C trigger
  91      =1  #define SUPPORT_AC_ON_REDUCE_TIME  //Pinchi 20150903 add to reduce Power time when AC on
  92      =1  
  93      =1  //#define SUPPORT_TRIGGER_RELEASE_DELAY  //Pinchi 20150908 add to support delay time when CAM trigger rele
             -ase
  94      =1  
  95      =1  typedef enum  //Pinchi 20150326 add
  96      =1  {
  97      =1       LAST_TRIG_NON =  0x00,
  98      =1       LAST_TRIG_LEFT =   0x01,
  99      =1       LAST_TRIG_RIGHT =  0x02,
 100      =1       LAST_TRIG_REVERSE =0x03,
 101      =1       LAST_TRIG_CAMC =   0x04,
 102      =1  
 103      =1  } AWT_LAST_TRIGGER;
 104      =1  
 105      =1  #endif
 106      =1  
 107      =1  
 108      =1  #ifdef HTRV  //Pinchi 20150825 add
           =1 #define HTRV_ML072Q_FW_RULE  //Pinchi 20150827 add
           =1 #define HTRV_REDUCE_SCREEN_CHANGE  //Pinchi 20150828 add to reduce screen double change
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 3   

           =1 
           =1 #if 0  //Pinchi 20151209 add to remove 4:3 screen by HTRV request of 20151209
           =1 #define HTRV_SUPPORT_4_3_SCREEN
           =1 #else
           =1 #undef SUPPORT_AC_ON_NORMAL_SCREEN  //Pinchi 20151210 add
           =1 #endif
           =1 
           =1 #endif
 119      =1  
 120      =1  //#define SUPPORT_RS485
 121      =1  //-----------------------------------------------------------------------------
 122      =1  //    Firmware Version
 123      =1  //-----------------------------------------------------------------------------
 124      =1  #ifdef HTRV  //Pinchi 20150907 add
           =1 //#define FWVER     0x200 // Rev 2.00
           =1 //#define FWVER     0x210   // Rev 2.1  //Pinchi 20151209 update version for HTRV request to remove 4:3 scree
             -n
           =1 //#define FWVER     0x220   // Rev 2.2  //Pinchi 20160929 change for V2.2
           =1 #define FWVER     0x230     //Rev 2.3    ryan@20170727 update version by Encoder switches零件 EOL更換
           =1 #else
 130      =1  #define FWVER     0x210   // Rev 0.14
 131      =1  #endif
 132      =1  
 133      =1  //-----------------------------------------------------------------------------
 134      =1  //    Compiler
 135      =1  //-----------------------------------------------------------------------------
 136      =1  #define KEILC           // Keil C 5.0
 137      =1  //-----------------------------------------------------------------------------
 138      =1  //    MPU Clock
 139      =1  //-----------------------------------------------------------------------------
 140      =1  #ifndef INTERNAL_MCU
 141      =1  //#define CLOCK_11M         // 11.0592MHz
 142      =1  #define CLOCK_22M         // 22.1184MHz
 143      =1  #else                 // INTERNAL_MCU
           =1 #define CLOCK_27M         // 27MHz
           =1 #define REG_START_ADDRESS 0xc000    // register start 0xc000, for page0, 0xc100-page1 
           =1 #endif
 147      =1  //-----------------------------------------------------------------------------
 148      =1  //    TW88 Version
 149      =1  //-----------------------------------------------------------------------------
 150      =1  #define TW8816   ///AWT TW8806 change to TW8816 platform //ryan@20170921
 151      =1  //-----------------------------------------------------------------------------
 152      =1  //-----------------------------------------------------------------------------
 153      =1  //    Options for Backlight control
 154      =1  //-----------------------------------------------------------------------------
 155      =1  //#define BACKLIGHT_CCFL
 156      =1  //#define BACKLIGHT_LED
 157      =1  #define BACKLIGHT_PWM
 158      =1  
 159      =1  //-----------------------------------------------------------------------------
 160      =1  //    Panel Resolution
 161      =1  //-----------------------------------------------------------------------------
 162      =1  // ---- Select Default Panel
 163      =1  //
 164      =1  //#define UXGA            // 1600 x 1200
 165      =1  //#define SXGA              // 1280 x 1024
 166      =1  //#define XGA  // 1024 x 768
 167      =1  #ifdef XGA
           =1   #define LVDS          
           =1   #define PWIDTH  1024
           =1   #define PHEIGHT 768
           =1 #endif
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 4   

 172      =1  //#define SVGA            //  800 x 600
 173      =1  //#define VGA             //  640 x 480
 174      =1  #ifdef VGA
           =1   #define PWIDTH  640
           =1   #define PHEIGHT 480
           =1   //#define HITACHI_640_B_160   //--> 640 x 160
           =1   #define AND_640_480
           =1 #endif
 180      =1  //#define WXGA            // 1280 x 768 (15:9) // 1366 x 768 (16:9)
 181      =1  #ifdef WXGA
           =1     //#define WX_SHARP_LQ106K1LA
           =1   #define PWIDTH  1280
           =1   #define PHEIGHT 768
           =1 #endif
 186      =1  //#define WSVGA           // 1024 x 600 *** only video mode
 187      =1  #ifdef WSVGA
           =1   #define PWIDTH  1024
           =1   #define PHEIGHT 600
           =1   #define UNIDEN_1024_600
           =1 #endif
 192      =1  #define WVGA            //  800 x 480
 193      =1  #ifdef WVGA
 194      =1    #define PWIDTH  800
 195      =1    #define PHEIGHT 480//600
 196      =1    // If WVGA, you have to select panel.
 197      =1    //#define AU_10INCH
 198      =1    //#define WVGA_TPO
 199      =1    //#define SAMSUNG_10INCH
 200      =1    //#define SAMSUNG_TICONLESS_10INCH
 201      =1    //#define SHARP_TICONLESS_7INCH
 202      =1    //#define AU_TICONLESS_7INCH
 203      =1    //#define AU_G084SN05V8_8_4INCH 
 204      =1    #define HSD070IDW1_7INCH
 205      =1    //#define INNOLUX_AT080TN03
 206      =1    //#define AU_TICONLESS_7INCH_CCFL
 207      =1    //#define CMO     // CHIMEI panel
 208      =1    //#define AU_TICONLESS_10INCH
 209      =1    //#define HITACHI_T01
 210      =1    //#define HITACHI_TX23D12
 211      =1    //#define HITACHI_TX18D24
 212      =1    //#define HITACHI_TX18D16
 213      =1    //#define TMD_LTA070A320F
 214      =1    //#define TMD_LTA080B
 215      =1  #endif  //WVGA
 216      =1  //#define HVGA            //  480 x 320
 217      =1  //#define QVGA            //  320 x 240 *** only video mode
 218      =1  #ifdef QVGA
           =1   #define PWIDTH  320
           =1   #define PHEIGHT 240
           =1   //#define HITACHI_TX09D73
           =1   //#define AU_DELTARGB
           =1   //#define SHARP_LQ050Q5DR01
           =1   //#define SHARP_LQ035
           =1   //#define TMD
           =1 #endif
 227      =1  
 228      =1  //#define WQVGA           //  480 x 234 *** only video mode
 229      =1  #ifdef WQVGA
           =1   #define PWIDTH  480
           =1   #define PHEIGHT 240
           =1   // If WQVGA, you have to select panel 
           =1     #define ANALOG_7INCH
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 5   

           =1   //#define PWIDTH  400
           =1   //#define PHEIGHT 240
           =1   //#define SHARP_LQ043T3DX02   //  400 x 237
           =1   //#define LG_ANALOG
           =1   //#define TMD_ANALOG        //TMD_LTA05B352A
           =1   //#define T_51945GD       // Optorex Panel
           =1 #endif  // WQVGA
 241      =1  
 242      =1  //if LVDS pannel disable TICONLESS
 243      =1  
 244      =1  //-----------------------------------------------------------------------------
 245      =1  //---- Add Support One more panel with DIPSW#1
 246      =1  //---- Ex. Add Analog AU 7" Panel with Default Panel for evalution
 247      =1  //#define ADD_ANALOGPANEL   // Added Analog panel(AU7") from default set panel(expect WQVGA) with DIP #1 sw
             -itch.(DIP#1=L:ANALOG, H:DEFAULT)
 248      =1                // It can't support WQVGA and ADD_ANALOGPANEL same time!!
 249      =1    //#define ADD_ANALOG_7INCH
 250      =1    //#define ADD_TMD_LTA05B352A
 251      =1                    
 252      =1  //---- Support Wide panel function
 253      =1  #if (defined WXGA) || (defined WSVGA) || (defined WVGA) || (defined WQVGA)
 254      =1  #if 0///ryan@20180115//mask for NTSC sharpness issue
           =1 #define WIDE_SCREEN         // Can support 4 display mode, i.e. Normal, Wide, Full, Zoom
           =1 #endif
 257      =1  #endif                // Tested panasonic WVGA panel.
 258      =1  
 259      =1  //-----------------------------------------------------------------------------
 260      =1  //    Panel Vendor Specific
 261      =1  //-----------------------------------------------------------------------------
 262      =1  
 263      =1  //-----------------------------------------------------------------------------
 264      =1  //    TV Tuner
 265      =1  //-----------------------------------------------------------------------------
 266      =1  #define PHILIPS       0
 267      =1  #define ALPS        1   // ALPS, LG
 268      =1  #define TEMIC       2
 269      =1  #define TVAVA       3
 270      =1  #define LGTUNER       4
 271      =1  #define SAMSUNGMUTITUNER  5
 272      =1  
 273      =1  #define TVTunerDevice   4
 274      =1  //-----------------------------------------------------------------------------
 275      =1  //    IR Remote Controller Type
 276      =1  //-----------------------------------------------------------------------------
 277      =1  //#define REMO_RC5          // RC5 style
 278      =1  #define TECHWELL_REMOCON
 279      =1  //#define REMO_NEC          // NEC style
 280      =1  //#define PHILIPS_REMOCON // New remocon 
 281      =1  
 282      =1  //-----------------------------------------------------------------------------
 283      =1  //    I2C Device Access Address Mapping
 284      =1  //-----------------------------------------------------------------------------
 285      =1  
 286      =1  #define EEPROMI2CAddress  0xa0  // EEPROM (24C16)
 287      =1  #define TW88I2CAddress    0x8a  // TW880x
 288      =1  
 289      =1  #define MSPI2CAddress   0x80  // MSP
 290      =1  #define ALC106I2CAddress  0x4A  // MSP
 291      =1  //-----------------------------------------------------------------------------
 292      =1  //    Options for Possible Inputs
 293      =1  //-----------------------------------------------------------------------------
 294      =1  
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 6   

 295      =1  
 296      =1  //-----------------------------------------------------------------------------
 297      =1  //    Options for Possible Standards
 298      =1  //    Default:NTSC
 299      =1  //-----------------------------------------------------------------------------
 300      =1  #define SUPPORT_PAL     
 301      =1  #define SUPPORT_SECAM
 302      =1  #define SUPPORT_NTSC4   
 303      =1  #define SUPPORT_PALM  
 304      =1  #define SUPPORT_PALN    
 305      =1  #define SUPPORT_PAL60   
 306      =1  
 307      =1  //#define ID_CHECK_BY_FW        // in Video mode, check input system ID by firmware
 308      =1  
 309      =1  //-----------------------------------------------------------------------------
 310      =1  //    Options for Debugging/Release
 311      =1  //-----------------------------------------------------------------------------
 312      =1  //#define SUPPORT_PATTERN       // support LCD test pattern
 313      =1  
 314      =1  #ifndef WQVGA
 315      =1    #ifndef QVGA
 316      =1  #define SUPPORT_OSDPOSITIONMOVE
 317      =1    #endif
 318      =1  #endif
 319      =1  
 320      =1  #define SERIAL              // include serial communication routines
 321      =1  
 322      =1  //#define SUPPORT_DEBUG       // Support to use Read & Write in debug OSD Window by remocon.
 323      =1  
 324      =1  //#define DEBUG           // include debug information
 325      =1  #ifdef DEBUG
           =1   //#define DEBUG_MAIN
           =1   //#define DEBUG_TIME
           =1   //#define DEBUG_KEYREMO
           =1   //#define DEBUG_TW88
           =1   //#define DEBUG_DECODER
           =1   //#define DEBUG_I2C
           =1   //#define DEBUG_EEP
           =1   //#define DEBUG_OSD
           =1   //#define DEBUG_AUDIO
           =1   //#define DEBUG_SETPANEL
           =1   //#define DEBUG_DTV
           =1 //  #define DEBUG_PC
           =1   //#define DEBUG_PC_MEAS
           =1   //#define DEBUG_PC_COLOR
           =1   //#define DEBUG_COMPONENT
           =1   //#define DEBUG_BANK
           =1   //#define DEBUG_PAUSE
           =1   //#define DEBUG_MCU
           =1 #endif
 345      =1  
 346      =1  #define AUTOCALC_PC         // in PC mode, Enable Auto Calcuration
 347      =1  //#define SUPPORT_USERCOLORFROMTXT  // Use color setting of text file in Color mode=USER MODE which is as B
             -rightness(Reg10), Contast(Reg11),
 348      =1                    //    Sat_U(Reg13),Sat_V(Reg14),Sharpness(Reg12,Reg78)                  
 349      =1  //#define SUPPORT_GAMMA
 350      =1  
 351      =1  //#define CHIP_MANUAL_TEST      // DIPSW#1
 352      =1  
 353      =1  #ifndef INTERNAL_MCU
 354      =1  //#define NO_INITIALIZE       // After Power switch turn on with DIP SW4 Enable(Low), or pressed MENU button 
             -for internal MCU
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 7   

 355      =1                                      //     micom works to access only I2C bus by serial command.
 356      =1  #endif
 357      =1  
 358      =1  //#define SUPPORT_KRS_OSDDEMO   // For KRS Company Demo 
 359      =1  //#define SUPPORT_LINE_OSDDEMO
 360      =1  
 361      =1  //-----------------------------------------------------------------------------
 362      =1  //    Special Features
 363      =1  //-----------------------------------------------------------------------------
 364      =1  
 365      =1  #ifndef INTERNAL_MCU
 366      =1  //#define SUPPORT_DELTA_RGB
 367      =1  #endif
 368      =1  #define SUPPORT_SELECTKEY     // choose the keymap of using select key or left,right key.
 369      =1  //-----------------------------------------------------------------------------
 370      =1  
 371      =1  //#define HS_NEWOSDMENU     //Weylis -@121008 for Hor. Style OSD
 372      =1  //#define HS_NEWOSDMENU_2     //Weylis -@121008 for Hor. Style OSD(2 line)
 373      =1  
 374      =1  #endif  //__CONFIG_H__
 375      =1  
   2          
   3          #include "reg.h"
   1      =1  //
   2      =1  //Registers.h : Register declaration
   3      =1  //
   4      =1  
   5      =1  #ifndef __REGISTERS__
   6      =1  #define __REGISTERS__
   7      =1  
   8      =1  #ifdef INTERNAL_MCU
           =1 /*  BYTE Registers  */
           =1 sfr P0    = 0x80;
           =1 sfr P1    = 0x90;
           =1 sfr P2    = 0xA0;
           =1 sfr P3    = 0xB0;
           =1 sfr PSW   = 0xD0;
           =1 sfr ACC   = 0xE0;
           =1 sfr B     = 0xF0;
           =1 sfr SP    = 0x81;
           =1 sfr DPL   = 0x82;
           =1 sfr DPH   = 0x83;
           =1 sfr PCON  = 0x87;
           =1 sfr TCON  = 0x88;
           =1 sfr TMOD  = 0x89;
           =1 sfr TL0   = 0x8A;
           =1 sfr TL1   = 0x8B;
           =1 sfr TH0   = 0x8C;
           =1 sfr TH1   = 0x8D;
           =1 sfr IE    = 0xA8;
           =1 sfr IP    = 0xB8;
           =1 sfr SCON  = 0x98;
           =1 sfr SBUF  = 0x99;
           =1 
           =1 //sfr P4    = 0xd8;
           =1 
           =1 /*  8052 Extensions  */
           =1 sfr EXIF  = 0x91;   // external interrupt 2,3,4,5 flags should be cleared by software
           =1 sfr T2CON = 0xC8;
           =1 sfr RCAP2L = 0xCA;
           =1 sfr RCAP2H = 0xCB;
           =1 sfr TL2   = 0xCC;
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 8   

           =1 sfr TH2   = 0xCD;
           =1 sfr EICON = 0xD8;
           =1 sfr EIE   = 0xE8;
           =1 sfr EIP   = 0xF8;
           =1 
           =1 /*  TW88 Core Extension */
           =1 sfr BANKREG   = 0x9A;
           =1 sfr SPICONTROL  = 0x9B;
           =1 sfr T0HIGH    = 0x9C;
           =1 sfr T0LOW     = 0x9D;
           =1 sfr T1HIGH    = 0x9E;
           =1 sfr T1LOW     = 0x9F;
           =1 sfr T2HIGH    = 0x93;
           =1 sfr T2LOW     = 0x94;
           =1 
           =1 /*  BIT Registers  */
           =1 /*  PSW  */
           =1 sbit CY    = 0xD7;
           =1 sbit AC    = 0xD6;
           =1 sbit F0    = 0xD5;
           =1 sbit RS1   = 0xD4;
           =1 sbit RS0   = 0xD3;
           =1 sbit OV    = 0xD2;
           =1 sbit P     = 0xD0;
           =1 
           =1 /*  TCON  */
           =1 sbit TF1   = 0x8F;
           =1 sbit TR1   = 0x8E;
           =1 sbit TF0   = 0x8D;
           =1 sbit TR0   = 0x8C;
           =1 sbit IE1   = 0x8B;
           =1 sbit IT1   = 0x8A;
           =1 sbit IE0   = 0x89;
           =1 sbit IT0   = 0x88;
           =1 
           =1 /*  IE  */
           =1 sbit EA    = 0xAF;
           =1 sbit ES    = 0xAC;
           =1 sbit ET1   = 0xAB;
           =1 sbit EX1   = 0xAA;
           =1 sbit ET0   = 0xA9;
           =1 sbit EX0   = 0xA8;
           =1 
           =1 /*  EIE  */
           =1 sbit EWDI  = 0xEC;    // Watch dog timer interrupt enable
           =1 sbit EX5   = 0xEB;    // external interrupt 5 enable
           =1 sbit EX4   = 0xEA;    // external interrupt 4 enable
           =1 sbit EX3   = 0xE9;    // external interrupt 3 enable
           =1 sbit EX2   = 0xE8;    // external interrupt 2 enable
           =1 
           =1 /*  IP  */
           =1 sbit PS    = 0xBC;
           =1 sbit PT1   = 0xBB;
           =1 sbit PX1   = 0xBA;
           =1 sbit PT0   = 0xB9;
           =1 sbit PX0   = 0xB8;
           =1 
           =1 /*  EIP  */
           =1 sbit PWDI  = 0xFC;    // Watch dog timer interrupt priority
           =1 sbit PX5   = 0xFB;    // external interrupt5 priority
           =1 sbit PX4   = 0xFA;    // external interrupt4 priority
           =1 sbit PX3   = 0xF9;    // external interrupt3 priority
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 9   

           =1 sbit PX2   = 0xF8;    // external interrupt2 priority
           =1 
           =1 /*  P3  */
           =1 sbit RD    = 0xB7;
           =1 sbit WR    = 0xB6;
           =1 sbit T1    = 0xB5;
           =1 sbit T0    = 0xB4;
           =1 sbit INT1  = 0xB3;
           =1 sbit INT0  = 0xB2;
           =1 sbit TXD   = 0xB1;
           =1 sbit RXD   = 0xB0;
           =1 
           =1 /*  SCON  */
           =1 sbit SM0   = 0x9F;
           =1 sbit SM1   = 0x9E;
           =1 sbit SM2   = 0x9D;
           =1 sbit REN   = 0x9C;
           =1 sbit TB8   = 0x9B;
           =1 sbit RB8   = 0x9A;
           =1 sbit TI    = 0x99;
           =1 sbit RI    = 0x98;
           =1 
           =1 /*  8052 Extensions  */
           =1 /*  IE  */
           =1 sbit ET2   = 0xAD;
           =1 
           =1 /*  IP  */
           =1 sbit PT2   = 0xBD;
           =1 
           =1 /*  P1  */
           =1 sbit T2EX  = 0x91;
           =1 sbit T2    = 0x90;
           =1              
           =1 /*  T2CON  */
           =1 sbit TF2   = 0xCF;
           =1 sbit EXF2  = 0xCE;
           =1 sbit RCLK  = 0xCD;
           =1 sbit TCLK  = 0xCC;
           =1 sbit EXEN2 = 0xCB;
           =1 sbit TR2   = 0xCA;
           =1 sbit C_T2  = 0xC9;
           =1 sbit CP_RL2= 0xC8;
           =1 
           =1 sfr CHPENR = 0xF6;
           =1 sfr CHPCON = 0xBF;
           =1 sfr SFRAL  = 0xC4;
           =1 sfr SFRAH  = 0xC5;
           =1 sfr SFRFD  = 0xC6;
           =1 sfr SFRCN  = 0xC7;
           =1 
           =1 sbit P0_0  = 0x80;
           =1 sbit P0_1  = 0x81;
           =1 sbit P0_2  = 0x82;
           =1 sbit P0_3  = 0x83;
           =1 sbit P0_4  = 0x84;
           =1 sbit P0_5  = 0x85;
           =1 sbit P0_6  = 0x86;
           =1 sbit P0_7  = 0x87;
           =1 
           =1 sbit P1_0  = 0x90;
           =1 sbit P1_1  = 0x91;
           =1 sbit P1_2  = 0x92;
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 10  

           =1 sbit P1_3  = 0x93;
           =1 sbit P1_4  = 0x94;
           =1 sbit P1_5  = 0x95;
           =1 sbit P1_6  = 0x96;
           =1 sbit P1_7  = 0x97;
           =1 
           =1 sbit P2_0  = 0xa0;
           =1 sbit P2_1  = 0xa1;
           =1 sbit P2_2  = 0xa2;
           =1 sbit P2_3  = 0xa3;
           =1 sbit P2_4  = 0xa4;
           =1 sbit P2_5  = 0xa5;
           =1 sbit P2_6  = 0xa6;
           =1 sbit P2_7  = 0xa7;
           =1 
           =1 sbit P3_0  = 0xb0;
           =1 sbit P3_1  = 0xb1;
           =1 sbit P3_2  = 0xb2;
           =1 sbit P3_3  = 0xb3;
           =1 sbit P3_4  = 0xb4;
           =1 sbit P3_5  = 0xb5;
           =1 sbit P3_6  = 0xb6;
           =1 sbit P3_7  = 0xb7;
           =1 
           =1 #else // external MCU=WINBOND
 189      =1  /*  BYTE Registers  */
 190      =1  sfr P0    = 0x80;
 191      =1  sfr P1    = 0x90;
 192      =1  sfr P2    = 0xA0;
 193      =1  sfr P3    = 0xB0;
 194      =1  sfr PSW   = 0xD0;
 195      =1  sfr ACC   = 0xE0;
 196      =1  sfr B     = 0xF0;
 197      =1  sfr SP    = 0x81;
 198      =1  sfr DPL   = 0x82;
 199      =1  sfr DPH   = 0x83;
 200      =1  sfr PCON  = 0x87;
 201      =1  sfr TCON  = 0x88;
 202      =1  sfr TMOD  = 0x89;
 203      =1  sfr TL0   = 0x8A;
 204      =1  sfr TL1   = 0x8B;
 205      =1  sfr TH0   = 0x8C;
 206      =1  sfr TH1   = 0x8D;
 207      =1  sfr CKCON = 0x8E;   //clock control register, default =0x01
 208      =1  sfr IE    = 0xA8;
 209      =1  sfr IP    = 0xB8;
 210      =1  sfr SCON  = 0x98;
 211      =1  sfr SBUF  = 0x99;
 212      =1  sfr P4 = 0xE8; //Megawin Ryan@970716
 213      =1  //sfr P4    = 0xa5;      //SST MCU
 214      =1  //sfr P4    = 0xd8;   //winbond<960820>
 215      =1  
 216      =1  /*  8052 Extensions  */
 217      =1  sfr ADCTL = 0xC5;   //william-20111017
 218      =1  sfr ADCV = 0xC6;    //william-20111017
 219      =1  sfr ADCVL = 0xE8;   //william-20111017
 220      =1  sfr T2CON = 0xC8;
 221      =1  sfr RCAP2L = 0xCA;
 222      =1  sfr RCAP2H = 0xCB;
 223      =1  sfr TL2   = 0xCC;
 224      =1  sfr TH2   = 0xCD;
 225      =1  
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 11  

 226      =1  // for UART2
 227      =1  sfr S2CON  = 0xAA;
 228      =1  sfr S2BRT  = 0xBA;
 229      =1  sfr S2BUF  = 0x9A;
 230      =1  sfr AUXR2  = 0xA6;
 231      =1  sfr AUXIE  = 0xAD;
 232      =1  
 233      =1  sfr P1M0  = 0x91;
 234      =1  sfr P1M1  = 0x92;
 235      =1  sfr P0M0  = 0x93;
 236      =1  sfr P0M1  = 0x94;
 237      =1  sfr P2M0  = 0x95;
 238      =1  sfr P2M1  = 0x96;
 239      =1  sfr P3M0  = 0xB1;
 240      =1  sfr P3M1  = 0xB2;
 241      =1  
 242      =1  // for PCA
 243      =1  sfr CCON   = 0xD8;
 244      =1  sfr CMOD   = 0xD9;
 245      =1  sfr CCAPM0 = 0xDA;
 246      =1  sfr CCAPM1 = 0xDB;
 247      =1  sfr CCAPM2 = 0xDC;
 248      =1  sfr CCAPM3 = 0xDD;
 249      =1  sfr CCAPM4 = 0xDE;
 250      =1  sfr CCAPM5 = 0xDF;
 251      =1  sfr CL     = 0xE9;
 252      =1  sfr CH     = 0xF9;
 253      =1  sfr CCAP0L = 0xEA;
 254      =1  sfr CCAP0H = 0xFA;
 255      =1  sfr CCAP1L = 0xEB;
 256      =1  sfr CCAP1H = 0xFB;
 257      =1  sfr CCAP2L = 0xEC;
 258      =1  sfr CCAP2H = 0xFC;
 259      =1  sfr CCAP3L = 0xED;
 260      =1  sfr CCAP3H = 0xFD;
 261      =1  sfr CCAP4L = 0xEE;
 262      =1  sfr CCAP4H = 0xFE;
 263      =1  sfr CCAP5L = 0xEF;
 264      =1  sfr CCAP5H = 0xFF;
 265      =1  sfr PCAPWM0= 0xF2;
 266      =1  sfr PCAPWM1= 0xF3;
 267      =1  sfr PCAPWM2= 0xF4;
 268      =1  sfr PCAPWM3= 0xF5;
 269      =1  sfr PCAPWM4= 0xF6;
 270      =1  sfr PCAPWM5= 0xF7;
 271      =1  
 272      =1  /*  BIT Registers  */
 273      =1  /*  PSW  */
 274      =1  sbit CY    = 0xD7;
 275      =1  sbit AC    = 0xD6;
 276      =1  sbit F0    = 0xD5;
 277      =1  sbit RS1   = 0xD4;
 278      =1  sbit RS0   = 0xD3;
 279      =1  sbit OV    = 0xD2;
 280      =1  sbit P     = 0xD0;
 281      =1  
 282      =1  /*  TCON  */
 283      =1  sbit TF1   = 0x8F;
 284      =1  sbit TR1   = 0x8E;
 285      =1  sbit TF0   = 0x8D;
 286      =1  sbit TR0   = 0x8C;
 287      =1  sbit IE1   = 0x8B;
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 12  

 288      =1  sbit IT1   = 0x8A;
 289      =1  sbit IE0   = 0x89;
 290      =1  sbit IT0   = 0x88;
 291      =1  
 292      =1  /*  IE  */
 293      =1  sbit EA    = 0xAF;
 294      =1  sbit ES    = 0xAC;
 295      =1  sbit ET1   = 0xAB;
 296      =1  sbit EX1   = 0xAA;
 297      =1  sbit ET0   = 0xA9;
 298      =1  sbit EX0   = 0xA8;
 299      =1  
 300      =1  /*  IP  */
 301      =1  sbit PS    = 0xBC;
 302      =1  sbit PT1   = 0xBB;
 303      =1  sbit PX1   = 0xBA;
 304      =1  sbit PT0   = 0xB9;
 305      =1  sbit PX0   = 0xB8;
 306      =1  
 307      =1  /*  P3  */
 308      =1  sbit RD    = 0xB7;
 309      =1  sbit WR    = 0xB6;
 310      =1  sbit T1    = 0xB5;
 311      =1  sbit T0    = 0xB4;
 312      =1  sbit INT1  = 0xB3;
 313      =1  sbit INT0  = 0xB2;
 314      =1  sbit TXD   = 0xB1;
 315      =1  sbit RXD   = 0xB0;
 316      =1  
 317      =1  /*  SCON  */
 318      =1  sbit SM0   = 0x9F;
 319      =1  sbit SM1   = 0x9E;
 320      =1  sbit SM2   = 0x9D;
 321      =1  sbit REN   = 0x9C;
 322      =1  sbit TB8   = 0x9B;
 323      =1  sbit RB8   = 0x9A;
 324      =1  sbit TI    = 0x99;
 325      =1  sbit RI    = 0x98;
 326      =1  
 327      =1  /*  8052 Extensions  */
 328      =1  /*  IE  */
 329      =1  sbit ET2   = 0xAD;
 330      =1  
 331      =1  /*  IP  */
 332      =1  sbit PT2   = 0xBD;
 333      =1  
 334      =1  /*  P1  */
 335      =1  sbit T2EX  = 0x91;
 336      =1  sbit T2    = 0x90;
 337      =1               
 338      =1  /*  T2CON  */
 339      =1  sbit TF2   = 0xCF;
 340      =1  sbit EXF2  = 0xCE;
 341      =1  sbit RCLK  = 0xCD;
 342      =1  sbit TCLK  = 0xCC;
 343      =1  sbit EXEN2 = 0xCB;
 344      =1  sbit TR2   = 0xCA;
 345      =1  sbit C_T2  = 0xC9;
 346      =1  sbit CP_RL2= 0xC8;
 347      =1  
 348      =1  sfr CHPENR = 0xF6;
 349      =1  sfr CHPCON = 0xBF;
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 13  

 350      =1  sfr SFRAL  = 0xC4;
 351      =1  sfr SFRAH  = 0xC5;
 352      =1  sfr SFRFD  = 0xC6;
 353      =1  sfr SFRCN  = 0xC7;
 354      =1  
 355      =1  sbit P0_0  = 0x80;
 356      =1  sbit P0_1  = 0x81;
 357      =1  sbit P0_2  = 0x82;
 358      =1  sbit P0_3  = 0x83;
 359      =1  sbit P0_4  = 0x84;
 360      =1  sbit P0_5  = 0x85;
 361      =1  sbit P0_6  = 0x86;
 362      =1  sbit P0_7  = 0x87;
 363      =1  
 364      =1  sbit P1_0  = 0x90;
 365      =1  sbit P1_1  = 0x91;
 366      =1  sbit P1_2  = 0x92;
 367      =1  sbit P1_3  = 0x93;
 368      =1  sbit P1_4  = 0x94;
 369      =1  sbit P1_5  = 0x95;
 370      =1  sbit P1_6  = 0x96;
 371      =1  sbit P1_7  = 0x97;
 372      =1  
 373      =1  sbit P2_0  = 0xa0;
 374      =1  sbit P2_1  = 0xa1;
 375      =1  sbit P2_2  = 0xa2;
 376      =1  sbit P2_3  = 0xa3;
 377      =1  sbit P2_4  = 0xa4;
 378      =1  sbit P2_5  = 0xa5;
 379      =1  sbit P2_6  = 0xa6;
 380      =1  sbit P2_7  = 0xa7;
 381      =1  
 382      =1  sbit P3_0  = 0xb0;
 383      =1  sbit P3_1  = 0xb1;
 384      =1  sbit P3_2  = 0xb2;
 385      =1  sbit P3_3  = 0xb3;
 386      =1  sbit P3_4  = 0xb4;
 387      =1  sbit P3_5  = 0xb5;
 388      =1  sbit P3_6  = 0xb6;
 389      =1  sbit P3_7  = 0xb7;
 390      =1  
 391      =1  sbit P4_0  = P4^0;
 392      =1  sbit P4_1  = P4^1;
 393      =1  sbit INT3  = P4^2;
 394      =1  sbit INT2  = P4^3;
 395      =1  
 396      =1  sfr P4M0  = 0xB3;
 397      =1  sfr P4M1  = 0xB4;
 398      =1  #endif  // INTERNAL_MCU
 399      =1  
 400      =1  #endif  //__REGISTERS__
 401      =1  
   4          #include "typedefs.h"
   1      =1  #ifndef __TYPEDEFS__
   2      =1  #define __TYPEDEFS__
   3      =1  
   4      =1  
   5      =1  #define DATA    data
   6      =1  #define PDATA   pdata
   7      =1  #define IDATA   data
   8      =1  #define CODE    code
   9      =1  #define CODE_P
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 14  

  10      =1  #define PDATA_P
  11      =1  #define IDATA_P
  12      =1  #define DATA_P
  13      =1  
  14      =1  #define INTERRUPT( num, name ) name() interrupt num
  15      =1  
  16      =1  #define _between(x, a, b) (a<=x && x<=b)
  17      =1  #define _swap(a, b)     { a^=b; b^=a; a^=b; }
  18      =1  
  19      =1  typedef unsigned char Register;
  20      =1  typedef unsigned char BYTE;
  21      =1  typedef unsigned short  WORD;
  22      =1  typedef unsigned long DWORD;
  23      =1  
  24      =1  #define TRUE  1
  25      =1  #define FALSE 0
  26      =1  
  27      =1  //VInputStdDetectMode
  28      =1  #define AUTO  0
  29      =1  
  30      =1  //VInputStd
  31      =1  #define NTSC  1     
  32      =1  #define PAL   2
  33      =1  #define SECAM 3
  34      =1  #define NTSC4 4
  35      =1  #define PALM  5
  36      =1  #define PALN  6
  37      =1  #define PAL60 7
  38      =1  
  39      =1  #define MAXINPUTSTD PAL60+1 // 
  40      =1  
  41      =1  #define UNKNOWN 0xfe
  42      =1  #define NOINPUT 0 //0xff
  43      =1  
  44      =1  #define NIL     0xff
  45      =1  
  46      =1  enum SourceModeTypeEnum
  47      =1  { 
  48      =1    AVMode,      // 0   0X00
  49      =1    //VGAMode,       // 1
  50      =1  #ifdef USE_CAMD 
           =1   CAM_D,         // 2
           =1 #endif
  53      =1    CAM_A,         // 3   0x01
  54      =1    CAM_B,         // 4   0x02
  55      =1    CAM_C,         // 5   0x03
  56      =1    CAM_R,         // 6   0x04
  57      =1    CAM_AB,        // 7   0x05
  58      =1    CAM_CR,        // 8   0x06
  59      =1    CAM_AR,        // 9   0x07
  60      =1    CAM_RB,        // 10    0x08
  61      =1    CAM_AC,        // 11    0x09
  62      =1    CAM_CB,        // 12    0x0a
  63      =1    CAM_RAB_T,     // 13    0x0b
  64      =1    CAM_RAB_H,     // 14    0x0c
  65      =1  
  66      =1    #ifdef HTRV
           =1   CAM_RC,
           =1   #endif
  69      =1    
  70      =1    CAM_QUAD,      // 15    0x0d
  71      =1    CAM_ABR_T3,    // 16    0x0e
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 15  

  72      =1    CAM_ABR_T4,    // 17    0x0f
  73      =1    CAM_RAC_T,      //  0x10
  74      =1    CAM_RBC_T,      //  0x11
  75      =1    CAM_RAC_T2,     //  0x12
  76      =1    CAM_RBC_T2,     //  0x13
  77      =1    CAM_BA,       //  0x14
  78      =1    CAM_BC,       //  0x15
  79      =1    CAM_BR,       //  0x16
  80      =1    CAM_CA,       //  0x17
  81      =1    CAM_ABC,      //  0x18
  82      =1    CAM_ABR,      //  0x19
  83      =1    CAM_ACR,      //  0x1a
  84      =1    CAM_BAC,      //  0x1b
  85      =1    CAM_BAR,      //  0x1c
  86      =1    CAM_BCR,      //  0x1d
  87      =1    CAM_CAB,      //  0x1e
  88      =1    CAM_CAR,      //  0x1f
  89      =1    CAM_CBR,      //  0x20
  90      =1    SEQ,           // 18      0x10
  91      =1    CAM_NUM
  92      =1  };
  93      =1  
  94      =1  typedef unsigned char SourceModeType;
  95      =1  
  96      =1  #endif  /* __TYPEDEFS__ */
  97      =1  
   5          #include "i2c.h"
   1      =1  #ifndef __I2C_H__
   2      =1  #define __I2C_H__
   3      =1  
   4      =1  
   5      =1  void I2CReadByte3(BYTE *);
   6      =1  void I2CRead8Byte(BYTE *);
   7      =1  #if 0
           =1 void I2CReadByteMSP(BYTE addr, BYTE index, BYTE *pd, BYTE cnt);
           =1 #endif
  10      =1  BYTE I2CWriteByte2(BYTE);
  11      =1  BYTE I2CWriteByte3(BYTE*);
  12      =1  BYTE I2CWrite8Byte(BYTE *);
  13      =1  
  14      =1  void I2CStart(void);
  15      =1  void I2CWriteData(BYTE value);
  16      =1  BYTE I2CReadData(void);
  17      =1  #if 0
           =1 BYTE I2CReadDataWithACK(void);
           =1 #endif
  20      =1  void I2CStop(void);
  21      =1  void I2Cdelay(void);
  22      =1  
  23      =1  
  24      =1  #define WriteTW88(a,b)    WriteI2C(TW88I2CAddress, a, b)
  25      =1  #define ReadTW88(a)     ReadI2C(TW88I2CAddress, a)
  26      =1  
  27      =1  BYTE WriteTW88_Wait (BYTE, BYTE);
  28      =1  void WriteADC   (BYTE, BYTE);
  29      =1  BYTE ReadADC    (BYTE);
  30      =1  BYTE ReadADC_TW88(BYTE index);
  31      =1  void WriteADC_TW88(BYTE index, BYTE dat);
  32      =1  
  33      =1  void WriteEEP   (WORD, BYTE);
  34      =1  BYTE ReadEEP    (WORD);
  35      =1  WORD ReadALC106(WORD index);
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 16  

  36      =1  void WriteALC106(WORD index, WORD  dat);
  37      =1  WORD ReadI2CWORD(BYTE addr, BYTE index);
  38      =1  BYTE ReadI2C    (BYTE addr, BYTE index);
  39      =1  void WriteI2C   (BYTE addr, BYTE index, BYTE val);
  40      =1  
  41      =1  void WriteI2Cn_(BYTE addr, BYTE *val, BYTE cnt);
  42      =1  void WriteI2Cn (BYTE addr, BYTE index, BYTE *val, BYTE cnt);
  43      =1  void WriteI2CnD(BYTE addr, BYTE index, BYTE val, BYTE cnt);
  44      =1  
  45      =1  void ReadI2Cmn(BYTE addr, BYTE wcnt, BYTE rcnt, BYTE *rwdata);
  46      =1  
  47      =1  #define   WriteADC(a,b) WriteADC_TW88(a,b)
  48      =1  #define   ReadADC(a)    ReadADC_TW88(a)
  49      =1  
  50      =1  #endif  /* __I2C_H__ */
   6          #include "main.h"
   1      =1  #ifndef __MAIN__
   2      =1  #define __MAIN__
   3      =1  
   4      =1  #define ON          1
   5      =1  #define OFF         0
   6      =1  #if 1//ryan@20171214
   7      =1  #define Hs_debug
   8      =1  #define Monitor_debug  
   9      =1  //#define Trigger_debug 
  10      =1  #endif
  11      =1  
  12      =1  
  13      =1  //#define DVR
  14      =1  #define Format_SDCard
  15      =1  #define BJTSwitch
  16      =1  
  17      =1  #define Panel_Enable()    P4=P4|0x08 //andy 980908
  18      =1  #define Panel_Disable()   P4=P4&0xf7
  19      =1  
  20      =1  #if 0
           =1 #define SetBacklight()      P4=P4|0x04
           =1 #define clrBacklight()      P4=P4&0xfb
           =1 #else
  24      =1  #define SetBacklight()    P4=P4&0xfb
  25      =1  #define clrBacklight()    P4=P4|0x04
  26      =1  #endif
  27      =1  
  28      =1  //InputSelection
  29      =1  struct struct_IdName {
  30      =1    BYTE  Id;
  31      =1    BYTE  Name[16];
  32      =1  };
  33      =1  
  34      =1  #define CH_TW2835       1
  35      =1  #define CH_CAMD       2
  36      =1  #define CH_AV         3
  37      =1  #define PC          7
  38      =1  #define ChineseDefaultMenu  8
  39      =1  
  40      =1  #define SVIDEO        2
  41      =1  #define COMPONENT     3
  42      =1  //#define ANALOGDTV     4
  43      =1  #define DTV         4
  44      =1  #define TV          5
  45      =1  #define SCART       6
  46      =1  
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 17  

  47      =1  #ifdef HS
  48      =1  #define CH_CAMB         4
  49      =1  #endif
  50      =1  
  51      =1  #define DIGITALVGA      8
  52      =1  
  53      =1  #define AIRTV       0 //9
  54      =1  #define CABLETV       1 //0xa
  55      =1  
  56      =1  #define TVTUNER       0xd   //10
  57      =1  #define MUTE        1 
  58      =1  #define MENU        2 
  59      =1  #define TVVOL       4 
  60      =1  #ifdef AWT_ML072S
  61      =1  #define VLOSSINFO     8 
  62      =1  #else
           =1 #define CC          8 
           =1 #endif
  65      =1  #define INPUTINFO     0x10
  66      =1  #define PCINFO        0x20
  67      =1  #define GAUGEINFO       0x40
  68      =1  //#define RATINGINFO      0x40
  69      =1  #define TVCHN       0x80
  70      =1  //#define MUTE        0x40
  71      =1  
  72      =1  #define YPBPR_480i      0
  73      =1  #define YPBPR_576i      1
  74      =1  #define YPBPR_480p      2
  75      =1  #define YPBPR_576p      3
  76      =1  #define YPBPR_1080i     4
  77      =1  #define YPBPR_720p      5
  78      =1  #define YPBPR_720p50    6
  79      =1  
  80      =1  //---------------------- Feature Define ----------------------------
  81      =1  #ifdef AWT_ML072Q
           =1 
           =1 //mask by ryan@20171018   #define AWT_ML720Q_NEW_TRIGGER_FUN    //Pinchi 20141031 add for AWT request each t
             -rigger can work by PRIORITY OFF
           =1 #define AWT_ADD_TRIGGER_DELAY_FUN 
           =1 #define AWT_SUPPORT_4_3_SCREEN    //ryan@20170907 
           =1 #endif
  87      =1  
  88      =1  #ifdef AWT_ML072S
  89      =1  #define AWT_ADD_TRIGGER_DELAY_FUN 
  90      =1  #endif
  91      =1  
  92      =1  //--------------------------- P0 Define -----------------------------
  93      =1  //#define SEL_MIX     P0_6  // 
  94      =1  //--------------------------- P1 Define -----------------------------
  95      =1  //#define SEL_DVI     P3_5  //LJY062001   
  96      =1  
  97      =1  #define TW88HWReset     P3_4  //LJY001010 //LJY000721
  98      =1  #define PowerUp       P3_7
  99      =1  //======================= CDS Control ================================= 
 100      =1  //#define CDS_CTRL           P1_5
 101      =1  extern BYTE SelectModeType;
 102      =1  extern BYTE InputSelection;
 103      =1  extern BYTE SEQTime;
 104      =1  extern BYTE Priority;
 105      =1  extern BYTE PowerFlag;
 106      =1  //extern bit AutoDayNight;
 107      =1  extern bit SDCardCoverDetect;
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 18  

 108      =1  
 109      =1  BYTE keyIn(void);
 110      =1  void TimerForRemocon(void);
 111      =1  void TimerForTick(void);
 112      =1  void DisableRemoconInt(void);
 113      =1  BYTE SetSupport_remocon(BYTE newd);
 114      =1  
 115      =1  void delay(BYTE cnt);
 116      =1  
 117      =1  BYTE RS_ready(void);
 118      =1  #ifdef Monitor_debug
 119      =1  BYTE RS_rx(void);
 120      =1  #endif
 121      =1  void RS_tx(BYTE tx_buf);
 122      =1  
 123      =1  BYTE RS2_rx(void);
 124      =1  void RS2_tx(BYTE tx_buf);
 125      =1  
 126      =1  void NewLine(void);
 127      =1  void PutsP(PDATA_P BYTE *ptr);
 128      =1  #ifdef Hs_debug
 129      =1  //void MonWriteI2C(BYTE addr, BYTE index, BYTE val);
 130      =1  //BYTE MonReadI2C(BYTE addr, BYTE index);
 131      =1  #endif
 132      =1  BYTE Asc1Bin(BYTE asc);
 133      =1  BYTE Asc2Bin(PDATA_P BYTE *s);
 134      =1  
 135      =1  void I2CDeviceInitialize( CODE_P BYTE *RegSet);
 136      =1  
 137      =1  //void RestartSystemClock(WORD clock_hm);
 138      =1  WORD GetTime_ms(void);
 139      =1  #if 0
           =1 BYTE GetTime_H(void);
           =1 BYTE GetTime_M(void);
           =1 #endif
 143      =1  void ChangeTime_H( char add );
 144      =1  void ChangeTime_M( char add );
 145      =1  //WORD GetWakeupTime(void);
 146      =1  //void SetWakeupTime(WORD wtime);
 147      =1  
 148      =1  
 149      =1  //WORD GetOffTime(void);
 150      =1  //void SetOffTime(WORD wtime);
 151      =1  //BYTE GetSleepTimer(void);
 152      =1  //void SetSleepTimer(BYTE stime);
 153      =1  WORD DiffTime_ms( WORD stime, WORD etime );
 154      =1  //void SetLastBlockedTime(void);
 155      =1  void SetLastCCTime(void);       //ljy010904...CC_FIX_CLEAR_ON_TIME
 156      =1  
 157      =1  void SetOSDLastKeyInTime(void);
 158      =1  WORD GetOSDLastKeyInTime(void);
 159      =1  WORD GetIVF(void);
 160      =1  DWORD GetIHF(void);
 161      =1  BYTE ReadVInputSTD(void);
 162      =1  void SetVInputStd(BYTE newd);
 163      =1  BYTE GetVInputStd(void);
 164      =1  BYTE GetInputSelection(void);
 165      =1  #ifdef ADD_ANALOGPANEL
           =1 BYTE IsAnalogOn(void);
           =1 #endif
 168      =1  void InitVideoData(BYTE src);
 169      =1  void ChangeVInputStdDetectMode(BYTE val);
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 19  

 170      =1  BYTE GetVInputStdInx(void);
 171      =1  
 172      =1  void MonWriteI2Cn_(BYTE addr, BYTE *val, BYTE cnt) ;
 173      =1  
 174      =1  void CheckNewTriggerFunc(void);
 175      =1  ///void Usage(void);
 176      =1  #ifdef Monitor_debug
 177      =1    void Prompt(void);
 178      =1  #endif
 179      =1  void DebugKeyIn(BYTE ikey);
 180      =1  void DVIPowerDown(bit flag);
 181      =1  void PowerDown_XTAL(bit flag);
 182      =1  
 183      =1  void ChangeInput(BYTE newsel);
 184      =1  
 185      =1  
 186      =1  void WaitPowerOn(void);
 187      =1  void PowerOff(void);
 188      =1  BYTE GetNextInputSelection(void);
 189      =1  
 190      =1  BYTE WantToStopTVScan(void);
 191      =1  
 192      =1  //BYTE IsTW8801(void);
 193      =1  //BYTE IsTW8803(void);
 194      =1  //BYTE ConvertVideoVSAT(BYTE reg);
 195      =1  
 196      =1  BYTE IsNoInput(void);
 197      =1  void LoadEEPROM (void);
 198      =1  void Hs_InitVars(void);
 199      =1  void AdjustAutoDayNight(BYTE val);
 200      =1  void ACCPowerControl(void);
 201      =1  void ON_LVDS(void);
 202      =1  void OFF_LVDS(void);
 203      =1  void main_loop(void);
 204      =1  struct RegisterInfo
 205      =1  {
 206      =1     int  Min;
 207      =1     int  Max;
 208      =1     int  Default;
 209      =1  };
 210      =1  struct LongRegisterInfo
 211      =1  {
 212      =1     WORD Min;
 213      =1     WORD Max;
 214      =1     WORD Default;
 215      =1  };
 216      =1  
 217      =1  
 218      =1  typedef enum   ///add enum  by ryan@20170907
 219      =1  {
 220      =1    NORMALL_MODE,
 221      =1    REVERSE_TRIG,
 222      =1    LEFT_TRIG,
 223      =1    RIGHT_TRIG,
 224      =1  #ifdef USE_CAMD 
           =1   CAMD_TRIG,
           =1 #endif  
 227      =1    CAMC_TRIG,
 228      =1    VGA_TRIG,
 229      =1    PARK_TRIG,
 230      =1    No_TRIG,
 231      =1    TRIGGER_NUM
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 20  

 232      =1  }TriggerModeType;
 233      =1  
 234      =1  
 235      =1  #endif  // __MAIN__
 236      =1  
   7          #include "tw88.h"
   1      =1  #ifndef __TW88__
   2      =1  #define __TW88__
   3      =1  
   4      =1  #include "main.h"
   1      =2  #ifndef __MAIN__
           =2 #define __MAIN__
           =2 
           =2 #define ON          1
           =2 #define OFF         0
           =2 #if 1//ryan@20171214
           =2 #define Hs_debug
           =2 #define Monitor_debug  
           =2 //#define Trigger_debug 
           =2 #endif
           =2 
           =2 
           =2 //#define DVR
           =2 #define Format_SDCard
           =2 #define BJTSwitch
           =2 
           =2 #define Panel_Enable()    P4=P4|0x08 //andy 980908
           =2 #define Panel_Disable()   P4=P4&0xf7
           =2 
           =2 #if 0
           =2 #define SetBacklight()      P4=P4|0x04
           =2 #define clrBacklight()      P4=P4&0xfb
           =2 #else
           =2 #define SetBacklight()    P4=P4&0xfb
           =2 #define clrBacklight()    P4=P4|0x04
           =2 #endif
           =2 
           =2 //InputSelection
           =2 struct struct_IdName {
           =2   BYTE  Id;
           =2   BYTE  Name[16];
           =2 };
           =2 
           =2 #define CH_TW2835       1
           =2 #define CH_CAMD       2
           =2 #define CH_AV         3
           =2 #define PC          7
           =2 #define ChineseDefaultMenu  8
           =2 
           =2 #define SVIDEO        2
           =2 #define COMPONENT     3
           =2 //#define ANALOGDTV     4
           =2 #define DTV         4
           =2 #define TV          5
           =2 #define SCART       6
           =2 
           =2 #ifdef HS
           =2 #define CH_CAMB         4
           =2 #endif
           =2 
           =2 #define DIGITALVGA      8
           =2 
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 21  

           =2 #define AIRTV       0 //9
           =2 #define CABLETV       1 //0xa
           =2 
           =2 #define TVTUNER       0xd   //10
           =2 #define MUTE        1 
           =2 #define MENU        2 
           =2 #define TVVOL       4 
           =2 #ifdef AWT_ML072S
           =2 #define VLOSSINFO     8 
           =2 #else
           =2 #define CC          8 
           =2 #endif
           =2 #define INPUTINFO     0x10
           =2 #define PCINFO        0x20
           =2 #define GAUGEINFO       0x40
           =2 //#define RATINGINFO      0x40
           =2 #define TVCHN       0x80
           =2 //#define MUTE        0x40
           =2 
           =2 #define YPBPR_480i      0
           =2 #define YPBPR_576i      1
           =2 #define YPBPR_480p      2
           =2 #define YPBPR_576p      3
           =2 #define YPBPR_1080i     4
           =2 #define YPBPR_720p      5
           =2 #define YPBPR_720p50    6
           =2 
           =2 //---------------------- Feature Define ----------------------------
           =2 #ifdef AWT_ML072Q
           =2 
           =2 //mask by ryan@20171018   #define AWT_ML720Q_NEW_TRIGGER_FUN    //Pinchi 20141031 add for AWT request each t
             -rigger can work by PRIORITY OFF
           =2 #define AWT_ADD_TRIGGER_DELAY_FUN 
           =2 #define AWT_SUPPORT_4_3_SCREEN    //ryan@20170907 
           =2 #endif
           =2 
           =2 #ifdef AWT_ML072S
           =2 #define AWT_ADD_TRIGGER_DELAY_FUN 
           =2 #endif
           =2 
           =2 //--------------------------- P0 Define -----------------------------
           =2 //#define SEL_MIX     P0_6  // 
           =2 //--------------------------- P1 Define -----------------------------
           =2 //#define SEL_DVI     P3_5  //LJY062001   
           =2 
           =2 #define TW88HWReset     P3_4  //LJY001010 //LJY000721
           =2 #define PowerUp       P3_7
           =2 //======================= CDS Control ================================= 
           =2 //#define CDS_CTRL           P1_5
           =2 extern BYTE SelectModeType;
           =2 extern BYTE InputSelection;
           =2 extern BYTE SEQTime;
           =2 extern BYTE Priority;
           =2 extern BYTE PowerFlag;
           =2 //extern bit AutoDayNight;
           =2 extern bit SDCardCoverDetect;
           =2 
           =2 BYTE keyIn(void);
           =2 void TimerForRemocon(void);
           =2 void TimerForTick(void);
           =2 void DisableRemoconInt(void);
           =2 BYTE SetSupport_remocon(BYTE newd);
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 22  

           =2 
           =2 void delay(BYTE cnt);
           =2 
           =2 BYTE RS_ready(void);
           =2 #ifdef Monitor_debug
           =2 BYTE RS_rx(void);
           =2 #endif
           =2 void RS_tx(BYTE tx_buf);
           =2 
           =2 BYTE RS2_rx(void);
           =2 void RS2_tx(BYTE tx_buf);
           =2 
           =2 void NewLine(void);
           =2 void PutsP(PDATA_P BYTE *ptr);
           =2 #ifdef Hs_debug
           =2 //void MonWriteI2C(BYTE addr, BYTE index, BYTE val);
           =2 //BYTE MonReadI2C(BYTE addr, BYTE index);
           =2 #endif
           =2 BYTE Asc1Bin(BYTE asc);
           =2 BYTE Asc2Bin(PDATA_P BYTE *s);
           =2 
           =2 void I2CDeviceInitialize( CODE_P BYTE *RegSet);
           =2 
           =2 //void RestartSystemClock(WORD clock_hm);
           =2 WORD GetTime_ms(void);
           =2 #if 0
           =2 BYTE GetTime_H(void);
           =2 BYTE GetTime_M(void);
           =2 #endif
           =2 void ChangeTime_H( char add );
           =2 void ChangeTime_M( char add );
           =2 //WORD GetWakeupTime(void);
           =2 //void SetWakeupTime(WORD wtime);
           =2 
           =2 
           =2 //WORD GetOffTime(void);
           =2 //void SetOffTime(WORD wtime);
           =2 //BYTE GetSleepTimer(void);
           =2 //void SetSleepTimer(BYTE stime);
           =2 WORD DiffTime_ms( WORD stime, WORD etime );
           =2 //void SetLastBlockedTime(void);
           =2 void SetLastCCTime(void);       //ljy010904...CC_FIX_CLEAR_ON_TIME
           =2 
           =2 void SetOSDLastKeyInTime(void);
           =2 WORD GetOSDLastKeyInTime(void);
           =2 WORD GetIVF(void);
           =2 DWORD GetIHF(void);
           =2 BYTE ReadVInputSTD(void);
           =2 void SetVInputStd(BYTE newd);
           =2 BYTE GetVInputStd(void);
           =2 BYTE GetInputSelection(void);
           =2 #ifdef ADD_ANALOGPANEL
           =2 BYTE IsAnalogOn(void);
           =2 #endif
           =2 void InitVideoData(BYTE src);
           =2 void ChangeVInputStdDetectMode(BYTE val);
           =2 BYTE GetVInputStdInx(void);
           =2 
           =2 void MonWriteI2Cn_(BYTE addr, BYTE *val, BYTE cnt) ;
           =2 
           =2 void CheckNewTriggerFunc(void);
           =2 ///void Usage(void);
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 23  

           =2 #ifdef Monitor_debug
           =2   void Prompt(void);
           =2 #endif
           =2 void DebugKeyIn(BYTE ikey);
           =2 void DVIPowerDown(bit flag);
           =2 void PowerDown_XTAL(bit flag);
           =2 
           =2 void ChangeInput(BYTE newsel);
           =2 
           =2 
           =2 void WaitPowerOn(void);
           =2 void PowerOff(void);
           =2 BYTE GetNextInputSelection(void);
           =2 
           =2 BYTE WantToStopTVScan(void);
           =2 
           =2 //BYTE IsTW8801(void);
           =2 //BYTE IsTW8803(void);
           =2 //BYTE ConvertVideoVSAT(BYTE reg);
           =2 
           =2 BYTE IsNoInput(void);
           =2 void LoadEEPROM (void);
           =2 void Hs_InitVars(void);
           =2 void AdjustAutoDayNight(BYTE val);
           =2 void ACCPowerControl(void);
           =2 void ON_LVDS(void);
           =2 void OFF_LVDS(void);
           =2 void main_loop(void);
           =2 struct RegisterInfo
           =2 {
           =2    int  Min;
           =2    int  Max;
           =2    int  Default;
           =2 };
           =2 struct LongRegisterInfo
           =2 {
           =2    WORD Min;
           =2    WORD Max;
           =2    WORD Default;
           =2 };
           =2 
           =2 
           =2 typedef enum   ///add enum  by ryan@20170907
           =2 {
           =2   NORMALL_MODE,
           =2   REVERSE_TRIG,
           =2   LEFT_TRIG,
           =2   RIGHT_TRIG,
           =2 #ifdef USE_CAMD 
           =2   CAMD_TRIG,
           =2 #endif  
           =2   CAMC_TRIG,
           =2   VGA_TRIG,
           =2   PARK_TRIG,
           =2   No_TRIG,
           =2   TRIGGER_NUM
           =2 }TriggerModeType;
           =2 
           =2 
           =2 #endif  // __MAIN__
 236      =2  
   5      =1  
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 24  

   6      =1  //Value for register 0x44
   7      =1  //#define DECODER_YCbCr   0x08    //xxxx bbxx
   8      =1  //#define RGB_RGB       0x0C
   9      =1  
  10      =1  #define TW88_FPLL0      0xf9
  11      =1  #define TW88_FPLL1      0xfa
  12      =1  #define TW88_FPLL2      0xfb
  13      =1  #define TW88_FSS      0xfc
  14      =1  #define TW88_FSS_PD     0xfd
  15      =1  #define TW88_PLL_DIV    0xfe
  16      =1  
  17      =1  //#define TW88_XSCALE     0x5d
  18      =1  //#define TW88_YSCALE     0x5e
  19      =1  
  20      =1  #define TW88_XUSCALELO    0x60
  21      =1  #define TW88_XDSCALELO    0x61
  22      =1  #define TW88_YUSCALELO    0x62
  23      =1  #define TW88_XYSCALEHI    0x63
  24      =1  #define TW88_XUSCALEFINE  0x69
  25      =1  #define TW88_YUSCALEFINE  0x6a
  26      =1  
  27      =1  //Power Mgt
  28      =1  #define POWER_OFF     0
  29      =1  #define POWER_STANDBY   1
  30      =1  #define POWER_SUSPEND   2
  31      =1  #define POWER_ON      3
  32      =1  
  33      =1  //void TWChipsDetect(void);
  34      =1  void SetAutoDetectStd(void);
  35      =1  void ClearAutoDetectStd(BYTE);
  36      =1  void I2CDeviceInitialize( CODE_P BYTE *RegSet);
  37      =1  
  38      =1  
  39      =1  //0x63.. Register Group
  40      =1  #define GROUP_YCbCr     0x40
  41      =1  #define GROUP_RGB     0
  42      =1  #define SelectPanelAttrRegGroup(A)        WriteTW88(0x70, (ReadTW88(0x70) & 0xbf) | A)
  43      =1  
  44      =1  //#if defined TW8801 || defined TW8803
  45      =1  #define FB_MAIN   2
  46      =1  #define FB_NORMAL 1
  47      =1  #define FB_RGB    0
  48      =1  //void SetFBmode( BYTE mode );
  49      =1  //#endif // TW8801
  50      =1  
  51      =1  
  52      =1  //=============================================================================
  53      =1  //                               LCD Functions   
  54      =1  //=============================================================================
  55      =1  //BYTE GetLCDPowerState(void);
  56      =1  void SetLCDPowerState(BYTE dat);
  57      =1  
  58      =1  BYTE IsFreeRun(void);
  59      =1  #if defined( SUPPORT_PC ) || defined( SUPPORT_DTV )
           =1 void PanelFreeRun(BYTE on);
           =1 void PanelBlack(BYTE on);
           =1 #endif
  63      =1  #if 0
           =1 void PanelMute(BYTE on);
           =1 #endif
  66      =1  void LCDPowerON(BYTE mute); 
  67      =1  
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 25  

  68      =1  #ifdef AWT_ML072S
  69      =1  void LCDPowerOFF(void);
  70      =1  #endif
  71      =1  
  72      =1  #ifdef Hs_debug
  73      =1  void LCDPower(void);
  74      =1  #endif
  75      =1  void DPMSmodeOFF(void);
  76      =1  void DPMSmodeON(void);
  77      =1  //=============================================================================
  78      =1  //                          Get PC Parameter Functions   
  79      =1  //=============================================================================
  80      =1  void GetInitPanelAttribute1(void);
  81      =1  //void GetInitPanelAttribute2(void);
  82      =1  void DefaultPanelAttributeForVideo(void);
  83      =1  void SetPVR(WORD pvr);
  84      =1  void SetPHR(WORD phr);
  85      =1  WORD GetPVR(void);
  86      =1  WORD GetPHR(void);
  87      =1  WORD GetHPN(void);
  88      =1  WORD GetVPN(void);
  89      =1  
  90      =1  //WORD GetVactive(void);
  91      =1  
  92      =1  WORD GetHstart(void);
  93      =1  WORD GetHend(void);
  94      =1  WORD GetVstart(void);
  95      =1  WORD GetVend(void);
  96      =1  void TuneLineBuffer(BYTE field);
  97      =1  void TuneLineBuffer4Video(BYTE field);
  98      =1  
  99      =1  #if defined (SUPPORT_DTV)
           =1 void SetCoarstForDTV(BYTE en);
           =1 #endif
 102      =1  
 103      =1  WORD GetHactiveStart(void);
 104      =1  WORD GetHactiveEnd(void);
 105      =1  WORD GetVactiveStart(void);
 106      =1  //WORD GetVactiveLen(void);
 107      =1  BYTE GetVBackPorch(void);
 108      =1  void SetVBackPorch(BYTE val);
 109      =1  WORD GetPHP(void);
 110      =1  void SetPHP(WORD php);
 111      =1  void SetPVP(WORD period);
 112      =1  WORD GetPVP(void);
 113      =1  //void SetPanelRelatedRegisters(void);
 114      =1  //BYTE ChangedHPN(void);
 115      =1  //WORD GetVSUD(void);
 116      =1  
 117      =1  void SetDefaultPLL(void);
 118      =1  //void SetDefaultFPHSperiod(void);
 119      =1  //BYTE CalcPHP(DWORD ppf, BYTE tol);
 120      =1  //void ChangeFPHSperiod4DecoderInput(WORD vsud, BYTE tol);
 121      =1  
 122      =1  //-------------------------------------------------------------------
 123      =1  //                  Set Active Region Functions
 124      =1  //-------------------------------------------------------------------
 125      =1  void SetHactiveStart(WORD hstart);
 126      =1  void SetHactiveEnd(WORD hend);
 127      =1  void SetVactiveStart(WORD vstart);
 128      =1  //void SetVactiveLen(WORD van, WORD vstart);
 129      =1  void SetVactiveLen(WORD van);
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 26  

 130      =1  //=============================================================================
 131      =1  //                     Set Measurement Window Functions   
 132      =1  //=============================================================================
 133      =1  void SetMeasureWindowH(WORD start, WORD stop);
 134      =1  void SetMeasureWindowV(WORD start, WORD stop);
 135      =1  //=============================================================================
 136      =1  //                          Video Input Functions   
 137      =1  //=============================================================================
 138      =1  BYTE IsVideoInput(void);
 139      =1  BYTE DetectDecoderInput(void);
 140      =1  //=============================================================================
 141      =1  //
 142      =1  //=============================================================================
 143      =1  #if defined( SUPPORT_PC ) || defined( SUPPORT_DTV )
           =1 void AutoPHPCalEnable(void);
           =1 void AutoPHPCalDisable(void);
           =1 #endif
 147      =1  void MakeStartInt(void);
 148      =1  void AVGAInput(void);
 149      =1  void DVIInput(void);
 150      =1  //void DVGAInput(void);
 151      =1  void DisableDVGA(void);
 152      =1  
 153      =1  void COMPOSITE1Input(void);
 154      =1  void COMPOSITE2Input(void);
 155      =1  void COMPOSITE3Input(void);
 156      =1  void COMPOSITE4Input(void);
 157      =1  
 158      =1  void SVIDEOInput(void);
 159      =1  void COMPONENTInput(void);
 160      =1  void ANALOGDTVInput(void);
 161      =1  void DTVInput(void);
 162      =1  void TVInput(void);
 163      =1  void SCARTInput(void);
 164      =1  
 165      =1  //=============================================================================
 166      =1  //                          Measurement Functions
 167      =1  //=============================================================================
 168      =1  ///void SetPanelBitOrder(BYTE swap);
 169      =1  //void SetPanelSingleDouble(BYTE single);
 170      =1  
 171      =1  BYTE MeasureAndWait(BYTE flag);
 172      =1  
 173      =1  //WORD GetHCounter1(BYTE field);
 174      =1  //void SetHInitial(BYTE field, WORD counter);
 175      =1  //=============================================================================
 176      =1  //                          Invert Polarity Functions
 177      =1  //=============================================================================
 178      =1  void InvertHSYNCPolarity(void);
 179      =1  void InvertVSYNCPolarity(void);
 180      =1  //=============================================================================
 181      =1  //            Interrupt / SW Reset Control Functions
 182      =1  //=============================================================================
 183      =1  void SetInt(void);
 184      =1  //void ClearInt(void);
 185      =1  void SetEnDet(void);
 186      =1  void ClearEnDet(void);
 187      =1  void SWReset(void);
 188      =1  //void ClearSYNCLossStatus(void);
 189      =1  //void ClearSYNCChangeStatus(void);
 190      =1  //=============================================================================
 191      =1  //
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 27  

 192      =1  //=============================================================================
 193      =1  BYTE IsBypassmode(void);
 194      =1  //BYTE IsInteraced(void);
 195      =1  void Clear_bypass(void);
 196      =1  void MaskOnSYNCInt(void);
 197      =1  void MaskOffSYNCInt(void);
 198      =1  //=============================================================================
 199      =1  //                                ZoomControl
 200      =1  //=============================================================================
 201      =1  void BypassZoom(void);
 202      =1  
 203      =1  void XscaleU(DWORD scale);
 204      =1  void XscaleD(DWORD scale);
 205      =1  void XScale2(DWORD scale);
 206      =1  void YScale2(DWORD scale);
 207      =1  WORD GetYScale(void);
 208      =1  //=============================================================================
 209      =1  //
 210      =1  //=============================================================================
 211      =1  WORD GetHSYNCPulse(void);
 212      =1  WORD GetVSYNCPulse(void);
 213      =1  //#if defined TW8801 || defined TW8803
 214      =1  WORD GetRelativePosition(void);
 215      =1  //#endif
 216      =1  //=============================================================================
 217      =1  //                MISC2 for decoder
 218      =1  //=============================================================================
 219      =1  #define BLUE_DECODER    2
 220      =1  #define BLACK_DECODER   0
 221      =1  
 222      =1  BYTE ForceDecoderOutput(BYTE color);
 223      =1  BYTE ClearForcedDecoderOutput(void);
 224      =1  //=============================================================================
 225      =1  //                CC and EDS
 226      =1  //=============================================================================
 227      =1  BYTE GetCCStatus(void);
 228      =1  void DisableCC(void);
 229      =1  void EnableCC(void);
 230      =1  BYTE GetCCData(void);
 231      =1  BYTE IsCCEnabled(void);
 232      =1  void EnableEDS(void);
 233      =1  void DisableEDS(void);
 234      =1  void RecoverCCOverflow(void);
 235      =1  
 236      =1  #define CCFIFOHalfFull()      (ReadDecoder(CSTATUS) & 0x04)
 237      =1  //=============================================================================
 238      =1  //                Internal PLL
 239      =1  //=============================================================================
 240      =1  BYTE GetPOST(void);
 241      =1  void SetPLLS(BYTE plls);
 242      =1  BYTE GetREFDM(void);
 243      =1  void SetREFDM(BYTE refdm);
 244      =1  DWORD GetFBDN(void);
 245      =1  void SetFBDN(WORD fbdn, BYTE vcsel);
 246      =1  DWORD GetPPF(void);
 247      =1  void ChangeInternPLL(DWORD _PPF);
 248      =1  
 249      =1  //=============================================================================
 250      =1  //                Macros for attribute
 251      =1  //=============================================================================
 252      =1  //#define GetOSDTransReg()            ReadTW88(0xAE)
 253      =1  //#define SetOSDTransReg(AlphaV)          WriteTW88(0xAE, (BYTE)AlphaV )
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 28  

 254      =1  
 255      =1  #define GetPanelContrastReg(gccolor)      ReadTW88(0x71+gccolor)
 256      =1  #define SetPanelContrastReg(sccolor, cval)    WriteTW88(0x71+sccolor,cval)
 257      =1  
 258      =1  #define GetPanelBrightnessReg(gbcolor)      ReadTW88(0x74+gbcolor);
 259      =1  #define SetPanelBrightnessReg(sbcolor, bval)  WriteTW88(0x74+sbcolor,bval);
 260      =1  
 261      =1  #define SetDTVBrightnessReg(bval)       WriteTW88(0x74,bval);
 262      =1  
 263      =1  #define GetPanelSaturationReg(gbcolor)      ReadTW88(0x72+gbcolor);
 264      =1  #define SetPanelSaturationReg(sbcolor, bval)  WriteTW88(0x72+sbcolor,bval);
 265      =1  
 266      =1  #define SetPanelSharpnessReg(bval)        WriteTW88(0x78,((bval&0x07)|0x38) );
 267      =1  
 268      =1  #define SetPanelHueReg(bval)          WriteTW88(0x70, (ReadTW88(0x70) & 0xc0 | (bval)) );
 269      =1  
 270      =1  #define GetVideoContrastReg()         ReadDecoder(CONTRAST)
 271      =1  #define SetVideoContrastReg(vcval)        WriteDecoder(CONTRAST, vcval)
 272      =1  
 273      =1  #define GetVideoBrightnessReg()         ReadDecoder(BRIGHT)
 274      =1  #define SetVideoBrightnessReg(vbval)      WriteDecoder(BRIGHT, vbval )
 275      =1  
 276      =1  #define GetVideoSaturationReg(gvstype)      ReadDecoder(SAT_U+gvstype)
 277      =1  #define SetVideoSaturationReg(svstype, vsval) WriteDecoder(SAT_U+svstype, vsval)
 278      =1  
 279      =1  #define GetVideoHueReg()            ReadDecoder(HUE)
 280      =1  #define SetVideoHueReg(vhval)         WriteDecoder(HUE, vhval )
 281      =1  
 282      =1  #define GetVideoSharpnessRegDef         (ReadDecoder(SHARPNESS) & 0x0f) 
 283      =1  
 284      =1  #define GetVideoSharpnessReg()          GetVideoSharpnessRegDef
 285      =1  //#define SetVideoSharpnessReg(vshval)      WriteDecoder(SHARPNESS, vshval )
 286      =1  #define SetVideoSharpnessReg(vshval)      WriteDecoder(SHARPNESS, ((ReadDecoder(SHARPNESS) & 0xf0) | (vshval 
             -& 0x0f) ) );
 287      =1  
 288      =1  #ifdef TW9908
           =1 #define SetVideoVPeakingReg(vshval)
           =1 #else
 291      =1  #define SetVideoVPeakingReg(vshval)       WriteDecoder(V_PEAKING, ((ReadDecoder(V_PEAKING) & 0xf8) | (vshval 
             -& 0x07) ) );
 292      =1  #endif
 293      =1  
 294      =1  #define SetVideoHfilterReg(val)         WriteDecoder(HFILTER, ((ReadDecoder(HFILTER) & 0xf8) | (val & 0x07) )|
             -0x08 );
 295      =1  //----------------------------------------------------------------------------------
 296      =1  //color type
 297      =1  #define RED   0
 298      =1  #define GREEN 1
 299      =1  #define BLUE  2
 300      =1  #define WHITE 3
 301      =1  //saturation type
 302      =1  #define U_SAT 0
 303      =1  #define V_SAT 1
 304      =1  
 305      =1  //Alpha Blending Level
 306      =1  #define _0    0
 307      =1  #define _25   0x12
 308      =1  #define _37_5 0x13
 309      =1  #define _50   0x14
 310      =1  #define _100  0x18
 311      =1  
 312      =1  BYTE GetKey(BYTE repeat);
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 29  

 313      =1  
 314      =1  /*
 315      =1  BYTE Mapping( int fromValue, struct RegisterInfo fromRange,
 316      =1                                   int * toValue, struct RegisterInfo toRange );
 317      =1  */
 318      =1  BYTE Mapping1( int fromValue, CODE_P struct RegisterInfo *fromRange,
 319      =1                                   int * toValue, CODE_P struct RegisterInfo *toRange );
 320      =1  #ifdef KEILC
 321      =1  #define Mapping2( A, B, C, D )      Mapping1( A, B, C, D )
 322      =1  #define Mapping3( A, B, C, D )      Mapping1( A, B, C, D )
 323      =1  #else
           =1 BYTE Mapping2( int fromValue, IDATA_P struct RegisterInfo *fromRange,
           =1                                  int * toValue, CODE_P struct RegisterInfo *toRange );
           =1 BYTE Mapping3( int fromValue, CODE_P struct RegisterInfo *fromRange,
           =1                                  int * toValue, IDATA_P struct RegisterInfo *toRange );
           =1 #endif
 329      =1  
 330      =1  BYTE GetAttributesFromNTSCSettings(BYTE index);
 331      =1  
 332      =1  #endif  // __TW88__
 333      =1  
   8          #include "debug.h"
   1      =1  #ifndef __DEBUG__
   2      =1  #define __DEBUG__
   3      =1  
   4      =1  #define DEBUG_ERR 1
   5      =1  #define DEBUG_WARN  2
   6      =1  #define DEBUG_INFO  3
   7      =1  #define DEBUG_BREAK 4
   8      =1  
   9      =1  #ifdef DEBUG_PAUSE
           =1 #define Pause(a)  { Printf("\r\n"); Printf(a); while(!RS_ready()); RS_rx(); }
           =1 #endif
  12      =1  //#define BURSTLOCK 7
  13      =1  
  14      =1  void DebugWindowControl (void) ;
  15      =1  void Draw_Debug_Char(void);
  16      =1  void DebugWindowCursor( BYTE flag ) ;
  17      =1  void DebugWindowData( BYTE flag ) ;
  18      =1  void Debug_Write(void);
  19      =1  void Debug_Read(void);
  20      =1  
  21      =1  
  22      =1  
  23      =1  #endif  // __DEBUG__
  24      =1  
  25      =1  #ifdef CHIP_MANUAL_TEST
           =1 BYTE DelaynCheck(void);
           =1 void ChipManualTest(void);
           =1 
           =1 #endif
   9          #include "etc_eep.h"
   1      =1  #ifndef __ETC_EEP__
   2      =1  #define __ETC_EEP__
   3      =1  
   4      =1  
   5      =1  ////eeprom.h
   6      =1  
   7      =1  //=========================================================================
   8      =1  //  EEPROM structure
   9      =1  //  0x00  BYTE  4 'TW88'
  10      =1  #define EEP_FWREV_MAJOR     0x04  //BYTE  1 F/W Rev.-major(Hex) 
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 30  

  11      =1  #define EEP_FWREV_MINOR     0x05  //BYTE  1 F/W Rev.-minor(Hex)
  12      =1  #define EEP_DEBUGLEVEL      0x06  //BYTE  1 DebugLevel
  13      =1  //
  14      =1  #define EEP_AUTODETECT      0x07  //BYTE  1 Flag for Input Auto Detect  -0:Auto, 1:NTSC,....
  15      =1  #define EEP_AUTODETECTTYTE    0x08  //BYTE  1 Type of Auto-detect(will be value of register 0x1d)
  16      =1  //      ---------------------------------------------------------------
  17      =1  #define EEP_WIDEMODE      0x09  //BYTE  1   Wide Mode
  18      =1  
  19      =1  #define EEP_AUTORECOGNITION   0x0a  //BYTE  1 Auto Recognition
  20      =1  #define EEP_VIDEOMODE     0x0b  //BYTE  1   Video Mode
  21      =1  
  22      =1  #define EEP_OSDLANG       0x0c  //BYTE  1   OSDLang           // 0
  23      =1  
  24      =1  #define EEP_OSDPOSITIONMODE   0x0d  //BYTE  1 OSD Position Mode
  25      =1  #define EEP_CCD         0x0e  //BYTE  1 Closed Caption- 0: off, 1:on
  26      =1  
  27      =1  #define EEP_INPUTSELECTION    0x0f  //BYTE  1 InputSelection
  28      =1  
  29      =1  //
  30      =1  #define EEP_PC_CONTRAST     0x10
  31      =1  #define EEP_PC_BRIGHT     0x11
  32      =1  
  33      =1  #define EEP_CONTRAST      0x12  //BYTE  1 Contrast 
  34      =1  #define EEP_BRIGHTNESS      0x13  //BYTE  1 Brightness
  35      =1  #define EEP_SATURATION_U    0x14  //BYTE  1 Saturation :U
  36      =1  #define EEP_SATURATION_V    0x15  //BYTE  1 Saturation :V
  37      =1  #define EEP_SHARPNESS     0x16  //BYTE  1 Sharpness 
  38      =1  #define EEP_HUE         0x17  //BYTE  1 Hue                    
  39      =1  
  40      =1  //====================================HS AWT 981001
  41      =1  #define  EEP_AutoMode           0xa0
  42      =1  #define  EEP_IMAGEMode          0xa1
  43      =1  #define  EEP_RearMode           0xa2
  44      =1  #define  EEP_COSDMode           0xa3
  45      =1  #define  EEP_GAUGEMode          0xa4
  46      =1  #define  EEP_CAMAMode           0xa5 
  47      =1  #define  EEP_CAMBMode           0xa6
  48      =1  #define  EEP_CAMCMode           0xa7
  49      =1  #define  EEP_CAMRMode           0xa8
  50      =1  #define  EEP_CAMOutMode         0xa9  
  51      =1  #define  EEP_TimeStep           0xaa
  52      =1  #define  EEP_Powerflag          0xab   
  53      =1  #define  EEP_ONOFFChoice        0xac 
  54      =1  
  55      =1  #define  EEP_PRIORITY           0xad
  56      =1  #define  EEP_JUMPMode           0xae
  57      =1  #define  EEP_NowModeState       0xaf
  58      =1  #define  EEP_SelectMode         0xb0
  59      =1  #define  EEP_PriorityOffSelectMode  0xb1
  60      =1  #define  EEP_AudioRecord    0xb2
  61      =1  
  62      =1  #define  EEP_FirstNumber    0xb3
  63      =1  #define  EEP_SecondNumber   0xb4
  64      =1  #define  EEP_ThridNumber    0xb5
  65      =1  #define  EEP_FourthNumber   0xb6
  66      =1  
  67      =1  #define  EEP_CAMNUMBER     0xb7
  68      =1  #define  EEP_PELCO       0xb8
  69      =1  #define  EEP_Baud_rate     0xb9
  70      =1  #define  EEP_TriggerVGA    0xba
  71      =1  #define  EEP_DVRDisplay    0xbb
  72      =1  #define  EEP_IMAGE_A_Mode    0xbc//andy A1.4 20100113
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 31  

  73      =1  #define  EEP_IMAGE_B_Mode    0xbd//andy A1.4 20100113
  74      =1  #define  EEP_IMAGE_C_Mode    0xbe//andy A1.4 20100113
  75      =1  
  76      =1  #define  EEP_SDCardDetect    0xbf//andy A1.4 20100113
  77      =1  
  78      =1  #ifdef HTRV
           =1 #define  EEP_Gauge_VStart  0x211   //WILLIAM-970318
           =1 static  BYTE GaugeVStart;
           =1 #endif
  82      =1  
  83      =1  #define  EEP_DELAYCAMA           0xC0 
  84      =1  #define  EEP_DELAYCAMB           0xC1
  85      =1  #define  EEP_DELAYCAMC           0xC2
  86      =1  #define  EEP_DELAYCAMR           0xC3
  87      =1  #ifdef USE_CAMD
           =1 #define  EEP_DELAYCAMD           0xC4
           =1 #endif
  90      =1  //#define  EEP_SelectModeBuf         0xb2
  91      =1  #define  EEP_ReverseMode    0xc5
  92      =1  #define  EEP_JUMPAV_TIMESET 0xc6
  93      =1  #if 0
           =1 #define  EEP_Resolution     0xc0
           =1 #define  EEP_FPS        0xc1
           =1 #define  EEP_Quality      0xc2
           =1 #define  EEP_RecordMode     0xc3
           =1 #define  EEP_RecordLength   0xc4
           =1 #define  EEP_PreAlarmLength   0xc5
           =1 #define  EEP_PostAlarmLength  0xc6
           =1 #endif
 102      =1  //====================================HS AWT 981001
 103      =1  
 104      =1  #ifdef AWT_ADD_TRIGGER_DELAY_FUN  
 105      =1  #define  EEP_CamADelay    0x21b
 106      =1  #define  EEP_CamBDelay    0x21c
 107      =1  #define  EEP_CamCDelay    0x21d
 108      =1  #define  EEP_CamRDelay    0x21e
 109      =1  #endif
 110      =1  //====================================
 111      =1  //
 112      =1  //        ---------------------------------------------------------------
 113      =1  #define EEP_PCAUDIOPVOL   0x37  //BYTE  1   AudioVol
 114      =1  #define EEP_AUDIOPVOL     0x38  //BYTE  1   AudioVol
 115      =1  #define EEP_AUDIOBALANCE    0x39  //BYTE  1   AudioBalance
 116      =1  //
 117      =1  //        ---------------------------------------------------------------
 118      =1  
 119      =1  #define EEP_BLOCKMOVIE      0x40  //BYTE  1 BlockedMovie:Blocked rating for Movie 
 120      =1  #define EEP_BLOCKTV       0x41  //BYTE  1 BlockedTV:Blocked rating for TV     
 121      =1  #define EEP_FVSLD       0x42  //BYTE  6
 122      =1  //                            7    6       4    3    2    1    0
 123      =1  //  FVSLD Level                        ALL   FV(V)   S    L    D    
 124      =1  //  0x43    BYTE    1   TV-Y            X  
 125      =1  //  0x44  BYTE    1   TV-Y7           X    X 
 126      =1  //  0x45  BYTE    1   TV-G            X 
 127      =1  //  0x46  BYTE    1   TV-PG           X       X    X    X    X
 128      =1  //  0x47  BYTE    1   TV-14           X       X    X    X    X 
 129      =1  //  0x48  BYTE    1   TV-MA           X       X    X    X
 130      =1  //
 131      =1  #define EEP_VCHIPPASSWORD   0x49  //BYTE  4   OSDPassword         //Defualt:3366
 132      =1  //      ---------------------------------------------------------------
 133      =1  //
 134      =1  //
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 32  

 135      =1  //  0x61  WORD  2   PanelXRes
 136      =1  //  0x63  WORD  2 PanelYRes
 137      =1  //  0x65  BYTE  1 PanelHsyncMinPulseWidth
 138      =1  //  0x66  BYTE  1 PanelVsyncMinPulseWidth
 139      =1  //  0x67  WORD  2 PanelHminBackPorch
 140      =1  //  0x69  BYTE  1 PanelHsyncPolarity
 141      =1  //  0x6a  BYTE  1 PanelVsyncPolarity
 142      =1  //  0x6b  WORD  2 PanelDotClock
 143      =1  //  0x6d  BYTE  1 PanelPixsPerClock
 144      =1  //  0x6e  BYTE  1 PanelDEonly
 145      =1  //      ---------------------------------------------------------------
 146      =1  //
 147      =1  //  0x80  PC Data
 148      =1  //
 149      =1  //      ---------------------------------------------------------------
 150      =1  //
 151      =1  //  0x300 TV Data
 152      =1  //
 153      =1  //  --- NTSC_TV -------------------------------------------------------------
 154      =1  //  CNT_SAVEDAIR      BYTE  1   Total count of saved Air TV Channel.
 155      =1  //  IDX_CURAIR        BYTE  1   Index of Current Air TV Channel
 156      =1  //  CHN_CURAIR        BYTE    1   Current Air TV Channel.
 157      =1  //
 158      =1  //  FIRSTSAVED_AIRCHN   BYTE    1 First saved Air TV channel no (maximum 100)
 159      =1  //  ....
 160      =1  //
 161      =1  //  CNT_SAVEDCABLE      BYTE  1   Total count of saved Cable TV Channel.
 162      =1  //  IDX_CURCABLE      BYTE  1   Index of Current Cable TV Channel
 163      =1  //  CHN_CURCABLE      BYTE    1   Current Cable TV Channel.
 164      =1  //
 165      =1  //  FIRSTSAVED_CABLECHN   BYTE  1 First saved Cable TV channel no (maximum 100)
 166      =1  //
 167      =1  //  --- PAL_TV --------------------------------------------------------------
 168      =1  //  PR_CUR          BYTE  1   Current PR no.
 169      =1  //  FIRST_SAVEDPR     DWORD 4   Freq of PR0.  (TOTAL_PR)
 170      =1  //  FIRST_SAVEDPR+4     DWORD   4   Freq of PR1.
 171      =1  //  .....
 172      =1  //
 173      =1  
 174      =1  
 175      =1  
 176      =1  //
 177      =1  // Offset of EEPROM
 178      =1  //
 179      =1  /*
 180      =1  #define VIDEOCONTRAST   0x18    // for NTSC.(PAL:0x20,SECAM:0x28)
 181      =1  #define VIDEOBRIGHTNESS   0x19
 182      =1  #define VIDEOSATURATION_U 0x1a
 183      =1  #define VIDEOSATURATION_V 0x1b
 184      =1  #define VIDEOHUE      0x1c    // only for NTSC
 185      =1  #define VIDEOSHARPNESS    0x1d
 186      =1  */
 187      =1  #define CCCOLOR   0x52
 188      =1  #define VOLZOOM   0x53
 189      =1  
 190      =1  #define PANELINFO 0x61
 191      =1  
 192      =1  // PAL_TV
 193      =1  #define  PR_CUR         0x301 
 194      =1  #define  FIRST_SAVEDPR      0x308 
 195      =1   #define TVFREQ_HIGH 0 
 196      =1   #define TVFREQ_LOW  1
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 33  

 197      =1  #ifdef PAL_TV
           =1  #define TVFINETUNE  2
           =1     // NOT Finetune: 0 , Range: -32 ~ +32
           =1  #define TVPRSYSTEM  3  
           =1     // bit 7: Add:1 Ereased :0
           =1     // 
           =1  #define TVCHNAME    4
           =1 
           =1  #define BYTEPERCHANNEL 9 
           =1 #endif
 207      =1  // NTSC_TV
 208      =1  #define  EEP_TVInputSel     0x302
 209      =1  #define  CHN_CURAIR       0x303 
 210      =1  #define  FIRSTSAVED_AIRCHN    0x308 
 211      =1  #define  CHN_CURCABLE     0x403 
 212      =1  #define  FIRSTSAVED_CABLECHN  0x408 
 213      =1  #ifdef NTSC_TV
           =1  #define TVFINETUNE  0
           =1     // NOT Finetune: 0 , Range: -32 ~ +32
           =1  #define TVPRSYSTEM  1  
           =1     // bit 7: Add:1 Ereased :0
           =1     // 
           =1  #define BYTEPERCHANNEL 2
           =1 #endif
 221      =1  
 222      =1  
 223      =1  
 224      =1  
 225      =1  WORD GetFWRevEE(void);
 226      =1  void SaveFWRevEE(WORD);
 227      =1  
 228      =1  BYTE GetDebugLevelEE(void);
 229      =1  void SaveDebugLevelEE(BYTE);
 230      =1  
 231      =1  #ifdef WIDE_SCREEN
           =1 BYTE GetWideModeEE(void);
           =1 void SaveWideModeEE(BYTE dl);
           =1 #endif
 235      =1  
 236      =1  
 237      =1  //BYTE GetRange4CoarseEE(void);
 238      =1  //void SaveRange4CoarseEE(BYTE);
 239      =1  
 240      =1  BYTE GetPossibleAutoDetectStdEE(void);
 241      =1  void SetPossibleAutoDetectStdEE(void);
 242      =1  
 243      =1  //BYTE GetOSDXPositionEE(void);
 244      =1  //BYTE GetOSDYPositionEE(void);
 245      =1  BYTE GetClosedCaptionFlagEE(void);
 246      =1  
 247      =1  BYTE GetVideoDatafromEE(BYTE);
 248      =1  void SaveVideoDatatoEE(BYTE offset, BYTE ndata);
 249      =1  
 250      =1  //BYTE GetVideoBrightnessEE(void);
 251      =1  //BYTE GetVideoSaturationEE(BYTE);
 252      =1  //BYTE GetVideoHueEE(void);
 253      =1  //BYTE GetVideoSharpnessEE(void);
 254      =1  
 255      =1  //void SaveVideoContrastEE(BYTE ndata);
 256      =1  //void SaveVideoBrightnessEE(BYTE ndata);
 257      =1  //void SaveVideoSaturationEE(BYTE, BYTE ndata);
 258      =1  //void SaveVideoHueEE(BYTE ndata);
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 34  

 259      =1  //void SaveVideoSharpnessEE(BYTE ndata);
 260      =1  
 261      =1  BYTE GetOSDPositionModeEE(void);
 262      =1  void SaveOSDPositionModeEE(BYTE ndata);
 263      =1  //void SaveOSDXPositionEE(BYTE);
 264      =1  //void SaveOSDYPositionEE(BYTE);
 265      =1  
 266      =1  void SaveClosedCaptionFlagEE(BYTE);
 267      =1  
 268      =1  BYTE GetBlockedTVEE(void);      
 269      =1  void SaveBlockedTVEE(BYTE vi);    
 270      =1  BYTE GetBlockedTV_FLDSLEE( BYTE level ) ;
 271      =1  void SaveBlockedTV_FLDSLEE(BYTE level, BYTE vi) ;
 272      =1  
 273      =1  BYTE GetBlockedMovieEE(void);   
 274      =1  void SaveBlockedMovieEE(BYTE vi); 
 275      =1  #if 0
           =1 BYTE GetInputSelectionEE(void);
           =1 #endif
 278      =1  void SaveInputSelectionEE(BYTE val);
 279      =1  
 280      =1  //BYTE GetOSDDurationEE(void);
 281      =1  //void SaveOSDDurationEE(BYTE val);
 282      =1  
 283      =1  BYTE GetOSDLangEE(void);
 284      =1  void SaveOSDLangEE(BYTE val);
 285      =1  
 286      =1  //ljy100303...BYTE GetOSDZoomEE(void);
 287      =1  //ljy100303...void SaveOSDZoomEE(BYTE val);
 288      =1  
 289      =1  BYTE GetAudioVolEE(void);
 290      =1  void SetAudioVolEE( BYTE vol );
 291      =1  BYTE GetPCAudioVolEE(void);
 292      =1  void SetPCAudioVolEE( BYTE vol );
 293      =1  #if 0
           =1 BYTE GetAudioBalanceEE(void);
           =1 void SetAudioBalanceEE( BYTE vol );
           =1 BYTE GetAudioBassEE(void);
           =1 void SetAudioBassEE( BYTE vol );
           =1 BYTE GetAudioTrebleEE(void);
           =1 void SetAudioTrebleEE( BYTE vol );
           =1 #endif
 301      =1  //BYTE GetAudioEffectEE(void);
 302      =1  //void SetAudioEffectEE( BYTE vol );
 303      =1  
 304      =1  void ClearBasicEE(void);
 305      =1  
 306      =1  BYTE ValidPassword(DATA_P BYTE *numstr, BYTE index);
 307      =1  BYTE SetNewPassword(DATA_P BYTE *numstr, BYTE index);
 308      =1  
 309      =1  //WORD GetPanelXRes(void);
 310      =1  //WORD GetPanelYRes(void);
 311      =1  BYTE GetPanelHsyncMinPulseWidth(void);
 312      =1  BYTE GetPanelVsyncMinPulseWidth(void);
 313      =1  WORD GetPanelHMinBackPorch(void);
 314      =1  BYTE GetPanelHsyncPolarity(void);
 315      =1  BYTE GetPanelVsyncPolarity(void);
 316      =1  WORD GetPanelDotClock(void);
 317      =1  WORD GetPanelMaxClock(void);
 318      =1  BYTE GetPanelPixsPerClock(void);
 319      =1  // Not used yet *************************  BYTE GetPanelDEonly(void);
 320      =1  
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 35  

 321      =1  void AddTVChannelEE( BYTE tvtype, BYTE chn);
 322      =1  BYTE GetTVChannelEE( BYTE tvtype, BYTE inx);
 323      =1  void ResetTVChannelEE( BYTE tvtype );
 324      =1  BYTE GetTVChannelCntEE(BYTE tvtype);
 325      =1  BYTE GetTVChnIdxEE(BYTE tvtype);
 326      =1  BYTE GetCurTVChannelEE(BYTE tvtype);
 327      =1  void SetTVChnIdxEE(BYTE tvtype, BYTE newd);
 328      =1  void SetCurTVChannelEE(BYTE tvtype, BYTE newd);
 329      =1  BYTE InsertTVChannelEE(BYTE tvtype, BYTE newd);
 330      =1  BYTE RemoveTVChannelEE(BYTE tvtype, BYTE newd);
 331      =1  
 332      =1  void SetTVPrEE(void);
 333      =1  BYTE GetTVPrEE(void);
 334      =1  void SetTVFreqEE(BYTE, WORD);
 335      =1  WORD GetTVFreqEE(BYTE);
 336      =1  void SetFineTuneEE(BYTE, BYTE);
 337      =1  BYTE GetFineTuneEE(BYTE);
 338      =1  BYTE GetTVPrSystem(BYTE);
 339      =1  void SetTVPrSystem(BYTE, BYTE);
 340      =1  BYTE GetTVInputSelEE(void);
 341      =1  void SetTVInputSelEE(BYTE);
 342      =1  
 343      =1  #define GetVInputStdDetectModeEE()        ReadEEP(EEP_AUTODETECTTYTE)
 344      =1  #define SaveVInputStdDetectModeEE(A)      WriteEEP(EEP_AUTODETECTTYTE, A)
 345      =1  
 346      =1  #define GetAutoRecogntionEE()         ReadEEP(EEP_AUTORECOGNITION)
 347      =1  #define SaveAutoRecogntionEE(A)         WriteEEP(EEP_AUTORECOGNITION, A)
 348      =1  
 349      =1  #define SetVideoModeEE( ctid )          WriteEEP( EEP_VIDEOMODE, ctid )
 350      =1  #define GetVideoModeEE()            ReadEEP( EEP_VIDEOMODE )
 351      =1  
 352      =1  #define GetPanelContrastEE()          ReadEEP(0x10)
 353      =1  
 354      =1  #if defined( SUPPORT_PC ) || defined( SUPPORT_DTV )
           =1 //#define GetPanelHueEE()             ReadEEP(0x28)
           =1 //#define GetPanelSharpnessEE()         ReadEEP(0x29)
           =1 #define GetPanelBrightnessEE()          ReadEEP(0x11)
           =1 //#define GetPanelSaturationEE()          ReadEEP(0x2a)
           =1 
           =1 //#define SavePanelHueEE(A)           WriteEEP(0x28, A)
           =1 //#define SavePanelSharpnessEE(A)         WriteEEP(0x29, A)
           =1 #define SavePanelContrastEE(A)          WriteEEP(0x10, A)
           =1 #define SavePanelBrightnessEE(A)        WriteEEP(0x11, A)
           =1 //#define SavePanelSaturationEE(A)        WriteEEP(0x2a, A)
           =1 #endif
 366      =1  
 367      =1  /*
 368      =1  #define GetDigitalVideoContrastEE()       ReadEEP(0x2b)
 369      =1  #define GetDigitalVideoBrightnessEE()     ReadEEP(0x2c)
 370      =1  #define GetDigitalVideoHueEE()          ReadEEP(0x2d)
 371      =1  #define GetDigitalVideoSaturationEE(off)    ReadEEP(0x2e+off)
 372      =1  
 373      =1  #define SaveDigitalVideoContrastEE(A)     WriteEEP(0x2b, A)
 374      =1  #define SaveDigitalVideoBrightnessEE(A)     WriteEEP(0x2c, A)
 375      =1  #define SaveDigitalVideoHueEE(A)        WriteEEP(0x2d, A)
 376      =1  #define SaveDigitalVideoSaturationEE(off,A)   WriteEEP(0x2e+off, A)
 377      =1  */
 378      =1  
 379      =1  #endif  // __ETC_EEP__
  10          #include "pc_eep.h"
   1      =1  #ifndef __PC_EEP__
   2      =1  #define __PC_EEP__
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 36  

   3      =1  
   4      =1  
   5      =1  // -----------------------------------------------------------------------------
   6      =1  #define PC_COLOR_DATA 0x80  // StartAddress of EEPROM for PC Color Temperature
   7      =1  #define PC_USERCOLOR  0x8A
   8      =1  #define SetPCColorTempModeEE( ctid )      WriteEEP( PC_COLOR_DATA, ctid )
   9      =1  #define GetPCColorTempModeEE()          ReadEEP( PC_COLOR_DATA )
  10      =1  
  11      =1  #define GetPCUserColorTempEE( ucolorr)      ReadEEP( PC_USERCOLOR+ucolorr )
  12      =1  #define SavePCUserColorTempEE( ucolorw, uval) WriteEEP( PC_USERCOLOR+ucolorw, uval )
  13      =1  #define GetPCColorEE(index)           ReadEEP(index)
  14      =1  
  15      =1  // -----------------------------------------------------------------------------
  16      =1  #define EE_ADC_GO   0x90  // ADC Gain Offset for PC
  17      =1  #define EE_ADC_GO_DTV 0x98  // ADC Gain Offset for DTV
  18      =1  
  19      =1  #define EE_PCDATA   0xC0  // StartAddress of EEPROM for PCDATA
  20      =1  #define LEN_PCDATA    5   // Length of PCDATA
  21      =1  
  22      =1  WORD GetHPNfromEE(BYTE mode);
  23      =1  
  24      =1  BYTE CheckPcDataEEValid(BYTE, WORD);
  25      =1  
  26      =1  WORD GetVactiveStartEE(BYTE mode);
  27      =1  WORD GetHactiveStartEE(BYTE mode);
  28      =1  
  29      =1  void GetPCDataEE(BYTE mode);
  30      =1  void SavePCDataEE(BYTE mode);
  31      =1  void SaveDefaultPCDataEE(void);
  32      =1  void SaveDefaultPCDataAllEE(void);
  33      =1  
  34      =1  void SaveHactiveEE(BYTE mode);
  35      =1  void SaveVactiveEE(BYTE mode);
  36      =1  void SaveVBackPorchEE(BYTE mode);
  37      =1  void SaveCoarseEE(BYTE mode);
  38      =1  void SavePhaseEE(BYTE mode);
  39      =1  /*
  40      =1  WORD GetHactiveStartEE(BYTE mode);
  41      =1  WORD GetVactiveStartEE(BYTE mode);
  42      =1  */
  43      =1  void DumpPCData(void);
  44      =1  
  45      =1  void SaveActiveVEE(WORD);
  46      =1  void SaveBackPorchEE(BYTE);
  47      =1  void SaveActiveHEE(WORD);
  48      =1  
  49      =1  void SaveADCGainOffsetEE(BYTE mod);
  50      =1  void GetADCGainOffsetEE(void);
  51      =1  
  52      =1  void SaveADCGainOffsetForDTVEE(BYTE mod);
  53      =1  void GetADCGainOffsetForDTVEE(void);
  54      =1  
  55      =1  #endif  // __PC_EEP__
  11          #include "measure.h"
   1      =1  #ifndef __MEASURE__
   2      =1  #define __MEASURE__
   3      =1  
   4      =1  #define EE_DOS        0
   5      =1  
   6      =1  #define EE_SP1        1
   7      =1  #define EE_SP2        2
   8      =1  #define EE_SP3        3
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 37  

   9      =1  
  10      =1  #define EE_VGA_60     4
  11      =1  #define EE_VGA_66     5
  12      =1  #define EE_VGA_70     6
  13      =1  #define EE_VGA_72     7
  14      =1  #define EE_VGA_75     8
  15      =1  #define EE_VGA_85     9
  16      =1  
  17      =1  #define EE_SVGA_56      10
  18      =1  #define EE_SVGA_60      11
  19      =1  #define EE_SVGA_70      12
  20      =1  #define EE_SVGA_72      13
  21      =1  #define EE_SVGA_75      14
  22      =1  #define EE_SVGA_85      15
  23      =1  
  24      =1  #define EE_832_75     16
  25      =1  
  26      =1  #define EE_XGA_60     17
  27      =1  #define EE_XGA_70     18
  28      =1  #define EE_XGA_72     19
  29      =1  #define EE_XGA_75     20
  30      =1  #define EE_XGA_85     21
  31      =1  
  32      =1  #define EE_1152_60      22
  33      =1  #define EE_1152_70      23
  34      =1  #define EE_1152_75      24
  35      =1  
  36      =1  #define EE_SXGA_60      25
  37      =1  #define EE_SXGA_70      26
  38      =1  #define EE_SXGA_75      27
  39      =1  
  40      =1  #define EE_RGB_480P     28
  41      =1  #define EE_RGB_720P     29
  42      =1  #define EE_RGB_720P50   30
  43      =1  #define EE_RGB_1080I    31
  44      =1  #define EE_RGB_1080I50A   32
  45      =1  #define EE_RGB_1080I50B   33
  46      =1  #define EE_RGB_480I     34
  47      =1  #define EE_RGB_576I     35
  48      =1  #define EE_RGB_576P     36
  49      =1  
  50      =1  #define EE_YPbPr_480P   37
  51      =1  #define EE_YPbPr_720P   38
  52      =1  #define EE_YPbPr_720P50   39
  53      =1  #define EE_YPbPr_1080I    40
  54      =1  #define EE_YPbPr_1080I50A 41
  55      =1  #define EE_YPbPr_1080I50B 42
  56      =1  #define EE_YPbPr_480I   43
  57      =1  #define EE_YPbPr_576I   44
  58      =1  #define EE_YPbPr_576P   45
  59      =1  
  60      =1  #define EE_PC_MAX     46
  61      =1  
  62      =1  #define EE_PC_NO_SIGNAL   0xfe
  63      =1  #define EE_PC_UNKNOWN   0xff
  64      =1  
  65      =1  struct _PCMDATA {
  66      =1    CODE_P BYTE  Support;
  67      =1    CODE_P WORD  HAN;
  68      =1    CODE_P WORD  VAN;
  69      =1    CODE_P WORD  IVF;
  70      =1    CODE_P WORD  CLOCK;
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 38  

  71      =1    CODE_P WORD  low;
  72      =1    CODE_P WORD  high;
  73      =1    CODE_P WORD  Hstart;
  74      =1    CODE_P WORD  Vstart;
  75      =1    CODE_P WORD  IPF;   // 0.1MHz
  76      =1    CODE_P WORD  PPF;   // 0.1MHz
  77      =1    CODE_P BYTE  VBack;
  78      =1  };
  79      =1  #ifndef AUTOCALC_PC
           =1 
           =1 #ifdef SUPPORT_DTV
           =1 struct _DTVMDATA {
           =1   CODE_P BYTE Reg62;
           =1   CODE_P BYTE RegBC;
           =1   CODE_P BYTE RegBD;
           =1   CODE_P BYTE RegBE;
           =1   CODE_P WORD PHP;
           =1 };
           =1 #endif
           =1 #endif
  91      =1  #if defined XGA
           =1   #define MAX_PPF    90000000
           =1 #elif defined SXGA
           =1   #define MAX_PPF   135000000
           =1 #elif defined WXGA
           =1   #define MAX_PPF    90000000
           =1 #elif defined WVGA
  98      =1    #define MAX_PPF    90000000
  99      =1  #elif defined VGA
           =1   #define MAX_PPF    50000000
           =1 #elif defined SVGA
           =1   #define MAX_PPF    80000000
           =1 #elif defined QVGA
           =1   #define MAX_PPF    30000000
           =1 #elif defined WQVGA
           =1   #define MAX_PPF    30000000
           =1 #endif
 108      =1  
 109      =1  extern BYTE cLastSyncLoss;
 110      =1  extern BYTE PcMode;
 111      =1  
 112      =1  void CompLT170E2(void);
 113      =1  
 114      =1  WORD gap(WORD a, WORD b);
 115      =1  
 116      =1  //===================================================================
 117      =1  WORD GetHpnVpn(BYTE);
 118      =1  
 119      =1  WORD ConvertBasedOnInput(WORD dat);
 120      =1  
 121      =1  BYTE IsDTVInput(void);
 122      =1  
 123      =1  void SetVValueForPanel(WORD vstart);
 124      =1  BYTE SetHValueForPanel(void);
 125      =1  BYTE GetActiveRegion(void);
 126      =1  
 127      =1  BYTE DetectAndSetForVGAInput(BYTE);
 128      =1  #ifdef SUPPORT_DTV
           =1 BYTE DetectAndSetForDTVInput(BYTE);
           =1 #endif
 131      =1  void CheckPCinput(void);
 132      =1  void CheckDTVinput(void);
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 39  

 133      =1  
 134      =1  WORD GetCoarseValue(void);
 135      =1  BYTE GetPhaseValue(void);
 136      =1  WORD SetPCCoarseValue(BYTE val);
 137      =1  BYTE SetPhaseValue(BYTE val);
 138      =1  
 139      =1  void DisplayResultAndSetActiveRange(void);
 140      =1  
 141      =1  //=============================================================================
 142      =1  //                    PC Screen Position Move Functions
 143      =1  //=============================================================================
 144      =1  void MoveActiveVpos(BYTE val);    // Up/Down
 145      =1  void MoveActiveHpos(BYTE val);    // Left/Right
 146      =1  
 147      =1  BYTE GetVPosition(void);
 148      =1  BYTE SetVPosition(BYTE val);
 149      =1  BYTE GetHPosition(void);
 150      =1  BYTE SetHPosition(BYTE val);
 151      =1  
 152      =1  void ResetPCValue(void);
 153      =1  
 154      =1  CODE_P BYTE *GetPCInputSourceName(void);
 155      =1  BYTE AutoAdjust(void);
 156      =1  
 157      =1  #endif // __MEASURE__
  12          #include "adc.h"
   1      =1  #ifndef __ADC__
   2      =1  #define __ADC__
   3      =1  
   4      =1  //=============================================================================
   5      =1  //                             ADC Functions
   6      =1  //=============================================================================
   7      =1  
   8      =1  void ADCPowerDown(bit flag);
   9      =1  void SelectADCmux(BYTE sel);
  10      =1  void SetADCMode(BYTE mode);
  11      =1  
  12      =1  void EnableADC(void);
  13      =1  void DisableADC(void);
  14      =1  
  15      =1  WORD GetCoarse(void);
  16      =1  void SetCoarse(WORD i);
  17      =1  void SetPhase(BYTE j);
  18      =1  BYTE GetPhaseCurrent(void);
  19      =1  BYTE SetVCORange(DWORD _IPF);
  20      =1  
  21      =1  //void SetADCGainOffset(BYTE gain, BYTE offset);
  22      =1  void AutoColorAdjust(void);
  23      =1  
  24      =1  void AutoColorAdjustForDTV(BYTE flag);
  25      =1  
  26      =1  #endif  // __ADC__
  27      =1  
  28      =1  
  29      =1  
  30      =1  
  31      =1  
  32      =1  
  33      =1  
  34      =1  
  35      =1  
  36      =1  
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 40  

  37      =1  
  38      =1  
  39      =1  
  40      =1  
  41      =1  
  42      =1  
  43      =1  
  44      =1  
  45      =1  
  46      =1  
  47      =1  
  48      =1  
  49      =1  
  50      =1  
  51      =1  
  52      =1  
  13          #include "CPU.h"
   1      =1  #ifndef __CPU__
   2      =1  #define __CPU__
   3      =1  
   4      =1  /*
   5      =1  #ifdef INTERNAL_MCU
   6      =1  #define I2C_SCL   P2_0
   7      =1  #else
   8      =1  #define I2C_SCL   P1_0
   9      =1  #endif
  10      =1  #define I2C_SDA   P1_1
  11      =1  */
  12      =1  #define I2C_SCL     P1_0
  13      =1  #define I2C_SDA     P1_1
  14      =1  #ifdef SUPPORT_SDCARD  //ryan@20170824 
           =1 #define BUF_MAX     8
           =1 #define DVR_BUF_MAX   30
           =1 #else
  18      =1  #define BUF_MAX     20
  19      =1  #define DVR_BUF_MAX   8
  20      =1  #endif
  21      =1  
  22      =1  #ifdef REMO_RC5
           =1 #define EnableRemoconInt()  { RemoDataReady = 0;  EX0 = 1;}
           =1 #endif
  25      =1  void  InitCPU(void);
  26      =1  void  InitVars(void);
  27      =1  void  InitTechwell(void);
  28      =1  void  main_init (void);
  29      =1  void  PowerDown( void );
  30      =1  #if 0
           =1 BYTE  OKSleepTime(void);
           =1 #endif
  33      =1  #ifdef REMO_RC5
           =1 void  InitForRemo(void);
           =1 #endif
  36      =1  void  PowerLED(BYTE flag);
  37      =1  void    Wait_ms(WORD Tms);
  38      =1  BYTE    TW2835Command(char,char,char,char,char);
  39      =1  
  40      =1  #ifdef Monitor_debug
  41      =1  BYTE RS_rx(void);
  42      =1  #endif
  43      =1  
  44      =1  #endif
  45      =1  
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 41  

  14          #include "Printf.h"
   1      =1  #ifndef __PRINTF__
   2      =1  #define __PRINTF__
   3      =1  
   4      =1  #define _outchar(c) while(1) { if( !RS_Xbusy ) { SBUF = c; RS_Xbusy=1; break; } }
   5      =1  #define Putch(c) _outchar(c)
   6      =1  
   7      =1  #ifdef SERIAL
   8      =1  
   9      =1   void Printf ( const char CODE_P *fmt, ... );
  10      =1   void Puts ( CODE_P char *ptr );
  11      =1  
  12      =1  #define TW2835Cmd(a)   Puts ( a )
  13      =1  
  14      =1  #else
           =1 
           =1  #undef  DEBUG
           =1  #define Printf(a,b)  //
           =1  #define Puts(a)      //
           =1 
           =1 #endif
  21      =1  
  22      =1  
  23      =1  #ifndef DEBUG
  24      =1  
  25      =1   #define dPuts(a)   //
  26      =1   #define wPuts(a)   //
  27      =1   #define ePuts(a)   //
  28      =1  
  29      =1  #else
           =1 
           =1  void dPrintf( const char CODE_P *fmt, ... );
           =1  void wPrintf( const char CODE_P *fmt, ... );
           =1  void ePrintf( const char CODE_P *fmt, ... );
           =1 
           =1  void dPuts( CODE_P char *ptr );
           =1  void wPuts( CODE_P char *ptr );
           =1  void ePuts( CODE_P char *ptr );
           =1 
           =1 #endif  // DEBUG
  40      =1  
  41      =1  BYTE Getch(void);
  42      =1  BYTE Getche(void);
  43      =1  
  44      =1  
  45      =1  #endif  //__PRINTF__
  15          #include "rgbmix.h"   // for TW8801
   1      =1  #ifndef __RGBMIX__
   2      =1  #define __RGBMIX__
   3      =1  
   4      =1  #include "RegMap.h"
   1      =2  #ifndef __REGMAP__
   2      =2  #define __REGMAP__
   3      =2  
   4      =2  //-----------------------------------------------------------------------------
   5      =2  //        Individual Decoder Registers 
   6      =2  //-----------------------------------------------------------------------------
   7      =2  
   8      =2  #define MCU_STOP_MODE 0xc8  // bit 7 is mcu stop, bit5 is MCU debug
   9      =2  
  10      =2  #define LAD0      0xc9  // Low speed AD channel 0
  11      =2  #define LAD1      0xca  // Low speed AD channel 1
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 42  

  12      =2  
  13      =2  #define REG_PAGE    0xff
  14      =2  #define STATUS0     0xd0
  15      =2  #define STATUS1     0xd1
  16      =2  #define IRQ_EN1     0xd2
  17      =2  #define IRQ_EN0     0xd3
  18      =2  
  19      =2  //-----------------------------------------------------------------------------
  20      =2  //        Individual Decoder Registers 
  21      =2  //-----------------------------------------------------------------------------
  22      =2  
  23      =2  #define DECODERADDRESS  TW88I2CAddress
  24      =2  
  25      =2  #define CVFMT     0x1e  // Component Video Format
  26      =2  #define FBSHIFT     0x38  // RGB Anti-Alias Filter/FB Shift Level
  27      =2  #define SHUE      0x3e  // RGB Hue
  28      =2  #define SCONTRAST   0x3b  // RGB Contrast
  29      =2  #define SBRIGHT     0x3a  // RGB Brightness
  30      =2  #define SCbGAIN     0x3c  // RGB Cb Gain
  31      =2  #define SCrGAIN     0x3d  // RGB Cb Gain
  32      =2  #define RGBCONTROL    0x36  // RGB Powerdown..
  33      =2  #define RGBMISC     0x39
  34      =2  #define FBCONTRL    0x3F
  35      =2  
  36      =2  //#define OSD_ADJ     0xce
  37      =2  #define PNLSHARPNESS  0x78  // Sharpness Control
  38      =2  #define OSDWINSTATUS  0x95
  39      =2  //-----------------------------------------------------------------------------
  40      =2  //        Common Registers
  41      =2  //-----------------------------------------------------------------------------
  42      =2  #define CSTATUS     0x01  // Chip Status
  43      =2  #define INFORM      0x02  // Input Format
  44      =2  #define ACNTL     0x06  // Analog Control
  45      =2  #define CROP_HI     0x07  // Cropping High
  46      =2  #define VDELAY_LO   0x08  // Vertical Delay Low
  47      =2  #define VACTIVE_LO    0x09  // Vertical Active Low
  48      =2  #define HDELAY_LO   0x0a  // Horizontal Delay Low
  49      =2  #define HACTIVE_LO    0x0b  // Horizontal Active Low
  50      =2  #define CNTRL1      0x0c  // Control 1
  51      =2  
  52      =2  #define BRIGHT      0x10  // Brightness Control
  53      =2  #define CONTRAST    0x11  // Contrast Control
  54      =2  #define SHARPNESS   0x12  // Sharpness Control
  55      =2  #define SAT_U     0x13  // Chroma(U) Gain
  56      =2  #define SAT_V     0x14  // Chroma(V) Gain
  57      =2  #define HUE       0x15  // Hue Conrol
  58      =2  #define V_PEAKING   0x17  // Vertical Peaking
  59      =2  
  60      =2  #define CC_STATUS   0x1a  // CC/EDS Status
  61      =2  #define CC_DATA     0x1b  // CC/EDS Data
  62      =2  #define SDT       0x1c  // Standard Selection
  63      =2  #define SDTR      0x1d  // Standard Recognition
  64      =2  
  65      =2  #define V_CONTROL2    0x29  // Vertical Control II
  66      =2  #define HFILTER     0x2c
  67      =2  #define MISC1     0x2d  // Miscellaneous Control 1
  68      =2  #define MISC2     0x2e  // Miscellaneous Control 2
  69      =2  #define MISC3     0x2f  // Miscellaneous Control 2
  70      =2  
  71      =2  #define VBI_CNTL2   0x34  // VBI control 2 - WSSEN
  72      =2  #define CC_ODDLINE    0x35  // CC Odd Line
  73      =2  
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 43  

  74      =2  #define LADC0     0xc9  //LADC Channel 0 Input Value 
  75      =2  #define LADC1     0xca  //LADC Channel 1 Input Value 
  76      =2  
  77      =2  #define WriteDecoder(index, val)    WriteTW88( index, val )
  78      =2  #define ReadDecoder(index)        ReadTW88( index )
  79      =2  
  80      =2  #endif // __REGMAP__
  81      =2  
   5      =1  
   6      =1  //#define SetDigitalVideoContrastReg(vcval)       WriteTW88(0x3b, vcval)
   7      =1  //#define SetDigitalVideoBrightnessReg(vbval)       WriteTW88(0x3c, vbval )
   8      =1  //#define SetDigitalVideoHueReg(vhval)          WriteTW88(0x32, vhval )
   9      =1  //#define SetDigitalVideoSaturationReg(gain, vhval)   WriteTW88(0x3d+gain, (ReadTW88(0x3d+gain)&0x80) + vhv
             -al )
  10      =1  #define SetDigitalVideoContrastReg(vcval)       WriteI2C(DECODERADDRESS, SCONTRAST, vcval)
  11      =1  #define SetDigitalVideoBrightnessReg(vbval)       WriteI2C(DECODERADDRESS, SBRIGHT, vbval )
  12      =1  #define SetDigitalVideoHueReg(vhval)          WriteI2C(DECODERADDRESS, SHUE,  vhval )
  13      =1  #define SetDigitalVideoSaturationReg(gain, vhval)   WriteI2C(DECODERADDRESS, SCbGAIN+gain, (ReadI2C(DECODER
             -ADDRESS, SCbGAIN+gain)&0x80) + vhval )
  14      =1  
  15      =1  #endif // __RGBMIX__
  16          #include "panel.h"
   1      =1  //PanelConfig
   2      =1  
   3      =1    #if   defined SXGA
           =1             #define PHR_ 1280
           =1             #define PVR_ 1024
           =1   #elif defined XGA 
           =1             #define PHR_ 1024
           =1             #define PVR_ 768
           =1   #elif defined SVGA
           =1             #define PHR_ 800
           =1             #define PVR_ 600
           =1   #elif defined VGA
           =1             #define PHR_ 640
           =1             #define PVR_ 480
           =1   #elif defined QVGA
           =1             #define PHR_ 320
           =1             #define PVR_ 240
           =1   #elif defined WXGA
           =1             #define PHR_ 1280 //1366
           =1             #define PVR_ 768
           =1   #elif defined WSVGA
           =1             #define PHR_ 1024
           =1             #define PVR_ 600
           =1   #elif defined WVGA
  25      =1              #define PHR_ 800
  26      =1              #define PVR_ 480//600
  27      =1    #elif defined WQVGA
           =1         //    #define PHR_ 960 //480
           =1         //    #define PVR_ 237
           =1             #define PHR_ 480 //480
           =1             #define PVR_ 240
           =1   #endif
  33      =1  
  34      =1   
  35      =1  
  36      =1  /*
  37      =1  #define ACTIVE_LOW      0
  38      =1  #define ACTIVE_HIGH     1
  39      =1  
  40      =1  CODE struct PanelConfig {
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 44  

  41      =1    unsigned    x_res,          y_res;
  42      =1    unsigned char h_sync_min_pulse_width, v_sync_min_pulse_width;
  43      =1    unsigned    h_min_back_porch;
  44      =1    unsigned char h_sync_polarity,    v_sync_polarity;
  45      =1    unsigned    dot_clock,        max_clock;      // in unit Mhz*10
  46      =1    unsigned char pixs_per_clock;
  47      =1    unsigned char DE_only;
  48      =1  } PanelConfig=
  49      =1    {
  50      =1    //----------------------------------------------------
  51      =1    #ifdef WXGA
  52      =1    //LG  LM171W01 WXGA
  53      =1    1280,     768,
  54      =1    8,        1,
  55      =1    8,
  56      =1    ACTIVE_LOW,   ACTIVE_LOW,
  57      =1    #ifdef DOUBLE_PIXEL
  58      =1    320,      470,
  59      =1    2,
  60      =1    #else
  61      =1    650,      950,          //65Mhz
  62      =1    1,
  63      =1    #endif
  64      =1    0
  65      =1    //----------------------------------------------------
  66      =1    #elif defined XGA
  67      =1    //Samsung  LT150x1-151 XGA
  68      =1    1024,     768,
  69      =1    68,       1,
  70      =1    80,
  71      =1    ACTIVE_LOW,   ACTIVE_LOW,
  72      =1    #ifdef DOUBLE_PIXEL
  73      =1    325,      400,          //32.5Mhz
  74      =1    2,
  75      =1    #else
  76      =1    650,      800,
  77      =1    1,
  78      =1    #endif
  79      =1    0
  80      =1    //----------------------------------------------------
  81      =1    #elif defined SXGA
  82      =1    //Samsung  LT170E2-131  SXGA
  83      =1    1280,     1024,
  84      =1    1,        1,
  85      =1    1,
  86      =1    ACTIVE_LOW,   ACTIVE_LOW,
  87      =1    #ifdef DOUBLE_PIXEL
  88      =1    540,      540,          //54.5Mhz
  89      =1    2,
  90      =1    #else
  91      =1    1080,     1080,
  92      =1    1,
  93      =1    #endif
  94      =1    0
  95      =1    //----------------------------------------------------
  96      =1    #elif defined WSVGA           // Thosiba
  97      =1    1024,     600,
  98      =1    8,        3,
  99      =1    1,//80,       
 100      =1    ACTIVE_LOW,   ACTIVE_LOW,
 101      =1    #ifdef DOUBLE_PIXEL
 102      =1    325,      450,
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 45  

 103      =1    2,
 104      =1    #else
 105      =1    500,      550,          //50Mhz
 106      =1    1,
 107      =1    #endif
 108      =1    0
 109      =1    //----------------------------------------------------
 110      =1  
 111      =1    #elif defined SVGA
 112      =1    //NEC NL8060AC26-11 SVGA
 113      =1    800,      600,
 114      =1    2,        1,
 115      =1    13,
 116      =1    ACTIVE_LOW,   ACTIVE_LOW,
 117      =1    #ifdef DOUBLE_PIXEL
 118      =1    384,      500,          //38.4MHz
 119      =1    2,
 120      =1    #else
 121      =1    670,      1000,
 122      =1    1,
 123      =1    #endif
 124      =1    0
 125      =1    //----------------------------------------------------
 126      =1    #elif defined VGA
 127      =1    //NEC NL6448AC33  VGA         // OK with SetPanelRegisters
 128      =1    640,      480,
 129      =1    10,       1,
 130      =1    4,
 131      =1    ACTIVE_LOW,   ACTIVE_LOW,
 132      =1    #ifdef DOUBLE_PIXEL
 133      =1    130,      150,          //25.2MHz
 134      =1    2,
 135      =1    #else
 136      =1    250,      300,
 137      =1    1,
 138      =1    #endif
 139      =1    0
 140      =1    //----------------------------------------------------
 141      =1  
 142      =1    #elif defined WVGA
 143      =1    // Panasonic  EDTCB27QBF WVGA
 144      =1    800,      480,
 145      =1    4,        1,
 146      =1    7,
 147      =1    ACTIVE_LOW,   ACTIVE_LOW,
 148      =1    #ifdef DOUBLE_PIXEL
 149      =1    166,      200,          //33.2MHz
 150      =1    2,
 151      =1    #else
 152      =1    332,      360,          //33.2MHz
 153      =1    1,
 154      =1    #endif
 155      =1    0
 156      =1  
 157      =1    //----------------------------------------------------
 158      =1    #else
 159      =1    // Default : XGA panel
 160      =1    // Samsung  LT150x1-151 XGA
 161      =1    1024,     768,
 162      =1    68,       1,
 163      =1    80,
 164      =1    ACTIVE_LOW,   ACTIVE_LOW,
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 46  

 165      =1    #ifdef DOUBLE_PIXEL
 166      =1    325,      400,          //32.5Mhz
 167      =1    2,
 168      =1    #else
 169      =1    650,      800,          //32.5Mhz
 170      =1    1,
 171      =1    #endif
 172      =1    0
 173      =1    #endif
 174      =1    };
 175      =1  
 176      =1  */
  17          #include "osdmenu.h"
   1      =1  //osdmenu.h
   2      =1  //LJY10292001
   3      =1  #ifndef __OSDMENU__
   4      =1  #define __OSDMENU__
   5      =1  
   6      =1  //=======================================================================
   7      =1  // 
   8      =1  //BYTE GetOSDDuration(void);
   9      =1  
  10      =1  void ResetVideoValue(void);
  11      =1  //#if defined( SUPPORT_PC ) || defined( SUPPORT_DTV )
  12      =1  //void ResetPCValue(void);
  13      =1  //#endif
  14      =1  BYTE GetOSDMenuLevel( void );
  15      =1  
  16      =1  void DrawMenulist(BYTE);
  17      =1  void Display_EnterPin(void);
  18      =1  void OSDHighMenu_sub(void);
  19      =1  void ResetOSDValue(void);
  20      =1  #ifdef E_Wintek
           =1 void ResetUESROSDValue(void);
           =1 #endif
  23      =1  //BYTE OnChangingValue(void);
  24      =1  //Not used yet *******************BYTE OnChangingTime(void);
  25      =1  
  26      =1  //WORD GetOSDclock(void);
  27      =1  
  28      =1  #ifdef HS_NEWOSDMENU
           =1 void InitOSDMenu(BYTE OSD_ID);
           =1 void OpenOSDMenu(BYTE OSD_ID);
           =1 #else
  32      =1  void InitOSDMenu(void);
  33      =1  void OpenOSDMenu(void);
  34      =1  #endif
  35      =1  BYTE CloseOSDMenu(void);
  36      =1  
  37      =1  void OpenFORMATMenu(void);
  38      =1  void OSDHighMenu(void);
  39      =1  void OSDSelect(void);
  40      =1  void OSDCursorMove(BYTE flag );
  41      =1  void OSDLeftRight(BYTE flag );
  42      =1  void OSDValueUpDn(BYTE flag);
  43      =1  WORD SetItemValue( BYTE id, BYTE flag );
  44      =1  BYTE DoAction(BYTE id);
  45      =1  
  46      =1  BYTE SaveValue1(void);
  47      =1  void ClearValueWin(void);
  48      =1  
  49      =1  void OSDNumber( BYTE num );
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 47  

  50      =1  
  51      =1  void Set4WideScreen(BYTE id);
  52      =1  
  53      =1  void SetRGBContrast( BYTE id, BYTE val );
  54      =1  BYTE SetPCColorTemp(BYTE flag);
  55      =1  void ResetPanelAttributeValue(void);
  56      =1  WORD GetItemValue( BYTE);
  57      =1  void DisplayViewBar( WORD,BYTE);
  58      =1  void DrawNum(WORD, CODE_P struct NumType *, WORD);
  59      =1  void DrawStringByLang( WORD, CODE_P struct EnumType *, WORD);
  60      =1  
  61      =1  void DisplayVolumebar(BYTE val);
  62      =1  BYTE GetOSDLang(void);
  63      =1  void InitOSDMenuXY(void);
  64      =1  
  65      =1  void Display_TVGuide_Window(void);
  66      =1  void Display_TVGuide_Status(void);
  67      =1  
  68      =1  void ChangeVchip_LevelCursor(BYTE);
  69      =1  void ChangeVchip_ContentCursor(BYTE);
  70      =1  void Select_VchipLevel(void);
  71      =1  void SetVideoMode(BYTE mode);
  72      =1  BYTE GetVideoDatawithOffset(BYTE offset);
  73      =1  void SetVideoContrast(BYTE newv);
  74      =1  void SetVideoBrightness(BYTE newv);
  75      =1  void SetVideoHue(BYTE newv) ;
  76      =1  void SetVideoSaturation(BYTE svtype, BYTE newv) ;
  77      =1  BYTE SetVideoSharpness(BYTE flag) ;
  78      =1  void SetVideoBacklight(BYTE newv) ;
  79      =1  //------------------------------------------------andy awt 981013
  80      =1  //void DaySelect(BYTE);
  81      =1  void CAMOutDSel(BYTE val);
  82      =1  void DVRAodioSel(BYTE  val);
  83      =1  
  84      =1  //------------------------------------------------andy awt 981013
  85      =1  
  86      =1  void DisplayLineOSD(void);  // OSD Line display Demo
  87      =1  #ifdef CENEC_OSDMENU_ACCM8
           =1 BYTE ChkOSDMENU_TOPWIN(void);  //Weylis 080930
           =1 BYTE ChkOSDMENU_WINDOW(void);
           =1 BYTE ChkOSDMENU(void);
           =1 #endif
  92      =1  
  93      =1  #ifdef AWT_ADD_TRIGGER_DELAY_FUN  //Pinchi 20150209 add
  94      =1  void AWT_DisplayViewBar(WORD addr , BYTE val);
  95      =1  #endif
  96      =1  struct MenuType {
  97      =1    BYTE  width,  height;
  98      =1    BYTE  TitleColor; 
  99      =1    BYTE  CursorColor;
 100      =1  };
 101      =1  
 102      =1  struct NumType {
 103      =1    BYTE  PrePostCharLen;   // high nibble(pre) / low nibble(post)
 104      =1    BYTE  PrePostChar[4];
 105      =1  };
 106      =1  
 107      =1  struct NumberStringType {
 108      =1    BYTE  x, y;
 109      =1    BYTE    width;
 110      =1    BYTE  BackColor;
 111      =1    BYTE  Radix;
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 48  

 112      =1    BYTE  NumColor;
 113      =1    BYTE    MaxLen;       // maximum length of string
 114      =1    BYTE  PrePostCharLen;   // high nibble(pre) / low nibble(post)
 115      =1    BYTE  PrePostChar[3];
 116      =1  };
 117      =1  
 118      =1  struct TimeType {
 119      =1    BYTE  x, y;
 120      =1    BYTE    width;
 121      =1    BYTE  BackColor;
 122      =1    BYTE  Format;       //_24H_TIME
 123      =1    BYTE  TimeColor;
 124      =1    BYTE    CursorColor;
 125      =1  };
 126      =1  
 127      =1  struct EnumType {
 128      =1    BYTE    Sz;//size
 129      =1    BYTE    ByLang;
 130      =1    BYTE  Str[15];      // doesn't matter the size !!!
 131      =1  };
 132      =1  
 133      =1  #define ICON_CH_SZ    2
 134      =1  //#define BAR_NUM_SZ    4
 135      =1  #define ICON_BUF_SZ   2
 136      =1  struct DefineMenu {
 137      =1    //WORD            Icon[ICON_BUF_SZ];  
 138      =1    BYTE        CODE  *Icon;
 139      =1    BYTE            **Desc;       
 140      =1    BYTE            PreFnId, 
 141      =1                  PostFnId;
 142      =1  //  void    (*CalltoFunction)(void);            // Un/Dn/Sel Function
 143      =1    BYTE            IconColor;      //NIL: not to display icon
 144      =1    BYTE            DescColor;      //NIL: not to display desc. (IconColor==NIL && DescColor==NIL)->Last Item
 145      =1    struct DefineMenu CODE  *Child;
 146      =1    BYTE            Type;       // MENU, CHOICEMENU, BAR, NUMBER, TIME, ACTION, ENUM_STRING
 147      =1    BYTE            ActiveWithCursor;
 148      =1    BYTE            Id;
 149      =1    BYTE        CODE  *TypeData;  //MenuType, BarType, NumType,,,
 150      =1  } ;
 151      =1  
 152      =1  struct PictureInfo {
 153      =1  
 154      =1    BYTE Register_Addr;
 155      =1    BYTE EEPROM_Addr;
 156      =1    struct RegisterInfo   CODE  *Control_Range;
 157      =1  };
 158      =1  
 159      =1  
 160      =1  //-------------------------------------------------------------------
 161      =1  // OSD Window Information
 162      =1  //-------------------------------------------------------------------
 163      =1  // Window Number
 164      =1  #define OSDCURSORWINDOW     1
 165      =1  #define OSDMENUWINDOW       OSDCURSORWINDOW+1
 166      =1  #define OSDMENU_TOPWIN      OSDCURSORWINDOW+2
 167      =1  #define OSDMENU_TITLEWIN    OSDCURSORWINDOW+3
 168      =1  #define OSDBARWINDOW      OSDCURSORWINDOW
 169      =1  
 170      =1  #define TECHWELLOGO_OSDWIN    1 
 171      =1  #define TVINFO_OSDWIN       2 
 172      =1  #define FONTTEST_OSDWIN     2 
 173      =1  #define INPUTINFO_OSDWIN    3  
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 49  

 174      =1  #define RATINGINFO_OSDWIN     1 
 175      =1  #define PCINFO_OSDWIN       3
 176      =1  #define VLOSSINFO_OSDWIN    4
 177      =1  
 178      =1  //-------------OSDMENU_TITLEWIN------------------------------------------------------
 179      =1  // Window Start address
 180      =1  #define OSDMENU_MAINADDR  0
 181      =1  //#define OSDMENU_SUBADDR     OSDMENU_MAINADDR+15    //25*9:196
 182      =1  //#define OSDMENU_SUBADDR     OSDMENU_MAINADDR+HS_WIDTH //0+40   //25*9:196
 183      =1  //#define OSDMENU_SUBADDR     OSDMENU_MAINADDR+10 //0+40   //25*9:196
 184      =1  #define OSDMENU_SUBADDR     OSDMENU_MAINADDR + 14 //0+40   //25*9:196  // Weylis 121008 清除 Icon 後面
 185      =1  
 186      =1  #define OSDMENU_BARADDR   200 //OSDMENU_SUBADDR+225    //256   //25x2:50
 187      =1  
 188      =1  #ifdef WQVGA
           =1 #define INPUTINFO1_ADDR   INPUTINFO_ADDR+17 //17x3:51
           =1 #else
 191      =1  #define INPUTINFO1_ADDR   INPUTINFO_ADDR+34 //17x2:51
 192      =1  #endif
 193      =1  
 194      =1  #define MUTEINFO_ADDR     INPUTINFO1_ADDR+51  // 4x1:4
 195      =1  #define TVCHINFO_ADDR     MUTEINFO_ADDR//324  // 3X1:3
 196      =1  #define LOGO_ADDR     0
 197      =1  #ifdef AWT_ML072S
 198      =1  #define RATINGINFO_ADDR   (34)  //addr:210(8x1:8)
 199      =1  #else
           =1 #define RATINGINFO_ADDR   0 //addr:210(8x1:8)
           =1 #endif
 202      =1  #define PCMEASUREINFO_ADDR  OSDMENU_BARADDR //10x1
 203      =1  #ifdef QUAD
           =1 #define INPUTINFO_ADDR    160 // 9x1:9
           =1 #else
 206      =1  #define INPUTINFO_ADDR    0///24  // 9x1:9
 207      =1    #ifdef AWT_ML072S
 208      =1    #define INPUTINFO_MIRROR_ADDR 0//83 //william-v1.0-970804
 209      =1    #else
           =1   #define INPUTINFO_MIRROR_ADDR 73//83  //william-v1.0-970804
           =1   #endif
 212      =1  #define INPUTINFO_WIDTH   40  // 9x1:9    //william-v1.0-971111
 213      =1  #endif
 214      =1  #define OSD_VLOSS_ADDR  33 
 215      =1  
 216      =1  
 217      =1  //--------------------------------------------------------------------
 218      =1  // OSD Menu Position Range
 219      =1  #if ((defined WQVGA) && (defined ANALOG_7INCH)) || ((defined QVGA) && (defined SHARP_LQ050Q5DR01))
           =1   #define OSD_PHR_ PHR_/2
           =1 #else
 222      =1    #define OSD_PHR_ PHR_
 223      =1  #endif
 224      =1  
 225      =1  #define OSDHSTART_MAX (OSD_PHR_-(12+1)*25 - 56*2 -4)  //PHR - (pixelsize +Hspace)*MenuWidth - Hborder*2 - 
             -outlinewidth*2
 226      =1  #define OSDVSTART_MAX (PVR_-(18+11)*9 - 5*2 ) //  PVR - (Linesize+Vspace)*MENU_HEIGHT - Vborder*2  - outli
             -newidth*2
 227      =1  
 228      =1  #define OSDHSTART_MAX_A (OSD_PHR_-(12+2)*25 - 56*2 -8) //OSDHSTART_MAX  //PHR - (pixelsize +Hspace)*MenuWi
             -dth - Hborder*2 - outlinewidth*2
 229      =1  #define OSDVSTART_MAX_A OSDVSTART_MAX  //  PVR - (Linesize+Vspace)*MENU_HEIGHT - Vborder*2  - outlinewidth*
             -2
 230      =1  
 231      =1  #define OSDMENUX_MIN 1//0
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 50  

 232      =1  #define OSDMENUX_MAX (OSDHSTART_MAX>>3)
 233      =1  #define OSDMENUX_50  (OSDHSTART_MAX>>4)
 234      =1  
 235      =1  #define OSDMENUY_MIN 2//0
 236      =1  #define OSDMENUY_MAX (OSDVSTART_MAX>>2)
 237      =1  #define OSDMENUY_50  (OSDVSTART_MAX>>3)
 238      =1  
 239      =1  #ifdef HS_NEWOSDMENU  //Weylis -@121008
           =1 // HS OSD Style
           =1 #define HS_WIDTH      40
           =1 #define HS_CHSPACE      14
           =1 //#define HS_CHSPACE      18
           =1 #define HS_ICONSPACE    1
           =1 #define HS_ICONSADDR    0
           =1 //#define HS_ICONSPACE    2
           =1 //#define HS_ICONSADDR    8
           =1 #endif
 249      =1  
 250      =1  //--------------------------------------------------------------------
 251      =1  // OSD Menu Width, Height 
 252      =1  #ifdef E_Wintek
           =1 #define ICON_HIGH       0x14
           =1 #else
 255      =1  #define ICON_HIGH       0x0a
 256      =1  #endif
 257      =1  
 258      =1  #define TOTAL_MAX_HIGHT     9
 259      =1  #define TOTAL_TOP_HEIGHT    5 // Include blank line!
 260      =1  #define TOPMENU_WIDTH     2
 261      =1  #define TOPMENU_HEIGHT      4 
 262      =1  
 263      =1  #if (defined QVGA) && (defined SHARP_LQ050Q5DR01)
           =1 #define MENU_WIDTH        17 //23//25 
           =1 #define TITLE_MAX_DESC      17 //25 //
           =1 #define BAR_LENGTH        0
           =1 #else
 268      =1  //#define MENU_WIDTH        23  //23//25 
 269      =1  //#define MENU_WIDTH        26  //ryan@20170821
 270      =1  #ifdef AWT_ML072S
 271      =1  #define MENU_WIDTH        19  
 272      =1  #else
           =1 #define MENU_WIDTH        24  //ryan@20170821
           =1 #endif
 275      =1  
 276      =1  #define TITLE_MAX_DESC      23  //25  //
 277      =1  #define BAR_LENGTH        5  //8
 278      =1  #endif
 279      =1  
 280      =1  #ifdef TW8816
 281      =1  #define MENU_HEIGHT       8  //6 
 282      =1  #else
           =1 #define MENU_HEIGHT       7  //6 
           =1 #endif
 285      =1  //#define BARNUM_LENGTH       8  //11
 286      =1  
 287      =1  #ifdef AWT_ML072S
 288      =1  #define BARNUM_LENGTH       4//ryan@20170821
 289      =1  #else
           =1 #define BARNUM_LENGTH       9//ryan@20170821
           =1 #endif
 292      =1  
 293      =1  
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 51  

 294      =1  #ifdef REFERENCE
           =1 #define BACK_COLOR        BG_COLOR_CYAN
           =1 #define DEFAULT_COLOR     BG_COLOR_CYAN   | CH_COLOR_WHITE
           =1 //#define ACTIVE_COLOR      BG_COLOR_YELLOW | CH_COLOR_WHITE
           =1 #define TITLE_BACK_COLOR    BG_COLOR_MAGENTA
           =1 #define TITLE_COLOR       TITLE_BACK_COLOR | CH_COLOR_YELLOW
           =1 #define COMMENT_COLOR     TITLE_BACK_COLOR | CH_COLOR_WHITE
           =1 #define CURSOR_COLOR      BG_COLOR_YELLOW | CH_COLOR_BLUE
           =1 #define OSD_INFO_COLOR      DEFAULT_COLOR
           =1 #define BAR_COLOR       DEFAULT_COLOR 
           =1 #define BAR_NUM_COLOR     DEFAULT_COLOR
           =1 #define NUM_COLOR       DEFAULT_COLOR
           =1 #define OSDMENU_OUTLINE_COLOR BG_COLOR_BLUE
           =1 #else
 308      =1  #define BACK_COLOR        BG_COLOR_CYAN
 309      =1  
 310      =1  #define DEFAULT_COLOR     BG_COLOR_CYAN | CH_COLOR_GREEN//ryan@20170828
 311      =1  
 312      =1  //#define ACTIVE_COLOR      BG_COLOR_YELLOW | CH_COLOR_WHITE
 313      =1  #define TITLE_BACK_COLOR    BG_COLOR_BLUE
 314      =1  #define TITLE_COLOR       TITLE_BACK_COLOR | CH_COLOR_YELLOW
 315      =1  #define COMMENT_COLOR     TITLE_BACK_COLOR | CH_COLOR_WHITE
 316      =1  #define CURSOR_COLOR      BG_COLOR_YELLOW  | CH_COLOR_BLUE
 317      =1  #define OSD_INFO_COLOR      BG_COLOR_CYAN    | CH_COLOR_GREEN
 318      =1  #define BAR_COLOR       DEFAULT_COLOR
 319      =1  #define BAR_NUM_COLOR     DEFAULT_COLOR
 320      =1  #define NUM_COLOR       DEFAULT_COLOR
 321      =1  #define VER_COLOR         BG_COLOR_CYAN   | CH_COLOR_YELLOW   /// V1.1 03/07/07 simonsung
 322      =1  #define OSDMENU_OUTLINE_COLOR   BG_COLOR_CYAN
 323      =1  #define OSD_VLOSS_COLOR     BG_COLOR_CYAN    | CH_COLOR_WHITE
 324      =1  
 325      =1  #endif
 326      =1  
 327      =1  #ifdef HS_NEWOSDMENU
           =1 #define COMMENT1_COLOR      BG_COLOR_CYAN | CH_COLOR_RED
           =1 #endif
 330      =1  
 331      =1  #define Trigger_COLOR       BG_COLOR_CYAN|CH_COLOR_RED      //william-v1.1-970827
 332      =1  #define Mirror_COLOR      BG_COLOR_CYAN|CH_COLOR_YELLOW     //william-v1.1-970827
 333      =1  #ifndef AWT_ML072S
           =1 #define Jump_COLOR        BG_COLOR_CYAN|CH_COLOR_GREEN      //william-v1.1-970827
           =1 #else
 336      =1  #define Jump_COLOR        BG_COLOR_CYAN|CH_COLOR_BLUE     //william-v1.1-970827
 337      =1  #endif
 338      =1  #define Gauge_COLOR1      BG_COLOR_BLACK|CH_COLOR_GREEN 
 339      =1  #define Gauge_COLOR2      BG_COLOR_BLACK|CH_COLOR_YELLOW  
 340      =1  #define Gauge_COLOR3      BG_COLOR_BLACK|CH_COLOR_RED
 341      =1  
 342      =1  //DisplayedOSD
 343      =1  //    new   | MENU  TVINFO    CC    INPUTINFO   PCINFO    RATINGINFO
 344      =1  //  current   |
 345      =1  //============|=========================================================================
 346      =1  //  MENU    |     TVINFO    --    INPUTINFO   PCINFO    MENU + RATINGINFO 
 347      =1  //        |            
 348      =1  //------------|-------------------------------------------------------------------------
 349      =1  //  TVINFO    | MENU  TVINFO    --    INPUTINFO   PCINFO    TVINFO+RATING
 350      =1  //------------|-------------------------------------------------------------------------
 351      =1  //  CC      | MENU->  TVINFO->      INPUTINFO->   PCINFO    RATINGINFO
 352      =1  //        |  CC    CC          CC            
 353      =1  //------------|-------------------------------------------------------------------------
 354      =1  //  INPUTINFO | MENU  TVINFO    --    INPUTINFO   PCINFO    --
 355      =1  //------------|-------------------------------------------------------------------------
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 52  

 356      =1  //  PCINFO    | MENU  x     x   INPUTINFO   PCINFO    x
 357      =1  //------------|-------------------------------------------------------------------------
 358      =1  //  RATINGINFO| MENU  TVINFO     RATING   INPUTINFO   x     RATINGINFO
 359      =1  //                  
 360      =1  
 361      =1  //=======================================================================================
 362      =1  // OSD Menu Constant define.
 363      =1  //=======================================================================================
 364      =1  //Time type
 365      =1  #define _24H_TIME   1
 366      =1  
 367      =1  //for previous, next, parent or child
 368      =1  #define YES       0xfe  
 369      =1  #define NO        0
 370      =1  
 371      =1  //#define OVERWRITE   0
 372      =1  //#define POPUP     1
 373      =1  
 374      =1  //CursorMove
 375      =1  #define VERT      0
 376      =1  #define HORI      1
 377      =1  
 378      =1  //Type of MenuItem
 379      =1  #define OSDMENU     1
 380      =1  #define CHOICEMENU    2
 381      =1  #define ACTION      3
 382      =1  #define BAR       4
 383      =1  #define NUMBER      5
 384      =1  #define CHOICE      6
 385      =1  #define ENUM_STRING   7 //YESNO     7
 386      =1  #define CHOICE1     8
 387      =1  #define TIME      9
 388      =1  #define NUMBER_STRING 10
 389      =1  #define TEXT_STR              11   // V1.1 02/28/07 simonsung
 390      =1  #define INFORMATION              12
 391      =1  #define TEXT_STR_exit 13
 392      =1  
 393      =1  #ifdef HTRV
           =1 #define GRAPH 16
           =1 #endif
 396      =1  
 397      =1  //Bar type
 398      =1  #define LEFT_FILLED   1
 399      =1  #define RIGHT_FILLED  2
 400      =1  #define NO_FILLED   3
 401      =1  
 402      =1  //OSDmenu up and down key
 403      =1  #define UP          1
 404      =1  #define DN          2
 405      =1  #define RIGHT       3
 406      =1  #define LEFT          4
 407      =1  
 408      =1  // Action Id
 409      =1  #define DISP_INFO     0x16
 410      =1  
 411      =1  #define INPUTSELECTION    0x2f
 412      =1  
 413      =1  #define CHANGE_TO_COMPOSITE     (0x20|CH_TW2835)      // Low nibble need to start from 1 
 414      =1  #define CHANGE_TO_SVIDEO      (0x20|SVIDEO)       // so that it match with COMPOSITE...
 415      =1  #define CHANGE_TO_COMPONENT     (0x20|COMPONENT)    
 416      =1  #define CHANGE_TO_DTV       (0x20|DTV)    
 417      =1  #define CHANGE_TO_TV        (0x20|TV)         
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 53  

 418      =1  #define CHANGE_TO_PC        (0x20|PC)         
 419      =1  #define CHANGE_TO_DIGITALVGA    (0x20|DIGITALVGA)     
 420      =1  #define CHANGE_TO_SCART       (0x20|SCART)        
 421      =1  
 422      =1  #define OSDPOSITIONMODE     0x10
 423      =1  #define OSD_VPOS      0x11
 424      =1  #define OSD_HPOS      0x12
 425      =1  #define OSD_HALFTONE    0x13
 426      =1  #define OSD_DURATION    0x14
 427      =1  #define RESET_OSDVALUE    0x15
 428      =1  #define OSDLANG       0x16
 429      =1  
 430      =1  #define PANEL_CONTRAST    0x58
 431      =1  #define PANEL_BRIGHTNESS  0x59
 432      =1  #define PANEL_HUE     0x5a
 433      =1  #define PANEL_SHARPNESS   0x5b
 434      =1  #define PANEL_SATURATION  0x5c
 435      =1  
 436      =1  #define PC_VPOS       0x43
 437      =1  #define PC_HPOS       0x44
 438      =1  #define PC_HSIZE      0x4d
 439      =1  
 440      =1  #define PC_CLOCK      0x45
 441      =1  #define PC_PHASE      0x46
 442      =1  
 443      =1  #define AUTOADJUST      0x47
 444      =1  #define AUTOADJUST2     0x48
 445      =1  //#define SAVE_AUTOADJUST   0x49
 446      =1  #define RESET_AUTOADJUST  0x4a
 447      =1  
 448      =1  #define PCCOLORADJUST   0x4b
 449      =1  #define SAVE_COLORADJUST  0x4c
 450      =1  //#define RESET_COLORADJUST 0x4d
 451      =1  
 452      =1  #define RESET_PCVALUE   0x4e
 453      =1  #define CameraOSD     0x4f
 454      =1  
 455      =1  #define PC_COLOR_MODE   0x3f
 456      =1  #define PC_COLOR_TEMP   0x30
 457      =1  #define PC_COLOR_MODE1    0x31
 458      =1  #define PC_COLOR_MODE2    0x32
 459      =1  #define PC_COLOR_MODE3    0x33
 460      =1  #define PC_COLOR_USER   0x34
 461      =1  #define PC_COLOR_R      0x35
 462      =1  #define PC_COLOR_G      0x36
 463      =1  #define PC_COLOR_B      0x37
 464      =1  
 465      =1  #define VIDEO_MODE      0x90
 466      =1  #define VIDEO_MODE1     0x91
 467      =1  #define VIDEO_MODE2     0x92
 468      =1  #define VIDEO_MODE3     0x93
 469      =1  #define VIDEO_USER      0x94
 470      =1  #define VIDEO_CONTRAST    0x95
 471      =1  #define VIDEO_BRIGHTNESS  0x96
 472      =1  #define VIDEO_SATURATION  0x97
 473      =1  #define VIDEO_HUE     0x99
 474      =1  #define VIDEO_SHARPNESS   0x9a
 475      =1  #define VIDEO_BACKLIGHT   0x9c    // add new value 
 476      =1  #define RESET_VIDEOVALUE  0x9b
 477      =1  #define RESET_DVRVALUE    0x9e
 478      =1  #define RESET_MonitorVALUE    0x70
 479      =1  
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 54  

 480      =1  
 481      =1  #ifdef AWT_ADD_TRIGGER_DELAY_FUN  //Pinchi 20150209 add
 482      =1  #define TRIGGER_CamADelay 0xb2
 483      =1  #define TRIGGER_CamBDelay 0xb3
 484      =1  #define TRIGGER_CamCDelay 0xb4
 485      =1  #define TRIGGER_CamRDelay 0xb5
 486      =1  #endif
 487      =1  
 488      =1  #ifdef HTRV
           =1 #define RESET_GAUGESETUP  0x9d   
           =1 #define Gauge_VStart      0x7a   
           =1 #endif
 492      =1  
 493      =1  #ifdef E_Wintek
           =1 #define RESET_USERVALUE 0x9d
           =1 #endif
 496      =1  #define VIDEOPICTURE    0x9f
 497      =1  
 498      =1  #define INPUTSTD      0x6f
 499      =1  #define CHANGE_TO_AUTO    0x60
 500      =1  #define CHANGE_TO_NTSC    (0x60 | NTSC)
 501      =1  #define CHANGE_TO_PAL   (0x60 | PAL)
 502      =1  #define CHANGE_TO_SECAM   (0x60 | SECAM)
 503      =1  #define CHANGE_TO_NTSC4   (0x60 | NTSC4)
 504      =1  #define CHANGE_TO_PALM    (0x60 | PALM)
 505      =1  #define CHANGE_TO_PALN    (0x60 | PALN)
 506      =1  #define CHANGE_TO_PAL60   (0x60 | PAL60)
 507      =1  
 508      =1  #if 0
           =1 #define CLOSED_CAPTION    0x7f
           =1 #define CLOSEDCAP_OFF   0x70
           =1 #define CLOSEDCAP_CC1   0x71
           =1 #define CLOSEDCAP_CC2   0x72
           =1 #define CLOSEDCAP_CC3   0x73
           =1 #define CLOSEDCAP_CC4   0x74
           =1 #define CLOSEDCAP_T1    0x75
           =1 #define CLOSEDCAP_T2    0x76
           =1 #define CLOSEDCAP_T3    0x77
           =1 #define CLOSEDCAP_T4    0x78
           =1 
           =1 #define TV_GUIDE      0x8f
           =1 #define NO_VCHIP_LOCK   0
           =1 #define VCHIP_TV_Y      1
           =1 #define VCHIP_TV_Y7     2
           =1 #define VCHIP_TV_G      3
           =1 #define VCHIP_TV_PG     4
           =1 #define VCHIP_TV_14     5
           =1 #define VCHIP_TV_MA     6
           =1 #define PASSWORD      0x87
           =1 #define NEW_PASSWORD    0x88
           =1 #define CHK_PASSWORD    0x89
           =1 #define RET_CHK_PASSWORD  0x8a
           =1 #endif
 533      =1  
 534      =1  #define MPAA_RATING     0x9f
 535      =1  #define NO_MPAA_RATING    0
 536      =1  #define MPAA_G        1
 537      =1  #define MPAA_PG       2
 538      =1  #define MPAA_PG_13      3
 539      =1  #define MPAA_R        4
 540      =1  #define MPAA_NC_17      5
 541      =1  #define MPAA_X        6
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 55  

 542      =1  
 543      =1  #define TVINSTALL     0xa0
 544      =1  #define SCAN_CHANNEL    0xa1
 545      =1  #define AIR_CABLE_TV    0xa3
 546      =1  #define STORE_CLEAR_TVCHN 0xa4
 547      =1  #define MTS         0xa5
 548      =1  #define EDIT_CHANNEL    0xa6
 549      =1  #define MTS_STEREO      0//0x10
 550      =1  #define MTS_MONO      1//0x11
 551      =1  
 552      =1  #define AUDIO_VOLUME    0xb7
 553      =1  
 554      =1  #if 0 //andy AWT8.4 20090811
           =1 
           =1 #define AUDIO_BALANCE   0xb9
           =1 #define AUDIO_BASS      0xba
           =1 #define AUDIO_TREBLE    0xbb
           =1 
           =1 #define AUDIO_LOUDNESS    0xbc
           =1 #define AUDIO_EFFECT    0xbd
           =1 #define AUDIO_MUTE      0xbe
           =1 #endif
 564      =1  
 565      =1  #define DayChoice           0xb8
 566      =1  #define CAMOSDONOFF         0xb9
 567      =1  #define GAUGEChoice         0xba
 568      =1  #define OsdLockChoice       0xbb
 569      =1  #define PRIORITYChoice      0xcA
 570      =1  #define DVRDisplay    0xcc
 571      =1  
 572      =1  #define CAMAONOFF       0xc1
 573      =1  #define CAMBONOFF         0xc2
 574      =1  #define CAMCONOFF       0xc3
 575      =1  #define CAMRONOFF     0xc4
 576      =1  
 577      =1  #define IMAGEChoice         0xc5 
 578      =1  #define REARChoice          0xc6
 579      =1  #define JUMPChoice          0xc7
 580      =1  #define CAMOUTChoice        0xc8 
 581      =1  #define STIME_STEP        0xc9
 582      =1  #define TriggerVGA        0xcb
 583      =1  #define IMAGE_A_Choice         0xcd
 584      =1  #define IMAGE_B_Choice         0xce
 585      =1  #define IMAGE_C_Choice         0xcf
 586      =1  
 587      =1  #define DELAYCAMA       0xd0
 588      =1  #define DELAYCAMB            0xd1
 589      =1  #define DELAYCAMC       0xd2
 590      =1  #define DELAYCAMR         0xd3
 591      =1  #ifdef USE_CAMD
           =1 #define DELAYCAMD       0xd4
           =1 #endif
 594      =1  #define ReverseMode   0xd6
 595      =1  #ifdef AWT_ML072S //william @20130902 v1.0.1.2
 596      =1  #define JUMP_AV     0xd7
 597      =1  #endif
 598      =1  #define MANUAL_TUNE_CHANNEL 0xab
 599      =1  #define FINE_TUNE_CHANNEL 0xac
 600      =1  #define STORE_PALCHANNEL  0xad
 601      =1  
 602      =1  //#define CLEAR_TVCHN     0xb0
 603      =1  //#define STORE_TVCHN     0xb1
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 56  

 604      =1  
 605      =1  #define WIDESCREEN      0xc0
 606      =1  #define WIDESCREEN_NORMAL 0 
 607      =1  #define WIDESCREEN_WIDE   1 
 608      =1  #define WIDESCREEN_PANO   2
 609      =1  #define WIDESCREEN_FULL   3 
 610      =1  #define WIDESCREEN_ZOOM   4 
 611      =1  
 612      =1  //#define SYSTEM_CLOCK    0xd1
 613      =1  //#define SYSTEM_CLOCK_H    0xd2
 614      =1  //#define WAKEUP_TIME     0xd3
 615      =1  //#define WAKEUP_TIME_H   0xd4
 616      =1  //#define WAKEUP_PR     0xd5
 617      =1  //#define OFF_TIME      0xd6
 618      =1  //#define OFF_TIME_H      0xd7
 619      =1  //#define SLEEP_TIMER     0xd8
 620      =1  
 621      =1  #define Resolution      0xe0
 622      =1  #define FPS         0xe1
 623      =1  #define Quality       0xe2
 624      =1  #define RecordMode      0xe3
 625      =1  #define RecordLength      0xe4
 626      =1  #define PreAlarmLength    0xe5
 627      =1  #define PostAlarmLength   0xe6
 628      =1  #define Apply       0xe7
 629      =1  #if 0 //william-awt ml073q-20120313
           =1 #define ManualRecordStart 0xe8
           =1 #define ManualRecordStop  0xe9
           =1 #define Snapshot        0xea
           =1 #endif
 634      =1  #define FormatSD      0xeb
 635      =1  #define AudioRecord     0xec
 636      =1  #define FirmwareUpdate    0xed
 637      =1  #define ChangePassword    0xee
 638      =1  #define OverWrite     0xef
 639      =1  
 640      =1  #define UpdateConfig      0xd0
 641      =1  #define SDCardDetect      0xd5
 642      =1  
 643      =1  #define Year        0x20
 644      =1  #define Month       0x21
 645      =1  #define Day         0x22
 646      =1  #define Hour        0x23
 647      =1  #define Minute        0x24
 648      =1  
 649      =1  #define DaylightSaving        0x25
 650      =1  #define TimeBeginesMonth      0x26
 651      =1  #define TimeBeginesWeek       0x27
 652      =1  #define TimeBeginesTime       0x28
 653      =1  #define StandardTimeBeginesMonth  0x29
 654      =1  #define StandardTimeBeginesWeek   0x2a
 655      =1  #define StandardTimeBeginesTime   0x2b
 656      =1  #define TimeZone          0x2c
 657      =1  #define FirstNumber         0x2d
 658      =1  #define SecondNumber        0x2e
 659      =1  #define ThridNumber         0x2f
 660      =1  #define FourthNumber        0x38
 661      =1  #define WIFIIPNumber        0x39
 662      =1  #define WIFIMACNumber       0x3a
 663      =1  #define GETWAYNumber        0x3b
 664      =1  
 665      =1  #define OSDLANGI      0xd9
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 57  

 666      =1  #define OSDLANGII     OSDLANGI+1
 667      =1  #define OSDLANGIII      OSDLANGI+2
 668      =1  #define OSDLANGIV     OSDLANGI+3
 669      =1  
 670      =1  #define TOHIGHMENU      0xf1
 671      =1  #define MOVECURSOR2FIRST  0xf2
 672      =1  #define RESET_ALL     0xf3
 673      =1  #define EXITMENU      0xf4
 674      =1  #define DVRParamApply   0xf5
 675      =1  #define DATETIMEApply   0xf6
 676      =1  
 677      =1  #define CHOICE1_VAL     0xfc
 678      =1  #define CHOICE_VAL      0xfd
 679      =1  #define BAR_VAL       0xfe
 680      =1  #define NUM_VAL       0xff
 681      =1  
 682      =1  #define CAMNumberChoice     0xa3 
 683      =1  #define PelcoChoice         0xa4
 684      =1  #define Baud_rateChoice   0xa5
 685      =1  
 686      =1  
 687      =1  #endif  // __OSDMENU__
 688      =1  
  18          #include "osdbasic.h"
   1      =1  //osd_basic.h
   2      =1  //LJY11012001
   3      =1  #ifndef __OSD_BASIC__
   4      =1  #define __OSD_BASIC__
   5      =1  
   6      =1  // osd_basic.h
   7      =1  // char code
   8      =1  //#include "apilib.h"
   9      =1  
  10      =1  //ljy052903
  11      =1  //definition for internal OSD
  12      =1  #define FONT_WIDTH_TW88     12
  13      =1  #define FONT_HEIGHT_TW88    18
  14      =1  #define PIXS_PER_XSTEP_TW88   8
  15      =1  #define LINES_PER_YSTEP_TW88  4
  16      =1  #define MAX_OSDWINDOW_TW88    8
  17      =1  
  18      =1  // Using TW88 OSD for Menu
  19      =1  #define FONT_WIDTH      12
  20      =1  #define FONT_HEIGHT     18
  21      =1  #define PIXS_PER_XSTEP    8
  22      =1  #define LINES_PER_YSTEP   4
  23      =1  #define MAX_OSDWINDOW   4
  24      =1  
  25      =1  #define MAX_FONT_BYTES    27
  26      =1  #define RAMFONT   0xFE
  27      =1  #define ROMFONT   0xFF
  28      =1  #define NO_UDFONT     226 
  29      =1  
  30      =1  #define FONT_ROM  1
  31      =1  #define FONT_RAM  2
  32      =1  
  33      =1  
  34      =1  /////////////////////////////////
  35      =1  // Old Registers...
  36      =1  /*
  37      =1    #define TW88_WIN1ATTR   0x76
  38      =1    #define TW88_WIN1XSTART   0x77
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 58  

  39      =1    #define TW88_WIN1YSTART   0x78
  40      =1    #define TW88_WIN1WIDTH    0x79
  41      =1    #define TW88_WIN1HEIGHT   0x7a
  42      =1    #define TW88_WIN1BRDATTR  0x7b
  43      =1    #define TW88_WIN1BRDWIDTH 0x7c
  44      =1    #define TW88_WIN1BRDHEIGHT  0x7d
  45      =1    #define TW88_WIN1XSPACE   0x7e    // between characters.
  46      =1    #define TW88_WIN1YSPACE   0x7f
  47      =1    #define TW88_WIN1SADDR    0x80    // starting address of OSD ram for Windows 1
  48      =1  */
  49      =1  /////////////////////////////////
  50      =1  
  51      =1  // OSD
  52      =1  #define TW88_ENABLERAM    0x94  // TW8804C
  53      =1  #define TW88_FONTRAMADDR  0x99  // TW8804C
  54      =1  #define TW88_FONTRAMDATA  0x9a  // TW8804C
  55      =1  #define TW88_OSDRAMADDRHI 0x95  // TW8804C
  56      =1  #define TW88_OSDRAMADDRLO 0x96  // TW8804C
  57      =1  #define TW88_OSDRAMDATAHI 0x97  // TW8804C
  58      =1  #define TW88_OSDRAMDATALO 0x98  // TW8804C
  59      =1  #define TW88_MULTISTART   0x9b  // TW8804C
  60      =1  #define TW88_OSDLOCKUPSEL 0x9c
  61      =1  #define TW88_WINNUM     0x9e  // TW8804C
  62      =1  #define TW88_WINATTR    0x9f  //
  63      =1  #define TW88_WINXSTART    0xa1  //
  64      =1  #define TW88_WINYSTART    0xa2  //
  65      =1  #define TW88_WINSTART_HI  0xa0  //
  66      =1  #define TW88_WINWIDTH   0xa3  //
  67      =1  #define TW88_WINHEIGHT    0xa4  //
  68      =1  #define TW88_WINBRDATTR   0xa5  //
  69      =1  #define TW88_WINBRDWIDTH  0xa6  //
  70      =1  #define TW88_WINBRDHEIGHT 0xa7  //
  71      =1  #define TW88_WINSPACE   0xa8  // between characters.
  72      =1  #define TW88_WINZOOM    0xa9  //
  73      =1  #define TW88_WINSADDRHI   0xa9  // starting address of OSD ram for Windows 1
  74      =1  #define TW88_WINSADDRLO   0xaa  // starting address of OSD ram for Windows 1
  75      =1  
  76      =1  #define TW88_WINSHADOW    0xab  //
  77      =1  #define TW88_WINBLENDING  0xac  //
  78      =1  #define TW88_WINCHEFFECT  0xad  //
  79      =1  
  80      =1  
  81      =1  //Attributes for OSD
  82      =1  #define WINZOOMx1     0x01
  83      =1  #define WINZOOMx2     0x02
  84      =1  #define WINZOOMx3     0x03
  85      =1  #define WINZOOMx4     0x04
  86      =1  #define SHOW        0x08  
  87      =1  
  88      =1  #define EXTENDED_COLOR    0x80
  89      =1  #define BG_COLOR_BLACK    0x00  //For background color of window, border, and char. 
  90      =1  #define BG_COLOR_RED    0x40  
  91      =1  #define BG_COLOR_GREEN    0x20
  92      =1  #define BG_COLOR_YELLOW   0x60
  93      =1  #define BG_COLOR_BLUE   0x10
  94      =1  #define BG_COLOR_MAGENTA  0x50
  95      =1  #define BG_COLOR_CYAN   0x30
  96      =1  #define BG_COLOR_WHITE    0x70
  97      =1  #define BG_COLOR_TRANS    0x80  
  98      =1  #define BG_COLOR_MASK   0xf0  
  99      =1  
 100      =1  #define CH_COLOR_BLACK    0x00  //For color of char.
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 59  

 101      =1  #define CH_COLOR_RED    0x04  
 102      =1  #define CH_COLOR_GREEN    0x02
 103      =1  #define CH_COLOR_YELLOW   0x06
 104      =1  #define CH_COLOR_BLUE   0x01
 105      =1  #define CH_COLOR_MAGENTA  0x05
 106      =1  #define CH_COLOR_CYAN   0x03
 107      =1  #define CH_COLOR_WHITE    0x07
 108      =1  #define CH_BLINK      0x08  
 109      =1  #define CH_COLOR_MASK   0x0f  
 110      =1  
 111      =1  #define CL_BLACK      0x00  //For color of char.
 112      =1  #define CL_BLUE       0x01
 113      =1  #define CL_GREEN      0x02
 114      =1  #define CL_CYAN       0x03
 115      =1  #define CL_RED        0x04  
 116      =1  #define CL_MAGENTA      0x05
 117      =1  #define CL_YELLOW     0x06
 118      =1  #define CL_WHITE      0x07
 119      =1  #define CL_BLINK      0x08  
 120      =1  
 121      =1  // 0x76*(WindowNo*0x0b)
 122      =1  #define WINDOW_DISABLE    0x00
 123      =1  #define WINDOW_ENABLE   0x01
 124      =1  #define WINDOW_3D_ENABLE    0x04
 125      =1  #define WINDOW_3D_BOTTOM    0x08
 126      =1  #define WINDOW_3D_TOP     0x00
 127      =1  #define WINDOW_TRANS_ENABLE 0x80
 128      =1  
 129      =1  #define WINBDCOLOR_ENABLE 0x80
 130      =1  #define WINBDCOLOR_EXTENT 0x80
 131      =1  
 132      =1  
 133      =1  #define WINBLENDING_DISABLE 0x00
 134      =1  #define WINBLENDING_BACK    0x10
 135      =1  #define WINBLENDING_FORE    0x20
 136      =1  #define WINBLENDING_ALL     0x30
 137      =1  
 138      =1  #define WINSHADOW_ENABLE  0x80
 139      =1  // 0xc8*WindowNo
 140      =1  #define WIN_MULTICOLOR_ENABLE 0x20
 141      =1  #define WIN_CH_EFFECT_ENABLE  0x10
 142      =1  #define WIN_CH_EFFECT_SHADOW  0x08
 143      =1  
 144      =1  
 145      =1  
 146      =1  ///////// TW8804C /////////////
 147      =1  // Window Number
 148      =1  #define WINNUM1       1
 149      =1  #define WINNUM2       2
 150      =1  #define WINNUM3       3
 151      =1  #define WINNUM4       4
 152      =1  
 153      =1  // Index 0x9f Defination
 154      =1  #define WIN_BG_COLOR_EX   0x80
 155      =1  #define WIN_BG_COLOR_EX0  0x00
 156      =1  #define WIN_3D_TYPE     0x08
 157      =1  #define WIN_3D_TYPE0    0x00
 158      =1  #define WIN_3D_EN     0x04
 159      =1  #define WIN_3D_EN0      0x00
 160      =1  #define WIN_3D_LEVEL    0x02
 161      =1  #define WIN_EN        0x01
 162      =1  #define WIN_EN0       0x00
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 60  

 163      =1  
 164      =1  // Index 0xa5 Defination
 165      =1  #define WIN_BD_EN     0x80
 166      =1  #define WIN_BD_EN0      0x00
 167      =1  #define WIN_BD_WIDTH(a)   a
 168      =1  
 169      =1  // Index 0xa6 Defination
 170      =1  #define WIN_BD_COLOR_EX   0x80
 171      =1  #define WIN_BD_COLOR_EX0  0x00
 172      =1  #define WIN_H_BD_W(a)   a
 173      =1  
 174      =1  // Index 0xa7 Defination
 175      =1  #define WIN_V_BD_W(a)   a
 176      =1  
 177      =1  // Index 0xa8
 178      =1  #define WIN_CH_VSPACE(a)  (a<<4)
 179      =1  #define WIN_CH_HSPACE(a)  a
 180      =1  
 181      =1  // Index 0xa9 Defination
 182      =1  #define WIN_VZOOM(a)    (a-1)
 183      =1  #define WIN_HZOOM(a)    (a-1)
 184      =1  #define WIN_SADDR(a)    a
 185      =1  
 186      =1  // Index 0xab
 187      =1  #define WIN_SHADOW_EN   0x80
 188      =1  #define WIN_SHADOW_EN0    0x00
 189      =1  #define WIN_SHADOW_W(a)   a
 190      =1  
 191      =1  // ad
 192      =1  #define WIN_SHADOW_COLOR_EX   0x80
 193      =1  #define WIN_SHADOW_COLOR_EX0  0x00
 194      =1  #define WIN_MULTI_EN      0x40
 195      =1  #define WIN_MULTI_EN0     0x00
 196      =1  #define WIN_V_EXT_EN      0x20
 197      =1  #define WIN_V_EXT_EN0     0x00
 198      =1  #define WIN_CH_BDSH_SEL(a)    a
 199      =1  #define SEL_BORDER        0
 200      =1  #define SEL_SHADOW        1
 201      =1  #define WIN_CH_BDSH_COLOR_EX  0x08
 202      =1  #define WIN_CH_BDSH_COLOR_EX0 0x00
 203      =1  
 204      =1  #define OSD_Win_Num(a)      0x9e, a-1
 205      =1  #define OSD_Win_Start_Addr    0xa0
 206      =1  #define OSD_Win_Attr(a)       a
 207      =1  #define OSD_Win_Start(h,v)       (BYTE)(((WORD)h>>8) | (((WORD)v>>8)<<4)),(BYTE)h, (BYTE)v
 208      =1  #define OSD_Win_Width(a)      a
 209      =1  #define OSD_Win_Height(a)     a
 210      =1  #define OSD_Win_Border(a)     a
 211      =1  #define OSD_Win_HBorder(a)      a
 212      =1  #define OSD_Win_VBorder(a)      a
 213      =1  #define OSD_Win_CH_Space(a)     a
 214      =1  #define OSD_Win_ZM_SAddr(h,v,a)   ((h<<6)|(v<<4)|(a>>8)), (BYTE)a
 215      =1  #define OSD_Win_Shadow(a)     a
 216      =1  #define OSD_Win_Blending(a)     a
 217      =1  #define OSD_Win_CH_BorderShadow(a)  a
 218      =1  
 219      =1  
 220      =1  #define SetOSDWindowNum(winno)    WriteTW88(TW88_WINNUM, winno-1)
 221      =1  
 222      =1  //#define  OSD_Window_Attr(Trans_en,Color,3D_Type,3D_en,W_en)       (((( Trans_en | Color ) | 3D_Type) | 3
             -D_en) | W_en)
 223      =1  #define  OSD_Window_Attr(a,b,c,d,e)                 (((( a | b ) | c) | d) | e)
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 61  

 224      =1  #define  OSD_WShadow_Attr(W_Shadow_en,Color,Width)          W_Shadow_en | Color | Width
 225      =1  //#define  OSD_Blending(en,level)                   en | (level & 0x0f)
 226      =1  //#define  OSD_Ch_Effect(Multi, Effect_En, ShadowBorder, Color)   Multi | Effect_En | ShadowBorder | Color 
             - 
 227      =1  
 228      =1  
 229      =1  struct OSDStrInfo 
 230      =1  {
 231      =1    BYTE  cnt;
 232      =1    WORD  addr;
 233      =1    BYTE  attr;
 234      =1    DWORD str;
 235      =1  };
 236      =1  /*
 237      =1  struct BarInfo {
 238      =1    struct RegisterInfo BarCnt;
 239      =1    BYTE  winno;
 240      =1    BYTE  xoff;
 241      =1    BYTE  yoff;
 242      =1    BYTE  color;
 243      =1    int   bar_cnt;
 244      =1  };
 245      =1  */
 246      =1  struct FontData {
 247      =1    BYTE  font[27];
 248      =1  } ;
 249      =1  
 250      =1  //====================================================================
 251      =1  //  Internal OSD Function
 252      =1  void CopyCharToOSDRAM_TW88(BYTE Addr, BYTE attr, BYTE ch);
 253      =1  void CopyUDCharToOSDRAM_TW88(BYTE Addr, BYTE attr, BYTE ch);
 254      =1  //BYTE GetOSDWindowWidth_TW88(BYTE winno);
 255      =1  WORD GetOSDWindowSA_TW88(BYTE winno);
 256      =1  void SetOSDWindowX_TW88(BYTE winno, BYTE x);
 257      =1  void SetOSDWindowY_TW88(BYTE winno, BYTE y);
 258      =1  void SetOSDWindowWidth_TW88(BYTE winno, BYTE w);
 259      =1  void SetOSDWindowSA_TW88(BYTE winno, WORD sa);
 260      =1  
 261      =1  void SetOSDItalicsAndUnderline(BYTE italics, BYTE underline);
 262      =1  
 263      =1  void SetOSDHBorderWidth_TW88(BYTE winno, BYTE w);
 264      =1  //BYTE GetOSDWindowColor_TW88(BYTE winno);
 265      =1  void SetOSDWindowColor_TW88(BYTE CCWin, BYTE color);
 266      =1  void EnableOSDRAMAndChangeFont(BYTE type);
 267      =1  void WriteCharToOSDRAM(WORD addr, BYTE ch, BYTE attr);
 268      =1  
 269      =1  
 270      =1  void ShowOSDWindowAll(BYTE on);
 271      =1  void ShowOSDWindow_TW88(BYTE winno, BYTE onoff);
 272      =1  void ClearOSD_TW88(void);
 273      =1  //void CreateOSDWindow_TW88(BYTE winno, BYTE x, BYTE y, BYTE w, BYTE h, WORD sa, BYTE attr);
 274      =1  /*not yet!!
 275      =1  //ljy012304...CC_ADJUST_POS
 276      =1  void SetOSDWindowXS_TW88(BYTE winno, BYTE xs);
 277      =1  void SetOSDWindowYS_TW88(BYTE winno, BYTE ys);
 278      =1  */
 279      =1  
 280      =1  //====================================================================
 281      =1  //  OSDMenu Functions
 282      =1  
 283      =1  //--------------------------------------------------------------------
 284      =1  //  Functions used in only Menu
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 62  

 285      =1  #define   CONVERT_CODE      0x80
 286      =1  
 287      =1  void InitOSDWindow(BYTE *ptr);
 288      =1  
 289      =1  WORD GetOSDWindowX(BYTE winno);
 290      =1  WORD GetOSDWindowY(BYTE winno);
 291      =1  BYTE CreateOSDWindowOutline(BYTE winno, BYTE w, BYTE color);
 292      =1  void CreateOSDMenuWindow(BYTE, BYTE, BYTE, BYTE, BYTE, BYTE, BYTE);
 293      =1  void ClearOSDLine(BYTE winno, BYTE sx, BYTE sy, BYTE cnt, BYTE attr);
 294      =1  void WriteStringToAddr(WORD addr, BYTE *str, BYTE cnt);
 295      =1  void DrawAttrString(WORD addr, BYTE *str, BYTE cnt);
 296      =1  void DrawAttrCnt(WORD addr, BYTE color, BYTE cnt);
 297      =1  void ClearDataCnt(WORD, BYTE);
 298      =1  #define   SetOSDWindowX(A, B)       SetOSDWindowX_TW88(A, B)
 299      =1  #define   SetOSDWindowY(A, B)       SetOSDWindowY_TW88(A, B)
 300      =1  
 301      =1  //--------------------------------------------------------------------
 302      =1  //  Functions used in Menu and others
 303      =1  #define   ShowOSDWindow(A, B)       ShowOSDWindow_TW88(A, B)
 304      =1  #define   ClearOSD()              ClearOSD_TW88()
 305      =1  
 306      =1  //================================================================
 307      =1  //  Font
 308      =1  void DownloadUDFont(void);
 309      =1  #ifdef Hs_debug
 310      =1  void DisplayROMFont(BYTE);
 311      =1  void DisplayRAMFont(BYTE);
 312      =1  #endif
 313      =1  void DownloadFont(BYTE cod, CODE_P BYTE *fontdata);
 314      =1  //void DisplayGrid( void );
 315      =1  //void DisplayCone( void );
 316      =1  //void DisplayJapanese( void );
 317      =1  void TestRAMFont( void );
 318      =1  #ifdef BANKING
           =1 void DisplayMGrid( BYTE );
           =1 void DisplayMessage( void );
           =1 void DisplayChinese( void );
           =1 void DisplayJapanese( void );
           =1 void DisplayKorean( void );
           =1 void DisplayGridBank0( BYTE n );
           =1 void DisplayGridBank1( BYTE n );
           =1 #endif
 327      =1  
 328      =1  //================================================================
 329      =1  //  OSD COLOR
 330      =1  void Change_OSDColorLookup(void);
 331      =1  void Reset_OSDColorLookup(void);
 332      =1  
 333      =1  //====================================================================
 334      =1  //        Conversion
 335      =1  //====================================================================
 336      =1  BYTE utoa(WORD value, BYTE *str, BYTE radix);
 337      =1  BYTE ltoa_K(long value, BYTE *str, BYTE);
 338      =1  BYTE strlen( BYTE *str );
 339      =1  
 340      =1  #define CStrlen(A)        strlen(A)
 341      =1  
 342      =1  void WaitEndofDisplayArea(void);
 343      =1  
 344      =1  #endif  // __OSD_BASIC__
 345      =1  
  19          #include "Externs.h"
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 63  

   1      =1  //
   2      =1  //Externs.h : Register declaration
   3      =1  //
   4      =1  #ifdef INTERNAL_MCU
           =1 extern xdata BYTE REG00, REG01, REG02, REG03, REG04, REG05, REG06, REG07, REG08, REG09, REG0a, REG0b, REG0
             -c, REG0d, REG0e, REG0f,
           =1       REG10, REG11, REG12, REG13, REG14, REG15, REG16, REG17, REG18, REG19, REG1a, REG1b, REG1c, REG1d, REG1
             -e, REG1f,
           =1       REG20, REG21, REG22, REG23, REG24, REG25, REG26, REG27, REG28, REG29, REG2a, REG2b, REG2c, REG2d, REG2
             -e, REG2f,
           =1       REG30, REG31, REG32, REG33, REG34, REG35, REG36, REG37, REG38, REG39, REG3a, REG3b, REG3c, REG3d, REG3
             -e, REG3f,
           =1       REG40, REG41, REG42, REG43, REG44, REG45, REG46, REG47, REG48, REG49, REG4a, REG4b, REG4c, REG4d, REG4
             -e, REG4f,
           =1       REG50, REG51, REG52, REG53, REG54, REG55, REG56, REG57, REG58, REG59, REG5a, REG5b, REG5c, REG5d, REG5
             -e, REG5f,
           =1       REG60, REG61, REG62, REG63, REG64, REG65, REG66, REG67, REG68, REG69, REG6a, REG6b, REG6c, REG6d, REG6
             -e, REG6f,
           =1       REG70, REG71, REG72, REG73, REG74, REG75, REG76, REG77, REG78, REG79, REG7a, REG7b, REG7c, REG7d, REG7
             -e, REG7f,
           =1       REG80, REG81, REG82, REG83, REG84, REG85, REG86, REG87, REG88, REG89, REG8a, REG8b, REG8c, REG8d, REG8
             -e, REG8f,
           =1       REG90, REG91, REG92, REG93, REG94, REG95, REG96, REG97, REG98, REG99, REG9a, REG9b, REG9c, REG9d, REG9
             -e, REG9f,
           =1       REGa0, REGa1, REGa2, REGa3, REGa4, REGa5, REGa6, REGa7, REGa8, REGa9, REGaa, REGab, REGac, REGad, REGa
             -e, REGaf,
           =1       REGb0, REGb1, REGb2, REGb3, REGb4, REGb5, REGb6, REGb7, REGb8, REGb9, REGba, REGbb, REGbc, REGbd, REGb
             -e, REGbf,
           =1       REGc0, REGc1, REGc2, REGc3, REGc4, REGc5, REGc6, REGc7, REGc8, REGc9, REGca, REGcb, REGcc, REGcd, REGc
             -e, REGcf,
           =1       REGd0, REGd1, REGd2, REGd3, REGd4, REGd5, REGd6, REGd7, REGd8, REGd9, REGda, REGdb, REGdc, REGdd, REGd
             -e, REGdf,
           =1       REGe0, REGe1, REGe2, REGe3, REGe4, REGe5, REGe6, REGe7, REGe8, REGe9, REGea, REGeb, REGec, REGed, REGe
             -e, REGef,
           =1       REGf0, REGf1, REGf2, REGf3, REGf4, REGf5, REGf6, REGf7, REGf8, REGf9, REGfa, REGfb, REGfc, REGfd, REGf
             -e, REGff;
           =1 
           =1 #endif  // internal MCU only variables
  23      =1  
  20          #include "audio.h"
   1      =1  
   2      =1  #define MAX_SOUND_VOLUME 50
   3      =1  extern  BYTE  AudioVol;
   4      =1  extern  BYTE  PCAudioVol;
   5      =1  
   6      =1  //BYTE ResetMSP(void);
   7      =1  //void SetMSPSCARTPrescale(void);
   8      =1  //void SetMSPSourceSel(void);
   9      =1  //void SetMSPVol(void);
  10      =1  
  11      =1  //BYTE AudioAutoStdDetection(void);
  12      =1  //BYTE SteroMonoDetection(void);
  13      =1  
  14      =1  //BYTE TunerAudio(void);
  15      =1  //void ExtAudio(void);
  16      =1  //id PCAudio(void);
  17      =1  //id MuteOn(void);
  18      =1  //BYTE GetAudioVol(void);
  19      =1  BYTE ChangeVol(char);
  20      =1  //BYTE GetAudioBalance(void);
  21      =1  //BYTE ChangeBalance(char);
  22      =1  //BYTE GetAudioBass(void);
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 64  

  23      =1  //BYTE ChangeBass(char);
  24      =1  //BYTE GetAudioTreble(void);
  25      =1  //BYTE ChangeTreble(char);
  26      =1  //BYTE GetAudioEffect(void);
  27      =1  //BYTE ChangeAudioEffect(char amount);
  28      =1  //void ToggleAudioMute(void);
  29      =1  //void CheckAndClearMuteOn(void);
  30      =1  
  31      =1  //BYTE IsAudioMuteOn(void);
  32      =1  //void SetAudioMute(BYTE on );
  33      =1  //void ChangeMTS(BYTE type);
  34      =1  //void AudioOff(void);
  35      =1  void AudioMute(bit mute);
  36      =1  extern void    Wait_ms(WORD Tms);
  37      =1  
  38      =1  //#define AudioOn()     SetMSPVol()
  39      =1  //void ResetAudioValue();
  21          #include "HS_keyremo.h"
   1      =1  #ifndef _HS_keyremo_
   2      =1  #define _HS_keyremo_
   3      =1  
   4      =1  //
   5      =1  // KeyRemo.h
   6      =1  // Default function for Key Input and Remocon Input
   7      =1  //
   8      =1  //=============================================================================
   9      =1  //                        Operation Key Mapping
  10      =1  //=============================================================================
  11      =1  
  12      =1  
  13      =1  
  14      =1  #define  SelectMode 0
  15      =1  #define  JumpMode 1
  16      =1  
  17      =1  #define COMPOSITE1          1
  18      =1  #define COMPOSITE2          2
  19      =1  #define COMPOSITE3          3
  20      =1  #define COMPOSITE4          4
  21      =1  
  22      =1  
  23      =1  #ifndef QUAD
  24      =1  
  25      =1  #define COMPOSITE1          1
  26      =1  #define COMPOSITE2          2
  27      =1  #define COMPOSITE3          3
  28      =1  #define COMPOSITE4          4
  29      =1  
  30      =1  #ifdef AWT_ML072S
  31      =1  #define SOURCE_A      1     
  32      =1  #define SOURCE_R            2   
  33      =1  #define SOURCE_AV           3
  34      =1  #define SOURCE_B            4 
  35      =1  #else
           =1 #define SOURCE_A      1   
           =1 #define SOURCE_B            2   
           =1 #define SOURCE_R            3   
           =1 #define SOURCE_AV           4
           =1 #endif
  41      =1  
  42      =1  void CheckSourceMode(BYTE sorce);
  43      =1  #endif
  44      =1  
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 65  

  45      =1  
  46      =1  
  47      =1  extern BYTE NowModeState;
  48      =1  extern BYTE TriggerFlag;
  49      =1  extern bit  ParkFlag;
  50      =1  extern BYTE  Attr_A,Attr_B,Attr_C,Attr_R; 
  51      =1  extern BYTE TimeStep;
  52      =1  extern BYTE SEQFlag;
  53      =1  extern BYTE SEQIndex;
  54      =1  extern BYTE TriggerMode;
  55      =1  extern bit AVFlag;
  56      =1  extern bit VGAAudio;
  57      =1  
  58      =1  
  59      =1  
  60      =1  //BYTE TW2835Command(char,char,char,char,char);
  61      =1  void SetSourceMode(BYTE Index,char ,char ,char ,char );
  62      =1  void SetJumpSource(BYTE Index,char ,char ,char ,char );  //Pinchi 20150825 add
  63      =1  void SetSelectMode(void);
  64      =1  //void PriorityOffSelectMode(void);
  65      =1  void SetJumpMode(void);
  66      =1  void SetNowMode(void);
  67      =1  void SetRearSource(void);
  68      =1  void SetLeftSource(void);
  69      =1  void SetRightSource(void);
  70      =1  void CheckMirror(void);
  71      =1  BYTE CheckTrigger(void);
  72      =1  void TriggerHandler(BYTE T_Flag);
  73      =1  void SEQMode(void);
  74      =1  
  75      =1  void SelectBoxHandler(void);
  76      =1  
  77      =1  extern void CheckNewTriggerFunc(void);
  78      =1  
  79      =1  #endif
  22          
  23          ///extern IDATA BYTE adc_i2c_address, CurrentADC;
  24          //extern  BYTE  CheckBuf;
  25          static  BYTE m_cStandard= 0;
  26          extern BYTE SelectBoxMode;
  27          BYTE CAM_QUAD_TO=3;//ryan@20170928
  28          BYTE Backlight_TO=50;//ryan@20170928
  29          
  30          //=============================================================================
  31          //            Auto Detect
  32          //=============================================================================
  33          void SetAutoDetectStd(void)
  34          {
  35   1        BYTE val;
  36   1      
  37   1      //  if( GetInputSelection()==COMPONENT ) return;
  38   1      
  39   1        dPuts("\r\nSetAutoDetectStd");
  40   1        val = 0x80 | GetPossibleAutoDetectStdEE();    //AutoDetectStd
  41   1        WriteDecoder(SDTR, val);    // SDTR
  42   1        val = ReadDecoder(SDT);     // SDT
  43   1        WriteDecoder(SDT,  val | 0x07); // SDT
  44   1      }
  45          
  46          void ClearAutoDetectStd(BYTE std)
  47          {
  48   1        BYTE val;
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 66  

  49   1      
  50   1      //  if( GetInputSelection()==COMPONENT ) return;
  51   1      
  52   1        dPuts("\r\nClearAutoDetectStd");
  53   1      
  54   1        val = ReadDecoder(SDT); // SDT
  55   1        val = (val & 0xf8) | std;
  56   1        WriteDecoder(SDT,  val );
  57   1      }
  58          #if defined( SUPPORT_PC ) || defined( SUPPORT_DTV )
              //=============================================================================
              //            Auto Panel H Period Control
              //=============================================================================
              void AutoPHPCalEnable(void)
              {
                #ifdef DEBUG
                dPuts("\r\n +++++++++++++++++=>Auto PHP Enable");
                #endif
                WriteDecoder( 0xb6, (ReadDecoder(0xb6) & 0x7f) ); // Auto PHP Enable
                WriteDecoder( 0xb2, ReadDecoder(0xb2) );
              
              }
              
              void AutoPHPCalDisable(void)
              {
                #ifdef DEBUG
                dPuts("\r\n +++++++++++++++++=>Auto PHP Disable");
                #endif
                WriteDecoder( 0xb6, (ReadDecoder(0xb6) | 0x80) ); // Auto PHP Disable
                WriteDecoder( 0xb2, (ReadDecoder(0xb2)));
              
              }
              #endif
  82          
  83          //=============================================================================
  84          //                          Video Input Functions   
  85          //=============================================================================
  86          //=============================================================================
  87          //                          Detect Video System by Decoder
  88          //=============================================================================
  89          #ifndef ID_CHECK_BY_FW
  90          BYTE DetectDecoderInput(void)
  91          {
  92   1        BYTE std;
  93   1        BYTE val;
  94   1      
  95   1        //----- Check No Input
  96   1        val = ReadDecoder(CSTATUS);   // Decoder status Register
  97   1        if( (val & 0xc0) != 0x40 ) {  // no decoder input
  98   2          std = NOINPUT;
  99   2          return std;
 100   2        }
 101   1        //----- Check Color System by decoder
 102   1        for ( std=0; std<10; std++ ) {
 103   2          val = ReadDecoder(SDT);       // SDT:0x1c
 104   2          #ifdef DEBUG_DECODER
                  Printf("\r\nReadDecoder(0x1c): 0x%X", (WORD)val);
                  #endif
 107   2          if ( val & 0x80 ) {
 108   3            delay(10);
 109   3          }
 110   2          else {
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 67  

 111   3            val >>= 4;
 112   3            if ( val == 0x07 ) return (UNKNOWN);
 113   3            else return (val+1);
 114   3          }
 115   2        }
 116   1      //  if( val & 0x80 ) {          // Detection in proress
 117   1      //    std = UNKNOWN;
 118   1      //  }
 119   1      //  else {
 120   1      //    val >>= 4;
 121   1      //    if( val==0x07 ) std = UNKNOWN;
 122   1      //    else            std = val + 1;
 123   1      //  }
 124   1      
 125   1        #ifdef DEBUG_DECODER
                Printf("\r\nStill Detection in Progress, so return UNKNOWN: 0x%X", (WORD)val);
                #endif
 128   1        return UNKNOWN;
 129   1      }
 130          #endif  // ID_CHECK_BY_FW
 131          
 132          //=============================================================================
 133          //                          Change Input 
 134          //=============================================================================
 135          
 136          void COMPOSITE1Input(void)
 137          {
 138   1        WriteDecoder(INFORM, 0xC0);     // 01 00 00 x x   27M, COMPOSITE, Y0, C-, V-
 139   1        WriteDecoder(ACNTL, 0x03);  // CLK-on, Y-on, C-off, V(FB)-off 
 140   1        WriteDecoder(MISC3, ReadDecoder(MISC3)|0x06); 
 141   1      }
 142          
 143          #ifdef QUAD  //Pinchi 20150414 add
              void COMPOSITE2Input(void)
              {
                WriteDecoder(INFORM, 0xC6);     // 01 00 00 x x   27M, COMPOSITE, Y0, C-, V-
                WriteDecoder(ACNTL, 0x03);  // CLK-on, Y-on, C-off, V(FB)-off
                WriteDecoder(MISC3, ReadDecoder(MISC3)|0x06); 
              }
              #endif
 151          
 152          #ifdef AWT_ML072S  //Pinchi 20150827 add
 153          #ifdef HS
 154          void COMPOSITE2Input(void)///add by ryan@20171204
 155          {
 156   1        WriteDecoder(INFORM, 0xC6);     // 01 00 00 x x   27M, COMPOSITE, Y0, C-, V-
 157   1        WriteDecoder(ACNTL, 0x03);  // CLK-on, Y-on, C-off, V(FB)-off
 158   1        WriteDecoder(MISC3, ReadDecoder(MISC3)|0x06); 
 159   1      }
 160          #endif
 161          void COMPOSITE3Input(void)
 162          {
 163   1        WriteDecoder(INFORM, 0xCA);     // 01 00 00 x x   27M, COMPOSITE, Y0, C-, V-
 164   1        WriteDecoder(ACNTL, 0x03);  // CLK-on, Y-on, C-off, V(FB)-off
 165   1        WriteDecoder(MISC3, ReadDecoder(MISC3)|0x06); 
 166   1      }
 167          
 168          void COMPOSITE4Input(void)
 169          {
 170   1        WriteDecoder(INFORM, 0xCE);     // 01 00 00 x x   27M, COMPOSITE, Y0, C-, V-
 171   1        WriteDecoder(ACNTL, 0x03);  // CLK-on, Y-on, C-off, V(FB)-off
 172   1        WriteDecoder(MISC3, ReadDecoder(MISC3)|0x06); 
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 68  

 173   1      }
 174          
 175          #endif
 176          
 177          
 178          #if (defined AWT_NEW_SLIM_MODEL) || (defined SUPPORT_DTV)
              void COMPOSITE4Input(void)
              {
                WriteDecoder(INFORM, 0xCE);     // 01 00 00 x x   27M, COMPOSITE, Y0, C-, V-
                WriteDecoder(ACNTL, 0x03);  // CLK-on, Y-on, C-off, V(FB)-off
                WriteDecoder(MISC3, ReadDecoder(MISC3)|0x06); 
              }
              #endif
 186          
 187          #ifdef SUPPORT_SVIDEO
              void SVIDEOInput(void)
              {
                WriteDecoder(INFORM, 0x54);     // 01 01 01 0 x   27M, S-VIDEO,   Y1, C0, --
                WriteDecoder(ACNTL, 0x01);  // CLK-on, Y-on, C-on, V(FB)-off
              }
              #endif
 194          
 195          #ifdef SUPPORT_COMPONENT
              void COMPONENTInput(void)
              {
                WriteDecoder(INFORM, 0x7a);     // 0 1 11 10 1 0    27M, COMPONENT, Y2, C1, V0
                WriteDecoder(ACNTL, 0x00);  // CLK-on, Y-on, C-on, V(FB)-on
              
              //  WriteDecoder(0x35, 0x00);   //  V clamp Enable
              //  WriteDecoder(SDTR, 0x03);   
              }
              #endif
 205          
 206          #ifdef SUPPORT_PC
              void AVGAInput(void)
              {
                MakeStartInt();
              
                WriteDecoder(ACNTL, 0x00);  // CLK-on, Y-on, C-on, V(FB)-on
              //  WriteDecoder(INFORM, 0xed); // Y3,C2,V1
                WriteDecoder(INFORM, 0xcd); // Y3,C2,V1
                
                SetADCMode(PC);       // Load Inital Data
              
                //GetADCGainOffsetEE();     // ADC gain & offset
                
                //-------------- comment out for debug by yhbae 082307-------------
              //  GetInitPanelAttribute1();   // Panel Brightness / Contrast, it should change for selectable
                //-----------------------------------------------------------------
              
                SelectPanelAttrRegGroup(GROUP_RGB); // [0x70] = 0x20
                WriteDecoder(0x77, 0x00);     // Peaking register setting
                WriteDecoder(0x78, 0x00);     // Panel sharpness=0
              
                WriteDecoder(0x86, 0x00);     // Black/White stretsh Disable
                WriteDecoder(0x87, 0xff);     // min=0, max=0xff
              
                //SelectADCmux(PC);
              }
              #endif // SUPPORT_PC
 233          
 234          #ifdef SUPPORT_DTV
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 69  

              void DTVInput(void)
              {
                MakeStartInt();
              
                WriteDecoder(ACNTL, 0x00);  // CLK-on, Y-on, C-on, V(FB)-on
                WriteDecoder(INFORM, 0x4a); // Y3,C2,V1
                SetADCMode(DTV);
              
                //GetADCGainOffsetForDTVEE();   // ADC gain & offset
                //GetInitPanelAttribute1();   // Panel Brightness / Contrast
                //GetInitPanelAttribute2();   // Panel Hue / Sharpness / Saturation
              
                SelectPanelAttrRegGroup(GROUP_YCbCr);
                SetVideoMode( GetVideoModeEE());
                WriteDecoder(0x77, 0x30);     // Panel Peaking=0
                WriteDecoder(0x78, 0x30);     // Panel sharpness=0
              
                //SelectADCmux(DTV);
              }
              #endif  // SUPPORT_DTV
 255          
 256          //=============================================================================
 257          //                               Power Functions   
 258          //=============================================================================
 259          /*
 260          BYTE GetLCDPowerState(void)
 261          {
 262            BYTE val;
 263          
 264            val = ReadDecoder(0xd5);
 265            val &= 0x30;
 266            val >>= 4;
 267            return val;
 268          }
 269          */
 270          /*
 271          void SetLCDPowerState(BYTE dat)
 272          {
 273            WriteDecoder( 0xd4, 0x01 ); // timer prescaler
 274            WriteDecoder( 0xd6, 0x11 ); // suspend->standby   on->suspend 
 275            WriteDecoder( 0xd7, 0x11 ); // off->standby(!)    standby->off
 276            WriteDecoder( 0xd8, 0x11 ); // standby->suspend(*)  suspend->on     
 277            
 278            WriteDecoder( 0xd5, dat );    // Auto Power
 279          }
 280          */
 281          /*
 282          BYTE IsFreeRun(void)
 283          {
 284            BYTE val;
 285          
 286            val = ReadDecoder(0xbe);
 287            if( val & 0x04 ) return 1;
 288            else             return 0;
 289          }
 290          */
 291          #if defined( SUPPORT_PC ) || defined( SUPPORT_DTV )
              void PanelFreeRun(BYTE on)
              {
                BYTE val;
                #ifndef QVGA
                if( on ) AutoPHPCalDisable();
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 70  

                else AutoPHPCalEnable();
                #endif
              
                val = ReadDecoder(0xbe);
                if( on ) {
                  val |= 0x04;
                  WriteDecoder(0xb6, ( ReadDecoder(0xb6)& 0x70) | 0x85 ); // Disable Auto calc H period
                  //WriteDecoder(0xb6, 0xb5 );  // Disable Auto calc H period
                }
                else {    
                  val &= 0xfb;
                  WriteDecoder(0xb6, ReadDecoder(0xb6) & 0x7f );  // Enable Auto calc H period
                }
                WriteDecoder(0xbe, val);
              }
              
              void PanelBlack(BYTE on)      // what function for????
              {
                BYTE val, tmp;
              
                tmp = ReadDecoder(0xff);
                WriteDecoder(0xff, 0x01);
              
                val = ReadDecoder(0xf3);  // 0x1f3 bit5 is for all 0 out
                if( on ) {
                  val |= 0x20;
                  }
                else    {
                  val &= 0xdf;
                }
              
                WaitEndofDisplayArea(); 
                WriteDecoder(0xf3, val);
              
                WriteDecoder(0xff, tmp);
              }
              #endif
 334          #if 0
              void PanelMute(BYTE on)
              {
                if( on ){ // Mute
                  PanelBlack(on);
                  PanelFreeRun(on);
                }
                else
                { // Recover
                  PanelFreeRun(on);
                  PanelBlack(on);
                }
              }
              #endif
 348          
 349          void ON_LVDS(void)
 350          {
 351   1        #ifdef LVDS
                BYTE val;
                val = ReadDecoder(0x4e) & 0xdd; //1101 1101 
                WriteDecoder(0x4e, val|0x20); // GPIO1 En & output enable
              
                val = ReadDecoder(0x4f) & 0x0f;
                WriteDecoder(0x4f, val | 0x1f);   // GPIO1 = 1
                dPuts("\r\n--ON_LVDS"); 
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 71  

                #endif
 360   1      }
 361          
 362          void OFF_LVDS(void)
 363          {
 364   1        #ifdef LVDS
                BYTE val;
                val = ReadDecoder(0x4e) & 0xdd; //1101 1101 
              //  WriteDecoder(0x4e, val&~(0x20));  // GPIO0 En
                WriteDecoder(0x4e, val|0x20); // GPIO1 En
              
                val = ReadDecoder(0x4f) & 0x0f; //0xf9;
                WriteDecoder(0x4f, val | 0x00);   // GPIO1 = 0
                dPuts("\r\n--OFF_LVDS");  
                #endif
 374   1      }
 375          
 376          void LCDPowerON(BYTE mute)
 377          {
 378   1      
 379   1        if(PowerFlag==0 && CheckTrigger()==0 && SelectBoxMode==0)
 380   1          return;
 381   1        
 382   1        PowerLED(ON);
 383   1        //Printf("\r\n------> LCD on=%02x",(WORD)GetLCDPowerState());
 384   1          #if 0//ryan@20171016
                  if(mute==1)//ryan@20171002
                  {
                  SetBacklight();
                  return;
                  }
                  #endif
 391   1        //if( (GetLCDPowerState()==POWER_OFF)) 
 392   1        
 393   1        if( mute==3) 
 394   1        {
 395   2          #if 0//ryan@20171016
                    if(mute==1)
                  SetBacklight();
                  #endif
 399   2          //Printf("\r\n------> LCD on");
 400   2          OFF_LVDS();
 401   2          //PanelMute(1);
 402   2          
 403   2          //Panel_Enable();
 404   2          //Wait_ms(16);
 405   2          P3_5=1;
 406   2          
 407   2          //delay(10);
 408   2      
 409   2          WriteDecoder(0xd5, 0x09); // Standby  Panel:1  Signal:0  Back:0
 410   2          delay(4);
 411   2          //Wait_ms(40);
 412   2          WriteDecoder(0xd5, 0x0b); // Suspend  Panel:1  Signal:1  Back:0
 413   2      //    delay(1);
 414   2              
 415   2      //      ON_LVDS();
 416   2      //    PanelMute(mute);
 417   2          delay(10);
 418   2          ON_LVDS();
 419   2          
 420   2          #ifdef BACKLIGHT_PWM
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 72  

 421   2          WriteDecoder(0xd5, 0x0f); // On   Panel:1  Signal:1  Back:1
 422   2          #endif
 423   2      
 424   2          //AudioMute(1);       //WILLIAM-981103
 425   2          
 426   2          #ifdef BACKLIGHT_CCFL
                  //WriteDecoder(0xd5, 0x0f); // On   Panel:1  Signal:1  Back:1
                  WriteDecoder(0xff, 1);
                  WriteDecoder(0xb1, 0x30);
                  WriteDecoder(0x30, 0xf1);
                  WriteDecoder(0x34, 0x6f);   // dimming frequency for WVGA pannel
                  WriteDecoder(0xff, 0);
                  WriteDecoder(0xd5, 0x0f); // On   Panel:1  Signal:1  Back:1
                  #endif
 435   2          #ifdef BACKLIGHT_LED
                  //WriteDecoder(0xd5, 0x0f); // On   Panel:1  Signal:1  Back:1
                  WriteDecoder(0xff, 1);
                  WriteDecoder(0xb1, 0x20);
                  WriteDecoder(0x30, 0xd2);
                  WriteDecoder(0x31, 0xa6);
                  WriteDecoder(0x33, 0x40);
                  WriteDecoder(0x34, 0x80);
                  WriteDecoder(0x32, 0x84);
                  WriteDecoder(0x35, 0x80);
                  WriteDecoder(0x36, 0x00);
                  WriteDecoder(0xff, 0);
                  WriteDecoder(0xd5, 0x0f); // On   Panel:1  Signal:1  Back:1
                  #endif
 449   2          delay(5);
 450   2      
 451   2                
 452   2          //Wait_ms(50);
 453   2          CAM_QUAD_TO=3;//ryan@20170928
 454   2          //SetBacklight();
 455   2      
 456   2          TW2835Cmd("\n\rbusw 0 1 A1 11\n\r");
 457   2          Wait_ms(100);
 458   2              TW2835Cmd("\n\rbusw 0 1 A2 D7\n\r");  
 459   2          
 460   2        }
 461   1        else   if(mute==1||mute==0)
 462   1          {
 463   2          #ifdef AWT_ML072S
 464   2        
 465   2            if(SEQFlag||(PowerFlag==0))
 466   2            {
 467   3            P3_5=1;
 468   3            Wait_ms(500); 
 469   3            Panel_Enable();
 470   3            Wait_ms(20);
 471   3            SetBacklight();
 472   3            }
 473   2            else
 474   2            {
 475   3              if((GetKey(1)))///ryan@20180109
 476   3              {
 477   4              P3_5=1;
 478   4              //Wait_ms(100); 
 479   4              Panel_Enable();
 480   4              Wait_ms(20);
 481   4              SetBacklight();
 482   4              Wait_ms(50);  
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 73  

 483   4              }
 484   3              else
 485   3              {
 486   4              P3_5=1;
 487   4              //Wait_ms(500); 
 488   4              Panel_Enable();
 489   4              //Wait_ms(20);
 490   4              //SetBacklight();
 491   4              Backlight_TO=20;//ryan@20180108
 492   4              }
 493   3            }
 494   2      
 495   2            #ifdef Hs_debug
 496   2            Printf("\r\n*LCDPowerON  mute=%02x",(WORD)mute);
 497   2            #endif
 498   2          #else
                  P3_5=1;
                  Wait_ms(300); 
                  Panel_Enable();
                  Wait_ms(20);
                  SetBacklight(); 
                  #endif
 505   2          }
 506   1          //PanelMute(mute);
 507   1      }
 508          /*
 509          void LCDPowerOFF(void)
 510          {
 511            dPuts("\r\n------> LCD off");
 512            
 513            PanelMute(1);
 514          //  OFF_LVDS();
 515          
 516            SetLCDPowerState(POWER_OFF);
 517            OFF_LVDS();
 518          
 519            delay(10);
 520          }
 521          */
 522          /*
 523          void LCDPowerOFF(void)
 524          {
 525          //  if( GetLCDPowerState()==POWER_OFF ) return;
 526          
 527            Printf("\r\n------> LCD off");
 528            //PanelMute(1);
 529            
 530            WriteDecoder(0xd5, 0x0b); // Suspend  Panel:1  Signal:1  Back:0
 531            delay(1);
 532            WriteDecoder(0xd5, 0x09); // Standby  Panel:1  Signal:0  Back:0
 533            delay(1);
 534            WriteDecoder(0xd5, 0x08); // Off    Panel:0  Signal:0  Back:0
 535          
 536            OFF_LVDS();
 537          
 538            #ifdef BACKLIGHT_CCFL
 539            WriteDecoder(0xff, 1);
 540            WriteDecoder(0x30, 0xf2);
 541            WriteDecoder(0xff, 0);
 542            #endif
 543            #ifdef BACKLIGHT_LED
 544            WriteDecoder(0xff, 1);
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 74  

 545            WriteDecoder(0x32, 0x44);
 546            WriteDecoder(0xff, 0);
 547            #endif
 548            
 549            clrBacklight();
 550            Wait_ms(100);
 551            P3_5=0;
 552            Wait_ms(16);
 553            Panel_Disable();
 554            
 555              
 556          //  delay(10);
 557          }
 558          
 559          */
 560          #ifdef Hs_debug
 561          #ifdef SERIAL
 562          void LCDPower(void)
 563          {
 564   1        extern  BYTE InputSelection;
 565   1        static BYTE state=0;
 566   1      
 567   1        //state = GetLCDPowerState();
 568   1        if( state==POWER_ON ){
 569   2          state = POWER_OFF;
 570   2          LCDPowerOFF();
 571   2          PowerDown_XTAL(1);
 572   2      
 573   2          Printf("\nPower Off!!");
 574   2        }
 575   1        else //if( state==POWER_OFF )
 576   1        {
 577   2      //    reset = 0;
 578   2          PowerDown_XTAL(0);
 579   2          delay(10);
 580   2      /*    reset = 1;
 581   2          delay(10);
 582   2          InputSelection = 0xff;
 583   2          ChangeInput( GetInputSelectionEE() );
 584   2          LCDPowerON(0);
 585   2      */
 586   2          state = POWER_ON;
 587   2          LCDPowerON(0);
 588   2      
 589   2          Printf("\nPower On!!");
 590   2        }
 591   1      }
 592          #endif // SERIAL
 593          #endif
 594          /*
 595          #if defined( SUPPORT_PC ) || defined( SUPPORT_DTV )
 596          void DPMSmodeOFF(void)
 597          {
 598            //WriteDecoder(ACNTL, ReadDecoder(ACNTL) | 0x0f); // HHY 1.44 power down 27M clock, ADC
 599          }
 600          
 601          void DPMSmodeON(void)
 602          {
 603            //WriteDecoder(ACNTL, ReadDecoder(ACNTL) & 0xf0); // HHY 1.44 power on 27M clock, ADC
 604            //delay(5);
 605          }
 606          #endif  // SUPPORT_PC
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 75  

 607          */
 608          /***
 609          void SetPanelBitOrder(BYTE swap)
 610          {
 611            BYTE val;
 612            val = ReadDecoder(0xf7);
 613            if( swap ) val = val | 0x01;
 614            else       val = val & 0xfe;
 615            WriteDecoder(0xf7, val);
 616          }
 617          ***/
 618          /***
 619          void SetPanelSingleDouble(BYTE single)
 620          {
 621            BYTE val;
 622            val = ReadDecoder(0xb0);
 623            if( single ) val = val & 0x7f;
 624            else         val = val | 0x80;
 625            WriteDecoder(0xb0, val);
 626          }
 627          ***/
 628          //=============================================================================
 629          //                          Measurement Functions
 630          //=============================================================================
 631          #if defined( SUPPORT_PC ) || defined( SUPPORT_DTV ) || defined( DEBUG_SETPANEL)
              BYTE MeasureAndWait(BYTE field)
              {
                BYTE val;
                BYTE i;
              
                // StartMeasurement
                val = ReadDecoder( 0x5b ) & 0xF0;
                val |= ( (field & 0x03) << 2 );     // flag : choose field for measurement
                WriteDecoder(0x5b, val);
                val |= 0x01;
                WriteDecoder(0x5b, val);      // measure start
              
                // WaitMeasurementDataReady
                for(i=0; i<50; i++) {     // make more delay
                  delay(1);
                  val = ReadDecoder(0x5b);
                  val &= 0x01;
                  if( val == 0 ) return 1;
                }
              
                // ClearMeasurement
                WriteDecoder(0x5b, 8);
                wPuts(" ? ");
                return 0;
              }
              #endif
 658          
 659          //=================================================================================================
 660          //
 661          //=================================================================================================
 662          #if defined( SUPPORT_PC ) || defined( SUPPORT_DTV ) || defined( DEBUG_SETPANEL)
              void SetEnDet(void)
              {
                BYTE val;
              
                val = ReadDecoder(0x5c);
                val |= 0x01;    //Enable Input HSYNC/VSYNC period change/loss detection.
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 76  

                WriteDecoder(0x5c, val);
              
                val = ReadDecoder(0x5c);
              }
              
              void ClearEnDet(void)
              {
                BYTE val;
              
                val = ReadDecoder(0x5c);
                val &= 0xfe;    //Disable Input HSYNC/VSYNC period change/loss detection.
                WriteDecoder(0x5c, val);
              
                val = ReadDecoder(0x5c);
              }
              #endif // SUPPORT_PC || SUPPORT_DTV || DEBUG_SETPANEL
 685          
 686          //=============================================================================
 687          //                          Panel Setting
 688          //=============================================================================
 689          #if defined( SUPPORT_PC ) || defined( SUPPORT_DTV )
              
              BYTE IsBypassmode(void)
              {
                BYTE dat;
              
                dat = ReadDecoder(TW88_XYSCALEHI) & 0x10; // Zoom by-pass
                return dat;
              }
              /*
              BYTE IsInteraced(void)
              {
                if( ReadDecoder(0x42) & 0x80 ) return 1;
                return 0;
              }
              */
              WORD GetHstart(void)
              {
                WORD hstartMax;
              
                WriteDecoder(0x5b, 0x88);
                hstartMax = (WORD)ReadDecoder(0x5a) << 8;   // change for TW8816B2
                hstartMax += ReadDecoder(0x59);
              
                #ifdef DEBUG_PC_MEAS
                dPrintf("\r\n === GetHstart(%d)", hstartMax);
                #endif
                return ( hstartMax );
              }
              
              /*
              WORD GetHend(void)
              {
                WORD hendMin, hendMax;
              
                WriteDecoder(0x5b, 0x98);
                hendMin = (WORD)ReadDecoder(0x58) << 8;
                hendMin += ReadDecoder(0x57);
                hendMax = (WORD)ReadDecoder(0x5a) << 8;
                hendMax += ReadDecoder(0x59);
              
              
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 77  

                if ( hendMax < hendMin )
                  hendMax = hendMin;
                #ifdef DEBUG_PC_MEAS
                dPrintf("\r\n === GetHend(%d)", hendMax);
                #endif
                return hendMax;
              }
              */
              WORD GetVstart(void)
              {
                WORD vstartMin, vstartMax;
              
                WriteDecoder(0x5b, 0xa8);
                vstartMin = (WORD)ReadDecoder(0x58) << 8;
                vstartMin += ReadDecoder(0x57);
                vstartMax = (WORD)ReadDecoder(0x5a) << 8;   // change for TW8816B2
                vstartMax += ReadDecoder(0x59);
              
                if ( vstartMax < vstartMin )
                  vstartMax = vstartMin;
                #ifdef DEBUG_PC_MEAS
                dPrintf( "\r\n === GetVstart%x(%d)", vstartMax, vstartMax );
                #endif
                return vstartMax;
              }
              
              
              
              WORD GetVend(void)
              {
                WORD vend, vendMin;
              
                WriteDecoder(0x5b, 0xb8);
                vendMin = (WORD)ReadDecoder(0x58) << 8;
                vendMin += ReadDecoder(0x57);
                vend = (WORD)ReadDecoder(0x5a) << 8;
                vend += ReadDecoder(0x59);
              
                if ( vend < vendMin )
                  vend = vendMin;
                #ifdef DEBUG_PC_MEAS
                dPrintf("\r\n === GetVend(%d)", vend);
                #endif
                return vend;
              }
              
              /**** Not used
              void MaskOnSYNCInt()
              {
                BYTE val;
              
                val = 0xfc;
                WriteDecoder(0xb2, val);  //IRQ mask
                dPrintf("\r\nDisableSYNCint:->%02x", val);
              }
              ****/
              
              void MaskOffSYNCInt()
              {
                BYTE val;
              
                val = 0xfc;
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 78  

                WriteDecoder(0xd2, val);  //IRQ mask
                
                #ifdef DEBUG_TW88
                dPrintf("\r\nEnableSYNCint:->%02x", (WORD)val);
                #endif
              
                WriteDecoder(0xd2, 0xcc);
              
                #ifdef DEBUG_TW88
                dPrintf("\r\nEnableSYNCint:->%02x", (WORD)0xcc);
                #endif
              }
              
              
              void MakeStartInt(void)
              {
                MaskOffSYNCInt();
              
                WriteDecoder(0xd3, 0x02);         // IRQ mask 2
                WriteDecoder(0x4e, ReadDecoder(0x4e) | 0x08); // IRQ pin, active low
                WriteDecoder(0x5b, 0x09);         // Start measure
                //WriteDecoder(0x5b, 0x08);         // clear measure self cleared bit
                WriteDecoder(0x5c, 0x07);         // change error tolerance and enable V/HSYNC change/loss detection
              
                SetEnDet();               // Set enable-detection
              }
              
              void Clear_bypass()
              {
                BYTE dat;
              
                dat = ReadDecoder(TW88_XYSCALEHI);  
                WriteDecoder(TW88_XYSCALEHI, dat & 0xef); // xxx0 xxxx
              }
              
              
              WORD GetHactiveStart(void)
              {
                WORD buf;
                BYTE val;
              
                val = ReadDecoder(0x49);  
                buf = (WORD)(val & 0x07) << 8;
                buf += ReadDecoder(0x47);
              
                return buf;
              }
              
              /**** Not used */
              WORD GetHactiveEnd(void)
              {
                WORD buf;
                BYTE val;
              
                val = ReadDecoder(0x49);
                buf = (WORD)(val & 0xf0) << 4;
                buf += ReadDecoder(0x48);
              
                return buf;
              }
              /****/
              
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 79  

              //#ifdef DEBUG_TW88
              WORD GetVactiveStart(void)
              {
                WORD buf;
                BYTE val;
              
                val = ReadDecoder(0x4d);      // high 2 bits
                buf = (WORD)(val & 0x03) << 8;
                buf |= ReadDecoder(0x4a);     // Vactive Odd field Line start position
              
                return buf;
              }
              //#endif
              
              //-------------------------------------------------------------------
              //                  Set Active Region Functions
              //-------------------------------------------------------------------
              void SetHactiveStart(WORD hstart)
              {
                BYTE val;
              
                #ifdef DEBUG_PC_MEAS
                dPrintf("\r\n === SetHactiveStart(%d)", hstart);
                #endif
                // TW8804 write LSByte first
                val = ReadDecoder(0x49);
                val = val & 0xf8;
                val = val | (hstart>>8);
              
                WriteDecoder(0x49, val);
                WriteDecoder(0x47, (BYTE)hstart);
              }
              
              void SetHactiveEnd(WORD hend)
              {
                BYTE  val, buf;
              
                #ifdef DEBUG_PC_MEAS
                dPrintf("\r\n === SetHactiveEnd(%d)", hend);
                #endif
                // TW8804 write LSByte first
                buf = (BYTE)(hend>>8)<<4;
                val = ReadDecoder(0x49);
                val = val & 0x0f;
                val = val | buf;
                
                WriteDecoder(0x49, val);
                WriteDecoder(0x48, (BYTE)hend);
              }
              
              void SetVactiveStart(WORD vstart)
              {
                BYTE val, v_h, v_l;
              
                #ifdef DEBUG_PC_MEAS
                dPrintf("\r\n === SetVactiveStart(%d)", vstart);
                #endif
                // TW8804 write LSByte first
                v_l = (BYTE)vstart;
                v_h = (BYTE)(vstart>>8);
              
                val = ReadDecoder(0x4d);  // high 2 bits
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 80  

                val = (val & 0xf0);
                val = val | (v_h<<2);
                val = val | v_h;
                WriteDecoder(0x4d, val);
              
                WriteDecoder(0x4a, v_l);  // Vactive Odd field Line start position
                WriteDecoder(0x4b, v_l);  // Vactive Even field Line start position
              }
              
              void SetVactiveLen(WORD van)
              {
              //  WORD vstop;
                BYTE val, buf;
              
                //van += 1;             // HHY add 1, because of bottom line garbage
                #ifdef DEBUG_PC_MEAS
                dPrintf("\r\n === SetVactiveLen(%d)", van);
                #endif
              
                // TW8804 write LSByte first
                buf = (BYTE)(van>>8) << 4;
                val = ReadDecoder(0x4d);
                val = val & 0x8f;
                val = val | buf;
                WriteDecoder(0x4d, val);
                WriteDecoder(0x4c, (BYTE)van);    
                        
              }
              
              #include "osdmenu.h"
              extern CODE struct RegisterInfo UserRange;
              extern CODE struct RegisterInfo PanelContrastRange;
              extern CODE struct RegisterInfo PanelBrightnessRange;
              extern CODE struct RegisterInfo PanelSharpnessRange;
              extern CODE struct RegisterInfo PanelHueRange;
              extern CODE struct RegisterInfo PanelSaturationRange;
              
              void GetInitPanelAttribute1(void)
              {
                BYTE rdata;
                int regv;
              
                rdata = GetPanelContrastEE();
                Mapping1( rdata, &UserRange ,&regv, &PanelContrastRange);
                SetRGBContrast( GetPCColorTempModeEE(), (BYTE)regv );
              
                rdata = GetPanelBrightnessEE() ;
                Mapping1( rdata, &UserRange , &regv,   &PanelBrightnessRange );
                SetPanelBrightnessReg(RED,   (BYTE)regv);
                SetPanelBrightnessReg(GREEN, (BYTE)regv);
                SetPanelBrightnessReg(BLUE,  (BYTE)regv);
              }
              
              #endif // SUPPORT_PC
 971          /*
 972          void DefaultPanelAttributeForVideo(void)
 973          {
 974            BYTE rdata;
 975          
 976            SelectPanelAttrRegGroup(GROUP_RGB);
 977            rdata = GetAttributesFromNTSCSettings(0x70);
 978            SetPanelHueReg( (ReadDecoder(0x70) & 0xc0) | (rdata & 0x3f) );
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 81  

 979          
 980            rdata = GetAttributesFromNTSCSettings(0x71);
 981            SetPanelContrastReg(RED,  rdata);
 982          
 983            rdata = GetAttributesFromNTSCSettings(0x72);
 984            SetPanelContrastReg(GREEN,rdata);
 985          
 986            rdata = GetAttributesFromNTSCSettings(0x73);
 987            SetPanelContrastReg(BLUE, rdata);
 988          
 989            rdata = GetAttributesFromNTSCSettings(0x74);
 990            SetPanelBrightnessReg(RED,  rdata);
 991          
 992            rdata = GetAttributesFromNTSCSettings(0x75);
 993            SetPanelBrightnessReg(GREEN,rdata);
 994          
 995            rdata = GetAttributesFromNTSCSettings(0x76);
 996            SetPanelBrightnessReg(BLUE, rdata);
 997          
 998            //rdata = GetAttributesFromNTSCSettings(0x77);
 999            //SetPanelSharpnessReg( rdata );
1000          
1001            SelectPanelAttrRegGroup(GROUP_YCbCr);
1002            SetPanelSaturationReg(U_SAT, 0x80);
1003            SetPanelSaturationReg(V_SAT, 0x80);
1004            //SelectPanelAttrRegGroup(GROUP_RGB);
1005          
1006          }
1007          */
1008          #ifdef SUPPORT_PC
              
              //=============================================================================
              //                          Invert Polarity Functions
              //=============================================================================
              /*
              void InvertHSYNCPolarity(void)
              {
                BYTE val;
              
                val = ReadDecoder(0x40);
                if( val & 0x04 ) {
                  val &= 0xfb;
              
                  #ifdef DEBUG_PC
                  dPuts("\r\nInvert H Pol: N->P ");
                  #endif
              
                }
                else {
                  val |= 0x04;
                  
                  #ifdef DEBUG_PC
                  dPuts("\r\nInvert H Pol: P->N ");
                  #endif
              
                }
                WriteDecoder(0x40, val);
              }
              */
              void InvertVSYNCPolarity(void)
              {
                BYTE val;
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 82  

              
                val = ReadDecoder(0x40);
                if( val & 0x02 ) {
                  val &= 0xfd;
              
                  #ifdef DEBUG_PC
                  dPuts("\r\nInvert V Pol: N->P ");
                  #endif
              
                }
                else {
                  val |= 0x02;
              
                  #ifdef DEBUG_PC
                  dPuts("\r\nInvert V Pol: P->N ");
                  #endif
              
                }
                WriteDecoder(0x40, val);
              }
              
              //=============================================================================
              //                          get sync pulse Functions
              //=============================================================================
              WORD GetVSYNCPulse(void)
              {
                WORD buf;
              
                WriteDecoder(0x5b, 0x78);     // VSYNC 
                delay(10);
                buf = (WORD)ReadDecoder(0x58) << 8;
                buf |= ReadDecoder(0x57);
              
                #ifdef DEBUG_PC
                dPrintf("\r\nGetVSYNCPulse():%d ", buf);
                #endif
                return buf;
              }
              
              /* Not used right now!!
              WORD GetRelativePosition(void)
              {
                WORD buf;
              
                WriteDecoder(0x5b, 0x70);     // VSYNC 
              
                buf = (WORD)ReadDecoder(0x5a) << 8;
                buf |= ReadDecoder(0x59);
              
                return buf;
              }
              //*/
              
              WORD GetHSYNCPulse(void)
              {
                WORD buf;
              
                WriteDecoder(0x5b, 0x68);     // HSYNC 
                buf = (WORD)ReadDecoder(0x58) << 8;   // from MSB
                buf |= ReadDecoder(0x57);
              
                return buf;
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 83  

              }
              
              #endif  // SUPPORT_PC
1106          
1107          //=============================================================================
1108          //                Internal PLL
1109          //=============================================================================
1110          #if defined SUPPORT_PC || defined SUPPORT_DTV
              
              BYTE GetPOST(void)
              {
                BYTE post;
              
                post = ReadDecoder(TW88_PLL_DIV);
                return ((post>>6) & 0x03);      // change register position
              }
              
              DWORD GetPPF(void)
              {
                DWORD ppf, Freq;
                BYTE  i;
              
                Freq = ReadDecoder(TW88_FPLL0);
                Freq &= 0x0f;
                Freq <<= 8;
                Freq |= ReadDecoder(TW88_FPLL1);
                Freq <<= 8;
                Freq |= ReadDecoder(TW88_FPLL2);
              
                #ifdef DEBUG_PC
                dPrintf("\r\n(GetFBDN) :%ld", Freq);
                #endif
              // 27000000 * 4 * FREQ / 2^17  / 2^POST
                ppf = 824L * ( Freq );
              //  ppf = 412L * ( GetFBDN() );
              
                i= GetPOST();
                
                for(; i>0; i-- ) ppf /= 2;
              
                #ifdef DEBUG_PC
                dPrintf("\r\n(GetPPF) :%ld", ppf);
                #endif
                return ppf;
              }
              #endif 
1149          
1150          #if defined SUPPORT_PC || defined SUPPORT_DTV
              
              // PLL = 108MHz *FPLL / 2^17
              // FPLL = PLL * 2^17 / 108MHz
              void ChangeInternPLL(DWORD _PPF)
              {
                BYTE  ppf, CURR, VCO, POST, i;
                DWORD FPLL;
              
                #ifdef DEBUG_PC
                dPrintf("\r\n++ ChangeInternPLL ++_PPF:%08lx(%ld) ", _PPF, _PPF);
                #endif
              
                ppf = _PPF/1000000;
              
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 84  

                //----- Frequency Range --------------------
                if     ( ppf < 27 )  { VCO=0; CURR=0; POST=2; }   // step = 0.5MHz
                else if( ppf < 54 )  { VCO=1; CURR=0; POST=1; }   // step = 1.0MHz
                else if( ppf < 108 ) { VCO=2; CURR=0; POST=0; }   // step = 1.0MHz
                else                 { VCO=3; CURR=0; POST=0; }   // step = 1.0MHz
              
                //----- Get FBDN
                FPLL = (_PPF/100000L)*2427L;
              
                i = POST;
                for(; i>0; i-- )
                  FPLL *= 2;
              
                FPLL = FPLL / 20L;
              
                //----- Setting Registers : below is different with 8806
                WriteDecoder( TW88_FPLL0, (FPLL>>16));
                WriteDecoder( TW88_FPLL1, (BYTE)(FPLL>>8));
                WriteDecoder( TW88_FPLL2, (BYTE)FPLL );
              
                if(PcMode==EE_XGA_60)   //william-20100128
                  WriteDecoder( TW88_FPLL1,0xb5); 
              
              
                WriteDecoder( TW88_PLL_DIV, (VCO<<4) | (POST<<6) |CURR );
              }
              //=============================================================================
              //                     Set Measurement Window Functions   
              //=============================================================================
              void SetMeasureWindowH(WORD start, WORD stop)
              {
                BYTE val;
              
                #ifdef DEBUG_PC
                dPrintf("\r\nSetWindow H. Range(%04x, %04x)", start, stop);
                #endif
              
                // TW8804 write LSByte first
                val = (BYTE)((stop >> 4) & 0xf0);
                val |= (BYTE)((start>>8) & 0x07);
                WriteDecoder(0x53, val);        // H-start and H-stop
              
                WriteDecoder(0x51, (BYTE)start);    // H-start
                WriteDecoder(0x52, (BYTE)stop);     // H-stop
              }
              
              void SetMeasureWindowV(WORD start, WORD stop)
              {
                BYTE val;
              
                #ifdef DEBUG_PC
                dPrintf("\r\nSetWindow V. Range(%04x, %04x)", start, stop);
                #endif
              
                // TW8804 write LSByte first
                val  = (BYTE)((stop>>4) & 0x70);
                val |= (BYTE)((start>>8) & 0x07);
                WriteDecoder(0x56, val);        // V-start & V-stop
              
                WriteDecoder(0x54, (BYTE)start);    // V-start
                WriteDecoder(0x55, (BYTE)stop);     // V-stop
              }
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 85  

              #endif // SUPPORT_PC || defined SUPPORT_DTV
1228          
1229          //=============================================================================
1230          //                                ZoomControl
1231          //=============================================================================
1232          #if defined(SUPPORT_PC) || defined(SUPPORT_DTV)
              void BypassZoom()
              {
                #ifdef WXGA
                WriteDecoder(TW88_XUSCALELO, 0xcd);
                WriteDecoder(TW88_YUSCALELO, 0x80);
                WriteDecoder(TW88_XDSCALELO, 0x00);
                WriteDecoder(TW88_XYSCALEHI, 0x06); 
                #else
                //SetBypassmode=1;
                WriteDecoder(TW88_XUSCALELO, 0x00);
                WriteDecoder(TW88_XDSCALELO, 0x80);
                WriteDecoder(TW88_YUSCALELO, 0x00);
                WriteDecoder(TW88_XYSCALEHI, 0x15); //Set bit 4 to 1
                #endif
              }
              #endif
1249          
1250          #if defined(SUPPORT_PC) || defined(SUPPORT_DTV) //  || defined(WIDE_SCREEN)
              void XscaleU(DWORD scale)
              {
                BYTE val;
              
                WriteDecoder( TW88_XUSCALEFINE, (BYTE)scale);
              
                scale >>= 8;
                WriteDecoder( TW88_XUSCALELO, (BYTE)scale);
              
                scale >>= 8;
                val = ReadDecoder(TW88_XYSCALEHI);
                val &= 0xfe;
                val |= (BYTE)scale;
                WriteDecoder( TW88_XYSCALEHI, val );
              }
              
              void XscaleD(DWORD scale)
              {
                BYTE val;
              
                WriteDecoder( TW88_XDSCALELO, (BYTE)scale);
              
                scale >>= 8;
                scale <<= 1;
                val = ReadDecoder(TW88_XYSCALEHI);
                val &= 0xfd;
                val |= (BYTE)scale;
                WriteDecoder( TW88_XYSCALEHI, val );
              }
              
              void XScale2(DWORD scale)
              {
              extern  BYTE PcMode;
                if( scale==0x10000 ) {    // No Scale
                  XscaleU(0x10000);
                  XscaleD(0x80);
                }
                else if( scale<0x10000 ) {  // Up Scale
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 86  

                  XscaleU(scale);
                  #ifdef REFERENCE
                  XscaleD(0x80);
                  #else
                  #ifdef XGA
                  XscaleD(0x80);
                  #else
                  if (PcMode >= EE_SVGA_56 && PcMode <= EE_SVGA_85 )
                    XscaleD(0x82);
                  else
                    XscaleD(0x80);
                  #endif 
                  #endif
                }
                else {            // Down Scale
                  XscaleU(0x10000);
                  #ifdef REFERENCE
                  XscaleD(scale/2/256);
                  #else
                  if (PcMode == EE_XGA_60)
                  {
                    XscaleD(scale/2/256 +1);
                  }
                  else
                    XscaleD(scale/2/256);
                  #endif
                }
              }
              
              void YScale2(DWORD scale)
              {
                BYTE val;
              
                WriteDecoder( TW88_YUSCALEFINE, (BYTE)(scale));
              
                scale >>= 8;
                WriteDecoder( TW88_YUSCALELO, (BYTE)(scale));
              
                scale >>= 8;
                scale <<= 2;
                val = ReadDecoder(TW88_XYSCALEHI) & 0xf3;
                val |= (BYTE)scale;
                WriteDecoder( TW88_XYSCALEHI, val );
              }
              #endif // SUPPORT_PC || SUPPORT_DTV || WIDE_SCREEN
1334          
1335          /**
1336          #if defined(SUPPORT_PC) || defined(SUPPORT_DTV)
1337          WORD GetYScale(void)
1338          {
1339            WORD scale;
1340            BYTE val;
1341          
1342            scale = ReadDecoder(TW88_YUSCALELO);
1343            val = ReadDecoder(TW88_XYSCALEHI);
1344            val = (val >> 2) & 0x03;
1345            scale = scale + val*0x100;
1346          
1347            return scale;
1348          }
1349          #endif // SUPPORT_PC || SUPPORT_DTV
1350          **/
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 87  

1351          
1352          //=============================================================================
1353          //                               Panel related..
1354          //=============================================================================
1355          /***
1356          #if (defined SERIAL) || (defined WIDE_SCREEN)
1357          void SetPVR(WORD pvr)
1358          {
1359            BYTE buf;
1360          
1361            // TW8804 write LSByte first
1362            buf = ReadDecoder(0xbb) & 0x0f;
1363            buf = buf | ( (pvr>>4) & 0xf0 );
1364            WriteDecoder( 0xbb, buf );
1365          
1366            WriteDecoder( 0xba, (BYTE)pvr );
1367          }
1368          
1369          void SetPHR(WORD phr)
1370          {
1371            BYTE buf;
1372          
1373            // TW8804 write LSByte first
1374            buf = ReadDecoder(0xb6) & 0x0f;
1375            buf = buf | ( (phr>>4) & 0xf0 );
1376            WriteDecoder( 0xb6, buf );
1377          
1378            WriteDecoder( 0xb5, (BYTE)phr );
1379          }
1380          #endif // SERIAL || WIDE_SCREEN
1381          ***/
1382          
1383          #if defined( SUPPORT_PC ) || defined( SUPPORT_DTV ) || defined( DEBUG_SETPANEL)
              //----- Panel V Resolution
              WORD GetPVR(void)
              {
              /*  WORD  pvr;
                BYTE  val;
                
                val = ReadDecoder(0xbb);
                pvr = (val & 0x70) << 4;    // pppp xxxx -> pppp 0000 0000
                pvr |= ReadDecoder(0xba);
              
                return pvr;*/
                return PVR_;
              }
              
              //----- Panel H Resolution
              WORD GetPHR(void)
              {
              /*  WORD  phr;
                BYTE  val;
              
                val = ReadDecoder(0xb6);
                phr = (val & 0x70) << 4;    // pppp xxxx -> pppp 0000 0000
                phr |= ReadDecoder(0xb5);
              
                return phr;*/
                return PHR_;
              }
              
              WORD GetHPN(void)
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 88  

              {
                WORD buf;
              
                ClearEnDet();     // HHY 05.29.03 protect changing during read out
              
                WriteDecoder(0x5b, 0x58); // HSYNC period and VSYNC period
              
                buf = ReadDecoder(0x58);  // from MSB
                buf = buf << 8;
                buf = buf | ReadDecoder(0x57);
              
                SetEnDet();       // HHY 05.29.03 release protection
              
                return buf;
              
              
              }
              /*
              WORD GetHPN(void)
              {
                WORD buf, sum;
                BYTE i;
              
                //Get HPN 
                WriteDecoder(0x5b, 0x50); // HSYNC period and VSYNC period
              
                //HPN
              
                for(i=0, sum=0; i<5; i++) {   // HHY 1.45 take average 
                  buf = (WORD)ReadDecoder(0x58) << 8;// from MSB
                  buf |= ReadDecoder(0x57);
                  sum += buf;
                }
              
                buf = (sum+5)/5;
              
                return buf;
              }
              */
              WORD GetVPN(void)
              {
                WORD buf;
              
                WriteDecoder(0x5b, 0x58); // HSYNC period and VSYNC period
              
                buf = (WORD)ReadDecoder(0x5a);
                buf = buf << 8;
                buf = buf | ReadDecoder(0x59);
                return buf;
              }
              
              /*
              WORD GetPVP(void)
              {
                WORD pvp;
              
                pvp = ReadDecoder(0xbb);          // pvp = Panel Vsync Period
                pvp = (pvp & 0x0f) << 8;        //
                pvp |= ReadDecoder(0xb7);         //
              
                return pvp;
              }
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 89  

              */
              
              BYTE GetVBackPorch(void)
              {
                return ReadDecoder(0xb9);
              }
              
              #endif // SUPPORT_PC
1483          
1484          #if defined SUPPORT_PC || defined SUPPORT_DTV
              void SetVBackPorch(BYTE val)
              {
                #ifdef DEBUG_PC
                dPrintf("\r\n === SetVBackPorch(%d)", (WORD)val);
                #endif
                WriteDecoder(0xb9, val);
              }
              
              void SetPVP(WORD period )
              {
                BYTE val;
              
                // TW8804 write LSByte first
                val = ReadDecoder(0xbb);
                val = val & 0xf0;
                val = val | (BYTE)(period>>8);
                WriteDecoder(0xbb, val);
                WriteDecoder(0xb7, (BYTE)period); // A4, A8 = Panel Vsync Period
              }
              
              void SetPHP(WORD php)
              {
                BYTE val;
              
                // TW8804 write LSByte first
                val = ReadDecoder(0xb6);
                val &= 0xf0;        //0xf8; cut D
                val |= (BYTE)(php>>8);
                WriteDecoder(0xb6, val);
                WriteDecoder(0xb2, php);    // A9, AD = Panel Hsync Cycle
              }
              
              #endif //#if defined SUPPORT_PC || defined SUPPORT_DTV
1518          
1519          /*WORD GetPHP(void)
1520          {
1521            WORD php;
1522          
1523            php = ((WORD)ReadDecoder(0xb6) & 0x0f) << 8;
1524            php += ReadDecoder(0xb2);
1525          
1526            return php;
1527          }
1528          
1529          */
1530          
1531          
1532          //#if (defined SERIAL) || (defined WIDE_SCREEN)
1533          /*#if (defined WIDE_SCREEN)
1534          WORD GetVactive(void)  // Input V active length
1535          {
1536            WORD actv;
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 90  

1537          
1538            actv =   ReadDecoder(CROP_HI) & 0x30;
1539            actv <<= 4;
1540            actv |=  ReadDecoder(VACTIVE_LO);
1541          
1542            return actv;
1543          }
1544          #endif // WIDE_SCREEN
1545          
1546          
1547          WORD GetHCounter1(BYTE field )
1548          {
1549            WORD counter;
1550          
1551            MeasureAndWait(field);
1552          
1553            WriteDecoder(0x5b, 0xc0);
1554            counter = (WORD)ReadDecoder(0x58) << 8;
1555            counter += ReadDecoder(0x57);
1556          
1557            return counter;
1558          }
1559          
1560          void SetHInitial(BYTE field, WORD counter)
1561          {
1562            BYTE val;
1563            
1564            if( field==0 ) {  // odd
1565              val = ReadDecoder( 0xc2 );
1566              val = ( val & 0xf0 ) |  ( ( counter>>8 ) & 0x0f );
1567              WriteDecoder(0xc2, val);
1568              WriteDecoder(0xc0, (BYTE)counter);
1569            }
1570            
1571            else {        // even
1572              val = ReadDecoder( 0xc2 );
1573              val = ( val & 0x0f ) |  ( ( counter>>4 ) & 0xf0 );
1574              WriteDecoder(0xc2, val);
1575              WriteDecoder(0xc1, (BYTE)counter);
1576            }
1577          }
1578          */
1579          //=============================================================================
1580          //
1581          //=============================================================================
1582          //
1583          /*
1584          void TuneLineBuffer(BYTE field)
1585          {
1586            WORD php, hcounter;
1587            int initial=0;
1588            BYTE freerun;
1589          
1590            extern IDATA BYTE  PcMode;
1591          
1592          
1593            #if defined (DEBUG_PC) || defined (DEBUG_DECODER)
1594            dPrintf("\r\n----- TuneLineBuffer:%d -----", (WORD)field);
1595            #endif
1596          
1597            #ifdef SUPPORT_PC
1598            if( IsBypassmode() ) return;
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 91  

1599            #endif
1600          
1601            //#ifdef SUPPORT_DTV
1602            //if( IsDTVInput() ) return;
1603            //#endif
1604          
1605            // disable free run
1606            freerun = IsFreeRun();
1607            PanelFreeRun(0);
1608          
1609            php = GetPHP();
1610          
1611            initial = 0;
1612            SetHInitial(field, initial);
1613          
1614            hcounter = GetHCounter1(field);
1615            #if defined (DEBUG_PC) || defined (DEBUG_DECODER)
1616            dPrintf("\r\nInitial=%4x  Hcounter=%4x  PHP=%4x (%2d%%)", initial, hcounter, php, (WORD)((DWORD)hcounter*
             -100/php) );
1617            #endif
1618            
1619            if( (hcounter < ((DWORD)php*78/100)) || (hcounter > ((DWORD)php*82/100)) ) {
1620              
1621              initial = php*4/5 - hcounter + initial;
1622              if( initial>=0 ) {
1623                SetHInitial(field, initial/2);
1624                dPuts(" + ");
1625              }
1626              else {
1627                SetHInitial(field, 0x1000 + initial/2);
1628                dPuts(" - ");
1629              }
1630              
1631          //    WriteDecoder(0xb1, ReadDecoder(0xb1)&0x08);
1632          //    WriteDecoder(0xb0, 0xff);
1633          //    WriteDecoder(0xb1, 0xff);
1634              
1635            }
1636            
1637          
1638            PanelFreeRun(freerun);
1639          }
1640          */
1641          
1642          //=============================================================================
1643          //
1644          //=============================================================================
1645          /*
1646          WORD GetAveHCVWRS(BYTE field)
1647          {
1648            WORD hcounter, ave=0;
1649            BYTE i;
1650          
1651          
1652            #ifdef DEBUG_TW88
1653            dPuts("\r\n------ Get Average of HCVWRS ------");
1654            #endif
1655          
1656            for(i=0; i<5; i++) {
1657            
1658              hcounter = GetHCounter1(field);
1659          
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 92  

1660              #ifdef DEBUG_TW88
1661              dPrintf("\r\n[%2d] HCVWRS=%4d", i, hcounter);
1662              #endif
1663              if( i==0 )
1664                ave = hcounter;
1665              else
1666                ave = ( ave + hcounter ) / 2;
1667            }
1668            #ifdef DEBUG_TW88
1669            dPrintf("\r\n----------- Average:%d -------------", ave);
1670            #endif
1671          
1672            return ave;
1673          }
1674          */
1675          
1676          
1677          #if 0 //SERIAL
              void TestHCVWRS(BYTE field, WORD initial)
              {
                WORD /*php,*/ hcounter, min=0, max=0;
                BYTE i;
              
              
                #ifdef DEBUG_TW88
                dPuts("\r\n------ Get HCVWRS ------");
                #endif
              
              //  php = GetPHP();
                
                SetHInitial(field, initial);
              
                for(i=0; i<30; i++) {
                
                  hcounter = GetHCounter1(field);
                  dPrintf("\r\n[%2d] HInitial:%d  HCVWRS=%4d  PHP=%4d", i, initial, hcounter, GetPHP());
                  dPrintf(" : %d%% of PHP ", hcounter*10/(GetPHP()/10));
                  if( i==0 )
                    min = hcounter;
                  if( min > hcounter )
                    min = hcounter;
                  if( max < hcounter )
                    max = hcounter;
                }
                dPrintf("\r\n------ Min:%d     Max:%d  ---(Field:%d)--", min, max, field);
              }
              #endif // SERIAL
1707          
1708          //#endif
1709          
1710          /***
1711          WORD GetHPN1(void)
1712          {
1713            WORD buf;
1714            BYTE val;
1715          
1716            //Get HPN 
1717            WriteDecoder(0x5b, 0x50); // HSYNC period and VSYNC period
1718          
1719            //HPN
1720          
1721            val = ReadDecoder(0x58);  // from MSB
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 93  

1722            buf = (WORD)val << 8;
1723            val = ReadDecoder(0x57);
1724            buf |= val;
1725          
1726            return buf;
1727          }
1728          ***/
1729          
1730          /****
1731          #if (defined SERIAL) || (defined WIDE_SCREEN)
1732          WORD CalcVBackPorch4DecoderInput( void )
1733          {
1734            WORD    back_porch, vsud;
1735            DWORD   realv;
1736          
1737            vsud = GetVSUD();
1738            back_porch = ( ReadDecoder(VDELAY_LO) - ReadDecoder( 0xbd ) + 2 ) * 0x100L ;  
1739                                // input vdelay - diff_in_out_vsync + 2 
1740            back_porch += (vsud-1);         // for getting rounded up result
1741            back_porch /=  vsud ;         // convert to value based on output
1742            back_porch -= ReadDecoder( 0xb8 );      // - Pandel Vertical Pulse Width
1743          
1744            realv =  ( GetVactive() * (DWORD)0x100 / vsud - GetPVR() ) / 2 ;
1745                                // because of overscan.
1746            Printf("\r\n(CalcVBack...) min back proch:0x%x  add:0x%lx", back_porch, realv);
1747            back_porch +=  realv;
1748          
1749            SetVBackPorch( (BYTE) back_porch );
1750            return back_porch;
1751          }
1752          #endif // SERIAL || WIDE_SCREEN
1753          ****/
1754          
1755          /******
1756          WORD GetVSUD(void)
1757          {
1758            WORD    vsud;
1759            BYTE        scale;
1760          
1761            scale = ReadDecoder( TW88_XYSCALEHI );
1762            vsud = (WORD)(scale & 0x0c) << 8;
1763            vsud |= ReadDecoder( TW88_YUSCALELO );
1764          
1765            #ifdef DEBUG_TW88
1766            dPrintf("\r\n(GetVSDU) :0x%x", vsud);
1767            #endif
1768            return vsud;
1769          }
1770          ******/
1771          
1772          /////////////////////////////////////////////////////////////////////////////
1773          // Mapping( int fromValue, CRegInfo fromRange,
1774          //                                           int * toValue, CRegInfo toRange )
1775          // Purpose: Map a value in certain range to a value in another range
1776          // Input:   int fromValue - value to be mapped from
1777          //          CRegInfo fromRange - range of value mapping from
1778          //          CRegInfo toRange   - range of value mapping to
1779          // Output:  int * toValue - mapped value
1780          // Return:  Fail if error in parameter, else Success
1781          // Comment: No range checking is performed here. Assume parameters are in
1782          //          valid ranges.
1783          //          The mapping function does not assume default is always the mid
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 94  

1784          //          point of the whole range. It only assumes default values of the
1785          //          two ranges correspond to each other.
1786          //          
1787          //          The mapping formula is:
1788          //
1789          //            For fromRange.Min() <= fromValue <= fromRange.Default():
1790          //
1791          //        (fromValue -fromRange.Min())* (toRange.Default() - toRange.Min())
1792          //        -------------------------------------------------------------------- + toRange.Min()
1793          //          fromRange.Default() - fromRange.Min()
1794          //
1795          //        For fromRange.Default() < fromValue <= fromRange.Max():
1796          //
1797          //        (fromValue - fromRange.Default()) * (toRange.Max() - toRange.Default())
1798          //        --------------------------------------------------------------------- + toRange.Default()
1799          //                 fromRange.Max() - fromRange.Default()
1800          ////
1801          ////////////////////////////////////////////////////////////////////////////
1802          BYTE Mapping1( int fromValue, CODE_P struct RegisterInfo *fromRange,
1803                                           int * toValue, CODE_P struct RegisterInfo *toRange ){
1804   1      
1805   1        // calculate intermediate values
1806   1        int a;
1807   1        int b;
1808   1      
1809   1        // perform mapping
1810   1        if ( fromValue <= fromRange->Default ) {
1811   2          a = toRange->Default - toRange->Min;
1812   2          b = fromRange->Default - fromRange->Min;
1813   2          // prevent divide by zero
1814   2          if( b==0 )    return (FALSE);
1815   2          *toValue = (int) ( (DWORD)fromValue- (DWORD)fromRange->Min ) * a / b 
1816   2                  +(DWORD)toRange->Min;
1817   2        }
1818   1        else {
1819   2          a = toRange->Max - toRange->Default;
1820   2          b = fromRange->Max - fromRange->Default;
1821   2          // prevent divide by zero
1822   2          if( b==0 )    return (FALSE);
1823   2              *toValue = (int) ( (DWORD)fromValue - (DWORD)fromRange->Default ) * a / b
1824   2                             + (DWORD)toRange->Default;
1825   2        }
1826   1      
1827   1        #ifdef DEBUG_OSD
                dPrintf("\r\n++(Mapping1)%d(%d-%d-%d)", (WORD)fromValue, (WORD)fromRange->Min, (WORD)fromRange->Default, 
             -(WORD)fromRange->Max );
                dPrintf("->%d(%d-%d)", (WORD)*toValue, (WORD)toRange->Min, (WORD)toRange->Max);
                #endif
1831   1        
1832   1        return ( TRUE );
1833   1         
1834   1      }
1835          
1836          #ifndef KEILC
              #ifdef SUPPORT_PC
              BYTE Mapping2( int fromValue, IDATA_P struct RegisterInfo *fromRange,
                                               int * toValue, CODE_P struct RegisterInfo *toRange ){
              
                // calculate intermediate values
                int a;
                int b;
              
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 95  

              
                // perform mapping
                if ( fromValue <= fromRange->Default ) {
                  a = toRange->Default - toRange->Min;
                  b = fromRange->Default - fromRange->Min;
                  // prevent divide by zero
                  if( b==0 )    return (FALSE);
                  *toValue = (int) ( (DWORD)fromValue- (DWORD)fromRange->Min ) * a / b 
                          +(DWORD)toRange->Min;
                }
                else {
                  a = toRange->Max - toRange->Default;
                  b = fromRange->Max - fromRange->Default;
                  // prevent divide by zero
                  if( b==0 )    return (FALSE);
                    *toValue = (int) ( (DWORD)fromValue - (DWORD)fromRange->Default ) * a / b
                                     + (DWORD)toRange->Default;
                }
              
                #ifdef DEBUG_OSD
                dPrintf("\r\n++(Mapping2)%d(%d-%d-%d)", (WORD)fromValue, (WORD)fromRange->Min, (WORD)fromRange->Default, 
                  (WORD)fromRange->Max );
                dPrintf("->%d(%d-%d)", (WORD)*toValue, (WORD)toRange->Min, (WORD)toRange->Max);
                #endif
                
                return ( TRUE );
                 
              }
              #endif
              
              BYTE Mapping3( int fromValue, CODE_P struct RegisterInfo *fromRange,
                                               int * toValue, IDATA_P struct RegisterInfo *toRange ){
              
                // calculate intermediate values
                int a;
                int b;
              
              
                // perform mapping
                if ( fromValue <= fromRange->Default ) {
                  a = toRange->Default - toRange->Min;
                  b = fromRange->Default - fromRange->Min;
                  // prevent divide by zero
                  if( b==0 )    return (FALSE);
                  *toValue = (int) ( (DWORD)fromValue- (DWORD)fromRange->Min ) * a / b 
                          +(DWORD)toRange->Min;
                }
                else {
                  a = toRange->Max - toRange->Default;
                  b = fromRange->Max - fromRange->Default;
                  // prevent divide by zero
                  if( b==0 )    return (FALSE);
                    *toValue = (int) ( (DWORD)fromValue - (DWORD)fromRange->Default ) * a / b
                                     + (DWORD)toRange->Default;
                }
              
                #ifdef DEBUG_OSD
                dPrintf("\r\n++(Mapping3)%d(%d-%d-%d)", (WORD)fromValue, (WORD)fromRange->Min, (WORD)fromRange->Default, 
                  (WORD)fromRange->Max );
                dPrintf("->%d(%d-%d)", (WORD)*toValue, (WORD)toRange->Min, (WORD)toRange->Max);
                #endif
                
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 96  

                return ( TRUE );
                 
              }
              #endif
1911          
1912          //---------------------------------------------------------------------------------
1913          extern  CODE BYTE NTSC_Regs[];
1914          #ifdef ADD_ANALOGPANEL
              extern CODE BYTE NTSC_Regs_Analog[];
              #endif
1917          
1918          /*
1919          BYTE GetDataFromTxtFile(BYTE index)
1920          {
1921            BYTE cnt;
1922            CODE_P BYTE *RegSet;
1923          
1924            #ifdef ADD_ANALOGPANEL
1925            if(IsAnalogOn())
1926              RegSet = NTSC_Regs_Analog;
1927            else
1928            #endif  
1929            RegSet = NTSC_Regs;
1930          
1931            cnt = 0;
1932            CheckBuf = 0;
1933            while ( *RegSet != 0xFF ) {
1934          
1935              if( cnt==0 ) {
1936                //first 2 bytes are I2C address and count of register
1937                if( (*RegSet) ==TW88I2CAddress ) {
1938                  cnt = *(RegSet+1);
1939                  RegSet+=2;
1940                  for(; cnt>0; cnt--) {
1941                    if((*RegSet)==index ) {
1942          
1943                      #ifdef DEBUG_TW88
1944                      dPrintf("--%02x", (WORD)*(RegSet+1));
1945                      #endif
1946          
1947                      CheckBuf = (*(RegSet+1));
1948                      return 1;
1949                    }
1950                    RegSet+=2;
1951                  }
1952                  break;
1953                }
1954                else
1955                  RegSet += ( (*(RegSet+1)+1)*2 );  // HHY 2.04
1956              }
1957            }
1958          
1959            return 0;
1960          }
1961          */
1962          /*
1963          BYTE GetAttributesFromNTSCSettings(BYTE index)
1964          {
1965          
1966            #ifdef DEBUG_TW88
1967            dPuts("\r\n++(GetAttributesFromNTSCSettings)");
1968            #endif
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 97  

1969          
1970            #ifdef DEBUG_TW88
1971            dPrintf("\r\nindex:%02x", (WORD)index);
1972            #endif
1973          
1974            if(GetDataFromTxtFile(index)) return CheckBuf;
1975          
1976            //in case of failing to find that register value in default setting
1977          
1978            switch( index ) {
1979            case 0x70:  return 0x20;
1980            case 0x71:
1981            case 0x72:
1982            case 0x73:
1983            case 0x74:  
1984            case 0x75:
1985            case 0x76:    return 0x80;
1986            case 0x77:    return 0;
1987          
1988            case BRIGHT:  return 0x00;
1989            case CONTRAST:  return 0x60;
1990            case SHARPNESS: return 0x10;
1991            case PNLSHARPNESS: return 0x03;
1992            case SAT_U:   return 0x7f;
1993            case SAT_V:   return 0x5a;
1994            case HUE:   return 0x00;
1995          
1996            case SHUE:    return 0x0;
1997            case SCONTRAST: return 0x60;
1998            case SBRIGHT: return 0x0;
1999            case SCbGAIN: return 0x40;
2000            case SCrGAIN: return 0x40;
2001            default:  return 0xff;
2002            }
2003          }
2004          
2005          */
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 98  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com0027 (BEGIN)
0000         L?0040:
0000 900000      R     MOV     DPTR,#a
0003 F0                MOVX    @DPTR,A
0004 A3                INC     DPTR
0005 EF                MOV     A,R7
0006 F0                MOVX    @DPTR,A
0007         L?0041:
0007 900000      R     MOV     DPTR,#fromRange
000A         L?0042:
000A 120000      E     LCALL   ?C?PLDXDATA
000D         L?0043:
000D 900004            MOV     DPTR,#04H
0010 020000      E     LJMP    ?C?ILDOPTR
0013         L?0044:
0013 900000      R     MOV     DPTR,#fromValue
0016 E0                MOVX    A,@DPTR
0017 FE                MOV     R6,A
0018 A3                INC     DPTR
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B C3                CLR     C
001C EF                MOV     A,R7
001D 9B                SUBB    A,R3
001E FF                MOV     R7,A
001F EE                MOV     A,R6
0020 9A                SUBB    A,R2
0021 FE                MOV     R6,A
0022 900000      R     MOV     DPTR,#a
0025 E0                MOVX    A,@DPTR
0026 FC                MOV     R4,A
0027 A3                INC     DPTR
0028 E0                MOVX    A,@DPTR
0029 FD                MOV     R5,A
002A 120000      E     LCALL   ?C?IMUL
002D A3                INC     DPTR
002E E0                MOVX    A,@DPTR
002F FC                MOV     R4,A
0030 A3                INC     DPTR
0031 E0                MOVX    A,@DPTR
0032 FD                MOV     R5,A
0033 020000      E     LJMP    ?C?SIDIV
0036         L?0045:
0036         L?0046:
0036 EF                MOV     A,R7
0037 4406              ORL     A,#06H
0039 FB                MOV     R3,A
003A 7D2F              MOV     R5,#02FH
003C 7F8A              MOV     R7,#08AH
003E 22                RET     
003F         L?0047:
003F FF                MOV     R7,A
0040 AEF0              MOV     R6,B
0042 900002            MOV     DPTR,#02H
0045 120000      E     LCALL   ?C?ILDOPTR
0048 C3                CLR     C
0049 9F                SUBB    A,R7
004A FF                MOV     R7,A
004B E5F0              MOV     A,B
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 99  

004D 9E                SUBB    A,R6
004E 22                RET     
004F         L?0049:
004F         L?0050:
004F 7B03              MOV     R3,#03H
0051 7D06              MOV     R5,#06H
0053 7F8A              MOV     R7,#08AH
0055 22                RET     
0056         L?0053:
0056 FE                MOV     R6,A
0057 900000      R     MOV     DPTR,#b
005A F0                MOVX    @DPTR,A
005B A3                INC     DPTR
005C EF                MOV     A,R7
005D F0                MOVX    @DPTR,A
005E 4E                ORL     A,R6
005F 22                RET     
             ; FUNCTION Com0027 (END)

             ; FUNCTION SetAutoDetectStd (BEGIN)
                                           ; SOURCE LINE # 33
                                           ; SOURCE LINE # 34
                                           ; SOURCE LINE # 40
0000 120000      E     LCALL   GetPossibleAutoDetectStdEE
0003 EF                MOV     A,R7
0004 4480              ORL     A,#080H
;---- Variable 'val' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 41
0006 FB                MOV     R3,A
0007 7D1D              MOV     R5,#01DH
0009 7F8A              MOV     R7,#08AH
000B 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 42
000E 7D1C              MOV     R5,#01CH
0010 7F8A              MOV     R7,#08AH
0012 120000      E     LCALL   _ReadI2C
                                           ; SOURCE LINE # 43
0015 EF                MOV     A,R7
0016 4407              ORL     A,#07H
0018 FB                MOV     R3,A
0019 7D1C              MOV     R5,#01CH
001B 7F8A              MOV     R7,#08AH
001D 020000      E     LJMP    _WriteI2C
             ; FUNCTION SetAutoDetectStd (END)

             ; FUNCTION _ClearAutoDetectStd (BEGIN)
                                           ; SOURCE LINE # 46
0000 900000      R     MOV     DPTR,#std
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 47
                                           ; SOURCE LINE # 54
0005 7D1C              MOV     R5,#01CH
0007 7F8A              MOV     R7,#08AH
0009 120000      E     LCALL   _ReadI2C
;---- Variable 'val' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 55
000C EF                MOV     A,R7
000D 54F8              ANL     A,#0F8H
000F FF                MOV     R7,A
0010 900000      R     MOV     DPTR,#std
0013 E0                MOVX    A,@DPTR
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 100 

0014 4F                ORL     A,R7
                                           ; SOURCE LINE # 56
0015 FB                MOV     R3,A
0016 7D1C              MOV     R5,#01CH
0018 7F8A              MOV     R7,#08AH
001A 020000      E     LJMP    _WriteI2C
             ; FUNCTION _ClearAutoDetectStd (END)

             ; FUNCTION DetectDecoderInput (BEGIN)
                                           ; SOURCE LINE # 90
                                           ; SOURCE LINE # 91
                                           ; SOURCE LINE # 96
0000 7D01              MOV     R5,#01H
0002 120000      R     LCALL   L?0052
                                           ; SOURCE LINE # 97
0005 54C0              ANL     A,#0C0H
0007 6440              XRL     A,#040H
0009 6007              JZ      ?C0003
                                           ; SOURCE LINE # 98
000B E4                CLR     A
000C 900000      R     MOV     DPTR,#std
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 99
0010 FF                MOV     R7,A
0011 22                RET     
                                           ; SOURCE LINE # 100
0012         ?C0003:
                                           ; SOURCE LINE # 102
0012 E4                CLR     A
0013 900000      R     MOV     DPTR,#std
0016 F0                MOVX    @DPTR,A
0017         ?C0005:
0017 900000      R     MOV     DPTR,#std
001A E0                MOVX    A,@DPTR
001B C3                CLR     C
001C 940A              SUBB    A,#0AH
001E 7480              MOV     A,#080H
0020 9480              SUBB    A,#080H
0022 502D              JNC     ?C0006
                                           ; SOURCE LINE # 103
0024 7D1C              MOV     R5,#01CH
0026 120000      R     LCALL   L?0052
                                           ; SOURCE LINE # 107
0029 30E707            JNB     ACC.7,?C0008
                                           ; SOURCE LINE # 108
002C 7F0A              MOV     R7,#0AH
002E 120000      E     LCALL   _delay
                                           ; SOURCE LINE # 109
0031 8016              SJMP    ?C0007
0033         ?C0008:
                                           ; SOURCE LINE # 110
                                           ; SOURCE LINE # 111
0033 900000      R     MOV     DPTR,#val
0036 E0                MOVX    A,@DPTR
0037 C4                SWAP    A
0038 540F              ANL     A,#0FH
003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 112
003B 6407              XRL     A,#07H
003D 7003              JNZ     ?C0010
003F 7FFE              MOV     R7,#0FEH
0041 22                RET     
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 101 

0042         ?C0010:
                                           ; SOURCE LINE # 113
0042 900000      R     MOV     DPTR,#val
0045 E0                MOVX    A,@DPTR
0046 04                INC     A
0047 FF                MOV     R7,A
0048 22                RET     
                                           ; SOURCE LINE # 114
                                           ; SOURCE LINE # 115
0049         ?C0007:
0049 900000      R     MOV     DPTR,#std
004C E0                MOVX    A,@DPTR
004D 04                INC     A
004E F0                MOVX    @DPTR,A
004F 80C6              SJMP    ?C0005
0051         ?C0006:
                                           ; SOURCE LINE # 128
0051 7FFE              MOV     R7,#0FEH
                                           ; SOURCE LINE # 129
0053         ?C0004:
0053 22                RET     
0054         L?0052:
0054 7F8A              MOV     R7,#08AH
0056 120000      E     LCALL   _ReadI2C
0059 900000      R     MOV     DPTR,#val
005C EF                MOV     A,R7
005D F0                MOVX    @DPTR,A
005E 22                RET     
             ; FUNCTION DetectDecoderInput (END)

             ; FUNCTION COMPOSITE1Input (BEGIN)
                                           ; SOURCE LINE # 136
                                           ; SOURCE LINE # 137
                                           ; SOURCE LINE # 138
0000 7BC0              MOV     R3,#0C0H
0002 7D02              MOV     R5,#02H
0004 7F8A              MOV     R7,#08AH
0006 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 139
0009 120000      R     LCALL   L?0049
000C 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 140
000F 7D2F              MOV     R5,#02FH
0011 7F8A              MOV     R7,#08AH
0013 120000      E     LCALL   _ReadI2C
0016 120000      R     LCALL   L?0045
0019 020000      E     LJMP    _WriteI2C
             ; FUNCTION COMPOSITE1Input (END)

             ; FUNCTION COMPOSITE2Input (BEGIN)
                                           ; SOURCE LINE # 154
                                           ; SOURCE LINE # 155
                                           ; SOURCE LINE # 156
0000 7BC6              MOV     R3,#0C6H
0002 7D02              MOV     R5,#02H
0004 7F8A              MOV     R7,#08AH
0006 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 157
0009 120000      R     LCALL   L?0049
000C 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 158
000F 7D2F              MOV     R5,#02FH
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 102 

0011 7F8A              MOV     R7,#08AH
0013 120000      E     LCALL   _ReadI2C
0016 120000      R     LCALL   L?0045
0019 020000      E     LJMP    _WriteI2C
             ; FUNCTION COMPOSITE2Input (END)

             ; FUNCTION COMPOSITE3Input (BEGIN)
                                           ; SOURCE LINE # 161
                                           ; SOURCE LINE # 162
                                           ; SOURCE LINE # 163
0000 7BCA              MOV     R3,#0CAH
0002 7D02              MOV     R5,#02H
0004 7F8A              MOV     R7,#08AH
0006 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 164
0009 120000      R     LCALL   L?0050
000C 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 165
000F 7D2F              MOV     R5,#02FH
0011 7F8A              MOV     R7,#08AH
0013 120000      E     LCALL   _ReadI2C
0016 120000      R     LCALL   L?0046
0019 020000      E     LJMP    _WriteI2C
             ; FUNCTION COMPOSITE3Input (END)

             ; FUNCTION COMPOSITE4Input (BEGIN)
                                           ; SOURCE LINE # 168
                                           ; SOURCE LINE # 169
                                           ; SOURCE LINE # 170
0000 7BCE              MOV     R3,#0CEH
0002 7D02              MOV     R5,#02H
0004 7F8A              MOV     R7,#08AH
0006 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 171
0009 120000      R     LCALL   L?0050
000C 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 172
000F 7D2F              MOV     R5,#02FH
0011 7F8A              MOV     R7,#08AH
0013 120000      E     LCALL   _ReadI2C
0016 120000      R     LCALL   L?0046
0019 020000      E     LJMP    _WriteI2C
             ; FUNCTION COMPOSITE4Input (END)

             ; FUNCTION ON_LVDS (BEGIN)
                                           ; SOURCE LINE # 349
                                           ; SOURCE LINE # 350
                                           ; SOURCE LINE # 360
0000 22                RET     
             ; FUNCTION ON_LVDS (END)

             ; FUNCTION OFF_LVDS (BEGIN)
                                           ; SOURCE LINE # 362
                                           ; SOURCE LINE # 363
                                           ; SOURCE LINE # 374
0000 22                RET     
             ; FUNCTION OFF_LVDS (END)

             ; FUNCTION _LCDPowerON (BEGIN)
                                           ; SOURCE LINE # 376
0000 900000      R     MOV     DPTR,#mute
0003 EF                MOV     A,R7
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 103 

0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 377
                                           ; SOURCE LINE # 379
0005 900000      E     MOV     DPTR,#PowerFlag
0008 E0                MOVX    A,@DPTR
0009 700F              JNZ     ?C0018
000B 120000      E     LCALL   CheckTrigger
000E EF                MOV     A,R7
000F 7009              JNZ     ?C0018
0011 900000      E     MOV     DPTR,#SelectBoxMode
0014 E0                MOVX    A,@DPTR
0015 7003              JNZ     $ + 5H
0017 020000      R     LJMP    ?C0019
001A         ?C0018:
                                           ; SOURCE LINE # 382
001A 7F01              MOV     R7,#01H
001C 120000      E     LCALL   _PowerLED
                                           ; SOURCE LINE # 393
001F 900000      R     MOV     DPTR,#mute
0022 E0                MOVX    A,@DPTR
0023 6403              XRL     A,#03H
0025 7049              JNZ     ?C0020
                                           ; SOURCE LINE # 394
                                           ; SOURCE LINE # 400
0027 120000      R     LCALL   OFF_LVDS
                                           ; SOURCE LINE # 405
002A D2B5              SETB    P3_5
                                           ; SOURCE LINE # 409
002C 7B09              MOV     R3,#09H
002E 120000      R     LCALL   L?0051
                                           ; SOURCE LINE # 410
0031 7F04              MOV     R7,#04H
0033 120000      E     LCALL   _delay
                                           ; SOURCE LINE # 412
0036 7B0B              MOV     R3,#0BH
0038 120000      R     LCALL   L?0051
                                           ; SOURCE LINE # 417
003B 7F0A              MOV     R7,#0AH
003D 120000      E     LCALL   _delay
                                           ; SOURCE LINE # 418
0040 120000      R     LCALL   ON_LVDS
                                           ; SOURCE LINE # 421
0043 7B0F              MOV     R3,#0FH
0045 7DD5              MOV     R5,#0D5H
0047 7F8A              MOV     R7,#08AH
0049 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 449
004C 7F05              MOV     R7,#05H
004E 120000      E     LCALL   _delay
                                           ; SOURCE LINE # 453
0051 900000      R     MOV     DPTR,#CAM_QUAD_TO
0054 7403              MOV     A,#03H
0056 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 456
0057 7BFF              MOV     R3,#0FFH
0059 7A00        R     MOV     R2,#HIGH ?SC_0
005B 7900        R     MOV     R1,#LOW ?SC_0
005D 120000      E     LCALL   _Puts
                                           ; SOURCE LINE # 457
0060 7F64              MOV     R7,#064H
0062 7E00              MOV     R6,#00H
0064 120000      E     LCALL   _Wait_ms
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 104 

                                           ; SOURCE LINE # 458
0067 7BFF              MOV     R3,#0FFH
0069 7A00        R     MOV     R2,#HIGH ?SC_19
006B 7900        R     MOV     R1,#LOW ?SC_19
006D 020000      E     LJMP    _Puts
                                           ; SOURCE LINE # 460
0070         ?C0020:
                                           ; SOURCE LINE # 461
0070 900000      R     MOV     DPTR,#mute
0073 E0                MOVX    A,@DPTR
0074 FF                MOV     R7,A
0075 6401              XRL     A,#01H
0077 6003              JZ      ?C0023
0079 EF                MOV     A,R7
007A 7051              JNZ     ?C0019
007C         ?C0023:
                                           ; SOURCE LINE # 462
                                           ; SOURCE LINE # 465
007C 900000      E     MOV     DPTR,#SEQFlag
007F E0                MOVX    A,@DPTR
0080 7006              JNZ     ?C0025
0082 900000      E     MOV     DPTR,#PowerFlag
0085 E0                MOVX    A,@DPTR
0086 700E              JNZ     ?C0024
0088         ?C0025:
                                           ; SOURCE LINE # 466
                                           ; SOURCE LINE # 467
0088 D2B5              SETB    P3_5
                                           ; SOURCE LINE # 468
008A 7FF4              MOV     R7,#0F4H
008C 7E01              MOV     R6,#01H
008E 120000      E     LCALL   _Wait_ms
                                           ; SOURCE LINE # 469
                                           ; SOURCE LINE # 470
                                           ; SOURCE LINE # 471
0091 120000      R     LCALL   L?0048
                                           ; SOURCE LINE # 472
0094 8021              SJMP    ?C0026
0096         ?C0024:
                                           ; SOURCE LINE # 474
                                           ; SOURCE LINE # 475
0096 7F01              MOV     R7,#01H
0098 120000      E     LCALL   _GetKey
009B EF                MOV     A,R7
009C 600E              JZ      ?C0027
                                           ; SOURCE LINE # 476
                                           ; SOURCE LINE # 477
009E D2B5              SETB    P3_5
                                           ; SOURCE LINE # 479
                                           ; SOURCE LINE # 480
                                           ; SOURCE LINE # 481
00A0 120000      R     LCALL   L?0048
                                           ; SOURCE LINE # 482
00A3 7F32              MOV     R7,#032H
00A5 7E00              MOV     R6,#00H
00A7 120000      E     LCALL   _Wait_ms
                                           ; SOURCE LINE # 483
00AA 800B              SJMP    ?C0026
00AC         ?C0027:
                                           ; SOURCE LINE # 485
                                           ; SOURCE LINE # 486
00AC D2B5              SETB    P3_5
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 105 

                                           ; SOURCE LINE # 488
00AE 43E808            ORL     P4,#08H
                                           ; SOURCE LINE # 491
00B1 900000      R     MOV     DPTR,#Backlight_TO
00B4 7414              MOV     A,#014H
00B6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 492
                                           ; SOURCE LINE # 493
00B7         ?C0026:
                                           ; SOURCE LINE # 496
00B7 7BFF              MOV     R3,#0FFH
00B9 7A00        R     MOV     R2,#HIGH ?SC_38
00BB 7900        R     MOV     R1,#LOW ?SC_38
00BD 900000      R     MOV     DPTR,#mute
00C0 E0                MOVX    A,@DPTR
00C1 FF                MOV     R7,A
00C2 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
00C5 E4                CLR     A
00C6 F0                MOVX    @DPTR,A
00C7 A3                INC     DPTR
00C8 EF                MOV     A,R7
00C9 F0                MOVX    @DPTR,A
00CA 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 505
                                           ; SOURCE LINE # 507
00CD         ?C0019:
00CD 22                RET     
00CE         L?0048:
00CE 43E808            ORL     P4,#08H
00D1 7F14              MOV     R7,#014H
00D3 7E00              MOV     R6,#00H
00D5 120000      E     LCALL   _Wait_ms
00D8 53E8FB            ANL     P4,#0FBH
00DB 22                RET     
00DC         L?0051:
00DC 7DD5              MOV     R5,#0D5H
00DE 7F8A              MOV     R7,#08AH
00E0 120000      E     LCALL   _WriteI2C
00E3 22                RET     
             ; FUNCTION _LCDPowerON (END)

             ; FUNCTION LCDPower (BEGIN)
                                           ; SOURCE LINE # 562
                                           ; SOURCE LINE # 563
                                           ; SOURCE LINE # 568
0000 900000      R     MOV     DPTR,#state
0003 E0                MOVX    A,@DPTR
0004 6403              XRL     A,#03H
0006 7011              JNZ     ?C0029
                                           ; SOURCE LINE # 569
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 570
0009 120000      E     LCALL   LCDPowerOFF
                                           ; SOURCE LINE # 571
000C D200        E     SETB    ?PowerDown_XTAL?BIT
000E 120000      E     LCALL   PowerDown_XTAL
                                           ; SOURCE LINE # 573
0011 7BFF              MOV     R3,#0FFH
0013 7A00        R     MOV     R2,#HIGH ?SC_63
0015 7900        R     MOV     R1,#LOW ?SC_63
                                           ; SOURCE LINE # 574
0017 801B              SJMP    ?C0037
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 106 

0019         ?C0029:
                                           ; SOURCE LINE # 576
                                           ; SOURCE LINE # 578
0019 C200        E     CLR     ?PowerDown_XTAL?BIT
001B 120000      E     LCALL   PowerDown_XTAL
                                           ; SOURCE LINE # 579
001E 7F0A              MOV     R7,#0AH
0020 120000      E     LCALL   _delay
                                           ; SOURCE LINE # 586
0023 900000      R     MOV     DPTR,#state
0026 7403              MOV     A,#03H
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 587
0029 E4                CLR     A
002A FF                MOV     R7,A
002B 120000      R     LCALL   _LCDPowerON
                                           ; SOURCE LINE # 589
002E 7BFF              MOV     R3,#0FFH
0030 7A00        R     MOV     R2,#HIGH ?SC_76
0032 7900        R     MOV     R1,#LOW ?SC_76
0034         ?C0037:
0034 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 590
                                           ; SOURCE LINE # 591
0037         ?C0031:
0037 22                RET     
             ; FUNCTION LCDPower (END)

             ; FUNCTION _Mapping1 (BEGIN)
                                           ; SOURCE LINE # 1802
0000 900000      R     MOV     DPTR,#fromValue
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 1803
                                           ; SOURCE LINE # 1810
000C 120000      R     LCALL   L?0043
000F FD                MOV     R5,A
0010 D3                SETB    C
0011 EF                MOV     A,R7
0012 9D                SUBB    A,R5
0013 E5F0              MOV     A,B
0015 6480              XRL     A,#080H
0017 F8                MOV     R0,A
0018 EE                MOV     A,R6
0019 6480              XRL     A,#080H
001B 98                SUBB    A,R0
001C 5040              JNC     ?C0032
                                           ; SOURCE LINE # 1811
001E 900000      R     MOV     DPTR,#toRange
0021 120000      R     LCALL   L?0042
0024 FF                MOV     R7,A
0025 AEF0              MOV     R6,B
0027 120000      E     LCALL   ?C?ILDPTR
002A FD                MOV     R5,A
002B C3                CLR     C
002C EF                MOV     A,R7
002D 9D                SUBB    A,R5
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 107 

002E FF                MOV     R7,A
002F EE                MOV     A,R6
0030 95F0              SUBB    A,B
                                           ; SOURCE LINE # 1812
0032 120000      R     LCALL   L?0040
0035 FD                MOV     R5,A
0036 ACF0              MOV     R4,B
0038 120000      E     LCALL   ?C?ILDPTR
003B FB                MOV     R3,A
003C AAF0              MOV     R2,B
003E C3                CLR     C
003F ED                MOV     A,R5
0040 9B                SUBB    A,R3
0041 FF                MOV     R7,A
0042 EC                MOV     A,R4
0043 9A                SUBB    A,R2
                                           ; SOURCE LINE # 1814
0044 120000      R     LCALL   L?0053
0047 7002              JNZ     ?C0033
0049 FF                MOV     R7,A
004A 22                RET     
004B         ?C0033:
                                           ; SOURCE LINE # 1816
004B 120000      R     LCALL   L?0044
004E C006              PUSH    AR6
0050 C007              PUSH    AR7
0052 900000      R     MOV     DPTR,#toRange
0055 120000      E     LCALL   ?C?PLDXDATA
0058 120000      E     LCALL   ?C?ILDPTR
                                           ; SOURCE LINE # 1817
005B 020000      R     LJMP    ?C0038
005E         ?C0032:
                                           ; SOURCE LINE # 1818
                                           ; SOURCE LINE # 1819
005E 900000      R     MOV     DPTR,#toRange
0061 120000      R     LCALL   L?0042
0064 120000      R     LCALL   L?0047
                                           ; SOURCE LINE # 1820
0067 120000      R     LCALL   L?0040
006A 120000      R     LCALL   L?0047
                                           ; SOURCE LINE # 1822
006D 120000      R     LCALL   L?0053
0070 7002              JNZ     ?C0036
0072 FF                MOV     R7,A
0073 22                RET     
0074         ?C0036:
                                           ; SOURCE LINE # 1824
0074 120000      R     LCALL   L?0041
0077 FF                MOV     R7,A
0078 AEF0              MOV     R6,B
007A AB07              MOV     R3,AR7
007C AA06              MOV     R2,AR6
007E 120000      R     LCALL   L?0044
0081 C006              PUSH    AR6
0083 C007              PUSH    AR7
0085 900000      R     MOV     DPTR,#toRange
0088 120000      R     LCALL   L?0042
008B         ?C0038:
008B FF                MOV     R7,A
008C AEF0              MOV     R6,B
008E D0E0              POP     ACC
0090 2F                ADD     A,R7
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 108 

0091 FF                MOV     R7,A
0092 D0E0              POP     ACC
0094 3E                ADDC    A,R6
0095 FE                MOV     R6,A
0096 900000      R     MOV     DPTR,#toValue
0099 120000      E     LCALL   ?C?PLDXDATA
009C EE                MOV     A,R6
009D 8FF0              MOV     B,R7
009F 120000      E     LCALL   ?C?ISTPTR
                                           ; SOURCE LINE # 1825
00A2         ?C0035:
                                           ; SOURCE LINE # 1832
00A2 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 1834
00A4         ?C0034:
00A4 22                RET     
             ; FUNCTION _Mapping1 (END)

C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 109 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


COMPOSITE3Input. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
COMPOSITE4Input. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_Mapping1. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  fromValue. . . . . . . . . . . . . .  AUTO     XDATA  INT      0000H  2
  fromRange. . . . . . . . . . . . . .  AUTO     XDATA  PTR      0002H  3
  toValue. . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0005H  3
  toRange. . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0008H  3
  a. . . . . . . . . . . . . . . . . .  AUTO     XDATA  INT      000BH  2
  b. . . . . . . . . . . . . . . . . .  AUTO     XDATA  INT      000DH  2
DWORD. . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
_LCDPowerON. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  mute . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
CAM_R. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
P4 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E8H  1
TriggerModeType. . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
CAM_BAR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ABR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_CAR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ACR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_CBR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_BCR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
PowerFlag. . . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
NumberStringType . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  11
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  width. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  BackColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  Radix. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  NumColor . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  MaxLen . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  PrePostCharLen . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  PrePostChar. . . . . . . . . . . . .  MEMBER   -----  ARRAY    0008H  3
_ClearAutoDetectStd. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  std. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  val. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_delay . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Backlight_TO . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0001H  1
FontData . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  27
  font . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  27
SelectBoxMode. . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
RIGHT_TRIG . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
P3_5 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B5H  1
LAST_TRIG_NON. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
GetPossibleAutoDetectStdEE . . . . . .  EXTERN   CODE   PROC     -----  -----
NORMALL_MODE . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
AVMode . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
SourceModeType . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
CAM_NUM. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
DetectDecoderInput . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  std. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  val. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
CAMC_TRIG. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_Puts. . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
LAST_TRIG_RIGHT. . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_RAB_H. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
OSDStrInfo . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  8
  cnt. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 110 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  addr . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  attr . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  str. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0004H  4
CAM_BA . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_AB . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
BYTE . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
TimeType . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  7
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  width. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  BackColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  Format . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  TimeColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  CursorColor. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
CAM_CA . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_AC . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
REVERSE_TRIG . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_BC . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_CB . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
ON_LVDS. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
CheckTrigger . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
SourceModeTypeEnum . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
struct_IdName. . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  17
  Id . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  Name . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0001H  16
EnumType . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  17
  Sz . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  ByLang . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  Str. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0002H  15
MenuType . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  4
  width. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  height . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  TitleColor . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  CursorColor. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
CAM_RAB_T. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_ReadI2C . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CAM_RAC_T. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
WORD . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
CAM_RBC_T. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
LCDPowerOFF. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
LAST_TRIG_CAMC . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
LEFT_TRIG. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_AR . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
PowerDown_XTAL . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CAM_BR . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_RB . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
PARK_TRIG. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_CR . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Register . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
_GetKey. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_WriteI2C. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
LAST_TRIG_REVERSE. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
SetAutoDetectStd . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  val. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
No_TRIG. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
NumType. . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  5
  PrePostCharLen . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 111 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  PrePostChar. . . . . . . . . . . . .  MEMBER   -----  ARRAY    0001H  4
_Wait_ms . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
RegisterInfo . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  Min. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0000H  2
  Max. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0002H  2
  Default. . . . . . . . . . . . . . .  MEMBER   -----  INT      0004H  2
LAST_TRIG_LEFT . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_PCMDATA . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  22
  Support. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  HAN. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  VAN. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0003H  2
  IVF. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0005H  2
  CLOCK. . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0007H  2
  low. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0009H  2
  high . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000BH  2
  Hstart . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000DH  2
  Vstart . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000FH  2
  IPF. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0011H  2
  PPF. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0013H  2
  VBack. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0015H  1
CAM_QUAD . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_QUAD_TO. . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0002H  1
LCDPower . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  state. . . . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0000H  1
SEQFlag. . . . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
DefineMenu . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  16
  Icon . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0000H  2
  Desc . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0002H  3
  PreFnId. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  PostFnId . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  IconColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  DescColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
  Child. . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0009H  2
  Type . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000BH  1
  ActiveWithCursor . . . . . . . . . .  MEMBER   -----  U_CHAR   000CH  1
  Id . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000DH  1
  TypeData . . . . . . . . . . . . . .  MEMBER   -----  PTR      000EH  2
_PowerLED. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
m_cStandard. . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0003H  1
TRIGGER_NUM. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
SEQ. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
LongRegisterInfo . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  Min. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  Max. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  Default. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
PictureInfo. . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  4
  Register_Addr. . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  EEPROM_Addr. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  Control_Range. . . . . . . . . . . .  MEMBER   -----  PTR      0002H  2
CAM_RAC_T2 . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ABR_T3 . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_RBC_T2 . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ABR_T4 . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_A. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_B. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_C. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_Printf. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
C51 COMPILER V9.60.0.0   TW88                                                              06/22/2022 16:23:03 PAGE 112 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


VGA_TRIG . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
OFF_LVDS . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
CAM_CAB. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_BAC. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ABC. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
AWT_LAST_TRIGGER . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
COMPOSITE1Input. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
COMPOSITE2Input. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    815    ----
   CONSTANT SIZE    =     88    ----
   XDATA SIZE       =      4      19
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
