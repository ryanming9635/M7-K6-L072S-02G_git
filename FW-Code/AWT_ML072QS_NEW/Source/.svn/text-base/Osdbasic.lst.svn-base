C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 1   


C51 COMPILER V8.16, COMPILATION OF MODULE OSDBASIC
OBJECT MODULE PLACED IN .\Output\Osdbasic.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Osdbasic.c COMPACT OPTIMIZE(9,SIZE) BROWSE INCDIR(.\Include\) DEBUG OBJECTE
                    -XTEND CODE LISTINCLUDE SYMBOLS PRINT(.\Source\Osdbasic.lst) OBJECT(.\Output\Osdbasic.obj)

line level    source

   1          //osd_basic.c
   2          // ver0.11 2/1x/2001 Change display format from hex to decimal
   3          //      1.32    LJY11262001     .Add border features to OSD window
   4          //      1.70    LJY05302003 .Support a menu with external OSD.
   5          //      2.00    BYH05102007 .Support internal MCU, which connect with direct memoty bus
   6          //                                               It needs change whole ReadTW88, WriteTW88 to regTW88
   7          
   8          #include "Config.h"
   1      =1  /*****************************************************************************/
   2      =1  /*                           System Configurations                           */
   3      =1  /*                                                      rev 0.10 include auto test                                               */
   4      =1  // 0.11 change DTV, PC input initial download data correct for Charge Pump
   5      =1  // 0.12 correct phase measurement routine '>>3'
   6      =1  // 0.13 enable function for SPI control... only EXT MCU case
   7      =1  // 0.14 corrected PC measurement......
   8      =1  // 0.0a test function only for CVBS, SVIDEO
   9      =1  // 0.15 corrected DTV scaler setting for panel resolutions
  10      =1  // 0.0b panel for AND 640x480 TICON panel
  11      =1  // 0.16 corrected COMPONENT scaler setting for panel resolutions        11/21/2007
  12      =1  // 0.0c automatic chip test
  13      =1  // 0.17 add monitor function, osd grid for writing grid
  14      =1  // 0.18 add component, dtv pc for analogpanel, 12/06/2007
  15      =1  // 0.19 correct pal input for CES, 12/20/2007
  16      =1  // 0.1a CCFL control, 12/28/2007
  17      =1  // 0.19 Multi Grid for Banking on Internal MCU  01/17/2008
  18      =1  // 0.20 CCFL contol for backlight brightness    01/21/2008
  19      =1  // 0.21 CCFL contol for backlight brightness    01/25/2008
  20      =1  // 0.22 phase setting 02/07/2008
  21      =1  // 0.221 display input correction 04/03/2008
  22      =1  // 0.23 PC, DTV mode, no signal display
  23      =1  // 0.24 PC Auto Color adjustment
  24      =1  // 0.25 revised PC Auto Clock adjustment - find divide number and phase
  25      =1  // 0.26 Digital RGB for TW8826
  26      =1  // 0.27 Correct LVDS control                                    08/22/2008
  27      =1  // 0.28 Add WSVGA resolution                                    10/23/2008
  28      =1  // 0.29 Add NEW GRID                                                    11/14/2008
  29      =1  // 0.30 Fix DTV input                                                   12/10/2008
  30      =1  // 0.31 Add 1080i23, 24, 25A, 25B                               01/20/2009
  31      =1  // 0.32 TCON setting FIX all mode                               01/22/2009
  32      =1  // 0.33 autodetect is auto on/off by dip sw1    02/02/2009
  33      =1  // 0.34 Fix autocolor function and clamp position 02/08/2009
  34      =1  /*****************************************************************************/
  35      =1  #ifndef __CONFIG_H__
  36      =1  #define __CONFIG_H__
  37      =1  
  38      =1  //#define INTERNAL_MCU -- defined by Project Compiler session
  39      =1  
  40      =1  
  41      =1  //-----------------------------------------------------------------------------
  42      =1  //              Firmware Version
  43      =1  //-----------------------------------------------------------------------------
  44      =1  #define FWVER                   0x140                   // Rev 0.14
  45      =1  //-----------------------------------------------------------------------------
  46      =1  //              Compiler
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 2   

  47      =1  //-----------------------------------------------------------------------------
  48      =1  #define KEILC                                           // Keil C 5.0
  49      =1  //-----------------------------------------------------------------------------
  50      =1  //              MPU Clock
  51      =1  //-----------------------------------------------------------------------------
  52      =1  #ifndef INTERNAL_MCU
  53      =1  //#define CLOCK_11M                                     // 11.0592MHz
  54      =1  #define CLOCK_22M                                       // 22.1184MHz
  55      =1  #else                                                           // INTERNAL_MCU
           =1 #define CLOCK_27M                                       // 27MHz
           =1 #define REG_START_ADDRESS       0xc000          // register start 0xc000, for page0, 0xc100-page1 
           =1 #endif
  59      =1  //-----------------------------------------------------------------------------
  60      =1  //              TW88 Version
  61      =1  //-----------------------------------------------------------------------------
  62      =1  #define TW8816
  63      =1  //-----------------------------------------------------------------------------
  64      =1  //              Options for Backlight control
  65      =1  //-----------------------------------------------------------------------------
  66      =1  //#define       BACKLIGHT_CCFL
  67      =1  //#define       BACKLIGHT_LED
  68      =1  #define BACKLIGHT_PWM
  69      =1  
  70      =1  //-----------------------------------------------------------------------------
  71      =1  //              Panel Resolution
  72      =1  //-----------------------------------------------------------------------------
  73      =1  // ---- Select Default Panel
  74      =1  //
  75      =1  //#define UXGA                                          // 1600 x 1200
  76      =1  //#define SXGA                                          // 1280 x 1024
  77      =1  //#define XGA  // 1024 x 768
  78      =1  #ifdef XGA
           =1         #define LVDS                                    
           =1         #define PWIDTH  1024
           =1         #define PHEIGHT 768
           =1 #endif
  83      =1  //#define SVGA                                          //  800 x 600
  84      =1  //#define VGA                                           //  640 x 480
  85      =1  #ifdef VGA
           =1         #define PWIDTH  640
           =1         #define PHEIGHT 480
           =1         //#define       HITACHI_640_B_160               //--> 640 x 160
           =1         #define AND_640_480
           =1 #endif
  91      =1  //#define WXGA                                          // 1280 x 768 (15:9) // 1366 x 768 (16:9)
  92      =1  #ifdef WXGA
           =1     //#define WX_SHARP_LQ106K1LA
           =1         #define PWIDTH  1280
           =1         #define PHEIGHT 768
           =1 #endif
  97      =1  //#define WSVGA                                         // 1024 x 600   *** only video mode
  98      =1  #ifdef WSVGA
           =1         #define PWIDTH  1024
           =1         #define PHEIGHT 600
           =1         #define UNIDEN_1024_600
           =1 #endif
 103      =1  #define WVGA                                            //  800 x 480
 104      =1  #ifdef WVGA
 105      =1          #define PWIDTH  800
 106      =1          #define PHEIGHT 600//480
 107      =1          // If WVGA, you have to select panel.
 108      =1          //#define AU_10INCH
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 3   

 109      =1          //#define WVGA_TPO
 110      =1          //#define SAMSUNG_10INCH
 111      =1          //#define SAMSUNG_TICONLESS_10INCH
 112      =1          //#define SHARP_TICONLESS_7INCH
 113      =1          #define AU_TICONLESS_7INCH
 114      =1          //#define INNOLUX_AT080TN03
 115      =1          //#define AU_TICONLESS_7INCH_CCFL
 116      =1          //#define CMO                   // CHIMEI panel
 117      =1          //#define AU_TICONLESS_10INCH
 118      =1          //#define HITACHI_T01
 119      =1          //#define HITACHI_TX23D12
 120      =1          //#define HITACHI_TX18D24
 121      =1          //#define HITACHI_TX18D16
 122      =1          //#define TMD_LTA070A320F
 123      =1          //#define TMD_LTA080B
 124      =1  #endif  //WVGA
 125      =1  //#define HVGA                                          //  480 x 320
 126      =1  //#define QVGA                                          //  320 x 240   *** only video mode
 127      =1  #ifdef QVGA
           =1         #define PWIDTH  320
           =1         #define PHEIGHT 240
           =1         //#define HITACHI_TX09D73
           =1         //#define AU_DELTARGB
           =1         //#define SHARP_LQ050Q5DR01
           =1         //#define SHARP_LQ035
           =1         //#define       TMD
           =1 #endif
 136      =1  
 137      =1  //#define WQVGA                                         //  480 x 234   *** only video mode
 138      =1  #ifdef WQVGA
           =1         #define PWIDTH  480
           =1         #define PHEIGHT 240
           =1         // If WQVGA, you have to select panel   
           =1     #define ANALOG_7INCH
           =1         //#define       PWIDTH  400
           =1         //#define PHEIGHT       240
           =1         //#define SHARP_LQ043T3DX02             //  400 x 237
           =1         //#define LG_ANALOG
           =1         //#define TMD_ANALOG                            //TMD_LTA05B352A
           =1         //#define       T_51945GD                               // Optorex Panel
           =1 #endif  // WQVGA
 150      =1  
 151      =1  //if LVDS pannel disable TICONLESS
 152      =1  
 153      =1  //-----------------------------------------------------------------------------
 154      =1  //---- Add Support One more panel with DIPSW#1
 155      =1  //---- Ex. Add Analog AU 7" Panel with Default Panel for evalution
 156      =1  //#define ADD_ANALOGPANEL               // Added Analog panel(AU7") from default set panel(expect WQVGA) with DIP #1 sw
             -itch.(DIP#1=L:ANALOG, H:DEFAULT)
 157      =1                                                          // It can't support WQVGA and ADD_ANALOGPANEL same time!!
 158      =1          //#define ADD_ANALOG_7INCH
 159      =1          //#define ADD_TMD_LTA05B352A
 160      =1                                                                          
 161      =1  //---- Support Wide panel function
 162      =1  #if (defined WXGA) || (defined WSVGA) || (defined WVGA) || (defined WQVGA)
 163      =1  #define WIDE_SCREEN                             // Can support 4 display mode, i.e. Normal, Wide, Full, Zoom
 164      =1  #endif                                                          // Tested panasonic WVGA panel.
 165      =1  
 166      =1  //-----------------------------------------------------------------------------
 167      =1  //              Panel Vendor Specific
 168      =1  //-----------------------------------------------------------------------------
 169      =1  
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 4   

 170      =1  //-----------------------------------------------------------------------------
 171      =1  //              TV Tuner
 172      =1  //-----------------------------------------------------------------------------
 173      =1  #define PHILIPS                         0
 174      =1  #define ALPS                            1               // ALPS, LG
 175      =1  #define TEMIC                           2
 176      =1  #define TVAVA                           3
 177      =1  #define LGTUNER                         4
 178      =1  #define SAMSUNGMUTITUNER        5
 179      =1  
 180      =1  #define TVTunerDevice           4
 181      =1  //-----------------------------------------------------------------------------
 182      =1  //              IR Remote Controller Type
 183      =1  //-----------------------------------------------------------------------------
 184      =1  //#define REMO_RC5                                      // RC5 style
 185      =1  #define TECHWELL_REMOCON
 186      =1  //#define REMO_NEC                                      // NEC style
 187      =1  //#define PHILIPS_REMOCON // New remocon 
 188      =1  
 189      =1  
 190      =1  //-----------------------------------------------------------------------------
 191      =1  //              I2C Device Access Address Mapping
 192      =1  //-----------------------------------------------------------------------------
 193      =1  
 194      =1  #define EEPROMI2CAddress        0xa0    // EEPROM (24C16)
 195      =1  #define TW88I2CAddress          0x8a    // TW880x
 196      =1  
 197      =1  #define MSPI2CAddress           0x80    // MSP
 198      =1  
 199      =1  //-----------------------------------------------------------------------------
 200      =1  //              Options for Possible Inputs
 201      =1  //-----------------------------------------------------------------------------
 202      =1  #define         AWT
 203      =1  //#define       E_Wintek 
 204      =1  //#define SUPPORT_SVIDEO                     //andy Awt 20090914
 205      =1  //#define SUPPORT_COMPONENT                     // support component analog to decoder//andy Awt 20090914
 206      =1  
 207      =1  //#define SUPPORT_DTV                           // support DTV input through component( to ADC ).//andy Awt 20090914
 208      =1  #define SUPPORT_PC                              // support PC function
 209      =1  //#define SUPPORT_DVI                           // support DVI input
 210      =1  #define SUPPORT_SDCARD
 211      =1  
 212      =1  //#define SUPPORT_RS485
 213      =1  
 214      =1  //-----------------------------------------------------------------------------
 215      =1  //              Options for Possible Standards
 216      =1  //              Default:NTSC
 217      =1  //-----------------------------------------------------------------------------
 218      =1  #define SUPPORT_PAL                     
 219      =1  #define SUPPORT_SECAM
 220      =1  #define SUPPORT_NTSC4           
 221      =1  #define SUPPORT_PALM    
 222      =1  #define SUPPORT_PALN            
 223      =1  #define SUPPORT_PAL60           
 224      =1  
 225      =1  
 226      =1  //#define ID_CHECK_BY_FW                        // in Video mode, check input system ID by firmware
 227      =1  
 228      =1  //-----------------------------------------------------------------------------
 229      =1  //              Options for Debugging/Release
 230      =1  //-----------------------------------------------------------------------------
 231      =1  //#define SUPPORT_PATTERN                       // support LCD test pattern
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 5   

 232      =1  
 233      =1  
 234      =1  #ifndef WQVGA
 235      =1          #ifndef QVGA
 236      =1  #define SUPPORT_OSDPOSITIONMOVE
 237      =1          #endif
 238      =1  #endif
 239      =1  
 240      =1  #define SERIAL                                  // include serial communication routines
 241      =1  
 242      =1  //#define SUPPORT_DEBUG                         // Support to use Read & Write in debug OSD Window by remocon.
 243      =1  
 244      =1  //#define DEBUG                                         // include debug information
 245      =1  #ifdef DEBUG
           =1         //#define DEBUG_MAIN
           =1         //#define DEBUG_TIME
           =1         //#define DEBUG_KEYREMO
           =1         //#define DEBUG_TW88
           =1         //#define DEBUG_DECODER
           =1         //#define DEBUG_I2C
           =1         //#define DEBUG_EEP
           =1         //#define DEBUG_OSD
           =1         //#define DEBUG_AUDIO
           =1         //#define DEBUG_SETPANEL
           =1         //#define DEBUG_DTV
           =1         #define DEBUG_PC
           =1         //#define DEBUG_PC_MEAS
           =1         #define DEBUG_PC_COLOR
           =1         //#define DEBUG_COMPONENT
           =1         //#define DEBUG_BANK
           =1         //#define DEBUG_PAUSE
           =1         //#define DEBUG_MCU
           =1 #endif
 265      =1  
 266      =1  #define AUTOCALC_PC                                     // in PC mode, Enable Auto Calcuration
 267      =1  //#define SUPPORT_USERCOLORFROMTXT      // Use color setting of text file in Color mode=USER MODE which is as B
             -rightness(Reg10), Contast(Reg11),
 268      =1                                                                          //    Sat_U(Reg13),Sat_V(Reg14),Sharpness(Reg12,Reg78)                                                                  
 269      =1  //#define SUPPORT_GAMMA
 270      =1  
 271      =1  //#define CHIP_MANUAL_TEST                      // DIPSW#1
 272      =1  
 273      =1  #ifndef INTERNAL_MCU
 274      =1  //#define NO_INITIALIZE                         // After Power switch turn on with DIP SW4 Enable(Low), or pressed MENU button 
             -for internal MCU
 275      =1                                      //     micom works to access only I2C bus by serial command.
 276      =1  #endif
 277      =1  
 278      =1  //#define SUPPORT_KRS_OSDDEMO           // For KRS Company Demo 
 279      =1  //#define SUPPORT_LINE_OSDDEMO
 280      =1  
 281      =1  //-----------------------------------------------------------------------------
 282      =1  //              Special Features
 283      =1  //-----------------------------------------------------------------------------
 284      =1  
 285      =1  #ifndef INTERNAL_MCU
 286      =1  //#define       SUPPORT_DELTA_RGB
 287      =1  #endif
 288      =1  #define SUPPORT_SELECTKEY                       // choose the keymap of using select key or left,right key.
 289      =1  //-----------------------------------------------------------------------------
 290      =1  #endif  //__CONFIG_H__
   9          
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 6   

  10          #include "typedefs.h"
   1      =1  #ifndef __TYPEDEFS__
   2      =1  #define __TYPEDEFS__
   3      =1  
   4      =1  
   5      =1  #define DATA            data
   6      =1  #define PDATA           pdata
   7      =1  #define IDATA           data
   8      =1  #define CODE            code
   9      =1  #define CODE_P
  10      =1  #define PDATA_P
  11      =1  #define IDATA_P
  12      =1  #define DATA_P
  13      =1  
  14      =1  #define INTERRUPT( num, name ) name() interrupt num
  15      =1  
  16      =1  #define _between(x, a, b)       (a<=x && x<=b)
  17      =1  #define _swap(a, b)                     { a^=b; b^=a; a^=b; }
  18      =1  
  19      =1  typedef unsigned char   Register;
  20      =1  typedef unsigned char   BYTE;
  21      =1  typedef unsigned short  WORD;
  22      =1  typedef unsigned long   DWORD;
  23      =1  
  24      =1  #define TRUE    1
  25      =1  #define FALSE   0
  26      =1  
  27      =1  //VInputStdDetectMode
  28      =1  #define AUTO    0
  29      =1  
  30      =1  //VInputStd
  31      =1  #define NTSC    1                       
  32      =1  #define PAL             2
  33      =1  #define SECAM   3
  34      =1  #define NTSC4   4
  35      =1  #define PALM    5
  36      =1  #define PALN    6
  37      =1  #define PAL60   7
  38      =1  
  39      =1  #define MAXINPUTSTD     PAL60+1 // 
  40      =1  
  41      =1  #define UNKNOWN 0xfe
  42      =1  #define NOINPUT 0       //0xff
  43      =1  
  44      =1  
  45      =1  
  46      =1  
  47      =1  #define NIL                     0xff
  48      =1  
  49      =1  enum SourceModeTypeEnum
  50      =1  {       
  51      =1          AVMode,            // 0
  52      =1          VGAMode,       // 1
  53      =1          CAM_D,         // 2
  54      =1          CAM_A,         // 3
  55      =1          CAM_B,         // 4
  56      =1          CAM_C,         // 5
  57      =1          CAM_R,         // 6
  58      =1          CAM_AB,        // 7
  59      =1          CAM_CR,        // 8
  60      =1          CAM_AR,        // 9
  61      =1          CAM_RB,        // 10
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 7   

  62      =1          CAM_AC,        // 11
  63      =1          CAM_CB,        // 12
  64      =1          CAM_RAB_T,     // 13
  65      =1          CAM_RAB_H,     // 14
  66      =1  
  67      =1          CAM_QUAD,      // 15
  68      =1          CAM_ABR_T3,    // 16
  69      =1          CAM_ABR_T4,    // 17
  70      =1          SEQ,           // 18
  71      =1          CAM_BA,                 //19
  72      =1          
  73      =1          CAM_BC,
  74      =1          CAM_BR,
  75      =1          CAM_CA,
  76      =1          CAM_ABC,
  77      =1          CAM_ABR,
  78      =1          CAM_ACR,
  79      =1          CAM_BAC,
  80      =1          CAM_BAR,
  81      =1          CAM_BCR,
  82      =1          CAM_CAB,
  83      =1          CAM_CAR,
  84      =1          CAM_CBR,        
  85      =1          CAM_NUM
  86      =1  };
  87      =1  
  88      =1  typedef unsigned char SourceModeType;
  89      =1  
  90      =1  #endif  /* __TYPEDEFS__ */
  11          #include "i2c.h"
   1      =1  #ifndef __I2C_H__
   2      =1  #define __I2C_H__
   3      =1  
   4      =1  
   5      =1  void I2CReadByte3(BYTE *);
   6      =1  void I2CRead8Byte(BYTE *);
   7      =1  #if 0
           =1 void I2CReadByteMSP(BYTE addr, BYTE index, BYTE *pd, BYTE cnt);
           =1 #endif
  10      =1  BYTE I2CWriteByte2(BYTE);
  11      =1  BYTE I2CWriteByte3(BYTE*);
  12      =1  BYTE I2CWrite8Byte(BYTE *);
  13      =1  
  14      =1  void I2CStart(void);
  15      =1  void I2CWriteData(BYTE value);
  16      =1  BYTE I2CReadData(void);
  17      =1  #if 0
           =1 BYTE I2CReadDataWithACK(void);
           =1 #endif
  20      =1  void I2CStop(void);
  21      =1  void I2Cdelay(void);
  22      =1  
  23      =1  
  24      =1  #define WriteTW88(a,b)          WriteI2C(TW88I2CAddress, a, b)
  25      =1  #define ReadTW88(a)                     ReadI2C(TW88I2CAddress, a)
  26      =1  
  27      =1  BYTE WriteTW88_Wait     (BYTE, BYTE);
  28      =1  void WriteADC           (BYTE, BYTE);
  29      =1  BYTE ReadADC            (BYTE);
  30      =1  BYTE ReadADC_TW88(BYTE index);
  31      =1  void WriteADC_TW88(BYTE index, BYTE dat);
  32      =1  
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 8   

  33      =1  void WriteEEP           (WORD, BYTE);
  34      =1  BYTE ReadEEP            (WORD);
  35      =1  
  36      =1  
  37      =1  BYTE ReadI2C            (BYTE addr, BYTE index);
  38      =1  void WriteI2C           (BYTE addr, BYTE index, BYTE val);
  39      =1  
  40      =1  void WriteI2Cn_(BYTE addr, BYTE *val, BYTE cnt);
  41      =1  void WriteI2Cn (BYTE addr, BYTE index, BYTE *val, BYTE cnt);
  42      =1  void WriteI2CnD(BYTE addr, BYTE index, BYTE val, BYTE cnt);
  43      =1  
  44      =1  void ReadI2Cmn(BYTE addr, BYTE wcnt, BYTE rcnt, BYTE *rwdata);
  45      =1  
  46      =1  #define         WriteADC(a,b)   WriteADC_TW88(a,b)
  47      =1  #define         ReadADC(a)              ReadADC_TW88(a)
  48      =1  
  49      =1  #endif  /* __I2C_H__ */
  12          #include "main.h"
   1      =1  #ifndef __MAIN__
   2      =1  #define __MAIN__
   3      =1  
   4      =1  #define ON                                      1
   5      =1  #define OFF                                     0
   6      =1  //#define Hs_debug
   7      =1  //#define       DVR
   8      =1  
   9      =1  //================= DIP SW Definition =========================================
  10      =1  ///#define PIXEL_SINGLE         P0_0
  11      =1  #define DIP_PANEL_SWITCH        P0_0    // Samsung(0) // Sharp-Noticon(1)
  12      =1  #define DIP_AUTO_DETECT         P0_1
  13      =1  #define DIP_EDGE_ENHANCE        P0_2
  14      =1  #define DIP_BW_STRETCH          P0_3
  15      =1  
  16      =1  #define Panel_Enable()          P4=P4|0x08 //andy 980908
  17      =1  #define Panel_Disable()                 P4=P4&0xf7
  18      =1  
  19      =1  #define SetBacklight()      P4=P4|0x04
  20      =1  #define clrBacklight()      P4=P4&0xfb
  21      =1  
  22      =1  
  23      =1  //InputSelection
  24      =1  struct struct_IdName {
  25      =1          BYTE    Id;
  26      =1          BYTE    Name[16];
  27      =1  };
  28      =1  
  29      =1  #define CH_TW2835              1
  30      =1  #define CH_CAMD                2
  31      =1  #define CH_AV                  3
  32      =1  #define PC                                         7
  33      =1  #define ChineseDefaultMenu   8
  34      =1  
  35      =1  #define SVIDEO                          2
  36      =1  #define COMPONENT                       3
  37      =1  //#define ANALOGDTV                     4
  38      =1  #define DTV                                     4
  39      =1  #define TV                                      5
  40      =1  #define SCART                           6
  41      =1  
  42      =1  #define DIGITALVGA                      8
  43      =1  
  44      =1  #define AIRTV                           0 //9
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 9   

  45      =1  #define CABLETV                         1 //0xa
  46      =1  
  47      =1  
  48      =1  #define TVTUNER                         0xd             //10
  49      =1  #define MUTE                            1       
  50      =1  #define MENU                            2       
  51      =1  #define TVVOL                           4       
  52      =1  #define CC                                      8       
  53      =1  #define INPUTINFO                       0x10
  54      =1  #define PCINFO                          0x20
  55      =1  #define GAUGEINFO           0x40
  56      =1  //#define RATINGINFO                    0x40
  57      =1  #define TVCHN                           0x80
  58      =1  //#define MUTE                          0x40
  59      =1  
  60      =1  #define YPBPR_480i                      0
  61      =1  #define YPBPR_576i                      1
  62      =1  #define YPBPR_480p                      2
  63      =1  #define YPBPR_576p                      3
  64      =1  #define YPBPR_1080i                     4
  65      =1  #define YPBPR_720p                      5
  66      =1  #define YPBPR_720p50            6
  67      =1  
  68      =1  
  69      =1  //--------------------------- P0 Define -----------------------------
  70      =1  #define SEL_MIX                 P0_6    // 
  71      =1  //--------------------------- P1 Define -----------------------------
  72      =1  #define SEL_DVI                 P3_5    //LJY062001             
  73      =1  
  74      =1  #define TW88HWReset                     P3_4    //LJY001010 //LJY000721
  75      =1  #define PowerUp             P1_4
  76      =1  //======================= CDS Control ================================= 
  77      =1  #define CDS_CTRL           P1_5
  78      =1  extern BYTE     SelectModeType;
  79      =1  extern BYTE InputSelection;
  80      =1  extern BYTE SEQTime;
  81      =1  extern BYTE     Priority;
  82      =1  extern BYTE AutoDayNight;
  83      =1  extern BYTE PowerFlag;
  84      =1  
  85      =1  BYTE keyIn(void);
  86      =1  void TimerForRemocon(void);
  87      =1  void TimerForTick(void);
  88      =1  void DisableRemoconInt(void);
  89      =1  BYTE SetSupport_remocon(BYTE newd);
  90      =1  
  91      =1  void delay(BYTE cnt);
  92      =1  
  93      =1  BYTE RS_ready(void);
  94      =1  BYTE RS_rx(void);
  95      =1  void RS_tx(BYTE tx_buf);
  96      =1  
  97      =1  BYTE RS2_rx(void);
  98      =1  void RS2_tx(BYTE tx_buf);
  99      =1  
 100      =1  void NewLine(void);
 101      =1  void PutsP(PDATA_P BYTE *ptr);
 102      =1  #ifdef Hs_debug
           =1 void MonWriteI2C(BYTE addr, BYTE index, BYTE val);
           =1 BYTE MonReadI2C(BYTE addr, BYTE index);
           =1 #endif
 106      =1  BYTE Asc1Bin(BYTE asc);
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 10  

 107      =1  BYTE Asc2Bin(PDATA_P BYTE *s);
 108      =1  
 109      =1  void I2CDeviceInitialize( CODE_P BYTE *RegSet);
 110      =1  
 111      =1  //void RestartSystemClock(WORD clock_hm);
 112      =1  WORD GetTime_ms(void);
 113      =1  BYTE GetTime_H(void);
 114      =1  BYTE GetTime_M(void);
 115      =1  void ChangeTime_H( char add );
 116      =1  void ChangeTime_M( char add );
 117      =1  //WORD GetWakeupTime(void);
 118      =1  //void SetWakeupTime(WORD wtime);
 119      =1  
 120      =1  
 121      =1  //WORD GetOffTime(void);
 122      =1  //void SetOffTime(WORD wtime);
 123      =1  //BYTE GetSleepTimer(void);
 124      =1  //void SetSleepTimer(BYTE stime);
 125      =1  WORD DiffTime_ms( WORD stime, WORD etime );
 126      =1  //void SetLastBlockedTime(void);
 127      =1  void SetLastCCTime(void);                               //ljy010904...CC_FIX_CLEAR_ON_TIME
 128      =1  
 129      =1  void SetOSDLastKeyInTime(void);
 130      =1  WORD GetOSDLastKeyInTime(void);
 131      =1  WORD GetIVF(void);
 132      =1  DWORD GetIHF(void);
 133      =1  BYTE ReadVInputSTD(void);
 134      =1  void SetVInputStd(BYTE newd);
 135      =1  BYTE GetVInputStd(void);
 136      =1  BYTE GetInputSelection(void);
 137      =1  #ifdef ADD_ANALOGPANEL
           =1 BYTE IsAnalogOn(void);
           =1 #endif
 140      =1  void InitVideoData(BYTE src);
 141      =1  void ChangeVInputStdDetectMode(BYTE val);
 142      =1  BYTE GetVInputStdInx(void);
 143      =1  
 144      =1  void MonWriteI2Cn_(BYTE addr, BYTE *val, BYTE cnt) ;
 145      =1  
 146      =1  ///void Usage(void);
 147      =1  #ifdef Hs_debug
           =1         void Prompt(void);
           =1 #endif
 150      =1  void DebugKeyIn(BYTE ikey);
 151      =1  void DVIPowerDown(bit flag);
 152      =1  void PowerDown_XTAL(bit flag);
 153      =1  
 154      =1  void ChangeInput(BYTE newsel);
 155      =1  
 156      =1  
 157      =1  void WaitPowerOn(void);
 158      =1  void PowerOff(void);
 159      =1  BYTE GetNextInputSelection(void);
 160      =1  
 161      =1  BYTE WantToStopTVScan(void);
 162      =1  
 163      =1  //BYTE IsTW8801(void);
 164      =1  //BYTE IsTW8803(void);
 165      =1  //BYTE ConvertVideoVSAT(BYTE reg);
 166      =1  
 167      =1  BYTE IsNoInput(void);
 168      =1  void LoadEEPROM (void);
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 11  

 169      =1  void Hs_InitVars(void);
 170      =1  void AdjustAutoDayNight(BYTE val);
 171      =1  void ACCPowerControl(void);
 172      =1  struct RegisterInfo
 173      =1  {
 174      =1     int  Min;
 175      =1     int  Max;
 176      =1     int  Default;
 177      =1  };
 178      =1  struct LongRegisterInfo
 179      =1  {
 180      =1     WORD Min;
 181      =1     WORD Max;
 182      =1     WORD Default;
 183      =1  };
 184      =1  
 185      =1  #endif  // __MAIN__
  13          #include "tw88.h"
   1      =1  #ifndef __TW88__
   2      =1  #define __TW88__
   3      =1  
   4      =1  #include "main.h"
   1      =2  #ifndef __MAIN__
           =2 #define __MAIN__
           =2 
           =2 #define ON                                      1
           =2 #define OFF                                     0
           =2 //#define Hs_debug
           =2 //#define       DVR
           =2 
           =2 //================= DIP SW Definition =========================================
           =2 ///#define PIXEL_SINGLE         P0_0
           =2 #define DIP_PANEL_SWITCH        P0_0    // Samsung(0) // Sharp-Noticon(1)
           =2 #define DIP_AUTO_DETECT         P0_1
           =2 #define DIP_EDGE_ENHANCE        P0_2
           =2 #define DIP_BW_STRETCH          P0_3
           =2 
           =2 #define Panel_Enable()          P4=P4|0x08 //andy 980908
           =2 #define Panel_Disable()                 P4=P4&0xf7
           =2 
           =2 #define SetBacklight()      P4=P4|0x04
           =2 #define clrBacklight()      P4=P4&0xfb
           =2 
           =2 
           =2 //InputSelection
           =2 struct struct_IdName {
           =2         BYTE    Id;
           =2         BYTE    Name[16];
           =2 };
           =2 
           =2 #define CH_TW2835              1
           =2 #define CH_CAMD                2
           =2 #define CH_AV                  3
           =2 #define PC                                         7
           =2 #define ChineseDefaultMenu   8
           =2 
           =2 #define SVIDEO                          2
           =2 #define COMPONENT                       3
           =2 //#define ANALOGDTV                     4
           =2 #define DTV                                     4
           =2 #define TV                                      5
           =2 #define SCART                           6
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 12  

           =2 
           =2 #define DIGITALVGA                      8
           =2 
           =2 #define AIRTV                           0 //9
           =2 #define CABLETV                         1 //0xa
           =2 
           =2 
           =2 #define TVTUNER                         0xd             //10
           =2 #define MUTE                            1       
           =2 #define MENU                            2       
           =2 #define TVVOL                           4       
           =2 #define CC                                      8       
           =2 #define INPUTINFO                       0x10
           =2 #define PCINFO                          0x20
           =2 #define GAUGEINFO           0x40
           =2 //#define RATINGINFO                    0x40
           =2 #define TVCHN                           0x80
           =2 //#define MUTE                          0x40
           =2 
           =2 #define YPBPR_480i                      0
           =2 #define YPBPR_576i                      1
           =2 #define YPBPR_480p                      2
           =2 #define YPBPR_576p                      3
           =2 #define YPBPR_1080i                     4
           =2 #define YPBPR_720p                      5
           =2 #define YPBPR_720p50            6
           =2 
           =2 
           =2 //--------------------------- P0 Define -----------------------------
           =2 #define SEL_MIX                 P0_6    // 
           =2 //--------------------------- P1 Define -----------------------------
           =2 #define SEL_DVI                 P3_5    //LJY062001             
           =2 
           =2 #define TW88HWReset                     P3_4    //LJY001010 //LJY000721
           =2 #define PowerUp             P1_4
           =2 //======================= CDS Control ================================= 
           =2 #define CDS_CTRL           P1_5
           =2 extern BYTE     SelectModeType;
           =2 extern BYTE InputSelection;
           =2 extern BYTE SEQTime;
           =2 extern BYTE     Priority;
           =2 extern BYTE AutoDayNight;
           =2 extern BYTE PowerFlag;
           =2 
           =2 BYTE keyIn(void);
           =2 void TimerForRemocon(void);
           =2 void TimerForTick(void);
           =2 void DisableRemoconInt(void);
           =2 BYTE SetSupport_remocon(BYTE newd);
           =2 
           =2 void delay(BYTE cnt);
           =2 
           =2 BYTE RS_ready(void);
           =2 BYTE RS_rx(void);
           =2 void RS_tx(BYTE tx_buf);
           =2 
           =2 BYTE RS2_rx(void);
           =2 void RS2_tx(BYTE tx_buf);
           =2 
           =2 void NewLine(void);
           =2 void PutsP(PDATA_P BYTE *ptr);
           =2 #ifdef Hs_debug
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 13  

           =2 void MonWriteI2C(BYTE addr, BYTE index, BYTE val);
           =2 BYTE MonReadI2C(BYTE addr, BYTE index);
           =2 #endif
           =2 BYTE Asc1Bin(BYTE asc);
           =2 BYTE Asc2Bin(PDATA_P BYTE *s);
           =2 
           =2 void I2CDeviceInitialize( CODE_P BYTE *RegSet);
           =2 
           =2 //void RestartSystemClock(WORD clock_hm);
           =2 WORD GetTime_ms(void);
           =2 BYTE GetTime_H(void);
           =2 BYTE GetTime_M(void);
           =2 void ChangeTime_H( char add );
           =2 void ChangeTime_M( char add );
           =2 //WORD GetWakeupTime(void);
           =2 //void SetWakeupTime(WORD wtime);
           =2 
           =2 
           =2 //WORD GetOffTime(void);
           =2 //void SetOffTime(WORD wtime);
           =2 //BYTE GetSleepTimer(void);
           =2 //void SetSleepTimer(BYTE stime);
           =2 WORD DiffTime_ms( WORD stime, WORD etime );
           =2 //void SetLastBlockedTime(void);
           =2 void SetLastCCTime(void);                               //ljy010904...CC_FIX_CLEAR_ON_TIME
           =2 
           =2 void SetOSDLastKeyInTime(void);
           =2 WORD GetOSDLastKeyInTime(void);
           =2 WORD GetIVF(void);
           =2 DWORD GetIHF(void);
           =2 BYTE ReadVInputSTD(void);
           =2 void SetVInputStd(BYTE newd);
           =2 BYTE GetVInputStd(void);
           =2 BYTE GetInputSelection(void);
           =2 #ifdef ADD_ANALOGPANEL
           =2 BYTE IsAnalogOn(void);
           =2 #endif
           =2 void InitVideoData(BYTE src);
           =2 void ChangeVInputStdDetectMode(BYTE val);
           =2 BYTE GetVInputStdInx(void);
           =2 
           =2 void MonWriteI2Cn_(BYTE addr, BYTE *val, BYTE cnt) ;
           =2 
           =2 ///void Usage(void);
           =2 #ifdef Hs_debug
           =2         void Prompt(void);
           =2 #endif
           =2 void DebugKeyIn(BYTE ikey);
           =2 void DVIPowerDown(bit flag);
           =2 void PowerDown_XTAL(bit flag);
           =2 
           =2 void ChangeInput(BYTE newsel);
           =2 
           =2 
           =2 void WaitPowerOn(void);
           =2 void PowerOff(void);
           =2 BYTE GetNextInputSelection(void);
           =2 
           =2 BYTE WantToStopTVScan(void);
           =2 
           =2 //BYTE IsTW8801(void);
           =2 //BYTE IsTW8803(void);
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 14  

           =2 //BYTE ConvertVideoVSAT(BYTE reg);
           =2 
           =2 BYTE IsNoInput(void);
           =2 void LoadEEPROM (void);
           =2 void Hs_InitVars(void);
           =2 void AdjustAutoDayNight(BYTE val);
           =2 void ACCPowerControl(void);
           =2 struct RegisterInfo
           =2 {
           =2    int  Min;
           =2    int  Max;
           =2    int  Default;
           =2 };
           =2 struct LongRegisterInfo
           =2 {
           =2    WORD Min;
           =2    WORD Max;
           =2    WORD Default;
           =2 };
           =2 
           =2 #endif  // __MAIN__
   5      =1  
   6      =1  //Value for register 0x44
   7      =1  //#define DECODER_YCbCr         0x08            //xxxx bbxx
   8      =1  //#define RGB_RGB                               0x0C
   9      =1  
  10      =1  #define TW88_FPLL0                      0xf9
  11      =1  #define TW88_FPLL1                      0xfa
  12      =1  #define TW88_FPLL2                      0xfb
  13      =1  #define TW88_FSS                        0xfc
  14      =1  #define TW88_FSS_PD                     0xfd
  15      =1  #define TW88_PLL_DIV            0xfe
  16      =1  
  17      =1  //#define TW88_XSCALE                   0x5d
  18      =1  //#define TW88_YSCALE                   0x5e
  19      =1  
  20      =1  #define TW88_XUSCALELO          0x60
  21      =1  #define TW88_XDSCALELO          0x61
  22      =1  #define TW88_YUSCALELO          0x62
  23      =1  #define TW88_XYSCALEHI          0x63
  24      =1  #define TW88_XUSCALEFINE        0x69
  25      =1  #define TW88_YUSCALEFINE        0x6a
  26      =1  
  27      =1  //Power Mgt
  28      =1  #define POWER_OFF                       0
  29      =1  #define POWER_STANDBY           1
  30      =1  #define POWER_SUSPEND           2
  31      =1  #define POWER_ON                        3
  32      =1  
  33      =1  //void TWChipsDetect(void);
  34      =1  void SetAutoDetectStd(void);
  35      =1  void ClearAutoDetectStd(BYTE);
  36      =1  void I2CDeviceInitialize( CODE_P BYTE *RegSet);
  37      =1  
  38      =1  
  39      =1  //0x63.. Register Group
  40      =1  #define GROUP_YCbCr                     0x40
  41      =1  #define GROUP_RGB                       0
  42      =1  #define SelectPanelAttrRegGroup(A)                              WriteTW88(0x70, (ReadTW88(0x70) & 0xbf) | A)
  43      =1  
  44      =1  //#if defined TW8801 || defined TW8803
  45      =1  #define FB_MAIN         2
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 15  

  46      =1  #define FB_NORMAL       1
  47      =1  #define FB_RGB          0
  48      =1  //void SetFBmode( BYTE mode );
  49      =1  //#endif // TW8801
  50      =1  
  51      =1  
  52      =1  //=============================================================================
  53      =1  //                                   LCD Functions   
  54      =1  //=============================================================================
  55      =1  BYTE GetLCDPowerState(void);
  56      =1  void SetLCDPowerState(BYTE dat);
  57      =1  
  58      =1  BYTE IsFreeRun(void);
  59      =1  void PanelFreeRun(BYTE on);
  60      =1  void PanelBlack(BYTE on);
  61      =1  
  62      =1  void PanelMute(BYTE on);
  63      =1  
  64      =1  void LCDPowerON(BYTE mute); 
  65      =1  void LCDPowerOFF(void);
  66      =1  #ifdef Hs_debug
           =1 void LCDPower(void);
           =1 #endif
  69      =1  void DPMSmodeOFF(void);
  70      =1  void DPMSmodeON(void);
  71      =1  //=============================================================================
  72      =1  //                              Get PC Parameter Functions   
  73      =1  //=============================================================================
  74      =1  void GetInitPanelAttribute1(void);
  75      =1  //void GetInitPanelAttribute2(void);
  76      =1  void DefaultPanelAttributeForVideo(void);
  77      =1  void SetPVR(WORD pvr);
  78      =1  void SetPHR(WORD phr);
  79      =1  WORD GetPVR(void);
  80      =1  WORD GetPHR(void);
  81      =1  WORD GetHPN(void);
  82      =1  WORD GetVPN(void);
  83      =1  
  84      =1  //WORD GetVactive(void);
  85      =1  
  86      =1  WORD GetHstart(void);
  87      =1  WORD GetHend(void);
  88      =1  WORD GetVstart(void);
  89      =1  WORD GetVend(void);
  90      =1  void TuneLineBuffer(BYTE field);
  91      =1  void TuneLineBuffer4Video(BYTE field);
  92      =1  
  93      =1  #if defined (SUPPORT_DTV)
           =1 void SetCoarstForDTV(BYTE en);
           =1 #endif
  96      =1  
  97      =1  WORD GetHactiveStart(void);
  98      =1  WORD GetHactiveEnd(void);
  99      =1  WORD GetVactiveStart(void);
 100      =1  //WORD GetVactiveLen(void);
 101      =1  BYTE GetVBackPorch(void);
 102      =1  void SetVBackPorch(BYTE val);
 103      =1  WORD GetPHP(void);
 104      =1  void SetPHP(WORD php);
 105      =1  void SetPVP(WORD period);
 106      =1  WORD GetPVP(void);
 107      =1  //void SetPanelRelatedRegisters(void);
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 16  

 108      =1  //BYTE ChangedHPN(void);
 109      =1  //WORD GetVSUD(void);
 110      =1  
 111      =1  void SetDefaultPLL(void);
 112      =1  //void SetDefaultFPHSperiod(void);
 113      =1  //BYTE CalcPHP(DWORD ppf, BYTE tol);
 114      =1  //void ChangeFPHSperiod4DecoderInput(WORD vsud, BYTE tol);
 115      =1  
 116      =1  //-------------------------------------------------------------------
 117      =1  //                  Set Active Region Functions
 118      =1  //-------------------------------------------------------------------
 119      =1  void SetHactiveStart(WORD hstart);
 120      =1  void SetHactiveEnd(WORD hend);
 121      =1  void SetVactiveStart(WORD vstart);
 122      =1  //void SetVactiveLen(WORD van, WORD vstart);
 123      =1  void SetVactiveLen(WORD van);
 124      =1  //=============================================================================
 125      =1  //                         Set Measurement Window Functions   
 126      =1  //=============================================================================
 127      =1  void SetMeasureWindowH(WORD start, WORD stop);
 128      =1  void SetMeasureWindowV(WORD start, WORD stop);
 129      =1  //=============================================================================
 130      =1  //                              Video Input Functions   
 131      =1  //=============================================================================
 132      =1  BYTE IsVideoInput(void);
 133      =1  BYTE DetectDecoderInput(void);
 134      =1  //=============================================================================
 135      =1  //
 136      =1  //=============================================================================
 137      =1  void AutoPHPCalEnable(void);
 138      =1  void AutoPHPCalDisable(void);
 139      =1  
 140      =1  void MakeStartInt(void);
 141      =1  void AVGAInput(void);
 142      =1  void DVIInput(void);
 143      =1  //void DVGAInput(void);
 144      =1  void DisableDVGA(void);
 145      =1  
 146      =1  void COMPOSITE1Input(void);
 147      =1  void COMPOSITE2Input(void);
 148      =1  void COMPOSITE3Input(void);
 149      =1  
 150      =1  void SVIDEOInput(void);
 151      =1  void COMPONENTInput(void);
 152      =1  void ANALOGDTVInput(void);
 153      =1  void DTVInput(void);
 154      =1  void TVInput(void);
 155      =1  void SCARTInput(void);
 156      =1  
 157      =1  //=============================================================================
 158      =1  //                          Measurement Functions
 159      =1  //=============================================================================
 160      =1  ///void SetPanelBitOrder(BYTE swap);
 161      =1  //void SetPanelSingleDouble(BYTE single);
 162      =1  
 163      =1  BYTE MeasureAndWait(BYTE flag);
 164      =1  
 165      =1  //WORD GetHCounter1(BYTE field);
 166      =1  //void SetHInitial(BYTE field, WORD counter);
 167      =1  //=============================================================================
 168      =1  //                          Invert Polarity Functions
 169      =1  //=============================================================================
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 17  

 170      =1  void InvertHSYNCPolarity(void);
 171      =1  void InvertVSYNCPolarity(void);
 172      =1  //=============================================================================
 173      =1  //            Interrupt / SW Reset Control Functions
 174      =1  //=============================================================================
 175      =1  void SetInt(void);
 176      =1  //void ClearInt(void);
 177      =1  void SetEnDet(void);
 178      =1  void ClearEnDet(void);
 179      =1  void SWReset(void);
 180      =1  //void ClearSYNCLossStatus(void);
 181      =1  //void ClearSYNCChangeStatus(void);
 182      =1  //=============================================================================
 183      =1  //
 184      =1  //=============================================================================
 185      =1  BYTE IsBypassmode(void);
 186      =1  //BYTE IsInteraced(void);
 187      =1  void Clear_bypass(void);
 188      =1  void MaskOnSYNCInt(void);
 189      =1  void MaskOffSYNCInt(void);
 190      =1  //=============================================================================
 191      =1  //                                    ZoomControl
 192      =1  //=============================================================================
 193      =1  void BypassZoom(void);
 194      =1  
 195      =1  void XscaleU(DWORD scale);
 196      =1  void XscaleD(DWORD scale);
 197      =1  void XScale2(DWORD scale);
 198      =1  void YScale2(DWORD scale);
 199      =1  WORD GetYScale(void);
 200      =1  //=============================================================================
 201      =1  //
 202      =1  //=============================================================================
 203      =1  WORD GetHSYNCPulse(void);
 204      =1  WORD GetVSYNCPulse(void);
 205      =1  //#if defined TW8801 || defined TW8803
 206      =1  WORD GetRelativePosition(void);
 207      =1  //#endif
 208      =1  //=============================================================================
 209      =1  //                                                              MISC2 for decoder
 210      =1  //=============================================================================
 211      =1  #define BLUE_DECODER            2
 212      =1  #define BLACK_DECODER           0
 213      =1  
 214      =1  BYTE ForceDecoderOutput(BYTE color);
 215      =1  BYTE ClearForcedDecoderOutput(void);
 216      =1  //=============================================================================
 217      =1  //                                                              CC and EDS
 218      =1  //=============================================================================
 219      =1  BYTE GetCCStatus(void);
 220      =1  void DisableCC(void);
 221      =1  void EnableCC(void);
 222      =1  BYTE GetCCData(void);
 223      =1  BYTE IsCCEnabled(void);
 224      =1  void EnableEDS(void);
 225      =1  void DisableEDS(void);
 226      =1  void RecoverCCOverflow(void);
 227      =1  
 228      =1  #define CCFIFOHalfFull()                        (ReadDecoder(CSTATUS) & 0x04)
 229      =1  //=============================================================================
 230      =1  //                                                              Internal PLL
 231      =1  //=============================================================================
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 18  

 232      =1  BYTE GetPOST(void);
 233      =1  void SetPLLS(BYTE plls);
 234      =1  BYTE GetREFDM(void);
 235      =1  void SetREFDM(BYTE refdm);
 236      =1  DWORD GetFBDN(void);
 237      =1  void SetFBDN(WORD fbdn, BYTE vcsel);
 238      =1  DWORD GetPPF(void);
 239      =1  void ChangeInternPLL(DWORD _PPF);
 240      =1  
 241      =1  //=============================================================================
 242      =1  //                                                              Macros for attribute
 243      =1  //=============================================================================
 244      =1  //#define       GetOSDTransReg()                                                ReadTW88(0xAE)
 245      =1  //#define SetOSDTransReg(AlphaV)                                        WriteTW88(0xAE, (BYTE)AlphaV )
 246      =1  
 247      =1  #define GetPanelContrastReg(gccolor)                    ReadTW88(0x71+gccolor)
 248      =1  #define SetPanelContrastReg(sccolor, cval)              WriteTW88(0x71+sccolor,cval)
 249      =1  
 250      =1  #define GetPanelBrightnessReg(gbcolor)                  ReadTW88(0x74+gbcolor);
 251      =1  #define SetPanelBrightnessReg(sbcolor, bval)    WriteTW88(0x74+sbcolor,bval);
 252      =1  
 253      =1  #define SetDTVBrightnessReg(bval)                               WriteTW88(0x74,bval);
 254      =1  
 255      =1  #define GetPanelSaturationReg(gbcolor)                  ReadTW88(0x72+gbcolor);
 256      =1  #define SetPanelSaturationReg(sbcolor, bval)    WriteTW88(0x72+sbcolor,bval);
 257      =1  
 258      =1  #define SetPanelSharpnessReg(bval)                              WriteTW88(0x78,((bval&0x07)|0x38) );
 259      =1  
 260      =1  #define SetPanelHueReg(bval)                                    WriteTW88(0x70, (ReadTW88(0x70) & 0xc0 | (bval)) );
 261      =1  
 262      =1  #define GetVideoContrastReg()                                   ReadDecoder(CONTRAST)
 263      =1  #define SetVideoContrastReg(vcval)                              WriteDecoder(CONTRAST, vcval)
 264      =1  
 265      =1  #define GetVideoBrightnessReg()                                 ReadDecoder(BRIGHT)
 266      =1  #define SetVideoBrightnessReg(vbval)                    WriteDecoder(BRIGHT, vbval )
 267      =1  
 268      =1  #define GetVideoSaturationReg(gvstype)                  ReadDecoder(SAT_U+gvstype)
 269      =1  #define SetVideoSaturationReg(svstype, vsval)   WriteDecoder(SAT_U+svstype,     vsval)
 270      =1  
 271      =1  #define GetVideoHueReg()                                                ReadDecoder(HUE)
 272      =1  #define SetVideoHueReg(vhval)                                   WriteDecoder(HUE,       vhval )
 273      =1  
 274      =1  #define GetVideoSharpnessRegDef                                 (ReadDecoder(SHARPNESS) & 0x0f) 
 275      =1  
 276      =1  #define GetVideoSharpnessReg()                                  GetVideoSharpnessRegDef
 277      =1  //#define       SetVideoSharpnessReg(vshval)                    WriteDecoder(SHARPNESS, vshval )
 278      =1  #define SetVideoSharpnessReg(vshval)                    WriteDecoder(SHARPNESS, ((ReadDecoder(SHARPNESS) & 0xf0) | (vshval 
             -& 0x0f) ) );
 279      =1  
 280      =1  #ifdef TW9908
           =1 #define SetVideoVPeakingReg(vshval)
           =1 #else
 283      =1  #define SetVideoVPeakingReg(vshval)                             WriteDecoder(V_PEAKING, ((ReadDecoder(V_PEAKING) & 0xf8) | (vshval 
             -& 0x07) ) );
 284      =1  #endif
 285      =1  
 286      =1  #define SetVideoHfilterReg(val)                                 WriteDecoder(HFILTER, ((ReadDecoder(HFILTER) & 0xf8) | (val & 0x07) )|
             -0x08 );
 287      =1  //----------------------------------------------------------------------------------
 288      =1  //color type
 289      =1  #define RED             0
 290      =1  #define GREEN   1
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 19  

 291      =1  #define BLUE    2
 292      =1  #define WHITE   3
 293      =1  //saturation type
 294      =1  #define U_SAT   0
 295      =1  #define V_SAT   1
 296      =1  
 297      =1  //Alpha Blending Level
 298      =1  #define _0              0
 299      =1  #define _25             0x12
 300      =1  #define _37_5   0x13
 301      =1  #define _50             0x14
 302      =1  #define _100    0x18
 303      =1  
 304      =1  
 305      =1  /*
 306      =1  BYTE Mapping( int fromValue, struct RegisterInfo fromRange,
 307      =1                                   int * toValue, struct RegisterInfo toRange );
 308      =1  */
 309      =1  BYTE Mapping1( int fromValue, CODE_P struct RegisterInfo *fromRange,
 310      =1                                   int * toValue, CODE_P struct RegisterInfo *toRange );
 311      =1  #ifdef KEILC
 312      =1  #define Mapping2( A, B, C, D )                  Mapping1( A, B, C, D )
 313      =1  #define Mapping3( A, B, C, D )                  Mapping1( A, B, C, D )
 314      =1  #else
           =1 BYTE Mapping2( int fromValue, IDATA_P struct RegisterInfo *fromRange,
           =1                                  int * toValue, CODE_P struct RegisterInfo *toRange );
           =1 BYTE Mapping3( int fromValue, CODE_P struct RegisterInfo *fromRange,
           =1                                  int * toValue, IDATA_P struct RegisterInfo *toRange );
           =1 #endif
 320      =1  
 321      =1  BYTE GetAttributesFromNTSCSettings(BYTE index);
 322      =1  
 323      =1  #endif  // __TW88__
 324      =1  
  14          
  15          #include "osdbasic.h"
   1      =1  //osd_basic.h
   2      =1  //LJY11012001
   3      =1  #ifndef __OSD_BASIC__
   4      =1  #define __OSD_BASIC__
   5      =1  
   6      =1  // osd_basic.h
   7      =1  // char code
   8      =1  //#include "apilib.h"
   9      =1  
  10      =1  //ljy052903
  11      =1  //definition for internal OSD
  12      =1  #define FONT_WIDTH_TW88                 12
  13      =1  #define FONT_HEIGHT_TW88                18
  14      =1  #define PIXS_PER_XSTEP_TW88             8
  15      =1  #define LINES_PER_YSTEP_TW88    4
  16      =1  #define MAX_OSDWINDOW_TW88              8
  17      =1  
  18      =1  // Using TW88 OSD for Menu
  19      =1  #define FONT_WIDTH                      12
  20      =1  #define FONT_HEIGHT                     18
  21      =1  #define PIXS_PER_XSTEP          8
  22      =1  #define LINES_PER_YSTEP         4
  23      =1  #define MAX_OSDWINDOW           4
  24      =1  
  25      =1  #define MAX_FONT_BYTES          27
  26      =1  #define RAMFONT         0xFE
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 20  

  27      =1  #define ROMFONT         0xFF
  28      =1  #define NO_UDFONT                       226 
  29      =1  
  30      =1  #define FONT_ROM        1
  31      =1  #define FONT_RAM        2
  32      =1  
  33      =1  
  34      =1  /////////////////////////////////
  35      =1  // Old Registers...
  36      =1  /*
  37      =1          #define TW88_WIN1ATTR           0x76
  38      =1          #define TW88_WIN1XSTART         0x77
  39      =1          #define TW88_WIN1YSTART         0x78
  40      =1          #define TW88_WIN1WIDTH          0x79
  41      =1          #define TW88_WIN1HEIGHT         0x7a
  42      =1          #define TW88_WIN1BRDATTR        0x7b
  43      =1          #define TW88_WIN1BRDWIDTH       0x7c
  44      =1          #define TW88_WIN1BRDHEIGHT      0x7d
  45      =1          #define TW88_WIN1XSPACE         0x7e            // between characters.
  46      =1          #define TW88_WIN1YSPACE         0x7f
  47      =1          #define TW88_WIN1SADDR          0x80            // starting address of OSD ram for Windows 1
  48      =1  */
  49      =1  /////////////////////////////////
  50      =1  
  51      =1  // OSD
  52      =1  #define TW88_ENABLERAM          0x94    // TW8804C
  53      =1  #define TW88_FONTRAMADDR        0x99    // TW8804C
  54      =1  #define TW88_FONTRAMDATA        0x9a    // TW8804C
  55      =1  #define TW88_OSDRAMADDRHI       0x95    // TW8804C
  56      =1  #define TW88_OSDRAMADDRLO       0x96    // TW8804C
  57      =1  #define TW88_OSDRAMDATAHI       0x97    // TW8804C
  58      =1  #define TW88_OSDRAMDATALO       0x98    // TW8804C
  59      =1  #define TW88_MULTISTART         0x9b    // TW8804C
  60      =1  #define TW88_OSDLOCKUPSEL       0x9c
  61      =1  #define TW88_WINNUM                     0x9e    // TW8804C
  62      =1  #define TW88_WINATTR            0x9f    //
  63      =1  #define TW88_WINXSTART          0xa1    //
  64      =1  #define TW88_WINYSTART          0xa2    //
  65      =1  #define TW88_WINSTART_HI        0xa0    //
  66      =1  #define TW88_WINWIDTH           0xa3    //
  67      =1  #define TW88_WINHEIGHT          0xa4    //
  68      =1  #define TW88_WINBRDATTR         0xa5    //
  69      =1  #define TW88_WINBRDWIDTH        0xa6    //
  70      =1  #define TW88_WINBRDHEIGHT       0xa7    //
  71      =1  #define TW88_WINSPACE           0xa8    // between characters.
  72      =1  #define TW88_WINZOOM            0xa9    //
  73      =1  #define TW88_WINSADDRHI         0xa9    // starting address of OSD ram for Windows 1
  74      =1  #define TW88_WINSADDRLO         0xaa    // starting address of OSD ram for Windows 1
  75      =1  
  76      =1  #define TW88_WINSHADOW          0xab    //
  77      =1  #define TW88_WINBLENDING        0xac    //
  78      =1  #define TW88_WINCHEFFECT        0xad    //
  79      =1  
  80      =1  
  81      =1  //Attributes for OSD
  82      =1  #define WINZOOMx1                       0x01
  83      =1  #define WINZOOMx2                       0x02
  84      =1  #define WINZOOMx3                       0x03
  85      =1  #define WINZOOMx4                       0x04
  86      =1  #define SHOW                            0x08    
  87      =1  
  88      =1  #define EXTENDED_COLOR          0x80
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 21  

  89      =1  #define BG_COLOR_BLACK          0x00    //For background color of window, border, and char. 
  90      =1  #define BG_COLOR_RED            0x40    
  91      =1  #define BG_COLOR_GREEN          0x20
  92      =1  #define BG_COLOR_YELLOW         0x60
  93      =1  #define BG_COLOR_BLUE           0x10
  94      =1  #define BG_COLOR_MAGENTA        0x50
  95      =1  #define BG_COLOR_CYAN           0x30
  96      =1  #define BG_COLOR_WHITE          0x70
  97      =1  #define BG_COLOR_TRANS          0x80    
  98      =1  #define BG_COLOR_MASK           0xf0    
  99      =1  
 100      =1  #define CH_COLOR_BLACK          0x00    //For color of char.
 101      =1  #define CH_COLOR_RED            0x04    
 102      =1  #define CH_COLOR_GREEN          0x02
 103      =1  #define CH_COLOR_YELLOW         0x06
 104      =1  #define CH_COLOR_BLUE           0x01
 105      =1  #define CH_COLOR_MAGENTA        0x05
 106      =1  #define CH_COLOR_CYAN           0x03
 107      =1  #define CH_COLOR_WHITE          0x07
 108      =1  #define CH_BLINK                        0x08    
 109      =1  #define CH_COLOR_MASK           0x0f    
 110      =1  
 111      =1  #define CL_BLACK                        0x00    //For color of char.
 112      =1  #define CL_BLUE                         0x01
 113      =1  #define CL_GREEN                        0x02
 114      =1  #define CL_CYAN                         0x03
 115      =1  #define CL_RED                          0x04    
 116      =1  #define CL_MAGENTA                      0x05
 117      =1  #define CL_YELLOW                       0x06
 118      =1  #define CL_WHITE                        0x07
 119      =1  #define CL_BLINK                        0x08    
 120      =1  
 121      =1  // 0x76*(WindowNo*0x0b)
 122      =1  #define WINDOW_DISABLE          0x00
 123      =1  #define WINDOW_ENABLE           0x01
 124      =1  #define WINDOW_3D_ENABLE    0x04
 125      =1  #define WINDOW_3D_BOTTOM    0x08
 126      =1  #define WINDOW_3D_TOP       0x00
 127      =1  #define WINDOW_TRANS_ENABLE 0x80
 128      =1  
 129      =1  #define WINBDCOLOR_ENABLE       0x80
 130      =1  #define WINBDCOLOR_EXTENT       0x80
 131      =1  
 132      =1  
 133      =1  #define WINBLENDING_DISABLE 0x00
 134      =1  #define WINBLENDING_BACK    0x10
 135      =1  #define WINBLENDING_FORE    0x20
 136      =1  #define WINBLENDING_ALL     0x30
 137      =1  
 138      =1  #define WINSHADOW_ENABLE        0x80
 139      =1  // 0xc8*WindowNo
 140      =1  #define WIN_MULTICOLOR_ENABLE 0x20
 141      =1  #define WIN_CH_EFFECT_ENABLE  0x10
 142      =1  #define WIN_CH_EFFECT_SHADOW  0x08
 143      =1  
 144      =1  
 145      =1  
 146      =1  ///////// TW8804C /////////////
 147      =1  // Window Number
 148      =1  #define WINNUM1                         1
 149      =1  #define WINNUM2                         2
 150      =1  #define WINNUM3                         3
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 22  

 151      =1  #define WINNUM4                         4
 152      =1  
 153      =1  // Index 0x9f Defination
 154      =1  #define WIN_BG_COLOR_EX         0x80
 155      =1  #define WIN_BG_COLOR_EX0        0x00
 156      =1  #define WIN_3D_TYPE                     0x08
 157      =1  #define WIN_3D_TYPE0            0x00
 158      =1  #define WIN_3D_EN                       0x04
 159      =1  #define WIN_3D_EN0                      0x00
 160      =1  #define WIN_3D_LEVEL            0x02
 161      =1  #define WIN_EN                          0x01
 162      =1  #define WIN_EN0                         0x00
 163      =1  
 164      =1  // Index 0xa5 Defination
 165      =1  #define WIN_BD_EN                       0x80
 166      =1  #define WIN_BD_EN0                      0x00
 167      =1  #define WIN_BD_WIDTH(a)         a
 168      =1  
 169      =1  // Index 0xa6 Defination
 170      =1  #define WIN_BD_COLOR_EX         0x80
 171      =1  #define WIN_BD_COLOR_EX0        0x00
 172      =1  #define WIN_H_BD_W(a)           a
 173      =1  
 174      =1  // Index 0xa7 Defination
 175      =1  #define WIN_V_BD_W(a)           a
 176      =1  
 177      =1  // Index 0xa8
 178      =1  #define WIN_CH_VSPACE(a)        (a<<4)
 179      =1  #define WIN_CH_HSPACE(a)        a
 180      =1  
 181      =1  // Index 0xa9 Defination
 182      =1  #define WIN_VZOOM(a)            (a-1)
 183      =1  #define WIN_HZOOM(a)            (a-1)
 184      =1  #define WIN_SADDR(a)            a
 185      =1  
 186      =1  // Index 0xab
 187      =1  #define WIN_SHADOW_EN           0x80
 188      =1  #define WIN_SHADOW_EN0          0x00
 189      =1  #define WIN_SHADOW_W(a)         a
 190      =1  
 191      =1  // ad
 192      =1  #define WIN_SHADOW_COLOR_EX             0x80
 193      =1  #define WIN_SHADOW_COLOR_EX0    0x00
 194      =1  #define WIN_MULTI_EN                    0x40
 195      =1  #define WIN_MULTI_EN0                   0x00
 196      =1  #define WIN_V_EXT_EN                    0x20
 197      =1  #define WIN_V_EXT_EN0                   0x00
 198      =1  #define WIN_CH_BDSH_SEL(a)              a
 199      =1  #define SEL_BORDER                              0
 200      =1  #define SEL_SHADOW                              1
 201      =1  #define WIN_CH_BDSH_COLOR_EX    0x08
 202      =1  #define WIN_CH_BDSH_COLOR_EX0   0x00
 203      =1  
 204      =1  #define OSD_Win_Num(a)                  0x9e, a-1
 205      =1  #define OSD_Win_Start_Addr              0xa0
 206      =1  #define OSD_Win_Attr(a)                         a
 207      =1  #define OSD_Win_Start(h,v)                       (BYTE)(((WORD)h>>8) | (((WORD)v>>8)<<4)),(BYTE)h, (BYTE)v
 208      =1  #define OSD_Win_Width(a)                        a
 209      =1  #define OSD_Win_Height(a)                       a
 210      =1  #define OSD_Win_Border(a)                       a
 211      =1  #define OSD_Win_HBorder(a)                      a
 212      =1  #define OSD_Win_VBorder(a)                      a
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 23  

 213      =1  #define OSD_Win_CH_Space(a)                     a
 214      =1  #define OSD_Win_ZM_SAddr(h,v,a)         ((h<<6)|(v<<4)|(a>>8)), (BYTE)a
 215      =1  #define OSD_Win_Shadow(a)                       a
 216      =1  #define OSD_Win_Blending(a)                     a
 217      =1  #define OSD_Win_CH_BorderShadow(a)      a
 218      =1  
 219      =1  
 220      =1  #define SetOSDWindowNum(winno)          WriteTW88(TW88_WINNUM, winno-1)
 221      =1  
 222      =1  //#define  OSD_Window_Attr(Trans_en,Color,3D_Type,3D_en,W_en)       (((( Trans_en | Color ) | 3D_Type) | 3
             -D_en) | W_en)
 223      =1  #define  OSD_Window_Attr(a,b,c,d,e)                                                                     (((( a | b ) | c) | d) | e)
 224      =1  #define  OSD_WShadow_Attr(W_Shadow_en,Color,Width)                                      W_Shadow_en | Color | Width
 225      =1  //#define  OSD_Blending(en,level)                                                                               en | (level & 0x0f)
 226      =1  //#define  OSD_Ch_Effect(Multi, Effect_En, ShadowBorder, Color)         Multi | Effect_En | ShadowBorder | Color 
             - 
 227      =1  
 228      =1  
 229      =1  struct OSDStrInfo 
 230      =1  {
 231      =1          BYTE    cnt;
 232      =1          WORD    addr;
 233      =1          BYTE    attr;
 234      =1          DWORD   str;
 235      =1  };
 236      =1  /*
 237      =1  struct BarInfo {
 238      =1          struct RegisterInfo BarCnt;
 239      =1          BYTE    winno;
 240      =1          BYTE    xoff;
 241      =1          BYTE    yoff;
 242      =1          BYTE    color;
 243      =1          int             bar_cnt;
 244      =1  };
 245      =1  */
 246      =1  struct FontData {
 247      =1          BYTE    font[27];
 248      =1  } ;
 249      =1  
 250      =1  //====================================================================
 251      =1  //  Internal OSD Function
 252      =1  void CopyCharToOSDRAM_TW88(BYTE Addr, BYTE attr, BYTE ch);
 253      =1  void CopyUDCharToOSDRAM_TW88(BYTE Addr, BYTE attr, BYTE ch);
 254      =1  //BYTE GetOSDWindowWidth_TW88(BYTE winno);
 255      =1  WORD GetOSDWindowSA_TW88(BYTE winno);
 256      =1  void SetOSDWindowX_TW88(BYTE winno, BYTE x);
 257      =1  void SetOSDWindowY_TW88(BYTE winno, BYTE y);
 258      =1  void SetOSDWindowWidth_TW88(BYTE winno, BYTE w);
 259      =1  void SetOSDWindowSA_TW88(BYTE winno, WORD sa);
 260      =1  
 261      =1  void SetOSDItalicsAndUnderline(BYTE italics, BYTE underline);
 262      =1  
 263      =1  void SetOSDHBorderWidth_TW88(BYTE winno, BYTE w);
 264      =1  //BYTE GetOSDWindowColor_TW88(BYTE winno);
 265      =1  void SetOSDWindowColor_TW88(BYTE CCWin, BYTE color);
 266      =1  void EnableOSDRAMAndChangeFont(BYTE type);
 267      =1  void WriteCharToOSDRAM(WORD addr, BYTE ch, BYTE attr);
 268      =1  
 269      =1  
 270      =1  void ShowOSDWindowAll(BYTE on);
 271      =1  void ShowOSDWindow_TW88(BYTE winno, BYTE onoff);
 272      =1  void ClearOSD_TW88(void);
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 24  

 273      =1  //void CreateOSDWindow_TW88(BYTE winno, BYTE x, BYTE y, BYTE w, BYTE h, WORD sa, BYTE attr);
 274      =1  /*not yet!!
 275      =1  //ljy012304...CC_ADJUST_POS
 276      =1  void SetOSDWindowXS_TW88(BYTE winno, BYTE xs);
 277      =1  void SetOSDWindowYS_TW88(BYTE winno, BYTE ys);
 278      =1  */
 279      =1  
 280      =1  //====================================================================
 281      =1  //      OSDMenu Functions
 282      =1  
 283      =1  //--------------------------------------------------------------------
 284      =1  //      Functions used in only Menu
 285      =1  #define         CONVERT_CODE                    0x80
 286      =1  
 287      =1  void InitOSDWindow(BYTE *ptr);
 288      =1  
 289      =1  WORD GetOSDWindowX(BYTE winno);
 290      =1  WORD GetOSDWindowY(BYTE winno);
 291      =1  BYTE CreateOSDWindowOutline(BYTE winno, BYTE w, BYTE color);
 292      =1  void CreateOSDMenuWindow(BYTE, BYTE, BYTE, BYTE, BYTE, BYTE, BYTE);
 293      =1  void ClearOSDLine(BYTE winno, BYTE sx, BYTE sy, BYTE cnt, BYTE attr);
 294      =1  void WriteStringToAddr(WORD addr, BYTE *str, BYTE cnt);
 295      =1  void DrawAttrString(WORD addr, BYTE *str, BYTE cnt);
 296      =1  void DrawAttrCnt(WORD addr, BYTE color, BYTE cnt);
 297      =1  void ClearDataCnt(WORD, BYTE);
 298      =1  #define         SetOSDWindowX(A, B)                                                     SetOSDWindowX_TW88(A, B)
 299      =1  #define     SetOSDWindowY(A, B)                                                 SetOSDWindowY_TW88(A, B)
 300      =1  
 301      =1  
 302      =1  //--------------------------------------------------------------------
 303      =1  //      Functions used in Menu and others
 304      =1  #define         ShowOSDWindow(A, B)                                                     ShowOSDWindow_TW88(A, B)
 305      =1  #define     ClearOSD()                                                                  ClearOSD_TW88()
 306      =1  
 307      =1  //================================================================
 308      =1  //      Font
 309      =1  void DownloadUDFont(void);
 310      =1  #ifdef Hs_debug
           =1 void DisplayROMFont(BYTE);
           =1 void DisplayRAMFont(BYTE);
           =1 #endif
 314      =1  void DownloadFont(BYTE cod, CODE_P BYTE *fontdata);
 315      =1  //void DisplayGrid( void );
 316      =1  //void DisplayCone( void );
 317      =1  //void DisplayJapanese( void );
 318      =1  void TestRAMFont( void );
 319      =1  #ifdef BANKING
           =1 void DisplayMGrid( BYTE );
           =1 void DisplayMessage( void );
           =1 void DisplayChinese( void );
           =1 void DisplayJapanese( void );
           =1 void DisplayKorean( void );
           =1 void DisplayGridBank0( BYTE n );
           =1 void DisplayGridBank1( BYTE n );
           =1 #endif
 328      =1  
 329      =1  //================================================================
 330      =1  //      OSD COLOR
 331      =1  void Change_OSDColorLookup(void);
 332      =1  void Reset_OSDColorLookup(void);
 333      =1  
 334      =1  //====================================================================
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 25  

 335      =1  //                              Conversion
 336      =1  //====================================================================
 337      =1  BYTE utoa(WORD value, BYTE *str, BYTE radix);
 338      =1  BYTE ltoa_K(long value, BYTE *str, BYTE);
 339      =1  BYTE strlen( BYTE *str );
 340      =1  
 341      =1  #define CStrlen(A)                              strlen(A)
 342      =1  
 343      =1  void WaitEndofDisplayArea(void);
 344      =1  
 345      =1  #endif  // __OSD_BASIC__
  16          #include "dispinfo.h"
   1      =1  #ifndef __DISPINFO__
   2      =1  #define __DISPINFO__
   3      =1  //==================================================================
   4      =1  //                              Display Information
   5      =1  //==================================================================
   6      =1  #if (defined WQVGA) && (defined ANALOG_7INCH)
           =1 #define         INPUTINFO_ZOOM          WINZOOMx1
           =1 #define         LOGO_ZOOM                       WINZOOMx3
           =1 
           =1 #else // (defined WQVGA) && (defined SHARP_LQ043T3DX02)
  11      =1  #define         INPUTINFO_ZOOM          WINZOOMx2
  12      =1  #define         LOGO_ZOOM                       WINZOOMx2
  13      =1  #endif
  14      =1  //#define               VOL_ZOOM                        WINZOOMx4
  15      =1  #define         MUTE_ZOOM                       WINZOOMx3
  16      =1  #define         TVCHN_ZOOM                      WINZOOMx4
  17      =1  #define         RATINGINFO_ZOOM         WINZOOMx3
  18      =1  #define     SCANTV_ZOOM                 WINZOOMx2               //ljy012304
  19      =1  #define         PCINFO_ZOOM                     WINZOOMx2
  20      =1  #define     BAR_ZOOM                    WINZOOMx2
  21      =1  
  22      =1  
  23      =1  #define DVRStatus_OSDWIN        4 
  24      =1  #define DVRStatus_ADDR  195 
  25      =1  
  26      =1  extern  IDATA BYTE  DisplayedOSD;
  27      =1  
  28      =1  
  29      =1  void ClearDisplayedOSD( BYTE newd );
  30      =1  void SetDisplayedOSD( BYTE newd );
  31      =1  BYTE GetDisplayedOSD(void);
  32      =1  void ClearOSDInfo(void);
  33      =1  
  34      =1  void DisplayInput(void);
  35      =1  BYTE ClearInput(void);
  36      =1  
  37      =1  
  38      =1  void DisplayLogo(void);
  39      =1  void ClearLogo(void);
  40      =1  
  41      =1  void DisplayPCInfo(BYTE CODE *ptr);
  42      =1  void ClearPCInfo(void);
  43      =1  void DisplayAutoAdjust(void);
  44      =1  void ClearAutoAdjust(void);
  45      =1  
  46      =1  
  47      =1  void DisplayVol(void);
  48      =1  #if 0
           =1 void DisplayMuteInfo(void);
           =1 #endif
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 26  

  51      =1  void ClearMuteInfo(void);
  52      =1  BYTE CheckAndClearOSD(void);
  53      =1  
  54      =1  //==================================================================
  55      =1  //                                              TV Info
  56      =1  //==================================================================
  57      =1  
  58      =1  BYTE ClearTVInfo(void);
  59      =1  
  60      =1  #endif  // __DISPINFO__
  17          #include "measure.h"
   1      =1  #ifndef __MEASURE__
   2      =1  #define __MEASURE__
   3      =1  
   4      =1  #define EE_DOS                          0
   5      =1  
   6      =1  #define EE_SP1                          1
   7      =1  #define EE_SP2                          2
   8      =1  #define EE_SP3                          3
   9      =1  
  10      =1  #define EE_VGA_60                       4
  11      =1  #define EE_VGA_66                       5
  12      =1  #define EE_VGA_70                       6
  13      =1  #define EE_VGA_72                       7
  14      =1  #define EE_VGA_75                       8
  15      =1  #define EE_VGA_85                       9
  16      =1  
  17      =1  #define EE_SVGA_56                      10
  18      =1  #define EE_SVGA_60                      11
  19      =1  #define EE_SVGA_70                      12
  20      =1  #define EE_SVGA_72                      13
  21      =1  #define EE_SVGA_75                      14
  22      =1  #define EE_SVGA_85                      15
  23      =1  
  24      =1  #define EE_832_75                       16
  25      =1  
  26      =1  #define EE_XGA_60                       17
  27      =1  #define EE_XGA_70                       18
  28      =1  #define EE_XGA_72                       19
  29      =1  #define EE_XGA_75                       20
  30      =1  #define EE_XGA_85                       21
  31      =1  
  32      =1  #define EE_1152_60                      22
  33      =1  #define EE_1152_70                      23
  34      =1  #define EE_1152_75                      24
  35      =1  
  36      =1  #define EE_SXGA_60                      25
  37      =1  #define EE_SXGA_70                      26
  38      =1  #define EE_SXGA_75                      27
  39      =1  
  40      =1  #define EE_RGB_480P                     28
  41      =1  #define EE_RGB_720P                     29
  42      =1  #define EE_RGB_720P50           30
  43      =1  #define EE_RGB_1080I            31
  44      =1  #define EE_RGB_1080I50A         32
  45      =1  #define EE_RGB_1080I50B         33
  46      =1  #define EE_RGB_480I                     34
  47      =1  #define EE_RGB_576I                     35
  48      =1  #define EE_RGB_576P                     36
  49      =1  
  50      =1  #define EE_YPbPr_480P           37
  51      =1  #define EE_YPbPr_720P           38
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 27  

  52      =1  #define EE_YPbPr_720P50         39
  53      =1  #define EE_YPbPr_1080I          40
  54      =1  #define EE_YPbPr_1080I50A       41
  55      =1  #define EE_YPbPr_1080I50B       42
  56      =1  #define EE_YPbPr_480I           43
  57      =1  #define EE_YPbPr_576I           44
  58      =1  #define EE_YPbPr_576P           45
  59      =1  
  60      =1  #define EE_PC_MAX                       46
  61      =1  
  62      =1  #define EE_PC_NO_SIGNAL         0xfe
  63      =1  #define EE_PC_UNKNOWN           0xff
  64      =1  
  65      =1  struct _PCMDATA {
  66      =1          CODE_P BYTE  Support;
  67      =1          CODE_P WORD  HAN;
  68      =1          CODE_P WORD  VAN;
  69      =1          CODE_P WORD  IVF;
  70      =1          CODE_P WORD  CLOCK;
  71      =1          CODE_P WORD  low;
  72      =1          CODE_P WORD  high;
  73      =1          CODE_P WORD  Hstart;
  74      =1          CODE_P WORD  Vstart;
  75      =1          CODE_P WORD  IPF;               // 0.1MHz
  76      =1          CODE_P WORD  PPF;               // 0.1MHz
  77      =1          CODE_P BYTE  VBack;
  78      =1  };
  79      =1  #ifndef AUTOCALC_PC
           =1 
           =1 #ifdef SUPPORT_DTV
           =1 struct _DTVMDATA {
           =1         CODE_P BYTE Reg62;
           =1         CODE_P BYTE RegBC;
           =1         CODE_P BYTE RegBD;
           =1         CODE_P BYTE RegBE;
           =1         CODE_P WORD PHP;
           =1 };
           =1 #endif
           =1 #endif
  91      =1  #if defined     XGA
           =1         #define MAX_PPF          90000000
           =1 #elif defined SXGA
           =1         #define MAX_PPF         135000000
           =1 #elif defined WXGA
           =1         #define MAX_PPF          90000000
           =1 #elif defined WVGA
  98      =1          #define MAX_PPF          90000000
  99      =1  #elif defined VGA
           =1         #define MAX_PPF          50000000
           =1 #elif defined SVGA
           =1         #define MAX_PPF          80000000
           =1 #elif defined QVGA
           =1         #define MAX_PPF          30000000
           =1 #elif defined WQVGA
           =1         #define MAX_PPF          30000000
           =1 #endif
 108      =1  
 109      =1  extern BYTE cLastSyncLoss;
 110      =1  extern BYTE PcMode;
 111      =1  
 112      =1  void CompLT170E2(void);
 113      =1  
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 28  

 114      =1  WORD gap(WORD a, WORD b);
 115      =1  
 116      =1  //===================================================================
 117      =1  WORD GetHpnVpn(BYTE);
 118      =1  
 119      =1  WORD ConvertBasedOnInput(WORD dat);
 120      =1  
 121      =1  BYTE IsDTVInput(void);
 122      =1  
 123      =1  void SetVValueForPanel(WORD vstart);
 124      =1  BYTE SetHValueForPanel(void);
 125      =1  BYTE GetActiveRegion(void);
 126      =1  
 127      =1  BYTE DetectAndSetForVGAInput(BYTE);
 128      =1  #ifdef SUPPORT_DTV
           =1 BYTE DetectAndSetForDTVInput(BYTE);
           =1 #endif
 131      =1  void CheckPCinput(void);
 132      =1  void CheckDTVinput(void);
 133      =1  
 134      =1  WORD GetCoarseValue(void);
 135      =1  BYTE GetPhaseValue(void);
 136      =1  WORD SetPCCoarseValue(BYTE val);
 137      =1  BYTE SetPhaseValue(BYTE val);
 138      =1  
 139      =1  void DisplayResultAndSetActiveRange(void);
 140      =1  
 141      =1  //=============================================================================
 142      =1  //                    PC Screen Position Move Functions
 143      =1  //=============================================================================
 144      =1  void MoveActiveVpos(BYTE val);          // Up/Down
 145      =1  void MoveActiveHpos(BYTE val);          // Left/Right
 146      =1  
 147      =1  BYTE GetVPosition(void);
 148      =1  BYTE SetVPosition(BYTE val);
 149      =1  BYTE GetHPosition(void);
 150      =1  BYTE SetHPosition(BYTE val);
 151      =1  
 152      =1  void ResetPCValue(void);
 153      =1  
 154      =1  CODE_P BYTE *GetPCInputSourceName(void);
 155      =1  BYTE AutoAdjust(void);
 156      =1  
 157      =1  #endif // __MEASURE__
  18          #include "debug.h"
   1      =1  #ifndef __DEBUG__
   2      =1  #define __DEBUG__
   3      =1  
   4      =1  #define DEBUG_ERR       1
   5      =1  #define DEBUG_WARN      2
   6      =1  #define DEBUG_INFO      3
   7      =1  #define DEBUG_BREAK     4
   8      =1  
   9      =1  #define Pause(a)        { Printf("\r\n"); Printf(a); while(!RS_ready()); RS_rx(); }
  10      =1  
  11      =1  //#define BURSTLOCK     7
  12      =1  
  13      =1  void DebugWindowControl (void) ;
  14      =1  void Draw_Debug_Char(void);
  15      =1  void DebugWindowCursor( BYTE flag ) ;
  16      =1  void DebugWindowData( BYTE flag ) ;
  17      =1  void Debug_Write(void);
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 29  

  18      =1  void Debug_Read(void);
  19      =1  
  20      =1  
  21      =1  
  22      =1  #endif  // __DEBUG__
  23      =1  
  24      =1  #ifdef CHIP_MANUAL_TEST
           =1 BYTE DelaynCheck(void);
           =1 void ChipManualTest(void);
           =1 
           =1 #endif
  19          #include "printf.h"
   1      =1  #ifndef __PRINTF__
   2      =1  #define __PRINTF__
   3      =1  
   4      =1  #define _outchar(c) while(1) { if( !RS_Xbusy ) { SBUF = c; RS_Xbusy=1; break; } }
   5      =1  #define Putch(c) _outchar(c)
   6      =1  
   7      =1  #ifdef SERIAL
   8      =1  
   9      =1   void Printf ( const char CODE_P *fmt, ... );
  10      =1   void Puts ( CODE_P char *ptr );
  11      =1  
  12      =1  #define TW2835Cmd(a)   Puts ( a )
  13      =1  
  14      =1  #else
           =1 
           =1  #undef  DEBUG
           =1  #define Printf(a,b)    //
           =1  #define Puts(a)                //
           =1 
           =1 #endif
  21      =1  
  22      =1  
  23      =1  #ifndef DEBUG
  24      =1  
  25      =1   #define dPuts(a)               //
  26      =1   #define wPuts(a)               //
  27      =1   #define ePuts(a)               //
  28      =1  
  29      =1  #else
           =1 
           =1  void dPrintf( const char CODE_P *fmt, ... );
           =1  void wPrintf( const char CODE_P *fmt, ... );
           =1  void ePrintf( const char CODE_P *fmt, ... );
           =1 
           =1  void dPuts( CODE_P char *ptr );
           =1  void wPuts( CODE_P char *ptr );
           =1  void ePuts( CODE_P char *ptr );
           =1 
           =1 #endif  // DEBUG
  40      =1  
  41      =1  BYTE Getch(void);
  42      =1  BYTE Getche(void);
  43      =1  
  44      =1  
  45      =1  #endif  //__PRINTF__
  20          #include "udfont.h"
   1      =1  //udfont.h
   2      =1  #define COLORFONT_START 0x60
   3      =1  //#define       MAX_FONT_RAM_CHARS      0xa7 //174
   4      =1  #define MAX_FONT_RAM_CHARS      0x90 //6Kbytes for RAM
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 30  

   5      =1  code unsigned char RAMFONTDATA[][27];
   6      =1  code unsigned char OSD_Color_LookUp_Data_Table[][8];
   7      =1  
   8      =1  
  21          #include "regmap.h"
   1      =1  #ifndef __REGMAP__
   2      =1  #define __REGMAP__
   3      =1  
   4      =1  //-----------------------------------------------------------------------------
   5      =1  //                              Individual Decoder Registers 
   6      =1  //-----------------------------------------------------------------------------
   7      =1  
   8      =1  #define MCU_STOP_MODE   0xc8    // bit 7 is mcu stop, bit5 is MCU debug
   9      =1  
  10      =1  #define LAD0                    0xc9    // Low speed AD channel 0
  11      =1  #define LAD1                    0xca    // Low speed AD channel 1
  12      =1  
  13      =1  #define REG_PAGE                0xff
  14      =1  #define STATUS0                 0xd0
  15      =1  #define STATUS1                 0xd1
  16      =1  #define IRQ_EN1                 0xd2
  17      =1  #define IRQ_EN0                 0xd3
  18      =1  
  19      =1  //-----------------------------------------------------------------------------
  20      =1  //                              Individual Decoder Registers 
  21      =1  //-----------------------------------------------------------------------------
  22      =1  
  23      =1  #define DECODERADDRESS  TW88I2CAddress
  24      =1  
  25      =1  #define CVFMT                   0x1e    // Component Video Format
  26      =1  #define FBSHIFT                 0x38    // RGB Anti-Alias Filter/FB Shift Level
  27      =1  #define SHUE                    0x3e    // RGB Hue
  28      =1  #define SCONTRAST               0x3b    // RGB Contrast
  29      =1  #define SBRIGHT                 0x3a    // RGB Brightness
  30      =1  #define SCbGAIN                 0x3c    // RGB Cb Gain
  31      =1  #define SCrGAIN                 0x3d    // RGB Cb Gain
  32      =1  #define RGBCONTROL              0x36    // RGB Powerdown..
  33      =1  #define RGBMISC                 0x39
  34      =1  #define FBCONTRL                0x3F
  35      =1  
  36      =1  //#define OSD_ADJ                       0xce
  37      =1  #define PNLSHARPNESS    0x78    // Sharpness Control
  38      =1  #define OSDWINSTATUS    0x95
  39      =1  //-----------------------------------------------------------------------------
  40      =1  //                              Common Registers
  41      =1  //-----------------------------------------------------------------------------
  42      =1  #define CSTATUS                 0x01    // Chip Status
  43      =1  #define INFORM                  0x02    // Input Format
  44      =1  #define ACNTL                   0x06    // Analog Control
  45      =1  #define CROP_HI                 0x07    // Cropping High
  46      =1  #define VDELAY_LO               0x08    // Vertical Delay Low
  47      =1  #define VACTIVE_LO              0x09    // Vertical Active Low
  48      =1  #define HDELAY_LO               0x0a    // Horizontal Delay Low
  49      =1  #define HACTIVE_LO              0x0b    // Horizontal Active Low
  50      =1  #define CNTRL1                  0x0c    // Control 1
  51      =1  
  52      =1  #define BRIGHT                  0x10    // Brightness Control
  53      =1  #define CONTRAST                0x11    // Contrast Control
  54      =1  #define SHARPNESS               0x12    // Sharpness Control
  55      =1  #define SAT_U                   0x13    // Chroma(U) Gain
  56      =1  #define SAT_V                   0x14    // Chroma(V) Gain
  57      =1  #define HUE                             0x15    // Hue Conrol
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 31  

  58      =1  #define V_PEAKING               0x17    // Vertical Peaking
  59      =1  
  60      =1  #define CC_STATUS               0x1a    // CC/EDS Status
  61      =1  #define CC_DATA                 0x1b    // CC/EDS Data
  62      =1  #define SDT                             0x1c    // Standard Selection
  63      =1  #define SDTR                    0x1d    // Standard Recognition
  64      =1  
  65      =1  #define V_CONTROL2              0x29    // Vertical Control II
  66      =1  #define HFILTER                 0x2c
  67      =1  #define MISC1                   0x2d    // Miscellaneous Control 1
  68      =1  #define MISC2                   0x2e    // Miscellaneous Control 2
  69      =1  #define MISC3                   0x2f    // Miscellaneous Control 2
  70      =1  
  71      =1  #define VBI_CNTL2               0x34    // VBI control 2 - WSSEN
  72      =1  #define CC_ODDLINE              0x35    // CC Odd Line
  73      =1  
  74      =1  #define LADC0                   0xc9    //LADC Channel 0 Input Value 
  75      =1  #define LADC1                   0xca    //LADC Channel 1 Input Value 
  76      =1  
  77      =1  #define WriteDecoder(index, val)                WriteTW88( index, val )
  78      =1  #define ReadDecoder(index)                              ReadTW88(  index )
  79      =1  #endif // __REGMAP__
  22          #include "externs.h"
   1      =1  //
   2      =1  //Externs.h     : Register declaration
   3      =1  //
   4      =1  #ifdef INTERNAL_MCU
           =1 extern xdata BYTE REG00, REG01, REG02, REG03, REG04, REG05, REG06, REG07, REG08, REG09, REG0a, REG0b, REG0
             -c, REG0d, REG0e, REG0f,
           =1                   REG10, REG11, REG12, REG13, REG14, REG15, REG16, REG17, REG18, REG19, REG1a, REG1b, REG1c, REG1d, REG1
             -e, REG1f,
           =1                   REG20, REG21, REG22, REG23, REG24, REG25, REG26, REG27, REG28, REG29, REG2a, REG2b, REG2c, REG2d, REG2
             -e, REG2f,
           =1                   REG30, REG31, REG32, REG33, REG34, REG35, REG36, REG37, REG38, REG39, REG3a, REG3b, REG3c, REG3d, REG3
             -e, REG3f,
           =1                   REG40, REG41, REG42, REG43, REG44, REG45, REG46, REG47, REG48, REG49, REG4a, REG4b, REG4c, REG4d, REG4
             -e, REG4f,
           =1                   REG50, REG51, REG52, REG53, REG54, REG55, REG56, REG57, REG58, REG59, REG5a, REG5b, REG5c, REG5d, REG5
             -e, REG5f,
           =1                   REG60, REG61, REG62, REG63, REG64, REG65, REG66, REG67, REG68, REG69, REG6a, REG6b, REG6c, REG6d, REG6
             -e, REG6f,
           =1                   REG70, REG71, REG72, REG73, REG74, REG75, REG76, REG77, REG78, REG79, REG7a, REG7b, REG7c, REG7d, REG7
             -e, REG7f,
           =1                   REG80, REG81, REG82, REG83, REG84, REG85, REG86, REG87, REG88, REG89, REG8a, REG8b, REG8c, REG8d, REG8
             -e, REG8f,
           =1                   REG90, REG91, REG92, REG93, REG94, REG95, REG96, REG97, REG98, REG99, REG9a, REG9b, REG9c, REG9d, REG9
             -e, REG9f,
           =1                   REGa0, REGa1, REGa2, REGa3, REGa4, REGa5, REGa6, REGa7, REGa8, REGa9, REGaa, REGab, REGac, REGad, REGa
             -e, REGaf,
           =1                   REGb0, REGb1, REGb2, REGb3, REGb4, REGb5, REGb6, REGb7, REGb8, REGb9, REGba, REGbb, REGbc, REGbd, REGb
             -e, REGbf,
           =1                   REGc0, REGc1, REGc2, REGc3, REGc4, REGc5, REGc6, REGc7, REGc8, REGc9, REGca, REGcb, REGcc, REGcd, REGc
             -e, REGcf,
           =1                   REGd0, REGd1, REGd2, REGd3, REGd4, REGd5, REGd6, REGd7, REGd8, REGd9, REGda, REGdb, REGdc, REGdd, REGd
             -e, REGdf,
           =1                   REGe0, REGe1, REGe2, REGe3, REGe4, REGe5, REGe6, REGe7, REGe8, REGe9, REGea, REGeb, REGec, REGed, REGe
             -e, REGef,
           =1                   REGf0, REGf1, REGf2, REGf3, REGf4, REGf5, REGf6, REGf7, REGf8, REGf9, REGfa, REGfb, REGfc, REGfd, REGf
             -e, REGff;
           =1 
           =1 #endif  // internal MCU only variables
  23      =1  
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 32  

  23          
  24          extern CODE struct RegisterInfo UserRange;
  25          
  26          //CODE BYTE ZoomAttr[]={        0,      0,      0x40,   0x80,   0xc0    };
  27          
  28          //IDATA struct BarInfo BarInfo;
  29          IDATA struct OSDStrInfo OSDStrInfo;
  30          extern  bit   I2CAutoIncFlagOn ;
  31          extern          DATA  WORD  stopWatch;
  32          
  33          data BYTE       code *ptrFont;
  34          
  35          //********************************************************************
  36          //
  37          //      Font
  38          //
  39          //********************************************************************
  40          
  41          void WaitEndofDisplayArea(void)
  42          {
  43   1              BYTE ret,i;
  44   1      
  45   1              ret =  ReadTW88(OSDWINSTATUS) & 0x40;
  46   1      
  47   1              for(i=0;i<10;i++){
  48   2                      if( ret^ (ReadTW88(OSDWINSTATUS)&0x40)) break; 
  49   2              }
  50   1      }
  51          
  52          //=============================================================================
  53          //                      Download OSD Color Look up 
  54          //=============================================================================
  55          void Change_OSDColorLookup(void)
  56          {
  57   1              BYTE i,j;
  58   1              for(j=0; j<2; j++) {   
  59   2                      for(i=0; i<8; i++) {
  60   3                              WriteTW88(0x9c, i+j*8);
  61   3                              WriteTW88(0x9d, OSD_Color_LookUp_Data_Table[j][i]);
  62   3                      }
  63   2              }
  64   1      }
  65          
  66          //=============================================================================
  67          //                      Download RAM Font Data
  68          //=============================================================================
  69          //#include "grid_LPL.c"
  70          //#include "grid_GenTex.c"
  71          //#include "gridTW.c"
  72          //#include "grid\LINE_45B-4.c"
  73          /*
  74          struct MultiGridInfo
  75          {
  76                  unsigned char   NFonts;
  77                  unsigned char   NChars;
  78                  unsigned char   *LUT;
  79                  unsigned char   NofWindows;
  80                  unsigned int    *WPos0;
  81                  unsigned char   *WColors0;
  82                  unsigned int    *WPos1;
  83                  unsigned char   *WColors1;
  84                  unsigned int    *WPos2;
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 33  

  85                  unsigned char   *WColors2;
  86                  unsigned int    *WPos3;
  87                  unsigned char   *WColors3;
  88                  unsigned char   *CharPos;
  89                  unsigned char   *FontData;
  90                  unsigned char   *DisplayData;
  91          };
  92          */
  93          //extern code struct MultiGridInfo  cone_Info, Japanese_Info;
  94          
  95          
  96          
  97          void DownloadFont(BYTE cod, CODE_P BYTE *fontdata)
  98          {
  99   1              WriteTW88(TW88_ENABLERAM, ReadTW88(TW88_ENABLERAM) | 0x01);             // Font RAM access mode
 100   1              WriteTW88(TW88_FONTRAMADDR, cod);
 101   1      
 102   1      //      WriteTW88(0xff, ReadTW88(0xff) | 0x10); // Disable I2C index auto increment during multi-write
 103   1              WriteTW88(0xe0, ReadTW88(0xe0) | 0x10); // Disable I2C index auto increment during multi-write
 104   1              WriteI2Cn( TW88I2CAddress, TW88_FONTRAMDATA, fontdata, 27 );
 105   1      
 106   1              WriteTW88(TW88_ENABLERAM, ReadTW88(TW88_ENABLERAM) & 0xfe);             // OSD RAM access mode
 107   1      }
 108          
 109          void DownloadUDFont(void)
 110          {
 111   1              BYTE i;
 112   1      
 113   1              WriteTW88(TW88_MULTISTART, COLORFONT_START); // Set Color Font Start Address. 
 114   1      
 115   1              for(i=0; i< NO_UDFONT && i<= MAX_FONT_RAM_CHARS ; i++) {
 116   2                      DownloadFont(i, RAMFONTDATA[i]);
 117   2              }
 118   1      }
 119          /*
 120          void DownloadGridFont(void)
 121          {
 122                  BYTE i;
 123          
 124                  WriteTW88(TW88_MULTISTART, 0xff); // Set Color Font Start Address. 
 125          
 126                  //for(i=0; i< 62 ; i++) {       //LPL case 62 chars
 127                  for(i=0; i< NofFonts ; i++) {           // Techwell case 48 chars
 128                          DownloadFont(i, gridTW[i]);
 129                  }
 130          }
 131          */
 132          #if 0
              void DownloadGridFont(void)
              {
              register        BYTE i, m;
              
                      WriteTW88(TW88_MULTISTART, 0xff); // Set Color Font Start Address. 
              
                      m = LINE_45B_Info.NFonts;
                      for(i=0; i< m ; i++) {          // Techwell case 48 chars
                              DownloadFont(i, &LINE_45B_Info.FontData[i*27]);
                      }
              }
              
              void DownloadConeFont(void)
              {
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 34  

              register        BYTE i, m;
              
                      WriteTW88(TW88_MULTISTART, 0xff); // Set Color Font Start Address. 
                      m = cone_Info.NFonts;
                      for(i=0; i< m ; i++) {          // Techwell case 48 chars
                              DownloadFont(i, &cone_Info.FontData[i*27]);
                      }
              }
              
              void DownloadJapaneseFont(void)
              {
              register        BYTE i, m;
              
                      WriteTW88(TW88_MULTISTART, 0xff); // Set Color Font Start Address. 
                      m = Japanese_Info.NFonts;
                      for(i=0; i< m ; i++) {          // Techwell case 48 chars
                              DownloadFont(i+190, &Japanese_Info.FontData[i*27]);
                      }
              }
              #endif
 167          
 168          //*****************************************************************************
 169          //      OSD Window internal subfunction for TW88xx
 170          //*****************************************************************************
 171          //*****************************************************************************
 172          //      Functions for TW88xx internal OSD
 173          //*****************************************************************************
 174          #ifdef SUPPORT_OSDPOSITIONMOVE
 175          
 176          void SetOSDWindowX_TW88(BYTE winno, BYTE x)
 177          {
 178   1              WORD tmp;
 179   1              BYTE dat;
 180   1      
 181   1              if( winno<1 || winno>8 ) return;
 182   1              SetOSDWindowNum(winno);
 183   1      
 184   1              tmp = x << 3;
 185   1      
 186   1              dat = ReadTW88(TW88_WINSTART_HI) & 0xf0;
 187   1              dat = dat | (tmp>>8);
 188   1      
 189   1              WriteTW88(TW88_WINSTART_HI, dat);
 190   1              WriteTW88(TW88_WINXSTART, tmp);
 191   1      }
 192          #endif
 193          void SetOSDWindowY_TW88(BYTE winno, BYTE y)
 194          {
 195   1              WORD tmp;
 196   1              BYTE dat;
 197   1      
 198   1              if( winno<1 || winno>8 ) return;
 199   1              SetOSDWindowNum(winno);
 200   1      
 201   1              tmp = y << 2;
 202   1      
 203   1              dat = ReadTW88(TW88_WINSTART_HI) & 0x0f;
 204   1              dat = dat | ((tmp>>8)<<4);
 205   1      
 206   1              WriteTW88(TW88_WINSTART_HI, dat);
 207   1              WriteTW88(TW88_WINYSTART, tmp);
 208   1      }
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 35  

 209          
 210          //=============================================================================
 211          //                      ShowOSDWindow_TW88
 212          //=============================================================================
 213          void ShowOSDWindowAll(BYTE on)
 214          {
 215   1              BYTE rd;
 216   1      
 217   1              WaitEndofDisplayArea(); 
 218   1              rd = ReadTW88(TW88_OSDLOCKUPSEL);
 219   1      
 220   1              if( on )
 221   1                      WriteTW88(TW88_OSDLOCKUPSEL, rd&0xef);  // 
 222   1              else
 223   1                      WriteTW88(TW88_OSDLOCKUPSEL, rd|0x10);  // OSD All Off (TW8806B)
 224   1      
 225   1      }
 226          void ShowOSDWindow_TW88(BYTE winno, BYTE onoff)
 227          {
 228   1              BYTE rd;
 229   1      
 230   1              if( winno<1 || winno>8 ) return;
 231   1              SetOSDWindowNum(winno);
 232   1      
 233   1              rd = ReadTW88(TW88_WINATTR);
 234   1              if( onoff ) rd |= 0x01;
 235   1              else            rd &= 0xfe;
 236   1      
 237   1              WaitEndofDisplayArea(); 
 238   1              WriteTW88(TW88_WINATTR, rd);
 239   1      }
 240          
 241          #ifdef SUPPORT_OSDPOSITIONMOVE
 242          WORD GetOSDWindowX(BYTE winno)
 243          {
 244   1              WORD x;
 245   1      
 246   1              if( winno<1 || winno>8 ) return 0;
 247   1              SetOSDWindowNum(winno);
 248   1      
 249   1              x = (ReadTW88(TW88_WINSTART_HI) & 0x0f) << 8;
 250   1              x = x  | ReadTW88(TW88_WINXSTART);
 251   1      
 252   1              return (BYTE)(x >> 3);
 253   1      }
 254          #endif
 255          
 256          WORD GetOSDWindowY(BYTE winno)
 257          {
 258   1              WORD y;
 259   1      
 260   1              if( winno<1 || winno>8 ) return 0;
 261   1              SetOSDWindowNum(winno);
 262   1      
 263   1              y = (ReadTW88(TW88_WINSTART_HI) & 0xf0) << 4;
 264   1              y = y  | ReadTW88(TW88_WINYSTART);
 265   1      
 266   1              return (BYTE)(y >> 2);
 267   1      }
 268          
 269          #include        "osdTW88.c"
   1      =1  //********************************************************************
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 36  

   2      =1  //
   3      =1  //      Functions for OSD Menu.: MYSON
   4      =1  //
   5      =1  //********************************************************************
   6      =1  /*void ChangeFont(BYTE type)
   7      =1  {
   8      =1          BYTE dt;
   9      =1  
  10      =1          dt = ReadTW88(TW88_ENABLERAM);
  11      =1          if( type==FONT_ROM )    dt &= 0x7f;
  12      =1          else                                    dt |= 0x80;
  13      =1          WriteTW88(TW88_ENABLERAM, dt);
  14      =1  }
  15      =1  
  16      =1  void WriteCharToOSDRAMWithAutoInc(BYTE addr, BYTE ch, BYTE attr)
  17      =1  {
  18      =1          addr = addr;
  19      =1          WriteTW88(TW88_OSDRAMDATALO, attr);     // @@ Alert @@ For TW8801 : do not change the order
  20      =1          WriteTW88(TW88_OSDRAMDATAHI, ch);
  21      =1  }
  22      =1  
  23      =1  //-----------------------------------------------------------------------------
  24      =1  //      CopyCharToOSDWindow(BYTE winno, BYTE xoff, BYTE yoff, BYTE attr, BYTE ch)
  25      =1  //      - For FONT ROM Char.
  26      =1  //-----------------------------------------------------------------------------
  27      =1  void CopyCharToOSDWindow(BYTE winno, BYTE xoff, BYTE yoff, BYTE attr, BYTE ch)
  28      =1  {
  29      =1          BYTE w;
  30      =1          WORD addr;
  31      =1  
  32      =1          SetOSDWindowNum(winno);
  33      =1  
  34      =1  //      addr = ReadTW88(TW88_WINSADDR);
  35      =1          addr = ReadTW88(TW88_WINSADDRLO);
  36      =1          addr = addr + ((ReadTW88(TW88_WINSADDRHI) & 0x01)<<8);
  37      =1          w = ReadTW88(TW88_WINWIDTH);
  38      =1  
  39      =1          addr = addr + w*yoff + xoff;
  40      =1  
  41      =1          EnableOSDRAMAndChangeFont( FONT_ROM );
  42      =1          WriteCharToOSDRAM(  addr, ch, attr );
  43      =1  }
  44      =1  
  45      =1  #if defined( SUPPORT_PC ) || defined( SUPPORT_DTV )
  46      =1  BYTE CreateOSDWindowBorder(BYTE winno, BYTE w, BYTE h)
  47      =1  {
  48      =1          if( winno<1 || winno>8 ) return FALSE;
  49      =1          if ( w>0x7f || h>0x7f ) return FALSE;
  50      =1  
  51      =1          SetOSDWindowNum(winno);
  52      =1          WriteTW88(TW88_WINBRDWIDTH, w);
  53      =1          WriteTW88(TW88_WINBRDHEIGHT, h);
  54      =1          return TRUE;
  55      =1  }
  56      =1  
  57      =1  BYTE CreateOSDWindowOutline(BYTE winno, BYTE w, BYTE color)
  58      =1  {
  59      =1          BYTE rd;
  60      =1  
  61      =1          if( winno<1 || winno>8 ) return FALSE;
  62      =1          if ( w > 0x0f ) return FALSE;
  63      =1  
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 37  

  64      =1          SetOSDWindowNum(winno);
  65      =1  
  66      =1          if( w==0 ) rd = 0;
  67      =1          else       rd = 0x80 | color | w ;
  68      =1  
  69      =1          WriteTW88(TW88_WINBRDATTR , rd);
  70      =1          return TRUE;
  71      =1  
  72      =1  }
  73      =1  #endif // SUPPORT_PC || SUPPORT_DTV
  74      =1  */
 270          //*****************************************************************************
 271          //
 272          //      Internal Font test
 273          //
 274          //*****************************************************************************
 275          //-----------------------------------------------------------------------------
 276          //      CopyUDCharToOSDWindow(BYTE winno, BYTE xoff, BYTE yoff, BYTE attr, BYTE ch)
 277          //      - For FONT RAM Char.
 278          //-----------------------------------------------------------------------------
 279          code BYTE       FontTestWindow[] = { 0xa1, 10, 0xa2, 10, 0xa0, 0, 0xa3, 16, 0xa4, 16, 0xa5, 0x91, 
 280                                                                                  0xa6, 1, 0xa7, 1, 0xa8, 0x22, 0xa9, 0x10, 0xaa, 00, 0xab, 0x62 };
 281          
 282          #ifdef Hs_debug 
              void DisplayROMFont( BYTE scode )
              {
              BYTE    i;
              
                      WriteTW88( 0x94, 0x02 );                // clear OSD RAM clear and ROM font select
                      WriteTW88( 0x9e, 0 );                   // window #0
                      for ( i=0; i<(sizeof(FontTestWindow)/2); i++ )
                              WriteTW88(FontTestWindow[i*2], FontTestWindow[i*2+1]);
                      if ( scode == 0 ) {
                              WriteTW88( 0x94, 0x00 );                //0000 1100 ROM Font select with same attribute
                              for ( i=0; i<0xfe; i++ ) {
                                      WriteTW88( 0x96, i );
                                      WriteTW88( 0x97, i );
                                      WriteTW88( 0x98, 0x97 );
                              }
                      }
                      else {
                        WriteTW88( 0x94, 0x0C );              //0000 1100 ROM Font select with same attribute
                        Puts("\r\nIf you'd like to exit, press any Key....");
                        while ( !RS_ready() ){
                          WriteTW88( 0x94, 0x0C );            //0000 1100 ROM Font select with same attribute
                              WriteTW88( 0x96, 0 );                   // set start position of RAM
                              WriteTW88( 0x98, 0x47 );                // different color with upper
                              i = 0;
                              do {
                                      WriteTW88( 0x97, i++ );
                                      WriteTW88( 0x97, i++ );
                                      WriteTW88( 0x97, i++ );
                                      WriteTW88( 0x97, i++ );
                                      WriteTW88( 0x97, i++ );
                                      WriteTW88( 0x97, i++ );
                                      WriteTW88( 0x97, i++ );
                                      WriteTW88( 0x97, i++ );
                              } while ( i != 0 );
                        }
                      }
                      WriteTW88( 0x9f, 0x17 );                        // enable Window #2
                      WriteTW88( 0x9c, 0x0f);                 // turn ON
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 38  

              }
              
              
              void DisplayRAMFont(BYTE scode)
              {
              BYTE    i, j;
              WORD    takenTime;
              
                      WriteTW88( 0x94, 0x02 );                // clear OSD RAM clear
                      WriteTW88( 0x9e, 1 );                   // window #1
                      for ( i=0; i<(sizeof(FontTestWindow)/2); i++ )
                              WriteTW88(FontTestWindow[i*2], FontTestWindow[i*2+1]);
                      if ( scode == 0 ) {
                              WriteTW88( 0x94, 0x80 );                //0000 1101 RAM Font select with same attribute
                              for ( i=0; i<0xfe; i++ ) {
                                      WriteTW88( 0x96, i );
                                      WriteTW88( 0x97, i );
                                      WriteTW88( 0x98, 0x97 );
                              }
                      }
                      else if ( scode == 1 ) {
                        Puts("\r\nIf you'd like to exit, press any Key....");
                        j = 0;
                        while ( !RS_ready() ){
                              WriteTW88( 0x94, 0x8C );                //0000 1101 RAM Font select with same attribute
                              WriteTW88( 0x96, 0 );                   // set start position of RAM
                              WriteTW88( 0x98, 0x47 );                // different color with upper
                              i = 0;
                              do {
                                      WriteTW88( 0x97, i++ );
                                      WriteTW88( 0x97, i++ );
                                      WriteTW88( 0x97, i++ );
                                      WriteTW88( 0x97, i++ );
                                      WriteTW88( 0x97, i++ );
                                      WriteTW88( 0x97, i++ );
                                      WriteTW88( 0x97, i++ );
                                      WriteTW88( 0x97, i++ );
                              } while ( i != 0 );
                        }
                      }
                      else {
                              stopWatch = 0;
                              DownloadUDFont();
                              takenTime = stopWatch;
                              Printf("\r\nDownload User Font takes : %d [x10ms]", takenTime);
                      }
                      WriteTW88( 0x9f, 0x17 );                        // enable Window #2
                      WriteTW88( 0x9c, 0x0f);                 // turn ON
              }
              #endif
 371          
 372          #ifdef CHIP_MANUAL_TEST
              void TestRAMFont(void)
              {
              int             i, j;
              
                      WriteTW88(TW88_MULTISTART, 0xff); // Set Color Font Start Address. 
                      WriteTW88( 0x94, 0x02 );                // clear OSD RAM clear
                      WriteTW88( 0x9e, 1 );                   // window #1
                      for ( i=0; i<(sizeof(FontTestWindow)/2); i++ )
                              WriteTW88(FontTestWindow[i*2], FontTestWindow[i*2+1]);
              
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 39  

                      WriteTW88( 0x94, 0x80 );                //0000 1101 RAM Font select with same attribute
                      for ( i=0; i<0xfe; i++ ) {
                              WriteTW88( 0x96, i );
                              WriteTW88( 0x97, i );
                              WriteTW88( 0x98, 0x97 );
                      }
                      WriteTW88(TW88_ENABLERAM, ReadTW88(TW88_ENABLERAM) | 0x01);             // Font RAM access mode ON
                      for(i=0; i< 256 ; i++) {                // Techwell case 48 chars
                              WriteTW88(TW88_FONTRAMADDR, i);
                              for ( j = 0; j<27; j++ ) {
                                      WriteTW88(TW88_FONTRAMDATA, 0x55);
                              }
                      }
                      DelaynCheck();
                      for(i=0; i< 256 ; i++) {                // Techwell case 48 chars
                              WriteTW88(TW88_FONTRAMADDR, i);
                              for ( j = 0; j<27; j++ ) {
                                      WriteTW88(TW88_FONTRAMDATA, 0xAA);
                              }
                      }
                      WriteTW88(TW88_ENABLERAM, (ReadTW88(TW88_ENABLERAM) & 0xfe));           // OSD RAM access mode OFF
              //      WriteTW88( 0x9f, 0x17 );                        // enable Window #2
              //      WriteTW88( 0x9c, 0x0f);                 // turn ON
              }
              #endif
 408          
 409          // below is for LPL
 410          /*
 411          code BYTE       GridWindow[] = { 0xa5, 0, 0xa6, 0, 0xa7, 0, 0xa8, 0, 0xa9, 0x0, 0xab, 0x62 };
 412          code BYTE       Grid0[] = { 0x0d, 0x0e, 0x0f, 
 413                                                          0x10, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 
 414                                                          0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d  };      // bottom 22
 415          code BYTE       Grid1[] = { 0x05, 0x06, 0x07, 0x0c, 0x0d, 0x0e,
 416                                                          0x13, 0x14, 0x1a, 0x1b,
 417                                                          0x21, 0x22, 0x29, 
 418                                                          0x30, 0x31, 0x38, 0x39, 0x3a,
 419                                                          0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47 };       // left 26
 420          code BYTE       Grid2[] = { 0x00, 0x01, 0x0b, 0x0c, 0x0d,
 421                                                          0x16, 0x17, 0x18,
 422                                                          0x21, 0x22, 0x23, 0x2b, 0x2c  };        // right
 423          void DisplayGrid( void )
 424          {
 425          BYTE    i, j;
 426          
 427                  DownloadGridFont();
 428                  WriteTW88( 0x94, 0x02 );                // clear OSD RAM clear
 429          
 430                  WriteTW88( 0x94, 0x80 );                //0000 1101 RAM Font select with same attribute
 431                  for ( i=0; i < (72+51+45); i++ ) {              // clear with font '0'
 432                          WriteTW88( 0x96, i );
 433                          WriteTW88( 0x97, 0 );
 434                          WriteTW88( 0x98, 0x07 );
 435                  }
 436                  i = 1;
 437                  for ( j=0; j< sizeof(Grid0); j++ ) {            // display data for bottom
 438                          WriteTW88( 0x96, Grid0[j] );    // set position
 439                          WriteTW88( 0x97, i++ );
 440                          WriteTW88( 0x98, 0x07 );
 441                  }
 442                  for ( j=0; j< sizeof(Grid1); j++ ) {            // display data for left
 443                          WriteTW88( 0x96, Grid1[j]+51 ); // set position
 444                          WriteTW88( 0x97, i++ );
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 40  

 445                          WriteTW88( 0x98, 0x07 );
 446                  }
 447                  for ( j=0; j< sizeof(Grid2); j++ ) {            // display data for right
 448                          WriteTW88( 0x96, Grid2[j]+51+72 );      // set position
 449                          WriteTW88( 0x97, i++ );
 450                          WriteTW88( 0x98, 0x07 );
 451                  }
 452          
 453                  WriteTW88( 0x9e, 0 );                   // window #0 for bottom
 454                  for ( i=0; i<(sizeof(GridWindow)/2); i++ )
 455                          WriteTW88(GridWindow[i*2], GridWindow[i*2+1]);
 456                  WriteTW88( 0xa0, 0 );
 457                  WriteTW88( 0xa1, 115);
 458                  WriteTW88( 0xa2, 163);
 459                  WriteTW88( 0xa3, 17);
 460                  WriteTW88( 0xa4, 3);
 461                  WriteTW88( 0xaa, 0);
 462                  WriteTW88(0x9e, 0x70 );
 463                  WriteTW88(0xac, 8 );
 464                  WriteTW88(0x9e, 0x00 );
 465                  WriteTW88(0xac, 0 );
 466          
 467                  WriteTW88( 0x9f, 1 );                   // enable Window #0
 468          
 469                  WriteTW88( 0x9e, 1 );           
 470                  for ( i=0; i<(sizeof(GridWindow)/2); i++ )
 471                          WriteTW88(GridWindow[i*2], GridWindow[i*2+1]);
 472                  WriteTW88( 0xa0, 0 );
 473                  WriteTW88( 0xa1, 19);
 474                  WriteTW88( 0xa2, 56);
 475                  WriteTW88( 0xa3, 8);
 476                  WriteTW88( 0xa4, 9);
 477                  WriteTW88( 0xaa, 51 );
 478                  WriteTW88(0x9e, 0x71 );
 479                  WriteTW88(0xac, 8 );
 480                  WriteTW88(0x9e, 0x01 );
 481                  WriteTW88(0xac, 0 );
 482                  WriteTW88( 0x9f, 1 );                   // enable Window #1
 483          
 484                  WriteTW88( 0x9e, 2 );           
 485                  for ( i=0; i<(sizeof(GridWindow)/2); i++ )
 486                          WriteTW88(GridWindow[i*2], GridWindow[i*2+1]);
 487                  WriteTW88( 0xa0, 0 );
 488                  WriteTW88( 0xa1, 204);
 489                  WriteTW88( 0xa2, 64);
 490                  WriteTW88( 0xa3, 9);
 491                  WriteTW88( 0xa4, 5);
 492                  WriteTW88( 0xaa, 51+72 );
 493                  WriteTW88(0x9e, 0x72 );
 494                  WriteTW88(0xac, 8 );
 495                  WriteTW88(0x9e, 0x02 );
 496                  WriteTW88(0xac, 0 );
 497          
 498                  WriteTW88( 0x9f, 1 );                   // enable Window #2
 499          
 500                  WriteTW88( 0x9e, 3 );           
 501                  for ( i=0; i<(sizeof(GridWindow)/2); i++ )
 502                          WriteTW88(GridWindow[i*2], GridWindow[i*2+1]);
 503                  WriteTW88( 0xa0, 0 );
 504                  WriteTW88( 0xa1, 1);
 505                  WriteTW88( 0xa2, 1);
 506                  WriteTW88( 0xa3, 0x1a);
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 41  

 507                  WriteTW88( 0xa4, 0x0d);
 508                  WriteTW88( 0xa5, 0xa1);
 509                  WriteTW88( 0xa6, 3);
 510                  WriteTW88( 0xa7, 2);
 511          
 512                  WriteTW88( 0xaa, 51+72 );
 513                  WriteTW88(0x9e, 0x03 );
 514                  WriteTW88(0xac, 8 );
 515                  WriteTW88(0x9e, 0x33 );
 516                  WriteTW88(0xac, 8 );
 517                  WriteTW88(0x9e, 0x73 );
 518                  WriteTW88(0xac, 8 );
 519          
 520                  WriteTW88( 0x9f, 1 );                   // enable Window #3
 521                  WriteTW88( 0x9c, 0x0f);                 // turn ON
 522          }
 523          */
 524          
 525          // below is for GenTex
 526          /*
 527          code BYTE       GridWindow[] = { 0xa5, 0, 0xa6, 0, 0xa7, 0, 0xa8, 0, 0xa9, 0x0, 0xab, 0x62 };
 528          code BYTE       Grid0[] = { 0x06, 0x07, 0x0d, 0x0e, 0x0f,
 529                                                          0x14, 0x15, 0x16, 0x1b, 0x1c,
 530                                                          0x22, 0x23, 0x29, 0x2a, 0x2b, 
 531                                                          0x30, 0x31, 0x32, 0x33, 0x38, 0x39, 0x3a, 0x3b };       // left 23
 532          code BYTE       Grid1[] = { 0x00, 0x01, 0x08, 0x09, 0x0a,
 533                                                          0x11, 0x12, 0x13, 0x1b, 0x1c,
 534                                                          0x24, 0x25, 0x2c, 0x2d, 0x2e,
 535                                                  0x34, 0x35, 0x36, 0x37, 0x3c, 0x3d, 0x3e, 0x3f }; // right 23
 536          code unsigned char GridLUT[8] = { 0x00,0x1c,0x1c,0xfc,0xE0,0xE3,0xFC,0xFF };
 537          void DisplayGrid( void )
 538          {
 539          BYTE    i, j;
 540          
 541                  DownloadGridFont();
 542                  WriteTW88( 0x94, 0x02 );                // clear OSD RAM clear
 543                  for ( i=0; i<8; i++ ) {
 544                          WriteTW88( 0x9c, i );   //select LUT
 545                          WriteTW88( 0x9d, GridLUT[i] );
 546                  }
 547          
 548                  WriteTW88( 0x94, 0x80 );                //0000 1101 RAM Font select with same attribute
 549                  for ( i=0; i < (72+51+45); i++ ) {              // clear with font '0'
 550                          WriteTW88( 0x96, i );
 551                          WriteTW88( 0x97, 0 );
 552                          WriteTW88( 0x98, 0x70 );
 553                  }
 554                  i = 1;
 555                  for ( j=0; j< sizeof(Grid0); j++ ) {            // display data for bottom
 556                          WriteTW88( 0x96, Grid0[j] );    // set position
 557                          WriteTW88( 0x97, i++ );
 558                          WriteTW88( 0x98, (0x71 + Grid0[j]/16) );
 559                  }
 560                  for ( j=0; j< sizeof(Grid1); j++ ) {            // display data for left
 561                          WriteTW88( 0x96, Grid1[j]+64 ); // set position
 562                          WriteTW88( 0x97, i++ );
 563                          WriteTW88( 0x98, (0x71 + Grid1[j]/16) );
 564                  }
 565          
 566                  WriteTW88( 0x9e, 0 );                   // window #0 for Left
 567                  for ( i=0; i<(sizeof(GridWindow)/2); i++ )
 568                          WriteTW88(GridWindow[i*2], GridWindow[i*2+1]);
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 42  

 569                  WriteTW88( 0xa0, 0 );
 570                  WriteTW88( 0xa1, 19);
 571                  WriteTW88( 0xa2, 56);
 572                  WriteTW88( 0xa3, 8);
 573                  WriteTW88( 0xa4, 8);
 574                  WriteTW88(0x9e, 0x70 );
 575                  WriteTW88(0xac, 8 );
 576                  WriteTW88(0x9e, 0x10 );
 577                  WriteTW88(0xac, 4 );
 578                  WriteTW88(0x9e, 0x20 );
 579                  WriteTW88(0xac, 3 );
 580                  WriteTW88(0x9e, 0x30 );
 581                  WriteTW88(0xac, 2 );
 582                  WriteTW88(0x9e, 0x40 );
 583                  WriteTW88(0xac, 1 );
 584          
 585                  WriteTW88( 0x9f, 1 );                   // enable Window #0
 586          
 587                  WriteTW88( 0x9e, 1 );           
 588                  for ( i=0; i<(sizeof(GridWindow)/2); i++ )
 589                          WriteTW88(GridWindow[i*2], GridWindow[i*2+1]);
 590                  WriteTW88( 0xa0, 0 );
 591                  WriteTW88( 0xa1, 204);
 592                  WriteTW88( 0xa2, 56);
 593                  WriteTW88( 0xa3, 8);
 594                  WriteTW88( 0xa4, 8);
 595                  WriteTW88( 0xaa, 64 );
 596                  WriteTW88(0x9e, 0x71 );
 597                  WriteTW88(0xac, 8 );
 598                  WriteTW88(0x9e, 0x11 );
 599                  WriteTW88(0xac, 4 );
 600                  WriteTW88(0x9e, 0x21 );
 601                  WriteTW88(0xac, 3 );
 602                  WriteTW88(0x9e, 0x31 );
 603                  WriteTW88(0xac, 2 );
 604                  WriteTW88(0x9e, 0x41 );
 605                  WriteTW88(0xac, 1 );
 606                  WriteTW88( 0x9f, 1 );                   // enable Window #1
 607          
 608          //      WriteTW88( 0x9e, 3 );           
 609          //      for ( i=0; i<(sizeof(GridWindow)/2); i++ )
 610          //              WriteTW88(GridWindow[i*2], GridWindow[i*2+1]);
 611          //      WriteTW88( 0xa0, 0 );
 612          //      WriteTW88( 0xa1, 1);
 613          //      WriteTW88( 0xa2, 1);
 614          //      WriteTW88( 0xa3, 0x1a);
 615          //      WriteTW88( 0xa4, 0x0d);
 616          //      WriteTW88( 0xa5, 0xa1);
 617          //      WriteTW88( 0xa6, 3);
 618          //      WriteTW88( 0xa7, 2);
 619          
 620          //      WriteTW88( 0xaa, 51+72 );
 621          //      WriteTW88(0x9e, 0x03 );
 622          //      WriteTW88(0xac, 8 );
 623          //      WriteTW88(0x9e, 0x33 );
 624          //      WriteTW88(0xac, 8 );
 625          //      WriteTW88(0x9e, 0x73 );
 626          //      WriteTW88(0xac, 8 );
 627          
 628          //      WriteTW88( 0x9f, 1 );                   // enable Window #3
 629          
 630                  WriteTW88( 0x9c, 0x0f);                 // turn ON
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 43  

 631          }
 632          */
 633          // below is for Techwell Tool
 634          /*
 635          code BYTE       GridWindow[] = { 0xa5, 0, 0xa6, 0, 0xa7, 0, 0xa8, 0, 0xa9, 0x0, 0xab, 0x62 };
 636          
 637          code unsigned char GridLUT[8] = { 0x00,0x1c,0x1c,0xfc,0xE0,0xE3,0xFC,0xFF };
 638          void DisplayGrid( void )
 639          {
 640          BYTE    i, j, k;
 641          
 642                  DownloadGridFont();
 643                  WriteTW88( 0x94, 0x02 );                // clear OSD RAM clear
 644                  for ( i=0; i<8; i++ ) {
 645                          WriteTW88( 0x9c, i );   //select LUT
 646                          WriteTW88( 0x9d, GridLUT[i] );
 647                  }
 648          
 649                  WriteTW88( 0x94, 0x80 );                //0000 1101 RAM Font select with same attribute
 650                  for ( i=0; i < NofChars; i++ ) {                // clear with font '0'
 651                          WriteTW88( 0x96, i );
 652                          WriteTW88( 0x97, 0 );
 653                          WriteTW88( 0x98, 0x70 );
 654                  }
 655                  i = 1;
 656                  k = gridTWPos0[2]*gridTWPos0[3];
 657                  for ( j=0; j< sizeof(gridTWChar); j++ ) {               // display data for all
 658                          WriteTW88( 0x96, gridTWChar[j] );       // set position
 659                          WriteTW88( 0x97, i++ );
 660                          if ( gridTWChar[j] < k ) 
 661                                  WriteTW88( 0x98, (0x71 + gridTWChar[j]/(gridTWPos0[2]*2)) );                    // can control how many lines for sam co
             -lor
 662                          else
 663                                  WriteTW88( 0x98, (0x71 + (gridTWChar[j]-k)/(gridTWPos1[2]*2)) );                // can control how many lines for sam
             - color
 664                  }
 665          
 666          
 667                  
 668                  WriteTW88( 0x9e, 0 );                   // window #0 for Left
 669                  for ( i=0; i<(sizeof(GridWindow)/2); i++ )
 670                          WriteTW88(GridWindow[i*2], GridWindow[i*2+1]);
 671                  WriteTW88( 0xa0, 0 );
 672                  WriteTW88( 0xa1, gridTWPos0[0]);
 673                  WriteTW88( 0xa2, gridTWPos0[1]);
 674                  WriteTW88( 0xa3, gridTWPos0[2]);
 675                  WriteTW88( 0xa4, gridTWPos0[3]);
 676                  WriteTW88(0x9e, 0x70 );
 677                  WriteTW88(0xac, 8 );
 678                  WriteTW88(0x9e, 0x10 );
 679                  WriteTW88(0xac, 4 );
 680                  WriteTW88(0x9e, 0x20 );
 681                  WriteTW88(0xac, 3 );
 682                  WriteTW88(0x9e, 0x30 );
 683                  WriteTW88(0xac, 2 );
 684                  WriteTW88(0x9e, 0x40 );
 685                  WriteTW88(0xac, 1 );
 686          
 687                  WriteTW88( 0x9f, 1 );                   // enable Window #0
 688          
 689                  WriteTW88( 0x9e, 1 );           
 690                  for ( i=0; i<(sizeof(GridWindow)/2); i++ )
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 44  

 691                          WriteTW88(GridWindow[i*2], GridWindow[i*2+1]);
 692                  WriteTW88( 0xa0, 0 );
 693                  WriteTW88( 0xa1, gridTWPos1[0]);
 694                  WriteTW88( 0xa2, gridTWPos1[1]);
 695                  WriteTW88( 0xa3, gridTWPos1[2]);
 696                  WriteTW88( 0xa4, gridTWPos1[3]);
 697                  WriteTW88( 0xaa, 64 );
 698                  WriteTW88(0x9e, 0x71 );
 699                  WriteTW88(0xac, 8 );
 700                  WriteTW88(0x9e, 0x11 );
 701                  WriteTW88(0xac, 4 );
 702                  WriteTW88(0x9e, 0x21 );
 703                  WriteTW88(0xac, 3 );
 704                  WriteTW88(0x9e, 0x31 );
 705                  WriteTW88(0xac, 2 );
 706                  WriteTW88(0x9e, 0x41 );
 707                  WriteTW88(0xac, 1 );
 708                  WriteTW88( 0x9f, 1 );                   // enable Window #1
 709          
 710          //      WriteTW88( 0x9e, 3 );           
 711          //      for ( i=0; i<(sizeof(GridWindow)/2); i++ )
 712          //              WriteTW88(GridWindow[i*2], GridWindow[i*2+1]);
 713          //      WriteTW88( 0xa0, 0 );
 714          //      WriteTW88( 0xa1, 1);
 715          //      WriteTW88( 0xa2, 1);
 716          //      WriteTW88( 0xa3, 0x1a);
 717          //      WriteTW88( 0xa4, 0x0d);
 718          //      WriteTW88( 0xa5, 0xa1);
 719          //      WriteTW88( 0xa6, 3);
 720          //      WriteTW88( 0xa7, 2);
 721          
 722          //      WriteTW88( 0xaa, 51+72 );
 723          //      WriteTW88(0x9e, 0x03 );
 724          //      WriteTW88(0xac, 8 );
 725          //      WriteTW88(0x9e, 0x33 );
 726          //      WriteTW88(0xac, 8 );
 727          //      WriteTW88(0x9e, 0x73 );
 728          //      WriteTW88(0xac, 8 );
 729          
 730          //      WriteTW88( 0x9f, 1 );                   // enable Window #3
 731          
 732                  WriteTW88( 0x9c, 0x0f);                 // turn ON
 733          }
 734          */
 735          #if 0
              void DisplayGrid( void )
              {
              BYTE    i, j, k;
              WORD    offset;
              BYTE    *ptrFont, *ptrAttr;
              WORD    cPos;
              
                      DownloadGridFont();
                      WriteTW88( 0x94, 0x02 );                // clear OSD RAM clear
                      for ( i=0; i<8; i++ ) {
                              WriteTW88( 0x9c, i );   //select LUT
                              WriteTW88( 0x9d, LINE_45B_Info.LUT[i] );
                      }
              
                      WriteTW88( 0x94, 0x80 );
                      //WriteTW88( 0x98, 0x74 );              // attribute B/C=7, F/C=1 with blink
                      j = LINE_45B_Info.NChars;
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 45  

                      ptrFont = LINE_45B_Info.DisplayData;
                      ptrAttr = LINE_45BAttr;
                      if ( LINE_45B_Info.NChars > 0xff ) {
                              i = 0;
                              do {
                                      WriteTW88( 0x96, i );
                                      WriteTW88( 0x97, *ptrFont++ );  // set position
                                      WriteTW88( 0x98, *ptrAttr++ );
                                      i++;
                              } while ( i != 0);
                              WriteTW88( 0x95, ReadTW88(0x95)|1 );    //set start address
                      }
                      for ( i=0; i < j; i++ ) {               // clear with font '0'
                              WriteTW88( 0x96, i );
                              WriteTW88( 0x97,*ptrFont++ );   // set position
                              WriteTW88( 0x98, *ptrAttr++ );
                      }
              /*      i = 1;
                      ptrFont = LINE_45B_Info.CharPos;
                      m = LINE_45B_Info.NFonts-1;
                      for ( j=0; j<m; j++ ) {         // display data for all
                              k = *ptrFont++;
                              WriteTW88( 0x96, k );   // set position
                              WriteTW88( 0x97, i++ );
                              WriteTW88( 0x98, 0x70|LINE_45B_Info.WColors0[k/LINE_45B_Info.WPos0[2]] );
                      }
              */
                      cPos = 0;
                      WriteTW88( 0x9e, 0 );                   // window #0
                      WriteTW88( 0xa5, 0 ); WriteTW88( 0xa6, 0 ); WriteTW88( 0xa7, 0 ); 
                      WriteTW88( 0xa8, 0 ); WriteTW88( 0xa9, 0 ); WriteTW88( 0xab, 62 );
                      offset = LINE_45B_Info.WPos0[0]; offset >>= 8;
                      k = offset;
                      offset = LINE_45B_Info.WPos0[1];
                      offset >>= 8;
                      offset <<= 4;
                      k += offset;
                      WriteTW88( 0xa0, k );
                      WriteTW88( 0xa1, LINE_45B_Info.WPos0[0] );
                      WriteTW88( 0xa2, LINE_45B_Info.WPos0[1] );
                      WriteTW88( 0xa3, LINE_45B_Info.WPos0[2] );
                      WriteTW88( 0xa4, LINE_45B_Info.WPos0[3] );
                      cPos = LINE_45B_Info.WPos0[2];
                      cPos *= LINE_45B_Info.WPos0[3];
                      WriteTW88( 0xaa, 0 );
                      WriteTW88( 0x9e, 0x00 );
                      WriteTW88( 0xac, 8 );
                      WriteTW88( 0x9e, 0x70 );
                      WriteTW88( 0xac, 0 );
                      WriteTW88( 0x9f, 1 );                   // enable Window #0
              
                      WriteTW88( 0x9e, 1 );                   // window #1
                      WriteTW88( 0xa5, 0 ); WriteTW88( 0xa6, 0 ); WriteTW88( 0xa7, 0 ); 
                      WriteTW88( 0xa8, 0 ); WriteTW88( 0xa9, 0 ); WriteTW88( 0xab, 62 );
                      offset = LINE_45B_Info.WPos1[0]; offset >>= 8;
                      k = offset;
                      offset = LINE_45B_Info.WPos1[1];
                      offset >>= 8;
                      offset <<= 4;
                      k += offset;
                      WriteTW88( 0xa0, k );
                      WriteTW88( 0xa1, LINE_45B_Info.WPos1[0] );
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 46  

                      WriteTW88( 0xa2, LINE_45B_Info.WPos1[1] );
                      WriteTW88( 0xa3, LINE_45B_Info.WPos1[2] );
                      WriteTW88( 0xa4, LINE_45B_Info.WPos1[3] );
              
                      if ( cPos > 0xff ) {
                              WriteTW88( 0xa9, ReadTW88(0xa9) | 1 );
                      }
                      WriteTW88( 0xaa, cPos );
                      offset = LINE_45B_Info.WPos1[2];
                      offset *= LINE_45B_Info.WPos1[3];
                      cPos += offset;
                      WriteTW88( 0x9e, 0x01 );
                      WriteTW88( 0xac, 8 );
                      WriteTW88( 0x9e, 0x11 );
                      WriteTW88( 0xac, 0 );
                      WriteTW88( 0x9f, 1 );                   // enable Window #1
              
                      WriteTW88( 0x9e, 2 );                   // window #2
                      WriteTW88( 0xa5, 0 ); WriteTW88( 0xa6, 0 ); WriteTW88( 0xa7, 0 ); 
                      WriteTW88( 0xa8, 0 ); WriteTW88( 0xa9, 0 ); WriteTW88( 0xab, 62 );
                      offset = LINE_45B_Info.WPos2[0]; offset >>= 8;
                      k = offset;
                      offset = LINE_45B_Info.WPos2[1];
                      offset >>= 8;
                      offset <<= 4;
                      k += offset;
                      WriteTW88( 0xa0, k );
                      WriteTW88( 0xa1, LINE_45B_Info.WPos2[0] );
                      WriteTW88( 0xa2, LINE_45B_Info.WPos2[1] );
                      WriteTW88( 0xa3, LINE_45B_Info.WPos2[2] );
                      WriteTW88( 0xa4, LINE_45B_Info.WPos2[3] );
              
                      if ( cPos > 0xff ) {
                              WriteTW88( 0xa9, ReadTW88(0xa9) | 1 );
                      }
                      WriteTW88( 0xaa, cPos );
                      offset = LINE_45B_Info.WPos2[2];
                      offset *= LINE_45B_Info.WPos2[3];
                      cPos += offset;
                      WriteTW88( 0x9e, 0x02 );
                      WriteTW88( 0xac, 8 );
                      WriteTW88( 0x9e, 0x12 );
                      WriteTW88( 0xac, 0 );
                      WriteTW88( 0x9f, 1 );                   // enable Window #2
              
                      WriteTW88( 0x9e, 3 );                   // window #3
                      WriteTW88( 0xa5, 0 ); WriteTW88( 0xa6, 0 ); WriteTW88( 0xa7, 0 ); 
                      WriteTW88( 0xa8, 0 ); WriteTW88( 0xa9, 0 ); WriteTW88( 0xab, 62 );
                      offset = LINE_45B_Info.WPos3[0]; offset >>= 8;
                      k = offset;
                      offset = LINE_45B_Info.WPos3[1];
                      offset >>= 8;
                      offset <<= 4;
                      k += offset;
                      WriteTW88( 0xa0, k );
                      WriteTW88( 0xa1, LINE_45B_Info.WPos3[0] );
                      WriteTW88( 0xa2, LINE_45B_Info.WPos3[1] );
                      WriteTW88( 0xa3, LINE_45B_Info.WPos3[2] );
                      WriteTW88( 0xa4, LINE_45B_Info.WPos3[3] );
              
                      if ( cPos > 0xff ) {
                              WriteTW88( 0xa9, ReadTW88(0xa9) | 1 );
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 47  

                      }
                      WriteTW88( 0xaa, cPos );
                      WriteTW88( 0x9e, 0x03 );
                      WriteTW88( 0xac, 8 );
                      WriteTW88( 0x9e, 0x13 );
                      WriteTW88( 0xac, 0 );
                      WriteTW88( 0x9f, 1 );                   // enable Window #3
              
                      WriteTW88( 0x9c, 0x0f );                        // turn ON
                      WriteTW88( 0x95, ReadTW88(0x95)&0xfe ); //set start address
              
              }
              #endif
 890          
 891          
 892          //*****************************************************************************
 893          //
 894          //      Functions for only CC.
 895          //
 896          //*****************************************************************************
 897          //ljy052903: Only In CC 
 898          
 899          //*****************************************************************************
 900          
 901               // Move to CC by Harry
 902          
 903          //===============================================================================
 904          //  Used OSD Menu 
 905          //===============================================================================
 906          //------------------------------------------------------------
 907          void WriteStringToAddr(WORD addr, BYTE *str, BYTE cnt)
 908          {
 909   1              //if( I2CAutoIncFlagOn==0 )
 910   1              WriteTW88(TW88_ENABLERAM, 0x04); // OSD RAM Auto Access Enable, ROMFONT Start Enable
 911   1      
 912   1              WriteTW88(TW88_OSDRAMADDRLO, addr);
 913   1              WriteI2Cn( TW88I2CAddress, TW88_OSDRAMDATAHI, str, cnt );
 914   1      
 915   1      //      if( I2CAutoIncFlagOn==0 )
 916   1              WriteTW88(TW88_ENABLERAM, 0x00); // OSD RAM Auto Access Disable
 917   1      }
 918          #ifdef PAL_TV
              void DrawAttrString(WORD addr, BYTE *Str, BYTE cnt)
              {
              //      if( I2CAutoIncFlagOn==0 )
                      WriteTW88(TW88_ENABLERAM, 0x04); // OSD RAM Auto Access Enable
                      WriteTW88(TW88_OSDRAMADDRLO, addr);
                      WriteI2Cn( TW88I2CAddress, TW88_OSDRAMDATALO, Str, cnt );       // Attr
              
              //      if( I2CAutoIncFlagOn==0 )
                      WriteTW88(TW88_ENABLERAM, 0x00); // OSD RAM Auto Access Disable
              }
              #endif
 930          void DrawAttrCnt(WORD addr, BYTE color, BYTE cnt)
 931          {
 932   1              WriteTW88(TW88_ENABLERAM, 0x04);                // OSD RAM Auto Access Enable
 933   1              WriteTW88(TW88_OSDRAMADDRLO, addr);
 934   1              WriteI2CnD( TW88I2CAddress, TW88_OSDRAMDATALO, color, cnt );
 935   1      
 936   1              WriteTW88(TW88_ENABLERAM, 0x00);                // OSD RAM Auto Access Disable
 937   1      }
 938          
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 48  

 939          void ClearDataCnt(WORD addr, BYTE cnt)
 940          {
 941   1      //      if( I2CAutoIncFlagOn==0 )
 942   1              WriteTW88(TW88_ENABLERAM, 0x04);                // OSD RAM Auto Access Enable
 943   1              WriteTW88(TW88_OSDRAMADDRLO, addr);
 944   1              WriteI2CnD( TW88I2CAddress, TW88_OSDRAMDATAHI, ' ', cnt );
 945   1      
 946   1      //      if( I2CAutoIncFlagOn==0 )
 947   1              WriteTW88(TW88_ENABLERAM, 0x00);                // OSD RAM Auto Access Disable
 948   1      }
 949          //*****************************************************************************
 950          //
 951          //      Conversion Functions.
 952          //
 953          //*****************************************************************************
 954          BYTE utoa(WORD value, BYTE *str, BYTE radix)
 955          {
 956   1              BYTE cnt, *str1;
 957   1              WORD i, div;
 958   1      
 959   1              #ifdef DEBUG_OSD
                      dPrintf("\r\n++(utoa):0x%x__", value);
                      #endif
 962   1      
 963   1              str1 = str;
 964   1              cnt=0;
 965   1              if( radix==10) {
 966   2                      for(div = 10000; div>=10; div/=10) {
 967   3                              i = value/div;
 968   3                              if( i ) {
 969   4                                      *str++ = i+'0';
 970   4                                      cnt++;
 971   4                              }
 972   3                              else if( cnt )          // 100, 200, 20,,,,
 973   3                                      *str++ = '0';
 974   3      
 975   3                              value%=div;
 976   3                      }
 977   2                      *str++ = value+'0';
 978   2                      *str = 0;
 979   2              }
 980   1              else if( radix==16) {
 981   2                      for(div = 0x1000; div>=0x10; div/=0x10) {
 982   3                              i = value/div;
 983   3                              if( i ) {
 984   4                                      if( i>=0xa ) 
 985   4                                              *str++ = i-0xa+'A';
 986   4                                      else
 987   4                                              *str++ = i+'0';
 988   4                                      value%=div;
 989   4                              }
 990   3                      }
 991   2                      if( value>=0xa ) 
 992   2                              *str++ = value-0xa+'A';
 993   2                      else
 994   2                              *str++ = value+'0';
 995   2                      *str = 0;
 996   2              }
 997   1              return 1;
 998   1      }
 999          BYTE strlen( BYTE *str )
1000          {
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 49  

1001   1              BYTE i=0;
1002   1      
1003   1              while( *str++ ) i++;
1004   1              return i;
1005   1      }
1006          //=============================================================================
1007          //                      Init Menu Window Data initialize 
1008          //=============================================================================
1009          #include "OsdInitTable.c"
   1      =1  #include "config.h"
   1      =2  /*****************************************************************************/
   2      =2  /*                           System Configurations                           */
   3      =2  /*                                                      rev 0.10 include auto test                                               */
   4      =2  // 0.11 change DTV, PC input initial download data correct for Charge Pump
   5      =2  // 0.12 correct phase measurement routine '>>3'
   6      =2  // 0.13 enable function for SPI control... only EXT MCU case
   7      =2  // 0.14 corrected PC measurement......
   8      =2  // 0.0a test function only for CVBS, SVIDEO
   9      =2  // 0.15 corrected DTV scaler setting for panel resolutions
  10      =2  // 0.0b panel for AND 640x480 TICON panel
  11      =2  // 0.16 corrected COMPONENT scaler setting for panel resolutions        11/21/2007
  12      =2  // 0.0c automatic chip test
  13      =2  // 0.17 add monitor function, osd grid for writing grid
  14      =2  // 0.18 add component, dtv pc for analogpanel, 12/06/2007
  15      =2  // 0.19 correct pal input for CES, 12/20/2007
  16      =2  // 0.1a CCFL control, 12/28/2007
  17      =2  // 0.19 Multi Grid for Banking on Internal MCU  01/17/2008
  18      =2  // 0.20 CCFL contol for backlight brightness    01/21/2008
  19      =2  // 0.21 CCFL contol for backlight brightness    01/25/2008
  20      =2  // 0.22 phase setting 02/07/2008
  21      =2  // 0.221 display input correction 04/03/2008
  22      =2  // 0.23 PC, DTV mode, no signal display
  23      =2  // 0.24 PC Auto Color adjustment
  24      =2  // 0.25 revised PC Auto Clock adjustment - find divide number and phase
  25      =2  // 0.26 Digital RGB for TW8826
  26      =2  // 0.27 Correct LVDS control                                    08/22/2008
  27      =2  // 0.28 Add WSVGA resolution                                    10/23/2008
  28      =2  // 0.29 Add NEW GRID                                                    11/14/2008
  29      =2  // 0.30 Fix DTV input                                                   12/10/2008
  30      =2  // 0.31 Add 1080i23, 24, 25A, 25B                               01/20/2009
  31      =2  // 0.32 TCON setting FIX all mode                               01/22/2009
  32      =2  // 0.33 autodetect is auto on/off by dip sw1    02/02/2009
  33      =2  // 0.34 Fix autocolor function and clamp position 02/08/2009
  34      =2  /*****************************************************************************/
  35      =2  #ifndef __CONFIG_H__
           =2 #define __CONFIG_H__
           =2 
           =2 //#define INTERNAL_MCU -- defined by Project Compiler session
           =2 
           =2 
           =2 //-----------------------------------------------------------------------------
           =2 //              Firmware Version
           =2 //-----------------------------------------------------------------------------
           =2 #define FWVER                   0x140                   // Rev 0.14
           =2 //-----------------------------------------------------------------------------
           =2 //              Compiler
           =2 //-----------------------------------------------------------------------------
           =2 #define KEILC                                           // Keil C 5.0
           =2 //-----------------------------------------------------------------------------
           =2 //              MPU Clock
           =2 //-----------------------------------------------------------------------------
           =2 #ifndef INTERNAL_MCU
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 50  

           =2 //#define CLOCK_11M                                     // 11.0592MHz
           =2 #define CLOCK_22M                                       // 22.1184MHz
           =2 #else                                                           // INTERNAL_MCU
           =2 #define CLOCK_27M                                       // 27MHz
           =2 #define REG_START_ADDRESS       0xc000          // register start 0xc000, for page0, 0xc100-page1 
           =2 #endif
           =2 //-----------------------------------------------------------------------------
           =2 //              TW88 Version
           =2 //-----------------------------------------------------------------------------
           =2 #define TW8816
           =2 //-----------------------------------------------------------------------------
           =2 //              Options for Backlight control
           =2 //-----------------------------------------------------------------------------
           =2 //#define       BACKLIGHT_CCFL
           =2 //#define       BACKLIGHT_LED
           =2 #define BACKLIGHT_PWM
           =2 
           =2 //-----------------------------------------------------------------------------
           =2 //              Panel Resolution
           =2 //-----------------------------------------------------------------------------
           =2 // ---- Select Default Panel
           =2 //
           =2 //#define UXGA                                          // 1600 x 1200
           =2 //#define SXGA                                          // 1280 x 1024
           =2 //#define XGA  // 1024 x 768
           =2 #ifdef XGA
           =2         #define LVDS                                    
           =2         #define PWIDTH  1024
           =2         #define PHEIGHT 768
           =2 #endif
           =2 //#define SVGA                                          //  800 x 600
           =2 //#define VGA                                           //  640 x 480
           =2 #ifdef VGA
           =2         #define PWIDTH  640
           =2         #define PHEIGHT 480
           =2         //#define       HITACHI_640_B_160               //--> 640 x 160
           =2         #define AND_640_480
           =2 #endif
           =2 //#define WXGA                                          // 1280 x 768 (15:9) // 1366 x 768 (16:9)
           =2 #ifdef WXGA
           =2     //#define WX_SHARP_LQ106K1LA
           =2         #define PWIDTH  1280
           =2         #define PHEIGHT 768
           =2 #endif
           =2 //#define WSVGA                                         // 1024 x 600   *** only video mode
           =2 #ifdef WSVGA
           =2         #define PWIDTH  1024
           =2         #define PHEIGHT 600
           =2         #define UNIDEN_1024_600
           =2 #endif
           =2 #define WVGA                                            //  800 x 480
           =2 #ifdef WVGA
           =2         #define PWIDTH  800
           =2         #define PHEIGHT 600//480
           =2         // If WVGA, you have to select panel.
           =2         //#define AU_10INCH
           =2         //#define WVGA_TPO
           =2         //#define SAMSUNG_10INCH
           =2         //#define SAMSUNG_TICONLESS_10INCH
           =2         //#define SHARP_TICONLESS_7INCH
           =2         #define AU_TICONLESS_7INCH
           =2         //#define INNOLUX_AT080TN03
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 51  

           =2         //#define AU_TICONLESS_7INCH_CCFL
           =2         //#define CMO                   // CHIMEI panel
           =2         //#define AU_TICONLESS_10INCH
           =2         //#define HITACHI_T01
           =2         //#define HITACHI_TX23D12
           =2         //#define HITACHI_TX18D24
           =2         //#define HITACHI_TX18D16
           =2         //#define TMD_LTA070A320F
           =2         //#define TMD_LTA080B
           =2 #endif  //WVGA
           =2 //#define HVGA                                          //  480 x 320
           =2 //#define QVGA                                          //  320 x 240   *** only video mode
           =2 #ifdef QVGA
           =2         #define PWIDTH  320
           =2         #define PHEIGHT 240
           =2         //#define HITACHI_TX09D73
           =2         //#define AU_DELTARGB
           =2         //#define SHARP_LQ050Q5DR01
           =2         //#define SHARP_LQ035
           =2         //#define       TMD
           =2 #endif
           =2 
           =2 //#define WQVGA                                         //  480 x 234   *** only video mode
           =2 #ifdef WQVGA
           =2         #define PWIDTH  480
           =2         #define PHEIGHT 240
           =2         // If WQVGA, you have to select panel   
           =2     #define ANALOG_7INCH
           =2         //#define       PWIDTH  400
           =2         //#define PHEIGHT       240
           =2         //#define SHARP_LQ043T3DX02             //  400 x 237
           =2         //#define LG_ANALOG
           =2         //#define TMD_ANALOG                            //TMD_LTA05B352A
           =2         //#define       T_51945GD                               // Optorex Panel
           =2 #endif  // WQVGA
           =2 
           =2 //if LVDS pannel disable TICONLESS
           =2 
           =2 //-----------------------------------------------------------------------------
           =2 //---- Add Support One more panel with DIPSW#1
           =2 //---- Ex. Add Analog AU 7" Panel with Default Panel for evalution
           =2 //#define ADD_ANALOGPANEL               // Added Analog panel(AU7") from default set panel(expect WQVGA) with DIP #1 sw
             -itch.(DIP#1=L:ANALOG, H:DEFAULT)
           =2                                                         // It can't support WQVGA and ADD_ANALOGPANEL same time!!
           =2         //#define ADD_ANALOG_7INCH
           =2         //#define ADD_TMD_LTA05B352A
           =2                                                                         
           =2 //---- Support Wide panel function
           =2 #if (defined WXGA) || (defined WSVGA) || (defined WVGA) || (defined WQVGA)
           =2 #define WIDE_SCREEN                             // Can support 4 display mode, i.e. Normal, Wide, Full, Zoom
           =2 #endif                                                          // Tested panasonic WVGA panel.
           =2 
           =2 //-----------------------------------------------------------------------------
           =2 //              Panel Vendor Specific
           =2 //-----------------------------------------------------------------------------
           =2 
           =2 //-----------------------------------------------------------------------------
           =2 //              TV Tuner
           =2 //-----------------------------------------------------------------------------
           =2 #define PHILIPS                         0
           =2 #define ALPS                            1               // ALPS, LG
           =2 #define TEMIC                           2
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 52  

           =2 #define TVAVA                           3
           =2 #define LGTUNER                         4
           =2 #define SAMSUNGMUTITUNER        5
           =2 
           =2 #define TVTunerDevice           4
           =2 //-----------------------------------------------------------------------------
           =2 //              IR Remote Controller Type
           =2 //-----------------------------------------------------------------------------
           =2 //#define REMO_RC5                                      // RC5 style
           =2 #define TECHWELL_REMOCON
           =2 //#define REMO_NEC                                      // NEC style
           =2 //#define PHILIPS_REMOCON // New remocon 
           =2 
           =2 
           =2 //-----------------------------------------------------------------------------
           =2 //              I2C Device Access Address Mapping
           =2 //-----------------------------------------------------------------------------
           =2 
           =2 #define EEPROMI2CAddress        0xa0    // EEPROM (24C16)
           =2 #define TW88I2CAddress          0x8a    // TW880x
           =2 
           =2 #define MSPI2CAddress           0x80    // MSP
           =2 
           =2 //-----------------------------------------------------------------------------
           =2 //              Options for Possible Inputs
           =2 //-----------------------------------------------------------------------------
           =2 #define         AWT
           =2 //#define       E_Wintek 
           =2 //#define SUPPORT_SVIDEO                     //andy Awt 20090914
           =2 //#define SUPPORT_COMPONENT                     // support component analog to decoder//andy Awt 20090914
           =2 
           =2 //#define SUPPORT_DTV                           // support DTV input through component( to ADC ).//andy Awt 20090914
           =2 #define SUPPORT_PC                              // support PC function
           =2 //#define SUPPORT_DVI                           // support DVI input
           =2 #define SUPPORT_SDCARD
           =2 
           =2 //#define SUPPORT_RS485
           =2 
           =2 //-----------------------------------------------------------------------------
           =2 //              Options for Possible Standards
           =2 //              Default:NTSC
           =2 //-----------------------------------------------------------------------------
           =2 #define SUPPORT_PAL                     
           =2 #define SUPPORT_SECAM
           =2 #define SUPPORT_NTSC4           
           =2 #define SUPPORT_PALM    
           =2 #define SUPPORT_PALN            
           =2 #define SUPPORT_PAL60           
           =2 
           =2 
           =2 //#define ID_CHECK_BY_FW                        // in Video mode, check input system ID by firmware
           =2 
           =2 //-----------------------------------------------------------------------------
           =2 //              Options for Debugging/Release
           =2 //-----------------------------------------------------------------------------
           =2 //#define SUPPORT_PATTERN                       // support LCD test pattern
           =2 
           =2 
           =2 #ifndef WQVGA
           =2         #ifndef QVGA
           =2 #define SUPPORT_OSDPOSITIONMOVE
           =2         #endif
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 53  

           =2 #endif
           =2 
           =2 #define SERIAL                                  // include serial communication routines
           =2 
           =2 //#define SUPPORT_DEBUG                         // Support to use Read & Write in debug OSD Window by remocon.
           =2 
           =2 //#define DEBUG                                         // include debug information
           =2 #ifdef DEBUG
           =2         //#define DEBUG_MAIN
           =2         //#define DEBUG_TIME
           =2         //#define DEBUG_KEYREMO
           =2         //#define DEBUG_TW88
           =2         //#define DEBUG_DECODER
           =2         //#define DEBUG_I2C
           =2         //#define DEBUG_EEP
           =2         //#define DEBUG_OSD
           =2         //#define DEBUG_AUDIO
           =2         //#define DEBUG_SETPANEL
           =2         //#define DEBUG_DTV
           =2         #define DEBUG_PC
           =2         //#define DEBUG_PC_MEAS
           =2         #define DEBUG_PC_COLOR
           =2         //#define DEBUG_COMPONENT
           =2         //#define DEBUG_BANK
           =2         //#define DEBUG_PAUSE
           =2         //#define DEBUG_MCU
           =2 #endif
           =2 
           =2 #define AUTOCALC_PC                                     // in PC mode, Enable Auto Calcuration
           =2 //#define SUPPORT_USERCOLORFROMTXT      // Use color setting of text file in Color mode=USER MODE which is as B
             -rightness(Reg10), Contast(Reg11),
           =2                                                                         //    Sat_U(Reg13),Sat_V(Reg14),Sharpness(Reg12,Reg78)                                                                  
           =2 //#define SUPPORT_GAMMA
           =2 
           =2 //#define CHIP_MANUAL_TEST                      // DIPSW#1
           =2 
           =2 #ifndef INTERNAL_MCU
           =2 //#define NO_INITIALIZE                         // After Power switch turn on with DIP SW4 Enable(Low), or pressed MENU button 
             -for internal MCU
           =2                                     //     micom works to access only I2C bus by serial command.
           =2 #endif
           =2 
           =2 //#define SUPPORT_KRS_OSDDEMO           // For KRS Company Demo 
           =2 //#define SUPPORT_LINE_OSDDEMO
           =2 
           =2 //-----------------------------------------------------------------------------
           =2 //              Special Features
           =2 //-----------------------------------------------------------------------------
           =2 
           =2 #ifndef INTERNAL_MCU
           =2 //#define       SUPPORT_DELTA_RGB
           =2 #endif
           =2 #define SUPPORT_SELECTKEY                       // choose the keymap of using select key or left,right key.
           =2 //-----------------------------------------------------------------------------
           =2 #endif  //__CONFIG_H__
   2      =1  #include "panel.h"
   1      =2  //PanelConfig
   2      =2  
   3      =2          #if   defined SXGA
           =2                                                 #define PHR_ 1280
           =2                                                 #define PVR_ 1024
           =2         #elif defined XGA       
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 54  

           =2                                                 #define PHR_ 1024
           =2                                                 #define PVR_ 768
           =2         #elif defined SVGA
           =2                                                 #define PHR_ 800
           =2                                                 #define PVR_ 600
           =2         #elif defined VGA
           =2                                                 #define PHR_ 640
           =2                                                 #define PVR_ 480
           =2         #elif defined QVGA
           =2                                                 #define PHR_ 320
           =2                                                 #define PVR_ 240
           =2         #elif defined WXGA
           =2                                                 #define PHR_ 1280 //1366
           =2                                                 #define PVR_ 768
           =2         #elif defined WSVGA
           =2                                                 #define PHR_ 1024
           =2                                                 #define PVR_ 600
           =2         #elif defined WVGA
  25      =2                                                  #define PHR_ 800
  26      =2                                                  #define PVR_ 600
  27      =2          #elif defined WQVGA
           =2                                 //              #define PHR_ 960 //480
           =2                                 //              #define PVR_ 237
           =2                                                 #define PHR_ 480 //480
           =2                                                 #define PVR_ 240
           =2         #endif
  33      =2  
  34      =2   
  35      =2  
  36      =2  /*
  37      =2  #define ACTIVE_LOW                      0
  38      =2  #define ACTIVE_HIGH                     1
  39      =2  
  40      =2  CODE struct PanelConfig {
  41      =2          unsigned                x_res,                                  y_res;
  42      =2          unsigned char   h_sync_min_pulse_width, v_sync_min_pulse_width;
  43      =2          unsigned                h_min_back_porch;
  44      =2          unsigned char   h_sync_polarity,                v_sync_polarity;
  45      =2          unsigned                dot_clock,                              max_clock;                      // in unit Mhz*10
  46      =2          unsigned char   pixs_per_clock;
  47      =2          unsigned char   DE_only;
  48      =2  } PanelConfig=
  49      =2          {
  50      =2          //----------------------------------------------------
  51      =2          #ifdef WXGA
  52      =2          //LG  LM171W01 WXGA
  53      =2          1280,                   768,
  54      =2          8,                              1,
  55      =2          8,
  56      =2          ACTIVE_LOW,             ACTIVE_LOW,
  57      =2          #ifdef DOUBLE_PIXEL
  58      =2          320,                    470,
  59      =2          2,
  60      =2          #else
  61      =2          650,                    950,                                    //65Mhz
  62      =2          1,
  63      =2          #endif
  64      =2          0
  65      =2          //----------------------------------------------------
  66      =2          #elif defined XGA
  67      =2          //Samsung  LT150x1-151 XGA
  68      =2          1024,                   768,
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 55  

  69      =2          68,                             1,
  70      =2          80,
  71      =2          ACTIVE_LOW,             ACTIVE_LOW,
  72      =2          #ifdef DOUBLE_PIXEL
  73      =2          325,                    400,                                    //32.5Mhz
  74      =2          2,
  75      =2          #else
  76      =2          650,                    800,
  77      =2          1,
  78      =2          #endif
  79      =2          0
  80      =2          //----------------------------------------------------
  81      =2          #elif defined SXGA
  82      =2          //Samsung  LT170E2-131  SXGA
  83      =2          1280,                   1024,
  84      =2          1,                              1,
  85      =2          1,
  86      =2          ACTIVE_LOW,             ACTIVE_LOW,
  87      =2          #ifdef DOUBLE_PIXEL
  88      =2          540,                    540,                                    //54.5Mhz
  89      =2          2,
  90      =2          #else
  91      =2          1080,                   1080,
  92      =2          1,
  93      =2          #endif
  94      =2          0
  95      =2          //----------------------------------------------------
  96      =2          #elif defined WSVGA                                             // Thosiba
  97      =2          1024,                   600,
  98      =2          8,                              3,
  99      =2          1,//80,                         
 100      =2          ACTIVE_LOW,             ACTIVE_LOW,
 101      =2          #ifdef DOUBLE_PIXEL
 102      =2          325,                    450,
 103      =2          2,
 104      =2          #else
 105      =2          500,                    550,                                    //50Mhz
 106      =2          1,
 107      =2          #endif
 108      =2          0
 109      =2          //----------------------------------------------------
 110      =2  
 111      =2          #elif defined SVGA
 112      =2          //NEC NL8060AC26-11 SVGA
 113      =2          800,                    600,
 114      =2          2,                              1,
 115      =2          13,
 116      =2          ACTIVE_LOW,             ACTIVE_LOW,
 117      =2          #ifdef DOUBLE_PIXEL
 118      =2          384,                    500,                                    //38.4MHz
 119      =2          2,
 120      =2          #else
 121      =2          670,                    1000,
 122      =2          1,
 123      =2          #endif
 124      =2          0
 125      =2          //----------------------------------------------------
 126      =2          #elif defined VGA
 127      =2          //NEC NL6448AC33        VGA                                     // OK with SetPanelRegisters
 128      =2          640,                    480,
 129      =2          10,                             1,
 130      =2          4,
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 56  

 131      =2          ACTIVE_LOW,             ACTIVE_LOW,
 132      =2          #ifdef DOUBLE_PIXEL
 133      =2          130,                    150,                                    //25.2MHz
 134      =2          2,
 135      =2          #else
 136      =2          250,                    300,
 137      =2          1,
 138      =2          #endif
 139      =2          0
 140      =2          //----------------------------------------------------
 141      =2  
 142      =2          #elif defined WVGA
 143      =2          // Panasonic  EDTCB27QBF WVGA
 144      =2          800,                    480,
 145      =2          4,                              1,
 146      =2          7,
 147      =2          ACTIVE_LOW,             ACTIVE_LOW,
 148      =2          #ifdef DOUBLE_PIXEL
 149      =2          166,                    200,                                    //33.2MHz
 150      =2          2,
 151      =2          #else
 152      =2          332,                    360,                                    //33.2MHz
 153      =2          1,
 154      =2          #endif
 155      =2          0
 156      =2  
 157      =2          //----------------------------------------------------
 158      =2          #else
 159      =2          // Default : XGA panel
 160      =2          // Samsung  LT150x1-151 XGA
 161      =2          1024,                   768,
 162      =2          68,                             1,
 163      =2          80,
 164      =2          ACTIVE_LOW,             ACTIVE_LOW,
 165      =2          #ifdef DOUBLE_PIXEL
 166      =2          325,                    400,                                    //32.5Mhz
 167      =2          2,
 168      =2          #else
 169      =2          650,                    800,                                    //32.5Mhz
 170      =2          1,
 171      =2          #endif
 172      =2          0
 173      =2          #endif
 174      =2          };
 175      =2  
 176      =2  */
   3      =1  #include "osdmenu.h"
   1      =2  //osdmenu.h
   2      =2  //LJY10292001
   3      =2  #ifndef __OSDMENU__
   4      =2  #define __OSDMENU__
   5      =2  
   6      =2  //=======================================================================
   7      =2  // 
   8      =2  //BYTE GetOSDDuration(void);
   9      =2  
  10      =2  void ResetVideoValue(void);
  11      =2  //#if defined( SUPPORT_PC ) || defined( SUPPORT_DTV )
  12      =2  //void ResetPCValue(void);
  13      =2  //#endif
  14      =2  BYTE GetOSDMenuLevel( void );
  15      =2  
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 57  

  16      =2  void DrawMenulist(BYTE);
  17      =2  void Display_EnterPin(void);
  18      =2  void OSDHighMenu_sub(void);
  19      =2  void ResetOSDValue(void);
  20      =2  #ifdef E_Wintek
           =2 void ResetUESROSDValue(void);
           =2 #endif
  23      =2  //BYTE OnChangingValue(void);
  24      =2  //Not used yet *******************BYTE OnChangingTime(void);
  25      =2  
  26      =2  //WORD GetOSDclock(void);
  27      =2  
  28      =2  void InitOSDMenu(void);
  29      =2  BYTE CloseOSDMenu(void);
  30      =2  void OpenOSDMenu(void);
  31      =2  void OSDHighMenu(void);
  32      =2  void OSDSelect(void);
  33      =2  void OSDCursorMove(BYTE flag );
  34      =2  void OSDLeftRight(BYTE flag );
  35      =2  void OSDValueUpDn(BYTE flag);
  36      =2  WORD SetItemValue( BYTE id, BYTE flag );
  37      =2  BYTE DoAction(BYTE id);
  38      =2  
  39      =2  BYTE SaveValue1(void);
  40      =2  void ClearValueWin(void);
  41      =2  
  42      =2  void OSDNumber( BYTE num );
  43      =2  
  44      =2  void Set4WideScreen(BYTE id);
  45      =2  
  46      =2  void SetRGBContrast( BYTE id, BYTE val );
  47      =2  BYTE SetPCColorTemp(BYTE flag);
  48      =2  void ResetPanelAttributeValue(void);
  49      =2  WORD GetItemValue( BYTE);
  50      =2  void DisplayViewBar( WORD,BYTE);
  51      =2  void DrawNum(WORD, CODE_P struct NumType *, WORD);
  52      =2  void DrawStringByLang( WORD, CODE_P struct EnumType *, WORD);
  53      =2  
  54      =2  void DisplayVolumebar(BYTE val);
  55      =2  BYTE GetOSDLang(void);
  56      =2  void InitOSDMenuXY(void);
  57      =2  
  58      =2  void Display_TVGuide_Window(void);
  59      =2  void Display_TVGuide_Status(void);
  60      =2  
  61      =2  void ChangeVchip_LevelCursor(BYTE);
  62      =2  void ChangeVchip_ContentCursor(BYTE);
  63      =2  void Select_VchipLevel(void);
  64      =2  void SetVideoMode(BYTE mode);
  65      =2  BYTE GetVideoDatawithOffset(BYTE offset);
  66      =2  void SetVideoContrast(BYTE newv);
  67      =2  void SetVideoBrightness(BYTE newv);
  68      =2  void SetVideoHue(BYTE newv) ;
  69      =2  void SetVideoSaturation(BYTE svtype, BYTE newv) ;
  70      =2  BYTE SetVideoSharpness(BYTE flag) ;
  71      =2  void SetVideoBacklight(BYTE newv) ;
  72      =2  //------------------------------------------------andy awt 981013
  73      =2  //void DaySelect(BYTE);
  74      =2  void CAMOutDSel(BYTE val);
  75      =2  void DVRAodioSel(BYTE  val);
  76      =2  
  77      =2  //------------------------------------------------andy awt 981013
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 58  

  78      =2  
  79      =2  void DisplayLineOSD(void);      // OSD Line display Demo
  80      =2  
  81      =2  
  82      =2  struct MenuType {
  83      =2          BYTE    width,  height;
  84      =2          BYTE    TitleColor;     
  85      =2          BYTE    CursorColor;
  86      =2  };
  87      =2  
  88      =2  struct NumType {
  89      =2          BYTE    PrePostCharLen;         // high nibble(pre) / low nibble(post)
  90      =2          BYTE    PrePostChar[4];
  91      =2  };
  92      =2  
  93      =2  struct NumberStringType {
  94      =2          BYTE    x, y;
  95      =2          BYTE    width;
  96      =2          BYTE    BackColor;
  97      =2          BYTE    Radix;
  98      =2          BYTE    NumColor;
  99      =2          BYTE    MaxLen;                         // maximum length of string
 100      =2          BYTE    PrePostCharLen;         // high nibble(pre) / low nibble(post)
 101      =2          BYTE    PrePostChar[3];
 102      =2  };
 103      =2  
 104      =2  struct TimeType {
 105      =2          BYTE    x, y;
 106      =2          BYTE    width;
 107      =2          BYTE    BackColor;
 108      =2          BYTE    Format;                         //_24H_TIME
 109      =2          BYTE    TimeColor;
 110      =2          BYTE    CursorColor;
 111      =2  };
 112      =2  
 113      =2  struct EnumType {
 114      =2          BYTE    Sz;//size
 115      =2          BYTE    ByLang;
 116      =2          BYTE    Str[15];                        // doesn't matter the size !!!
 117      =2  };
 118      =2  
 119      =2  #define ICON_CH_SZ              2
 120      =2  //#define BAR_NUM_SZ            4
 121      =2  #define ICON_BUF_SZ             2
 122      =2  struct DefineMenu {
 123      =2          //WORD                                          Icon[ICON_BUF_SZ];      
 124      =2          BYTE                            CODE    *Icon;
 125      =2          BYTE                                            **Desc;                         
 126      =2          BYTE                                            PreFnId, 
 127      =2                                                                  PostFnId;
 128      =2  //      void            (*CalltoFunction)(void);                                    // Un/Dn/Sel Function
 129      =2          BYTE                                            IconColor;                      //NIL: not to display icon
 130      =2          BYTE                                            DescColor;                      //NIL: not to display desc. (IconColor==NIL && DescColor==NIL)->Last Item
 131      =2          struct DefineMenu       CODE    *Child;
 132      =2          BYTE                                            Type;                           // MENU, CHOICEMENU, BAR, NUMBER, TIME, ACTION, ENUM_STRING
 133      =2          BYTE                                            ActiveWithCursor;
 134      =2          BYTE                                            Id;
 135      =2          BYTE                            CODE    *TypeData;      //MenuType, BarType, NumType,,,
 136      =2  } ;
 137      =2  
 138      =2  struct PictureInfo {
 139      =2  
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 59  

 140      =2          BYTE Register_Addr;
 141      =2          BYTE EEPROM_Addr;
 142      =2          struct RegisterInfo     CODE    *Control_Range;
 143      =2  };
 144      =2  
 145      =2  
 146      =2  //-------------------------------------------------------------------
 147      =2  // OSD Window Information
 148      =2  //-------------------------------------------------------------------
 149      =2  // Window Number
 150      =2  #define OSDCURSORWINDOW                 1
 151      =2  #define OSDMENUWINDOW                   OSDCURSORWINDOW+1
 152      =2  #define OSDMENU_TOPWIN                  OSDCURSORWINDOW+2
 153      =2  #define OSDMENU_TITLEWIN                OSDCURSORWINDOW+3
 154      =2  #define OSDBARWINDOW                    OSDCURSORWINDOW
 155      =2  
 156      =2  #define TECHWELLOGO_OSDWIN      1       
 157      =2  #define TVINFO_OSDWIN           2       
 158      =2  #define FONTTEST_OSDWIN         2       
 159      =2  #define INPUTINFO_OSDWIN        3  
 160      =2  #define RATINGINFO_OSDWIN       1       
 161      =2  #define PCINFO_OSDWIN           3//4/   
 162      =2  
 163      =2  //-------------OSDMENU_TITLEWIN------------------------------------------------------
 164      =2  // Window Start address
 165      =2  #define OSDMENU_MAINADDR        0
 166      =2  #define OSDMENU_SUBADDR     OSDMENU_MAINADDR+15    //25*9:196
 167      =2  #define OSDMENU_BARADDR         175 //OSDMENU_SUBADDR+225    //256   //25x2:50
 168      =2  
 169      =2  #define INPUTINFO_ADDR          160     // 9x1:9
 170      =2  #ifdef WQVGA
           =2 #define INPUTINFO1_ADDR         INPUTINFO_ADDR+17       //17x3:51
           =2 #else
 173      =2  #define INPUTINFO1_ADDR         INPUTINFO_ADDR+34       //17x2:51
 174      =2  #endif
 175      =2  
 176      =2  #define MUTEINFO_ADDR       INPUTINFO1_ADDR+51  // 4x1:4
 177      =2  #define TVCHINFO_ADDR           MUTEINFO_ADDR//324      // 3X1:3
 178      =2  #define LOGO_ADDR                       0
 179      =2  #define RATINGINFO_ADDR         0       //addr:210(8x1:8)
 180      =2  #define PCMEASUREINFO_ADDR  OSDMENU_BARADDR //10x1
 181      =2  
 182      =2  
 183      =2  //--------------------------------------------------------------------
 184      =2  // OSD Menu Position Range
 185      =2  #if ((defined WQVGA) && (defined ANALOG_7INCH)) || ((defined QVGA) && (defined SHARP_LQ050Q5DR01))
           =2         #define OSD_PHR_ PHR_/2
           =2 #else
 188      =2          #define OSD_PHR_ PHR_
 189      =2  #endif
 190      =2  
 191      =2  #define OSDHSTART_MAX (OSD_PHR_-(12+1)*25 - 56*2 -4)  //PHR - (pixelsize +Hspace)*MenuWidth - Hborder*2 - 
             -outlinewidth*2
 192      =2  #define OSDVSTART_MAX (PVR_-(18+11)*9 - 5*2 ) //  PVR - (Linesize+Vspace)*MENU_HEIGHT - Vborder*2  - outli
             -newidth*2
 193      =2  
 194      =2  #define OSDMENUX_MIN 1//0
 195      =2  #define OSDMENUX_MAX (OSDHSTART_MAX>>3)
 196      =2  #define OSDMENUX_50  (OSDHSTART_MAX>>4)
 197      =2  
 198      =2  #define OSDMENUY_MIN 2//0
 199      =2  #define OSDMENUY_MAX (OSDVSTART_MAX>>2)
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 60  

 200      =2  #define OSDMENUY_50  (OSDVSTART_MAX>>3)
 201      =2  
 202      =2  //--------------------------------------------------------------------
 203      =2  // OSD Menu Width, Height 
 204      =2  #ifdef E_Wintek
           =2 #define ICON_HIGH                               0x14
           =2 #else
 207      =2  #define ICON_HIGH                               0x0a
 208      =2  #endif
 209      =2  #define TOTAL_MAX_HIGHT                 9
 210      =2  
 211      =2  #define TOPMENU_WIDTH                   2
 212      =2  #define TOTAL_TOP_HEIGHT                5       // Include blank line!
 213      =2  
 214      =2  #define TOPMENU_HEIGHT                  4       
 215      =2  
 216      =2  #if (defined QVGA) && (defined SHARP_LQ050Q5DR01)
           =2 #define MENU_WIDTH                              17 //23//25 
           =2 #define TITLE_MAX_DESC                  17//25  //
           =2 #define BAR_LENGTH                              0
           =2 #else
 221      =2  #define MENU_WIDTH                              23//23//25 
 222      =2  #define TITLE_MAX_DESC                  23//25  //
 223      =2  #define BAR_LENGTH                              5//8
 224      =2  #endif
 225      =2  
 226      =2  #define MENU_HEIGHT                             7//6 
 227      =2  
 228      =2  #define BARNUM_LENGTH                   8       //11
 229      =2  #ifdef REFERENCE
           =2 #define BACK_COLOR                              BG_COLOR_CYAN
           =2 #define DEFAULT_COLOR                   BG_COLOR_CYAN   | CH_COLOR_WHITE
           =2 //#define ACTIVE_COLOR                  BG_COLOR_YELLOW | CH_COLOR_WHITE
           =2 #define TITLE_BACK_COLOR                BG_COLOR_MAGENTA
           =2 #define TITLE_COLOR                             TITLE_BACK_COLOR | CH_COLOR_YELLOW
           =2 #define COMMENT_COLOR                   TITLE_BACK_COLOR | CH_COLOR_WHITE
           =2 #define CURSOR_COLOR                    BG_COLOR_YELLOW | CH_COLOR_BLUE
           =2 #define OSD_INFO_COLOR                  DEFAULT_COLOR
           =2 #define BAR_COLOR                               DEFAULT_COLOR   
           =2 #define BAR_NUM_COLOR                   DEFAULT_COLOR
           =2 #define NUM_COLOR                               DEFAULT_COLOR
           =2 
           =2 #define OSDMENU_OUTLINE_COLOR   BG_COLOR_BLUE
           =2 
           =2 #else
 245      =2  #define BACK_COLOR                              BG_COLOR_CYAN
 246      =2  #define DEFAULT_COLOR                   BG_COLOR_CYAN | CH_COLOR_WHITE
 247      =2  //#define ACTIVE_COLOR                  BG_COLOR_YELLOW | CH_COLOR_WHITE
 248      =2  #define TITLE_BACK_COLOR                BG_COLOR_BLUE
 249      =2  #define TITLE_COLOR                             TITLE_BACK_COLOR | CH_COLOR_YELLOW
 250      =2  #define COMMENT_COLOR                   TITLE_BACK_COLOR | CH_COLOR_WHITE
 251      =2  #define CURSOR_COLOR                    BG_COLOR_YELLOW  | CH_COLOR_BLUE
 252      =2  #define OSD_INFO_COLOR                  BG_COLOR_CYAN    | CH_COLOR_GREEN
 253      =2  #define BAR_COLOR                               DEFAULT_COLOR   
 254      =2  #define BAR_NUM_COLOR                   DEFAULT_COLOR
 255      =2  #define NUM_COLOR                               DEFAULT_COLOR
 256      =2  
 257      =2  #define VER_COLOR               BG_COLOR_CYAN   | CH_COLOR_YELLOW   /// V1.1 03/07/07 simonsung
 258      =2  
 259      =2  
 260      =2  #define OSDMENU_OUTLINE_COLOR   BG_COLOR_CYAN
 261      =2  #endif 
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 61  

 262      =2  
 263      =2  
 264      =2  //DisplayedOSD
 265      =2  //              new       |     MENU    TVINFO          CC              INPUTINFO               PCINFO          RATINGINFO
 266      =2  //      current   |
 267      =2  //============|=========================================================================
 268      =2  //      MENU      |                     TVINFO          --              INPUTINFO               PCINFO          MENU + RATINGINFO       
 269      =2  //                        |                                              
 270      =2  //------------|-------------------------------------------------------------------------
 271      =2  //      TVINFO    |     MENU    TVINFO          --              INPUTINFO               PCINFO          TVINFO+RATING
 272      =2  //------------|-------------------------------------------------------------------------
 273      =2  //      CC                |     MENU->  TVINFO->                        INPUTINFO->             PCINFO          RATINGINFO
 274      =2  //                        |      CC              CC                                      CC                                              
 275      =2  //------------|-------------------------------------------------------------------------
 276      =2  //      INPUTINFO |     MENU    TVINFO          --              INPUTINFO               PCINFO          --
 277      =2  //------------|-------------------------------------------------------------------------
 278      =2  //      PCINFO    |     MENU    x                       x               INPUTINFO               PCINFO          x
 279      =2  //------------|-------------------------------------------------------------------------
 280      =2  //      RATINGINFO|     MENU    TVINFO     RATING   INPUTINFO           x                       RATINGINFO
 281      =2  //                                                                      
 282      =2  
 283      =2  //=======================================================================================
 284      =2  // OSD Menu Constant define.
 285      =2  //=======================================================================================
 286      =2  //Time type
 287      =2  #define _24H_TIME               1
 288      =2  
 289      =2  //for previous, next, parent or child
 290      =2  #define YES                             0xfe    
 291      =2  #define NO                              0
 292      =2  
 293      =2  
 294      =2  //#define OVERWRITE             0
 295      =2  //#define POPUP                 1
 296      =2  
 297      =2  //CursorMove
 298      =2  #define VERT                    0
 299      =2  #define HORI                    1
 300      =2  
 301      =2  //Type of MenuItem
 302      =2  #define OSDMENU                 1
 303      =2  #define CHOICEMENU              2
 304      =2  #define ACTION                  3
 305      =2  #define BAR                             4
 306      =2  #define NUMBER                  5
 307      =2  #define CHOICE                  6
 308      =2  #define ENUM_STRING             7 //YESNO                       7
 309      =2  #define CHOICE1                 8
 310      =2  #define TIME                    9
 311      =2  #define NUMBER_STRING   10
 312      =2  #define TEXT_STR              11   // V1.1 02/28/07 simonsung
 313      =2  
 314      =2  
 315      =2  //Bar type
 316      =2  #define LEFT_FILLED             1
 317      =2  #define RIGHT_FILLED    2
 318      =2  #define NO_FILLED               3
 319      =2  
 320      =2  //OSDmenu up and down key
 321      =2  #define UP                                      1
 322      =2  #define DN                                      2
 323      =2  #define RIGHT                           3
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 62  

 324      =2  #define LEFT                            4
 325      =2  
 326      =2  // Action Id
 327      =2  #define DISP_INFO                       0x16
 328      =2  
 329      =2  #define INPUTSELECTION                          0x2f
 330      =2  
 331      =2  #define CHANGE_TO_COMPOSITE                     (0x20|CH_TW2835)                        // Low nibble need to start from 1 
 332      =2  #define CHANGE_TO_SVIDEO                        (0x20|SVIDEO)                           // so that it match with COMPOSITE...
 333      =2  #define CHANGE_TO_COMPONENT                     (0x20|COMPONENT)                
 334      =2  #define CHANGE_TO_DTV                           (0x20|DTV)              
 335      =2  #define CHANGE_TO_TV                            (0x20|TV)                                       
 336      =2  #define CHANGE_TO_PC                            (0x20|PC)                                       
 337      =2  #define CHANGE_TO_DIGITALVGA            (0x20|DIGITALVGA)                       
 338      =2  #define CHANGE_TO_SCART                         (0x20|SCART)                            
 339      =2  
 340      =2  
 341      =2  #define OSDPOSITIONMODE     0x10
 342      =2  #define OSD_VPOS                        0x11
 343      =2  #define OSD_HPOS                        0x12
 344      =2  #define OSD_HALFTONE            0x13
 345      =2  #define OSD_DURATION            0x14
 346      =2  #define RESET_OSDVALUE          0x15
 347      =2  #define OSDLANG                         0x16
 348      =2  
 349      =2  #define PANEL_CONTRAST          0x58
 350      =2  #define PANEL_BRIGHTNESS        0x59
 351      =2  #define PANEL_HUE                       0x5a
 352      =2  #define PANEL_SHARPNESS         0x5b
 353      =2  #define PANEL_SATURATION        0x5c
 354      =2  
 355      =2  #define PC_VPOS                         0x43
 356      =2  #define PC_HPOS                         0x44
 357      =2  #define PC_HSIZE                        0x4d
 358      =2  
 359      =2  #define PC_CLOCK                        0x45
 360      =2  #define PC_PHASE                        0x46
 361      =2  
 362      =2  #define AUTOADJUST                      0x47
 363      =2  #define AUTOADJUST2                     0x48
 364      =2  //#define SAVE_AUTOADJUST               0x49
 365      =2  #define RESET_AUTOADJUST        0x4a
 366      =2  
 367      =2  #define PCCOLORADJUST           0x4b
 368      =2  #define SAVE_COLORADJUST        0x4c
 369      =2  //#define RESET_COLORADJUST     0x4d
 370      =2  
 371      =2  #define RESET_PCVALUE           0x4e
 372      =2  #define CameraOSD                       0x4f
 373      =2  
 374      =2  #define PC_COLOR_MODE           0x3f
 375      =2  #define PC_COLOR_TEMP           0x30
 376      =2  #define PC_COLOR_MODE1          0x31
 377      =2  #define PC_COLOR_MODE2          0x32
 378      =2  #define PC_COLOR_MODE3          0x33
 379      =2  #define PC_COLOR_USER           0x34
 380      =2  #define PC_COLOR_R                      0x35
 381      =2  #define PC_COLOR_G                      0x36
 382      =2  #define PC_COLOR_B                      0x37
 383      =2  
 384      =2  #define VIDEO_MODE                      0x90
 385      =2  #define VIDEO_MODE1                     0x91
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 63  

 386      =2  #define VIDEO_MODE2                     0x92
 387      =2  #define VIDEO_MODE3                     0x93
 388      =2  #define VIDEO_USER                      0x94
 389      =2  #define VIDEO_CONTRAST          0x95
 390      =2  #define VIDEO_BRIGHTNESS        0x96
 391      =2  #define VIDEO_SATURATION        0x97
 392      =2  #define VIDEO_HUE                       0x99
 393      =2  #define VIDEO_SHARPNESS         0x9a
 394      =2  #define VIDEO_BACKLIGHT         0x9c            // add new value 
 395      =2  #define RESET_VIDEOVALUE        0x9b
 396      =2  #ifdef E_Wintek
           =2 #define RESET_USERVALUE 0x9d
           =2 #endif
 399      =2  #define VIDEOPICTURE            0x9f
 400      =2  
 401      =2  #define INPUTSTD                        0x6f
 402      =2  #define CHANGE_TO_AUTO          0x60
 403      =2  #define CHANGE_TO_NTSC          (0x60 | NTSC)
 404      =2  #define CHANGE_TO_PAL           (0x60 | PAL)
 405      =2  #define CHANGE_TO_SECAM         (0x60 | SECAM)
 406      =2  #define CHANGE_TO_NTSC4         (0x60 | NTSC4)
 407      =2  #define CHANGE_TO_PALM          (0x60 | PALM)
 408      =2  #define CHANGE_TO_PALN          (0x60 | PALN)
 409      =2  #define CHANGE_TO_PAL60         (0x60 | PAL60)
 410      =2  
 411      =2  
 412      =2  
 413      =2  
 414      =2  #define CLOSED_CAPTION          0x7f
 415      =2  #define CLOSEDCAP_OFF           0x70
 416      =2  #define CLOSEDCAP_CC1           0x71
 417      =2  #define CLOSEDCAP_CC2           0x72
 418      =2  #define CLOSEDCAP_CC3           0x73
 419      =2  #define CLOSEDCAP_CC4           0x74
 420      =2  #define CLOSEDCAP_T1            0x75
 421      =2  #define CLOSEDCAP_T2            0x76
 422      =2  #define CLOSEDCAP_T3            0x77
 423      =2  #define CLOSEDCAP_T4            0x78
 424      =2  
 425      =2  #define TV_GUIDE                        0x8f
 426      =2  #define NO_VCHIP_LOCK           0
 427      =2  #define VCHIP_TV_Y                      1
 428      =2  #define VCHIP_TV_Y7                     2
 429      =2  #define VCHIP_TV_G                      3
 430      =2  #define VCHIP_TV_PG                     4
 431      =2  #define VCHIP_TV_14                     5
 432      =2  #define VCHIP_TV_MA                     6
 433      =2  #define PASSWORD                        0x87
 434      =2  #define NEW_PASSWORD            0x88
 435      =2  #define CHK_PASSWORD            0x89
 436      =2  #define RET_CHK_PASSWORD        0x8a
 437      =2  
 438      =2  #define MPAA_RATING                     0x9f
 439      =2  #define NO_MPAA_RATING          0
 440      =2  #define MPAA_G                          1
 441      =2  #define MPAA_PG                         2
 442      =2  #define MPAA_PG_13                      3
 443      =2  #define MPAA_R                          4
 444      =2  #define MPAA_NC_17                      5
 445      =2  #define MPAA_X                          6
 446      =2  
 447      =2  #define TVINSTALL                       0xa0
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 64  

 448      =2  #define SCAN_CHANNEL            0xa1
 449      =2  #define AIR_CABLE_TV            0xa3
 450      =2  #define STORE_CLEAR_TVCHN       0xa4
 451      =2  #define MTS                                     0xa5
 452      =2  #define EDIT_CHANNEL            0xa6
 453      =2          #define         MTS_STEREO                      0//0x10
 454      =2          #define         MTS_MONO                        1//0x11
 455      =2  
 456      =2  #define AUDIO_VOLUME            0xb7
 457      =2  
 458      =2  #if 0 //andy AWT8.4 20090811
           =2 
           =2 #define AUDIO_BALANCE           0xb9
           =2 #define AUDIO_BASS                      0xba
           =2 #define AUDIO_TREBLE            0xbb
           =2 
           =2 #define AUDIO_LOUDNESS          0xbc
           =2 #define AUDIO_EFFECT            0xbd
           =2 #define AUDIO_MUTE                      0xbe
           =2 #endif
 468      =2  
 469      =2  #define DayChoice           0xb8
 470      =2  #define CAMOSDONOFF         0xb9
 471      =2  #define GAUGEChoice         0xba
 472      =2  #define OsdLockChoice       0xbb
 473      =2  #define PRIORITYChoice      0xcA
 474      =2  #define DVRDisplay              0xcc
 475      =2  
 476      =2  #define CAMAONOFF                   0xc1
 477      =2  #define CAMBONOFF               0xc2
 478      =2  #define CAMCONOFF                   0xc3
 479      =2  #define CAMRONOFF                       0xc4
 480      =2  
 481      =2  #define IMAGEChoice         0xc5 
 482      =2  #define REARChoice          0xc6
 483      =2  #define JUMPChoice          0xc7
 484      =2  #define CAMOUTChoice        0xc8 
 485      =2  #define STIME_STEP                  0xc9
 486      =2  #define TriggerVGA                  0xcb
 487      =2  #define IMAGE_A_Choice         0xcd
 488      =2  #define IMAGE_B_Choice         0xce
 489      =2  #define IMAGE_C_Choice         0xcf
 490      =2  
 491      =2  
 492      =2  #define MANUAL_TUNE_CHANNEL     0xab
 493      =2  #define FINE_TUNE_CHANNEL       0xac
 494      =2  #define STORE_PALCHANNEL        0xad
 495      =2  
 496      =2  //#define CLEAR_TVCHN                   0xb0
 497      =2  //#define STORE_TVCHN                   0xb1
 498      =2  
 499      =2  #define WIDESCREEN                      0xc0
 500      =2  #define WIDESCREEN_NORMAL       0 
 501      =2  #define WIDESCREEN_WIDE         1 
 502      =2  #define WIDESCREEN_PANO         2
 503      =2  #define WIDESCREEN_FULL         3 
 504      =2  #define WIDESCREEN_ZOOM         4 
 505      =2  
 506      =2  #define SYSTEM_CLOCK            0xd1
 507      =2  #define SYSTEM_CLOCK_H          0xd2
 508      =2  #define WAKEUP_TIME                     0xd3
 509      =2  #define WAKEUP_TIME_H           0xd4
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 65  

 510      =2  #define WAKEUP_PR                       0xd5
 511      =2  #define OFF_TIME                        0xd6
 512      =2  #define OFF_TIME_H                      0xd7
 513      =2  #define SLEEP_TIMER                     0xd8
 514      =2  
 515      =2  #define Resolution                      0xe0
 516      =2  #define FPS                                     0xe1
 517      =2  #define Quality                         0xe2
 518      =2  #define RecordMode                      0xe3
 519      =2  #define RecordLength            0xe4
 520      =2  #define PreAlarmLength          0xe5
 521      =2  #define PostAlarmLength         0xe6
 522      =2  #define Apply                           0xe7
 523      =2  #define ManualRecordStart       0xe8
 524      =2  #define ManualRecordStop        0xe9
 525      =2  #define Snapshot                        0xea
 526      =2  #define FormatSD                        0xeb
 527      =2  #define AudioRecord                     0xec
 528      =2  #define FirmwareUpdate          0xed
 529      =2  #define ChangePassword          0xee
 530      =2  #define OverWrite                       0xef
 531      =2  
 532      =2  
 533      =2  
 534      =2  
 535      =2  #define Year                            0x20
 536      =2  #define Month                           0x21
 537      =2  #define Day                                     0x22
 538      =2  #define Hour                            0x23
 539      =2  #define Minute                          0x24
 540      =2  
 541      =2  #define DaylightSaving                          0x25
 542      =2  #define TimeBeginesMonth                        0x26
 543      =2  #define TimeBeginesWeek                         0x27
 544      =2  #define TimeBeginesTime                         0x28
 545      =2  #define StandardTimeBeginesMonth        0x29
 546      =2  #define StandardTimeBeginesWeek         0x2a
 547      =2  #define StandardTimeBeginesTime         0x2b
 548      =2  #define TimeZone                                        0x2c
 549      =2  #define FirstNumber                                     0x2d
 550      =2  #define SecondNumber                            0x2e
 551      =2  #define ThridNumber                                     0x2f
 552      =2  #define FourthNumber                            0x38
 553      =2  
 554      =2  
 555      =2  
 556      =2  #define OSDLANGI                        0xd9
 557      =2  #define OSDLANGII                       OSDLANGI+1
 558      =2  #define OSDLANGIII                      OSDLANGI+2
 559      =2  #define OSDLANGIV                       OSDLANGI+3
 560      =2  
 561      =2  
 562      =2  #define TOHIGHMENU                      0xf1
 563      =2  #define MOVECURSOR2FIRST        0xf2
 564      =2  #define RESET_ALL                       0xf3
 565      =2  #define EXITMENU                        0xf4
 566      =2  #define DVRParamApply           0xf5
 567      =2  #define DATETIMEApply           0xf6
 568      =2  
 569      =2  
 570      =2  #define CHOICE1_VAL                     0xfc
 571      =2  #define CHOICE_VAL                      0xfd
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 66  

 572      =2  #define BAR_VAL                         0xfe
 573      =2  #define NUM_VAL                         0xff
 574      =2  
 575      =2  #define CAMNumberChoice     0xa3 
 576      =2  #define PelcoChoice         0xa4
 577      =2  #define Baud_rateChoice         0xa5
 578      =2  
 579      =2  #endif  // __OSDMENU__
   4      =1  //*****************************************************************************
   5      =1  //
   6      =1  //           OSD Window Initialization Table
   7      =1  //
   8      =1  //*****************************************************************************
   9      =1  //=============================================================================
  10      =1  //                      Initialize Window for DisplayLogo "Techwell"
  11      =1  //=============================================================================
  12      =1  CODE BYTE Init_Osd_DisplayLogo[] = {
  13      =1  
  14      =1          17,
  15      =1          OSD_Win_Num                             ( TECHWELLOGO_OSDWIN ), // 2 bytes
  16      =1          OSD_Win_Attr                    ( WIN_BG_COLOR_EX0 | BG_COLOR_BLACK | WIN_3D_TYPE0 | WIN_3D_EN0 | WIN_EN0 ),
  17      =1          OSD_Win_Start                   ( ((PHR_-12*12*LOGO_ZOOM)/2), ((PVR_-18*2*WINZOOMx2)/2)),       // 3 bytes
  18      =1          OSD_Win_Width                   ( 12 ),
  19      =1          OSD_Win_Height                  ( 2 ),
  20      =1          OSD_Win_Border                  ( WIN_BD_EN0 | BG_COLOR_WHITE | WIN_BD_WIDTH(0) ),
  21      =1          OSD_Win_HBorder                 ( WIN_BD_COLOR_EX0 | WIN_H_BD_W(0) ),
  22      =1          OSD_Win_VBorder                 ( WIN_V_BD_W(0) ),
  23      =1          OSD_Win_CH_Space                ( WIN_CH_HSPACE(0) | WIN_CH_VSPACE(0) ),
  24      =1          OSD_Win_ZM_SAddr                ( WIN_VZOOM(WINZOOMx2), WIN_HZOOM(LOGO_ZOOM), WIN_SADDR(LOGO_ADDR) ),   // 2 bytes
  25      =1          OSD_Win_Shadow                  ( WIN_SHADOW_EN0 | BG_COLOR_BLACK | WIN_SHADOW_W(0) ),
  26      =1          OSD_Win_Blending                ( 0x0f ),
  27      =1          OSD_Win_CH_BorderShadow ( WIN_SHADOW_COLOR_EX0 | WIN_MULTI_EN | WIN_V_EXT_EN0 
  29      =1                                  | WIN_CH_BDSH_SEL(SEL_BORDER) 
  29      =1                                  | WIN_CH_BDSH_COLOR_EX0 | CH_COLOR_BLACK ),
  30      =1  
  31      =1          0 // End of Data
  32      =1  };
  33      =1  //
  34      =1  #ifdef ADD_ANALOGPANEL
           =1 CODE BYTE Init_Osd_DisplayLogo_A[] = {
           =1 
           =1         17,
           =1         OSD_Win_Num                             ( TECHWELLOGO_OSDWIN ), // 2 bytes
           =1         OSD_Win_Attr                    ( WIN_BG_COLOR_EX0 | BG_COLOR_BLACK | WIN_3D_TYPE0 | WIN_3D_EN0 | WIN_EN0 ),//1
           =1         OSD_Win_Start                   ( ((480*2-12*12*WINZOOMx3)/2), ((234-18*2*WINZOOMx2)/2)),       // 3 bytes
           =1         OSD_Win_Width                   ( 12 ),
           =1         OSD_Win_Height                  ( 2 ),
           =1         OSD_Win_Border                  ( WIN_BD_EN0 | BG_COLOR_WHITE | WIN_BD_WIDTH(0) ),
           =1         OSD_Win_HBorder                 ( WIN_BD_COLOR_EX0 | WIN_H_BD_W(0) ),
           =1         OSD_Win_VBorder                 ( WIN_V_BD_W(0) ),
           =1         OSD_Win_CH_Space                ( WIN_CH_HSPACE(0) | WIN_CH_VSPACE(0) ),
           =1         OSD_Win_ZM_SAddr                ( WIN_VZOOM(WINZOOMx2), WIN_HZOOM(WINZOOMx3), WIN_SADDR(LOGO_ADDR) ),   // 2 bytes
           =1         OSD_Win_Shadow                  ( WIN_SHADOW_EN0 | BG_COLOR_BLACK | WIN_SHADOW_W(0) ),
           =1         OSD_Win_Blending                ( 0x0f ),
           =1         OSD_Win_CH_BorderShadow ( WIN_SHADOW_COLOR_EX0 | WIN_MULTI_EN | WIN_V_EXT_EN0 
           =1                                 | WIN_CH_BDSH_SEL(SEL_BORDER) 
           =1                                 | WIN_CH_BDSH_COLOR_EX0 | CH_COLOR_BLACK ),
           =1 
           =1         0 // End of Data
           =1 };
           =1 #endif
  57      =1  //=============================================================================
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 67  

  58      =1  //                      Initialize Window for Vchip Rathing
  59      =1  //=============================================================================
  60      =1  CODE BYTE Init_Osd_DisplayVchipWindow[] = {
  61      =1  
  62      =1          17,
  63      =1          OSD_Win_Num                             ( BACK_COLOR|RATINGINFO_OSDWIN ),       // 2 bytes
  64      =1          OSD_Win_Attr                    ( WIN_BG_COLOR_EX0 | BACK_COLOR | WIN_3D_TYPE0 | WIN_3D_EN0 | WIN_EN ),
  65      =1          OSD_Win_Start                   ( ((PHR_-12*18*LOGO_ZOOM-18)/2), ((PVR_-18*2*LOGO_ZOOM-8)/2)),  // 3 bytes
  66      =1          OSD_Win_Width                   ( 18 ),
  67      =1          OSD_Win_Height                  ( 2 ),
  68      =1          OSD_Win_Border                  ( WIN_BD_EN | BG_COLOR_WHITE | WIN_BD_WIDTH(1) ),
  69      =1          OSD_Win_HBorder                 ( WIN_BD_COLOR_EX0 | WIN_H_BD_W(0x10) ),
  70      =1          OSD_Win_VBorder                 ( WIN_V_BD_W(0x08) ),
  71      =1          OSD_Win_CH_Space                ( WIN_CH_HSPACE(0) | WIN_CH_VSPACE(0) ),
  72      =1          OSD_Win_ZM_SAddr                ( WIN_VZOOM(LOGO_ZOOM), WIN_HZOOM(LOGO_ZOOM), WIN_SADDR(RATINGINFO_ADDR) ),     // 2 bytes
  73      =1          OSD_Win_Shadow                  ( WIN_SHADOW_EN0 | BACK_COLOR | WIN_SHADOW_W(0) ),
  74      =1          OSD_Win_Blending                ( 0x00 ),
  75      =1          OSD_Win_CH_BorderShadow ( WIN_SHADOW_COLOR_EX0 | WIN_MULTI_EN | WIN_V_EXT_EN0 
  77      =1                                  | WIN_CH_BDSH_SEL(SEL_BORDER) 
  77      =1                                  | WIN_CH_BDSH_COLOR_EX0 | CH_COLOR_BLACK ),
  78      =1  
  79      =1          0 // End of Data
  80      =1  };
  81      =1  //=============================================================================
  82      =1  //                      Initialize Window for DisplayMuteInfo
  83      =1  //=============================================================================
  84      =1  CODE BYTE Init_Osd_DisplayMuteInfo[] = {
  85      =1  
  86      =1          17,
  87      =1          OSD_Win_Num                             ( BACK_COLOR|TVINFO_OSDWIN ),   // 2 bytes
  88      =1          OSD_Win_Attr                    ( WIN_BG_COLOR_EX0 | BG_COLOR_BLACK | WIN_3D_TYPE0 | WIN_3D_EN0 | WIN_EN0 ),
  89      =1          OSD_Win_Start                   ( PHR_-12*4*MUTE_ZOOM, 0 ),     // 3 bytes
  90      =1          OSD_Win_Width                   ( 4 ),
  91      =1          OSD_Win_Height                  ( 1 ),
  92      =1          OSD_Win_Border                  ( WIN_BD_EN0 | BG_COLOR_WHITE | WIN_BD_WIDTH(0) ),
  93      =1          OSD_Win_HBorder                 ( WIN_BD_COLOR_EX0 | WIN_H_BD_W(0) ),
  94      =1          OSD_Win_VBorder                 ( WIN_V_BD_W(0x00) ),
  95      =1          OSD_Win_CH_Space                ( WIN_CH_HSPACE(0) | WIN_CH_VSPACE(0) ),
  96      =1          OSD_Win_ZM_SAddr                ( WIN_VZOOM(MUTE_ZOOM), WIN_HZOOM(MUTE_ZOOM), WIN_SADDR(MUTEINFO_ADDR) ),       // 2 bytes
  97      =1          OSD_Win_Shadow                  ( WIN_SHADOW_EN0 | BG_COLOR_BLACK | WIN_SHADOW_W(0) ),
  98      =1          OSD_Win_Blending                ( 0x0f ),
  99      =1          OSD_Win_CH_BorderShadow ( WIN_SHADOW_COLOR_EX0 | WIN_MULTI_EN | WIN_V_EXT_EN0 
 101      =1                                  | WIN_CH_BDSH_SEL(SEL_BORDER) 
 101      =1                                  | WIN_CH_BDSH_COLOR_EX0 | CH_COLOR_BLACK ),
 102      =1  
 103      =1          0 // End of Data
 104      =1  };
 105      =1  //=============================================================================
 106      =1  //                      Initialize Window for DisplayTvchannel
 107      =1  //=============================================================================
 108      =1  CODE BYTE Init_Osd_DisplayTVChannel[] = {
 109      =1  
 110      =1          17,
 111      =1          OSD_Win_Num                             ( BACK_COLOR|TVINFO_OSDWIN ),   // 2 bytes
 112      =1          OSD_Win_Attr                    ( WIN_BG_COLOR_EX0 | BG_COLOR_BLACK | WIN_3D_TYPE0 | WIN_3D_EN0 | WIN_EN0 ),
 113      =1          OSD_Win_Start                   ( PHR_-12*3*TVCHN_ZOOM, 0 ),    // 3 bytes
 114      =1          OSD_Win_Width                   ( 3 ),
 115      =1          OSD_Win_Height                  ( 1 ),
 116      =1          OSD_Win_Border                  ( WIN_BD_EN0 | BG_COLOR_WHITE | WIN_BD_WIDTH(0) ),
 117      =1          OSD_Win_HBorder                 ( WIN_BD_COLOR_EX0 | WIN_H_BD_W(0) ),
 118      =1          OSD_Win_VBorder                 ( WIN_V_BD_W(0x00) ),
 119      =1          OSD_Win_CH_Space                ( WIN_CH_HSPACE(0) | WIN_CH_VSPACE(0) ),
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 68  

 120      =1          OSD_Win_ZM_SAddr                ( WIN_VZOOM(TVCHN_ZOOM), WIN_HZOOM(TVCHN_ZOOM), WIN_SADDR(TVCHINFO_ADDR) ),     // 2 bytes
 121      =1          OSD_Win_Shadow                  ( WIN_SHADOW_EN0 | BG_COLOR_BLACK | WIN_SHADOW_W(0) ),
 122      =1          OSD_Win_Blending                ( 0x0f ),
 123      =1          OSD_Win_CH_BorderShadow ( WIN_SHADOW_COLOR_EX0 | WIN_MULTI_EN | WIN_V_EXT_EN0 
 125      =1                                  | WIN_CH_BDSH_SEL(SEL_BORDER) 
 125      =1                                  | WIN_CH_BDSH_COLOR_EX0 | CH_COLOR_BLACK ),
 126      =1          0 // End of Data
 127      =1  };
 128      =1  
 129      =1  //=============================================================================
 130      =1  //                      Initialize Window for DisplayPCInfo
 131      =1  //=============================================================================
 132      =1  CODE BYTE Init_Osd_DisplayPCInfo[] = {
 133      =1  
 134      =1          17,
 135      =1          OSD_Win_Num                             ( BACK_COLOR|PCINFO_OSDWIN ),   // 2 bytes
 136      =1          OSD_Win_Attr                    ( WIN_BG_COLOR_EX0 | BACK_COLOR | WIN_3D_TYPE0 | WIN_3D_EN0 | WIN_EN0 ),
 137      =1          OSD_Win_Start                   ( 12, 13 ),     // 3 bytes
 138      =1          OSD_Win_Width                   ( 10 ),
 139      =1          OSD_Win_Height                  ( 1 ),
 140      =1          OSD_Win_Border                  ( WIN_BD_EN | OSDMENU_OUTLINE_COLOR | WIN_BD_WIDTH(1) ),
 141      =1          OSD_Win_HBorder                 ( WIN_BD_COLOR_EX0 | WIN_H_BD_W(4) ),
 142      =1          OSD_Win_VBorder                 ( WIN_V_BD_W(4) ),
 143      =1          OSD_Win_CH_Space                ( WIN_CH_HSPACE(0) | WIN_CH_VSPACE(0) ),
 144      =1          OSD_Win_ZM_SAddr                ( WIN_VZOOM(PCINFO_ZOOM), WIN_HZOOM(PCINFO_ZOOM), WIN_SADDR(PCMEASUREINFO_ADDR) ),      // 2
             - bytes
 145      =1          OSD_Win_Shadow                  ( WIN_SHADOW_EN0 | BG_COLOR_BLACK | WIN_SHADOW_W(0) ),
 146      =1          OSD_Win_Blending                ( 4 ),
 147      =1          OSD_Win_CH_BorderShadow ( WIN_SHADOW_COLOR_EX0 | WIN_MULTI_EN | WIN_V_EXT_EN0 
 149      =1                                  | WIN_CH_BDSH_SEL(SEL_BORDER) 
 149      =1                                  | WIN_CH_BDSH_COLOR_EX0 | CH_COLOR_BLACK ),
 150      =1  
 151      =1          0 // End of Data
 152      =1  };
 153      =1  //=============================================================================
 154      =1  //                      Initialize Window for DisplayInput
 155      =1  //=============================================================================
 156      =1  CODE BYTE Init_Osd_DisplayInput[] = {
 157      =1  
 158      =1          //----- Input Selection : Zoom 2
 159      =1          17,
 160      =1          OSD_Win_Num                             ( BACK_COLOR|INPUTINFO_OSDWIN-1 ),      // 2 bytes
 161      =1          OSD_Win_Attr                    ( WIN_BG_COLOR_EX0 | BACK_COLOR | WIN_3D_TYPE0 | WIN_3D_EN0 | WIN_EN0 ),
 162      =1          OSD_Win_Start                   ( 12, 13 ),     // 3 bytes
 163      =1          OSD_Win_Width                   ( 15/*19*/ ),
 164      =1          OSD_Win_Height                  ( 1 ),
 165      =1          OSD_Win_Border                  ( WIN_BD_EN0 | OSDMENU_OUTLINE_COLOR | WIN_BD_WIDTH(1) ),
 166      =1          OSD_Win_HBorder                 ( WIN_BD_COLOR_EX0 | WIN_H_BD_W(1) ),
 167      =1          OSD_Win_VBorder                 ( WIN_V_BD_W(0x00) ),
 168      =1          OSD_Win_CH_Space                ( WIN_CH_HSPACE(0) | WIN_CH_VSPACE(0) ),
 169      =1          OSD_Win_ZM_SAddr                ( WIN_VZOOM(INPUTINFO_ZOOM), WIN_HZOOM(WINZOOMx1), WIN_SADDR(INPUTINFO_ADDR) ), // 2 by
             -tes
 170      =1          OSD_Win_Shadow                  ( WIN_SHADOW_EN0 | BG_COLOR_BLACK | WIN_SHADOW_W(0) ),
 171      =1          OSD_Win_Blending                ( 8 ),
 172      =1          OSD_Win_CH_BorderShadow ( WIN_SHADOW_COLOR_EX0 | WIN_MULTI_EN | WIN_V_EXT_EN0 
 174      =1                                  | WIN_CH_BDSH_SEL(SEL_BORDER) 
 174      =1                                  | WIN_CH_BDSH_COLOR_EX0 | CH_COLOR_BLACK ),
 175      =1                                  
 176      =1          #if 0           //wiilaim-981029
           =1         //----- Input Discription : Zoom 1
           =1         17,
           =1         OSD_Win_Num                             ( BACK_COLOR|INPUTINFO_OSDWIN ),        // 2 bytes
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 69  

           =1         OSD_Win_Attr                    ( WIN_BG_COLOR_EX0 | BACK_COLOR | WIN_3D_TYPE0 | WIN_3D_EN0 | WIN_EN0 ),
           =1         OSD_Win_Start                   ( 11, 12 ),     // 3 bytes
           =1         OSD_Win_Width                   ( 0x11 ),
           =1                 #ifdef  WQVGA
           =1         OSD_Win_Height                  ( 2 ),
           =1                 #else
           =1         OSD_Win_Height                  ( 3 ),
           =1                 #endif
           =1         OSD_Win_Border                  ( WIN_BD_EN | OSDMENU_OUTLINE_COLOR | WIN_BD_WIDTH(1) ),
           =1         OSD_Win_HBorder                 ( WIN_BD_COLOR_EX0 | WIN_H_BD_W(8) ),
           =1         OSD_Win_VBorder                 ( WIN_V_BD_W(0x00) ),
           =1         OSD_Win_CH_Space                ( WIN_CH_HSPACE(0) | WIN_CH_VSPACE(0) ),
           =1         OSD_Win_ZM_SAddr                ( WIN_VZOOM(WINZOOMx1), WIN_HZOOM(WINZOOMx1), WIN_SADDR(INPUTINFO_ADDR) ),      // 2 bytes
           =1         OSD_Win_Shadow                  ( WIN_SHADOW_EN0 | BG_COLOR_BLACK | WIN_SHADOW_W(0) ),
           =1         OSD_Win_Blending                ( 4 ),
           =1         OSD_Win_CH_BorderShadow ( WIN_SHADOW_COLOR_EX0 | WIN_MULTI_EN | WIN_V_EXT_EN0 
           =1                                 | WIN_CH_BDSH_SEL(SEL_BORDER) 
           =1                                 | WIN_CH_BDSH_COLOR_EX0 | CH_COLOR_BLACK ),
           =1         #endif                        
 199      =1  
 200      =1          //----- Input Selection : Zoom 4
 201      =1          17,
 202      =1          OSD_Win_Num                             ( BACK_COLOR|DVRStatus_OSDWIN ),        // 2 bytes
 203      =1          OSD_Win_Attr                    ( WIN_BG_COLOR_EX0 | BACK_COLOR | WIN_3D_TYPE0 | WIN_3D_EN0 | WIN_EN0 ),
 204      =1          OSD_Win_Start                   ( 12, 540 ),    // 3 bytes
 205      =1          OSD_Win_Width                   ( 30 ),
 206      =1          OSD_Win_Height                  ( 1 ),
 207      =1          OSD_Win_Border                  ( WIN_BD_EN0 | OSDMENU_OUTLINE_COLOR | WIN_BD_WIDTH(1) ),
 208      =1          OSD_Win_HBorder                 ( WIN_BD_COLOR_EX0 | WIN_H_BD_W(1) ),
 209      =1          OSD_Win_VBorder                 ( WIN_V_BD_W(0x00) ),
 210      =1          OSD_Win_CH_Space                ( WIN_CH_HSPACE(0) | WIN_CH_VSPACE(0) ),
 211      =1          OSD_Win_ZM_SAddr                ( WIN_VZOOM(WINZOOMx2), WIN_HZOOM(WINZOOMx2), WIN_SADDR(DVRStatus_ADDR) ),      // 2 bytes
 212      =1          OSD_Win_Shadow                  ( WIN_SHADOW_EN0 | BG_COLOR_BLACK | WIN_SHADOW_W(0) ),
 213      =1          OSD_Win_Blending                ( 8 ),
 214      =1          OSD_Win_CH_BorderShadow ( WIN_SHADOW_COLOR_EX0 | WIN_MULTI_EN | WIN_V_EXT_EN0 
 216      =1                                  | WIN_CH_BDSH_SEL(SEL_BORDER) 
 216      =1                                  | WIN_CH_BDSH_COLOR_EX0 | CH_COLOR_BLACK ),
 217      =1  
 218      =1          0 // End of Data
 219      =1  };          
 220      =1                  
 221      =1  
 222      =1  #ifdef ADD_ANALOGPANEL
           =1 CODE BYTE Init_Osd_DisplayInput_A[] = {
           =1         //----- Input Selection : Zoom 1
           =1         17,
           =1         OSD_Win_Num                             ( BACK_COLOR|INPUTINFO_OSDWIN-1 ),      // 2 bytes
           =1         OSD_Win_Attr                    ( WIN_BG_COLOR_EX0 | BACK_COLOR | WIN_3D_TYPE0 | WIN_3D_EN0 | WIN_EN0 ),
           =1         OSD_Win_Start                   ( 12, 13 ),     // 3 bytes
           =1         OSD_Win_Width                   ( 9 ),
           =1         OSD_Win_Height                  ( 1 ),
           =1         OSD_Win_Border                  ( WIN_BD_EN0 | OSDMENU_OUTLINE_COLOR | WIN_BD_WIDTH(1) ),
           =1         OSD_Win_HBorder                 ( WIN_BD_COLOR_EX0 | WIN_H_BD_W(1) ),
           =1         OSD_Win_VBorder                 ( WIN_V_BD_W(0x00) ),
           =1         OSD_Win_CH_Space                ( WIN_CH_HSPACE(0) | WIN_CH_VSPACE(0) ),
           =1         OSD_Win_ZM_SAddr                ( WIN_VZOOM(WINZOOMx1), WIN_HZOOM(WINZOOMx2), WIN_SADDR(INPUTINFO_ADDR) ),      // 2 bytes
           =1         OSD_Win_Shadow                  ( WIN_SHADOW_EN0 | BG_COLOR_BLACK | WIN_SHADOW_W(0) ),
           =1         OSD_Win_Blending                ( 4 ),
           =1         OSD_Win_CH_BorderShadow ( WIN_SHADOW_COLOR_EX0 | WIN_MULTI_EN | WIN_V_EXT_EN0 
           =1                                 | WIN_CH_BDSH_SEL(SEL_BORDER) 
           =1                                 | WIN_CH_BDSH_COLOR_EX0 | CH_COLOR_BLACK ),
           =1 
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 70  

           =1         8,
           =1         OSD_Win_Num                             ( BACK_COLOR|INPUTINFO_OSDWIN ),        // 2 bytes
           =1         OSD_Win_Attr                    ( WIN_BG_COLOR_EX0 | BACK_COLOR | WIN_3D_TYPE0 | WIN_3D_EN0 | WIN_EN0 ),//1
           =1         OSD_Win_Start                   ( 11, 12 ),     // 3 bytes
           =1         OSD_Win_Width                   ( 0x11 ),
           =1         OSD_Win_Height                  ( 2 ),
           =1         0
           =1 };
           =1 #endif
 251      =1  //=============================================================================
 252      =1  //                      Initialize Window for MainMenu
 253      =1  //=============================================================================
 254      =1  #if (defined ADD_ANALOGPANEL)
           =1  #define OSDHSTART_MAX_A (480-(12+1)*25 - 56*2 -4)  //PHR - (pixelsize +Hspace)*MenuWidth - Hborder*2 - ou
             -tlinewidth*2
           =1  #define OSDVSTART_MAX_A (234-(18+11)*9 - 5*2 ) //  PVR - (Linesize+Vspace)*MENU_HEIGHT - Vborder*2  - out
             -linewidth*2
           =1 CODE BYTE Init_Osd_MainMenu_A[] = {
           =1                                                 #include "data\MenuWindow_A.txt" 
           =1 };
           =1 #endif
 261      =1  
 262      =1  #if ((defined WQVGA) && ((defined ANALOG_7INCH)||(defined TMD_ANALOG)))// || (defined QVGA) 
           =1  #define OSDHSTART_MAX_A (480-(12+2)*25 - 56*2 -8) //OSDHSTART_MAX  //PHR - (pixelsize +Hspace)*MenuWidth 
             -- Hborder*2 - outlinewidth*2
           =1  #define OSDVSTART_MAX_A OSDVSTART_MAX  //  PVR - (Linesize+Vspace)*MENU_HEIGHT - Vborder*2  - outlinewidt
             -h*2
           =1 
           =1 CODE BYTE Init_Osd_MainMenu[] = {
           =1                                                 #include "data\MenuWindow_A.txt" 
           =1 };
           =1 #elif (defined QVGA) && (defined SHARP_LQ050Q5DR01)
           =1  #define OSDHSTART_MAX_A (480-(12+2)*25 - 56*2 -8-10) //OSDHSTART_MAX  //PHR - (pixelsize +Hspace)*MenuWid
             -th - Hborder*2 - outlinewidth*2
           =1  #define OSDVSTART_MAX_A OSDVSTART_MAX  //  PVR - (Linesize+Vspace)*MENU_HEIGHT - Vborder*2  - outlinewidt
             -h*2
           =1 
           =1 CODE BYTE Init_Osd_MainMenu[] = {
           =1                                                 #include "data\MenuWindow_A.txt" 
           =1 };
           =1 #else
 277      =1  CODE BYTE Init_Osd_MainMenu[] = {
 278      =1  //                                              #include "data\MenuWindow.txt" 
 279      =1  /*===========================================================================*/
 280      =1  // Normal Panel Menu Window tabel
 281      =1  /*===========================================================================*/
 282      =1          //----- Top(Left) Window
 283      =1          17,
 284      =1          OSD_Win_Num                             ( BACK_COLOR|OSDMENU_TOPWIN ),  // 2 bytes
 285      =1          OSD_Win_Attr                    ( WIN_BG_COLOR_EX0 | BACK_COLOR | WIN_3D_TYPE0 | WIN_3D_EN0 | WIN_EN0 ),
 286      =1  #ifdef E_Wintek
           =1         OSD_Win_Start                   ( (OSDHSTART_MAX/2-145), ((OSDVSTART_MAX/2)-80) ), // 3 bytes
           =1 #else
 289      =1          OSD_Win_Start                   ( (OSDHSTART_MAX/2+14), ((OSDVSTART_MAX/2)+28) ), // 3 bytes
 290      =1  #endif
 291      =1          OSD_Win_Width                   ( 2 ),
 292      =1          OSD_Win_Height                  ( 5 ),
 293      =1          OSD_Win_Border                  ( WIN_BD_EN | OSDMENU_OUTLINE_COLOR | WIN_BD_WIDTH(1) ),
 294      =1          OSD_Win_HBorder                 ( WIN_BD_COLOR_EX0 | WIN_H_BD_W(4) ),
 295      =1          OSD_Win_VBorder                 ( WIN_V_BD_W(3) ),
 296      =1          OSD_Win_CH_Space                ( WIN_CH_HSPACE(0) | WIN_CH_VSPACE(0x02) ),
 297      =1  #ifdef E_Wintek 
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 71  

           =1         OSD_Win_ZM_SAddr                ( WIN_VZOOM(WINZOOMx4), WIN_HZOOM(WINZOOMx4), WIN_SADDR(OSDMENU_MAINADDR) ),    // 2 bytes
           =1 #else
 300      =1          OSD_Win_ZM_SAddr                ( WIN_VZOOM(WINZOOMx2), WIN_HZOOM(WINZOOMx2), WIN_SADDR(OSDMENU_MAINADDR) ),    // 2 bytes
 301      =1  #endif
 302      =1          OSD_Win_Shadow                  ( WIN_SHADOW_EN0 | BG_COLOR_BLACK | WIN_SHADOW_W(4) ),
 303      =1          OSD_Win_Blending                ( 3 ),
 304      =1          OSD_Win_CH_BorderShadow ( WIN_SHADOW_COLOR_EX0 | WIN_MULTI_EN | WIN_V_EXT_EN0 
 306      =1                                  | WIN_CH_BDSH_SEL(SEL_BORDER) 
 306      =1                                  | WIN_CH_BDSH_COLOR_EX0 | CH_COLOR_BLACK ),
 307      =1  
 308      =1  #if 0           //william-981023
           =1         //----- Title Window
           =1         17,                           
           =1         OSD_Win_Num                             ( BACK_COLOR|OSDMENU_TITLEWIN ),        // 2 bytes
           =1         OSD_Win_Attr                    ( WIN_BG_COLOR_EX0 | TITLE_BACK_COLOR | WIN_3D_TYPE0 | WIN_3D_EN0 | WIN_EN0 ),
           =1         OSD_Win_Start                   ( (OSDHSTART_MAX/2), (OSDVSTART_MAX/2) ), // 3 bytes
           =1         OSD_Win_Width                   ( TITLE_MAX_DESC ), 
           =1         OSD_Win_Height                  ( 0x09 ), 
           =1         OSD_Win_Border                  ( WIN_BD_EN | OSDMENU_OUTLINE_COLOR | WIN_BD_WIDTH(2) ),
           =1         OSD_Win_HBorder                 ( WIN_BD_COLOR_EX | WIN_H_BD_W(0x30+8) ),
           =1         OSD_Win_VBorder                 ( WIN_V_BD_W(0x05) ),
           =1         OSD_Win_CH_Space                ( WIN_CH_HSPACE(1) | WIN_CH_VSPACE(0x0b) ),
           =1         OSD_Win_ZM_SAddr                ( WIN_VZOOM(WINZOOMx1), WIN_HZOOM(WINZOOMx1), WIN_SADDR(OSDMENU_SUBADDR) ),     //25=MENU_W
             -IDTH// 2 bytes
           =1         OSD_Win_Shadow                  ( WIN_SHADOW_EN0 | BG_COLOR_BLACK | WIN_SHADOW_W(8) ),
           =1         OSD_Win_Blending                ( 3 ),
           =1         OSD_Win_CH_BorderShadow ( WIN_SHADOW_COLOR_EX0 | WIN_MULTI_EN | WIN_V_EXT_EN0 
           =1                                 | WIN_CH_BDSH_SEL(SEL_BORDER) 
           =1                                 | WIN_CH_BDSH_COLOR_EX0 | CH_COLOR_BLACK ),
           =1         #endif                        
 327      =1          //----- Sub(Right) Window
 328      =1          17,
 329      =1          OSD_Win_Num                             ( BACK_COLOR|OSDMENUWINDOW ),   // 2 bytes
 330      =1          OSD_Win_Attr                    ( WIN_BG_COLOR_EX0 | BACK_COLOR | WIN_3D_TYPE0 | WIN_3D_EN0 | WIN_EN0 ),
 331      =1  #ifdef E_Wintek
           =1         OSD_Win_Start                   ( ((OSDHSTART_MAX/2-40)), (OSDVSTART_MAX/2-80) ), // 3 bytes
           =1 #else
 334      =1          OSD_Win_Start                   ( ((OSDHSTART_MAX/2)+66+14+2), (OSDVSTART_MAX/2+28) ), // 3 bytes
 335      =1  #endif
 336      =1          OSD_Win_Width                   ( MENU_WIDTH ), //MENU_WIDTH
 337      =1          OSD_Win_Height                  ( MENU_HEIGHT ),        // MENU_HEIGHT
 338      =1          OSD_Win_Border                  ( WIN_BD_EN | OSDMENU_OUTLINE_COLOR | WIN_BD_WIDTH(1) ),
 339      =1          OSD_Win_HBorder                 ( WIN_BD_COLOR_EX | WIN_H_BD_W(0x0c+8) ),
 340      =1          OSD_Win_VBorder                 ( WIN_V_BD_W(0x16+1) ),
 341      =1          OSD_Win_CH_Space                ( WIN_CH_HSPACE(0) | WIN_CH_VSPACE(0x06) ),
 342      =1  #ifdef E_Wintek 
           =1         OSD_Win_ZM_SAddr                ( WIN_VZOOM(WINZOOMx2), WIN_HZOOM(WINZOOMx2), WIN_SADDR(OSDMENU_SUBADDR+MENU_WIDTH) ),  
             -//25=MENU_WIDTH// 2 bytes
           =1 #else
 345      =1          OSD_Win_ZM_SAddr                ( WIN_VZOOM(WINZOOMx1), WIN_HZOOM(WINZOOMx1), WIN_SADDR(OSDMENU_SUBADDR+MENU_WIDTH) ),  
             -//25=MENU_WIDTH// 2 bytes
 346      =1  #endif
 347      =1          OSD_Win_Shadow                  ( WIN_SHADOW_EN0 | BG_COLOR_BLACK | WIN_SHADOW_W(8) ),
 348      =1          OSD_Win_Blending                ( 3 ),
 349      =1          OSD_Win_CH_BorderShadow ( WIN_SHADOW_COLOR_EX0 | WIN_MULTI_EN | WIN_V_EXT_EN0 
 351      =1                                  | WIN_CH_BDSH_SEL(SEL_BORDER) 
 351      =1                                  | WIN_CH_BDSH_COLOR_EX0 | CH_COLOR_BLACK ),
 352      =1  
 353      =1          //----- 3D Cursor Window
 354      =1          17,
 355      =1          OSD_Win_Num                             ( BACK_COLOR|OSDCURSORWINDOW ), // 2 bytes
 356      =1          OSD_Win_Attr                    ( WIN_BG_COLOR_EX | BACK_COLOR | WIN_3D_TYPE0 | WIN_3D_EN | WIN_EN0 ),
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 72  

 357      =1  #ifdef E_Wintek
           =1         OSD_Win_Start                   ( ((OSDHSTART_MAX/2)-145+8), ((OSDVSTART_MAX/2)-80)+10 ), // 3 bytes
           =1 #else
 360      =1          OSD_Win_Start                   ( ((OSDHSTART_MAX/2)+7+14+1), ((OSDVSTART_MAX/2)+4+28+2) ), // 3 bytes
 361      =1  #endif  
 362      =1          OSD_Win_Width                   ( 2 ),
 363      =1          OSD_Win_Height                  ( 1 ),
 364      =1          OSD_Win_Border                  ( WIN_BD_EN | BG_COLOR_WHITE | WIN_BD_WIDTH(1) ),
 365      =1          OSD_Win_HBorder                 ( WIN_BD_COLOR_EX0 | WIN_H_BD_W(0) ),
 366      =1          OSD_Win_VBorder                 ( WIN_V_BD_W(0) ),
 367      =1          OSD_Win_CH_Space                ( WIN_CH_HSPACE(0) | WIN_CH_VSPACE(0x10) ),
 368      =1  #ifdef E_Wintek
           =1         OSD_Win_ZM_SAddr                ( WIN_VZOOM(WINZOOMx4), WIN_HZOOM(WINZOOMx4), WIN_SADDR(OSDMENU_MAINADDR) ),    // 2 bytes
           =1 #else
 371      =1          OSD_Win_ZM_SAddr                ( WIN_VZOOM(WINZOOMx2), WIN_HZOOM(WINZOOMx2), WIN_SADDR(OSDMENU_MAINADDR) ),    // 2 bytes
 372      =1  #endif
 373      =1          OSD_Win_Shadow                  ( WIN_SHADOW_EN0 | BG_COLOR_BLACK | WIN_SHADOW_W(0) ),
 374      =1          OSD_Win_Blending                ( 3 ),
 375      =1          OSD_Win_CH_BorderShadow ( WIN_SHADOW_COLOR_EX | WIN_MULTI_EN | WIN_V_EXT_EN0 
 377      =1                                  | WIN_CH_BDSH_SEL(SEL_SHADOW) 
 377      =1                                  | WIN_CH_BDSH_COLOR_EX0 | CH_COLOR_BLACK ),
 378      =1  
 379      =1          0 // End of Data
 380      =1  /*===========================================================================*/
 381      =1  };
 382      =1  
 383      =1  #endif
 384      =1  
 385      =1  CODE BYTE Init_Osd_BarWindow[] = {
 386      =1  
 387      =1          //----- Bar/Message Window
 388      =1          17,
 389      =1          OSD_Win_Num                             ( BACK_COLOR|OSDBARWINDOW  ),   // 2 bytes
 390      =1          OSD_Win_Attr                    ( WIN_BG_COLOR_EX0 | BACK_COLOR | WIN_3D_TYPE | WIN_3D_EN | WIN_EN0 ),
 391      =1          OSD_Win_Start                   ( ((PHR_-12*25*BAR_ZOOM)/2), (PVR_-18*2*BAR_ZOOM-76) ), // 3 bytes
 392      =1          OSD_Win_Width                   ( 25 ),
 393      =1          OSD_Win_Height                  ( 2 ),
 394      =1          OSD_Win_Border                  ( WIN_BD_EN | OSDMENU_OUTLINE_COLOR | WIN_BD_WIDTH(1) ),
 395      =1          OSD_Win_HBorder                 ( WIN_BD_COLOR_EX0 | WIN_H_BD_W(2) ),
 396      =1          OSD_Win_VBorder                 ( WIN_V_BD_W(4) ),
 397      =1          OSD_Win_CH_Space                ( WIN_CH_HSPACE(0) | WIN_CH_VSPACE(4) ),
 398      =1          OSD_Win_ZM_SAddr                ( WIN_VZOOM(BAR_ZOOM), WIN_HZOOM(BAR_ZOOM), WIN_SADDR(OSDMENU_BARADDR) ),       // 2 bytes
 399      =1          OSD_Win_Shadow                  ( WIN_SHADOW_EN0 | BG_COLOR_BLACK | WIN_SHADOW_W(0) ),
 400      =1          OSD_Win_Blending                ( 5 ),
 401      =1          OSD_Win_CH_BorderShadow ( WIN_SHADOW_COLOR_EX | WIN_MULTI_EN | WIN_V_EXT_EN0 
 403      =1                                  | WIN_CH_BDSH_SEL(SEL_BORDER) 
 403      =1                                  | WIN_CH_BDSH_COLOR_EX0 | CH_COLOR_BLUE ),
 404      =1  
 405      =1          0 // End of Data
 406      =1  };
 407      =1  
1010          
1011          void InitOSDWindow(BYTE *ptr)
1012          {
1013   1              BYTE i, page;
1014   1                      
1015   1              page = ReadTW88(0xff);
1016   1              WriteTW88( 0xff, (page&0xfe));
1017   1              WriteTW88(0xe0, ReadTW88(0xe0) & 0xef);
1018   1      
1019   1          i = 0;
1020   1          while(ptr[i]) {
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 73  

1021   2                      WriteI2Cn_(TW88I2CAddress, &ptr[i+1], ptr[i]);
1022   2                      WriteI2Cn_(TW88I2CAddress, &ptr[i+1], 5);               // To set position LSB...
1023   2      
1024   2              i += ptr[i] + 1;
1025   2          };
1026   1      
1027   1              WriteTW88(0xe0, ReadTW88(0xe0) | 0x10);
1028   1              WriteTW88( 0xff, page );
1029   1      }
1030          
1031          
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 74  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com0047 (BEGIN)
0000         L?0072:
0000 7800        R     MOV     R0,#LOW str
0002         L?0073:
0002 FF                MOV     R7,A
0003         L?0074:
0003 E4                CLR     A
0004 75F001            MOV     B,#01H
0007 120000      E     LCALL   ?C?PLDIPDATA
000A EF                MOV     A,R7
000B 020000      E     LJMP    ?C?CSTPTR
000E         L?0075:
000E         L?0076:
000E EF                MOV     A,R7
000F 14                DEC     A
0010 FB                MOV     R3,A
0011 7D9E              MOV     R5,#09EH
0013 7F8A              MOV     R7,#08AH
0015 22                RET     
0016         L?0077:
0016         L?0078:
0016 7800        R     MOV     R0,#LOW value
0018 E2                MOVX    A,@R0
0019 FE                MOV     R6,A
001A 08                INC     R0
001B E2                MOVX    A,@R0
001C FF                MOV     R7,A
001D 22                RET     
001E         L?0079:
001E 7800        R     MOV     R0,#LOW ptr
0020 120000      E     LCALL   ?C?PLDPDATA
0023 7800        R     MOV     R0,#LOW i
0025 E2                MOVX    A,@R0
0026 F582              MOV     DPL,A
0028 758300            MOV     DPH,#00H
002B 020000      E     LJMP    ?C?CLDOPTR
002E         L?0080:
002E         L?0081:
002E EE                MOV     A,R6
002F F2                MOVX    @R0,A
0030 08                INC     R0
0031 EF                MOV     A,R7
0032 F2                MOVX    @R0,A
0033 08                INC     R0
0034 22                RET     
0035         L?0082:
0035 E2                MOVX    A,@R0
0036 F2                MOVX    @R0,A
0037 08                INC     R0
0038 E2                MOVX    A,@R0
0039 4F                ORL     A,R7
003A F2                MOVX    @R0,A
003B 18                DEC     R0
003C E2                MOVX    A,@R0
003D FE                MOV     R6,A
003E 08                INC     R0
003F E2                MOVX    A,@R0
0040 22                RET     
0041         L?0083:
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 75  

0041         L?0084:
0041 08                INC     R0
0042 E2                MOVX    A,@R0
0043 FB                MOV     R3,A
0044 7D96              MOV     R5,#096H
0046 7F8A              MOV     R7,#08AH
0048 22                RET     
0049         L?0085:
0049         L?0086:
0049 7800        R     MOV     R0,#LOW div
004B E2                MOVX    A,@R0
004C FC                MOV     R4,A
004D 08                INC     R0
004E E2                MOVX    A,@R0
004F FD                MOV     R5,A
0050 22                RET     
0051         L?0087:
0051 120000      E     LCALL   ?C?UIDIV
0054 7800        R     MOV     R0,#LOW i
0056 EE                MOV     A,R6
0057 F2                MOVX    @R0,A
0058 08                INC     R0
0059 EF                MOV     A,R7
005A F2                MOVX    @R0,A
005B 4E                ORL     A,R6
005C 22                RET     
005D         L?0090:
005D A4                MUL     AB
005E F3                MOVX    @R1,A
005F E5F0              MOV     A,B
0061 19                DEC     R1
0062 F3                MOVX    @R1,A
0063 7DA0              MOV     R5,#0A0H
0065 7F8A              MOV     R7,#08AH
0067 22                RET     
0068         L?0091:
0068 F2                MOVX    @R0,A
0069         L?0092:
0069 7B04              MOV     R3,#04H
006B 7D94              MOV     R5,#094H
006D 7F8A              MOV     R7,#08AH
006F 22                RET     
0070         L?0093:
0070 120000      E     LCALL   ?C?UIDIV
0073 7800        R     MOV     R0,#LOW value
0075 EC                MOV     A,R4
0076 F2                MOVX    @R0,A
0077 08                INC     R0
0078 ED                MOV     A,R5
0079 F2                MOVX    @R0,A
007A 22                RET     
007B         L?0095:
007B         L?0096:
007B ED                MOV     A,R5
007C F2                MOVX    @R0,A
007D EF                MOV     A,R7
007E C3                CLR     C
007F 9401              SUBB    A,#01H
0081 22                RET     
0082         L?0097:
0082         L?0098:
0082 E4                CLR     A
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 76  

0083 FB                MOV     R3,A
0084 7D94              MOV     R5,#094H
0086 7F8A              MOV     R7,#08AH
0088 22                RET     
             ; FUNCTION Com0047 (END)

             ; FUNCTION WaitEndofDisplayArea (BEGIN)
                                           ; SOURCE LINE # 41
                                           ; SOURCE LINE # 42
                                           ; SOURCE LINE # 45
0000 120000      R     LCALL   L?0094
0003 7800        R     MOV     R0,#LOW ret
0005 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 47
0006 E4                CLR     A
0007 08                INC     R0
0008 F2                MOVX    @R0,A
0009         ?C0001:
                                           ; SOURCE LINE # 48
0009 120000      R     LCALL   L?0094
000C FF                MOV     R7,A
000D 7800        R     MOV     R0,#LOW ret
000F E2                MOVX    A,@R0
0010 6F                XRL     A,R7
0011 700B              JNZ     ?C0005
                                           ; SOURCE LINE # 49
0013         ?C0003:
0013 7800        R     MOV     R0,#LOW i
0015 E2                MOVX    A,@R0
0016 04                INC     A
0017 F2                MOVX    @R0,A
0018 E2                MOVX    A,@R0
0019 C3                CLR     C
001A 940A              SUBB    A,#0AH
001C 40EB              JC      ?C0001
                                           ; SOURCE LINE # 50
001E         ?C0005:
001E 22                RET     
001F         L?0094:
001F 7D95              MOV     R5,#095H
0021 7F8A              MOV     R7,#08AH
0023 120000      E     LCALL   _ReadI2C
0026 EF                MOV     A,R7
0027 5440              ANL     A,#040H
0029 22                RET     
             ; FUNCTION WaitEndofDisplayArea (END)

             ; FUNCTION Change_OSDColorLookup (BEGIN)
                                           ; SOURCE LINE # 55
                                           ; SOURCE LINE # 56
                                           ; SOURCE LINE # 58
0000 E4                CLR     A
0001 7800        R     MOV     R0,#LOW j
0003 F2                MOVX    @R0,A
0004         ?C0006:
                                           ; SOURCE LINE # 59
0004 E4                CLR     A
0005 7800        R     MOV     R0,#LOW i
0007 F2                MOVX    @R0,A
0008         ?C0009:
0008 7800        R     MOV     R0,#LOW i
000A E2                MOVX    A,@R0
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 77  

000B FF                MOV     R7,A
000C C3                CLR     C
000D 9408              SUBB    A,#08H
000F 502F              JNC     ?C0008
                                           ; SOURCE LINE # 60
0011 08                INC     R0
0012 E2                MOVX    A,@R0
0013 75F008            MOV     B,#08H
0016 A4                MUL     AB
0017 FE                MOV     R6,A
0018 EF                MOV     A,R7
0019 2E                ADD     A,R6
001A 7D9C              MOV     R5,#09CH
                                           ; SOURCE LINE # 61
001C 120000      R     LCALL   L?0099
001F FF                MOV     R7,A
0020 08                INC     R0
0021 E2                MOVX    A,@R0
0022 75F008            MOV     B,#08H
0025 900000      E     MOV     DPTR,#OSD_Color_LookUp_Data_Table
0028 120000      E     LCALL   ?C?OFFXADD
002B E582              MOV     A,DPL
002D 2F                ADD     A,R7
002E F582              MOV     DPL,A
0030 E4                CLR     A
0031 3583              ADDC    A,DPH
0033 F583              MOV     DPH,A
0035 E4                CLR     A
0036 93                MOVC    A,@A+DPTR
0037 7D9D              MOV     R5,#09DH
                                           ; SOURCE LINE # 62
0039 120000      R     LCALL   L?0099
003C 04                INC     A
003D F2                MOVX    @R0,A
003E 80C8              SJMP    ?C0009
                                           ; SOURCE LINE # 63
0040         ?C0008:
0040 7800        R     MOV     R0,#LOW j
0042 E2                MOVX    A,@R0
0043 04                INC     A
0044 F2                MOVX    @R0,A
0045 E2                MOVX    A,@R0
0046 C3                CLR     C
0047 9402              SUBB    A,#02H
0049 40B9              JC      ?C0006
                                           ; SOURCE LINE # 64
004B         ?C0012:
004B 22                RET     
004C         L?0099:
004C FB                MOV     R3,A
004D 7F8A              MOV     R7,#08AH
004F 120000      E     LCALL   _WriteI2C
0052 7800        R     MOV     R0,#LOW i
0054 E2                MOVX    A,@R0
0055 22                RET     
             ; FUNCTION Change_OSDColorLookup (END)

             ; FUNCTION _DownloadFont (BEGIN)
                                           ; SOURCE LINE # 97
0000 7800        R     MOV     R0,#LOW cod
0002 EF                MOV     A,R7
0003 F2                MOVX    @R0,A
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 78  

0004 08                INC     R0
0005 120000      E     LCALL   ?C?PSTPDATA
                                           ; SOURCE LINE # 98
                                           ; SOURCE LINE # 99
0008 120000      R     LCALL   L?0088
000B 4401              ORL     A,#01H
000D 7D94              MOV     R5,#094H
000F 120000      R     LCALL   L?0100
                                           ; SOURCE LINE # 100
0012 7800        R     MOV     R0,#LOW cod
0014 E2                MOVX    A,@R0
0015 7D99              MOV     R5,#099H
0017 120000      R     LCALL   L?0100
                                           ; SOURCE LINE # 103
001A 7DE0              MOV     R5,#0E0H
001C 7F8A              MOV     R7,#08AH
001E 120000      E     LCALL   _ReadI2C
0021 EF                MOV     A,R7
0022 4410              ORL     A,#010H
0024 FB                MOV     R3,A
0025 7DE0              MOV     R5,#0E0H
0027 7F8A              MOV     R7,#08AH
0029 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 104
002C 7800        R     MOV     R0,#LOW fontdata
002E 120000      E     LCALL   ?C?PLDPDATA
0031 7800        E     MOV     R0,#LOW ?_WriteI2Cn?BYTE+05H
0033 741B              MOV     A,#01BH
0035 F2                MOVX    @R0,A
0036 7D9A              MOV     R5,#09AH
0038 7F8A              MOV     R7,#08AH
003A 120000      E     LCALL   _WriteI2Cn
                                           ; SOURCE LINE # 106
003D 120000      R     LCALL   L?0088
0040 54FE              ANL     A,#0FEH
0042 FB                MOV     R3,A
0043 7D94              MOV     R5,#094H
0045 7F8A              MOV     R7,#08AH
0047 020000      E     LJMP    _WriteI2C
                                           ; SOURCE LINE # 107
004A         L?0088:
004A 7D94              MOV     R5,#094H
004C 7F8A              MOV     R7,#08AH
004E 120000      E     LCALL   _ReadI2C
0051 EF                MOV     A,R7
0052 22                RET     
0053         L?0100:
0053 FB                MOV     R3,A
0054 7F8A              MOV     R7,#08AH
0056 120000      E     LCALL   _WriteI2C
0059 22                RET     
             ; FUNCTION _DownloadFont (END)

             ; FUNCTION DownloadUDFont (BEGIN)
                                           ; SOURCE LINE # 109
                                           ; SOURCE LINE # 110
                                           ; SOURCE LINE # 113
0000 7B60              MOV     R3,#060H
0002 7D9B              MOV     R5,#09BH
0004 7F8A              MOV     R7,#08AH
0006 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 115
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 79  

0009 E4                CLR     A
000A 7800        R     MOV     R0,#LOW i
000C F2                MOVX    @R0,A
000D         ?C0014:
000D 7800        R     MOV     R0,#LOW i
000F E2                MOVX    A,@R0
0010 FF                MOV     R7,A
0011 C3                CLR     C
0012 94E2              SUBB    A,#0E2H
0014 5020              JNC     ?C0017
0016 EF                MOV     A,R7
0017 9490              SUBB    A,#090H
0019 501B              JNC     ?C0017
                                           ; SOURCE LINE # 116
001B EF                MOV     A,R7
001C 75F01B            MOV     B,#01BH
001F A4                MUL     AB
0020 2400        E     ADD     A,#LOW RAMFONTDATA
0022 F9                MOV     R1,A
0023 7400        E     MOV     A,#HIGH RAMFONTDATA
0025 35F0              ADDC    A,B
0027 FA                MOV     R2,A
0028 7BFF              MOV     R3,#0FFH
002A E2                MOVX    A,@R0
002B FF                MOV     R7,A
002C 120000      R     LCALL   _DownloadFont
                                           ; SOURCE LINE # 117
002F 7800        R     MOV     R0,#LOW i
0031 E2                MOVX    A,@R0
0032 04                INC     A
0033 F2                MOVX    @R0,A
0034 80D7              SJMP    ?C0014
                                           ; SOURCE LINE # 118
0036         ?C0017:
0036 22                RET     
             ; FUNCTION DownloadUDFont (END)

             ; FUNCTION _SetOSDWindowX_TW88 (BEGIN)
                                           ; SOURCE LINE # 176
0000 7800        R     MOV     R0,#LOW x
;---- Variable 'winno' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 177
                                           ; SOURCE LINE # 181
0002 120000      R     LCALL   L?0095
0005 4036              JC      ?C0020
0007 EF                MOV     A,R7
0008 D3                SETB    C
0009 9408              SUBB    A,#08H
000B 5030              JNC     ?C0020
000D         ?C0018:
                                           ; SOURCE LINE # 182
000D 120000      R     LCALL   L?0075
0010 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 184
0013 7800        R     MOV     R0,#LOW x
0015 E2                MOVX    A,@R0
0016 75F008            MOV     B,#08H
0019 7900        R     MOV     R1,#LOW tmp+01H
                                           ; SOURCE LINE # 186
001B 120000      R     LCALL   L?0090
001E 120000      E     LCALL   _ReadI2C
0021 EF                MOV     A,R7
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 80  

0022 54F0              ANL     A,#0F0H
;---- Variable 'dat' assigned to Register 'R5' ----
0024 FD                MOV     R5,A
                                           ; SOURCE LINE # 187
0025 7800        R     MOV     R0,#LOW tmp
0027 E2                MOVX    A,@R0
0028 4D                ORL     A,R5
                                           ; SOURCE LINE # 189
0029 FB                MOV     R3,A
002A 7DA0              MOV     R5,#0A0H
002C 7F8A              MOV     R7,#08AH
002E 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 190
0031 7800        R     MOV     R0,#LOW tmp
0033 08                INC     R0
0034 E2                MOVX    A,@R0
0035 FB                MOV     R3,A
0036 7DA1              MOV     R5,#0A1H
0038 7F8A              MOV     R7,#08AH
003A 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 191
003D         ?C0020:
003D 22                RET     
             ; FUNCTION _SetOSDWindowX_TW88 (END)

             ; FUNCTION _SetOSDWindowY_TW88 (BEGIN)
                                           ; SOURCE LINE # 193
0000 7800        R     MOV     R0,#LOW y
;---- Variable 'winno' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 194
                                           ; SOURCE LINE # 198
0002 120000      R     LCALL   L?0095
0005 4039              JC      ?C0023
0007 EF                MOV     A,R7
0008 D3                SETB    C
0009 9408              SUBB    A,#08H
000B 5033              JNC     ?C0023
000D         ?C0021:
                                           ; SOURCE LINE # 199
000D 120000      R     LCALL   L?0075
0010 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 201
0013 7800        R     MOV     R0,#LOW y
0015 E2                MOVX    A,@R0
0016 75F004            MOV     B,#04H
0019 7900        R     MOV     R1,#LOW tmp+01H
                                           ; SOURCE LINE # 203
001B 120000      R     LCALL   L?0090
001E 120000      E     LCALL   _ReadI2C
0021 EF                MOV     A,R7
0022 540F              ANL     A,#0FH
;---- Variable 'dat' assigned to Register 'R5' ----
0024 FD                MOV     R5,A
                                           ; SOURCE LINE # 204
0025 7800        R     MOV     R0,#LOW tmp
0027 E2                MOVX    A,@R0
0028 C4                SWAP    A
0029 54F0              ANL     A,#0F0H
002B 4D                ORL     A,R5
                                           ; SOURCE LINE # 206
002C FB                MOV     R3,A
002D 7DA0              MOV     R5,#0A0H
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 81  

002F 7F8A              MOV     R7,#08AH
0031 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 207
0034 7800        R     MOV     R0,#LOW tmp
0036 08                INC     R0
0037 E2                MOVX    A,@R0
0038 FB                MOV     R3,A
0039 7DA2              MOV     R5,#0A2H
003B 7F8A              MOV     R7,#08AH
003D 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 208
0040         ?C0023:
0040 22                RET     
             ; FUNCTION _SetOSDWindowY_TW88 (END)

             ; FUNCTION _ShowOSDWindowAll (BEGIN)
                                           ; SOURCE LINE # 213
0000 7800        R     MOV     R0,#LOW on
0002 EF                MOV     A,R7
0003 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 214
                                           ; SOURCE LINE # 217
0004 120000      R     LCALL   WaitEndofDisplayArea
                                           ; SOURCE LINE # 218
0007 7D9C              MOV     R5,#09CH
0009 7F8A              MOV     R7,#08AH
000B 120000      E     LCALL   _ReadI2C
000E 7800        R     MOV     R0,#LOW rd
0010 EF                MOV     A,R7
0011 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 220
0012 18                DEC     R0
0013 E2                MOVX    A,@R0
0014 6006              JZ      ?C0024
                                           ; SOURCE LINE # 221
0016 08                INC     R0
0017 E2                MOVX    A,@R0
0018 54EF              ANL     A,#0EFH
001A 8005              SJMP    ?C0067
001C         ?C0024:
                                           ; SOURCE LINE # 223
001C 7800        R     MOV     R0,#LOW rd
001E E2                MOVX    A,@R0
001F 4410              ORL     A,#010H
0021         ?C0067:
0021 FB                MOV     R3,A
0022 7D9C              MOV     R5,#09CH
0024 7F8A              MOV     R7,#08AH
0026 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 225
0029         ?C0026:
0029 22                RET     
             ; FUNCTION _ShowOSDWindowAll (END)

             ; FUNCTION _ShowOSDWindow_TW88 (BEGIN)
                                           ; SOURCE LINE # 226
0000 7800        R     MOV     R0,#LOW onoff
;---- Variable 'winno' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 227
                                           ; SOURCE LINE # 230
0002 120000      R     LCALL   L?0096
0005 4036              JC      ?C0029
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 82  

0007 EF                MOV     A,R7
0008 D3                SETB    C
0009 9408              SUBB    A,#08H
000B 5030              JNC     ?C0029
000D         ?C0027:
                                           ; SOURCE LINE # 231
000D 120000      R     LCALL   L?0076
0010 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 233
0013 7D9F              MOV     R5,#09FH
0015 7F8A              MOV     R7,#08AH
0017 120000      E     LCALL   _ReadI2C
001A 7800        R     MOV     R0,#LOW rd
001C EF                MOV     A,R7
001D F2                MOVX    @R0,A
                                           ; SOURCE LINE # 234
001E 18                DEC     R0
001F E2                MOVX    A,@R0
0020 6007              JZ      ?C0030
0022 08                INC     R0
0023 E2                MOVX    A,@R0
0024 4401              ORL     A,#01H
0026 F2                MOVX    @R0,A
0027 8006              SJMP    ?C0031
0029         ?C0030:
                                           ; SOURCE LINE # 235
0029 7800        R     MOV     R0,#LOW rd
002B E2                MOVX    A,@R0
002C 54FE              ANL     A,#0FEH
002E F2                MOVX    @R0,A
002F         ?C0031:
                                           ; SOURCE LINE # 237
002F 120000      R     LCALL   WaitEndofDisplayArea
                                           ; SOURCE LINE # 238
0032 7800        R     MOV     R0,#LOW rd
0034 E2                MOVX    A,@R0
0035 FB                MOV     R3,A
0036 7D9F              MOV     R5,#09FH
0038 7F8A              MOV     R7,#08AH
003A 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 239
003D         ?C0029:
003D 22                RET     
             ; FUNCTION _ShowOSDWindow_TW88 (END)

             ; FUNCTION _GetOSDWindowX (BEGIN)
                                           ; SOURCE LINE # 242
;---- Variable 'winno' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 243
                                           ; SOURCE LINE # 246
0000 EF                MOV     A,R7
0001 C3                CLR     C
0002 9401              SUBB    A,#01H
0004 4006              JC      ?C0033
0006 EF                MOV     A,R7
0007 D3                SETB    C
0008 9408              SUBB    A,#08H
000A 4004              JC      ?C0032
000C         ?C0033:
000C E4                CLR     A
000D FE                MOV     R6,A
000E FF                MOV     R7,A
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 83  

000F 22                RET     
0010         ?C0032:
                                           ; SOURCE LINE # 247
0010 120000      R     LCALL   L?0076
0013 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 249
0016 7DA0              MOV     R5,#0A0H
0018 7F8A              MOV     R7,#08AH
001A 120000      E     LCALL   _ReadI2C
001D EF                MOV     A,R7
001E 540F              ANL     A,#0FH
0020 F8                MOV     R0,A
0021 E4                CLR     A
0022 7900        R     MOV     R1,#LOW x+01H
0024 F3                MOVX    @R1,A
0025 E8                MOV     A,R0
0026 19                DEC     R1
0027 F3                MOVX    @R1,A
                                           ; SOURCE LINE # 250
0028 7DA1              MOV     R5,#0A1H
002A 7F8A              MOV     R7,#08AH
002C 120000      E     LCALL   _ReadI2C
002F 7800        R     MOV     R0,#LOW x
                                           ; SOURCE LINE # 252
0031 120000      R     LCALL   L?0082
0034 7803              MOV     R0,#03H
0036         ?C0065:
0036 CE                XCH     A,R6
0037 C3                CLR     C
0038 13                RRC     A
0039 CE                XCH     A,R6
003A 13                RRC     A
003B D8F9              DJNZ    R0,?C0065
003D FF                MOV     R7,A
003E 7E00              MOV     R6,#00H
                                           ; SOURCE LINE # 253
0040         ?C0034:
0040 22                RET     
             ; FUNCTION _GetOSDWindowX (END)

             ; FUNCTION _GetOSDWindowY (BEGIN)
                                           ; SOURCE LINE # 256
;---- Variable 'winno' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 257
                                           ; SOURCE LINE # 260
0000 EF                MOV     A,R7
0001 C3                CLR     C
0002 9401              SUBB    A,#01H
0004 4006              JC      ?C0036
0006 EF                MOV     A,R7
0007 D3                SETB    C
0008 9408              SUBB    A,#08H
000A 4004              JC      ?C0035
000C         ?C0036:
000C E4                CLR     A
000D FE                MOV     R6,A
000E FF                MOV     R7,A
000F 22                RET     
0010         ?C0035:
                                           ; SOURCE LINE # 261
0010 120000      R     LCALL   L?0076
0013 120000      E     LCALL   _WriteI2C
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 84  

                                           ; SOURCE LINE # 263
0016 7DA0              MOV     R5,#0A0H
0018 7F8A              MOV     R7,#08AH
001A 120000      E     LCALL   _ReadI2C
001D EF                MOV     A,R7
001E 54F0              ANL     A,#0F0H
0020 C4                SWAP    A
0021 F8                MOV     R0,A
0022 540F              ANL     A,#0FH
0024 C8                XCH     A,R0
0025 68                XRL     A,R0
0026 7900        R     MOV     R1,#LOW y+01H
0028 F3                MOVX    @R1,A
0029 E4                CLR     A
002A C4                SWAP    A
002B 54F0              ANL     A,#0F0H
002D 48                ORL     A,R0
002E 19                DEC     R1
002F F3                MOVX    @R1,A
                                           ; SOURCE LINE # 264
0030 7DA2              MOV     R5,#0A2H
0032 7F8A              MOV     R7,#08AH
0034 120000      E     LCALL   _ReadI2C
0037 7800        R     MOV     R0,#LOW y
                                           ; SOURCE LINE # 266
0039 120000      R     LCALL   L?0082
003C 7802              MOV     R0,#02H
003E         ?C0066:
003E CE                XCH     A,R6
003F C3                CLR     C
0040 13                RRC     A
0041 CE                XCH     A,R6
0042 13                RRC     A
0043 D8F9              DJNZ    R0,?C0066
0045 FF                MOV     R7,A
0046 7E00              MOV     R6,#00H
                                           ; SOURCE LINE # 267
0048         ?C0037:
0048 22                RET     
             ; FUNCTION _GetOSDWindowY (END)

             ; FUNCTION _WriteStringToAddr (BEGIN)
                                           ; SOURCE LINE # 907
0000 7800        R     MOV     R0,#LOW addr
0002 120000      R     LCALL   L?0080
0005 120000      E     LCALL   ?C?PSTPDATA
                                           ; SOURCE LINE # 908
                                           ; SOURCE LINE # 910
0008 120000      R     LCALL   L?0092
000B 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 912
000E 7800        R     MOV     R0,#LOW addr
0010 120000      R     LCALL   L?0083
0013 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 913
0016 7800        R     MOV     R0,#LOW str
0018 120000      E     LCALL   ?C?PLDPDATA
001B 7800        R     MOV     R0,#LOW cnt
001D E2                MOVX    A,@R0
001E 7800        E     MOV     R0,#LOW ?_WriteI2Cn?BYTE+05H
0020 F2                MOVX    @R0,A
0021 7D97              MOV     R5,#097H
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 85  

0023 7F8A              MOV     R7,#08AH
0025 120000      E     LCALL   _WriteI2Cn
                                           ; SOURCE LINE # 916
0028 120000      R     LCALL   L?0097
002B 020000      E     LJMP    _WriteI2C
             ; FUNCTION _WriteStringToAddr (END)

             ; FUNCTION _DrawAttrCnt (BEGIN)
                                           ; SOURCE LINE # 930
0000 7800        R     MOV     R0,#LOW addr
0002 120000      R     LCALL   L?0080
0005 ED                MOV     A,R5
0006 F2                MOVX    @R0,A
0007 08                INC     R0
0008 EB                MOV     A,R3
                                           ; SOURCE LINE # 931
                                           ; SOURCE LINE # 932
0009 120000      R     LCALL   L?0091
000C 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 933
000F 7800        R     MOV     R0,#LOW addr
0011 120000      R     LCALL   L?0083
0014 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 934
0017 7800        R     MOV     R0,#LOW color
0019 E2                MOVX    A,@R0
001A FB                MOV     R3,A
001B 08                INC     R0
001C E2                MOVX    A,@R0
001D 7800        E     MOV     R0,#LOW ?_WriteI2CnD?BYTE+03H
001F F2                MOVX    @R0,A
0020 7D98              MOV     R5,#098H
0022 7F8A              MOV     R7,#08AH
0024 120000      E     LCALL   _WriteI2CnD
                                           ; SOURCE LINE # 936
0027 120000      R     LCALL   L?0097
002A 020000      E     LJMP    _WriteI2C
             ; FUNCTION _DrawAttrCnt (END)

             ; FUNCTION _ClearDataCnt (BEGIN)
                                           ; SOURCE LINE # 939
0000 7800        R     MOV     R0,#LOW addr
0002 120000      R     LCALL   L?0081
0005 ED                MOV     A,R5
                                           ; SOURCE LINE # 940
                                           ; SOURCE LINE # 942
0006 120000      R     LCALL   L?0091
0009 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 943
000C 7800        R     MOV     R0,#LOW addr
000E 120000      R     LCALL   L?0084
0011 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 944
0014 7800        R     MOV     R0,#LOW cnt
0016 E2                MOVX    A,@R0
0017 7800        E     MOV     R0,#LOW ?_WriteI2CnD?BYTE+03H
0019 F2                MOVX    @R0,A
001A 7B20              MOV     R3,#020H
001C 7D97              MOV     R5,#097H
001E 7F8A              MOV     R7,#08AH
0020 120000      E     LCALL   _WriteI2CnD
                                           ; SOURCE LINE # 947
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 86  

0023 120000      R     LCALL   L?0098
0026 020000      E     LJMP    _WriteI2C
             ; FUNCTION _ClearDataCnt (END)

             ; FUNCTION _utoa (BEGIN)
                                           ; SOURCE LINE # 954
0000 7800        R     MOV     R0,#LOW value
0002 120000      R     LCALL   L?0081
0005 120000      E     LCALL   ?C?PSTPDATA
                                           ; SOURCE LINE # 955
                                           ; SOURCE LINE # 963
0008 7800        R     MOV     R0,#LOW str1
000A 120000      E     LCALL   ?C?PSTPDATA
                                           ; SOURCE LINE # 964
000D E4                CLR     A
000E 7800        R     MOV     R0,#LOW cnt
0010 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 965
0011 18                DEC     R0
0012 E2                MOVX    A,@R0
0013 640A              XRL     A,#0AH
0015 706F              JNZ     ?C0041
                                           ; SOURCE LINE # 966
0017 7800        R     MOV     R0,#LOW div
0019 7427              MOV     A,#027H
001B F2                MOVX    @R0,A
001C 08                INC     R0
001D 7410              MOV     A,#010H
001F F2                MOVX    @R0,A
0020         ?C0042:
0020 120000      R     LCALL   L?0085
0023 C3                CLR     C
0024 940A              SUBB    A,#0AH
0026 EC                MOV     A,R4
0027 9400              SUBB    A,#00H
0029 404E              JC      ?C0043
                                           ; SOURCE LINE # 967
002B 120000      R     LCALL   L?0077
                                           ; SOURCE LINE # 968
002E 120000      R     LCALL   L?0087
0031 600F              JZ      ?C0045
                                           ; SOURCE LINE # 969
0033 18                DEC     R0
0034 08                INC     R0
0035 E2                MOVX    A,@R0
0036 2430              ADD     A,#030H
0038 120000      R     LCALL   L?0072
                                           ; SOURCE LINE # 970
003B 7800        R     MOV     R0,#LOW cnt
003D E2                MOVX    A,@R0
003E 04                INC     A
003F F2                MOVX    @R0,A
                                           ; SOURCE LINE # 971
0040 8013              SJMP    ?C0046
0042         ?C0045:
                                           ; SOURCE LINE # 972
0042 7800        R     MOV     R0,#LOW cnt
0044 E2                MOVX    A,@R0
0045 600E              JZ      ?C0046
                                           ; SOURCE LINE # 973
0047 7800        R     MOV     R0,#LOW str
0049 E4                CLR     A
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 87  

004A 75F001            MOV     B,#01H
004D 120000      E     LCALL   ?C?PLDIPDATA
0050 7430              MOV     A,#030H
0052 120000      E     LCALL   ?C?CSTPTR
0055         ?C0046:
                                           ; SOURCE LINE # 975
0055 120000      R     LCALL   L?0077
0058 7800        R     MOV     R0,#LOW div
005A E2                MOVX    A,@R0
005B FA                MOV     R2,A
005C 08                INC     R0
005D E2                MOVX    A,@R0
005E FB                MOV     R3,A
005F FD                MOV     R5,A
0060 AC02              MOV     R4,AR2
0062 120000      R     LCALL   L?0093
                                           ; SOURCE LINE # 976
0065 7D0A              MOV     R5,#0AH
0067 7C00              MOV     R4,#00H
0069 AF03              MOV     R7,AR3
006B AE02              MOV     R6,AR2
006D 120000      E     LCALL   ?C?UIDIV
0070 7800        R     MOV     R0,#LOW div
0072 EE                MOV     A,R6
0073 F2                MOVX    @R0,A
0074 08                INC     R0
0075 EF                MOV     A,R7
0076 F2                MOVX    @R0,A
0077 80A7              SJMP    ?C0042
0079         ?C0043:
                                           ; SOURCE LINE # 977
0079 7800        R     MOV     R0,#LOW value
007B 08                INC     R0
007C E2                MOVX    A,@R0
007D 2430              ADD     A,#030H
007F 08                INC     R0
0080 120000      R     LCALL   L?0073
                                           ; SOURCE LINE # 978
                                           ; SOURCE LINE # 979
0083 020000      R     LJMP    ?C0070
0086         ?C0041:
                                           ; SOURCE LINE # 980
0086 7800        R     MOV     R0,#LOW radix
0088 E2                MOVX    A,@R0
0089 6410              XRL     A,#010H
008B 7077              JNZ     ?C0048
                                           ; SOURCE LINE # 981
008D 7800        R     MOV     R0,#LOW div
008F 7410              MOV     A,#010H
0091 F2                MOVX    @R0,A
0092 08                INC     R0
0093 E4                CLR     A
0094 F2                MOVX    @R0,A
0095         ?C0050:
0095 120000      R     LCALL   L?0085
0098 C3                CLR     C
0099 9410              SUBB    A,#010H
009B EC                MOV     A,R4
009C 9400              SUBB    A,#00H
009E 4040              JC      ?C0051
                                           ; SOURCE LINE # 982
00A0 120000      R     LCALL   L?0078
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 88  

                                           ; SOURCE LINE # 983
00A3 120000      R     LCALL   L?0087
00A6 6025              JZ      ?C0052
                                           ; SOURCE LINE # 984
00A8 18                DEC     R0
00A9 E2                MOVX    A,@R0
00AA FE                MOV     R6,A
00AB 08                INC     R0
00AC E2                MOVX    A,@R0
00AD FF                MOV     R7,A
00AE C3                CLR     C
00AF 940A              SUBB    A,#0AH
00B1 EE                MOV     A,R6
00B2 9400              SUBB    A,#00H
00B4 4005              JC      ?C0054
                                           ; SOURCE LINE # 985
00B6 EF                MOV     A,R7
00B7 2437              ADD     A,#037H
00B9 8006              SJMP    ?C0068
00BB         ?C0054:
                                           ; SOURCE LINE # 987
00BB 7800        R     MOV     R0,#LOW i
00BD 08                INC     R0
00BE E2                MOVX    A,@R0
00BF 2430              ADD     A,#030H
00C1         ?C0068:
00C1 120000      R     LCALL   L?0072
00C4         ?C0055:
                                           ; SOURCE LINE # 988
00C4 120000      R     LCALL   L?0078
00C7 120000      R     LCALL   L?0086
00CA 120000      R     LCALL   L?0093
                                           ; SOURCE LINE # 989
                                           ; SOURCE LINE # 990
00CD         ?C0052:
00CD 7900        R     MOV     R1,#LOW div
00CF E3                MOVX    A,@R1
00D0 C4                SWAP    A
00D1 F8                MOV     R0,A
00D2 54F0              ANL     A,#0F0H
00D4 C8                XCH     A,R0
00D5 68                XRL     A,R0
00D6 F3                MOVX    @R1,A
00D7 09                INC     R1
00D8 E3                MOVX    A,@R1
00D9 C4                SWAP    A
00DA 540F              ANL     A,#0FH
00DC 48                ORL     A,R0
00DD F3                MOVX    @R1,A
00DE 80B5              SJMP    ?C0050
00E0         ?C0051:
                                           ; SOURCE LINE # 991
00E0 120000      R     LCALL   L?0078
00E3 C3                CLR     C
00E4 940A              SUBB    A,#0AH
00E6 EE                MOV     A,R6
00E7 9400              SUBB    A,#00H
00E9 4005              JC      ?C0056
                                           ; SOURCE LINE # 992
00EB EF                MOV     A,R7
00EC 2437              ADD     A,#037H
00EE 8006              SJMP    ?C0069
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 89  

00F0         ?C0056:
                                           ; SOURCE LINE # 994
00F0 7800        R     MOV     R0,#LOW value
00F2 08                INC     R0
00F3 E2                MOVX    A,@R0
00F4 2430              ADD     A,#030H
00F6         ?C0069:
00F6 FF                MOV     R7,A
00F7 08                INC     R0
00F8 120000      R     LCALL   L?0074
00FB         ?C0057:
                                           ; SOURCE LINE # 995
00FB         ?C0070:
00FB 7800        R     MOV     R0,#LOW str
00FD 120000      E     LCALL   ?C?PLDPDATA
0100 E4                CLR     A
0101 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 996
0104         ?C0048:
                                           ; SOURCE LINE # 997
0104 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 998
0106         ?C0058:
0106 22                RET     
             ; FUNCTION _utoa (END)

             ; FUNCTION _strlen (BEGIN)
                                           ; SOURCE LINE # 999
0000 7800        R     MOV     R0,#LOW str
0002 120000      E     LCALL   ?C?PSTPDATA
                                           ; SOURCE LINE # 1000
                                           ; SOURCE LINE # 1001
;---- Variable 'i' assigned to Register 'R7' ----
0005 E4                CLR     A
0006 FF                MOV     R7,A
0007         ?C0059:
                                           ; SOURCE LINE # 1003
0007 7800        R     MOV     R0,#LOW str
0009 E4                CLR     A
000A 75F001            MOV     B,#01H
000D 120000      E     LCALL   ?C?PLDIPDATA
0010 120000      E     LCALL   ?C?CLDPTR
0013 6003              JZ      ?C0060
0015 0F                INC     R7
0016 80EF              SJMP    ?C0059
0018         ?C0060:
                                           ; SOURCE LINE # 1004
                                           ; SOURCE LINE # 1005
0018         ?C0061:
0018 22                RET     
             ; FUNCTION _strlen (END)

             ; FUNCTION _InitOSDWindow (BEGIN)
                                           ; SOURCE LINE # 1011
0000 7800        R     MOV     R0,#LOW ptr
0002 120000      E     LCALL   ?C?PSTPDATA
                                           ; SOURCE LINE # 1012
                                           ; SOURCE LINE # 1015
0005 7DFF              MOV     R5,#0FFH
0007 7F8A              MOV     R7,#08AH
0009 120000      E     LCALL   _ReadI2C
000C 7800        R     MOV     R0,#LOW page
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 90  

000E EF                MOV     A,R7
000F F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1016
0010 54FE              ANL     A,#0FEH
0012 FB                MOV     R3,A
0013 7DFF              MOV     R5,#0FFH
0015 7F8A              MOV     R7,#08AH
0017 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 1017
001A 7DE0              MOV     R5,#0E0H
001C 7F8A              MOV     R7,#08AH
001E 120000      E     LCALL   _ReadI2C
0021 EF                MOV     A,R7
0022 54EF              ANL     A,#0EFH
0024 120000      R     LCALL   L?0089
                                           ; SOURCE LINE # 1019
0027 E4                CLR     A
0028 7800        R     MOV     R0,#LOW i
002A F2                MOVX    @R0,A
002B         ?C0062:
                                           ; SOURCE LINE # 1020
002B 120000      R     LCALL   L?0079
002E FF                MOV     R7,A
002F 6047              JZ      ?C0063
                                           ; SOURCE LINE # 1021
0031 7800        R     MOV     R0,#LOW i
0033 E2                MOVX    A,@R0
0034 2401              ADD     A,#01H
0036 FD                MOV     R5,A
0037 E4                CLR     A
0038 33                RLC     A
0039 FC                MOV     R4,A
003A 7800        R     MOV     R0,#LOW ptr
003C 120000      E     LCALL   ?C?PLDPDATA
003F E9                MOV     A,R1
0040 2D                ADD     A,R5
0041 F9                MOV     R1,A
0042 EA                MOV     A,R2
0043 3C                ADDC    A,R4
0044 FA                MOV     R2,A
0045 7800        E     MOV     R0,#LOW ?_WriteI2Cn_?BYTE+04H
0047 EF                MOV     A,R7
0048 F2                MOVX    @R0,A
0049 7F8A              MOV     R7,#08AH
004B 120000      E     LCALL   _WriteI2Cn_
                                           ; SOURCE LINE # 1022
004E 7800        R     MOV     R0,#LOW i
0050 E2                MOVX    A,@R0
0051 2401              ADD     A,#01H
0053 FF                MOV     R7,A
0054 E4                CLR     A
0055 33                RLC     A
0056 FE                MOV     R6,A
0057 7800        R     MOV     R0,#LOW ptr
0059 120000      E     LCALL   ?C?PLDPDATA
005C E9                MOV     A,R1
005D 2F                ADD     A,R7
005E F9                MOV     R1,A
005F EA                MOV     A,R2
0060 3E                ADDC    A,R6
0061 FA                MOV     R2,A
0062 7800        E     MOV     R0,#LOW ?_WriteI2Cn_?BYTE+04H
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 91  

0064 7405              MOV     A,#05H
0066 F2                MOVX    @R0,A
0067 7F8A              MOV     R7,#08AH
0069 120000      E     LCALL   _WriteI2Cn_
                                           ; SOURCE LINE # 1024
006C 120000      R     LCALL   L?0079
006F 04                INC     A
0070 FF                MOV     R7,A
0071 7800        R     MOV     R0,#LOW i
0073 E2                MOVX    A,@R0
0074 2F                ADD     A,R7
0075 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1025
0076 80B3              SJMP    ?C0062
0078         ?C0063:
                                           ; SOURCE LINE # 1027
0078 7DE0              MOV     R5,#0E0H
007A 7F8A              MOV     R7,#08AH
007C 120000      E     LCALL   _ReadI2C
007F EF                MOV     A,R7
0080 4410              ORL     A,#010H
0082 120000      R     LCALL   L?0089
                                           ; SOURCE LINE # 1028
0085 7800        R     MOV     R0,#LOW page
0087 E2                MOVX    A,@R0
0088 FB                MOV     R3,A
0089 7DFF              MOV     R5,#0FFH
008B 7F8A              MOV     R7,#08AH
008D 020000      E     LJMP    _WriteI2C
                                           ; SOURCE LINE # 1029
0090         L?0089:
0090 FB                MOV     R3,A
0091 7DE0              MOV     R5,#0E0H
0093 7F8A              MOV     R7,#08AH
0095 120000      E     LCALL   _WriteI2C
0098 22                RET     
             ; FUNCTION _InitOSDWindow (END)

C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 92  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


_WriteI2CnD. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
DWORD. . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
CAM_R. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_ShowOSDWindow_TW88. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  winno. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  onoff. . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0000H  1
  rd . . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0001H  1
Init_Osd_DisplayMuteInfo . . . . . . .  PUBLIC   CODE   ARRAY    003EH  19
CAM_BAR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ABR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_CAR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ACR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_CBR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_BCR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
NumberStringType . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  11
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  width. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  BackColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  Radix. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  NumColor . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  MaxLen . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  PrePostCharLen . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  PrePostChar. . . . . . . . . . . . .  MEMBER   -----  ARRAY    0008H  3
_ClearDataCnt. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  addr . . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0000H  2
  cnt. . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0002H  1
Init_Osd_BarWindow . . . . . . . . . .  PUBLIC   CODE   ARRAY    00D3H  19
Change_OSDColorLookup. . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0000H  1
  j. . . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0001H  1
FontData . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  27
  font . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  27
_strlen. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  str. . . . . . . . . . . . . . . . .  AUTO     PDATA  PTR      0000H  3
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_WriteI2Cn_. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Init_Osd_MainMenu. . . . . . . . . . .  PUBLIC   CODE   ARRAY    009CH  55
AVMode . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
SourceModeType . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
_ShowOSDWindowAll. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  on . . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0000H  1
  rd . . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0001H  1
CAM_NUM. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
OSD_Color_LookUp_Data_Table. . . . . .  EXTERN   CODE   ARRAY    -----  -----
CAM_RAB_H. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
OSDStrInfo . . . . . . . . . . . . . .  PUBLIC   DATA   STRUCT   0000H  8
OSDStrInfo . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  8
  cnt. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  addr . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  attr . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  str. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0004H  4
CAM_BA . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_AB . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
BYTE . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
TimeType . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  7
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 93  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  width. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  BackColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  Format . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  TimeColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  CursorColor. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
RAMFONTDATA. . . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
CAM_CA . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_AC . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_BC . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_CB . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
FontTestWindow . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0000H  24
SourceModeTypeEnum . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
_utoa. . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  value. . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0000H  2
  str. . . . . . . . . . . . . . . . .  AUTO     PDATA  PTR      0002H  3
  radix. . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0005H  1
  cnt. . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0006H  1
  str1 . . . . . . . . . . . . . . . .  AUTO     PDATA  PTR      0007H  3
  i. . . . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    000AH  2
  div. . . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    000CH  2
struct_IdName. . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  17
  Id . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  Name . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0001H  16
EnumType . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  17
  Sz . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  ByLang . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  Str. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0002H  15
MenuType . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  4
  width. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  height . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  TitleColor . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  CursorColor. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
_WriteI2Cn . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CAM_RAB_T. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_ReadI2C . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
WORD . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
Init_Osd_DisplayTVChannel. . . . . . .  PUBLIC   CODE   ARRAY    0051H  19
CAM_AR . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_BR . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_RB . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_CR . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Register . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
_WriteStringToAddr . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  addr . . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0000H  2
  str. . . . . . . . . . . . . . . . .  AUTO     PDATA  PTR      0002H  3
  cnt. . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0005H  1
_WriteI2C. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Init_Osd_DisplayVchipWindow. . . . . .  PUBLIC   CODE   ARRAY    002BH  19
_DrawAttrCnt . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  addr . . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0000H  2
  color. . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0002H  1
  cnt. . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0003H  1
NumType. . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  5
  PrePostCharLen . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  PrePostChar. . . . . . . . . . . . .  MEMBER   -----  ARRAY    0001H  4
_DownloadFont. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 94  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  cod. . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0000H  1
  fontdata . . . . . . . . . . . . . .  AUTO     PDATA  PTR      0001H  3
RegisterInfo . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  Min. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0000H  2
  Max. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0002H  2
  Default. . . . . . . . . . . . . . .  MEMBER   -----  INT      0004H  2
_PCMDATA . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  22
  Support. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  HAN. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  VAN. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0003H  2
  IVF. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0005H  2
  CLOCK. . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0007H  2
  low. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0009H  2
  high . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000BH  2
  Hstart . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000DH  2
  Vstart . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000FH  2
  IPF. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0011H  2
  PPF. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0013H  2
  VBack. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0015H  1
WaitEndofDisplayArea . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ret. . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0000H  1
  i. . . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0001H  1
_GetOSDWindowX . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  winno. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  x. . . . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0000H  2
CAM_QUAD . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_GetOSDWindowY . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  winno. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  y. . . . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0000H  2
DefineMenu . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  16
  Icon . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0000H  2
  Desc . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0002H  3
  PreFnId. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  PostFnId . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  IconColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  DescColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
  Child. . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0009H  2
  Type . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000BH  1
  ActiveWithCursor . . . . . . . . . .  MEMBER   -----  U_CHAR   000CH  1
  Id . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000DH  1
  TypeData . . . . . . . . . . . . . .  MEMBER   -----  PTR      000EH  2
VGAMode. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_SetOSDWindowX_TW88. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  winno. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  x. . . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0000H  1
  tmp. . . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0001H  2
  dat. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
_SetOSDWindowY_TW88. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  winno. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  y. . . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0000H  1
  tmp. . . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0001H  2
  dat. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
SEQ. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
LongRegisterInfo . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  Min. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  Max. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  Default. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
C51 COMPILER V8.16   OSDBASIC                                                              03/04/2011 15:51:17 PAGE 95  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


Init_Osd_DisplayInput. . . . . . . . .  PUBLIC   CODE   ARRAY    0077H  37
Init_Osd_DisplayLogo . . . . . . . . .  PUBLIC   CODE   ARRAY    0018H  19
PictureInfo. . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  4
  Register_Addr. . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  EEPROM_Addr. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  Control_Range. . . . . . . . . . . .  MEMBER   -----  PTR      0002H  2
CAM_ABR_T3 . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ABR_T4 . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
ptrFont. . . . . . . . . . . . . . . .  PUBLIC   DATA   PTR      0008H  2
DownloadUDFont . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0000H  1
CAM_A. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_B. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_C. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_D. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_CAB. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_BAC. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ABC. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_InitOSDWindow . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ptr. . . . . . . . . . . . . . . . .  AUTO     PDATA  PTR      0000H  3
  i. . . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0003H  1
  page . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0004H  1
Init_Osd_DisplayPCInfo . . . . . . . .  PUBLIC   CODE   ARRAY    0064H  19


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1352    ----
   CONSTANT SIZE    =    230    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----      58
   DATA SIZE        =     10    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
