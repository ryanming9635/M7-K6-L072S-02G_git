C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 1   


C51 COMPILER V8.16, COMPILATION OF MODULE PC_EEP
OBJECT MODULE PLACED IN .\Output\pc_eep.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE pc_eep.c COMPACT OPTIMIZE(9,SIZE) BROWSE INCDIR(.\Include\) DEBUG OBJECTEXT
                    -END CODE LISTINCLUDE SYMBOLS PRINT(.\Source\pc_eep.lst) OBJECT(.\Output\pc_eep.obj)

line level    source

   1          //pc_eep.c
   2          //=========================================================================
   3          //      EEPROM structure
   4          
   5          //      0x80    ----------- PC Color Temp Data --------------------------------
   6          //                      0       PC Color Temp Mode
   7          //                      1       R G B for Mode 1
   8          //                      4       R G B for Mode 2
   9          //                      7   R G B for Mode 3
  10          //                      A       R G B for User Mode
  11          //
  12          //      0x90    ----------- PC Input ------------------------------------------
  13          //
  14          //                      0       ADC Coarse
  15          //                      1       ADC Phase
  16          //                      2       Vertical Active Start
  17          //                      3       Horizontal Active Start
  18          //
  19          
  20          #include "Config.h"
   1      =1  /*****************************************************************************/
   2      =1  /*                           System Configurations                           */
   3      =1  /*                                                      rev 0.10 include auto test                                               */
   4      =1  // 0.11 change DTV, PC input initial download data correct for Charge Pump
   5      =1  // 0.12 correct phase measurement routine '>>3'
   6      =1  // 0.13 enable function for SPI control... only EXT MCU case
   7      =1  // 0.14 corrected PC measurement......
   8      =1  // 0.0a test function only for CVBS, SVIDEO
   9      =1  // 0.15 corrected DTV scaler setting for panel resolutions
  10      =1  // 0.0b panel for AND 640x480 TICON panel
  11      =1  // 0.16 corrected COMPONENT scaler setting for panel resolutions        11/21/2007
  12      =1  // 0.0c automatic chip test
  13      =1  // 0.17 add monitor function, osd grid for writing grid
  14      =1  // 0.18 add component, dtv pc for analogpanel, 12/06/2007
  15      =1  // 0.19 correct pal input for CES, 12/20/2007
  16      =1  // 0.1a CCFL control, 12/28/2007
  17      =1  // 0.19 Multi Grid for Banking on Internal MCU  01/17/2008
  18      =1  // 0.20 CCFL contol for backlight brightness    01/21/2008
  19      =1  // 0.21 CCFL contol for backlight brightness    01/25/2008
  20      =1  // 0.22 phase setting 02/07/2008
  21      =1  // 0.221 display input correction 04/03/2008
  22      =1  // 0.23 PC, DTV mode, no signal display
  23      =1  // 0.24 PC Auto Color adjustment
  24      =1  // 0.25 revised PC Auto Clock adjustment - find divide number and phase
  25      =1  // 0.26 Digital RGB for TW8826
  26      =1  // 0.27 Correct LVDS control                                    08/22/2008
  27      =1  // 0.28 Add WSVGA resolution                                    10/23/2008
  28      =1  // 0.29 Add NEW GRID                                                    11/14/2008
  29      =1  // 0.30 Fix DTV input                                                   12/10/2008
  30      =1  // 0.31 Add 1080i23, 24, 25A, 25B                               01/20/2009
  31      =1  // 0.32 TCON setting FIX all mode                               01/22/2009
  32      =1  // 0.33 autodetect is auto on/off by dip sw1    02/02/2009
  33      =1  // 0.34 Fix autocolor function and clamp position 02/08/2009
  34      =1  /*****************************************************************************/
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 2   

  35      =1  #ifndef __CONFIG_H__
  36      =1  #define __CONFIG_H__
  37      =1  
  38      =1  //#define INTERNAL_MCU -- defined by Project Compiler session
  39      =1  
  40      =1  
  41      =1  //-----------------------------------------------------------------------------
  42      =1  //              Firmware Version
  43      =1  //-----------------------------------------------------------------------------
  44      =1  #define FWVER                   0x140                   // Rev 0.14
  45      =1  //-----------------------------------------------------------------------------
  46      =1  //              Compiler
  47      =1  //-----------------------------------------------------------------------------
  48      =1  #define KEILC                                           // Keil C 5.0
  49      =1  //-----------------------------------------------------------------------------
  50      =1  //              MPU Clock
  51      =1  //-----------------------------------------------------------------------------
  52      =1  #ifndef INTERNAL_MCU
  53      =1  //#define CLOCK_11M                                     // 11.0592MHz
  54      =1  #define CLOCK_22M                                       // 22.1184MHz
  55      =1  #else                                                           // INTERNAL_MCU
           =1 #define CLOCK_27M                                       // 27MHz
           =1 #define REG_START_ADDRESS       0xc000          // register start 0xc000, for page0, 0xc100-page1 
           =1 #endif
  59      =1  //-----------------------------------------------------------------------------
  60      =1  //              TW88 Version
  61      =1  //-----------------------------------------------------------------------------
  62      =1  #define TW8816
  63      =1  //-----------------------------------------------------------------------------
  64      =1  //              Options for Backlight control
  65      =1  //-----------------------------------------------------------------------------
  66      =1  //#define       BACKLIGHT_CCFL
  67      =1  //#define       BACKLIGHT_LED
  68      =1  #define BACKLIGHT_PWM
  69      =1  
  70      =1  //-----------------------------------------------------------------------------
  71      =1  //              Panel Resolution
  72      =1  //-----------------------------------------------------------------------------
  73      =1  // ---- Select Default Panel
  74      =1  //
  75      =1  //#define UXGA                                          // 1600 x 1200
  76      =1  //#define SXGA                                          // 1280 x 1024
  77      =1  //#define XGA  // 1024 x 768
  78      =1  #ifdef XGA
           =1         #define LVDS                                    
           =1         #define PWIDTH  1024
           =1         #define PHEIGHT 768
           =1 #endif
  83      =1  //#define SVGA                                          //  800 x 600
  84      =1  //#define VGA                                           //  640 x 480
  85      =1  #ifdef VGA
           =1         #define PWIDTH  640
           =1         #define PHEIGHT 480
           =1         //#define       HITACHI_640_B_160               //--> 640 x 160
           =1         #define AND_640_480
           =1 #endif
  91      =1  //#define WXGA                                          // 1280 x 768 (15:9) // 1366 x 768 (16:9)
  92      =1  #ifdef WXGA
           =1     //#define WX_SHARP_LQ106K1LA
           =1         #define PWIDTH  1280
           =1         #define PHEIGHT 768
           =1 #endif
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 3   

  97      =1  //#define WSVGA                                         // 1024 x 600   *** only video mode
  98      =1  #ifdef WSVGA
           =1         #define PWIDTH  1024
           =1         #define PHEIGHT 600
           =1         #define UNIDEN_1024_600
           =1 #endif
 103      =1  #define WVGA                                            //  800 x 480
 104      =1  #ifdef WVGA
 105      =1          #define PWIDTH  800
 106      =1          #define PHEIGHT 600//480
 107      =1          // If WVGA, you have to select panel.
 108      =1          //#define AU_10INCH
 109      =1          //#define WVGA_TPO
 110      =1          //#define SAMSUNG_10INCH
 111      =1          //#define SAMSUNG_TICONLESS_10INCH
 112      =1          //#define SHARP_TICONLESS_7INCH
 113      =1          #define AU_TICONLESS_7INCH
 114      =1          //#define INNOLUX_AT080TN03
 115      =1          //#define AU_TICONLESS_7INCH_CCFL
 116      =1          //#define CMO                   // CHIMEI panel
 117      =1          //#define AU_TICONLESS_10INCH
 118      =1          //#define HITACHI_T01
 119      =1          //#define HITACHI_TX23D12
 120      =1          //#define HITACHI_TX18D24
 121      =1          //#define HITACHI_TX18D16
 122      =1          //#define TMD_LTA070A320F
 123      =1          //#define TMD_LTA080B
 124      =1  #endif  //WVGA
 125      =1  //#define HVGA                                          //  480 x 320
 126      =1  //#define QVGA                                          //  320 x 240   *** only video mode
 127      =1  #ifdef QVGA
           =1         #define PWIDTH  320
           =1         #define PHEIGHT 240
           =1         //#define HITACHI_TX09D73
           =1         //#define AU_DELTARGB
           =1         //#define SHARP_LQ050Q5DR01
           =1         //#define SHARP_LQ035
           =1         //#define       TMD
           =1 #endif
 136      =1  
 137      =1  //#define WQVGA                                         //  480 x 234   *** only video mode
 138      =1  #ifdef WQVGA
           =1         #define PWIDTH  480
           =1         #define PHEIGHT 240
           =1         // If WQVGA, you have to select panel   
           =1     #define ANALOG_7INCH
           =1         //#define       PWIDTH  400
           =1         //#define PHEIGHT       240
           =1         //#define SHARP_LQ043T3DX02             //  400 x 237
           =1         //#define LG_ANALOG
           =1         //#define TMD_ANALOG                            //TMD_LTA05B352A
           =1         //#define       T_51945GD                               // Optorex Panel
           =1 #endif  // WQVGA
 150      =1  
 151      =1  //if LVDS pannel disable TICONLESS
 152      =1  
 153      =1  //-----------------------------------------------------------------------------
 154      =1  //---- Add Support One more panel with DIPSW#1
 155      =1  //---- Ex. Add Analog AU 7" Panel with Default Panel for evalution
 156      =1  //#define ADD_ANALOGPANEL               // Added Analog panel(AU7") from default set panel(expect WQVGA) with DIP #1 sw
             -itch.(DIP#1=L:ANALOG, H:DEFAULT)
 157      =1                                                          // It can't support WQVGA and ADD_ANALOGPANEL same time!!
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 4   

 158      =1          //#define ADD_ANALOG_7INCH
 159      =1          //#define ADD_TMD_LTA05B352A
 160      =1                                                                          
 161      =1  //---- Support Wide panel function
 162      =1  #if (defined WXGA) || (defined WSVGA) || (defined WVGA) || (defined WQVGA)
 163      =1  #define WIDE_SCREEN                             // Can support 4 display mode, i.e. Normal, Wide, Full, Zoom
 164      =1  #endif                                                          // Tested panasonic WVGA panel.
 165      =1  
 166      =1  //-----------------------------------------------------------------------------
 167      =1  //              Panel Vendor Specific
 168      =1  //-----------------------------------------------------------------------------
 169      =1  
 170      =1  //-----------------------------------------------------------------------------
 171      =1  //              TV Tuner
 172      =1  //-----------------------------------------------------------------------------
 173      =1  #define PHILIPS                         0
 174      =1  #define ALPS                            1               // ALPS, LG
 175      =1  #define TEMIC                           2
 176      =1  #define TVAVA                           3
 177      =1  #define LGTUNER                         4
 178      =1  #define SAMSUNGMUTITUNER        5
 179      =1  
 180      =1  #define TVTunerDevice           4
 181      =1  //-----------------------------------------------------------------------------
 182      =1  //              IR Remote Controller Type
 183      =1  //-----------------------------------------------------------------------------
 184      =1  //#define REMO_RC5                                      // RC5 style
 185      =1  #define TECHWELL_REMOCON
 186      =1  //#define REMO_NEC                                      // NEC style
 187      =1  //#define PHILIPS_REMOCON // New remocon 
 188      =1  
 189      =1  
 190      =1  //-----------------------------------------------------------------------------
 191      =1  //              I2C Device Access Address Mapping
 192      =1  //-----------------------------------------------------------------------------
 193      =1  
 194      =1  #define EEPROMI2CAddress        0xa0    // EEPROM (24C16)
 195      =1  #define TW88I2CAddress          0x8a    // TW880x
 196      =1  
 197      =1  #define MSPI2CAddress           0x80    // MSP
 198      =1  
 199      =1  //-----------------------------------------------------------------------------
 200      =1  //              Options for Possible Inputs
 201      =1  //-----------------------------------------------------------------------------
 202      =1  #define         AWT
 203      =1  //#define       E_Wintek 
 204      =1  //#define SUPPORT_SVIDEO                     //andy Awt 20090914
 205      =1  //#define SUPPORT_COMPONENT                     // support component analog to decoder//andy Awt 20090914
 206      =1  
 207      =1  //#define SUPPORT_DTV                           // support DTV input through component( to ADC ).//andy Awt 20090914
 208      =1  #define SUPPORT_PC                              // support PC function
 209      =1  //#define SUPPORT_DVI                           // support DVI input
 210      =1  #define SUPPORT_SDCARD
 211      =1  
 212      =1  //#define SUPPORT_RS485
 213      =1  
 214      =1  //-----------------------------------------------------------------------------
 215      =1  //              Options for Possible Standards
 216      =1  //              Default:NTSC
 217      =1  //-----------------------------------------------------------------------------
 218      =1  #define SUPPORT_PAL                     
 219      =1  #define SUPPORT_SECAM
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 5   

 220      =1  #define SUPPORT_NTSC4           
 221      =1  #define SUPPORT_PALM    
 222      =1  #define SUPPORT_PALN            
 223      =1  #define SUPPORT_PAL60           
 224      =1  
 225      =1  
 226      =1  //#define ID_CHECK_BY_FW                        // in Video mode, check input system ID by firmware
 227      =1  
 228      =1  //-----------------------------------------------------------------------------
 229      =1  //              Options for Debugging/Release
 230      =1  //-----------------------------------------------------------------------------
 231      =1  //#define SUPPORT_PATTERN                       // support LCD test pattern
 232      =1  
 233      =1  
 234      =1  #ifndef WQVGA
 235      =1          #ifndef QVGA
 236      =1  #define SUPPORT_OSDPOSITIONMOVE
 237      =1          #endif
 238      =1  #endif
 239      =1  
 240      =1  #define SERIAL                                  // include serial communication routines
 241      =1  
 242      =1  //#define SUPPORT_DEBUG                         // Support to use Read & Write in debug OSD Window by remocon.
 243      =1  
 244      =1  //#define DEBUG                                         // include debug information
 245      =1  #ifdef DEBUG
           =1         //#define DEBUG_MAIN
           =1         //#define DEBUG_TIME
           =1         //#define DEBUG_KEYREMO
           =1         //#define DEBUG_TW88
           =1         //#define DEBUG_DECODER
           =1         //#define DEBUG_I2C
           =1         //#define DEBUG_EEP
           =1         //#define DEBUG_OSD
           =1         //#define DEBUG_AUDIO
           =1         //#define DEBUG_SETPANEL
           =1         //#define DEBUG_DTV
           =1         #define DEBUG_PC
           =1         //#define DEBUG_PC_MEAS
           =1         #define DEBUG_PC_COLOR
           =1         //#define DEBUG_COMPONENT
           =1         //#define DEBUG_BANK
           =1         //#define DEBUG_PAUSE
           =1         //#define DEBUG_MCU
           =1 #endif
 265      =1  
 266      =1  #define AUTOCALC_PC                                     // in PC mode, Enable Auto Calcuration
 267      =1  //#define SUPPORT_USERCOLORFROMTXT      // Use color setting of text file in Color mode=USER MODE which is as B
             -rightness(Reg10), Contast(Reg11),
 268      =1                                                                          //    Sat_U(Reg13),Sat_V(Reg14),Sharpness(Reg12,Reg78)                                                                  
 269      =1  //#define SUPPORT_GAMMA
 270      =1  
 271      =1  //#define CHIP_MANUAL_TEST                      // DIPSW#1
 272      =1  
 273      =1  #ifndef INTERNAL_MCU
 274      =1  //#define NO_INITIALIZE                         // After Power switch turn on with DIP SW4 Enable(Low), or pressed MENU button 
             -for internal MCU
 275      =1                                      //     micom works to access only I2C bus by serial command.
 276      =1  #endif
 277      =1  
 278      =1  //#define SUPPORT_KRS_OSDDEMO           // For KRS Company Demo 
 279      =1  //#define SUPPORT_LINE_OSDDEMO
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 6   

 280      =1  
 281      =1  //-----------------------------------------------------------------------------
 282      =1  //              Special Features
 283      =1  //-----------------------------------------------------------------------------
 284      =1  
 285      =1  #ifndef INTERNAL_MCU
 286      =1  //#define       SUPPORT_DELTA_RGB
 287      =1  #endif
 288      =1  #define SUPPORT_SELECTKEY                       // choose the keymap of using select key or left,right key.
 289      =1  //-----------------------------------------------------------------------------
 290      =1  #endif  //__CONFIG_H__
  21          
  22          #if defined( SUPPORT_PC ) || defined( SUPPORT_DTV )
  23          
  24          #include "typedefs.h"
   1      =1  #ifndef __TYPEDEFS__
   2      =1  #define __TYPEDEFS__
   3      =1  
   4      =1  
   5      =1  #define DATA            data
   6      =1  #define PDATA           pdata
   7      =1  #define IDATA           data
   8      =1  #define CODE            code
   9      =1  #define CODE_P
  10      =1  #define PDATA_P
  11      =1  #define IDATA_P
  12      =1  #define DATA_P
  13      =1  
  14      =1  #define INTERRUPT( num, name ) name() interrupt num
  15      =1  
  16      =1  #define _between(x, a, b)       (a<=x && x<=b)
  17      =1  #define _swap(a, b)                     { a^=b; b^=a; a^=b; }
  18      =1  
  19      =1  typedef unsigned char   Register;
  20      =1  typedef unsigned char   BYTE;
  21      =1  typedef unsigned short  WORD;
  22      =1  typedef unsigned long   DWORD;
  23      =1  
  24      =1  #define TRUE    1
  25      =1  #define FALSE   0
  26      =1  
  27      =1  //VInputStdDetectMode
  28      =1  #define AUTO    0
  29      =1  
  30      =1  //VInputStd
  31      =1  #define NTSC    1                       
  32      =1  #define PAL             2
  33      =1  #define SECAM   3
  34      =1  #define NTSC4   4
  35      =1  #define PALM    5
  36      =1  #define PALN    6
  37      =1  #define PAL60   7
  38      =1  
  39      =1  #define MAXINPUTSTD     PAL60+1 // 
  40      =1  
  41      =1  #define UNKNOWN 0xfe
  42      =1  #define NOINPUT 0       //0xff
  43      =1  
  44      =1  
  45      =1  
  46      =1  
  47      =1  #define NIL                     0xff
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 7   

  48      =1  
  49      =1  enum SourceModeTypeEnum
  50      =1  {       
  51      =1          AVMode,            // 0
  52      =1          VGAMode,       // 1
  53      =1          CAM_D,         // 2
  54      =1          CAM_A,         // 3
  55      =1          CAM_B,         // 4
  56      =1          CAM_C,         // 5
  57      =1          CAM_R,         // 6
  58      =1          CAM_AB,        // 7
  59      =1          CAM_CR,        // 8
  60      =1          CAM_AR,        // 9
  61      =1          CAM_RB,        // 10
  62      =1          CAM_AC,        // 11
  63      =1          CAM_CB,        // 12
  64      =1          CAM_RAB_T,     // 13
  65      =1          CAM_RAB_H,     // 14
  66      =1  
  67      =1          CAM_QUAD,      // 15
  68      =1          CAM_ABR_T3,    // 16
  69      =1          CAM_ABR_T4,    // 17
  70      =1          SEQ,           // 18
  71      =1          CAM_BA,                 //19
  72      =1          
  73      =1          CAM_BC,
  74      =1          CAM_BR,
  75      =1          CAM_CA,
  76      =1          CAM_ABC,
  77      =1          CAM_ABR,
  78      =1          CAM_ACR,
  79      =1          CAM_BAC,
  80      =1          CAM_BAR,
  81      =1          CAM_BCR,
  82      =1          CAM_CAB,
  83      =1          CAM_CAR,
  84      =1          CAM_CBR,        
  85      =1          CAM_NUM
  86      =1  };
  87      =1  
  88      =1  typedef unsigned char SourceModeType;
  89      =1  
  90      =1  #endif  /* __TYPEDEFS__ */
  25          #include "main.h"
   1      =1  #ifndef __MAIN__
   2      =1  #define __MAIN__
   3      =1  
   4      =1  #define ON                                      1
   5      =1  #define OFF                                     0
   6      =1  //#define Hs_debug
   7      =1  //#define       DVR
   8      =1  
   9      =1  //================= DIP SW Definition =========================================
  10      =1  ///#define PIXEL_SINGLE         P0_0
  11      =1  #define DIP_PANEL_SWITCH        P0_0    // Samsung(0) // Sharp-Noticon(1)
  12      =1  #define DIP_AUTO_DETECT         P0_1
  13      =1  #define DIP_EDGE_ENHANCE        P0_2
  14      =1  #define DIP_BW_STRETCH          P0_3
  15      =1  
  16      =1  #define Panel_Enable()          P4=P4|0x08 //andy 980908
  17      =1  #define Panel_Disable()                 P4=P4&0xf7
  18      =1  
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 8   

  19      =1  #define SetBacklight()      P4=P4|0x04
  20      =1  #define clrBacklight()      P4=P4&0xfb
  21      =1  
  22      =1  
  23      =1  //InputSelection
  24      =1  struct struct_IdName {
  25      =1          BYTE    Id;
  26      =1          BYTE    Name[16];
  27      =1  };
  28      =1  
  29      =1  #define CH_TW2835              1
  30      =1  #define CH_CAMD                2
  31      =1  #define CH_AV                  3
  32      =1  #define PC                                         7
  33      =1  #define ChineseDefaultMenu   8
  34      =1  
  35      =1  #define SVIDEO                          2
  36      =1  #define COMPONENT                       3
  37      =1  //#define ANALOGDTV                     4
  38      =1  #define DTV                                     4
  39      =1  #define TV                                      5
  40      =1  #define SCART                           6
  41      =1  
  42      =1  #define DIGITALVGA                      8
  43      =1  
  44      =1  #define AIRTV                           0 //9
  45      =1  #define CABLETV                         1 //0xa
  46      =1  
  47      =1  
  48      =1  #define TVTUNER                         0xd             //10
  49      =1  #define MUTE                            1       
  50      =1  #define MENU                            2       
  51      =1  #define TVVOL                           4       
  52      =1  #define CC                                      8       
  53      =1  #define INPUTINFO                       0x10
  54      =1  #define PCINFO                          0x20
  55      =1  #define GAUGEINFO           0x40
  56      =1  //#define RATINGINFO                    0x40
  57      =1  #define TVCHN                           0x80
  58      =1  //#define MUTE                          0x40
  59      =1  
  60      =1  #define YPBPR_480i                      0
  61      =1  #define YPBPR_576i                      1
  62      =1  #define YPBPR_480p                      2
  63      =1  #define YPBPR_576p                      3
  64      =1  #define YPBPR_1080i                     4
  65      =1  #define YPBPR_720p                      5
  66      =1  #define YPBPR_720p50            6
  67      =1  
  68      =1  
  69      =1  //--------------------------- P0 Define -----------------------------
  70      =1  #define SEL_MIX                 P0_6    // 
  71      =1  //--------------------------- P1 Define -----------------------------
  72      =1  #define SEL_DVI                 P3_5    //LJY062001             
  73      =1  
  74      =1  #define TW88HWReset                     P3_4    //LJY001010 //LJY000721
  75      =1  #define PowerUp             P1_4
  76      =1  //======================= CDS Control ================================= 
  77      =1  #define CDS_CTRL           P1_5
  78      =1  extern BYTE     SelectModeType;
  79      =1  extern BYTE InputSelection;
  80      =1  extern BYTE SEQTime;
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 9   

  81      =1  extern BYTE     Priority;
  82      =1  extern BYTE AutoDayNight;
  83      =1  extern BYTE PowerFlag;
  84      =1  
  85      =1  BYTE keyIn(void);
  86      =1  void TimerForRemocon(void);
  87      =1  void TimerForTick(void);
  88      =1  void DisableRemoconInt(void);
  89      =1  BYTE SetSupport_remocon(BYTE newd);
  90      =1  
  91      =1  void delay(BYTE cnt);
  92      =1  
  93      =1  BYTE RS_ready(void);
  94      =1  BYTE RS_rx(void);
  95      =1  void RS_tx(BYTE tx_buf);
  96      =1  
  97      =1  BYTE RS2_rx(void);
  98      =1  void RS2_tx(BYTE tx_buf);
  99      =1  
 100      =1  void NewLine(void);
 101      =1  void PutsP(PDATA_P BYTE *ptr);
 102      =1  #ifdef Hs_debug
           =1 void MonWriteI2C(BYTE addr, BYTE index, BYTE val);
           =1 BYTE MonReadI2C(BYTE addr, BYTE index);
           =1 #endif
 106      =1  BYTE Asc1Bin(BYTE asc);
 107      =1  BYTE Asc2Bin(PDATA_P BYTE *s);
 108      =1  
 109      =1  void I2CDeviceInitialize( CODE_P BYTE *RegSet);
 110      =1  
 111      =1  //void RestartSystemClock(WORD clock_hm);
 112      =1  WORD GetTime_ms(void);
 113      =1  BYTE GetTime_H(void);
 114      =1  BYTE GetTime_M(void);
 115      =1  void ChangeTime_H( char add );
 116      =1  void ChangeTime_M( char add );
 117      =1  //WORD GetWakeupTime(void);
 118      =1  //void SetWakeupTime(WORD wtime);
 119      =1  
 120      =1  
 121      =1  //WORD GetOffTime(void);
 122      =1  //void SetOffTime(WORD wtime);
 123      =1  //BYTE GetSleepTimer(void);
 124      =1  //void SetSleepTimer(BYTE stime);
 125      =1  WORD DiffTime_ms( WORD stime, WORD etime );
 126      =1  //void SetLastBlockedTime(void);
 127      =1  void SetLastCCTime(void);                               //ljy010904...CC_FIX_CLEAR_ON_TIME
 128      =1  
 129      =1  void SetOSDLastKeyInTime(void);
 130      =1  WORD GetOSDLastKeyInTime(void);
 131      =1  WORD GetIVF(void);
 132      =1  DWORD GetIHF(void);
 133      =1  BYTE ReadVInputSTD(void);
 134      =1  void SetVInputStd(BYTE newd);
 135      =1  BYTE GetVInputStd(void);
 136      =1  BYTE GetInputSelection(void);
 137      =1  #ifdef ADD_ANALOGPANEL
           =1 BYTE IsAnalogOn(void);
           =1 #endif
 140      =1  void InitVideoData(BYTE src);
 141      =1  void ChangeVInputStdDetectMode(BYTE val);
 142      =1  BYTE GetVInputStdInx(void);
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 10  

 143      =1  
 144      =1  void MonWriteI2Cn_(BYTE addr, BYTE *val, BYTE cnt) ;
 145      =1  
 146      =1  ///void Usage(void);
 147      =1  #ifdef Hs_debug
           =1         void Prompt(void);
           =1 #endif
 150      =1  void DebugKeyIn(BYTE ikey);
 151      =1  void DVIPowerDown(bit flag);
 152      =1  void PowerDown_XTAL(bit flag);
 153      =1  
 154      =1  void ChangeInput(BYTE newsel);
 155      =1  
 156      =1  
 157      =1  void WaitPowerOn(void);
 158      =1  void PowerOff(void);
 159      =1  BYTE GetNextInputSelection(void);
 160      =1  
 161      =1  BYTE WantToStopTVScan(void);
 162      =1  
 163      =1  //BYTE IsTW8801(void);
 164      =1  //BYTE IsTW8803(void);
 165      =1  //BYTE ConvertVideoVSAT(BYTE reg);
 166      =1  
 167      =1  BYTE IsNoInput(void);
 168      =1  void LoadEEPROM (void);
 169      =1  void Hs_InitVars(void);
 170      =1  void AdjustAutoDayNight(BYTE val);
 171      =1  void ACCPowerControl(void);
 172      =1  struct RegisterInfo
 173      =1  {
 174      =1     int  Min;
 175      =1     int  Max;
 176      =1     int  Default;
 177      =1  };
 178      =1  struct LongRegisterInfo
 179      =1  {
 180      =1     WORD Min;
 181      =1     WORD Max;
 182      =1     WORD Default;
 183      =1  };
 184      =1  
 185      =1  #endif  // __MAIN__
  26          #include "i2c.h"
   1      =1  #ifndef __I2C_H__
   2      =1  #define __I2C_H__
   3      =1  
   4      =1  
   5      =1  void I2CReadByte3(BYTE *);
   6      =1  void I2CRead8Byte(BYTE *);
   7      =1  #if 0
           =1 void I2CReadByteMSP(BYTE addr, BYTE index, BYTE *pd, BYTE cnt);
           =1 #endif
  10      =1  BYTE I2CWriteByte2(BYTE);
  11      =1  BYTE I2CWriteByte3(BYTE*);
  12      =1  BYTE I2CWrite8Byte(BYTE *);
  13      =1  
  14      =1  void I2CStart(void);
  15      =1  void I2CWriteData(BYTE value);
  16      =1  BYTE I2CReadData(void);
  17      =1  #if 0
           =1 BYTE I2CReadDataWithACK(void);
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 11  

           =1 #endif
  20      =1  void I2CStop(void);
  21      =1  void I2Cdelay(void);
  22      =1  
  23      =1  
  24      =1  #define WriteTW88(a,b)          WriteI2C(TW88I2CAddress, a, b)
  25      =1  #define ReadTW88(a)                     ReadI2C(TW88I2CAddress, a)
  26      =1  
  27      =1  BYTE WriteTW88_Wait     (BYTE, BYTE);
  28      =1  void WriteADC           (BYTE, BYTE);
  29      =1  BYTE ReadADC            (BYTE);
  30      =1  BYTE ReadADC_TW88(BYTE index);
  31      =1  void WriteADC_TW88(BYTE index, BYTE dat);
  32      =1  
  33      =1  void WriteEEP           (WORD, BYTE);
  34      =1  BYTE ReadEEP            (WORD);
  35      =1  
  36      =1  
  37      =1  BYTE ReadI2C            (BYTE addr, BYTE index);
  38      =1  void WriteI2C           (BYTE addr, BYTE index, BYTE val);
  39      =1  
  40      =1  void WriteI2Cn_(BYTE addr, BYTE *val, BYTE cnt);
  41      =1  void WriteI2Cn (BYTE addr, BYTE index, BYTE *val, BYTE cnt);
  42      =1  void WriteI2CnD(BYTE addr, BYTE index, BYTE val, BYTE cnt);
  43      =1  
  44      =1  void ReadI2Cmn(BYTE addr, BYTE wcnt, BYTE rcnt, BYTE *rwdata);
  45      =1  
  46      =1  #define         WriteADC(a,b)   WriteADC_TW88(a,b)
  47      =1  #define         ReadADC(a)              ReadADC_TW88(a)
  48      =1  
  49      =1  #endif  /* __I2C_H__ */
  27          #include "debug.h"
   1      =1  #ifndef __DEBUG__
   2      =1  #define __DEBUG__
   3      =1  
   4      =1  #define DEBUG_ERR       1
   5      =1  #define DEBUG_WARN      2
   6      =1  #define DEBUG_INFO      3
   7      =1  #define DEBUG_BREAK     4
   8      =1  
   9      =1  #define Pause(a)        { Printf("\r\n"); Printf(a); while(!RS_ready()); RS_rx(); }
  10      =1  
  11      =1  //#define BURSTLOCK     7
  12      =1  
  13      =1  void DebugWindowControl (void) ;
  14      =1  void Draw_Debug_Char(void);
  15      =1  void DebugWindowCursor( BYTE flag ) ;
  16      =1  void DebugWindowData( BYTE flag ) ;
  17      =1  void Debug_Write(void);
  18      =1  void Debug_Read(void);
  19      =1  
  20      =1  
  21      =1  
  22      =1  #endif  // __DEBUG__
  23      =1  
  24      =1  #ifdef CHIP_MANUAL_TEST
           =1 BYTE DelaynCheck(void);
           =1 void ChipManualTest(void);
           =1 
           =1 #endif
  28          #include "pc_eep.h"
   1      =1  #ifndef __PC_EEP__
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 12  

   2      =1  #define __PC_EEP__
   3      =1  
   4      =1  
   5      =1  // -----------------------------------------------------------------------------
   6      =1  #define PC_COLOR_DATA   0x80    // StartAddress of EEPROM for PC Color Temperature
   7      =1  #define PC_USERCOLOR    0x8A
   8      =1  #define SetPCColorTempModeEE( ctid )                    WriteEEP( PC_COLOR_DATA, ctid )
   9      =1  #define GetPCColorTempModeEE()                                  ReadEEP( PC_COLOR_DATA )
  10      =1  
  11      =1  #define GetPCUserColorTempEE( ucolorr)                  ReadEEP( PC_USERCOLOR+ucolorr )
  12      =1  #define SavePCUserColorTempEE( ucolorw, uval)   WriteEEP( PC_USERCOLOR+ucolorw, uval )
  13      =1  #define GetPCColorEE(index)                                             ReadEEP(index)
  14      =1  
  15      =1  // -----------------------------------------------------------------------------
  16      =1  #define EE_ADC_GO               0x90    // ADC Gain Offset for PC
  17      =1  #define EE_ADC_GO_DTV   0x98    // ADC Gain Offset for DTV
  18      =1  
  19      =1  #define EE_PCDATA               0xC0    // StartAddress of EEPROM for PCDATA
  20      =1  #define LEN_PCDATA              5               // Length of PCDATA
  21      =1  
  22      =1  WORD GetHPNfromEE(BYTE mode);
  23      =1  
  24      =1  BYTE CheckPcDataEEValid(BYTE, WORD);
  25      =1  
  26      =1  WORD GetVactiveStartEE(BYTE mode);
  27      =1  WORD GetHactiveStartEE(BYTE mode);
  28      =1  
  29      =1  void GetPCDataEE(BYTE mode);
  30      =1  void SavePCDataEE(BYTE mode);
  31      =1  void SaveDefaultPCDataEE(void);
  32      =1  void SaveDefaultPCDataAllEE(void);
  33      =1  
  34      =1  void SaveHactiveEE(BYTE mode);
  35      =1  void SaveVactiveEE(BYTE mode);
  36      =1  void SaveVBackPorchEE(BYTE mode);
  37      =1  void SaveCoarseEE(BYTE mode);
  38      =1  void SavePhaseEE(BYTE mode);
  39      =1  /*
  40      =1  WORD GetHactiveStartEE(BYTE mode);
  41      =1  WORD GetVactiveStartEE(BYTE mode);
  42      =1  */
  43      =1  void DumpPCData(void);
  44      =1  
  45      =1  void SaveActiveVEE(WORD);
  46      =1  void SaveBackPorchEE(BYTE);
  47      =1  void SaveActiveHEE(WORD);
  48      =1  
  49      =1  void SaveADCGainOffsetEE(BYTE mod);
  50      =1  void GetADCGainOffsetEE(void);
  51      =1  
  52      =1  void SaveADCGainOffsetForDTVEE(BYTE mod);
  53      =1  void GetADCGainOffsetForDTVEE(void);
  54      =1  
  55      =1  #endif  // __PC_EEP__
  29          #include "printf.h"
   1      =1  #ifndef __PRINTF__
   2      =1  #define __PRINTF__
   3      =1  
   4      =1  #define _outchar(c) while(1) { if( !RS_Xbusy ) { SBUF = c; RS_Xbusy=1; break; } }
   5      =1  #define Putch(c) _outchar(c)
   6      =1  
   7      =1  #ifdef SERIAL
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 13  

   8      =1  
   9      =1   void Printf ( const char CODE_P *fmt, ... );
  10      =1   void Puts ( CODE_P char *ptr );
  11      =1  
  12      =1  #define TW2835Cmd(a)   Puts ( a )
  13      =1  
  14      =1  #else
           =1 
           =1  #undef  DEBUG
           =1  #define Printf(a,b)    //
           =1  #define Puts(a)                //
           =1 
           =1 #endif
  21      =1  
  22      =1  
  23      =1  #ifndef DEBUG
  24      =1  
  25      =1   #define dPuts(a)               //
  26      =1   #define wPuts(a)               //
  27      =1   #define ePuts(a)               //
  28      =1  
  29      =1  #else
           =1 
           =1  void dPrintf( const char CODE_P *fmt, ... );
           =1  void wPrintf( const char CODE_P *fmt, ... );
           =1  void ePrintf( const char CODE_P *fmt, ... );
           =1 
           =1  void dPuts( CODE_P char *ptr );
           =1  void wPuts( CODE_P char *ptr );
           =1  void ePuts( CODE_P char *ptr );
           =1 
           =1 #endif  // DEBUG
  40      =1  
  41      =1  BYTE Getch(void);
  42      =1  BYTE Getche(void);
  43      =1  
  44      =1  
  45      =1  #endif  //__PRINTF__
  30          #include "TW88.h"
   1      =1  #ifndef __TW88__
   2      =1  #define __TW88__
   3      =1  
   4      =1  #include "main.h"
   1      =2  #ifndef __MAIN__
           =2 #define __MAIN__
           =2 
           =2 #define ON                                      1
           =2 #define OFF                                     0
           =2 //#define Hs_debug
           =2 //#define       DVR
           =2 
           =2 //================= DIP SW Definition =========================================
           =2 ///#define PIXEL_SINGLE         P0_0
           =2 #define DIP_PANEL_SWITCH        P0_0    // Samsung(0) // Sharp-Noticon(1)
           =2 #define DIP_AUTO_DETECT         P0_1
           =2 #define DIP_EDGE_ENHANCE        P0_2
           =2 #define DIP_BW_STRETCH          P0_3
           =2 
           =2 #define Panel_Enable()          P4=P4|0x08 //andy 980908
           =2 #define Panel_Disable()                 P4=P4&0xf7
           =2 
           =2 #define SetBacklight()      P4=P4|0x04
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 14  

           =2 #define clrBacklight()      P4=P4&0xfb
           =2 
           =2 
           =2 //InputSelection
           =2 struct struct_IdName {
           =2         BYTE    Id;
           =2         BYTE    Name[16];
           =2 };
           =2 
           =2 #define CH_TW2835              1
           =2 #define CH_CAMD                2
           =2 #define CH_AV                  3
           =2 #define PC                                         7
           =2 #define ChineseDefaultMenu   8
           =2 
           =2 #define SVIDEO                          2
           =2 #define COMPONENT                       3
           =2 //#define ANALOGDTV                     4
           =2 #define DTV                                     4
           =2 #define TV                                      5
           =2 #define SCART                           6
           =2 
           =2 #define DIGITALVGA                      8
           =2 
           =2 #define AIRTV                           0 //9
           =2 #define CABLETV                         1 //0xa
           =2 
           =2 
           =2 #define TVTUNER                         0xd             //10
           =2 #define MUTE                            1       
           =2 #define MENU                            2       
           =2 #define TVVOL                           4       
           =2 #define CC                                      8       
           =2 #define INPUTINFO                       0x10
           =2 #define PCINFO                          0x20
           =2 #define GAUGEINFO           0x40
           =2 //#define RATINGINFO                    0x40
           =2 #define TVCHN                           0x80
           =2 //#define MUTE                          0x40
           =2 
           =2 #define YPBPR_480i                      0
           =2 #define YPBPR_576i                      1
           =2 #define YPBPR_480p                      2
           =2 #define YPBPR_576p                      3
           =2 #define YPBPR_1080i                     4
           =2 #define YPBPR_720p                      5
           =2 #define YPBPR_720p50            6
           =2 
           =2 
           =2 //--------------------------- P0 Define -----------------------------
           =2 #define SEL_MIX                 P0_6    // 
           =2 //--------------------------- P1 Define -----------------------------
           =2 #define SEL_DVI                 P3_5    //LJY062001             
           =2 
           =2 #define TW88HWReset                     P3_4    //LJY001010 //LJY000721
           =2 #define PowerUp             P1_4
           =2 //======================= CDS Control ================================= 
           =2 #define CDS_CTRL           P1_5
           =2 extern BYTE     SelectModeType;
           =2 extern BYTE InputSelection;
           =2 extern BYTE SEQTime;
           =2 extern BYTE     Priority;
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 15  

           =2 extern BYTE AutoDayNight;
           =2 extern BYTE PowerFlag;
           =2 
           =2 BYTE keyIn(void);
           =2 void TimerForRemocon(void);
           =2 void TimerForTick(void);
           =2 void DisableRemoconInt(void);
           =2 BYTE SetSupport_remocon(BYTE newd);
           =2 
           =2 void delay(BYTE cnt);
           =2 
           =2 BYTE RS_ready(void);
           =2 BYTE RS_rx(void);
           =2 void RS_tx(BYTE tx_buf);
           =2 
           =2 BYTE RS2_rx(void);
           =2 void RS2_tx(BYTE tx_buf);
           =2 
           =2 void NewLine(void);
           =2 void PutsP(PDATA_P BYTE *ptr);
           =2 #ifdef Hs_debug
           =2 void MonWriteI2C(BYTE addr, BYTE index, BYTE val);
           =2 BYTE MonReadI2C(BYTE addr, BYTE index);
           =2 #endif
           =2 BYTE Asc1Bin(BYTE asc);
           =2 BYTE Asc2Bin(PDATA_P BYTE *s);
           =2 
           =2 void I2CDeviceInitialize( CODE_P BYTE *RegSet);
           =2 
           =2 //void RestartSystemClock(WORD clock_hm);
           =2 WORD GetTime_ms(void);
           =2 BYTE GetTime_H(void);
           =2 BYTE GetTime_M(void);
           =2 void ChangeTime_H( char add );
           =2 void ChangeTime_M( char add );
           =2 //WORD GetWakeupTime(void);
           =2 //void SetWakeupTime(WORD wtime);
           =2 
           =2 
           =2 //WORD GetOffTime(void);
           =2 //void SetOffTime(WORD wtime);
           =2 //BYTE GetSleepTimer(void);
           =2 //void SetSleepTimer(BYTE stime);
           =2 WORD DiffTime_ms( WORD stime, WORD etime );
           =2 //void SetLastBlockedTime(void);
           =2 void SetLastCCTime(void);                               //ljy010904...CC_FIX_CLEAR_ON_TIME
           =2 
           =2 void SetOSDLastKeyInTime(void);
           =2 WORD GetOSDLastKeyInTime(void);
           =2 WORD GetIVF(void);
           =2 DWORD GetIHF(void);
           =2 BYTE ReadVInputSTD(void);
           =2 void SetVInputStd(BYTE newd);
           =2 BYTE GetVInputStd(void);
           =2 BYTE GetInputSelection(void);
           =2 #ifdef ADD_ANALOGPANEL
           =2 BYTE IsAnalogOn(void);
           =2 #endif
           =2 void InitVideoData(BYTE src);
           =2 void ChangeVInputStdDetectMode(BYTE val);
           =2 BYTE GetVInputStdInx(void);
           =2 
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 16  

           =2 void MonWriteI2Cn_(BYTE addr, BYTE *val, BYTE cnt) ;
           =2 
           =2 ///void Usage(void);
           =2 #ifdef Hs_debug
           =2         void Prompt(void);
           =2 #endif
           =2 void DebugKeyIn(BYTE ikey);
           =2 void DVIPowerDown(bit flag);
           =2 void PowerDown_XTAL(bit flag);
           =2 
           =2 void ChangeInput(BYTE newsel);
           =2 
           =2 
           =2 void WaitPowerOn(void);
           =2 void PowerOff(void);
           =2 BYTE GetNextInputSelection(void);
           =2 
           =2 BYTE WantToStopTVScan(void);
           =2 
           =2 //BYTE IsTW8801(void);
           =2 //BYTE IsTW8803(void);
           =2 //BYTE ConvertVideoVSAT(BYTE reg);
           =2 
           =2 BYTE IsNoInput(void);
           =2 void LoadEEPROM (void);
           =2 void Hs_InitVars(void);
           =2 void AdjustAutoDayNight(BYTE val);
           =2 void ACCPowerControl(void);
           =2 struct RegisterInfo
           =2 {
           =2    int  Min;
           =2    int  Max;
           =2    int  Default;
           =2 };
           =2 struct LongRegisterInfo
           =2 {
           =2    WORD Min;
           =2    WORD Max;
           =2    WORD Default;
           =2 };
           =2 
           =2 #endif  // __MAIN__
   5      =1  
   6      =1  //Value for register 0x44
   7      =1  //#define DECODER_YCbCr         0x08            //xxxx bbxx
   8      =1  //#define RGB_RGB                               0x0C
   9      =1  
  10      =1  #define TW88_FPLL0                      0xf9
  11      =1  #define TW88_FPLL1                      0xfa
  12      =1  #define TW88_FPLL2                      0xfb
  13      =1  #define TW88_FSS                        0xfc
  14      =1  #define TW88_FSS_PD                     0xfd
  15      =1  #define TW88_PLL_DIV            0xfe
  16      =1  
  17      =1  //#define TW88_XSCALE                   0x5d
  18      =1  //#define TW88_YSCALE                   0x5e
  19      =1  
  20      =1  #define TW88_XUSCALELO          0x60
  21      =1  #define TW88_XDSCALELO          0x61
  22      =1  #define TW88_YUSCALELO          0x62
  23      =1  #define TW88_XYSCALEHI          0x63
  24      =1  #define TW88_XUSCALEFINE        0x69
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 17  

  25      =1  #define TW88_YUSCALEFINE        0x6a
  26      =1  
  27      =1  //Power Mgt
  28      =1  #define POWER_OFF                       0
  29      =1  #define POWER_STANDBY           1
  30      =1  #define POWER_SUSPEND           2
  31      =1  #define POWER_ON                        3
  32      =1  
  33      =1  //void TWChipsDetect(void);
  34      =1  void SetAutoDetectStd(void);
  35      =1  void ClearAutoDetectStd(BYTE);
  36      =1  void I2CDeviceInitialize( CODE_P BYTE *RegSet);
  37      =1  
  38      =1  
  39      =1  //0x63.. Register Group
  40      =1  #define GROUP_YCbCr                     0x40
  41      =1  #define GROUP_RGB                       0
  42      =1  #define SelectPanelAttrRegGroup(A)                              WriteTW88(0x70, (ReadTW88(0x70) & 0xbf) | A)
  43      =1  
  44      =1  //#if defined TW8801 || defined TW8803
  45      =1  #define FB_MAIN         2
  46      =1  #define FB_NORMAL       1
  47      =1  #define FB_RGB          0
  48      =1  //void SetFBmode( BYTE mode );
  49      =1  //#endif // TW8801
  50      =1  
  51      =1  
  52      =1  //=============================================================================
  53      =1  //                                   LCD Functions   
  54      =1  //=============================================================================
  55      =1  BYTE GetLCDPowerState(void);
  56      =1  void SetLCDPowerState(BYTE dat);
  57      =1  
  58      =1  BYTE IsFreeRun(void);
  59      =1  void PanelFreeRun(BYTE on);
  60      =1  void PanelBlack(BYTE on);
  61      =1  
  62      =1  void PanelMute(BYTE on);
  63      =1  
  64      =1  void LCDPowerON(BYTE mute); 
  65      =1  void LCDPowerOFF(void);
  66      =1  #ifdef Hs_debug
           =1 void LCDPower(void);
           =1 #endif
  69      =1  void DPMSmodeOFF(void);
  70      =1  void DPMSmodeON(void);
  71      =1  //=============================================================================
  72      =1  //                              Get PC Parameter Functions   
  73      =1  //=============================================================================
  74      =1  void GetInitPanelAttribute1(void);
  75      =1  //void GetInitPanelAttribute2(void);
  76      =1  void DefaultPanelAttributeForVideo(void);
  77      =1  void SetPVR(WORD pvr);
  78      =1  void SetPHR(WORD phr);
  79      =1  WORD GetPVR(void);
  80      =1  WORD GetPHR(void);
  81      =1  WORD GetHPN(void);
  82      =1  WORD GetVPN(void);
  83      =1  
  84      =1  //WORD GetVactive(void);
  85      =1  
  86      =1  WORD GetHstart(void);
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 18  

  87      =1  WORD GetHend(void);
  88      =1  WORD GetVstart(void);
  89      =1  WORD GetVend(void);
  90      =1  void TuneLineBuffer(BYTE field);
  91      =1  void TuneLineBuffer4Video(BYTE field);
  92      =1  
  93      =1  #if defined (SUPPORT_DTV)
           =1 void SetCoarstForDTV(BYTE en);
           =1 #endif
  96      =1  
  97      =1  WORD GetHactiveStart(void);
  98      =1  WORD GetHactiveEnd(void);
  99      =1  WORD GetVactiveStart(void);
 100      =1  //WORD GetVactiveLen(void);
 101      =1  BYTE GetVBackPorch(void);
 102      =1  void SetVBackPorch(BYTE val);
 103      =1  WORD GetPHP(void);
 104      =1  void SetPHP(WORD php);
 105      =1  void SetPVP(WORD period);
 106      =1  WORD GetPVP(void);
 107      =1  //void SetPanelRelatedRegisters(void);
 108      =1  //BYTE ChangedHPN(void);
 109      =1  //WORD GetVSUD(void);
 110      =1  
 111      =1  void SetDefaultPLL(void);
 112      =1  //void SetDefaultFPHSperiod(void);
 113      =1  //BYTE CalcPHP(DWORD ppf, BYTE tol);
 114      =1  //void ChangeFPHSperiod4DecoderInput(WORD vsud, BYTE tol);
 115      =1  
 116      =1  //-------------------------------------------------------------------
 117      =1  //                  Set Active Region Functions
 118      =1  //-------------------------------------------------------------------
 119      =1  void SetHactiveStart(WORD hstart);
 120      =1  void SetHactiveEnd(WORD hend);
 121      =1  void SetVactiveStart(WORD vstart);
 122      =1  //void SetVactiveLen(WORD van, WORD vstart);
 123      =1  void SetVactiveLen(WORD van);
 124      =1  //=============================================================================
 125      =1  //                         Set Measurement Window Functions   
 126      =1  //=============================================================================
 127      =1  void SetMeasureWindowH(WORD start, WORD stop);
 128      =1  void SetMeasureWindowV(WORD start, WORD stop);
 129      =1  //=============================================================================
 130      =1  //                              Video Input Functions   
 131      =1  //=============================================================================
 132      =1  BYTE IsVideoInput(void);
 133      =1  BYTE DetectDecoderInput(void);
 134      =1  //=============================================================================
 135      =1  //
 136      =1  //=============================================================================
 137      =1  void AutoPHPCalEnable(void);
 138      =1  void AutoPHPCalDisable(void);
 139      =1  
 140      =1  void MakeStartInt(void);
 141      =1  void AVGAInput(void);
 142      =1  void DVIInput(void);
 143      =1  //void DVGAInput(void);
 144      =1  void DisableDVGA(void);
 145      =1  
 146      =1  void COMPOSITE1Input(void);
 147      =1  void COMPOSITE2Input(void);
 148      =1  void COMPOSITE3Input(void);
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 19  

 149      =1  
 150      =1  void SVIDEOInput(void);
 151      =1  void COMPONENTInput(void);
 152      =1  void ANALOGDTVInput(void);
 153      =1  void DTVInput(void);
 154      =1  void TVInput(void);
 155      =1  void SCARTInput(void);
 156      =1  
 157      =1  //=============================================================================
 158      =1  //                          Measurement Functions
 159      =1  //=============================================================================
 160      =1  ///void SetPanelBitOrder(BYTE swap);
 161      =1  //void SetPanelSingleDouble(BYTE single);
 162      =1  
 163      =1  BYTE MeasureAndWait(BYTE flag);
 164      =1  
 165      =1  //WORD GetHCounter1(BYTE field);
 166      =1  //void SetHInitial(BYTE field, WORD counter);
 167      =1  //=============================================================================
 168      =1  //                          Invert Polarity Functions
 169      =1  //=============================================================================
 170      =1  void InvertHSYNCPolarity(void);
 171      =1  void InvertVSYNCPolarity(void);
 172      =1  //=============================================================================
 173      =1  //            Interrupt / SW Reset Control Functions
 174      =1  //=============================================================================
 175      =1  void SetInt(void);
 176      =1  //void ClearInt(void);
 177      =1  void SetEnDet(void);
 178      =1  void ClearEnDet(void);
 179      =1  void SWReset(void);
 180      =1  //void ClearSYNCLossStatus(void);
 181      =1  //void ClearSYNCChangeStatus(void);
 182      =1  //=============================================================================
 183      =1  //
 184      =1  //=============================================================================
 185      =1  BYTE IsBypassmode(void);
 186      =1  //BYTE IsInteraced(void);
 187      =1  void Clear_bypass(void);
 188      =1  void MaskOnSYNCInt(void);
 189      =1  void MaskOffSYNCInt(void);
 190      =1  //=============================================================================
 191      =1  //                                    ZoomControl
 192      =1  //=============================================================================
 193      =1  void BypassZoom(void);
 194      =1  
 195      =1  void XscaleU(DWORD scale);
 196      =1  void XscaleD(DWORD scale);
 197      =1  void XScale2(DWORD scale);
 198      =1  void YScale2(DWORD scale);
 199      =1  WORD GetYScale(void);
 200      =1  //=============================================================================
 201      =1  //
 202      =1  //=============================================================================
 203      =1  WORD GetHSYNCPulse(void);
 204      =1  WORD GetVSYNCPulse(void);
 205      =1  //#if defined TW8801 || defined TW8803
 206      =1  WORD GetRelativePosition(void);
 207      =1  //#endif
 208      =1  //=============================================================================
 209      =1  //                                                              MISC2 for decoder
 210      =1  //=============================================================================
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 20  

 211      =1  #define BLUE_DECODER            2
 212      =1  #define BLACK_DECODER           0
 213      =1  
 214      =1  BYTE ForceDecoderOutput(BYTE color);
 215      =1  BYTE ClearForcedDecoderOutput(void);
 216      =1  //=============================================================================
 217      =1  //                                                              CC and EDS
 218      =1  //=============================================================================
 219      =1  BYTE GetCCStatus(void);
 220      =1  void DisableCC(void);
 221      =1  void EnableCC(void);
 222      =1  BYTE GetCCData(void);
 223      =1  BYTE IsCCEnabled(void);
 224      =1  void EnableEDS(void);
 225      =1  void DisableEDS(void);
 226      =1  void RecoverCCOverflow(void);
 227      =1  
 228      =1  #define CCFIFOHalfFull()                        (ReadDecoder(CSTATUS) & 0x04)
 229      =1  //=============================================================================
 230      =1  //                                                              Internal PLL
 231      =1  //=============================================================================
 232      =1  BYTE GetPOST(void);
 233      =1  void SetPLLS(BYTE plls);
 234      =1  BYTE GetREFDM(void);
 235      =1  void SetREFDM(BYTE refdm);
 236      =1  DWORD GetFBDN(void);
 237      =1  void SetFBDN(WORD fbdn, BYTE vcsel);
 238      =1  DWORD GetPPF(void);
 239      =1  void ChangeInternPLL(DWORD _PPF);
 240      =1  
 241      =1  //=============================================================================
 242      =1  //                                                              Macros for attribute
 243      =1  //=============================================================================
 244      =1  //#define       GetOSDTransReg()                                                ReadTW88(0xAE)
 245      =1  //#define SetOSDTransReg(AlphaV)                                        WriteTW88(0xAE, (BYTE)AlphaV )
 246      =1  
 247      =1  #define GetPanelContrastReg(gccolor)                    ReadTW88(0x71+gccolor)
 248      =1  #define SetPanelContrastReg(sccolor, cval)              WriteTW88(0x71+sccolor,cval)
 249      =1  
 250      =1  #define GetPanelBrightnessReg(gbcolor)                  ReadTW88(0x74+gbcolor);
 251      =1  #define SetPanelBrightnessReg(sbcolor, bval)    WriteTW88(0x74+sbcolor,bval);
 252      =1  
 253      =1  #define SetDTVBrightnessReg(bval)                               WriteTW88(0x74,bval);
 254      =1  
 255      =1  #define GetPanelSaturationReg(gbcolor)                  ReadTW88(0x72+gbcolor);
 256      =1  #define SetPanelSaturationReg(sbcolor, bval)    WriteTW88(0x72+sbcolor,bval);
 257      =1  
 258      =1  #define SetPanelSharpnessReg(bval)                              WriteTW88(0x78,((bval&0x07)|0x38) );
 259      =1  
 260      =1  #define SetPanelHueReg(bval)                                    WriteTW88(0x70, (ReadTW88(0x70) & 0xc0 | (bval)) );
 261      =1  
 262      =1  #define GetVideoContrastReg()                                   ReadDecoder(CONTRAST)
 263      =1  #define SetVideoContrastReg(vcval)                              WriteDecoder(CONTRAST, vcval)
 264      =1  
 265      =1  #define GetVideoBrightnessReg()                                 ReadDecoder(BRIGHT)
 266      =1  #define SetVideoBrightnessReg(vbval)                    WriteDecoder(BRIGHT, vbval )
 267      =1  
 268      =1  #define GetVideoSaturationReg(gvstype)                  ReadDecoder(SAT_U+gvstype)
 269      =1  #define SetVideoSaturationReg(svstype, vsval)   WriteDecoder(SAT_U+svstype,     vsval)
 270      =1  
 271      =1  #define GetVideoHueReg()                                                ReadDecoder(HUE)
 272      =1  #define SetVideoHueReg(vhval)                                   WriteDecoder(HUE,       vhval )
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 21  

 273      =1  
 274      =1  #define GetVideoSharpnessRegDef                                 (ReadDecoder(SHARPNESS) & 0x0f) 
 275      =1  
 276      =1  #define GetVideoSharpnessReg()                                  GetVideoSharpnessRegDef
 277      =1  //#define       SetVideoSharpnessReg(vshval)                    WriteDecoder(SHARPNESS, vshval )
 278      =1  #define SetVideoSharpnessReg(vshval)                    WriteDecoder(SHARPNESS, ((ReadDecoder(SHARPNESS) & 0xf0) | (vshval 
             -& 0x0f) ) );
 279      =1  
 280      =1  #ifdef TW9908
           =1 #define SetVideoVPeakingReg(vshval)
           =1 #else
 283      =1  #define SetVideoVPeakingReg(vshval)                             WriteDecoder(V_PEAKING, ((ReadDecoder(V_PEAKING) & 0xf8) | (vshval 
             -& 0x07) ) );
 284      =1  #endif
 285      =1  
 286      =1  #define SetVideoHfilterReg(val)                                 WriteDecoder(HFILTER, ((ReadDecoder(HFILTER) & 0xf8) | (val & 0x07) )|
             -0x08 );
 287      =1  //----------------------------------------------------------------------------------
 288      =1  //color type
 289      =1  #define RED             0
 290      =1  #define GREEN   1
 291      =1  #define BLUE    2
 292      =1  #define WHITE   3
 293      =1  //saturation type
 294      =1  #define U_SAT   0
 295      =1  #define V_SAT   1
 296      =1  
 297      =1  //Alpha Blending Level
 298      =1  #define _0              0
 299      =1  #define _25             0x12
 300      =1  #define _37_5   0x13
 301      =1  #define _50             0x14
 302      =1  #define _100    0x18
 303      =1  
 304      =1  
 305      =1  /*
 306      =1  BYTE Mapping( int fromValue, struct RegisterInfo fromRange,
 307      =1                                   int * toValue, struct RegisterInfo toRange );
 308      =1  */
 309      =1  BYTE Mapping1( int fromValue, CODE_P struct RegisterInfo *fromRange,
 310      =1                                   int * toValue, CODE_P struct RegisterInfo *toRange );
 311      =1  #ifdef KEILC
 312      =1  #define Mapping2( A, B, C, D )                  Mapping1( A, B, C, D )
 313      =1  #define Mapping3( A, B, C, D )                  Mapping1( A, B, C, D )
 314      =1  #else
           =1 BYTE Mapping2( int fromValue, IDATA_P struct RegisterInfo *fromRange,
           =1                                  int * toValue, CODE_P struct RegisterInfo *toRange );
           =1 BYTE Mapping3( int fromValue, CODE_P struct RegisterInfo *fromRange,
           =1                                  int * toValue, IDATA_P struct RegisterInfo *toRange );
           =1 #endif
 320      =1  
 321      =1  BYTE GetAttributesFromNTSCSettings(BYTE index);
 322      =1  
 323      =1  #endif  // __TW88__
 324      =1  
  31          #include "measure.h"
   1      =1  #ifndef __MEASURE__
   2      =1  #define __MEASURE__
   3      =1  
   4      =1  #define EE_DOS                          0
   5      =1  
   6      =1  #define EE_SP1                          1
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 22  

   7      =1  #define EE_SP2                          2
   8      =1  #define EE_SP3                          3
   9      =1  
  10      =1  #define EE_VGA_60                       4
  11      =1  #define EE_VGA_66                       5
  12      =1  #define EE_VGA_70                       6
  13      =1  #define EE_VGA_72                       7
  14      =1  #define EE_VGA_75                       8
  15      =1  #define EE_VGA_85                       9
  16      =1  
  17      =1  #define EE_SVGA_56                      10
  18      =1  #define EE_SVGA_60                      11
  19      =1  #define EE_SVGA_70                      12
  20      =1  #define EE_SVGA_72                      13
  21      =1  #define EE_SVGA_75                      14
  22      =1  #define EE_SVGA_85                      15
  23      =1  
  24      =1  #define EE_832_75                       16
  25      =1  
  26      =1  #define EE_XGA_60                       17
  27      =1  #define EE_XGA_70                       18
  28      =1  #define EE_XGA_72                       19
  29      =1  #define EE_XGA_75                       20
  30      =1  #define EE_XGA_85                       21
  31      =1  
  32      =1  #define EE_1152_60                      22
  33      =1  #define EE_1152_70                      23
  34      =1  #define EE_1152_75                      24
  35      =1  
  36      =1  #define EE_SXGA_60                      25
  37      =1  #define EE_SXGA_70                      26
  38      =1  #define EE_SXGA_75                      27
  39      =1  
  40      =1  #define EE_RGB_480P                     28
  41      =1  #define EE_RGB_720P                     29
  42      =1  #define EE_RGB_720P50           30
  43      =1  #define EE_RGB_1080I            31
  44      =1  #define EE_RGB_1080I50A         32
  45      =1  #define EE_RGB_1080I50B         33
  46      =1  #define EE_RGB_480I                     34
  47      =1  #define EE_RGB_576I                     35
  48      =1  #define EE_RGB_576P                     36
  49      =1  
  50      =1  #define EE_YPbPr_480P           37
  51      =1  #define EE_YPbPr_720P           38
  52      =1  #define EE_YPbPr_720P50         39
  53      =1  #define EE_YPbPr_1080I          40
  54      =1  #define EE_YPbPr_1080I50A       41
  55      =1  #define EE_YPbPr_1080I50B       42
  56      =1  #define EE_YPbPr_480I           43
  57      =1  #define EE_YPbPr_576I           44
  58      =1  #define EE_YPbPr_576P           45
  59      =1  
  60      =1  #define EE_PC_MAX                       46
  61      =1  
  62      =1  #define EE_PC_NO_SIGNAL         0xfe
  63      =1  #define EE_PC_UNKNOWN           0xff
  64      =1  
  65      =1  struct _PCMDATA {
  66      =1          CODE_P BYTE  Support;
  67      =1          CODE_P WORD  HAN;
  68      =1          CODE_P WORD  VAN;
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 23  

  69      =1          CODE_P WORD  IVF;
  70      =1          CODE_P WORD  CLOCK;
  71      =1          CODE_P WORD  low;
  72      =1          CODE_P WORD  high;
  73      =1          CODE_P WORD  Hstart;
  74      =1          CODE_P WORD  Vstart;
  75      =1          CODE_P WORD  IPF;               // 0.1MHz
  76      =1          CODE_P WORD  PPF;               // 0.1MHz
  77      =1          CODE_P BYTE  VBack;
  78      =1  };
  79      =1  #ifndef AUTOCALC_PC
           =1 
           =1 #ifdef SUPPORT_DTV
           =1 struct _DTVMDATA {
           =1         CODE_P BYTE Reg62;
           =1         CODE_P BYTE RegBC;
           =1         CODE_P BYTE RegBD;
           =1         CODE_P BYTE RegBE;
           =1         CODE_P WORD PHP;
           =1 };
           =1 #endif
           =1 #endif
  91      =1  #if defined     XGA
           =1         #define MAX_PPF          90000000
           =1 #elif defined SXGA
           =1         #define MAX_PPF         135000000
           =1 #elif defined WXGA
           =1         #define MAX_PPF          90000000
           =1 #elif defined WVGA
  98      =1          #define MAX_PPF          90000000
  99      =1  #elif defined VGA
           =1         #define MAX_PPF          50000000
           =1 #elif defined SVGA
           =1         #define MAX_PPF          80000000
           =1 #elif defined QVGA
           =1         #define MAX_PPF          30000000
           =1 #elif defined WQVGA
           =1         #define MAX_PPF          30000000
           =1 #endif
 108      =1  
 109      =1  extern BYTE cLastSyncLoss;
 110      =1  extern BYTE PcMode;
 111      =1  
 112      =1  void CompLT170E2(void);
 113      =1  
 114      =1  WORD gap(WORD a, WORD b);
 115      =1  
 116      =1  //===================================================================
 117      =1  WORD GetHpnVpn(BYTE);
 118      =1  
 119      =1  WORD ConvertBasedOnInput(WORD dat);
 120      =1  
 121      =1  BYTE IsDTVInput(void);
 122      =1  
 123      =1  void SetVValueForPanel(WORD vstart);
 124      =1  BYTE SetHValueForPanel(void);
 125      =1  BYTE GetActiveRegion(void);
 126      =1  
 127      =1  BYTE DetectAndSetForVGAInput(BYTE);
 128      =1  #ifdef SUPPORT_DTV
           =1 BYTE DetectAndSetForDTVInput(BYTE);
           =1 #endif
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 24  

 131      =1  void CheckPCinput(void);
 132      =1  void CheckDTVinput(void);
 133      =1  
 134      =1  WORD GetCoarseValue(void);
 135      =1  BYTE GetPhaseValue(void);
 136      =1  WORD SetPCCoarseValue(BYTE val);
 137      =1  BYTE SetPhaseValue(BYTE val);
 138      =1  
 139      =1  void DisplayResultAndSetActiveRange(void);
 140      =1  
 141      =1  //=============================================================================
 142      =1  //                    PC Screen Position Move Functions
 143      =1  //=============================================================================
 144      =1  void MoveActiveVpos(BYTE val);          // Up/Down
 145      =1  void MoveActiveHpos(BYTE val);          // Left/Right
 146      =1  
 147      =1  BYTE GetVPosition(void);
 148      =1  BYTE SetVPosition(BYTE val);
 149      =1  BYTE GetHPosition(void);
 150      =1  BYTE SetHPosition(BYTE val);
 151      =1  
 152      =1  void ResetPCValue(void);
 153      =1  
 154      =1  CODE_P BYTE *GetPCInputSourceName(void);
 155      =1  BYTE AutoAdjust(void);
 156      =1  
 157      =1  #endif // __MEASURE__
  32          #include "adc.h"
   1      =1  #ifndef __ADC__
   2      =1  #define __ADC__
   3      =1  
   4      =1  //=============================================================================
   5      =1  //                             ADC Functions
   6      =1  //=============================================================================
   7      =1  
   8      =1  void ADCPowerDown(bit flag);
   9      =1  void SelectADCmux(BYTE sel);
  10      =1  void SetADCMode(BYTE mode);
  11      =1  
  12      =1  void EnableADC(void);
  13      =1  void DisableADC(void);
  14      =1  
  15      =1  WORD GetCoarse(void);
  16      =1  void SetCoarse(WORD i);
  17      =1  void SetPhase(BYTE j);
  18      =1  BYTE GetPhaseCurrent(void);
  19      =1  BYTE SetVCORange(DWORD _IPF);
  20      =1  
  21      =1  //void SetADCGainOffset(BYTE gain, BYTE offset);
  22      =1  void AutoColorAdjust(void);
  23      =1  
  24      =1  
  25      =1  
  26      =1  void AutoColorAdjustForDTV(BYTE flag);
  27      =1  
  28      =1  #endif  // __ADC__
  29      =1  
  30      =1  
  31      =1  
  32      =1  
  33      =1  
  34      =1  
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 25  

  35      =1  
  36      =1  
  37      =1  
  38      =1  
  39      =1  
  40      =1  
  41      =1  
  42      =1  
  43      =1  
  44      =1  
  45      =1  
  46      =1  
  47      =1  
  48      =1  
  49      =1  
  50      =1  
  51      =1  
  52      =1  
  53      =1  
  54      =1  
  33          #include "osdmenu.h"
   1      =1  //osdmenu.h
   2      =1  //LJY10292001
   3      =1  #ifndef __OSDMENU__
   4      =1  #define __OSDMENU__
   5      =1  
   6      =1  //=======================================================================
   7      =1  // 
   8      =1  //BYTE GetOSDDuration(void);
   9      =1  
  10      =1  void ResetVideoValue(void);
  11      =1  //#if defined( SUPPORT_PC ) || defined( SUPPORT_DTV )
  12      =1  //void ResetPCValue(void);
  13      =1  //#endif
  14      =1  BYTE GetOSDMenuLevel( void );
  15      =1  
  16      =1  void DrawMenulist(BYTE);
  17      =1  void Display_EnterPin(void);
  18      =1  void OSDHighMenu_sub(void);
  19      =1  void ResetOSDValue(void);
  20      =1  #ifdef E_Wintek
           =1 void ResetUESROSDValue(void);
           =1 #endif
  23      =1  //BYTE OnChangingValue(void);
  24      =1  //Not used yet *******************BYTE OnChangingTime(void);
  25      =1  
  26      =1  //WORD GetOSDclock(void);
  27      =1  
  28      =1  void InitOSDMenu(void);
  29      =1  BYTE CloseOSDMenu(void);
  30      =1  void OpenOSDMenu(void);
  31      =1  void OSDHighMenu(void);
  32      =1  void OSDSelect(void);
  33      =1  void OSDCursorMove(BYTE flag );
  34      =1  void OSDLeftRight(BYTE flag );
  35      =1  void OSDValueUpDn(BYTE flag);
  36      =1  WORD SetItemValue( BYTE id, BYTE flag );
  37      =1  BYTE DoAction(BYTE id);
  38      =1  
  39      =1  BYTE SaveValue1(void);
  40      =1  void ClearValueWin(void);
  41      =1  
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 26  

  42      =1  void OSDNumber( BYTE num );
  43      =1  
  44      =1  void Set4WideScreen(BYTE id);
  45      =1  
  46      =1  void SetRGBContrast( BYTE id, BYTE val );
  47      =1  BYTE SetPCColorTemp(BYTE flag);
  48      =1  void ResetPanelAttributeValue(void);
  49      =1  WORD GetItemValue( BYTE);
  50      =1  void DisplayViewBar( WORD,BYTE);
  51      =1  void DrawNum(WORD, CODE_P struct NumType *, WORD);
  52      =1  void DrawStringByLang( WORD, CODE_P struct EnumType *, WORD);
  53      =1  
  54      =1  void DisplayVolumebar(BYTE val);
  55      =1  BYTE GetOSDLang(void);
  56      =1  void InitOSDMenuXY(void);
  57      =1  
  58      =1  void Display_TVGuide_Window(void);
  59      =1  void Display_TVGuide_Status(void);
  60      =1  
  61      =1  void ChangeVchip_LevelCursor(BYTE);
  62      =1  void ChangeVchip_ContentCursor(BYTE);
  63      =1  void Select_VchipLevel(void);
  64      =1  void SetVideoMode(BYTE mode);
  65      =1  BYTE GetVideoDatawithOffset(BYTE offset);
  66      =1  void SetVideoContrast(BYTE newv);
  67      =1  void SetVideoBrightness(BYTE newv);
  68      =1  void SetVideoHue(BYTE newv) ;
  69      =1  void SetVideoSaturation(BYTE svtype, BYTE newv) ;
  70      =1  BYTE SetVideoSharpness(BYTE flag) ;
  71      =1  void SetVideoBacklight(BYTE newv) ;
  72      =1  //------------------------------------------------andy awt 981013
  73      =1  //void DaySelect(BYTE);
  74      =1  void CAMOutDSel(BYTE val);
  75      =1  void DVRAodioSel(BYTE  val);
  76      =1  
  77      =1  //------------------------------------------------andy awt 981013
  78      =1  
  79      =1  void DisplayLineOSD(void);      // OSD Line display Demo
  80      =1  
  81      =1  
  82      =1  struct MenuType {
  83      =1          BYTE    width,  height;
  84      =1          BYTE    TitleColor;     
  85      =1          BYTE    CursorColor;
  86      =1  };
  87      =1  
  88      =1  struct NumType {
  89      =1          BYTE    PrePostCharLen;         // high nibble(pre) / low nibble(post)
  90      =1          BYTE    PrePostChar[4];
  91      =1  };
  92      =1  
  93      =1  struct NumberStringType {
  94      =1          BYTE    x, y;
  95      =1          BYTE    width;
  96      =1          BYTE    BackColor;
  97      =1          BYTE    Radix;
  98      =1          BYTE    NumColor;
  99      =1          BYTE    MaxLen;                         // maximum length of string
 100      =1          BYTE    PrePostCharLen;         // high nibble(pre) / low nibble(post)
 101      =1          BYTE    PrePostChar[3];
 102      =1  };
 103      =1  
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 27  

 104      =1  struct TimeType {
 105      =1          BYTE    x, y;
 106      =1          BYTE    width;
 107      =1          BYTE    BackColor;
 108      =1          BYTE    Format;                         //_24H_TIME
 109      =1          BYTE    TimeColor;
 110      =1          BYTE    CursorColor;
 111      =1  };
 112      =1  
 113      =1  struct EnumType {
 114      =1          BYTE    Sz;//size
 115      =1          BYTE    ByLang;
 116      =1          BYTE    Str[15];                        // doesn't matter the size !!!
 117      =1  };
 118      =1  
 119      =1  #define ICON_CH_SZ              2
 120      =1  //#define BAR_NUM_SZ            4
 121      =1  #define ICON_BUF_SZ             2
 122      =1  struct DefineMenu {
 123      =1          //WORD                                          Icon[ICON_BUF_SZ];      
 124      =1          BYTE                            CODE    *Icon;
 125      =1          BYTE                                            **Desc;                         
 126      =1          BYTE                                            PreFnId, 
 127      =1                                                                  PostFnId;
 128      =1  //      void            (*CalltoFunction)(void);                                    // Un/Dn/Sel Function
 129      =1          BYTE                                            IconColor;                      //NIL: not to display icon
 130      =1          BYTE                                            DescColor;                      //NIL: not to display desc. (IconColor==NIL && DescColor==NIL)->Last Item
 131      =1          struct DefineMenu       CODE    *Child;
 132      =1          BYTE                                            Type;                           // MENU, CHOICEMENU, BAR, NUMBER, TIME, ACTION, ENUM_STRING
 133      =1          BYTE                                            ActiveWithCursor;
 134      =1          BYTE                                            Id;
 135      =1          BYTE                            CODE    *TypeData;      //MenuType, BarType, NumType,,,
 136      =1  } ;
 137      =1  
 138      =1  struct PictureInfo {
 139      =1  
 140      =1          BYTE Register_Addr;
 141      =1          BYTE EEPROM_Addr;
 142      =1          struct RegisterInfo     CODE    *Control_Range;
 143      =1  };
 144      =1  
 145      =1  
 146      =1  //-------------------------------------------------------------------
 147      =1  // OSD Window Information
 148      =1  //-------------------------------------------------------------------
 149      =1  // Window Number
 150      =1  #define OSDCURSORWINDOW                 1
 151      =1  #define OSDMENUWINDOW                   OSDCURSORWINDOW+1
 152      =1  #define OSDMENU_TOPWIN                  OSDCURSORWINDOW+2
 153      =1  #define OSDMENU_TITLEWIN                OSDCURSORWINDOW+3
 154      =1  #define OSDBARWINDOW                    OSDCURSORWINDOW
 155      =1  
 156      =1  #define TECHWELLOGO_OSDWIN      1       
 157      =1  #define TVINFO_OSDWIN           2       
 158      =1  #define FONTTEST_OSDWIN         2       
 159      =1  #define INPUTINFO_OSDWIN        3  
 160      =1  #define RATINGINFO_OSDWIN       1       
 161      =1  #define PCINFO_OSDWIN           3//4/   
 162      =1  
 163      =1  //-------------OSDMENU_TITLEWIN------------------------------------------------------
 164      =1  // Window Start address
 165      =1  #define OSDMENU_MAINADDR        0
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 28  

 166      =1  #define OSDMENU_SUBADDR     OSDMENU_MAINADDR+15    //25*9:196
 167      =1  #define OSDMENU_BARADDR         175 //OSDMENU_SUBADDR+225    //256   //25x2:50
 168      =1  
 169      =1  #define INPUTINFO_ADDR          160     // 9x1:9
 170      =1  #ifdef WQVGA
           =1 #define INPUTINFO1_ADDR         INPUTINFO_ADDR+17       //17x3:51
           =1 #else
 173      =1  #define INPUTINFO1_ADDR         INPUTINFO_ADDR+34       //17x2:51
 174      =1  #endif
 175      =1  
 176      =1  #define MUTEINFO_ADDR       INPUTINFO1_ADDR+51  // 4x1:4
 177      =1  #define TVCHINFO_ADDR           MUTEINFO_ADDR//324      // 3X1:3
 178      =1  #define LOGO_ADDR                       0
 179      =1  #define RATINGINFO_ADDR         0       //addr:210(8x1:8)
 180      =1  #define PCMEASUREINFO_ADDR  OSDMENU_BARADDR //10x1
 181      =1  
 182      =1  
 183      =1  //--------------------------------------------------------------------
 184      =1  // OSD Menu Position Range
 185      =1  #if ((defined WQVGA) && (defined ANALOG_7INCH)) || ((defined QVGA) && (defined SHARP_LQ050Q5DR01))
           =1         #define OSD_PHR_ PHR_/2
           =1 #else
 188      =1          #define OSD_PHR_ PHR_
 189      =1  #endif
 190      =1  
 191      =1  #define OSDHSTART_MAX (OSD_PHR_-(12+1)*25 - 56*2 -4)  //PHR - (pixelsize +Hspace)*MenuWidth - Hborder*2 - 
             -outlinewidth*2
 192      =1  #define OSDVSTART_MAX (PVR_-(18+11)*9 - 5*2 ) //  PVR - (Linesize+Vspace)*MENU_HEIGHT - Vborder*2  - outli
             -newidth*2
 193      =1  
 194      =1  #define OSDMENUX_MIN 1//0
 195      =1  #define OSDMENUX_MAX (OSDHSTART_MAX>>3)
 196      =1  #define OSDMENUX_50  (OSDHSTART_MAX>>4)
 197      =1  
 198      =1  #define OSDMENUY_MIN 2//0
 199      =1  #define OSDMENUY_MAX (OSDVSTART_MAX>>2)
 200      =1  #define OSDMENUY_50  (OSDVSTART_MAX>>3)
 201      =1  
 202      =1  //--------------------------------------------------------------------
 203      =1  // OSD Menu Width, Height 
 204      =1  #ifdef E_Wintek
           =1 #define ICON_HIGH                               0x14
           =1 #else
 207      =1  #define ICON_HIGH                               0x0a
 208      =1  #endif
 209      =1  #define TOTAL_MAX_HIGHT                 9
 210      =1  
 211      =1  #define TOPMENU_WIDTH                   2
 212      =1  #define TOTAL_TOP_HEIGHT                5       // Include blank line!
 213      =1  
 214      =1  #define TOPMENU_HEIGHT                  4       
 215      =1  
 216      =1  #if (defined QVGA) && (defined SHARP_LQ050Q5DR01)
           =1 #define MENU_WIDTH                              17 //23//25 
           =1 #define TITLE_MAX_DESC                  17//25  //
           =1 #define BAR_LENGTH                              0
           =1 #else
 221      =1  #define MENU_WIDTH                              23//23//25 
 222      =1  #define TITLE_MAX_DESC                  23//25  //
 223      =1  #define BAR_LENGTH                              5//8
 224      =1  #endif
 225      =1  
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 29  

 226      =1  #define MENU_HEIGHT                             7//6 
 227      =1  
 228      =1  #define BARNUM_LENGTH                   8       //11
 229      =1  #ifdef REFERENCE
           =1 #define BACK_COLOR                              BG_COLOR_CYAN
           =1 #define DEFAULT_COLOR                   BG_COLOR_CYAN   | CH_COLOR_WHITE
           =1 //#define ACTIVE_COLOR                  BG_COLOR_YELLOW | CH_COLOR_WHITE
           =1 #define TITLE_BACK_COLOR                BG_COLOR_MAGENTA
           =1 #define TITLE_COLOR                             TITLE_BACK_COLOR | CH_COLOR_YELLOW
           =1 #define COMMENT_COLOR                   TITLE_BACK_COLOR | CH_COLOR_WHITE
           =1 #define CURSOR_COLOR                    BG_COLOR_YELLOW | CH_COLOR_BLUE
           =1 #define OSD_INFO_COLOR                  DEFAULT_COLOR
           =1 #define BAR_COLOR                               DEFAULT_COLOR   
           =1 #define BAR_NUM_COLOR                   DEFAULT_COLOR
           =1 #define NUM_COLOR                               DEFAULT_COLOR
           =1 
           =1 #define OSDMENU_OUTLINE_COLOR   BG_COLOR_BLUE
           =1 
           =1 #else
 245      =1  #define BACK_COLOR                              BG_COLOR_CYAN
 246      =1  #define DEFAULT_COLOR                   BG_COLOR_CYAN | CH_COLOR_WHITE
 247      =1  //#define ACTIVE_COLOR                  BG_COLOR_YELLOW | CH_COLOR_WHITE
 248      =1  #define TITLE_BACK_COLOR                BG_COLOR_BLUE
 249      =1  #define TITLE_COLOR                             TITLE_BACK_COLOR | CH_COLOR_YELLOW
 250      =1  #define COMMENT_COLOR                   TITLE_BACK_COLOR | CH_COLOR_WHITE
 251      =1  #define CURSOR_COLOR                    BG_COLOR_YELLOW  | CH_COLOR_BLUE
 252      =1  #define OSD_INFO_COLOR                  BG_COLOR_CYAN    | CH_COLOR_GREEN
 253      =1  #define BAR_COLOR                               DEFAULT_COLOR   
 254      =1  #define BAR_NUM_COLOR                   DEFAULT_COLOR
 255      =1  #define NUM_COLOR                               DEFAULT_COLOR
 256      =1  
 257      =1  #define VER_COLOR               BG_COLOR_CYAN   | CH_COLOR_YELLOW   /// V1.1 03/07/07 simonsung
 258      =1  
 259      =1  
 260      =1  #define OSDMENU_OUTLINE_COLOR   BG_COLOR_CYAN
 261      =1  #endif 
 262      =1  
 263      =1  
 264      =1  //DisplayedOSD
 265      =1  //              new       |     MENU    TVINFO          CC              INPUTINFO               PCINFO          RATINGINFO
 266      =1  //      current   |
 267      =1  //============|=========================================================================
 268      =1  //      MENU      |                     TVINFO          --              INPUTINFO               PCINFO          MENU + RATINGINFO       
 269      =1  //                        |                                              
 270      =1  //------------|-------------------------------------------------------------------------
 271      =1  //      TVINFO    |     MENU    TVINFO          --              INPUTINFO               PCINFO          TVINFO+RATING
 272      =1  //------------|-------------------------------------------------------------------------
 273      =1  //      CC                |     MENU->  TVINFO->                        INPUTINFO->             PCINFO          RATINGINFO
 274      =1  //                        |      CC              CC                                      CC                                              
 275      =1  //------------|-------------------------------------------------------------------------
 276      =1  //      INPUTINFO |     MENU    TVINFO          --              INPUTINFO               PCINFO          --
 277      =1  //------------|-------------------------------------------------------------------------
 278      =1  //      PCINFO    |     MENU    x                       x               INPUTINFO               PCINFO          x
 279      =1  //------------|-------------------------------------------------------------------------
 280      =1  //      RATINGINFO|     MENU    TVINFO     RATING   INPUTINFO           x                       RATINGINFO
 281      =1  //                                                                      
 282      =1  
 283      =1  //=======================================================================================
 284      =1  // OSD Menu Constant define.
 285      =1  //=======================================================================================
 286      =1  //Time type
 287      =1  #define _24H_TIME               1
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 30  

 288      =1  
 289      =1  //for previous, next, parent or child
 290      =1  #define YES                             0xfe    
 291      =1  #define NO                              0
 292      =1  
 293      =1  
 294      =1  //#define OVERWRITE             0
 295      =1  //#define POPUP                 1
 296      =1  
 297      =1  //CursorMove
 298      =1  #define VERT                    0
 299      =1  #define HORI                    1
 300      =1  
 301      =1  //Type of MenuItem
 302      =1  #define OSDMENU                 1
 303      =1  #define CHOICEMENU              2
 304      =1  #define ACTION                  3
 305      =1  #define BAR                             4
 306      =1  #define NUMBER                  5
 307      =1  #define CHOICE                  6
 308      =1  #define ENUM_STRING             7 //YESNO                       7
 309      =1  #define CHOICE1                 8
 310      =1  #define TIME                    9
 311      =1  #define NUMBER_STRING   10
 312      =1  #define TEXT_STR              11   // V1.1 02/28/07 simonsung
 313      =1  
 314      =1  
 315      =1  //Bar type
 316      =1  #define LEFT_FILLED             1
 317      =1  #define RIGHT_FILLED    2
 318      =1  #define NO_FILLED               3
 319      =1  
 320      =1  //OSDmenu up and down key
 321      =1  #define UP                                      1
 322      =1  #define DN                                      2
 323      =1  #define RIGHT                           3
 324      =1  #define LEFT                            4
 325      =1  
 326      =1  // Action Id
 327      =1  #define DISP_INFO                       0x16
 328      =1  
 329      =1  #define INPUTSELECTION                          0x2f
 330      =1  
 331      =1  #define CHANGE_TO_COMPOSITE                     (0x20|CH_TW2835)                        // Low nibble need to start from 1 
 332      =1  #define CHANGE_TO_SVIDEO                        (0x20|SVIDEO)                           // so that it match with COMPOSITE...
 333      =1  #define CHANGE_TO_COMPONENT                     (0x20|COMPONENT)                
 334      =1  #define CHANGE_TO_DTV                           (0x20|DTV)              
 335      =1  #define CHANGE_TO_TV                            (0x20|TV)                                       
 336      =1  #define CHANGE_TO_PC                            (0x20|PC)                                       
 337      =1  #define CHANGE_TO_DIGITALVGA            (0x20|DIGITALVGA)                       
 338      =1  #define CHANGE_TO_SCART                         (0x20|SCART)                            
 339      =1  
 340      =1  
 341      =1  #define OSDPOSITIONMODE     0x10
 342      =1  #define OSD_VPOS                        0x11
 343      =1  #define OSD_HPOS                        0x12
 344      =1  #define OSD_HALFTONE            0x13
 345      =1  #define OSD_DURATION            0x14
 346      =1  #define RESET_OSDVALUE          0x15
 347      =1  #define OSDLANG                         0x16
 348      =1  
 349      =1  #define PANEL_CONTRAST          0x58
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 31  

 350      =1  #define PANEL_BRIGHTNESS        0x59
 351      =1  #define PANEL_HUE                       0x5a
 352      =1  #define PANEL_SHARPNESS         0x5b
 353      =1  #define PANEL_SATURATION        0x5c
 354      =1  
 355      =1  #define PC_VPOS                         0x43
 356      =1  #define PC_HPOS                         0x44
 357      =1  #define PC_HSIZE                        0x4d
 358      =1  
 359      =1  #define PC_CLOCK                        0x45
 360      =1  #define PC_PHASE                        0x46
 361      =1  
 362      =1  #define AUTOADJUST                      0x47
 363      =1  #define AUTOADJUST2                     0x48
 364      =1  //#define SAVE_AUTOADJUST               0x49
 365      =1  #define RESET_AUTOADJUST        0x4a
 366      =1  
 367      =1  #define PCCOLORADJUST           0x4b
 368      =1  #define SAVE_COLORADJUST        0x4c
 369      =1  //#define RESET_COLORADJUST     0x4d
 370      =1  
 371      =1  #define RESET_PCVALUE           0x4e
 372      =1  #define CameraOSD                       0x4f
 373      =1  
 374      =1  #define PC_COLOR_MODE           0x3f
 375      =1  #define PC_COLOR_TEMP           0x30
 376      =1  #define PC_COLOR_MODE1          0x31
 377      =1  #define PC_COLOR_MODE2          0x32
 378      =1  #define PC_COLOR_MODE3          0x33
 379      =1  #define PC_COLOR_USER           0x34
 380      =1  #define PC_COLOR_R                      0x35
 381      =1  #define PC_COLOR_G                      0x36
 382      =1  #define PC_COLOR_B                      0x37
 383      =1  
 384      =1  #define VIDEO_MODE                      0x90
 385      =1  #define VIDEO_MODE1                     0x91
 386      =1  #define VIDEO_MODE2                     0x92
 387      =1  #define VIDEO_MODE3                     0x93
 388      =1  #define VIDEO_USER                      0x94
 389      =1  #define VIDEO_CONTRAST          0x95
 390      =1  #define VIDEO_BRIGHTNESS        0x96
 391      =1  #define VIDEO_SATURATION        0x97
 392      =1  #define VIDEO_HUE                       0x99
 393      =1  #define VIDEO_SHARPNESS         0x9a
 394      =1  #define VIDEO_BACKLIGHT         0x9c            // add new value 
 395      =1  #define RESET_VIDEOVALUE        0x9b
 396      =1  #ifdef E_Wintek
           =1 #define RESET_USERVALUE 0x9d
           =1 #endif
 399      =1  #define VIDEOPICTURE            0x9f
 400      =1  
 401      =1  #define INPUTSTD                        0x6f
 402      =1  #define CHANGE_TO_AUTO          0x60
 403      =1  #define CHANGE_TO_NTSC          (0x60 | NTSC)
 404      =1  #define CHANGE_TO_PAL           (0x60 | PAL)
 405      =1  #define CHANGE_TO_SECAM         (0x60 | SECAM)
 406      =1  #define CHANGE_TO_NTSC4         (0x60 | NTSC4)
 407      =1  #define CHANGE_TO_PALM          (0x60 | PALM)
 408      =1  #define CHANGE_TO_PALN          (0x60 | PALN)
 409      =1  #define CHANGE_TO_PAL60         (0x60 | PAL60)
 410      =1  
 411      =1  
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 32  

 412      =1  
 413      =1  
 414      =1  #define CLOSED_CAPTION          0x7f
 415      =1  #define CLOSEDCAP_OFF           0x70
 416      =1  #define CLOSEDCAP_CC1           0x71
 417      =1  #define CLOSEDCAP_CC2           0x72
 418      =1  #define CLOSEDCAP_CC3           0x73
 419      =1  #define CLOSEDCAP_CC4           0x74
 420      =1  #define CLOSEDCAP_T1            0x75
 421      =1  #define CLOSEDCAP_T2            0x76
 422      =1  #define CLOSEDCAP_T3            0x77
 423      =1  #define CLOSEDCAP_T4            0x78
 424      =1  
 425      =1  #define TV_GUIDE                        0x8f
 426      =1  #define NO_VCHIP_LOCK           0
 427      =1  #define VCHIP_TV_Y                      1
 428      =1  #define VCHIP_TV_Y7                     2
 429      =1  #define VCHIP_TV_G                      3
 430      =1  #define VCHIP_TV_PG                     4
 431      =1  #define VCHIP_TV_14                     5
 432      =1  #define VCHIP_TV_MA                     6
 433      =1  #define PASSWORD                        0x87
 434      =1  #define NEW_PASSWORD            0x88
 435      =1  #define CHK_PASSWORD            0x89
 436      =1  #define RET_CHK_PASSWORD        0x8a
 437      =1  
 438      =1  #define MPAA_RATING                     0x9f
 439      =1  #define NO_MPAA_RATING          0
 440      =1  #define MPAA_G                          1
 441      =1  #define MPAA_PG                         2
 442      =1  #define MPAA_PG_13                      3
 443      =1  #define MPAA_R                          4
 444      =1  #define MPAA_NC_17                      5
 445      =1  #define MPAA_X                          6
 446      =1  
 447      =1  #define TVINSTALL                       0xa0
 448      =1  #define SCAN_CHANNEL            0xa1
 449      =1  #define AIR_CABLE_TV            0xa3
 450      =1  #define STORE_CLEAR_TVCHN       0xa4
 451      =1  #define MTS                                     0xa5
 452      =1  #define EDIT_CHANNEL            0xa6
 453      =1          #define         MTS_STEREO                      0//0x10
 454      =1          #define         MTS_MONO                        1//0x11
 455      =1  
 456      =1  #define AUDIO_VOLUME            0xb7
 457      =1  
 458      =1  #if 0 //andy AWT8.4 20090811
           =1 
           =1 #define AUDIO_BALANCE           0xb9
           =1 #define AUDIO_BASS                      0xba
           =1 #define AUDIO_TREBLE            0xbb
           =1 
           =1 #define AUDIO_LOUDNESS          0xbc
           =1 #define AUDIO_EFFECT            0xbd
           =1 #define AUDIO_MUTE                      0xbe
           =1 #endif
 468      =1  
 469      =1  #define DayChoice           0xb8
 470      =1  #define CAMOSDONOFF         0xb9
 471      =1  #define GAUGEChoice         0xba
 472      =1  #define OsdLockChoice       0xbb
 473      =1  #define PRIORITYChoice      0xcA
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 33  

 474      =1  #define DVRDisplay              0xcc
 475      =1  
 476      =1  #define CAMAONOFF                   0xc1
 477      =1  #define CAMBONOFF               0xc2
 478      =1  #define CAMCONOFF                   0xc3
 479      =1  #define CAMRONOFF                       0xc4
 480      =1  
 481      =1  #define IMAGEChoice         0xc5 
 482      =1  #define REARChoice          0xc6
 483      =1  #define JUMPChoice          0xc7
 484      =1  #define CAMOUTChoice        0xc8 
 485      =1  #define STIME_STEP                  0xc9
 486      =1  #define TriggerVGA                  0xcb
 487      =1  #define IMAGE_A_Choice         0xcd
 488      =1  #define IMAGE_B_Choice         0xce
 489      =1  #define IMAGE_C_Choice         0xcf
 490      =1  
 491      =1  
 492      =1  #define MANUAL_TUNE_CHANNEL     0xab
 493      =1  #define FINE_TUNE_CHANNEL       0xac
 494      =1  #define STORE_PALCHANNEL        0xad
 495      =1  
 496      =1  //#define CLEAR_TVCHN                   0xb0
 497      =1  //#define STORE_TVCHN                   0xb1
 498      =1  
 499      =1  #define WIDESCREEN                      0xc0
 500      =1  #define WIDESCREEN_NORMAL       0 
 501      =1  #define WIDESCREEN_WIDE         1 
 502      =1  #define WIDESCREEN_PANO         2
 503      =1  #define WIDESCREEN_FULL         3 
 504      =1  #define WIDESCREEN_ZOOM         4 
 505      =1  
 506      =1  #define SYSTEM_CLOCK            0xd1
 507      =1  #define SYSTEM_CLOCK_H          0xd2
 508      =1  #define WAKEUP_TIME                     0xd3
 509      =1  #define WAKEUP_TIME_H           0xd4
 510      =1  #define WAKEUP_PR                       0xd5
 511      =1  #define OFF_TIME                        0xd6
 512      =1  #define OFF_TIME_H                      0xd7
 513      =1  #define SLEEP_TIMER                     0xd8
 514      =1  
 515      =1  #define Resolution                      0xe0
 516      =1  #define FPS                                     0xe1
 517      =1  #define Quality                         0xe2
 518      =1  #define RecordMode                      0xe3
 519      =1  #define RecordLength            0xe4
 520      =1  #define PreAlarmLength          0xe5
 521      =1  #define PostAlarmLength         0xe6
 522      =1  #define Apply                           0xe7
 523      =1  #define ManualRecordStart       0xe8
 524      =1  #define ManualRecordStop        0xe9
 525      =1  #define Snapshot                        0xea
 526      =1  #define FormatSD                        0xeb
 527      =1  #define AudioRecord                     0xec
 528      =1  #define FirmwareUpdate          0xed
 529      =1  #define ChangePassword          0xee
 530      =1  #define OverWrite                       0xef
 531      =1  
 532      =1  
 533      =1  
 534      =1  
 535      =1  #define Year                            0x20
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 34  

 536      =1  #define Month                           0x21
 537      =1  #define Day                                     0x22
 538      =1  #define Hour                            0x23
 539      =1  #define Minute                          0x24
 540      =1  
 541      =1  #define DaylightSaving                          0x25
 542      =1  #define TimeBeginesMonth                        0x26
 543      =1  #define TimeBeginesWeek                         0x27
 544      =1  #define TimeBeginesTime                         0x28
 545      =1  #define StandardTimeBeginesMonth        0x29
 546      =1  #define StandardTimeBeginesWeek         0x2a
 547      =1  #define StandardTimeBeginesTime         0x2b
 548      =1  #define TimeZone                                        0x2c
 549      =1  #define FirstNumber                                     0x2d
 550      =1  #define SecondNumber                            0x2e
 551      =1  #define ThridNumber                                     0x2f
 552      =1  #define FourthNumber                            0x38
 553      =1  
 554      =1  
 555      =1  
 556      =1  #define OSDLANGI                        0xd9
 557      =1  #define OSDLANGII                       OSDLANGI+1
 558      =1  #define OSDLANGIII                      OSDLANGI+2
 559      =1  #define OSDLANGIV                       OSDLANGI+3
 560      =1  
 561      =1  
 562      =1  #define TOHIGHMENU                      0xf1
 563      =1  #define MOVECURSOR2FIRST        0xf2
 564      =1  #define RESET_ALL                       0xf3
 565      =1  #define EXITMENU                        0xf4
 566      =1  #define DVRParamApply           0xf5
 567      =1  #define DATETIMEApply           0xf6
 568      =1  
 569      =1  
 570      =1  #define CHOICE1_VAL                     0xfc
 571      =1  #define CHOICE_VAL                      0xfd
 572      =1  #define BAR_VAL                         0xfe
 573      =1  #define NUM_VAL                         0xff
 574      =1  
 575      =1  #define CAMNumberChoice     0xa3 
 576      =1  #define PelcoChoice         0xa4
 577      =1  #define Baud_rateChoice         0xa5
 578      =1  
 579      =1  #endif  // __OSDMENU__
  34          #include "etc_eep.h"
   1      =1  #ifndef __ETC_EEP__
   2      =1  #define __ETC_EEP__
   3      =1  
   4      =1  
   5      =1  ////eeprom.h
   6      =1  
   7      =1  //=========================================================================
   8      =1  //      EEPROM structure
   9      =1  //      0x00    BYTE    4       'TW88'
  10      =1  #define EEP_FWREV_MAJOR                 0x04    //BYTE  1       F/W Rev.-major(Hex)     
  11      =1  #define EEP_FWREV_MINOR                 0x05    //BYTE  1       F/W Rev.-minor(Hex)
  12      =1  #define EEP_DEBUGLEVEL                  0x06    //BYTE  1       DebugLevel
  13      =1  //
  14      =1  #define EEP_AUTODETECT                  0x07    //BYTE  1       Flag for Input Auto Detect      -0:Auto, 1:NTSC,....
  15      =1  #define EEP_AUTODETECTTYTE              0x08    //BYTE  1       Type of Auto-detect(will be value of register 0x1d)
  16      =1  //                      ---------------------------------------------------------------
  17      =1  #define EEP_WIDEMODE                    0x09    //BYTE  1   Wide Mode
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 35  

  18      =1  
  19      =1  #define EEP_AUTORECOGNITION             0x0a    //BYTE  1       Auto Recognition
  20      =1  #define EEP_VIDEOMODE                   0x0b    //BYTE  1   Video Mode
  21      =1  
  22      =1  #define EEP_OSDLANG                             0x0c    //BYTE  1   OSDLang                                             // 0
  23      =1  
  24      =1  #define EEP_OSDPOSITIONMODE     0x0d    //BYTE  1       OSD Position Mode
  25      =1  #define EEP_CCD                                 0x0e    //BYTE  1       Closed Caption- 0: off, 1:on
  26      =1  
  27      =1  #define EEP_INPUTSELECTION              0x0f    //BYTE  1       InputSelection
  28      =1  
  29      =1  //
  30      =1  #define EEP_PC_CONTRAST                 0x10
  31      =1  #define EEP_PC_BRIGHT                   0x11
  32      =1  
  33      =1  #define EEP_CONTRAST                    0x12    //BYTE  1       Contrast 
  34      =1  #define EEP_BRIGHTNESS                  0x13    //BYTE  1       Brightness
  35      =1  #define EEP_SATURATION_U                0x14    //BYTE  1       Saturation :U
  36      =1  #define EEP_SATURATION_V                0x15    //BYTE  1       Saturation :V
  37      =1  #define EEP_SHARPNESS                   0x16    //BYTE  1       Sharpness 
  38      =1  #define EEP_HUE                                 0x17    //BYTE  1       Hue                    
  39      =1  
  40      =1  //====================================HS AWT 981001
  41      =1  #define  EEP_AutoMode           0xa0
  42      =1  #define  EEP_IMAGEMode          0xa1
  43      =1  #define  EEP_RearMode           0xa2
  44      =1  #define  EEP_COSDMode           0xa3
  45      =1  #define  EEP_GAUGEMode          0xa4
  46      =1  #define  EEP_CAMAMode           0xa5 
  47      =1  #define  EEP_CAMBMode           0xa6
  48      =1  #define  EEP_CAMCMode           0xa7
  49      =1  #define  EEP_CAMRMode           0xa8
  50      =1  #define  EEP_CAMOutMode         0xa9    
  51      =1  #define  EEP_TimeStep           0xaa
  52      =1  #define  EEP_Powerflag          0xab   
  53      =1  #define  EEP_ONOFFChoice        0xac 
  54      =1  
  55      =1  #define  EEP_PRIORITY           0xad
  56      =1  #define  EEP_JUMPMode           0xae
  57      =1  #define  EEP_NowModeState       0xaf
  58      =1  #define  EEP_SelectMode         0xb0
  59      =1  #define  EEP_PriorityOffSelectMode      0xb1
  60      =1  #define  EEP_AudioRecord                0xb2
  61      =1  
  62      =1  #define  EEP_FirstNumber                0xb3
  63      =1  #define  EEP_SecondNumber               0xb4
  64      =1  #define  EEP_ThridNumber                0xb5
  65      =1  #define  EEP_FourthNumber               0xb6
  66      =1  
  67      =1  #define  EEP_CAMNUMBER     0xb7
  68      =1  #define  EEP_PELCO                 0xb8
  69      =1  #define  EEP_Baud_rate     0xb9
  70      =1  #define  EEP_TriggerVGA    0xba
  71      =1  #define  EEP_DVRDisplay    0xbb
  72      =1  #define  EEP_IMAGE_A_Mode    0xbc//andy A1.4 20100113
  73      =1  #define  EEP_IMAGE_B_Mode    0xbd//andy A1.4 20100113
  74      =1  #define  EEP_IMAGE_C_Mode    0xbe//andy A1.4 20100113
  75      =1  
  76      =1  //#define  EEP_SelectModeBuf         0xb2
  77      =1  
  78      =1  #if 0
           =1 #define  EEP_Resolution                 0xc0
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 36  

           =1 #define  EEP_FPS                                0xc1
           =1 #define  EEP_Quality                    0xc2
           =1 #define  EEP_RecordMode                 0xc3
           =1 #define  EEP_RecordLength               0xc4
           =1 #define  EEP_PreAlarmLength             0xc5
           =1 #define  EEP_PostAlarmLength    0xc6
           =1 #endif
  87      =1  //====================================HS AWT 981001
  88      =1  
  89      =1  //
  90      =1  //              ---------------------------------------------------------------
  91      =1  #define EEP_PCAUDIOPVOL         0x37    //BYTE  1   AudioVol
  92      =1  #define EEP_AUDIOPVOL                   0x38    //BYTE  1   AudioVol
  93      =1  #define EEP_AUDIOBALANCE                0x39    //BYTE  1   AudioBalance
  94      =1  //
  95      =1  //              ---------------------------------------------------------------
  96      =1  
  97      =1  #define EEP_BLOCKMOVIE                  0x40    //BYTE  1       BlockedMovie:Blocked rating for Movie   
  98      =1  #define EEP_BLOCKTV                             0x41    //BYTE  1       BlockedTV:Blocked rating for TV                 
  99      =1  #define EEP_FVSLD                               0x42    //BYTE  6
 100      =1  //                                                              7    6       4    3    2    1    0
 101      =1  //  FVSLD Level                        ALL   FV(V)   S    L    D    
 102      =1  //  0x43    BYTE    1   TV-Y            X  
 103      =1  //  0x44        BYTE    1   TV-Y7           X    X 
 104      =1  //  0x45        BYTE    1   TV-G            X 
 105      =1  //  0x46        BYTE    1   TV-PG           X       X    X    X    X
 106      =1  //  0x47        BYTE    1   TV-14           X       X    X    X    X 
 107      =1  //  0x48        BYTE    1   TV-MA           X       X    X    X
 108      =1  //
 109      =1  #define EEP_VCHIPPASSWORD               0x49    //BYTE  4   OSDPassword                                 //Defualt:3366
 110      =1  //                      ---------------------------------------------------------------
 111      =1  //
 112      =1  //
 113      =1  //      0x61    WORD    2   PanelXRes
 114      =1  //      0x63    WORD    2       PanelYRes
 115      =1  //      0x65    BYTE    1       PanelHsyncMinPulseWidth
 116      =1  //      0x66    BYTE    1       PanelVsyncMinPulseWidth
 117      =1  //      0x67    WORD    2       PanelHminBackPorch
 118      =1  //      0x69    BYTE    1       PanelHsyncPolarity
 119      =1  //      0x6a    BYTE    1       PanelVsyncPolarity
 120      =1  //      0x6b    WORD    2       PanelDotClock
 121      =1  //      0x6d    BYTE    1       PanelPixsPerClock
 122      =1  //      0x6e    BYTE    1       PanelDEonly
 123      =1  //                      ---------------------------------------------------------------
 124      =1  //
 125      =1  //      0x80    PC Data
 126      =1  //
 127      =1  //                      ---------------------------------------------------------------
 128      =1  //
 129      =1  //      0x300   TV Data
 130      =1  //
 131      =1  //      --- NTSC_TV -------------------------------------------------------------
 132      =1  //      CNT_SAVEDAIR                    BYTE    1   Total count of saved Air TV Channel.
 133      =1  //      IDX_CURAIR                              BYTE    1   Index of Current Air TV Channel
 134      =1  //      CHN_CURAIR                              BYTE    1   Current Air TV Channel.
 135      =1  //
 136      =1  //      FIRSTSAVED_AIRCHN               BYTE    1       First saved Air TV channel no   (maximum 100)
 137      =1  //      ....
 138      =1  //
 139      =1  //      CNT_SAVEDCABLE                  BYTE    1   Total count of saved Cable TV Channel.
 140      =1  //      IDX_CURCABLE                    BYTE    1   Index of Current Cable TV Channel
 141      =1  //      CHN_CURCABLE                    BYTE    1   Current Cable TV Channel.
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 37  

 142      =1  //
 143      =1  //      FIRSTSAVED_CABLECHN             BYTE    1       First saved Cable TV channel no (maximum 100)
 144      =1  //
 145      =1  //      --- PAL_TV --------------------------------------------------------------
 146      =1  //      PR_CUR                                  BYTE    1   Current PR no.
 147      =1  //      FIRST_SAVEDPR                   DWORD   4   Freq of PR0.        (TOTAL_PR)
 148      =1  //      FIRST_SAVEDPR+4                 DWORD   4   Freq of PR1.
 149      =1  //      .....
 150      =1  //
 151      =1  
 152      =1  
 153      =1  
 154      =1  //
 155      =1  // Offset of EEPROM
 156      =1  //
 157      =1  /*
 158      =1  #define VIDEOCONTRAST           0x18            // for NTSC.(PAL:0x20,SECAM:0x28)
 159      =1  #define VIDEOBRIGHTNESS         0x19
 160      =1  #define VIDEOSATURATION_U       0x1a
 161      =1  #define VIDEOSATURATION_V       0x1b
 162      =1  #define VIDEOHUE                        0x1c            // only for NTSC
 163      =1  #define VIDEOSHARPNESS          0x1d
 164      =1  */
 165      =1  #define CCCOLOR         0x52
 166      =1  #define VOLZOOM         0x53
 167      =1  
 168      =1  #define PANELINFO       0x61
 169      =1  
 170      =1  // PAL_TV
 171      =1  #define  PR_CUR                                 0x301   
 172      =1  #define  FIRST_SAVEDPR                  0x308   
 173      =1   #define TVFREQ_HIGH 0 
 174      =1   #define TVFREQ_LOW  1
 175      =1  #ifdef PAL_TV
           =1  #define TVFINETUNE  2
           =1                 // NOT Finetune: 0 , Range: -32 ~ +32
           =1  #define TVPRSYSTEM  3  
           =1                 // bit 7: Add:1 Ereased :0
           =1                 // 
           =1  #define TVCHNAME    4
           =1 
           =1  #define BYTEPERCHANNEL 9 
           =1 #endif
 185      =1  // NTSC_TV
 186      =1  #define  EEP_TVInputSel                 0x302
 187      =1  #define  CHN_CURAIR                             0x303   
 188      =1  #define  FIRSTSAVED_AIRCHN              0x308   
 189      =1  #define  CHN_CURCABLE                   0x403   
 190      =1  #define  FIRSTSAVED_CABLECHN    0x408   
 191      =1  #ifdef NTSC_TV
           =1  #define TVFINETUNE  0
           =1                 // NOT Finetune: 0 , Range: -32 ~ +32
           =1  #define TVPRSYSTEM  1  
           =1                 // bit 7: Add:1 Ereased :0
           =1                 // 
           =1  #define BYTEPERCHANNEL 2
           =1 #endif
 199      =1  
 200      =1  
 201      =1  
 202      =1  
 203      =1  WORD GetFWRevEE(void);
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 38  

 204      =1  void SaveFWRevEE(WORD);
 205      =1  
 206      =1  BYTE GetDebugLevelEE(void);
 207      =1  void SaveDebugLevelEE(BYTE);
 208      =1  
 209      =1  #ifdef WIDE_SCREEN
 210      =1  BYTE GetWideModeEE(void);
 211      =1  void SaveWideModeEE(BYTE dl);
 212      =1  #endif
 213      =1  
 214      =1  
 215      =1  //BYTE GetRange4CoarseEE(void);
 216      =1  //void SaveRange4CoarseEE(BYTE);
 217      =1  
 218      =1  BYTE GetPossibleAutoDetectStdEE(void);
 219      =1  void SetPossibleAutoDetectStdEE(void);
 220      =1  
 221      =1  //BYTE GetOSDXPositionEE(void);
 222      =1  //BYTE GetOSDYPositionEE(void);
 223      =1  BYTE GetClosedCaptionFlagEE(void);
 224      =1  
 225      =1  BYTE GetVideoDatafromEE(BYTE);
 226      =1  void SaveVideoDatatoEE(BYTE offset, BYTE ndata);
 227      =1  
 228      =1  //BYTE GetVideoBrightnessEE(void);
 229      =1  //BYTE GetVideoSaturationEE(BYTE);
 230      =1  //BYTE GetVideoHueEE(void);
 231      =1  //BYTE GetVideoSharpnessEE(void);
 232      =1  
 233      =1  //void SaveVideoContrastEE(BYTE ndata);
 234      =1  //void SaveVideoBrightnessEE(BYTE ndata);
 235      =1  //void SaveVideoSaturationEE(BYTE, BYTE ndata);
 236      =1  //void SaveVideoHueEE(BYTE ndata);
 237      =1  //void SaveVideoSharpnessEE(BYTE ndata);
 238      =1  
 239      =1  BYTE GetOSDPositionModeEE(void);
 240      =1  void SaveOSDPositionModeEE(BYTE ndata);
 241      =1  //void SaveOSDXPositionEE(BYTE);
 242      =1  //void SaveOSDYPositionEE(BYTE);
 243      =1  
 244      =1  void SaveClosedCaptionFlagEE(BYTE);
 245      =1  
 246      =1  BYTE GetBlockedTVEE(void);                      
 247      =1  void SaveBlockedTVEE(BYTE vi);          
 248      =1  BYTE GetBlockedTV_FLDSLEE( BYTE level ) ;
 249      =1  void SaveBlockedTV_FLDSLEE(BYTE level, BYTE vi) ;
 250      =1  
 251      =1  BYTE GetBlockedMovieEE(void);           
 252      =1  void SaveBlockedMovieEE(BYTE vi);       
 253      =1  #if 0
           =1 BYTE GetInputSelectionEE(void);
           =1 #endif
 256      =1  void SaveInputSelectionEE(BYTE val);
 257      =1  
 258      =1  //BYTE GetOSDDurationEE(void);
 259      =1  //void SaveOSDDurationEE(BYTE val);
 260      =1  
 261      =1  BYTE GetOSDLangEE(void);
 262      =1  void SaveOSDLangEE(BYTE val);
 263      =1  
 264      =1  //ljy100303...BYTE GetOSDZoomEE(void);
 265      =1  //ljy100303...void SaveOSDZoomEE(BYTE val);
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 39  

 266      =1  
 267      =1  BYTE GetAudioVolEE(void);
 268      =1  void SetAudioVolEE( BYTE vol );
 269      =1  BYTE GetPCAudioVolEE(void);
 270      =1  void SetPCAudioVolEE( BYTE vol );
 271      =1  #if 0
           =1 BYTE GetAudioBalanceEE(void);
           =1 void SetAudioBalanceEE( BYTE vol );
           =1 BYTE GetAudioBassEE(void);
           =1 void SetAudioBassEE( BYTE vol );
           =1 BYTE GetAudioTrebleEE(void);
           =1 void SetAudioTrebleEE( BYTE vol );
           =1 #endif
 279      =1  //BYTE GetAudioEffectEE(void);
 280      =1  //void SetAudioEffectEE( BYTE vol );
 281      =1  
 282      =1  void ClearBasicEE(void);
 283      =1  
 284      =1  BYTE ValidPassword(DATA_P BYTE *numstr, BYTE index);
 285      =1  BYTE SetNewPassword(DATA_P BYTE *numstr, BYTE index);
 286      =1  
 287      =1  //WORD GetPanelXRes(void);
 288      =1  //WORD GetPanelYRes(void);
 289      =1  BYTE GetPanelHsyncMinPulseWidth(void);
 290      =1  BYTE GetPanelVsyncMinPulseWidth(void);
 291      =1  WORD GetPanelHMinBackPorch(void);
 292      =1  BYTE GetPanelHsyncPolarity(void);
 293      =1  BYTE GetPanelVsyncPolarity(void);
 294      =1  WORD GetPanelDotClock(void);
 295      =1  WORD GetPanelMaxClock(void);
 296      =1  BYTE GetPanelPixsPerClock(void);
 297      =1  // Not used yet *************************  BYTE GetPanelDEonly(void);
 298      =1  
 299      =1  void AddTVChannelEE( BYTE tvtype, BYTE chn);
 300      =1  BYTE GetTVChannelEE( BYTE tvtype, BYTE inx);
 301      =1  void ResetTVChannelEE( BYTE tvtype );
 302      =1  BYTE GetTVChannelCntEE(BYTE tvtype);
 303      =1  BYTE GetTVChnIdxEE(BYTE tvtype);
 304      =1  BYTE GetCurTVChannelEE(BYTE tvtype);
 305      =1  void SetTVChnIdxEE(BYTE tvtype, BYTE newd);
 306      =1  void SetCurTVChannelEE(BYTE tvtype, BYTE newd);
 307      =1  BYTE InsertTVChannelEE(BYTE tvtype, BYTE newd);
 308      =1  BYTE RemoveTVChannelEE(BYTE tvtype, BYTE newd);
 309      =1  
 310      =1  void SetTVPrEE(void);
 311      =1  BYTE GetTVPrEE(void);
 312      =1  void SetTVFreqEE(BYTE, WORD);
 313      =1  WORD GetTVFreqEE(BYTE);
 314      =1  void SetFineTuneEE(BYTE, BYTE);
 315      =1  BYTE GetFineTuneEE(BYTE);
 316      =1  BYTE GetTVPrSystem(BYTE);
 317      =1  void SetTVPrSystem(BYTE, BYTE);
 318      =1  BYTE GetTVInputSelEE(void);
 319      =1  void SetTVInputSelEE(BYTE);
 320      =1  
 321      =1  #define GetVInputStdDetectModeEE()                              ReadEEP(EEP_AUTODETECTTYTE)
 322      =1  #define SaveVInputStdDetectModeEE(A)                    WriteEEP(EEP_AUTODETECTTYTE, A)
 323      =1  
 324      =1  #define GetAutoRecogntionEE()                                   ReadEEP(EEP_AUTORECOGNITION)
 325      =1  #define SaveAutoRecogntionEE(A)                                 WriteEEP(EEP_AUTORECOGNITION, A)
 326      =1  
 327      =1  #define SetVideoModeEE( ctid )                                  WriteEEP( EEP_VIDEOMODE, ctid )
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 40  

 328      =1  #define GetVideoModeEE()                                                ReadEEP( EEP_VIDEOMODE )
 329      =1  
 330      =1  #define GetPanelContrastEE()                                    ReadEEP(0x10)
 331      =1  
 332      =1  #if defined( SUPPORT_PC ) || defined( SUPPORT_DTV )
 333      =1  //#define GetPanelHueEE()                                                       ReadEEP(0x28)
 334      =1  //#define GetPanelSharpnessEE()                                 ReadEEP(0x29)
 335      =1  #define GetPanelBrightnessEE()                                  ReadEEP(0x11)
 336      =1  //#define GetPanelSaturationEE()                                        ReadEEP(0x2a)
 337      =1  
 338      =1  //#define SavePanelHueEE(A)                                             WriteEEP(0x28, A)
 339      =1  //#define SavePanelSharpnessEE(A)                                       WriteEEP(0x29, A)
 340      =1  #define SavePanelContrastEE(A)                                  WriteEEP(0x10, A)
 341      =1  #define SavePanelBrightnessEE(A)                                WriteEEP(0x11, A)
 342      =1  //#define SavePanelSaturationEE(A)                              WriteEEP(0x2a, A)
 343      =1  #endif
 344      =1  
 345      =1  /*
 346      =1  #define GetDigitalVideoContrastEE()                             ReadEEP(0x2b)
 347      =1  #define GetDigitalVideoBrightnessEE()                   ReadEEP(0x2c)
 348      =1  #define GetDigitalVideoHueEE()                                  ReadEEP(0x2d)
 349      =1  #define GetDigitalVideoSaturationEE(off)                ReadEEP(0x2e+off)
 350      =1  
 351      =1  #define SaveDigitalVideoContrastEE(A)                   WriteEEP(0x2b, A)
 352      =1  #define SaveDigitalVideoBrightnessEE(A)                 WriteEEP(0x2c, A)
 353      =1  #define SaveDigitalVideoHueEE(A)                                WriteEEP(0x2d, A)
 354      =1  #define SaveDigitalVideoSaturationEE(off,A)             WriteEEP(0x2e+off, A)
 355      =1  */
 356      =1  
 357      =1  #endif  // __ETC_EEP__
  35          #include "panel.h"
   1      =1  //PanelConfig
   2      =1  
   3      =1          #if   defined SXGA
           =1                                                 #define PHR_ 1280
           =1                                                 #define PVR_ 1024
           =1         #elif defined XGA       
           =1                                                 #define PHR_ 1024
           =1                                                 #define PVR_ 768
           =1         #elif defined SVGA
           =1                                                 #define PHR_ 800
           =1                                                 #define PVR_ 600
           =1         #elif defined VGA
           =1                                                 #define PHR_ 640
           =1                                                 #define PVR_ 480
           =1         #elif defined QVGA
           =1                                                 #define PHR_ 320
           =1                                                 #define PVR_ 240
           =1         #elif defined WXGA
           =1                                                 #define PHR_ 1280 //1366
           =1                                                 #define PVR_ 768
           =1         #elif defined WSVGA
           =1                                                 #define PHR_ 1024
           =1                                                 #define PVR_ 600
           =1         #elif defined WVGA
  25      =1                                                  #define PHR_ 800
  26      =1                                                  #define PVR_ 600
  27      =1          #elif defined WQVGA
           =1                                 //              #define PHR_ 960 //480
           =1                                 //              #define PVR_ 237
           =1                                                 #define PHR_ 480 //480
           =1                                                 #define PVR_ 240
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 41  

           =1         #endif
  33      =1  
  34      =1   
  35      =1  
  36      =1  /*
  37      =1  #define ACTIVE_LOW                      0
  38      =1  #define ACTIVE_HIGH                     1
  39      =1  
  40      =1  CODE struct PanelConfig {
  41      =1          unsigned                x_res,                                  y_res;
  42      =1          unsigned char   h_sync_min_pulse_width, v_sync_min_pulse_width;
  43      =1          unsigned                h_min_back_porch;
  44      =1          unsigned char   h_sync_polarity,                v_sync_polarity;
  45      =1          unsigned                dot_clock,                              max_clock;                      // in unit Mhz*10
  46      =1          unsigned char   pixs_per_clock;
  47      =1          unsigned char   DE_only;
  48      =1  } PanelConfig=
  49      =1          {
  50      =1          //----------------------------------------------------
  51      =1          #ifdef WXGA
  52      =1          //LG  LM171W01 WXGA
  53      =1          1280,                   768,
  54      =1          8,                              1,
  55      =1          8,
  56      =1          ACTIVE_LOW,             ACTIVE_LOW,
  57      =1          #ifdef DOUBLE_PIXEL
  58      =1          320,                    470,
  59      =1          2,
  60      =1          #else
  61      =1          650,                    950,                                    //65Mhz
  62      =1          1,
  63      =1          #endif
  64      =1          0
  65      =1          //----------------------------------------------------
  66      =1          #elif defined XGA
  67      =1          //Samsung  LT150x1-151 XGA
  68      =1          1024,                   768,
  69      =1          68,                             1,
  70      =1          80,
  71      =1          ACTIVE_LOW,             ACTIVE_LOW,
  72      =1          #ifdef DOUBLE_PIXEL
  73      =1          325,                    400,                                    //32.5Mhz
  74      =1          2,
  75      =1          #else
  76      =1          650,                    800,
  77      =1          1,
  78      =1          #endif
  79      =1          0
  80      =1          //----------------------------------------------------
  81      =1          #elif defined SXGA
  82      =1          //Samsung  LT170E2-131  SXGA
  83      =1          1280,                   1024,
  84      =1          1,                              1,
  85      =1          1,
  86      =1          ACTIVE_LOW,             ACTIVE_LOW,
  87      =1          #ifdef DOUBLE_PIXEL
  88      =1          540,                    540,                                    //54.5Mhz
  89      =1          2,
  90      =1          #else
  91      =1          1080,                   1080,
  92      =1          1,
  93      =1          #endif
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 42  

  94      =1          0
  95      =1          //----------------------------------------------------
  96      =1          #elif defined WSVGA                                             // Thosiba
  97      =1          1024,                   600,
  98      =1          8,                              3,
  99      =1          1,//80,                         
 100      =1          ACTIVE_LOW,             ACTIVE_LOW,
 101      =1          #ifdef DOUBLE_PIXEL
 102      =1          325,                    450,
 103      =1          2,
 104      =1          #else
 105      =1          500,                    550,                                    //50Mhz
 106      =1          1,
 107      =1          #endif
 108      =1          0
 109      =1          //----------------------------------------------------
 110      =1  
 111      =1          #elif defined SVGA
 112      =1          //NEC NL8060AC26-11 SVGA
 113      =1          800,                    600,
 114      =1          2,                              1,
 115      =1          13,
 116      =1          ACTIVE_LOW,             ACTIVE_LOW,
 117      =1          #ifdef DOUBLE_PIXEL
 118      =1          384,                    500,                                    //38.4MHz
 119      =1          2,
 120      =1          #else
 121      =1          670,                    1000,
 122      =1          1,
 123      =1          #endif
 124      =1          0
 125      =1          //----------------------------------------------------
 126      =1          #elif defined VGA
 127      =1          //NEC NL6448AC33        VGA                                     // OK with SetPanelRegisters
 128      =1          640,                    480,
 129      =1          10,                             1,
 130      =1          4,
 131      =1          ACTIVE_LOW,             ACTIVE_LOW,
 132      =1          #ifdef DOUBLE_PIXEL
 133      =1          130,                    150,                                    //25.2MHz
 134      =1          2,
 135      =1          #else
 136      =1          250,                    300,
 137      =1          1,
 138      =1          #endif
 139      =1          0
 140      =1          //----------------------------------------------------
 141      =1  
 142      =1          #elif defined WVGA
 143      =1          // Panasonic  EDTCB27QBF WVGA
 144      =1          800,                    480,
 145      =1          4,                              1,
 146      =1          7,
 147      =1          ACTIVE_LOW,             ACTIVE_LOW,
 148      =1          #ifdef DOUBLE_PIXEL
 149      =1          166,                    200,                                    //33.2MHz
 150      =1          2,
 151      =1          #else
 152      =1          332,                    360,                                    //33.2MHz
 153      =1          1,
 154      =1          #endif
 155      =1          0
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 43  

 156      =1  
 157      =1          //----------------------------------------------------
 158      =1          #else
 159      =1          // Default : XGA panel
 160      =1          // Samsung  LT150x1-151 XGA
 161      =1          1024,                   768,
 162      =1          68,                             1,
 163      =1          80,
 164      =1          ACTIVE_LOW,             ACTIVE_LOW,
 165      =1          #ifdef DOUBLE_PIXEL
 166      =1          325,                    400,                                    //32.5Mhz
 167      =1          2,
 168      =1          #else
 169      =1          650,                    800,                                    //32.5Mhz
 170      =1          1,
 171      =1          #endif
 172      =1          0
 173      =1          #endif
 174      =1          };
 175      =1  
 176      =1  */
  36          
  37          extern  CODE struct _PCMDATA  PCMDATA[];
  38          
  39          extern  BYTE  PcMode, PcModeLast;
  40          extern  IDATA WORD  IVF;
  41          extern  IDATA DWORD     IHF;
  42          
  43          ///extern       IDATA BYTE      CurrentADC;
  44          
  45          WORD GetVactiveStartEE(BYTE mode)
  46          {
  47   1              WORD index;
  48   1              WORD start;
  49   1      
  50   1              index = EE_PCDATA + mode*LEN_PCDATA + 2;
  51   1              start = PCMDATA[mode].Vstart + (char)ReadEEP(index);
  52   1      
  53   1              return start;
  54   1      }
  55          
  56          WORD GetHactiveStartEE(BYTE mode)
  57          {
  58   1              WORD index;
  59   1              WORD start;
  60   1      
  61   1              index = EE_PCDATA + mode*LEN_PCDATA + 4;
  62   1              start = PCMDATA[mode].Hstart + (char)ReadEEP(index);
  63   1      
  64   1              return start;
  65   1      }
  66          
  67          //-----------------------------------------------------------------------------
  68          //                      Get PC Function Data from EEPROM
  69          //-----------------------------------------------------------------------------
  70          void GetPCDataEE(BYTE mode)
  71          {
  72   1              char dat=0;                     // must be signed char
  73   1              WORD index, temp;
  74   1              DWORD scale, pres;
  75   1              extern bit Flag4Bypass;
  76   1              WORD hstart, vstart;
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 44  

  77   1      
  78   1              #ifdef DEBUG_EEP
                      dPrintf("\r\nGetPCDataEE(%d)", (WORD)mode);
                      #endif
  81   1      
  82   1              GetADCGainOffsetEE();           // restore from
  83   1      
  84   1              vstart = PCMDATA[mode].Vstart;
  85   1              hstart = PCMDATA[mode].Hstart;
  86   1      
  87   1              index = EE_PCDATA + mode*LEN_PCDATA;
  88   1      
  89   1              //--------------------------------------------
  90   1      
  91   1              // PPF
  92   1              ChangeInternPLL(PCMDATA[mode].PPF * 100000L);
  93   1              delay(5);
  94   1      
  95   1              GetHpnVpn(1);   // For correcting sync polarity
  96   1      
  97   1              // ADC VCO
  98   1              SetVCORange( PCMDATA[mode].IPF * 100000L );
  99   1      
 100   1              // ADC PLL-----(0)
 101   1      
 102   1              if( !IsDTVInput() ) dat = ReadEEP(index++);
 103   1      
 104   1      //      if(GetInputSelection()==PC) WriteADC(0xc1, 0x30);
 105   1      
 106   1              SetCoarse( dat + PCMDATA[mode].CLOCK );
 107   1              Printf("\r\n CLOCK divider adjustment value: %d", (int) dat );
 108   1      
 109   1              if(GetInputSelection()==PC) WriteADC(0xc1, 0x20);
 110   1      
 111   1              // ADC Phase---(1)
 112   1              dat = ReadEEP(index++);
 113   1              if( !IsDTVInput() ) 
 114   1              SetPhase( dat );
 115   1      
 116   1              // Vertical----(2)
 117   1              #ifdef DEBUG_PC
                      dPrintf("\r\n  vstart(before add ReadEEP): %d", (WORD)vstart);
                      #endif
 120   1              if( !IsDTVInput() ) 
 121   1              vstart += (char)ReadEEP(index++);
 122   1              #ifdef DEBUG_PC
                      dPrintf("\r\n  vstart(after add ReadEEP): %d", (WORD)vstart);
                      #endif
 125   1              
 126   1              SetVactiveStart( vstart );
 127   1              if( IsDTVInput() ) {
 128   2                      SetVactiveLen( PCMDATA[mode].VAN+20 );
 129   2              }
 130   1              else
 131   1              {
 132   2                      //SetVactiveLen( PCMDATA[mode].VAN + 6 );
 133   2                      #ifdef XGA
                              if (mode == EE_VGA_72)
                                      SetVactiveLen(PCMDATA[mode].VAN + 1);
                              else
                                      SetVactiveLen(PCMDATA[mode].VAN);       
                              #else
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 45  

 139   2                      SetVactiveLen(PCMDATA[mode].VAN);
 140   2                      #endif
 141   2              }
 142   1              pres=(DWORD)PVR_;
 143   1              #ifdef XGA
                      if (PCMDATA[mode].VAN == PVR_)
                              scale = (PCMDATA[mode].VAN * 0x10000L) / pres + 0x64;
                      else
                              scale = (PCMDATA[mode].VAN * 0x10000L) / pres;
                      #else
 149   1              scale = (PCMDATA[mode].VAN * 0x10000L) / pres;
 150   1              #endif 
 151   1              
 152   1              if( scale==0x10000 && Flag4Bypass )             // Bypass
 153   1                      BypassZoom();
 154   1              else {
 155   2                      Clear_bypass();
 156   2                      YScale2(scale);                                         // save V Scale Up Factor
 157   2              }
 158   1      
 159   1              SetVValueForPanel(vstart);                      // Vstart
 160   1      
 161   1              dat=0;
 162   1              // VBackPorch--(3)
 163   1              if( !IsDTVInput() ) 
 164   1              dat = (char)ReadEEP(index++);
 165   1              dat += PCMDATA[mode].VBack;
 166   1              dat -= ReadTW88(0xb8);                          // VOsync value compensation
 167   1              #ifdef DEBUG_PC
                      dPrintf("\r\nSetVBackPorch( %d )", (WORD)dat);
                      #endif
 170   1              #ifdef XGA
                      if (mode ==  EE_SVGA_56)
                              dat += 2;
                      else if (mode ==  EE_VGA_72)
                              dat --;
                      #endif
 176   1              SetVBackPorch( dat );
 177   1      
 178   1              // Horizontal--(4)
 179   1              if( !IsDTVInput() ) 
 180   1                      hstart += (char)ReadEEP(index++);
 181   1      //      temp = hstart + PCMDATA[mode].HAN + 2;
 182   1              temp = hstart + PCMDATA[mode].HAN + 20;
 183   1              #ifdef XGA
                      if (mode >= EE_SVGA_56 && mode <= EE_SVGA_85)
                              hstart += 1;
                      SetHactiveStart( hstart );
                      #else
 188   1              SetHactiveStart( hstart );
 189   1              #endif 
 190   1      
 191   1              //#ifdef SXGA
 192   1              //if( mode>=EE_XGA_60 && mode <=EE_XGA_85 ) temp--;
 193   1              //#endif
 194   1      
 195   1              if( IsDTVInput() ) temp += 3;
 196   1      
 197   1              SetHactiveEnd( temp );
 198   1              SetHValueForPanel();
 199   1      
 200   1              if( (PCMDATA[mode].VAN != GetPVR()) || !Flag4Bypass) {
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 46  

 201   2                      pres = GetPHR();
 202   2                      scale = (PCMDATA[mode].HAN * 0x10000L + pres/2) / pres; // 256*han/phr
 203   2      
 204   2                      #ifdef DEBUG_EEP
                              dPrintf("\r\nXscaleFactor:%04x(%d)", scale, scale);
                              #endif
 207   2                      #ifdef XGA
                              if( PCMDATA[mode].HAN == 1024 ) {//1100
                                      scale = (PCMDATA[mode].HAN * 0x80L ) / 1024 + 1;                // (HAN/1024)*256
                                      XscaleD(scale);
                                      scale = ((PCMDATA[mode].HAN -4) * 0x10000L ) / 1024;                                            // (1024/PHR)*256
                                      XscaleU(scale);
                              }
                              else if( PCMDATA[mode].HAN > 1024 )
                              {
                                      scale = (PCMDATA[mode].HAN * 0x80L ) / 1024 + 1;                // (HAN/1024)*256
                                      XscaleD(scale);
                                      scale = (1024 * 0x10000L ) / 1024;                                              // (1024/PHR)*256
                                      XscaleU(scale);
                              }
                              #else
 222   2                      //#if (defined SXGA) || (defined WXGA)
 223   2                      if( PCMDATA[mode].HAN > 1024 ) {
 224   3                              scale = (PCMDATA[mode].HAN * 0x80L ) / 1024 + 1;                // (HAN/1024)*256
 225   3                              XscaleD(scale);
 226   3              
 227   3                              #ifdef DEBUG_EEP
                                      dPrintf("\r\nXscaleFactorD:%04x(%d)", scale, scale);
                                      #endif
 230   3      
 231   3                              scale = (1024 * 0x10000L ) / 1280;                                              // (1024/PHR)*256
 232   3                              XscaleU(scale);
 233   3      
 234   3                              #ifdef DEBUG_EEP
                                      dPrintf("\r\nXscaleFactorU:%04x(%d)", scale, scale);
                                      #endif
 237   3                      }
 238   2                      #endif
 239   2                      else
 240   2                      //#endif
 241   2      
 242   2                      XScale2(scale);
 243   2      
 244   2              }
 245   1      
 246   1              dPuts("\r\n +++++++++++++++++=>Auto PHP Enable");
 247   1                      WriteTW88( 0xb6, (ReadTW88(0xb6) & 0x7f) );     // Auto PHP Enable
 248   1                      WriteTW88( 0xb2, ReadTW88(0xb2) );
 249   1      
 250   1              DisplayResultAndSetActiveRange();
 251   1      
 252   1              //-------- Clear changed status -------------
 253   1              MeasureAndWait(3);
 254   1      
 255   1              #ifdef WIDE_SCREEN
 256   1              Set4WideScreen(GetWideModeEE());
 257   1              #endif
 258   1      
 259   1              WriteTW88( 0x06, 0x80 ); // Software Reset
 260   1      
 261   1      }
 262          //=============================================================================
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 47  

 263          //                      Save PC Function Data to EEPROM
 264          //=============================================================================
 265          
 266          void SavePCDataEE(BYTE mode)
 267          {
 268   1              WORD index;
 269   1              int clockDiff;
 270   1      
 271   1              index = EE_PCDATA + mode*LEN_PCDATA ;
 272   1      
 273   1              clockDiff = GetCoarse() - PCMDATA[mode].CLOCK;
 274   1              #ifdef DEBUG_EEP
                      dPrintf("\r\nSave PC DATA mode(%d) index(%04x) IHF(%ld)", (WORD)mode, (WORD)index, IHF );
                      dPrintf(" IVF(%d) PPF(%dM)", IVF, (WORD)(GetPPF()/1000000) ); 
                      dPrintf("\r\nGestCoarse(): %d, PCMDATA[mode].CLOCK: %d, difference: %d", GetCoarse(), PCMDATA[mode].CLOCK
             -, clockDiff );
                      #endif
 279   1      
 280   1              WriteEEP( index++, (char) clockDiff );
 281   1              WriteEEP( index++,         GetPhaseCurrent() );
 282   1              WriteEEP( index++, (char)( GetVactiveStart() - PCMDATA[mode].Vstart) );
 283   1              WriteEEP( index++, (char)( ReadTW88(0xb8) + GetVBackPorch()  - PCMDATA[mode].VBack) );  //VOsync compensat
             -ion
 284   1              WriteEEP( index++, (char)( GetHactiveStart() - PCMDATA[mode].Hstart) );
 285   1      }
 286          
 287          //=============================================================================
 288          void SaveDefaultPCDataEE(void)
 289          {
 290   1              WORD    index, i;
 291   1      
 292   1              index = EE_PCDATA + PcMode*LEN_PCDATA;
 293   1      
 294   1              for(i=0; i<LEN_PCDATA; i++) {
 295   2                      WriteEEP( index++, 0 );
 296   2                      delay(1);
 297   2              }
 298   1      }
 299          
 300          void SaveDefaultPCDataAllEE(void)
 301          {
 302   1              for(PcMode=0; PcMode<EE_PC_MAX; PcMode++)
 303   1                      SaveDefaultPCDataEE();
 304   1      }
 305          
 306          void SaveCoarseEE(BYTE mode)
 307          {
 308   1              WORD    index;
 309   1      
 310   1              index = EE_PCDATA + mode*LEN_PCDATA + 0;
 311   1              WriteEEP( index, (char)(GetCoarse() - PCMDATA[mode].CLOCK) );
 312   1      }
 313          
 314          void SavePhaseEE(BYTE mode)
 315          {
 316   1              WORD    index;
 317   1      
 318   1              index = EE_PCDATA + mode*LEN_PCDATA + 1;
 319   1              WriteEEP( index,        GetPhaseCurrent() );
 320   1      }
 321          
 322          //=============================================================================
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 48  

 323          
 324          void SaveVactiveEE(BYTE mode)
 325          {
 326   1              WORD    index;
 327   1      
 328   1              index = EE_PCDATA + mode*LEN_PCDATA + 2;
 329   1              WriteEEP( index, (char)(GetVactiveStart() - PCMDATA[mode].Vstart) );
 330   1      }
 331          
 332          void SaveVBackPorchEE(BYTE mode)
 333          {
 334   1              WORD    index;
 335   1      
 336   1              index = EE_PCDATA + mode*LEN_PCDATA + 3;
 337   1              WriteEEP( index, (char)(GetVBackPorch() - PCMDATA[mode].VBack) );
 338   1      
 339   1      }
 340          
 341          void SaveHactiveEE(BYTE mode)
 342          {
 343   1              WORD    index;
 344   1      
 345   1              index = EE_PCDATA + mode*LEN_PCDATA + 4;
 346   1              WriteEEP( index, (char)(GetHactiveStart() - PCMDATA[mode].Hstart) );
 347   1      }
 348          
 349          //-----------------------------------------------------------------------------
 350          //              Save ADC Gain & Offset  mod=0 default value, mod=1 current value
 351          //-----------------------------------------------------------------------------
 352          void SaveADCGainOffsetEE(BYTE mod)
 353          {
 354   1              BYTE i, dat;
 355   1              WORD index;
 356   1      
 357   1              index = EE_ADC_GO;
 358   1      
 359   1              for(i=0; i<4; i++) {
 360   2                      if( mod==0 ) dat = 0x80;
 361   2                      else             dat = ReadADC(i+0xd0);         // 0x1d0, 0x1d1, 0x1d2, 0x1d3
 362   2                      WriteEEP(index+i, dat);
 363   2              }
 364   1      }
 365          
 366          void GetADCGainOffsetEE(void)
 367          {
 368   1              BYTE i, dat;
 369   1              WORD index;
 370   1      
 371   1              index = EE_ADC_GO;
 372   1      
 373   1              for(i=0; i<4; i++) {
 374   2                      dat = ReadEEP(index+i);
 375   2                      WriteADC(i+0xd0, dat);
 376   2              }
 377   1      }
 378          
 379          #endif // SUPPORT_PC
 380          
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 49  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com002D (BEGIN)
0000         L?0046:
0000 7800        R     MOV     R0,#LOW mode
0002 E2                MOVX    A,@R0
0003 75F016            MOV     B,#016H
0006 120000      E     LCALL   ?C?OFFXADD
0009 7401              MOV     A,#01H
000B         L?0047:
000B 93                MOVC    A,@A+DPTR
000C FE                MOV     R6,A
000D C3                CLR     C
000E EF                MOV     A,R7
000F 9E                SUBB    A,R6
0010 FD                MOV     R5,A
0011         L?0048:
0011 08                INC     R0
0012         L?0049:
0012 08                INC     R0
0013 E2                MOVX    A,@R0
0014 FF                MOV     R7,A
0015 2401              ADD     A,#01H
0017 F2                MOVX    @R0,A
0018 18                DEC     R0
0019 E2                MOVX    A,@R0
001A FE                MOV     R6,A
001B 3400              ADDC    A,#00H
001D F2                MOVX    @R0,A
001E 22                RET     
001F         L?0050:
001F 7800        R     MOV     R0,#LOW mode
0021         L?0051:
0021 900000      E     MOV     DPTR,#PCMDATA+03H
0024         L?0052:
0024 E2                MOVX    A,@R0
0025 75F016            MOV     B,#016H
0028 020000      E     LJMP    ?C?OFFXADD
002B         L?0053:
002B 120000      E     LCALL   ?C?LSTPDATA
002E         L?0054:
002E 900000      E     MOV     DPTR,#PCMDATA+01H
0031         L?0055:
0031 7800        R     MOV     R0,#LOW mode
0033 E2                MOVX    A,@R0
0034 75F016            MOV     B,#016H
0037 020000      E     LJMP    ?C?OFFXADD
003A         L?0056:
003A E2                MOVX    A,@R0
003B 75F016            MOV     B,#016H
003E         L?0057:
003E 120000      E     LCALL   ?C?OFFXADD
0041 7401              MOV     A,#01H
0043         L?0058:
0043 93                MOVC    A,@A+DPTR
0044 FE                MOV     R6,A
0045 C3                CLR     C
0046 EF                MOV     A,R7
0047 9E                SUBB    A,R6
0048 08                INC     R0
0049         L?0059:
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 50  

0049 FD                MOV     R5,A
004A E2                MOVX    A,@R0
004B FE                MOV     R6,A
004C 08                INC     R0
004D E2                MOVX    A,@R0
004E FF                MOV     R7,A
004F 22                RET     
0050         L?0060:
0050 75F005            MOV     B,#05H
0053 A4                MUL     AB
0054 AEF0              MOV     R6,B
0056 24C0              ADD     A,#0C0H
0058 F2                MOVX    @R0,A
0059 E4                CLR     A
005A 3E                ADDC    A,R6
005B 18                DEC     R0
005C F2                MOVX    @R0,A
005D 22                RET     
005E         L?0061:
005E         L?0062:
005E 900000      E     MOV     DPTR,#PCMDATA+015H
0061         L?0063:
0061 E2                MOVX    A,@R0
0062 75F016            MOV     B,#016H
0065 020000      E     LJMP    ?C?OFFXADD
0068         L?0064:
0068 75F005            MOV     B,#05H
006B A4                MUL     AB
006C AEF0              MOV     R6,B
006E 24C0              ADD     A,#0C0H
0070 F2                MOVX    @R0,A
0071 E4                CLR     A
0072 3E                ADDC    A,R6
0073 18                DEC     R0
0074 F2                MOVX    @R0,A
0075 22                RET     
0076         L?0065:
0076 E4                CLR     A
0077 93                MOVC    A,@A+DPTR
0078 FE                MOV     R6,A
0079 7401              MOV     A,#01H
007B 93                MOVC    A,@A+DPTR
007C FF                MOV     R7,A
007D E4                CLR     A
007E FC                MOV     R4,A
007F FD                MOV     R5,A
0080 7BA0              MOV     R3,#0A0H
0082 7A86              MOV     R2,#086H
0084         L?0066:
0084 7901              MOV     R1,#01H
0086 F8                MOV     R0,A
0087 020000      E     LJMP    ?C?LMUL
008A         L?0067:
008A         L?0068:
008A EF                MOV     A,R7
008B F2                MOVX    @R0,A
008C E2                MOVX    A,@R0
008D 75F005            MOV     B,#05H
0090 A4                MUL     AB
0091 22                RET     
0092         L?0069:
0092         L?0070:
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 51  

0092 7401              MOV     A,#01H
0094 93                MOVC    A,@A+DPTR
0095 2F                ADD     A,R7
0096 FF                MOV     R7,A
0097 E4                CLR     A
0098 93                MOVC    A,@A+DPTR
0099 3E                ADDC    A,R6
009A FE                MOV     R6,A
009B 22                RET     
009C         L?0071:
009C         L?0072:
009C E4                CLR     A
009D 93                MOVC    A,@A+DPTR
009E FE                MOV     R6,A
009F 7401              MOV     A,#01H
00A1 93                MOVC    A,@A+DPTR
00A2 FF                MOV     R7,A
00A3 22                RET     
00A4         L?0073:
00A4 AEF0              MOV     R6,B
00A6 F2                MOVX    @R0,A
00A7 E4                CLR     A
00A8 3E                ADDC    A,R6
00A9 18                DEC     R0
00AA F2                MOVX    @R0,A
00AB 22                RET     
00AC         L?0074:
00AC E2                MOVX    A,@R0
00AD 900000      E     MOV     DPTR,#PCMDATA+07H
00B0         L?0075:
00B0 75F016            MOV     B,#016H
00B3 020000      E     LJMP    ?C?OFFXADD
00B6         L?0076:
00B6 EF                MOV     A,R7
00B7 33                RLC     A
00B8 95E0              SUBB    A,ACC
00BA FE                MOV     R6,A
00BB E2                MOVX    A,@R0
00BC 2F                ADD     A,R7
00BD F2                MOVX    @R0,A
00BE 18                DEC     R0
00BF E2                MOVX    A,@R0
00C0 3E                ADDC    A,R6
00C1 F2                MOVX    @R0,A
00C2 22                RET     
00C3         L?0078:
00C3 7800        R     MOV     R0,#LOW pres
00C5 120000      E     LCALL   ?C?LLDPDATA0
00C8 120000      E     LCALL   ?C?ULDIV
00CB 7800        R     MOV     R0,#LOW scale
00CD 22                RET     
             ; FUNCTION Com002D (END)

             ; FUNCTION _GetVactiveStartEE (BEGIN)
                                           ; SOURCE LINE # 45
0000 7800        R     MOV     R0,#LOW mode
                                           ; SOURCE LINE # 46
                                           ; SOURCE LINE # 50
0002 120000      R     LCALL   L?0067
0005 24C2              ADD     A,#0C2H
0007 FF                MOV     R7,A
0008 E4                CLR     A
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 52  

0009 35F0              ADDC    A,B
000B FE                MOV     R6,A
;---- Variable 'index' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 51
000C 120000      E     LCALL   _ReadEEP
000F EF                MOV     A,R7
0010 33                RLC     A
0011 95E0              SUBB    A,ACC
0013 FE                MOV     R6,A
0014 7800        R     MOV     R0,#LOW mode
0016 900000      E     MOV     DPTR,#PCMDATA+0FH
0019 120000      R     LCALL   L?0052
001C 120000      R     LCALL   L?0069
;---- Variable 'start' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 53
                                           ; SOURCE LINE # 54
001F         ?C0001:
001F 22                RET     
             ; FUNCTION _GetVactiveStartEE (END)

             ; FUNCTION _GetHactiveStartEE (BEGIN)
                                           ; SOURCE LINE # 56
0000 7800        R     MOV     R0,#LOW mode
                                           ; SOURCE LINE # 57
                                           ; SOURCE LINE # 61
0002 120000      R     LCALL   L?0067
0005 24C4              ADD     A,#0C4H
0007 FF                MOV     R7,A
0008 E4                CLR     A
0009 35F0              ADDC    A,B
000B FE                MOV     R6,A
;---- Variable 'index' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 62
000C 120000      E     LCALL   _ReadEEP
000F EF                MOV     A,R7
0010 33                RLC     A
0011 95E0              SUBB    A,ACC
0013 FE                MOV     R6,A
0014 7800        R     MOV     R0,#LOW mode
0016 900000      E     MOV     DPTR,#PCMDATA+0DH
0019 120000      R     LCALL   L?0063
001C 120000      R     LCALL   L?0069
;---- Variable 'start' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 64
                                           ; SOURCE LINE # 65
001F         ?C0002:
001F 22                RET     
             ; FUNCTION _GetHactiveStartEE (END)

             ; FUNCTION _GetPCDataEE (BEGIN)
                                           ; SOURCE LINE # 70
0000 7800        R     MOV     R0,#LOW mode
0002 EF                MOV     A,R7
0003 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 71
                                           ; SOURCE LINE # 72
0004 E4                CLR     A
0005 08                INC     R0
0006 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 82
0007 120000      R     LCALL   GetADCGainOffsetEE
                                           ; SOURCE LINE # 84
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 53  

000A 7800        R     MOV     R0,#LOW mode
000C E2                MOVX    A,@R0
000D FF                MOV     R7,A
000E 900000      E     MOV     DPTR,#PCMDATA+0FH
0011 120000      R     LCALL   L?0075
0014 E4                CLR     A
0015 93                MOVC    A,@A+DPTR
0016 FD                MOV     R5,A
0017 7401              MOV     A,#01H
0019 93                MOVC    A,@A+DPTR
001A 7800        R     MOV     R0,#LOW vstart
001C CD                XCH     A,R5
001D F2                MOVX    @R0,A
001E 08                INC     R0
001F ED                MOV     A,R5
0020 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 85
0021 75F016            MOV     B,#016H
0024 EF                MOV     A,R7
0025 900000      E     MOV     DPTR,#PCMDATA+0DH
0028 120000      E     LCALL   ?C?OFFXADD
002B E4                CLR     A
002C 93                MOVC    A,@A+DPTR
002D FF                MOV     R7,A
002E 7401              MOV     A,#01H
0030 93                MOVC    A,@A+DPTR
0031 7800        R     MOV     R0,#LOW hstart
0033 CF                XCH     A,R7
0034 F2                MOVX    @R0,A
0035 08                INC     R0
0036 EF                MOV     A,R7
0037 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 87
0038 7800        R     MOV     R0,#LOW mode
003A E2                MOVX    A,@R0
003B FD                MOV     R5,A
003C 7800        R     MOV     R0,#LOW index+01H
003E 120000      R     LCALL   L?0060
                                           ; SOURCE LINE # 92
0041 75F016            MOV     B,#016H
0044 ED                MOV     A,R5
0045 900000      E     MOV     DPTR,#PCMDATA+013H
0048 120000      E     LCALL   ?C?OFFXADD
004B 120000      R     LCALL   L?0065
004E 120000      E     LCALL   _ChangeInternPLL
                                           ; SOURCE LINE # 93
0051 7F05              MOV     R7,#05H
0053 120000      E     LCALL   _delay
                                           ; SOURCE LINE # 95
0056 7F01              MOV     R7,#01H
0058 120000      E     LCALL   _GetHpnVpn
                                           ; SOURCE LINE # 98
005B 900000      E     MOV     DPTR,#PCMDATA+011H
005E 120000      R     LCALL   L?0055
0061 120000      R     LCALL   L?0065
0064 120000      E     LCALL   _SetVCORange
                                           ; SOURCE LINE # 102
0067 120000      E     LCALL   IsDTVInput
006A EF                MOV     A,R7
006B 7008              JNZ     ?C0003
006D 7800        R     MOV     R0,#LOW index
006F 120000      R     LCALL   L?0049
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 54  

0072 120000      R     LCALL   L?0077
0075         ?C0003:
                                           ; SOURCE LINE # 106
0075 7800        R     MOV     R0,#LOW mode
0077 120000      R     LCALL   L?0074
007A 08                INC     R0
007B E2                MOVX    A,@R0
007C FF                MOV     R7,A
007D 33                RLC     A
007E 95E0              SUBB    A,ACC
0080 FE                MOV     R6,A
0081 120000      R     LCALL   L?0070
0084 120000      E     LCALL   _SetCoarse
                                           ; SOURCE LINE # 107
0087 7BFF              MOV     R3,#0FFH
0089 7A00        R     MOV     R2,#HIGH ?SC_0
008B 7900        R     MOV     R1,#LOW ?SC_0
008D 7800        R     MOV     R0,#LOW dat
008F E2                MOVX    A,@R0
0090 FE                MOV     R6,A
0091 33                RLC     A
0092 95E0              SUBB    A,ACC
0094 7800        E     MOV     R0,#LOW ?_Printf?BYTE+03H
0096 F2                MOVX    @R0,A
0097 08                INC     R0
0098 CE                XCH     A,R6
0099 F2                MOVX    @R0,A
009A 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 109
009D 120000      E     LCALL   GetInputSelection
00A0 BF0707            CJNE    R7,#07H,?C0004
00A3 7D20              MOV     R5,#020H
00A5 7FC1              MOV     R7,#0C1H
00A7 120000      E     LCALL   _WriteADC_TW88
00AA         ?C0004:
                                           ; SOURCE LINE # 112
00AA 7800        R     MOV     R0,#LOW index
00AC 120000      R     LCALL   L?0049
00AF 120000      R     LCALL   L?0077
                                           ; SOURCE LINE # 113
00B2 120000      E     LCALL   IsDTVInput
00B5 EF                MOV     A,R7
00B6 7007              JNZ     ?C0005
                                           ; SOURCE LINE # 114
00B8 7800        R     MOV     R0,#LOW dat
00BA E2                MOVX    A,@R0
00BB FF                MOV     R7,A
00BC 120000      E     LCALL   _SetPhase
00BF         ?C0005:
                                           ; SOURCE LINE # 120
00BF 120000      E     LCALL   IsDTVInput
00C2 EF                MOV     A,R7
00C3 700D              JNZ     ?C0006
                                           ; SOURCE LINE # 121
00C5 7800        R     MOV     R0,#LOW index
00C7 120000      R     LCALL   L?0049
00CA 120000      E     LCALL   _ReadEEP
00CD 7800        R     MOV     R0,#LOW vstart+01H
00CF 120000      R     LCALL   L?0076
00D2         ?C0006:
                                           ; SOURCE LINE # 126
00D2 7800        R     MOV     R0,#LOW vstart
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 55  

00D4 E2                MOVX    A,@R0
00D5 FE                MOV     R6,A
00D6 08                INC     R0
00D7 E2                MOVX    A,@R0
00D8 FF                MOV     R7,A
00D9 120000      E     LCALL   _SetVactiveStart
                                           ; SOURCE LINE # 127
00DC 120000      E     LCALL   IsDTVInput
00DF EF                MOV     A,R7
00E0 7800        R     MOV     R0,#LOW mode
00E2 6010              JZ      ?C0007
                                           ; SOURCE LINE # 128
00E4 120000      R     LCALL   L?0051
00E7 7401              MOV     A,#01H
00E9 93                MOVC    A,@A+DPTR
00EA 2414              ADD     A,#014H
00EC FF                MOV     R7,A
00ED E4                CLR     A
00EE 93                MOVC    A,@A+DPTR
00EF 3400              ADDC    A,#00H
00F1 FE                MOV     R6,A
                                           ; SOURCE LINE # 129
00F2 8006              SJMP    ?C0044
00F4         ?C0007:
                                           ; SOURCE LINE # 131
                                           ; SOURCE LINE # 139
00F4 120000      R     LCALL   L?0051
00F7 120000      R     LCALL   L?0071
00FA         ?C0044:
00FA 120000      E     LCALL   _SetVactiveLen
                                           ; SOURCE LINE # 141
00FD         ?C0008:
                                           ; SOURCE LINE # 142
00FD 7800        R     MOV     R0,#LOW pres
00FF 120000      E     LCALL   ?C?LSTKPDATA
0102 00                DB      00H
0103 00                DB      00H
0104 02                DB      02H
0105 58                DB      058H
                                           ; SOURCE LINE # 149
0106 120000      R     LCALL   L?0050
0109 120000      R     LCALL   L?0071
010C E4                CLR     A
010D FC                MOV     R4,A
010E FD                MOV     R5,A
010F FB                MOV     R3,A
0110 FA                MOV     R2,A
0111 120000      R     LCALL   L?0066
0114 120000      R     LCALL   L?0078
0117 120000      E     LCALL   ?C?LSTPDATA
                                           ; SOURCE LINE # 152
011A E4                CLR     A
011B FF                MOV     R7,A
011C FE                MOV     R6,A
011D 7D01              MOV     R5,#01H
011F FC                MOV     R4,A
0120 7800        R     MOV     R0,#LOW scale
0122 120000      E     LCALL   ?C?LLDPDATA0
0125 C3                CLR     C
0126 120000      E     LCALL   ?C?ULCMP
0129 7008              JNZ     ?C0009
012B 300005      E     JNB     Flag4Bypass,?C0009
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 56  

                                           ; SOURCE LINE # 153
012E 120000      E     LCALL   BypassZoom
0131 800B              SJMP    ?C0010
0133         ?C0009:
                                           ; SOURCE LINE # 154
                                           ; SOURCE LINE # 155
0133 120000      E     LCALL   Clear_bypass
                                           ; SOURCE LINE # 156
0136 7800        R     MOV     R0,#LOW scale
0138 120000      E     LCALL   ?C?LLDPDATA
013B 120000      E     LCALL   _YScale2
                                           ; SOURCE LINE # 157
013E         ?C0010:
                                           ; SOURCE LINE # 159
013E 7800        R     MOV     R0,#LOW vstart
0140 E2                MOVX    A,@R0
0141 FE                MOV     R6,A
0142 08                INC     R0
0143 E2                MOVX    A,@R0
0144 FF                MOV     R7,A
0145 120000      E     LCALL   _SetVValueForPanel
                                           ; SOURCE LINE # 161
0148 E4                CLR     A
0149 7800        R     MOV     R0,#LOW dat
014B F2                MOVX    @R0,A
                                           ; SOURCE LINE # 163
014C 120000      E     LCALL   IsDTVInput
014F EF                MOV     A,R7
0150 700C              JNZ     ?C0011
                                           ; SOURCE LINE # 164
0152 7800        R     MOV     R0,#LOW index
0154 120000      R     LCALL   L?0049
0157 120000      E     LCALL   _ReadEEP
015A 7800        R     MOV     R0,#LOW dat
015C EF                MOV     A,R7
015D F2                MOVX    @R0,A
015E         ?C0011:
                                           ; SOURCE LINE # 165
015E 7800        R     MOV     R0,#LOW mode
0160 120000      R     LCALL   L?0061
0163 E4                CLR     A
0164 93                MOVC    A,@A+DPTR
0165 FF                MOV     R7,A
0166 08                INC     R0
0167 E2                MOVX    A,@R0
0168 2F                ADD     A,R7
0169 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 166
016A E2                MOVX    A,@R0
016B FF                MOV     R7,A
016C C007              PUSH    AR7
016E 7DB8              MOV     R5,#0B8H
0170 7F8A              MOV     R7,#08AH
0172 120000      E     LCALL   _ReadI2C
0175 C3                CLR     C
0176 D0E0              POP     ACC
0178 9F                SUBB    A,R7
0179 FF                MOV     R7,A
017A 7800        R     MOV     R0,#LOW dat
017C F2                MOVX    @R0,A
                                           ; SOURCE LINE # 176
017D 120000      E     LCALL   _SetVBackPorch
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 57  

                                           ; SOURCE LINE # 179
0180 120000      E     LCALL   IsDTVInput
0183 EF                MOV     A,R7
0184 700D              JNZ     ?C0012
                                           ; SOURCE LINE # 180
0186 7800        R     MOV     R0,#LOW index
0188 120000      R     LCALL   L?0049
018B 120000      E     LCALL   _ReadEEP
018E 7800        R     MOV     R0,#LOW hstart+01H
0190 120000      R     LCALL   L?0076
0193         ?C0012:
                                           ; SOURCE LINE # 182
0193 120000      R     LCALL   L?0054
0196 E4                CLR     A
0197 93                MOVC    A,@A+DPTR
0198 FC                MOV     R4,A
0199 7401              MOV     A,#01H
019B 93                MOVC    A,@A+DPTR
019C 7800        R     MOV     R0,#LOW hstart
019E 120000      R     LCALL   L?0059
01A1 2D                ADD     A,R5
01A2 FD                MOV     R5,A
01A3 EE                MOV     A,R6
01A4 3C                ADDC    A,R4
01A5 CD                XCH     A,R5
01A6 2414              ADD     A,#014H
01A8 7800        R     MOV     R0,#LOW temp+01H
01AA F2                MOVX    @R0,A
01AB E4                CLR     A
01AC 3D                ADDC    A,R5
01AD 18                DEC     R0
01AE F2                MOVX    @R0,A
                                           ; SOURCE LINE # 188
01AF 120000      E     LCALL   _SetHactiveStart
                                           ; SOURCE LINE # 195
01B2 120000      E     LCALL   IsDTVInput
01B5 EF                MOV     A,R7
01B6 600B              JZ      ?C0013
01B8 7800        R     MOV     R0,#LOW temp+01H
01BA E2                MOVX    A,@R0
01BB 2403              ADD     A,#03H
01BD F2                MOVX    @R0,A
01BE 18                DEC     R0
01BF E2                MOVX    A,@R0
01C0 3400              ADDC    A,#00H
01C2 F2                MOVX    @R0,A
01C3         ?C0013:
                                           ; SOURCE LINE # 197
01C3 7800        R     MOV     R0,#LOW temp
01C5 E2                MOVX    A,@R0
01C6 FE                MOV     R6,A
01C7 08                INC     R0
01C8 E2                MOVX    A,@R0
01C9 FF                MOV     R7,A
01CA 120000      E     LCALL   _SetHactiveEnd
                                           ; SOURCE LINE # 198
01CD 120000      E     LCALL   SetHValueForPanel
                                           ; SOURCE LINE # 200
01D0 120000      E     LCALL   GetPVR
01D3 120000      R     LCALL   L?0050
01D6 7401              MOV     A,#01H
01D8 93                MOVC    A,@A+DPTR
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 58  

01D9 B5070B            CJNE    A,AR7,?C0015
01DC E4                CLR     A
01DD 93                MOVC    A,@A+DPTR
01DE B50606            CJNE    A,AR6,?C0015
01E1 300003      E     JNB     Flag4Bypass,$ + 6H
01E4 020000      R     LJMP    ?C0014
01E7         ?C0015:
                                           ; SOURCE LINE # 201
01E7 120000      E     LCALL   GetPHR
01EA E4                CLR     A
01EB FC                MOV     R4,A
01EC FD                MOV     R5,A
01ED 7800        R     MOV     R0,#LOW pres
                                           ; SOURCE LINE # 202
01EF 120000      R     LCALL   L?0053
01F2 120000      R     LCALL   L?0072
01F5 E4                CLR     A
01F6 FC                MOV     R4,A
01F7 FD                MOV     R5,A
01F8 FB                MOV     R3,A
01F9 FA                MOV     R2,A
01FA 120000      R     LCALL   L?0066
01FD C004              PUSH    AR4
01FF C005              PUSH    AR5
0201 C006              PUSH    AR6
0203 C007              PUSH    AR7
0205 E4                CLR     A
0206 7B02              MOV     R3,#02H
0208 FA                MOV     R2,A
0209 F9                MOV     R1,A
020A F8                MOV     R0,A
020B C000              PUSH    AR0
020D 7800        R     MOV     R0,#LOW pres
020F 120000      E     LCALL   ?C?LLDPDATA
0212 D000              POP     AR0
0214 120000      E     LCALL   ?C?ULDIV
0217 D003              POP     AR3
0219 D002              POP     AR2
021B D001              POP     AR1
021D D000              POP     AR0
021F 120000      E     LCALL   ?C?LADD
0222 120000      R     LCALL   L?0078
                                           ; SOURCE LINE # 223
0225 120000      R     LCALL   L?0053
0228 120000      R     LCALL   L?0072
022B D3                SETB    C
022C 9400              SUBB    A,#00H
022E EE                MOV     A,R6
022F 9404              SUBB    A,#04H
0231 4041              JC      ?C0016
                                           ; SOURCE LINE # 224
0233 E4                CLR     A
0234 FC                MOV     R4,A
0235 FD                MOV     R5,A
0236 7B80              MOV     R3,#080H
0238 FA                MOV     R2,A
0239 F9                MOV     R1,A
023A F8                MOV     R0,A
023B 120000      E     LCALL   ?C?LMUL
023E E4                CLR     A
023F FB                MOV     R3,A
0240 7A04              MOV     R2,#04H
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 59  

0242 F9                MOV     R1,A
0243 F8                MOV     R0,A
0244 120000      E     LCALL   ?C?SLDIV
0247 EF                MOV     A,R7
0248 2401              ADD     A,#01H
024A FF                MOV     R7,A
024B E4                CLR     A
024C 3E                ADDC    A,R6
024D FE                MOV     R6,A
024E E4                CLR     A
024F 3D                ADDC    A,R5
0250 FD                MOV     R5,A
0251 E4                CLR     A
0252 3C                ADDC    A,R4
0253 FC                MOV     R4,A
0254 7800        R     MOV     R0,#LOW scale
0256 120000      E     LCALL   ?C?LSTPDATA
                                           ; SOURCE LINE # 225
0259 7800        R     MOV     R0,#LOW scale
025B 120000      E     LCALL   ?C?LLDPDATA
025E 120000      E     LCALL   _XscaleD
                                           ; SOURCE LINE # 231
0261 7800        R     MOV     R0,#LOW scale
0263 120000      E     LCALL   ?C?LSTKPDATA
0266 00                DB      00H
0267 00                DB      00H
0268 CC                DB      0CCH
0269 CC                DB      0CCH
                                           ; SOURCE LINE # 232
026A 7800        R     MOV     R0,#LOW scale
026C 120000      E     LCALL   ?C?LLDPDATA
026F 120000      E     LCALL   _XscaleU
                                           ; SOURCE LINE # 237
0272 8008              SJMP    ?C0014
0274         ?C0016:
                                           ; SOURCE LINE # 242
0274 7800        R     MOV     R0,#LOW scale
0276 120000      E     LCALL   ?C?LLDPDATA
0279 120000      E     LCALL   _XScale2
                                           ; SOURCE LINE # 244
027C         ?C0014:
                                           ; SOURCE LINE # 247
027C 7DB6              MOV     R5,#0B6H
027E 7F8A              MOV     R7,#08AH
0280 120000      E     LCALL   _ReadI2C
0283 EF                MOV     A,R7
0284 547F              ANL     A,#07FH
0286 FB                MOV     R3,A
0287 7DB6              MOV     R5,#0B6H
0289 7F8A              MOV     R7,#08AH
028B 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 248
028E 7DB2              MOV     R5,#0B2H
0290 7F8A              MOV     R7,#08AH
0292 120000      E     LCALL   _ReadI2C
0295 AB07              MOV     R3,AR7
0297 7DB2              MOV     R5,#0B2H
0299 7F8A              MOV     R7,#08AH
029B 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 250
029E 120000      E     LCALL   DisplayResultAndSetActiveRange
                                           ; SOURCE LINE # 253
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 60  

02A1 7F03              MOV     R7,#03H
02A3 120000      E     LCALL   _MeasureAndWait
                                           ; SOURCE LINE # 256
02A6 120000      E     LCALL   GetWideModeEE
02A9 120000      E     LCALL   _Set4WideScreen
                                           ; SOURCE LINE # 259
02AC 7B80              MOV     R3,#080H
02AE 7D06              MOV     R5,#06H
02B0 7F8A              MOV     R7,#08AH
02B2 020000      E     LJMP    _WriteI2C
                                           ; SOURCE LINE # 261
02B5         L?0077:
02B5 120000      E     LCALL   _ReadEEP
02B8 7800        R     MOV     R0,#LOW dat
02BA EF                MOV     A,R7
02BB F2                MOVX    @R0,A
02BC 22                RET     
             ; FUNCTION _GetPCDataEE (END)

             ; FUNCTION _SavePCDataEE (BEGIN)
                                           ; SOURCE LINE # 266
0000 7800        R     MOV     R0,#LOW mode
0002 EF                MOV     A,R7
0003 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 267
                                           ; SOURCE LINE # 271
0004 E2                MOVX    A,@R0
0005 7800        R     MOV     R0,#LOW index+01H
0007 120000      R     LCALL   L?0060
                                           ; SOURCE LINE # 273
000A 120000      E     LCALL   GetCoarse
000D 7800        R     MOV     R0,#LOW mode
000F 120000      R     LCALL   L?0074
0012 E4                CLR     A
0013 93                MOVC    A,@A+DPTR
0014 FC                MOV     R4,A
0015 7401              MOV     A,#01H
0017 93                MOVC    A,@A+DPTR
0018 FD                MOV     R5,A
0019 C3                CLR     C
001A EF                MOV     A,R7
001B 9D                SUBB    A,R5
001C FF                MOV     R7,A
001D EE                MOV     A,R6
001E 9C                SUBB    A,R4
;---- Variable 'clockDiff' assigned to Register 'R4/R5' ----
001F AD07              MOV     R5,AR7
0021 FC                MOV     R4,A
                                           ; SOURCE LINE # 280
0022 120000      R     LCALL   L?0048
0025 120000      E     LCALL   _WriteEEP
                                           ; SOURCE LINE # 281
0028 120000      E     LCALL   GetPhaseCurrent
002B AD07              MOV     R5,AR7
002D 7800        R     MOV     R0,#LOW index
002F 120000      R     LCALL   L?0049
0032 120000      E     LCALL   _WriteEEP
                                           ; SOURCE LINE # 282
0035 120000      E     LCALL   GetVactiveStart
0038 900000      E     MOV     DPTR,#PCMDATA+0FH
003B 120000      R     LCALL   L?0046
003E 120000      E     LCALL   _WriteEEP
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 61  

                                           ; SOURCE LINE # 283
0041 7DB8              MOV     R5,#0B8H
0043 7F8A              MOV     R7,#08AH
0045 120000      E     LCALL   _ReadI2C
0048 C007              PUSH    AR7
004A 120000      E     LCALL   GetVBackPorch
004D D0E0              POP     ACC
004F 2F                ADD     A,R7
0050 FF                MOV     R7,A
0051 7800        R     MOV     R0,#LOW mode
0053 120000      R     LCALL   L?0061
0056 E4                CLR     A
0057 120000      R     LCALL   L?0047
005A 120000      E     LCALL   _WriteEEP
                                           ; SOURCE LINE # 284
005D 120000      E     LCALL   GetHactiveStart
0060 900000      E     MOV     DPTR,#PCMDATA+0DH
0063 120000      R     LCALL   L?0046
0066 020000      E     LJMP    _WriteEEP
             ; FUNCTION _SavePCDataEE (END)

             ; FUNCTION SaveDefaultPCDataEE (BEGIN)
                                           ; SOURCE LINE # 288
                                           ; SOURCE LINE # 289
                                           ; SOURCE LINE # 292
0000 7800        E     MOV     R0,#LOW PcMode
0002 E2                MOVX    A,@R0
0003 7800        R     MOV     R0,#LOW index+01H
0005 120000      R     LCALL   L?0064
                                           ; SOURCE LINE # 294
0008 E4                CLR     A
0009 7800        R     MOV     R0,#LOW i
000B F2                MOVX    @R0,A
000C 08                INC     R0
000D F2                MOVX    @R0,A
000E         ?C0020:
                                           ; SOURCE LINE # 295
000E 7800        R     MOV     R0,#LOW index
0010 120000      R     LCALL   L?0049
0013 E4                CLR     A
0014 FD                MOV     R5,A
0015 120000      E     LCALL   _WriteEEP
                                           ; SOURCE LINE # 296
0018 7F01              MOV     R7,#01H
001A 120000      E     LCALL   _delay
                                           ; SOURCE LINE # 297
001D 7800        R     MOV     R0,#LOW i+01H
001F E2                MOVX    A,@R0
0020 2401              ADD     A,#01H
0022 F2                MOVX    @R0,A
0023 18                DEC     R0
0024 E2                MOVX    A,@R0
0025 3400              ADDC    A,#00H
0027 F2                MOVX    @R0,A
0028 C3                CLR     C
0029 08                INC     R0
002A E2                MOVX    A,@R0
002B 9405              SUBB    A,#05H
002D 18                DEC     R0
002E E2                MOVX    A,@R0
002F 9400              SUBB    A,#00H
0031 40DB              JC      ?C0020
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 62  

                                           ; SOURCE LINE # 298
0033         ?C0023:
0033 22                RET     
             ; FUNCTION SaveDefaultPCDataEE (END)

             ; FUNCTION SaveDefaultPCDataAllEE (BEGIN)
                                           ; SOURCE LINE # 300
                                           ; SOURCE LINE # 301
                                           ; SOURCE LINE # 302
0000 E4                CLR     A
0001 7800        E     MOV     R0,#LOW PcMode
0003 F2                MOVX    @R0,A
0004         ?C0024:
                                           ; SOURCE LINE # 303
0004 120000      R     LCALL   SaveDefaultPCDataEE
0007 7800        E     MOV     R0,#LOW PcMode
0009 E2                MOVX    A,@R0
000A 04                INC     A
000B F2                MOVX    @R0,A
000C E2                MOVX    A,@R0
000D C3                CLR     C
000E 942E              SUBB    A,#02EH
0010 40F2              JC      ?C0024
                                           ; SOURCE LINE # 304
0012         ?C0027:
0012 22                RET     
             ; FUNCTION SaveDefaultPCDataAllEE (END)

             ; FUNCTION _SaveCoarseEE (BEGIN)
                                           ; SOURCE LINE # 306
0000 7800        R     MOV     R0,#LOW mode
0002 EF                MOV     A,R7
0003 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 307
                                           ; SOURCE LINE # 310
0004 E2                MOVX    A,@R0
0005 7800        R     MOV     R0,#LOW index+01H
0007 120000      R     LCALL   L?0064
                                           ; SOURCE LINE # 311
000A 120000      E     LCALL   GetCoarse
000D 7800        R     MOV     R0,#LOW mode
000F 900000      E     MOV     DPTR,#PCMDATA+07H
0012 120000      R     LCALL   L?0056
0015 020000      E     LJMP    _WriteEEP
             ; FUNCTION _SaveCoarseEE (END)

             ; FUNCTION _SavePhaseEE (BEGIN)
                                           ; SOURCE LINE # 314
;---- Variable 'mode' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 315
                                           ; SOURCE LINE # 318
0000 EF                MOV     A,R7
0001 75F005            MOV     B,#05H
0004 A4                MUL     AB
0005 24C1              ADD     A,#0C1H
0007 7800        R     MOV     R0,#LOW index+01H
0009 120000      R     LCALL   L?0073
                                           ; SOURCE LINE # 319
000C 120000      E     LCALL   GetPhaseCurrent
000F AD07              MOV     R5,AR7
0011 7800        R     MOV     R0,#LOW index
0013 E2                MOVX    A,@R0
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 63  

0014 FE                MOV     R6,A
0015 08                INC     R0
0016 E2                MOVX    A,@R0
0017 FF                MOV     R7,A
0018 020000      E     LJMP    _WriteEEP
             ; FUNCTION _SavePhaseEE (END)

             ; FUNCTION _SaveVactiveEE (BEGIN)
                                           ; SOURCE LINE # 324
0000 7800        R     MOV     R0,#LOW mode
                                           ; SOURCE LINE # 325
                                           ; SOURCE LINE # 328
0002 120000      R     LCALL   L?0068
0005 24C2              ADD     A,#0C2H
0007 7800        R     MOV     R0,#LOW index+01H
0009 120000      R     LCALL   L?0073
                                           ; SOURCE LINE # 329
000C 120000      E     LCALL   GetVactiveStart
000F 7800        R     MOV     R0,#LOW mode
0011 900000      E     MOV     DPTR,#PCMDATA+0FH
0014 120000      R     LCALL   L?0056
0017 020000      E     LJMP    _WriteEEP
             ; FUNCTION _SaveVactiveEE (END)

             ; FUNCTION _SaveVBackPorchEE (BEGIN)
                                           ; SOURCE LINE # 332
0000 7800        R     MOV     R0,#LOW mode
                                           ; SOURCE LINE # 333
                                           ; SOURCE LINE # 336
0002 120000      R     LCALL   L?0068
0005 AEF0              MOV     R6,B
0007 24C3              ADD     A,#0C3H
0009 7800        R     MOV     R0,#LOW index+01H
000B F2                MOVX    @R0,A
000C E4                CLR     A
000D 3E                ADDC    A,R6
000E 18                DEC     R0
000F F2                MOVX    @R0,A
                                           ; SOURCE LINE # 337
0010 120000      E     LCALL   GetVBackPorch
0013 7800        R     MOV     R0,#LOW mode
0015 120000      R     LCALL   L?0062
0018 E4                CLR     A
0019 120000      R     LCALL   L?0058
001C 020000      E     LJMP    _WriteEEP
             ; FUNCTION _SaveVBackPorchEE (END)

             ; FUNCTION _SaveHactiveEE (BEGIN)
                                           ; SOURCE LINE # 341
0000 7800        R     MOV     R0,#LOW mode
                                           ; SOURCE LINE # 342
                                           ; SOURCE LINE # 345
0002 120000      R     LCALL   L?0068
0005 AEF0              MOV     R6,B
0007 24C4              ADD     A,#0C4H
0009 7800        R     MOV     R0,#LOW index+01H
000B F2                MOVX    @R0,A
000C E4                CLR     A
000D 3E                ADDC    A,R6
000E 18                DEC     R0
000F F2                MOVX    @R0,A
                                           ; SOURCE LINE # 346
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 64  

0010 120000      E     LCALL   GetHactiveStart
0013 7800        R     MOV     R0,#LOW mode
0015 E2                MOVX    A,@R0
0016 75F016            MOV     B,#016H
0019 900000      E     MOV     DPTR,#PCMDATA+0DH
001C 120000      R     LCALL   L?0057
001F 020000      E     LJMP    _WriteEEP
             ; FUNCTION _SaveHactiveEE (END)

             ; FUNCTION _SaveADCGainOffsetEE (BEGIN)
                                           ; SOURCE LINE # 352
0000 7800        R     MOV     R0,#LOW mod
0002 EF                MOV     A,R7
0003 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 353
                                           ; SOURCE LINE # 357
0004 7800        R     MOV     R0,#LOW index
0006 E4                CLR     A
0007 F2                MOVX    @R0,A
0008 08                INC     R0
0009 7490              MOV     A,#090H
000B F2                MOVX    @R0,A
                                           ; SOURCE LINE # 359
000C E4                CLR     A
000D 7800        R     MOV     R0,#LOW i
000F F2                MOVX    @R0,A
0010         ?C0033:
0010 7800        R     MOV     R0,#LOW i
0012 E2                MOVX    A,@R0
0013 FF                MOV     R7,A
0014 C3                CLR     C
0015 9404              SUBB    A,#04H
0017 5031              JNC     ?C0038
                                           ; SOURCE LINE # 360
0019 18                DEC     R0
001A E2                MOVX    A,@R0
001B 7007              JNZ     ?C0036
001D 7800        R     MOV     R0,#LOW dat
001F 7480              MOV     A,#080H
0021 F2                MOVX    @R0,A
0022 800B              SJMP    ?C0037
0024         ?C0036:
                                           ; SOURCE LINE # 361
0024 EF                MOV     A,R7
0025 24D0              ADD     A,#0D0H
0027 FF                MOV     R7,A
0028 120000      E     LCALL   _ReadADC_TW88
002B 7800        R     MOV     R0,#LOW dat
002D EF                MOV     A,R7
002E F2                MOVX    @R0,A
002F         ?C0037:
                                           ; SOURCE LINE # 362
002F 7800        R     MOV     R0,#LOW i
0031 E2                MOVX    A,@R0
0032 FF                MOV     R7,A
0033 7800        R     MOV     R0,#LOW index+01H
0035 E2                MOVX    A,@R0
0036 2F                ADD     A,R7
0037 FF                MOV     R7,A
0038 18                DEC     R0
0039 E2                MOVX    A,@R0
003A 3400              ADDC    A,#00H
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 65  

003C FE                MOV     R6,A
003D 18                DEC     R0
003E E2                MOVX    A,@R0
003F FD                MOV     R5,A
0040 120000      E     LCALL   _WriteEEP
                                           ; SOURCE LINE # 363
0043 7800        R     MOV     R0,#LOW i
0045 E2                MOVX    A,@R0
0046 04                INC     A
0047 F2                MOVX    @R0,A
0048 80C6              SJMP    ?C0033
                                           ; SOURCE LINE # 364
004A         ?C0038:
004A 22                RET     
             ; FUNCTION _SaveADCGainOffsetEE (END)

             ; FUNCTION GetADCGainOffsetEE (BEGIN)
                                           ; SOURCE LINE # 366
                                           ; SOURCE LINE # 367
                                           ; SOURCE LINE # 371
0000 7800        R     MOV     R0,#LOW index
0002 E4                CLR     A
0003 F2                MOVX    @R0,A
0004 08                INC     R0
0005 7490              MOV     A,#090H
0007 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 373
0008 E4                CLR     A
0009 7800        R     MOV     R0,#LOW i
000B F2                MOVX    @R0,A
000C         ?C0039:
000C 7800        R     MOV     R0,#LOW i
000E E2                MOVX    A,@R0
000F FF                MOV     R7,A
0010 C3                CLR     C
0011 9404              SUBB    A,#04H
0013 5021              JNC     ?C0042
                                           ; SOURCE LINE # 374
0015 7800        R     MOV     R0,#LOW index+01H
0017 E2                MOVX    A,@R0
0018 2F                ADD     A,R7
0019 FF                MOV     R7,A
001A 18                DEC     R0
001B E2                MOVX    A,@R0
001C 3400              ADDC    A,#00H
001E FE                MOV     R6,A
001F 120000      E     LCALL   _ReadEEP
0022 7800        R     MOV     R0,#LOW dat
0024 EF                MOV     A,R7
0025 F2                MOVX    @R0,A
0026 FD                MOV     R5,A
                                           ; SOURCE LINE # 375
0027 18                DEC     R0
0028 E2                MOVX    A,@R0
0029 24D0              ADD     A,#0D0H
002B FF                MOV     R7,A
002C 120000      E     LCALL   _WriteADC_TW88
                                           ; SOURCE LINE # 376
002F 7800        R     MOV     R0,#LOW i
0031 E2                MOVX    A,@R0
0032 04                INC     A
0033 F2                MOVX    @R0,A
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 66  

0034 80D6              SJMP    ?C0039
                                           ; SOURCE LINE # 377
0036         ?C0042:
0036 22                RET     
             ; FUNCTION GetADCGainOffsetEE (END)

C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 67  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


GetPhaseCurrent. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_GetHpnVpn . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
DWORD. . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
GetCoarse. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_MeasureAndWait. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CAM_R. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_SetVCORange . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_GetHactiveStartEE . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  mode . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0000H  1
  index. . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
  start. . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
CAM_BAR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ABR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_SetHactiveStart . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CAM_CAR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ACR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_CBR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_BCR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
GetVactiveStart. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
GetPHR . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
NumberStringType . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  11
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  width. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  BackColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  Radix. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  NumColor . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  MaxLen . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  PrePostCharLen . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  PrePostChar. . . . . . . . . . . . .  MEMBER   -----  ARRAY    0008H  3
_SetCoarse . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_SetHactiveEnd . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_SavePhaseEE . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  mode . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  index. . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0000H  2
_delay . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
SaveDefaultPCDataAllEE . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
SetHValueForPanel. . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_GetVactiveStartEE . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  mode . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0000H  1
  index. . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
  start. . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
_SetVactiveStart . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
GetPVR . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
BypassZoom . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
AVMode . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_SetPhase. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_SetVValueForPanel . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
SourceModeType . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
CAM_NUM. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_SetVactiveLen . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Flag4Bypass. . . . . . . . . . . . . .  EXTERN   DATA   BIT      -----  1
_ChangeInternPLL . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_XscaleD . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_SavePCDataEE. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  mode . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0000H  1
  index. . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0001H  2
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 68  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  clockDiff. . . . . . . . . . . . . .  * REG *  DATA   INT      0004H  2
CAM_RAB_H. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_BA . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_AB . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
BYTE . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
TimeType . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  7
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  width. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  BackColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  Format . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  TimeColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  CursorColor. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
CAM_CA . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_AC . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_BC . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_CB . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_XscaleU . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
SourceModeTypeEnum . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
PcMode . . . . . . . . . . . . . . . .  EXTERN   PDATA  U_CHAR   -----  1
struct_IdName. . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  17
  Id . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  Name . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0001H  16
EnumType . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  17
  Sz . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  ByLang . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  Str. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0002H  15
MenuType . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  4
  width. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  height . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  TitleColor . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  CursorColor. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
CAM_RAB_T. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_GetPCDataEE . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  mode . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0000H  1
  dat. . . . . . . . . . . . . . . . .  AUTO     PDATA  CHAR     0001H  1
  index. . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0002H  2
  temp . . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0004H  2
  scale. . . . . . . . . . . . . . . .  AUTO     PDATA  U_LONG   0006H  4
  pres . . . . . . . . . . . . . . . .  AUTO     PDATA  U_LONG   000AH  4
  hstart . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    000EH  2
  vstart . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0010H  2
_ReadI2C . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
WORD . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
GetWideModeEE. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
IsDTVInput . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_ReadADC_TW88. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CAM_AR . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_BR . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_RB . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_CR . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Register . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
_WriteI2C. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_Set4WideScreen. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_SaveADCGainOffsetEE . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  mod. . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0000H  1
  i. . . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0001H  1
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 69  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  dat. . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0002H  1
  index. . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0003H  2
_WriteADC_TW88 . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
NumType. . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  5
  PrePostCharLen . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  PrePostChar. . . . . . . . . . . . .  MEMBER   -----  ARRAY    0001H  4
_ReadEEP . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
RegisterInfo . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  Min. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0000H  2
  Max. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0002H  2
  Default. . . . . . . . . . . . . . .  MEMBER   -----  INT      0004H  2
_PCMDATA . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  22
  Support. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  HAN. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  VAN. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0003H  2
  IVF. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0005H  2
  CLOCK. . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0007H  2
  low. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0009H  2
  high . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000BH  2
  Hstart . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000DH  2
  Vstart . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000FH  2
  IPF. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0011H  2
  PPF. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0013H  2
  VBack. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0015H  1
CAM_QUAD . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Clear_bypass . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
GetInputSelection. . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
GetADCGainOffsetEE . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0000H  1
  dat. . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0001H  1
  index. . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0002H  2
_SaveHactiveEE . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  mode . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0000H  1
  index. . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0001H  2
DefineMenu . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  16
  Icon . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0000H  2
  Desc . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0002H  3
  PreFnId. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  PostFnId . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  IconColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  DescColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
  Child. . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0009H  2
  Type . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000BH  1
  ActiveWithCursor . . . . . . . . . .  MEMBER   -----  U_CHAR   000CH  1
  Id . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000DH  1
  TypeData . . . . . . . . . . . . . .  MEMBER   -----  PTR      000EH  2
_SaveVBackPorchEE. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  mode . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0000H  1
  index. . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0001H  2
VGAMode. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_WriteEEP. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
SEQ. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
GetVBackPorch. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
LongRegisterInfo . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  Min. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  Max. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  Default. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
C51 COMPILER V8.16   PC_EEP                                                                03/04/2011 15:51:18 PAGE 70  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


PictureInfo. . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  4
  Register_Addr. . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  EEPROM_Addr. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  Control_Range. . . . . . . . . . . .  MEMBER   -----  PTR      0002H  2
CAM_ABR_T3 . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ABR_T4 . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_A. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
DisplayResultAndSetActiveRange . . . .  EXTERN   CODE   PROC     -----  -----
_SaveVactiveEE . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  mode . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0000H  1
  index. . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0001H  2
CAM_B. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_C. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_XScale2 . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CAM_D. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_YScale2 . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_Printf. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_SetVBackPorch . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
SaveDefaultPCDataEE. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  index. . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0000H  2
  i. . . . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0002H  2
CAM_CAB. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_BAC. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ABC. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
PCMDATA. . . . . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
GetHactiveStart. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_SaveCoarseEE. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  mode . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0000H  1
  index. . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0001H  2


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1419    ----
   CONSTANT SIZE    =     38    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----      50
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
