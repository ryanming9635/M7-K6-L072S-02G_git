C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 1   


C51 COMPILER V8.16, COMPILATION OF MODULE TW88
OBJECT MODULE PLACED IN .\Output\TW88.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE TW88.c COMPACT OPTIMIZE(9,SIZE) BROWSE INCDIR(.\Include\) DEBUG OBJECTEXTEN
                    -D CODE LISTINCLUDE SYMBOLS PRINT(.\Source\TW88.lst) OBJECT(.\Output\TW88.obj)

line level    source

   1          #include "Config.h"
   1      =1  /*****************************************************************************/
   2      =1  /*                           System Configurations                           */
   3      =1  /*                                                      rev 0.10 include auto test                                               */
   4      =1  // 0.11 change DTV, PC input initial download data correct for Charge Pump
   5      =1  // 0.12 correct phase measurement routine '>>3'
   6      =1  // 0.13 enable function for SPI control... only EXT MCU case
   7      =1  // 0.14 corrected PC measurement......
   8      =1  // 0.0a test function only for CVBS, SVIDEO
   9      =1  // 0.15 corrected DTV scaler setting for panel resolutions
  10      =1  // 0.0b panel for AND 640x480 TICON panel
  11      =1  // 0.16 corrected COMPONENT scaler setting for panel resolutions        11/21/2007
  12      =1  // 0.0c automatic chip test
  13      =1  // 0.17 add monitor function, osd grid for writing grid
  14      =1  // 0.18 add component, dtv pc for analogpanel, 12/06/2007
  15      =1  // 0.19 correct pal input for CES, 12/20/2007
  16      =1  // 0.1a CCFL control, 12/28/2007
  17      =1  // 0.19 Multi Grid for Banking on Internal MCU  01/17/2008
  18      =1  // 0.20 CCFL contol for backlight brightness    01/21/2008
  19      =1  // 0.21 CCFL contol for backlight brightness    01/25/2008
  20      =1  // 0.22 phase setting 02/07/2008
  21      =1  // 0.221 display input correction 04/03/2008
  22      =1  // 0.23 PC, DTV mode, no signal display
  23      =1  // 0.24 PC Auto Color adjustment
  24      =1  // 0.25 revised PC Auto Clock adjustment - find divide number and phase
  25      =1  // 0.26 Digital RGB for TW8826
  26      =1  // 0.27 Correct LVDS control                                    08/22/2008
  27      =1  // 0.28 Add WSVGA resolution                                    10/23/2008
  28      =1  // 0.29 Add NEW GRID                                                    11/14/2008
  29      =1  // 0.30 Fix DTV input                                                   12/10/2008
  30      =1  // 0.31 Add 1080i23, 24, 25A, 25B                               01/20/2009
  31      =1  // 0.32 TCON setting FIX all mode                               01/22/2009
  32      =1  // 0.33 autodetect is auto on/off by dip sw1    02/02/2009
  33      =1  // 0.34 Fix autocolor function and clamp position 02/08/2009
  34      =1  /*****************************************************************************/
  35      =1  #ifndef __CONFIG_H__
  36      =1  #define __CONFIG_H__
  37      =1  
  38      =1  //#define INTERNAL_MCU -- defined by Project Compiler session
  39      =1  
  40      =1  
  41      =1  //-----------------------------------------------------------------------------
  42      =1  //              Firmware Version
  43      =1  //-----------------------------------------------------------------------------
  44      =1  #define FWVER                   0x140                   // Rev 0.14
  45      =1  //-----------------------------------------------------------------------------
  46      =1  //              Compiler
  47      =1  //-----------------------------------------------------------------------------
  48      =1  #define KEILC                                           // Keil C 5.0
  49      =1  //-----------------------------------------------------------------------------
  50      =1  //              MPU Clock
  51      =1  //-----------------------------------------------------------------------------
  52      =1  #ifndef INTERNAL_MCU
  53      =1  //#define CLOCK_11M                                     // 11.0592MHz
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 2   

  54      =1  #define CLOCK_22M                                       // 22.1184MHz
  55      =1  #else                                                           // INTERNAL_MCU
           =1 #define CLOCK_27M                                       // 27MHz
           =1 #define REG_START_ADDRESS       0xc000          // register start 0xc000, for page0, 0xc100-page1 
           =1 #endif
  59      =1  //-----------------------------------------------------------------------------
  60      =1  //              TW88 Version
  61      =1  //-----------------------------------------------------------------------------
  62      =1  #define TW8816
  63      =1  //-----------------------------------------------------------------------------
  64      =1  //              Options for Backlight control
  65      =1  //-----------------------------------------------------------------------------
  66      =1  //#define       BACKLIGHT_CCFL
  67      =1  //#define       BACKLIGHT_LED
  68      =1  #define BACKLIGHT_PWM
  69      =1  
  70      =1  //-----------------------------------------------------------------------------
  71      =1  //              Panel Resolution
  72      =1  //-----------------------------------------------------------------------------
  73      =1  // ---- Select Default Panel
  74      =1  //
  75      =1  //#define UXGA                                          // 1600 x 1200
  76      =1  //#define SXGA                                          // 1280 x 1024
  77      =1  //#define XGA  // 1024 x 768
  78      =1  #ifdef XGA
           =1         #define LVDS                                    
           =1         #define PWIDTH  1024
           =1         #define PHEIGHT 768
           =1 #endif
  83      =1  //#define SVGA                                          //  800 x 600
  84      =1  //#define VGA                                           //  640 x 480
  85      =1  #ifdef VGA
           =1         #define PWIDTH  640
           =1         #define PHEIGHT 480
           =1         //#define       HITACHI_640_B_160               //--> 640 x 160
           =1         #define AND_640_480
           =1 #endif
  91      =1  //#define WXGA                                          // 1280 x 768 (15:9) // 1366 x 768 (16:9)
  92      =1  #ifdef WXGA
           =1     //#define WX_SHARP_LQ106K1LA
           =1         #define PWIDTH  1280
           =1         #define PHEIGHT 768
           =1 #endif
  97      =1  //#define WSVGA                                         // 1024 x 600   *** only video mode
  98      =1  #ifdef WSVGA
           =1         #define PWIDTH  1024
           =1         #define PHEIGHT 600
           =1         #define UNIDEN_1024_600
           =1 #endif
 103      =1  #define WVGA                                            //  800 x 480
 104      =1  #ifdef WVGA
 105      =1          #define PWIDTH  800
 106      =1          #define PHEIGHT 600//480
 107      =1          // If WVGA, you have to select panel.
 108      =1          //#define AU_10INCH
 109      =1          //#define WVGA_TPO
 110      =1          //#define SAMSUNG_10INCH
 111      =1          //#define SAMSUNG_TICONLESS_10INCH
 112      =1          //#define SHARP_TICONLESS_7INCH
 113      =1          #define AU_TICONLESS_7INCH
 114      =1          //#define INNOLUX_AT080TN03
 115      =1          //#define AU_TICONLESS_7INCH_CCFL
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 3   

 116      =1          //#define CMO                   // CHIMEI panel
 117      =1          //#define AU_TICONLESS_10INCH
 118      =1          //#define HITACHI_T01
 119      =1          //#define HITACHI_TX23D12
 120      =1          //#define HITACHI_TX18D24
 121      =1          //#define HITACHI_TX18D16
 122      =1          //#define TMD_LTA070A320F
 123      =1          //#define TMD_LTA080B
 124      =1  #endif  //WVGA
 125      =1  //#define HVGA                                          //  480 x 320
 126      =1  //#define QVGA                                          //  320 x 240   *** only video mode
 127      =1  #ifdef QVGA
           =1         #define PWIDTH  320
           =1         #define PHEIGHT 240
           =1         //#define HITACHI_TX09D73
           =1         //#define AU_DELTARGB
           =1         //#define SHARP_LQ050Q5DR01
           =1         //#define SHARP_LQ035
           =1         //#define       TMD
           =1 #endif
 136      =1  
 137      =1  //#define WQVGA                                         //  480 x 234   *** only video mode
 138      =1  #ifdef WQVGA
           =1         #define PWIDTH  480
           =1         #define PHEIGHT 240
           =1         // If WQVGA, you have to select panel   
           =1     #define ANALOG_7INCH
           =1         //#define       PWIDTH  400
           =1         //#define PHEIGHT       240
           =1         //#define SHARP_LQ043T3DX02             //  400 x 237
           =1         //#define LG_ANALOG
           =1         //#define TMD_ANALOG                            //TMD_LTA05B352A
           =1         //#define       T_51945GD                               // Optorex Panel
           =1 #endif  // WQVGA
 150      =1  
 151      =1  //if LVDS pannel disable TICONLESS
 152      =1  
 153      =1  //-----------------------------------------------------------------------------
 154      =1  //---- Add Support One more panel with DIPSW#1
 155      =1  //---- Ex. Add Analog AU 7" Panel with Default Panel for evalution
 156      =1  //#define ADD_ANALOGPANEL               // Added Analog panel(AU7") from default set panel(expect WQVGA) with DIP #1 sw
             -itch.(DIP#1=L:ANALOG, H:DEFAULT)
 157      =1                                                          // It can't support WQVGA and ADD_ANALOGPANEL same time!!
 158      =1          //#define ADD_ANALOG_7INCH
 159      =1          //#define ADD_TMD_LTA05B352A
 160      =1                                                                          
 161      =1  //---- Support Wide panel function
 162      =1  #if (defined WXGA) || (defined WSVGA) || (defined WVGA) || (defined WQVGA)
 163      =1  #define WIDE_SCREEN                             // Can support 4 display mode, i.e. Normal, Wide, Full, Zoom
 164      =1  #endif                                                          // Tested panasonic WVGA panel.
 165      =1  
 166      =1  //-----------------------------------------------------------------------------
 167      =1  //              Panel Vendor Specific
 168      =1  //-----------------------------------------------------------------------------
 169      =1  
 170      =1  //-----------------------------------------------------------------------------
 171      =1  //              TV Tuner
 172      =1  //-----------------------------------------------------------------------------
 173      =1  #define PHILIPS                         0
 174      =1  #define ALPS                            1               // ALPS, LG
 175      =1  #define TEMIC                           2
 176      =1  #define TVAVA                           3
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 4   

 177      =1  #define LGTUNER                         4
 178      =1  #define SAMSUNGMUTITUNER        5
 179      =1  
 180      =1  #define TVTunerDevice           4
 181      =1  //-----------------------------------------------------------------------------
 182      =1  //              IR Remote Controller Type
 183      =1  //-----------------------------------------------------------------------------
 184      =1  //#define REMO_RC5                                      // RC5 style
 185      =1  #define TECHWELL_REMOCON
 186      =1  //#define REMO_NEC                                      // NEC style
 187      =1  //#define PHILIPS_REMOCON // New remocon 
 188      =1  
 189      =1  
 190      =1  //-----------------------------------------------------------------------------
 191      =1  //              I2C Device Access Address Mapping
 192      =1  //-----------------------------------------------------------------------------
 193      =1  
 194      =1  #define EEPROMI2CAddress        0xa0    // EEPROM (24C16)
 195      =1  #define TW88I2CAddress          0x8a    // TW880x
 196      =1  
 197      =1  #define MSPI2CAddress           0x80    // MSP
 198      =1  
 199      =1  //-----------------------------------------------------------------------------
 200      =1  //              Options for Possible Inputs
 201      =1  //-----------------------------------------------------------------------------
 202      =1  #define         AWT
 203      =1  //#define       E_Wintek 
 204      =1  //#define SUPPORT_SVIDEO                     //andy Awt 20090914
 205      =1  //#define SUPPORT_COMPONENT                     // support component analog to decoder//andy Awt 20090914
 206      =1  
 207      =1  //#define SUPPORT_DTV                           // support DTV input through component( to ADC ).//andy Awt 20090914
 208      =1  #define SUPPORT_PC                              // support PC function
 209      =1  //#define SUPPORT_DVI                           // support DVI input
 210      =1  #define SUPPORT_SDCARD
 211      =1  
 212      =1  //#define SUPPORT_RS485
 213      =1  
 214      =1  //-----------------------------------------------------------------------------
 215      =1  //              Options for Possible Standards
 216      =1  //              Default:NTSC
 217      =1  //-----------------------------------------------------------------------------
 218      =1  #define SUPPORT_PAL                     
 219      =1  #define SUPPORT_SECAM
 220      =1  #define SUPPORT_NTSC4           
 221      =1  #define SUPPORT_PALM    
 222      =1  #define SUPPORT_PALN            
 223      =1  #define SUPPORT_PAL60           
 224      =1  
 225      =1  
 226      =1  //#define ID_CHECK_BY_FW                        // in Video mode, check input system ID by firmware
 227      =1  
 228      =1  //-----------------------------------------------------------------------------
 229      =1  //              Options for Debugging/Release
 230      =1  //-----------------------------------------------------------------------------
 231      =1  //#define SUPPORT_PATTERN                       // support LCD test pattern
 232      =1  
 233      =1  
 234      =1  #ifndef WQVGA
 235      =1          #ifndef QVGA
 236      =1  #define SUPPORT_OSDPOSITIONMOVE
 237      =1          #endif
 238      =1  #endif
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 5   

 239      =1  
 240      =1  #define SERIAL                                  // include serial communication routines
 241      =1  
 242      =1  //#define SUPPORT_DEBUG                         // Support to use Read & Write in debug OSD Window by remocon.
 243      =1  
 244      =1  //#define DEBUG                                         // include debug information
 245      =1  #ifdef DEBUG
           =1         //#define DEBUG_MAIN
           =1         //#define DEBUG_TIME
           =1         //#define DEBUG_KEYREMO
           =1         //#define DEBUG_TW88
           =1         //#define DEBUG_DECODER
           =1         //#define DEBUG_I2C
           =1         //#define DEBUG_EEP
           =1         //#define DEBUG_OSD
           =1         //#define DEBUG_AUDIO
           =1         //#define DEBUG_SETPANEL
           =1         //#define DEBUG_DTV
           =1         #define DEBUG_PC
           =1         //#define DEBUG_PC_MEAS
           =1         #define DEBUG_PC_COLOR
           =1         //#define DEBUG_COMPONENT
           =1         //#define DEBUG_BANK
           =1         //#define DEBUG_PAUSE
           =1         //#define DEBUG_MCU
           =1 #endif
 265      =1  
 266      =1  #define AUTOCALC_PC                                     // in PC mode, Enable Auto Calcuration
 267      =1  //#define SUPPORT_USERCOLORFROMTXT      // Use color setting of text file in Color mode=USER MODE which is as B
             -rightness(Reg10), Contast(Reg11),
 268      =1                                                                          //    Sat_U(Reg13),Sat_V(Reg14),Sharpness(Reg12,Reg78)                                                                  
 269      =1  //#define SUPPORT_GAMMA
 270      =1  
 271      =1  //#define CHIP_MANUAL_TEST                      // DIPSW#1
 272      =1  
 273      =1  #ifndef INTERNAL_MCU
 274      =1  //#define NO_INITIALIZE                         // After Power switch turn on with DIP SW4 Enable(Low), or pressed MENU button 
             -for internal MCU
 275      =1                                      //     micom works to access only I2C bus by serial command.
 276      =1  #endif
 277      =1  
 278      =1  //#define SUPPORT_KRS_OSDDEMO           // For KRS Company Demo 
 279      =1  //#define SUPPORT_LINE_OSDDEMO
 280      =1  
 281      =1  //-----------------------------------------------------------------------------
 282      =1  //              Special Features
 283      =1  //-----------------------------------------------------------------------------
 284      =1  
 285      =1  #ifndef INTERNAL_MCU
 286      =1  //#define       SUPPORT_DELTA_RGB
 287      =1  #endif
 288      =1  #define SUPPORT_SELECTKEY                       // choose the keymap of using select key or left,right key.
 289      =1  //-----------------------------------------------------------------------------
 290      =1  #endif  //__CONFIG_H__
   2          
   3          #include "reg.h"
   1      =1  //
   2      =1  //Registers.h   : Register declaration
   3      =1  //
   4      =1  
   5      =1  #ifndef __REGISTERS__
   6      =1  #define __REGISTERS__
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 6   

   7      =1  
   8      =1  #ifdef INTERNAL_MCU
           =1 /*  BYTE Registers  */
           =1 sfr P0    = 0x80;
           =1 sfr P1    = 0x90;
           =1 sfr P2    = 0xA0;
           =1 sfr P3    = 0xB0;
           =1 sfr PSW   = 0xD0;
           =1 sfr ACC   = 0xE0;
           =1 sfr B     = 0xF0;
           =1 sfr SP    = 0x81;
           =1 sfr DPL   = 0x82;
           =1 sfr DPH   = 0x83;
           =1 sfr PCON  = 0x87;
           =1 sfr TCON  = 0x88;
           =1 sfr TMOD  = 0x89;
           =1 sfr TL0   = 0x8A;
           =1 sfr TL1   = 0x8B;
           =1 sfr TH0   = 0x8C;
           =1 sfr TH1   = 0x8D;
           =1 sfr IE    = 0xA8;
           =1 sfr IP    = 0xB8;
           =1 sfr SCON  = 0x98;
           =1 sfr SBUF  = 0x99;
           =1 
           =1 //sfr P4    = 0xd8;
           =1 
           =1 /*  8052 Extensions  */
           =1 sfr EXIF  = 0x91;               // external interrupt 2,3,4,5 flags should be cleared by software
           =1 sfr T2CON = 0xC8;
           =1 sfr RCAP2L = 0xCA;
           =1 sfr RCAP2H = 0xCB;
           =1 sfr TL2   = 0xCC;
           =1 sfr TH2   = 0xCD;
           =1 sfr EICON = 0xD8;
           =1 sfr EIE   = 0xE8;
           =1 sfr EIP   = 0xF8;
           =1 
           =1 /*      TW88 Core Extension */
           =1 sfr     BANKREG         = 0x9A;
           =1 sfr     SPICONTROL      = 0x9B;
           =1 sfr     T0HIGH          = 0x9C;
           =1 sfr     T0LOW           = 0x9D;
           =1 sfr     T1HIGH          = 0x9E;
           =1 sfr     T1LOW           = 0x9F;
           =1 sfr     T2HIGH          = 0x93;
           =1 sfr     T2LOW           = 0x94;
           =1 
           =1 /*  BIT Registers  */
           =1 /*  PSW  */
           =1 sbit CY    = 0xD7;
           =1 sbit AC    = 0xD6;
           =1 sbit F0    = 0xD5;
           =1 sbit RS1   = 0xD4;
           =1 sbit RS0   = 0xD3;
           =1 sbit OV    = 0xD2;
           =1 sbit P     = 0xD0;
           =1 
           =1 /*  TCON  */
           =1 sbit TF1   = 0x8F;
           =1 sbit TR1   = 0x8E;
           =1 sbit TF0   = 0x8D;
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 7   

           =1 sbit TR0   = 0x8C;
           =1 sbit IE1   = 0x8B;
           =1 sbit IT1   = 0x8A;
           =1 sbit IE0   = 0x89;
           =1 sbit IT0   = 0x88;
           =1 
           =1 /*  IE  */
           =1 sbit EA    = 0xAF;
           =1 sbit ES    = 0xAC;
           =1 sbit ET1   = 0xAB;
           =1 sbit EX1   = 0xAA;
           =1 sbit ET0   = 0xA9;
           =1 sbit EX0   = 0xA8;
           =1 
           =1 /*  EIE  */
           =1 sbit EWDI  = 0xEC;              // Watch dog timer interrupt enable
           =1 sbit EX5   = 0xEB;              // external interrupt 5 enable
           =1 sbit EX4   = 0xEA;              // external interrupt 4 enable
           =1 sbit EX3   = 0xE9;              // external interrupt 3 enable
           =1 sbit EX2   = 0xE8;              // external interrupt 2 enable
           =1 
           =1 /*  IP  */
           =1 sbit PS    = 0xBC;
           =1 sbit PT1   = 0xBB;
           =1 sbit PX1   = 0xBA;
           =1 sbit PT0   = 0xB9;
           =1 sbit PX0   = 0xB8;
           =1 
           =1 /*  EIP  */
           =1 sbit PWDI  = 0xFC;              // Watch dog timer interrupt priority
           =1 sbit PX5   = 0xFB;              // external interrupt5 priority
           =1 sbit PX4   = 0xFA;              // external interrupt4 priority
           =1 sbit PX3   = 0xF9;              // external interrupt3 priority
           =1 sbit PX2   = 0xF8;              // external interrupt2 priority
           =1 
           =1 /*  P3  */
           =1 sbit RD    = 0xB7;
           =1 sbit WR    = 0xB6;
           =1 sbit T1    = 0xB5;
           =1 sbit T0    = 0xB4;
           =1 sbit INT1  = 0xB3;
           =1 sbit INT0  = 0xB2;
           =1 sbit TXD   = 0xB1;
           =1 sbit RXD   = 0xB0;
           =1 
           =1 /*  SCON  */
           =1 sbit SM0   = 0x9F;
           =1 sbit SM1   = 0x9E;
           =1 sbit SM2   = 0x9D;
           =1 sbit REN   = 0x9C;
           =1 sbit TB8   = 0x9B;
           =1 sbit RB8   = 0x9A;
           =1 sbit TI    = 0x99;
           =1 sbit RI    = 0x98;
           =1 
           =1 /*  8052 Extensions  */
           =1 /*  IE  */
           =1 sbit ET2   = 0xAD;
           =1 
           =1 /*  IP  */
           =1 sbit PT2   = 0xBD;
           =1 
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 8   

           =1 /*  P1  */
           =1 sbit T2EX  = 0x91;
           =1 sbit T2    = 0x90;
           =1              
           =1 /*  T2CON  */
           =1 sbit TF2   = 0xCF;
           =1 sbit EXF2  = 0xCE;
           =1 sbit RCLK  = 0xCD;
           =1 sbit TCLK  = 0xCC;
           =1 sbit EXEN2 = 0xCB;
           =1 sbit TR2   = 0xCA;
           =1 sbit C_T2  = 0xC9;
           =1 sbit CP_RL2= 0xC8;
           =1 
           =1 sfr     CHPENR = 0xF6;
           =1 sfr     CHPCON = 0xBF;
           =1 sfr     SFRAL  = 0xC4;
           =1 sfr     SFRAH  = 0xC5;
           =1 sfr     SFRFD  = 0xC6;
           =1 sfr     SFRCN  = 0xC7;
           =1 
           =1 sbit P0_0  = 0x80;
           =1 sbit P0_1  = 0x81;
           =1 sbit P0_2  = 0x82;
           =1 sbit P0_3  = 0x83;
           =1 sbit P0_4  = 0x84;
           =1 sbit P0_5  = 0x85;
           =1 sbit P0_6  = 0x86;
           =1 sbit P0_7  = 0x87;
           =1 
           =1 sbit P1_0  = 0x90;
           =1 sbit P1_1  = 0x91;
           =1 sbit P1_2  = 0x92;
           =1 sbit P1_3  = 0x93;
           =1 sbit P1_4  = 0x94;
           =1 sbit P1_5  = 0x95;
           =1 sbit P1_6  = 0x96;
           =1 sbit P1_7  = 0x97;
           =1 
           =1 sbit P2_0  = 0xa0;
           =1 sbit P2_1  = 0xa1;
           =1 sbit P2_2  = 0xa2;
           =1 sbit P2_3  = 0xa3;
           =1 sbit P2_4  = 0xa4;
           =1 sbit P2_5  = 0xa5;
           =1 sbit P2_6  = 0xa6;
           =1 sbit P2_7  = 0xa7;
           =1 
           =1 sbit P3_0  = 0xb0;
           =1 sbit P3_1  = 0xb1;
           =1 sbit P3_2  = 0xb2;
           =1 sbit P3_3  = 0xb3;
           =1 sbit P3_4  = 0xb4;
           =1 sbit P3_5  = 0xb5;
           =1 sbit P3_6  = 0xb6;
           =1 sbit P3_7  = 0xb7;
           =1 
           =1 #else   // external MCU=WINBOND
 189      =1  /*  BYTE Registers  */
 190      =1  sfr P0    = 0x80;
 191      =1  sfr P1    = 0x90;
 192      =1  sfr P2    = 0xA0;
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 9   

 193      =1  sfr P3    = 0xB0;
 194      =1  sfr PSW   = 0xD0;
 195      =1  sfr ACC   = 0xE0;
 196      =1  sfr B     = 0xF0;
 197      =1  sfr SP    = 0x81;
 198      =1  sfr DPL   = 0x82;
 199      =1  sfr DPH   = 0x83;
 200      =1  sfr PCON  = 0x87;
 201      =1  sfr TCON  = 0x88;
 202      =1  sfr TMOD  = 0x89;
 203      =1  sfr TL0   = 0x8A;
 204      =1  sfr TL1   = 0x8B;
 205      =1  sfr TH0   = 0x8C;
 206      =1  sfr TH1   = 0x8D;
 207      =1  sfr CKCON = 0x8E;               //clock control register, default =0x01
 208      =1  sfr IE    = 0xA8;
 209      =1  sfr IP    = 0xB8;
 210      =1  sfr SCON  = 0x98;
 211      =1  sfr SBUF  = 0x99;
 212      =1  sfr P4 = 0xE8; //Megawin Ryan@970716
 213      =1  //sfr P4    = 0xa5;      //SST MCU
 214      =1  //sfr P4    = 0xd8;             //winbond<960820>
 215      =1  
 216      =1  
 217      =1  /*  8052 Extensions  */
 218      =1  sfr T2CON = 0xC8;
 219      =1  sfr RCAP2L = 0xCA;
 220      =1  sfr RCAP2H = 0xCB;
 221      =1  sfr TL2   = 0xCC;
 222      =1  sfr TH2   = 0xCD;
 223      =1  
 224      =1  // for UART2
 225      =1  sfr S2CON  = 0xAA;
 226      =1  sfr S2BRT  = 0xBA;
 227      =1  sfr S2BUF  = 0x9A;
 228      =1  sfr AUXR2  = 0xA6;
 229      =1  sfr AUXIE  = 0xAD;
 230      =1  
 231      =1  
 232      =1  sfr P1M0  = 0x91;
 233      =1  sfr P1M1  = 0x92;
 234      =1  sfr P0M0  = 0x93;
 235      =1  sfr P0M1  = 0x94;
 236      =1  
 237      =1  
 238      =1  
 239      =1  // for PCA
 240      =1  sfr CCON   = 0xD8;
 241      =1  sfr CMOD   = 0xD9;
 242      =1  sfr CCAPM0 = 0xDA;
 243      =1  sfr CCAPM1 = 0xDB;
 244      =1  sfr CCAPM2 = 0xDC;
 245      =1  sfr CCAPM3 = 0xDD;
 246      =1  sfr CCAPM4 = 0xDE;
 247      =1  sfr CCAPM5 = 0xDF;
 248      =1  sfr CL     = 0xE9;
 249      =1  sfr CH     = 0xF9;
 250      =1  sfr CCAP0L = 0xEA;
 251      =1  sfr CCAP0H = 0xFA;
 252      =1  sfr CCAP1L = 0xEB;
 253      =1  sfr CCAP1H = 0xFB;
 254      =1  sfr CCAP2L = 0xEC;
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 10  

 255      =1  sfr CCAP2H = 0xFC;
 256      =1  sfr CCAP3L = 0xED;
 257      =1  sfr CCAP3H = 0xFD;
 258      =1  sfr CCAP4L = 0xEE;
 259      =1  sfr CCAP4H = 0xFE;
 260      =1  sfr CCAP5L = 0xEF;
 261      =1  sfr CCAP5H = 0xFF;
 262      =1  sfr PCAPWM0= 0xF2;
 263      =1  sfr PCAPWM1= 0xF3;
 264      =1  sfr PCAPWM2= 0xF4;
 265      =1  sfr PCAPWM3= 0xF5;
 266      =1  sfr PCAPWM4= 0xF6;
 267      =1  sfr PCAPWM5= 0xF7;
 268      =1  
 269      =1  /*  BIT Registers  */
 270      =1  /*  PSW  */
 271      =1  sbit CY    = 0xD7;
 272      =1  sbit AC    = 0xD6;
 273      =1  sbit F0    = 0xD5;
 274      =1  sbit RS1   = 0xD4;
 275      =1  sbit RS0   = 0xD3;
 276      =1  sbit OV    = 0xD2;
 277      =1  sbit P     = 0xD0;
 278      =1  
 279      =1  /*  TCON  */
 280      =1  sbit TF1   = 0x8F;
 281      =1  sbit TR1   = 0x8E;
 282      =1  sbit TF0   = 0x8D;
 283      =1  sbit TR0   = 0x8C;
 284      =1  sbit IE1   = 0x8B;
 285      =1  sbit IT1   = 0x8A;
 286      =1  sbit IE0   = 0x89;
 287      =1  sbit IT0   = 0x88;
 288      =1  
 289      =1  /*  IE  */
 290      =1  sbit EA    = 0xAF;
 291      =1  sbit ES    = 0xAC;
 292      =1  sbit ET1   = 0xAB;
 293      =1  sbit EX1   = 0xAA;
 294      =1  sbit ET0   = 0xA9;
 295      =1  sbit EX0   = 0xA8;
 296      =1  
 297      =1  /*  IP  */
 298      =1  sbit PS    = 0xBC;
 299      =1  sbit PT1   = 0xBB;
 300      =1  sbit PX1   = 0xBA;
 301      =1  sbit PT0   = 0xB9;
 302      =1  sbit PX0   = 0xB8;
 303      =1  
 304      =1  /*  P3  */
 305      =1  sbit RD    = 0xB7;
 306      =1  sbit WR    = 0xB6;
 307      =1  sbit T1    = 0xB5;
 308      =1  sbit T0    = 0xB4;
 309      =1  sbit INT1  = 0xB3;
 310      =1  sbit INT0  = 0xB2;
 311      =1  sbit TXD   = 0xB1;
 312      =1  sbit RXD   = 0xB0;
 313      =1  
 314      =1  /*  SCON  */
 315      =1  sbit SM0   = 0x9F;
 316      =1  sbit SM1   = 0x9E;
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 11  

 317      =1  sbit SM2   = 0x9D;
 318      =1  sbit REN   = 0x9C;
 319      =1  sbit TB8   = 0x9B;
 320      =1  sbit RB8   = 0x9A;
 321      =1  sbit TI    = 0x99;
 322      =1  sbit RI    = 0x98;
 323      =1  
 324      =1  /*  8052 Extensions  */
 325      =1  /*  IE  */
 326      =1  sbit ET2   = 0xAD;
 327      =1  
 328      =1  /*  IP  */
 329      =1  sbit PT2   = 0xBD;
 330      =1  
 331      =1  /*  P1  */
 332      =1  sbit T2EX  = 0x91;
 333      =1  sbit T2    = 0x90;
 334      =1               
 335      =1  /*  T2CON  */
 336      =1  sbit TF2   = 0xCF;
 337      =1  sbit EXF2  = 0xCE;
 338      =1  sbit RCLK  = 0xCD;
 339      =1  sbit TCLK  = 0xCC;
 340      =1  sbit EXEN2 = 0xCB;
 341      =1  sbit TR2   = 0xCA;
 342      =1  sbit C_T2  = 0xC9;
 343      =1  sbit CP_RL2= 0xC8;
 344      =1  
 345      =1  sfr     CHPENR = 0xF6;
 346      =1  sfr     CHPCON = 0xBF;
 347      =1  sfr     SFRAL  = 0xC4;
 348      =1  sfr     SFRAH  = 0xC5;
 349      =1  sfr     SFRFD  = 0xC6;
 350      =1  sfr     SFRCN  = 0xC7;
 351      =1  
 352      =1  sbit P0_0  = 0x80;
 353      =1  sbit P0_1  = 0x81;
 354      =1  sbit P0_2  = 0x82;
 355      =1  sbit P0_3  = 0x83;
 356      =1  sbit P0_4  = 0x84;
 357      =1  sbit P0_5  = 0x85;
 358      =1  sbit P0_6  = 0x86;
 359      =1  sbit P0_7  = 0x87;
 360      =1  
 361      =1  sbit P1_0  = 0x90;
 362      =1  sbit P1_1  = 0x91;
 363      =1  sbit P1_2  = 0x92;
 364      =1  sbit P1_3  = 0x93;
 365      =1  sbit P1_4  = 0x94;
 366      =1  sbit P1_5  = 0x95;
 367      =1  sbit P1_6  = 0x96;
 368      =1  sbit P1_7  = 0x97;
 369      =1  
 370      =1  sbit P2_0  = 0xa0;
 371      =1  sbit P2_1  = 0xa1;
 372      =1  sbit P2_2  = 0xa2;
 373      =1  sbit P2_3  = 0xa3;
 374      =1  sbit P2_4  = 0xa4;
 375      =1  sbit P2_5  = 0xa5;
 376      =1  sbit P2_6  = 0xa6;
 377      =1  sbit P2_7  = 0xa7;
 378      =1  
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 12  

 379      =1  sbit P3_0  = 0xb0;
 380      =1  sbit P3_1  = 0xb1;
 381      =1  sbit P3_2  = 0xb2;
 382      =1  sbit P3_3  = 0xb3;
 383      =1  sbit P3_4  = 0xb4;
 384      =1  sbit P3_5  = 0xb5;
 385      =1  sbit P3_6  = 0xb6;
 386      =1  sbit P3_7  = 0xb7;
 387      =1  
 388      =1  sbit P4_0  = P4^0;
 389      =1  sbit P4_1  = P4^1;
 390      =1  sbit INT3  = P4^2;
 391      =1  sbit INT2  = P4^3;
 392      =1  #endif  // INTERNAL_MCU
 393      =1  
 394      =1  #endif  //__REGISTERS__
   4          #include "typedefs.h"
   1      =1  #ifndef __TYPEDEFS__
   2      =1  #define __TYPEDEFS__
   3      =1  
   4      =1  
   5      =1  #define DATA            data
   6      =1  #define PDATA           pdata
   7      =1  #define IDATA           data
   8      =1  #define CODE            code
   9      =1  #define CODE_P
  10      =1  #define PDATA_P
  11      =1  #define IDATA_P
  12      =1  #define DATA_P
  13      =1  
  14      =1  #define INTERRUPT( num, name ) name() interrupt num
  15      =1  
  16      =1  #define _between(x, a, b)       (a<=x && x<=b)
  17      =1  #define _swap(a, b)                     { a^=b; b^=a; a^=b; }
  18      =1  
  19      =1  typedef unsigned char   Register;
  20      =1  typedef unsigned char   BYTE;
  21      =1  typedef unsigned short  WORD;
  22      =1  typedef unsigned long   DWORD;
  23      =1  
  24      =1  #define TRUE    1
  25      =1  #define FALSE   0
  26      =1  
  27      =1  //VInputStdDetectMode
  28      =1  #define AUTO    0
  29      =1  
  30      =1  //VInputStd
  31      =1  #define NTSC    1                       
  32      =1  #define PAL             2
  33      =1  #define SECAM   3
  34      =1  #define NTSC4   4
  35      =1  #define PALM    5
  36      =1  #define PALN    6
  37      =1  #define PAL60   7
  38      =1  
  39      =1  #define MAXINPUTSTD     PAL60+1 // 
  40      =1  
  41      =1  #define UNKNOWN 0xfe
  42      =1  #define NOINPUT 0       //0xff
  43      =1  
  44      =1  
  45      =1  
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 13  

  46      =1  
  47      =1  #define NIL                     0xff
  48      =1  
  49      =1  enum SourceModeTypeEnum
  50      =1  {       
  51      =1          AVMode,            // 0
  52      =1          VGAMode,       // 1
  53      =1          CAM_D,         // 2
  54      =1          CAM_A,         // 3
  55      =1          CAM_B,         // 4
  56      =1          CAM_C,         // 5
  57      =1          CAM_R,         // 6
  58      =1          CAM_AB,        // 7
  59      =1          CAM_CR,        // 8
  60      =1          CAM_AR,        // 9
  61      =1          CAM_RB,        // 10
  62      =1          CAM_AC,        // 11
  63      =1          CAM_CB,        // 12
  64      =1          CAM_RAB_T,     // 13
  65      =1          CAM_RAB_H,     // 14
  66      =1  
  67      =1          CAM_QUAD,      // 15
  68      =1          CAM_ABR_T3,    // 16
  69      =1          CAM_ABR_T4,    // 17
  70      =1          SEQ,           // 18
  71      =1          CAM_BA,                 //19
  72      =1          
  73      =1          CAM_BC,
  74      =1          CAM_BR,
  75      =1          CAM_CA,
  76      =1          CAM_ABC,
  77      =1          CAM_ABR,
  78      =1          CAM_ACR,
  79      =1          CAM_BAC,
  80      =1          CAM_BAR,
  81      =1          CAM_BCR,
  82      =1          CAM_CAB,
  83      =1          CAM_CAR,
  84      =1          CAM_CBR,        
  85      =1          CAM_NUM
  86      =1  };
  87      =1  
  88      =1  typedef unsigned char SourceModeType;
  89      =1  
  90      =1  #endif  /* __TYPEDEFS__ */
   5          #include "i2c.h"
   1      =1  #ifndef __I2C_H__
   2      =1  #define __I2C_H__
   3      =1  
   4      =1  
   5      =1  void I2CReadByte3(BYTE *);
   6      =1  void I2CRead8Byte(BYTE *);
   7      =1  #if 0
           =1 void I2CReadByteMSP(BYTE addr, BYTE index, BYTE *pd, BYTE cnt);
           =1 #endif
  10      =1  BYTE I2CWriteByte2(BYTE);
  11      =1  BYTE I2CWriteByte3(BYTE*);
  12      =1  BYTE I2CWrite8Byte(BYTE *);
  13      =1  
  14      =1  void I2CStart(void);
  15      =1  void I2CWriteData(BYTE value);
  16      =1  BYTE I2CReadData(void);
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 14  

  17      =1  #if 0
           =1 BYTE I2CReadDataWithACK(void);
           =1 #endif
  20      =1  void I2CStop(void);
  21      =1  void I2Cdelay(void);
  22      =1  
  23      =1  
  24      =1  #define WriteTW88(a,b)          WriteI2C(TW88I2CAddress, a, b)
  25      =1  #define ReadTW88(a)                     ReadI2C(TW88I2CAddress, a)
  26      =1  
  27      =1  BYTE WriteTW88_Wait     (BYTE, BYTE);
  28      =1  void WriteADC           (BYTE, BYTE);
  29      =1  BYTE ReadADC            (BYTE);
  30      =1  BYTE ReadADC_TW88(BYTE index);
  31      =1  void WriteADC_TW88(BYTE index, BYTE dat);
  32      =1  
  33      =1  void WriteEEP           (WORD, BYTE);
  34      =1  BYTE ReadEEP            (WORD);
  35      =1  
  36      =1  
  37      =1  BYTE ReadI2C            (BYTE addr, BYTE index);
  38      =1  void WriteI2C           (BYTE addr, BYTE index, BYTE val);
  39      =1  
  40      =1  void WriteI2Cn_(BYTE addr, BYTE *val, BYTE cnt);
  41      =1  void WriteI2Cn (BYTE addr, BYTE index, BYTE *val, BYTE cnt);
  42      =1  void WriteI2CnD(BYTE addr, BYTE index, BYTE val, BYTE cnt);
  43      =1  
  44      =1  void ReadI2Cmn(BYTE addr, BYTE wcnt, BYTE rcnt, BYTE *rwdata);
  45      =1  
  46      =1  #define         WriteADC(a,b)   WriteADC_TW88(a,b)
  47      =1  #define         ReadADC(a)              ReadADC_TW88(a)
  48      =1  
  49      =1  #endif  /* __I2C_H__ */
   6          #include "main.h"
   1      =1  #ifndef __MAIN__
   2      =1  #define __MAIN__
   3      =1  
   4      =1  #define ON                                      1
   5      =1  #define OFF                                     0
   6      =1  //#define Hs_debug
   7      =1  //#define       DVR
   8      =1  
   9      =1  //================= DIP SW Definition =========================================
  10      =1  ///#define PIXEL_SINGLE         P0_0
  11      =1  #define DIP_PANEL_SWITCH        P0_0    // Samsung(0) // Sharp-Noticon(1)
  12      =1  #define DIP_AUTO_DETECT         P0_1
  13      =1  #define DIP_EDGE_ENHANCE        P0_2
  14      =1  #define DIP_BW_STRETCH          P0_3
  15      =1  
  16      =1  #define Panel_Enable()          P4=P4|0x08 //andy 980908
  17      =1  #define Panel_Disable()                 P4=P4&0xf7
  18      =1  
  19      =1  #define SetBacklight()      P4=P4|0x04
  20      =1  #define clrBacklight()      P4=P4&0xfb
  21      =1  
  22      =1  
  23      =1  //InputSelection
  24      =1  struct struct_IdName {
  25      =1          BYTE    Id;
  26      =1          BYTE    Name[16];
  27      =1  };
  28      =1  
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 15  

  29      =1  #define CH_TW2835              1
  30      =1  #define CH_CAMD                2
  31      =1  #define CH_AV                  3
  32      =1  #define PC                                         7
  33      =1  #define ChineseDefaultMenu   8
  34      =1  
  35      =1  #define SVIDEO                          2
  36      =1  #define COMPONENT                       3
  37      =1  //#define ANALOGDTV                     4
  38      =1  #define DTV                                     4
  39      =1  #define TV                                      5
  40      =1  #define SCART                           6
  41      =1  
  42      =1  #define DIGITALVGA                      8
  43      =1  
  44      =1  #define AIRTV                           0 //9
  45      =1  #define CABLETV                         1 //0xa
  46      =1  
  47      =1  
  48      =1  #define TVTUNER                         0xd             //10
  49      =1  #define MUTE                            1       
  50      =1  #define MENU                            2       
  51      =1  #define TVVOL                           4       
  52      =1  #define CC                                      8       
  53      =1  #define INPUTINFO                       0x10
  54      =1  #define PCINFO                          0x20
  55      =1  #define GAUGEINFO           0x40
  56      =1  //#define RATINGINFO                    0x40
  57      =1  #define TVCHN                           0x80
  58      =1  //#define MUTE                          0x40
  59      =1  
  60      =1  #define YPBPR_480i                      0
  61      =1  #define YPBPR_576i                      1
  62      =1  #define YPBPR_480p                      2
  63      =1  #define YPBPR_576p                      3
  64      =1  #define YPBPR_1080i                     4
  65      =1  #define YPBPR_720p                      5
  66      =1  #define YPBPR_720p50            6
  67      =1  
  68      =1  
  69      =1  //--------------------------- P0 Define -----------------------------
  70      =1  #define SEL_MIX                 P0_6    // 
  71      =1  //--------------------------- P1 Define -----------------------------
  72      =1  #define SEL_DVI                 P3_5    //LJY062001             
  73      =1  
  74      =1  #define TW88HWReset                     P3_4    //LJY001010 //LJY000721
  75      =1  #define PowerUp             P1_4
  76      =1  //======================= CDS Control ================================= 
  77      =1  #define CDS_CTRL           P1_5
  78      =1  extern BYTE     SelectModeType;
  79      =1  extern BYTE InputSelection;
  80      =1  extern BYTE SEQTime;
  81      =1  extern BYTE     Priority;
  82      =1  extern BYTE AutoDayNight;
  83      =1  extern BYTE PowerFlag;
  84      =1  
  85      =1  BYTE keyIn(void);
  86      =1  void TimerForRemocon(void);
  87      =1  void TimerForTick(void);
  88      =1  void DisableRemoconInt(void);
  89      =1  BYTE SetSupport_remocon(BYTE newd);
  90      =1  
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 16  

  91      =1  void delay(BYTE cnt);
  92      =1  
  93      =1  BYTE RS_ready(void);
  94      =1  BYTE RS_rx(void);
  95      =1  void RS_tx(BYTE tx_buf);
  96      =1  
  97      =1  BYTE RS2_rx(void);
  98      =1  void RS2_tx(BYTE tx_buf);
  99      =1  
 100      =1  void NewLine(void);
 101      =1  void PutsP(PDATA_P BYTE *ptr);
 102      =1  #ifdef Hs_debug
           =1 void MonWriteI2C(BYTE addr, BYTE index, BYTE val);
           =1 BYTE MonReadI2C(BYTE addr, BYTE index);
           =1 #endif
 106      =1  BYTE Asc1Bin(BYTE asc);
 107      =1  BYTE Asc2Bin(PDATA_P BYTE *s);
 108      =1  
 109      =1  void I2CDeviceInitialize( CODE_P BYTE *RegSet);
 110      =1  
 111      =1  //void RestartSystemClock(WORD clock_hm);
 112      =1  WORD GetTime_ms(void);
 113      =1  BYTE GetTime_H(void);
 114      =1  BYTE GetTime_M(void);
 115      =1  void ChangeTime_H( char add );
 116      =1  void ChangeTime_M( char add );
 117      =1  //WORD GetWakeupTime(void);
 118      =1  //void SetWakeupTime(WORD wtime);
 119      =1  
 120      =1  
 121      =1  //WORD GetOffTime(void);
 122      =1  //void SetOffTime(WORD wtime);
 123      =1  //BYTE GetSleepTimer(void);
 124      =1  //void SetSleepTimer(BYTE stime);
 125      =1  WORD DiffTime_ms( WORD stime, WORD etime );
 126      =1  //void SetLastBlockedTime(void);
 127      =1  void SetLastCCTime(void);                               //ljy010904...CC_FIX_CLEAR_ON_TIME
 128      =1  
 129      =1  void SetOSDLastKeyInTime(void);
 130      =1  WORD GetOSDLastKeyInTime(void);
 131      =1  WORD GetIVF(void);
 132      =1  DWORD GetIHF(void);
 133      =1  BYTE ReadVInputSTD(void);
 134      =1  void SetVInputStd(BYTE newd);
 135      =1  BYTE GetVInputStd(void);
 136      =1  BYTE GetInputSelection(void);
 137      =1  #ifdef ADD_ANALOGPANEL
           =1 BYTE IsAnalogOn(void);
           =1 #endif
 140      =1  void InitVideoData(BYTE src);
 141      =1  void ChangeVInputStdDetectMode(BYTE val);
 142      =1  BYTE GetVInputStdInx(void);
 143      =1  
 144      =1  void MonWriteI2Cn_(BYTE addr, BYTE *val, BYTE cnt) ;
 145      =1  
 146      =1  ///void Usage(void);
 147      =1  #ifdef Hs_debug
           =1         void Prompt(void);
           =1 #endif
 150      =1  void DebugKeyIn(BYTE ikey);
 151      =1  void DVIPowerDown(bit flag);
 152      =1  void PowerDown_XTAL(bit flag);
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 17  

 153      =1  
 154      =1  void ChangeInput(BYTE newsel);
 155      =1  
 156      =1  
 157      =1  void WaitPowerOn(void);
 158      =1  void PowerOff(void);
 159      =1  BYTE GetNextInputSelection(void);
 160      =1  
 161      =1  BYTE WantToStopTVScan(void);
 162      =1  
 163      =1  //BYTE IsTW8801(void);
 164      =1  //BYTE IsTW8803(void);
 165      =1  //BYTE ConvertVideoVSAT(BYTE reg);
 166      =1  
 167      =1  BYTE IsNoInput(void);
 168      =1  void LoadEEPROM (void);
 169      =1  void Hs_InitVars(void);
 170      =1  void AdjustAutoDayNight(BYTE val);
 171      =1  void ACCPowerControl(void);
 172      =1  struct RegisterInfo
 173      =1  {
 174      =1     int  Min;
 175      =1     int  Max;
 176      =1     int  Default;
 177      =1  };
 178      =1  struct LongRegisterInfo
 179      =1  {
 180      =1     WORD Min;
 181      =1     WORD Max;
 182      =1     WORD Default;
 183      =1  };
 184      =1  
 185      =1  #endif  // __MAIN__
   7          #include "tw88.h"
   1      =1  #ifndef __TW88__
   2      =1  #define __TW88__
   3      =1  
   4      =1  #include "main.h"
   1      =2  #ifndef __MAIN__
           =2 #define __MAIN__
           =2 
           =2 #define ON                                      1
           =2 #define OFF                                     0
           =2 //#define Hs_debug
           =2 //#define       DVR
           =2 
           =2 //================= DIP SW Definition =========================================
           =2 ///#define PIXEL_SINGLE         P0_0
           =2 #define DIP_PANEL_SWITCH        P0_0    // Samsung(0) // Sharp-Noticon(1)
           =2 #define DIP_AUTO_DETECT         P0_1
           =2 #define DIP_EDGE_ENHANCE        P0_2
           =2 #define DIP_BW_STRETCH          P0_3
           =2 
           =2 #define Panel_Enable()          P4=P4|0x08 //andy 980908
           =2 #define Panel_Disable()                 P4=P4&0xf7
           =2 
           =2 #define SetBacklight()      P4=P4|0x04
           =2 #define clrBacklight()      P4=P4&0xfb
           =2 
           =2 
           =2 //InputSelection
           =2 struct struct_IdName {
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 18  

           =2         BYTE    Id;
           =2         BYTE    Name[16];
           =2 };
           =2 
           =2 #define CH_TW2835              1
           =2 #define CH_CAMD                2
           =2 #define CH_AV                  3
           =2 #define PC                                         7
           =2 #define ChineseDefaultMenu   8
           =2 
           =2 #define SVIDEO                          2
           =2 #define COMPONENT                       3
           =2 //#define ANALOGDTV                     4
           =2 #define DTV                                     4
           =2 #define TV                                      5
           =2 #define SCART                           6
           =2 
           =2 #define DIGITALVGA                      8
           =2 
           =2 #define AIRTV                           0 //9
           =2 #define CABLETV                         1 //0xa
           =2 
           =2 
           =2 #define TVTUNER                         0xd             //10
           =2 #define MUTE                            1       
           =2 #define MENU                            2       
           =2 #define TVVOL                           4       
           =2 #define CC                                      8       
           =2 #define INPUTINFO                       0x10
           =2 #define PCINFO                          0x20
           =2 #define GAUGEINFO           0x40
           =2 //#define RATINGINFO                    0x40
           =2 #define TVCHN                           0x80
           =2 //#define MUTE                          0x40
           =2 
           =2 #define YPBPR_480i                      0
           =2 #define YPBPR_576i                      1
           =2 #define YPBPR_480p                      2
           =2 #define YPBPR_576p                      3
           =2 #define YPBPR_1080i                     4
           =2 #define YPBPR_720p                      5
           =2 #define YPBPR_720p50            6
           =2 
           =2 
           =2 //--------------------------- P0 Define -----------------------------
           =2 #define SEL_MIX                 P0_6    // 
           =2 //--------------------------- P1 Define -----------------------------
           =2 #define SEL_DVI                 P3_5    //LJY062001             
           =2 
           =2 #define TW88HWReset                     P3_4    //LJY001010 //LJY000721
           =2 #define PowerUp             P1_4
           =2 //======================= CDS Control ================================= 
           =2 #define CDS_CTRL           P1_5
           =2 extern BYTE     SelectModeType;
           =2 extern BYTE InputSelection;
           =2 extern BYTE SEQTime;
           =2 extern BYTE     Priority;
           =2 extern BYTE AutoDayNight;
           =2 extern BYTE PowerFlag;
           =2 
           =2 BYTE keyIn(void);
           =2 void TimerForRemocon(void);
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 19  

           =2 void TimerForTick(void);
           =2 void DisableRemoconInt(void);
           =2 BYTE SetSupport_remocon(BYTE newd);
           =2 
           =2 void delay(BYTE cnt);
           =2 
           =2 BYTE RS_ready(void);
           =2 BYTE RS_rx(void);
           =2 void RS_tx(BYTE tx_buf);
           =2 
           =2 BYTE RS2_rx(void);
           =2 void RS2_tx(BYTE tx_buf);
           =2 
           =2 void NewLine(void);
           =2 void PutsP(PDATA_P BYTE *ptr);
           =2 #ifdef Hs_debug
           =2 void MonWriteI2C(BYTE addr, BYTE index, BYTE val);
           =2 BYTE MonReadI2C(BYTE addr, BYTE index);
           =2 #endif
           =2 BYTE Asc1Bin(BYTE asc);
           =2 BYTE Asc2Bin(PDATA_P BYTE *s);
           =2 
           =2 void I2CDeviceInitialize( CODE_P BYTE *RegSet);
           =2 
           =2 //void RestartSystemClock(WORD clock_hm);
           =2 WORD GetTime_ms(void);
           =2 BYTE GetTime_H(void);
           =2 BYTE GetTime_M(void);
           =2 void ChangeTime_H( char add );
           =2 void ChangeTime_M( char add );
           =2 //WORD GetWakeupTime(void);
           =2 //void SetWakeupTime(WORD wtime);
           =2 
           =2 
           =2 //WORD GetOffTime(void);
           =2 //void SetOffTime(WORD wtime);
           =2 //BYTE GetSleepTimer(void);
           =2 //void SetSleepTimer(BYTE stime);
           =2 WORD DiffTime_ms( WORD stime, WORD etime );
           =2 //void SetLastBlockedTime(void);
           =2 void SetLastCCTime(void);                               //ljy010904...CC_FIX_CLEAR_ON_TIME
           =2 
           =2 void SetOSDLastKeyInTime(void);
           =2 WORD GetOSDLastKeyInTime(void);
           =2 WORD GetIVF(void);
           =2 DWORD GetIHF(void);
           =2 BYTE ReadVInputSTD(void);
           =2 void SetVInputStd(BYTE newd);
           =2 BYTE GetVInputStd(void);
           =2 BYTE GetInputSelection(void);
           =2 #ifdef ADD_ANALOGPANEL
           =2 BYTE IsAnalogOn(void);
           =2 #endif
           =2 void InitVideoData(BYTE src);
           =2 void ChangeVInputStdDetectMode(BYTE val);
           =2 BYTE GetVInputStdInx(void);
           =2 
           =2 void MonWriteI2Cn_(BYTE addr, BYTE *val, BYTE cnt) ;
           =2 
           =2 ///void Usage(void);
           =2 #ifdef Hs_debug
           =2         void Prompt(void);
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 20  

           =2 #endif
           =2 void DebugKeyIn(BYTE ikey);
           =2 void DVIPowerDown(bit flag);
           =2 void PowerDown_XTAL(bit flag);
           =2 
           =2 void ChangeInput(BYTE newsel);
           =2 
           =2 
           =2 void WaitPowerOn(void);
           =2 void PowerOff(void);
           =2 BYTE GetNextInputSelection(void);
           =2 
           =2 BYTE WantToStopTVScan(void);
           =2 
           =2 //BYTE IsTW8801(void);
           =2 //BYTE IsTW8803(void);
           =2 //BYTE ConvertVideoVSAT(BYTE reg);
           =2 
           =2 BYTE IsNoInput(void);
           =2 void LoadEEPROM (void);
           =2 void Hs_InitVars(void);
           =2 void AdjustAutoDayNight(BYTE val);
           =2 void ACCPowerControl(void);
           =2 struct RegisterInfo
           =2 {
           =2    int  Min;
           =2    int  Max;
           =2    int  Default;
           =2 };
           =2 struct LongRegisterInfo
           =2 {
           =2    WORD Min;
           =2    WORD Max;
           =2    WORD Default;
           =2 };
           =2 
           =2 #endif  // __MAIN__
   5      =1  
   6      =1  //Value for register 0x44
   7      =1  //#define DECODER_YCbCr         0x08            //xxxx bbxx
   8      =1  //#define RGB_RGB                               0x0C
   9      =1  
  10      =1  #define TW88_FPLL0                      0xf9
  11      =1  #define TW88_FPLL1                      0xfa
  12      =1  #define TW88_FPLL2                      0xfb
  13      =1  #define TW88_FSS                        0xfc
  14      =1  #define TW88_FSS_PD                     0xfd
  15      =1  #define TW88_PLL_DIV            0xfe
  16      =1  
  17      =1  //#define TW88_XSCALE                   0x5d
  18      =1  //#define TW88_YSCALE                   0x5e
  19      =1  
  20      =1  #define TW88_XUSCALELO          0x60
  21      =1  #define TW88_XDSCALELO          0x61
  22      =1  #define TW88_YUSCALELO          0x62
  23      =1  #define TW88_XYSCALEHI          0x63
  24      =1  #define TW88_XUSCALEFINE        0x69
  25      =1  #define TW88_YUSCALEFINE        0x6a
  26      =1  
  27      =1  //Power Mgt
  28      =1  #define POWER_OFF                       0
  29      =1  #define POWER_STANDBY           1
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 21  

  30      =1  #define POWER_SUSPEND           2
  31      =1  #define POWER_ON                        3
  32      =1  
  33      =1  //void TWChipsDetect(void);
  34      =1  void SetAutoDetectStd(void);
  35      =1  void ClearAutoDetectStd(BYTE);
  36      =1  void I2CDeviceInitialize( CODE_P BYTE *RegSet);
  37      =1  
  38      =1  
  39      =1  //0x63.. Register Group
  40      =1  #define GROUP_YCbCr                     0x40
  41      =1  #define GROUP_RGB                       0
  42      =1  #define SelectPanelAttrRegGroup(A)                              WriteTW88(0x70, (ReadTW88(0x70) & 0xbf) | A)
  43      =1  
  44      =1  //#if defined TW8801 || defined TW8803
  45      =1  #define FB_MAIN         2
  46      =1  #define FB_NORMAL       1
  47      =1  #define FB_RGB          0
  48      =1  //void SetFBmode( BYTE mode );
  49      =1  //#endif // TW8801
  50      =1  
  51      =1  
  52      =1  //=============================================================================
  53      =1  //                                   LCD Functions   
  54      =1  //=============================================================================
  55      =1  BYTE GetLCDPowerState(void);
  56      =1  void SetLCDPowerState(BYTE dat);
  57      =1  
  58      =1  BYTE IsFreeRun(void);
  59      =1  void PanelFreeRun(BYTE on);
  60      =1  void PanelBlack(BYTE on);
  61      =1  
  62      =1  void PanelMute(BYTE on);
  63      =1  
  64      =1  void LCDPowerON(BYTE mute); 
  65      =1  void LCDPowerOFF(void);
  66      =1  #ifdef Hs_debug
           =1 void LCDPower(void);
           =1 #endif
  69      =1  void DPMSmodeOFF(void);
  70      =1  void DPMSmodeON(void);
  71      =1  //=============================================================================
  72      =1  //                              Get PC Parameter Functions   
  73      =1  //=============================================================================
  74      =1  void GetInitPanelAttribute1(void);
  75      =1  //void GetInitPanelAttribute2(void);
  76      =1  void DefaultPanelAttributeForVideo(void);
  77      =1  void SetPVR(WORD pvr);
  78      =1  void SetPHR(WORD phr);
  79      =1  WORD GetPVR(void);
  80      =1  WORD GetPHR(void);
  81      =1  WORD GetHPN(void);
  82      =1  WORD GetVPN(void);
  83      =1  
  84      =1  //WORD GetVactive(void);
  85      =1  
  86      =1  WORD GetHstart(void);
  87      =1  WORD GetHend(void);
  88      =1  WORD GetVstart(void);
  89      =1  WORD GetVend(void);
  90      =1  void TuneLineBuffer(BYTE field);
  91      =1  void TuneLineBuffer4Video(BYTE field);
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 22  

  92      =1  
  93      =1  #if defined (SUPPORT_DTV)
           =1 void SetCoarstForDTV(BYTE en);
           =1 #endif
  96      =1  
  97      =1  WORD GetHactiveStart(void);
  98      =1  WORD GetHactiveEnd(void);
  99      =1  WORD GetVactiveStart(void);
 100      =1  //WORD GetVactiveLen(void);
 101      =1  BYTE GetVBackPorch(void);
 102      =1  void SetVBackPorch(BYTE val);
 103      =1  WORD GetPHP(void);
 104      =1  void SetPHP(WORD php);
 105      =1  void SetPVP(WORD period);
 106      =1  WORD GetPVP(void);
 107      =1  //void SetPanelRelatedRegisters(void);
 108      =1  //BYTE ChangedHPN(void);
 109      =1  //WORD GetVSUD(void);
 110      =1  
 111      =1  void SetDefaultPLL(void);
 112      =1  //void SetDefaultFPHSperiod(void);
 113      =1  //BYTE CalcPHP(DWORD ppf, BYTE tol);
 114      =1  //void ChangeFPHSperiod4DecoderInput(WORD vsud, BYTE tol);
 115      =1  
 116      =1  //-------------------------------------------------------------------
 117      =1  //                  Set Active Region Functions
 118      =1  //-------------------------------------------------------------------
 119      =1  void SetHactiveStart(WORD hstart);
 120      =1  void SetHactiveEnd(WORD hend);
 121      =1  void SetVactiveStart(WORD vstart);
 122      =1  //void SetVactiveLen(WORD van, WORD vstart);
 123      =1  void SetVactiveLen(WORD van);
 124      =1  //=============================================================================
 125      =1  //                         Set Measurement Window Functions   
 126      =1  //=============================================================================
 127      =1  void SetMeasureWindowH(WORD start, WORD stop);
 128      =1  void SetMeasureWindowV(WORD start, WORD stop);
 129      =1  //=============================================================================
 130      =1  //                              Video Input Functions   
 131      =1  //=============================================================================
 132      =1  BYTE IsVideoInput(void);
 133      =1  BYTE DetectDecoderInput(void);
 134      =1  //=============================================================================
 135      =1  //
 136      =1  //=============================================================================
 137      =1  void AutoPHPCalEnable(void);
 138      =1  void AutoPHPCalDisable(void);
 139      =1  
 140      =1  void MakeStartInt(void);
 141      =1  void AVGAInput(void);
 142      =1  void DVIInput(void);
 143      =1  //void DVGAInput(void);
 144      =1  void DisableDVGA(void);
 145      =1  
 146      =1  void COMPOSITE1Input(void);
 147      =1  void COMPOSITE2Input(void);
 148      =1  void COMPOSITE3Input(void);
 149      =1  
 150      =1  void SVIDEOInput(void);
 151      =1  void COMPONENTInput(void);
 152      =1  void ANALOGDTVInput(void);
 153      =1  void DTVInput(void);
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 23  

 154      =1  void TVInput(void);
 155      =1  void SCARTInput(void);
 156      =1  
 157      =1  //=============================================================================
 158      =1  //                          Measurement Functions
 159      =1  //=============================================================================
 160      =1  ///void SetPanelBitOrder(BYTE swap);
 161      =1  //void SetPanelSingleDouble(BYTE single);
 162      =1  
 163      =1  BYTE MeasureAndWait(BYTE flag);
 164      =1  
 165      =1  //WORD GetHCounter1(BYTE field);
 166      =1  //void SetHInitial(BYTE field, WORD counter);
 167      =1  //=============================================================================
 168      =1  //                          Invert Polarity Functions
 169      =1  //=============================================================================
 170      =1  void InvertHSYNCPolarity(void);
 171      =1  void InvertVSYNCPolarity(void);
 172      =1  //=============================================================================
 173      =1  //            Interrupt / SW Reset Control Functions
 174      =1  //=============================================================================
 175      =1  void SetInt(void);
 176      =1  //void ClearInt(void);
 177      =1  void SetEnDet(void);
 178      =1  void ClearEnDet(void);
 179      =1  void SWReset(void);
 180      =1  //void ClearSYNCLossStatus(void);
 181      =1  //void ClearSYNCChangeStatus(void);
 182      =1  //=============================================================================
 183      =1  //
 184      =1  //=============================================================================
 185      =1  BYTE IsBypassmode(void);
 186      =1  //BYTE IsInteraced(void);
 187      =1  void Clear_bypass(void);
 188      =1  void MaskOnSYNCInt(void);
 189      =1  void MaskOffSYNCInt(void);
 190      =1  //=============================================================================
 191      =1  //                                    ZoomControl
 192      =1  //=============================================================================
 193      =1  void BypassZoom(void);
 194      =1  
 195      =1  void XscaleU(DWORD scale);
 196      =1  void XscaleD(DWORD scale);
 197      =1  void XScale2(DWORD scale);
 198      =1  void YScale2(DWORD scale);
 199      =1  WORD GetYScale(void);
 200      =1  //=============================================================================
 201      =1  //
 202      =1  //=============================================================================
 203      =1  WORD GetHSYNCPulse(void);
 204      =1  WORD GetVSYNCPulse(void);
 205      =1  //#if defined TW8801 || defined TW8803
 206      =1  WORD GetRelativePosition(void);
 207      =1  //#endif
 208      =1  //=============================================================================
 209      =1  //                                                              MISC2 for decoder
 210      =1  //=============================================================================
 211      =1  #define BLUE_DECODER            2
 212      =1  #define BLACK_DECODER           0
 213      =1  
 214      =1  BYTE ForceDecoderOutput(BYTE color);
 215      =1  BYTE ClearForcedDecoderOutput(void);
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 24  

 216      =1  //=============================================================================
 217      =1  //                                                              CC and EDS
 218      =1  //=============================================================================
 219      =1  BYTE GetCCStatus(void);
 220      =1  void DisableCC(void);
 221      =1  void EnableCC(void);
 222      =1  BYTE GetCCData(void);
 223      =1  BYTE IsCCEnabled(void);
 224      =1  void EnableEDS(void);
 225      =1  void DisableEDS(void);
 226      =1  void RecoverCCOverflow(void);
 227      =1  
 228      =1  #define CCFIFOHalfFull()                        (ReadDecoder(CSTATUS) & 0x04)
 229      =1  //=============================================================================
 230      =1  //                                                              Internal PLL
 231      =1  //=============================================================================
 232      =1  BYTE GetPOST(void);
 233      =1  void SetPLLS(BYTE plls);
 234      =1  BYTE GetREFDM(void);
 235      =1  void SetREFDM(BYTE refdm);
 236      =1  DWORD GetFBDN(void);
 237      =1  void SetFBDN(WORD fbdn, BYTE vcsel);
 238      =1  DWORD GetPPF(void);
 239      =1  void ChangeInternPLL(DWORD _PPF);
 240      =1  
 241      =1  //=============================================================================
 242      =1  //                                                              Macros for attribute
 243      =1  //=============================================================================
 244      =1  //#define       GetOSDTransReg()                                                ReadTW88(0xAE)
 245      =1  //#define SetOSDTransReg(AlphaV)                                        WriteTW88(0xAE, (BYTE)AlphaV )
 246      =1  
 247      =1  #define GetPanelContrastReg(gccolor)                    ReadTW88(0x71+gccolor)
 248      =1  #define SetPanelContrastReg(sccolor, cval)              WriteTW88(0x71+sccolor,cval)
 249      =1  
 250      =1  #define GetPanelBrightnessReg(gbcolor)                  ReadTW88(0x74+gbcolor);
 251      =1  #define SetPanelBrightnessReg(sbcolor, bval)    WriteTW88(0x74+sbcolor,bval);
 252      =1  
 253      =1  #define SetDTVBrightnessReg(bval)                               WriteTW88(0x74,bval);
 254      =1  
 255      =1  #define GetPanelSaturationReg(gbcolor)                  ReadTW88(0x72+gbcolor);
 256      =1  #define SetPanelSaturationReg(sbcolor, bval)    WriteTW88(0x72+sbcolor,bval);
 257      =1  
 258      =1  #define SetPanelSharpnessReg(bval)                              WriteTW88(0x78,((bval&0x07)|0x38) );
 259      =1  
 260      =1  #define SetPanelHueReg(bval)                                    WriteTW88(0x70, (ReadTW88(0x70) & 0xc0 | (bval)) );
 261      =1  
 262      =1  #define GetVideoContrastReg()                                   ReadDecoder(CONTRAST)
 263      =1  #define SetVideoContrastReg(vcval)                              WriteDecoder(CONTRAST, vcval)
 264      =1  
 265      =1  #define GetVideoBrightnessReg()                                 ReadDecoder(BRIGHT)
 266      =1  #define SetVideoBrightnessReg(vbval)                    WriteDecoder(BRIGHT, vbval )
 267      =1  
 268      =1  #define GetVideoSaturationReg(gvstype)                  ReadDecoder(SAT_U+gvstype)
 269      =1  #define SetVideoSaturationReg(svstype, vsval)   WriteDecoder(SAT_U+svstype,     vsval)
 270      =1  
 271      =1  #define GetVideoHueReg()                                                ReadDecoder(HUE)
 272      =1  #define SetVideoHueReg(vhval)                                   WriteDecoder(HUE,       vhval )
 273      =1  
 274      =1  #define GetVideoSharpnessRegDef                                 (ReadDecoder(SHARPNESS) & 0x0f) 
 275      =1  
 276      =1  #define GetVideoSharpnessReg()                                  GetVideoSharpnessRegDef
 277      =1  //#define       SetVideoSharpnessReg(vshval)                    WriteDecoder(SHARPNESS, vshval )
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 25  

 278      =1  #define SetVideoSharpnessReg(vshval)                    WriteDecoder(SHARPNESS, ((ReadDecoder(SHARPNESS) & 0xf0) | (vshval 
             -& 0x0f) ) );
 279      =1  
 280      =1  #ifdef TW9908
           =1 #define SetVideoVPeakingReg(vshval)
           =1 #else
 283      =1  #define SetVideoVPeakingReg(vshval)                             WriteDecoder(V_PEAKING, ((ReadDecoder(V_PEAKING) & 0xf8) | (vshval 
             -& 0x07) ) );
 284      =1  #endif
 285      =1  
 286      =1  #define SetVideoHfilterReg(val)                                 WriteDecoder(HFILTER, ((ReadDecoder(HFILTER) & 0xf8) | (val & 0x07) )|
             -0x08 );
 287      =1  //----------------------------------------------------------------------------------
 288      =1  //color type
 289      =1  #define RED             0
 290      =1  #define GREEN   1
 291      =1  #define BLUE    2
 292      =1  #define WHITE   3
 293      =1  //saturation type
 294      =1  #define U_SAT   0
 295      =1  #define V_SAT   1
 296      =1  
 297      =1  //Alpha Blending Level
 298      =1  #define _0              0
 299      =1  #define _25             0x12
 300      =1  #define _37_5   0x13
 301      =1  #define _50             0x14
 302      =1  #define _100    0x18
 303      =1  
 304      =1  
 305      =1  /*
 306      =1  BYTE Mapping( int fromValue, struct RegisterInfo fromRange,
 307      =1                                   int * toValue, struct RegisterInfo toRange );
 308      =1  */
 309      =1  BYTE Mapping1( int fromValue, CODE_P struct RegisterInfo *fromRange,
 310      =1                                   int * toValue, CODE_P struct RegisterInfo *toRange );
 311      =1  #ifdef KEILC
 312      =1  #define Mapping2( A, B, C, D )                  Mapping1( A, B, C, D )
 313      =1  #define Mapping3( A, B, C, D )                  Mapping1( A, B, C, D )
 314      =1  #else
           =1 BYTE Mapping2( int fromValue, IDATA_P struct RegisterInfo *fromRange,
           =1                                  int * toValue, CODE_P struct RegisterInfo *toRange );
           =1 BYTE Mapping3( int fromValue, CODE_P struct RegisterInfo *fromRange,
           =1                                  int * toValue, IDATA_P struct RegisterInfo *toRange );
           =1 #endif
 320      =1  
 321      =1  BYTE GetAttributesFromNTSCSettings(BYTE index);
 322      =1  
 323      =1  #endif  // __TW88__
 324      =1  
   8          #include "debug.h"
   1      =1  #ifndef __DEBUG__
   2      =1  #define __DEBUG__
   3      =1  
   4      =1  #define DEBUG_ERR       1
   5      =1  #define DEBUG_WARN      2
   6      =1  #define DEBUG_INFO      3
   7      =1  #define DEBUG_BREAK     4
   8      =1  
   9      =1  #define Pause(a)        { Printf("\r\n"); Printf(a); while(!RS_ready()); RS_rx(); }
  10      =1  
  11      =1  //#define BURSTLOCK     7
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 26  

  12      =1  
  13      =1  void DebugWindowControl (void) ;
  14      =1  void Draw_Debug_Char(void);
  15      =1  void DebugWindowCursor( BYTE flag ) ;
  16      =1  void DebugWindowData( BYTE flag ) ;
  17      =1  void Debug_Write(void);
  18      =1  void Debug_Read(void);
  19      =1  
  20      =1  
  21      =1  
  22      =1  #endif  // __DEBUG__
  23      =1  
  24      =1  #ifdef CHIP_MANUAL_TEST
           =1 BYTE DelaynCheck(void);
           =1 void ChipManualTest(void);
           =1 
           =1 #endif
   9          #include "etc_eep.h"
   1      =1  #ifndef __ETC_EEP__
   2      =1  #define __ETC_EEP__
   3      =1  
   4      =1  
   5      =1  ////eeprom.h
   6      =1  
   7      =1  //=========================================================================
   8      =1  //      EEPROM structure
   9      =1  //      0x00    BYTE    4       'TW88'
  10      =1  #define EEP_FWREV_MAJOR                 0x04    //BYTE  1       F/W Rev.-major(Hex)     
  11      =1  #define EEP_FWREV_MINOR                 0x05    //BYTE  1       F/W Rev.-minor(Hex)
  12      =1  #define EEP_DEBUGLEVEL                  0x06    //BYTE  1       DebugLevel
  13      =1  //
  14      =1  #define EEP_AUTODETECT                  0x07    //BYTE  1       Flag for Input Auto Detect      -0:Auto, 1:NTSC,....
  15      =1  #define EEP_AUTODETECTTYTE              0x08    //BYTE  1       Type of Auto-detect(will be value of register 0x1d)
  16      =1  //                      ---------------------------------------------------------------
  17      =1  #define EEP_WIDEMODE                    0x09    //BYTE  1   Wide Mode
  18      =1  
  19      =1  #define EEP_AUTORECOGNITION             0x0a    //BYTE  1       Auto Recognition
  20      =1  #define EEP_VIDEOMODE                   0x0b    //BYTE  1   Video Mode
  21      =1  
  22      =1  #define EEP_OSDLANG                             0x0c    //BYTE  1   OSDLang                                             // 0
  23      =1  
  24      =1  #define EEP_OSDPOSITIONMODE     0x0d    //BYTE  1       OSD Position Mode
  25      =1  #define EEP_CCD                                 0x0e    //BYTE  1       Closed Caption- 0: off, 1:on
  26      =1  
  27      =1  #define EEP_INPUTSELECTION              0x0f    //BYTE  1       InputSelection
  28      =1  
  29      =1  //
  30      =1  #define EEP_PC_CONTRAST                 0x10
  31      =1  #define EEP_PC_BRIGHT                   0x11
  32      =1  
  33      =1  #define EEP_CONTRAST                    0x12    //BYTE  1       Contrast 
  34      =1  #define EEP_BRIGHTNESS                  0x13    //BYTE  1       Brightness
  35      =1  #define EEP_SATURATION_U                0x14    //BYTE  1       Saturation :U
  36      =1  #define EEP_SATURATION_V                0x15    //BYTE  1       Saturation :V
  37      =1  #define EEP_SHARPNESS                   0x16    //BYTE  1       Sharpness 
  38      =1  #define EEP_HUE                                 0x17    //BYTE  1       Hue                    
  39      =1  
  40      =1  //====================================HS AWT 981001
  41      =1  #define  EEP_AutoMode           0xa0
  42      =1  #define  EEP_IMAGEMode          0xa1
  43      =1  #define  EEP_RearMode           0xa2
  44      =1  #define  EEP_COSDMode           0xa3
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 27  

  45      =1  #define  EEP_GAUGEMode          0xa4
  46      =1  #define  EEP_CAMAMode           0xa5 
  47      =1  #define  EEP_CAMBMode           0xa6
  48      =1  #define  EEP_CAMCMode           0xa7
  49      =1  #define  EEP_CAMRMode           0xa8
  50      =1  #define  EEP_CAMOutMode         0xa9    
  51      =1  #define  EEP_TimeStep           0xaa
  52      =1  #define  EEP_Powerflag          0xab   
  53      =1  #define  EEP_ONOFFChoice        0xac 
  54      =1  
  55      =1  #define  EEP_PRIORITY           0xad
  56      =1  #define  EEP_JUMPMode           0xae
  57      =1  #define  EEP_NowModeState       0xaf
  58      =1  #define  EEP_SelectMode         0xb0
  59      =1  #define  EEP_PriorityOffSelectMode      0xb1
  60      =1  #define  EEP_AudioRecord                0xb2
  61      =1  
  62      =1  #define  EEP_FirstNumber                0xb3
  63      =1  #define  EEP_SecondNumber               0xb4
  64      =1  #define  EEP_ThridNumber                0xb5
  65      =1  #define  EEP_FourthNumber               0xb6
  66      =1  
  67      =1  #define  EEP_CAMNUMBER     0xb7
  68      =1  #define  EEP_PELCO                 0xb8
  69      =1  #define  EEP_Baud_rate     0xb9
  70      =1  #define  EEP_TriggerVGA    0xba
  71      =1  #define  EEP_DVRDisplay    0xbb
  72      =1  #define  EEP_IMAGE_A_Mode    0xbc//andy A1.4 20100113
  73      =1  #define  EEP_IMAGE_B_Mode    0xbd//andy A1.4 20100113
  74      =1  #define  EEP_IMAGE_C_Mode    0xbe//andy A1.4 20100113
  75      =1  
  76      =1  //#define  EEP_SelectModeBuf         0xb2
  77      =1  
  78      =1  #if 0
           =1 #define  EEP_Resolution                 0xc0
           =1 #define  EEP_FPS                                0xc1
           =1 #define  EEP_Quality                    0xc2
           =1 #define  EEP_RecordMode                 0xc3
           =1 #define  EEP_RecordLength               0xc4
           =1 #define  EEP_PreAlarmLength             0xc5
           =1 #define  EEP_PostAlarmLength    0xc6
           =1 #endif
  87      =1  //====================================HS AWT 981001
  88      =1  
  89      =1  //
  90      =1  //              ---------------------------------------------------------------
  91      =1  #define EEP_PCAUDIOPVOL         0x37    //BYTE  1   AudioVol
  92      =1  #define EEP_AUDIOPVOL                   0x38    //BYTE  1   AudioVol
  93      =1  #define EEP_AUDIOBALANCE                0x39    //BYTE  1   AudioBalance
  94      =1  //
  95      =1  //              ---------------------------------------------------------------
  96      =1  
  97      =1  #define EEP_BLOCKMOVIE                  0x40    //BYTE  1       BlockedMovie:Blocked rating for Movie   
  98      =1  #define EEP_BLOCKTV                             0x41    //BYTE  1       BlockedTV:Blocked rating for TV                 
  99      =1  #define EEP_FVSLD                               0x42    //BYTE  6
 100      =1  //                                                              7    6       4    3    2    1    0
 101      =1  //  FVSLD Level                        ALL   FV(V)   S    L    D    
 102      =1  //  0x43    BYTE    1   TV-Y            X  
 103      =1  //  0x44        BYTE    1   TV-Y7           X    X 
 104      =1  //  0x45        BYTE    1   TV-G            X 
 105      =1  //  0x46        BYTE    1   TV-PG           X       X    X    X    X
 106      =1  //  0x47        BYTE    1   TV-14           X       X    X    X    X 
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 28  

 107      =1  //  0x48        BYTE    1   TV-MA           X       X    X    X
 108      =1  //
 109      =1  #define EEP_VCHIPPASSWORD               0x49    //BYTE  4   OSDPassword                                 //Defualt:3366
 110      =1  //                      ---------------------------------------------------------------
 111      =1  //
 112      =1  //
 113      =1  //      0x61    WORD    2   PanelXRes
 114      =1  //      0x63    WORD    2       PanelYRes
 115      =1  //      0x65    BYTE    1       PanelHsyncMinPulseWidth
 116      =1  //      0x66    BYTE    1       PanelVsyncMinPulseWidth
 117      =1  //      0x67    WORD    2       PanelHminBackPorch
 118      =1  //      0x69    BYTE    1       PanelHsyncPolarity
 119      =1  //      0x6a    BYTE    1       PanelVsyncPolarity
 120      =1  //      0x6b    WORD    2       PanelDotClock
 121      =1  //      0x6d    BYTE    1       PanelPixsPerClock
 122      =1  //      0x6e    BYTE    1       PanelDEonly
 123      =1  //                      ---------------------------------------------------------------
 124      =1  //
 125      =1  //      0x80    PC Data
 126      =1  //
 127      =1  //                      ---------------------------------------------------------------
 128      =1  //
 129      =1  //      0x300   TV Data
 130      =1  //
 131      =1  //      --- NTSC_TV -------------------------------------------------------------
 132      =1  //      CNT_SAVEDAIR                    BYTE    1   Total count of saved Air TV Channel.
 133      =1  //      IDX_CURAIR                              BYTE    1   Index of Current Air TV Channel
 134      =1  //      CHN_CURAIR                              BYTE    1   Current Air TV Channel.
 135      =1  //
 136      =1  //      FIRSTSAVED_AIRCHN               BYTE    1       First saved Air TV channel no   (maximum 100)
 137      =1  //      ....
 138      =1  //
 139      =1  //      CNT_SAVEDCABLE                  BYTE    1   Total count of saved Cable TV Channel.
 140      =1  //      IDX_CURCABLE                    BYTE    1   Index of Current Cable TV Channel
 141      =1  //      CHN_CURCABLE                    BYTE    1   Current Cable TV Channel.
 142      =1  //
 143      =1  //      FIRSTSAVED_CABLECHN             BYTE    1       First saved Cable TV channel no (maximum 100)
 144      =1  //
 145      =1  //      --- PAL_TV --------------------------------------------------------------
 146      =1  //      PR_CUR                                  BYTE    1   Current PR no.
 147      =1  //      FIRST_SAVEDPR                   DWORD   4   Freq of PR0.        (TOTAL_PR)
 148      =1  //      FIRST_SAVEDPR+4                 DWORD   4   Freq of PR1.
 149      =1  //      .....
 150      =1  //
 151      =1  
 152      =1  
 153      =1  
 154      =1  //
 155      =1  // Offset of EEPROM
 156      =1  //
 157      =1  /*
 158      =1  #define VIDEOCONTRAST           0x18            // for NTSC.(PAL:0x20,SECAM:0x28)
 159      =1  #define VIDEOBRIGHTNESS         0x19
 160      =1  #define VIDEOSATURATION_U       0x1a
 161      =1  #define VIDEOSATURATION_V       0x1b
 162      =1  #define VIDEOHUE                        0x1c            // only for NTSC
 163      =1  #define VIDEOSHARPNESS          0x1d
 164      =1  */
 165      =1  #define CCCOLOR         0x52
 166      =1  #define VOLZOOM         0x53
 167      =1  
 168      =1  #define PANELINFO       0x61
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 29  

 169      =1  
 170      =1  // PAL_TV
 171      =1  #define  PR_CUR                                 0x301   
 172      =1  #define  FIRST_SAVEDPR                  0x308   
 173      =1   #define TVFREQ_HIGH 0 
 174      =1   #define TVFREQ_LOW  1
 175      =1  #ifdef PAL_TV
           =1  #define TVFINETUNE  2
           =1                 // NOT Finetune: 0 , Range: -32 ~ +32
           =1  #define TVPRSYSTEM  3  
           =1                 // bit 7: Add:1 Ereased :0
           =1                 // 
           =1  #define TVCHNAME    4
           =1 
           =1  #define BYTEPERCHANNEL 9 
           =1 #endif
 185      =1  // NTSC_TV
 186      =1  #define  EEP_TVInputSel                 0x302
 187      =1  #define  CHN_CURAIR                             0x303   
 188      =1  #define  FIRSTSAVED_AIRCHN              0x308   
 189      =1  #define  CHN_CURCABLE                   0x403   
 190      =1  #define  FIRSTSAVED_CABLECHN    0x408   
 191      =1  #ifdef NTSC_TV
           =1  #define TVFINETUNE  0
           =1                 // NOT Finetune: 0 , Range: -32 ~ +32
           =1  #define TVPRSYSTEM  1  
           =1                 // bit 7: Add:1 Ereased :0
           =1                 // 
           =1  #define BYTEPERCHANNEL 2
           =1 #endif
 199      =1  
 200      =1  
 201      =1  
 202      =1  
 203      =1  WORD GetFWRevEE(void);
 204      =1  void SaveFWRevEE(WORD);
 205      =1  
 206      =1  BYTE GetDebugLevelEE(void);
 207      =1  void SaveDebugLevelEE(BYTE);
 208      =1  
 209      =1  #ifdef WIDE_SCREEN
 210      =1  BYTE GetWideModeEE(void);
 211      =1  void SaveWideModeEE(BYTE dl);
 212      =1  #endif
 213      =1  
 214      =1  
 215      =1  //BYTE GetRange4CoarseEE(void);
 216      =1  //void SaveRange4CoarseEE(BYTE);
 217      =1  
 218      =1  BYTE GetPossibleAutoDetectStdEE(void);
 219      =1  void SetPossibleAutoDetectStdEE(void);
 220      =1  
 221      =1  //BYTE GetOSDXPositionEE(void);
 222      =1  //BYTE GetOSDYPositionEE(void);
 223      =1  BYTE GetClosedCaptionFlagEE(void);
 224      =1  
 225      =1  BYTE GetVideoDatafromEE(BYTE);
 226      =1  void SaveVideoDatatoEE(BYTE offset, BYTE ndata);
 227      =1  
 228      =1  //BYTE GetVideoBrightnessEE(void);
 229      =1  //BYTE GetVideoSaturationEE(BYTE);
 230      =1  //BYTE GetVideoHueEE(void);
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 30  

 231      =1  //BYTE GetVideoSharpnessEE(void);
 232      =1  
 233      =1  //void SaveVideoContrastEE(BYTE ndata);
 234      =1  //void SaveVideoBrightnessEE(BYTE ndata);
 235      =1  //void SaveVideoSaturationEE(BYTE, BYTE ndata);
 236      =1  //void SaveVideoHueEE(BYTE ndata);
 237      =1  //void SaveVideoSharpnessEE(BYTE ndata);
 238      =1  
 239      =1  BYTE GetOSDPositionModeEE(void);
 240      =1  void SaveOSDPositionModeEE(BYTE ndata);
 241      =1  //void SaveOSDXPositionEE(BYTE);
 242      =1  //void SaveOSDYPositionEE(BYTE);
 243      =1  
 244      =1  void SaveClosedCaptionFlagEE(BYTE);
 245      =1  
 246      =1  BYTE GetBlockedTVEE(void);                      
 247      =1  void SaveBlockedTVEE(BYTE vi);          
 248      =1  BYTE GetBlockedTV_FLDSLEE( BYTE level ) ;
 249      =1  void SaveBlockedTV_FLDSLEE(BYTE level, BYTE vi) ;
 250      =1  
 251      =1  BYTE GetBlockedMovieEE(void);           
 252      =1  void SaveBlockedMovieEE(BYTE vi);       
 253      =1  #if 0
           =1 BYTE GetInputSelectionEE(void);
           =1 #endif
 256      =1  void SaveInputSelectionEE(BYTE val);
 257      =1  
 258      =1  //BYTE GetOSDDurationEE(void);
 259      =1  //void SaveOSDDurationEE(BYTE val);
 260      =1  
 261      =1  BYTE GetOSDLangEE(void);
 262      =1  void SaveOSDLangEE(BYTE val);
 263      =1  
 264      =1  //ljy100303...BYTE GetOSDZoomEE(void);
 265      =1  //ljy100303...void SaveOSDZoomEE(BYTE val);
 266      =1  
 267      =1  BYTE GetAudioVolEE(void);
 268      =1  void SetAudioVolEE( BYTE vol );
 269      =1  BYTE GetPCAudioVolEE(void);
 270      =1  void SetPCAudioVolEE( BYTE vol );
 271      =1  #if 0
           =1 BYTE GetAudioBalanceEE(void);
           =1 void SetAudioBalanceEE( BYTE vol );
           =1 BYTE GetAudioBassEE(void);
           =1 void SetAudioBassEE( BYTE vol );
           =1 BYTE GetAudioTrebleEE(void);
           =1 void SetAudioTrebleEE( BYTE vol );
           =1 #endif
 279      =1  //BYTE GetAudioEffectEE(void);
 280      =1  //void SetAudioEffectEE( BYTE vol );
 281      =1  
 282      =1  void ClearBasicEE(void);
 283      =1  
 284      =1  BYTE ValidPassword(DATA_P BYTE *numstr, BYTE index);
 285      =1  BYTE SetNewPassword(DATA_P BYTE *numstr, BYTE index);
 286      =1  
 287      =1  //WORD GetPanelXRes(void);
 288      =1  //WORD GetPanelYRes(void);
 289      =1  BYTE GetPanelHsyncMinPulseWidth(void);
 290      =1  BYTE GetPanelVsyncMinPulseWidth(void);
 291      =1  WORD GetPanelHMinBackPorch(void);
 292      =1  BYTE GetPanelHsyncPolarity(void);
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 31  

 293      =1  BYTE GetPanelVsyncPolarity(void);
 294      =1  WORD GetPanelDotClock(void);
 295      =1  WORD GetPanelMaxClock(void);
 296      =1  BYTE GetPanelPixsPerClock(void);
 297      =1  // Not used yet *************************  BYTE GetPanelDEonly(void);
 298      =1  
 299      =1  void AddTVChannelEE( BYTE tvtype, BYTE chn);
 300      =1  BYTE GetTVChannelEE( BYTE tvtype, BYTE inx);
 301      =1  void ResetTVChannelEE( BYTE tvtype );
 302      =1  BYTE GetTVChannelCntEE(BYTE tvtype);
 303      =1  BYTE GetTVChnIdxEE(BYTE tvtype);
 304      =1  BYTE GetCurTVChannelEE(BYTE tvtype);
 305      =1  void SetTVChnIdxEE(BYTE tvtype, BYTE newd);
 306      =1  void SetCurTVChannelEE(BYTE tvtype, BYTE newd);
 307      =1  BYTE InsertTVChannelEE(BYTE tvtype, BYTE newd);
 308      =1  BYTE RemoveTVChannelEE(BYTE tvtype, BYTE newd);
 309      =1  
 310      =1  void SetTVPrEE(void);
 311      =1  BYTE GetTVPrEE(void);
 312      =1  void SetTVFreqEE(BYTE, WORD);
 313      =1  WORD GetTVFreqEE(BYTE);
 314      =1  void SetFineTuneEE(BYTE, BYTE);
 315      =1  BYTE GetFineTuneEE(BYTE);
 316      =1  BYTE GetTVPrSystem(BYTE);
 317      =1  void SetTVPrSystem(BYTE, BYTE);
 318      =1  BYTE GetTVInputSelEE(void);
 319      =1  void SetTVInputSelEE(BYTE);
 320      =1  
 321      =1  #define GetVInputStdDetectModeEE()                              ReadEEP(EEP_AUTODETECTTYTE)
 322      =1  #define SaveVInputStdDetectModeEE(A)                    WriteEEP(EEP_AUTODETECTTYTE, A)
 323      =1  
 324      =1  #define GetAutoRecogntionEE()                                   ReadEEP(EEP_AUTORECOGNITION)
 325      =1  #define SaveAutoRecogntionEE(A)                                 WriteEEP(EEP_AUTORECOGNITION, A)
 326      =1  
 327      =1  #define SetVideoModeEE( ctid )                                  WriteEEP( EEP_VIDEOMODE, ctid )
 328      =1  #define GetVideoModeEE()                                                ReadEEP( EEP_VIDEOMODE )
 329      =1  
 330      =1  #define GetPanelContrastEE()                                    ReadEEP(0x10)
 331      =1  
 332      =1  #if defined( SUPPORT_PC ) || defined( SUPPORT_DTV )
 333      =1  //#define GetPanelHueEE()                                                       ReadEEP(0x28)
 334      =1  //#define GetPanelSharpnessEE()                                 ReadEEP(0x29)
 335      =1  #define GetPanelBrightnessEE()                                  ReadEEP(0x11)
 336      =1  //#define GetPanelSaturationEE()                                        ReadEEP(0x2a)
 337      =1  
 338      =1  //#define SavePanelHueEE(A)                                             WriteEEP(0x28, A)
 339      =1  //#define SavePanelSharpnessEE(A)                                       WriteEEP(0x29, A)
 340      =1  #define SavePanelContrastEE(A)                                  WriteEEP(0x10, A)
 341      =1  #define SavePanelBrightnessEE(A)                                WriteEEP(0x11, A)
 342      =1  //#define SavePanelSaturationEE(A)                              WriteEEP(0x2a, A)
 343      =1  #endif
 344      =1  
 345      =1  /*
 346      =1  #define GetDigitalVideoContrastEE()                             ReadEEP(0x2b)
 347      =1  #define GetDigitalVideoBrightnessEE()                   ReadEEP(0x2c)
 348      =1  #define GetDigitalVideoHueEE()                                  ReadEEP(0x2d)
 349      =1  #define GetDigitalVideoSaturationEE(off)                ReadEEP(0x2e+off)
 350      =1  
 351      =1  #define SaveDigitalVideoContrastEE(A)                   WriteEEP(0x2b, A)
 352      =1  #define SaveDigitalVideoBrightnessEE(A)                 WriteEEP(0x2c, A)
 353      =1  #define SaveDigitalVideoHueEE(A)                                WriteEEP(0x2d, A)
 354      =1  #define SaveDigitalVideoSaturationEE(off,A)             WriteEEP(0x2e+off, A)
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 32  

 355      =1  */
 356      =1  
 357      =1  #endif  // __ETC_EEP__
  10          #include "pc_eep.h"
   1      =1  #ifndef __PC_EEP__
   2      =1  #define __PC_EEP__
   3      =1  
   4      =1  
   5      =1  // -----------------------------------------------------------------------------
   6      =1  #define PC_COLOR_DATA   0x80    // StartAddress of EEPROM for PC Color Temperature
   7      =1  #define PC_USERCOLOR    0x8A
   8      =1  #define SetPCColorTempModeEE( ctid )                    WriteEEP( PC_COLOR_DATA, ctid )
   9      =1  #define GetPCColorTempModeEE()                                  ReadEEP( PC_COLOR_DATA )
  10      =1  
  11      =1  #define GetPCUserColorTempEE( ucolorr)                  ReadEEP( PC_USERCOLOR+ucolorr )
  12      =1  #define SavePCUserColorTempEE( ucolorw, uval)   WriteEEP( PC_USERCOLOR+ucolorw, uval )
  13      =1  #define GetPCColorEE(index)                                             ReadEEP(index)
  14      =1  
  15      =1  // -----------------------------------------------------------------------------
  16      =1  #define EE_ADC_GO               0x90    // ADC Gain Offset for PC
  17      =1  #define EE_ADC_GO_DTV   0x98    // ADC Gain Offset for DTV
  18      =1  
  19      =1  #define EE_PCDATA               0xC0    // StartAddress of EEPROM for PCDATA
  20      =1  #define LEN_PCDATA              5               // Length of PCDATA
  21      =1  
  22      =1  WORD GetHPNfromEE(BYTE mode);
  23      =1  
  24      =1  BYTE CheckPcDataEEValid(BYTE, WORD);
  25      =1  
  26      =1  WORD GetVactiveStartEE(BYTE mode);
  27      =1  WORD GetHactiveStartEE(BYTE mode);
  28      =1  
  29      =1  void GetPCDataEE(BYTE mode);
  30      =1  void SavePCDataEE(BYTE mode);
  31      =1  void SaveDefaultPCDataEE(void);
  32      =1  void SaveDefaultPCDataAllEE(void);
  33      =1  
  34      =1  void SaveHactiveEE(BYTE mode);
  35      =1  void SaveVactiveEE(BYTE mode);
  36      =1  void SaveVBackPorchEE(BYTE mode);
  37      =1  void SaveCoarseEE(BYTE mode);
  38      =1  void SavePhaseEE(BYTE mode);
  39      =1  /*
  40      =1  WORD GetHactiveStartEE(BYTE mode);
  41      =1  WORD GetVactiveStartEE(BYTE mode);
  42      =1  */
  43      =1  void DumpPCData(void);
  44      =1  
  45      =1  void SaveActiveVEE(WORD);
  46      =1  void SaveBackPorchEE(BYTE);
  47      =1  void SaveActiveHEE(WORD);
  48      =1  
  49      =1  void SaveADCGainOffsetEE(BYTE mod);
  50      =1  void GetADCGainOffsetEE(void);
  51      =1  
  52      =1  void SaveADCGainOffsetForDTVEE(BYTE mod);
  53      =1  void GetADCGainOffsetForDTVEE(void);
  54      =1  
  55      =1  #endif  // __PC_EEP__
  11          #include "measure.h"
   1      =1  #ifndef __MEASURE__
   2      =1  #define __MEASURE__
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 33  

   3      =1  
   4      =1  #define EE_DOS                          0
   5      =1  
   6      =1  #define EE_SP1                          1
   7      =1  #define EE_SP2                          2
   8      =1  #define EE_SP3                          3
   9      =1  
  10      =1  #define EE_VGA_60                       4
  11      =1  #define EE_VGA_66                       5
  12      =1  #define EE_VGA_70                       6
  13      =1  #define EE_VGA_72                       7
  14      =1  #define EE_VGA_75                       8
  15      =1  #define EE_VGA_85                       9
  16      =1  
  17      =1  #define EE_SVGA_56                      10
  18      =1  #define EE_SVGA_60                      11
  19      =1  #define EE_SVGA_70                      12
  20      =1  #define EE_SVGA_72                      13
  21      =1  #define EE_SVGA_75                      14
  22      =1  #define EE_SVGA_85                      15
  23      =1  
  24      =1  #define EE_832_75                       16
  25      =1  
  26      =1  #define EE_XGA_60                       17
  27      =1  #define EE_XGA_70                       18
  28      =1  #define EE_XGA_72                       19
  29      =1  #define EE_XGA_75                       20
  30      =1  #define EE_XGA_85                       21
  31      =1  
  32      =1  #define EE_1152_60                      22
  33      =1  #define EE_1152_70                      23
  34      =1  #define EE_1152_75                      24
  35      =1  
  36      =1  #define EE_SXGA_60                      25
  37      =1  #define EE_SXGA_70                      26
  38      =1  #define EE_SXGA_75                      27
  39      =1  
  40      =1  #define EE_RGB_480P                     28
  41      =1  #define EE_RGB_720P                     29
  42      =1  #define EE_RGB_720P50           30
  43      =1  #define EE_RGB_1080I            31
  44      =1  #define EE_RGB_1080I50A         32
  45      =1  #define EE_RGB_1080I50B         33
  46      =1  #define EE_RGB_480I                     34
  47      =1  #define EE_RGB_576I                     35
  48      =1  #define EE_RGB_576P                     36
  49      =1  
  50      =1  #define EE_YPbPr_480P           37
  51      =1  #define EE_YPbPr_720P           38
  52      =1  #define EE_YPbPr_720P50         39
  53      =1  #define EE_YPbPr_1080I          40
  54      =1  #define EE_YPbPr_1080I50A       41
  55      =1  #define EE_YPbPr_1080I50B       42
  56      =1  #define EE_YPbPr_480I           43
  57      =1  #define EE_YPbPr_576I           44
  58      =1  #define EE_YPbPr_576P           45
  59      =1  
  60      =1  #define EE_PC_MAX                       46
  61      =1  
  62      =1  #define EE_PC_NO_SIGNAL         0xfe
  63      =1  #define EE_PC_UNKNOWN           0xff
  64      =1  
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 34  

  65      =1  struct _PCMDATA {
  66      =1          CODE_P BYTE  Support;
  67      =1          CODE_P WORD  HAN;
  68      =1          CODE_P WORD  VAN;
  69      =1          CODE_P WORD  IVF;
  70      =1          CODE_P WORD  CLOCK;
  71      =1          CODE_P WORD  low;
  72      =1          CODE_P WORD  high;
  73      =1          CODE_P WORD  Hstart;
  74      =1          CODE_P WORD  Vstart;
  75      =1          CODE_P WORD  IPF;               // 0.1MHz
  76      =1          CODE_P WORD  PPF;               // 0.1MHz
  77      =1          CODE_P BYTE  VBack;
  78      =1  };
  79      =1  #ifndef AUTOCALC_PC
           =1 
           =1 #ifdef SUPPORT_DTV
           =1 struct _DTVMDATA {
           =1         CODE_P BYTE Reg62;
           =1         CODE_P BYTE RegBC;
           =1         CODE_P BYTE RegBD;
           =1         CODE_P BYTE RegBE;
           =1         CODE_P WORD PHP;
           =1 };
           =1 #endif
           =1 #endif
  91      =1  #if defined     XGA
           =1         #define MAX_PPF          90000000
           =1 #elif defined SXGA
           =1         #define MAX_PPF         135000000
           =1 #elif defined WXGA
           =1         #define MAX_PPF          90000000
           =1 #elif defined WVGA
  98      =1          #define MAX_PPF          90000000
  99      =1  #elif defined VGA
           =1         #define MAX_PPF          50000000
           =1 #elif defined SVGA
           =1         #define MAX_PPF          80000000
           =1 #elif defined QVGA
           =1         #define MAX_PPF          30000000
           =1 #elif defined WQVGA
           =1         #define MAX_PPF          30000000
           =1 #endif
 108      =1  
 109      =1  extern BYTE cLastSyncLoss;
 110      =1  extern BYTE PcMode;
 111      =1  
 112      =1  void CompLT170E2(void);
 113      =1  
 114      =1  WORD gap(WORD a, WORD b);
 115      =1  
 116      =1  //===================================================================
 117      =1  WORD GetHpnVpn(BYTE);
 118      =1  
 119      =1  WORD ConvertBasedOnInput(WORD dat);
 120      =1  
 121      =1  BYTE IsDTVInput(void);
 122      =1  
 123      =1  void SetVValueForPanel(WORD vstart);
 124      =1  BYTE SetHValueForPanel(void);
 125      =1  BYTE GetActiveRegion(void);
 126      =1  
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 35  

 127      =1  BYTE DetectAndSetForVGAInput(BYTE);
 128      =1  #ifdef SUPPORT_DTV
           =1 BYTE DetectAndSetForDTVInput(BYTE);
           =1 #endif
 131      =1  void CheckPCinput(void);
 132      =1  void CheckDTVinput(void);
 133      =1  
 134      =1  WORD GetCoarseValue(void);
 135      =1  BYTE GetPhaseValue(void);
 136      =1  WORD SetPCCoarseValue(BYTE val);
 137      =1  BYTE SetPhaseValue(BYTE val);
 138      =1  
 139      =1  void DisplayResultAndSetActiveRange(void);
 140      =1  
 141      =1  //=============================================================================
 142      =1  //                    PC Screen Position Move Functions
 143      =1  //=============================================================================
 144      =1  void MoveActiveVpos(BYTE val);          // Up/Down
 145      =1  void MoveActiveHpos(BYTE val);          // Left/Right
 146      =1  
 147      =1  BYTE GetVPosition(void);
 148      =1  BYTE SetVPosition(BYTE val);
 149      =1  BYTE GetHPosition(void);
 150      =1  BYTE SetHPosition(BYTE val);
 151      =1  
 152      =1  void ResetPCValue(void);
 153      =1  
 154      =1  CODE_P BYTE *GetPCInputSourceName(void);
 155      =1  BYTE AutoAdjust(void);
 156      =1  
 157      =1  #endif // __MEASURE__
  12          #include "adc.h"
   1      =1  #ifndef __ADC__
   2      =1  #define __ADC__
   3      =1  
   4      =1  //=============================================================================
   5      =1  //                             ADC Functions
   6      =1  //=============================================================================
   7      =1  
   8      =1  void ADCPowerDown(bit flag);
   9      =1  void SelectADCmux(BYTE sel);
  10      =1  void SetADCMode(BYTE mode);
  11      =1  
  12      =1  void EnableADC(void);
  13      =1  void DisableADC(void);
  14      =1  
  15      =1  WORD GetCoarse(void);
  16      =1  void SetCoarse(WORD i);
  17      =1  void SetPhase(BYTE j);
  18      =1  BYTE GetPhaseCurrent(void);
  19      =1  BYTE SetVCORange(DWORD _IPF);
  20      =1  
  21      =1  //void SetADCGainOffset(BYTE gain, BYTE offset);
  22      =1  void AutoColorAdjust(void);
  23      =1  
  24      =1  
  25      =1  
  26      =1  void AutoColorAdjustForDTV(BYTE flag);
  27      =1  
  28      =1  #endif  // __ADC__
  29      =1  
  30      =1  
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 36  

  31      =1  
  32      =1  
  33      =1  
  34      =1  
  35      =1  
  36      =1  
  37      =1  
  38      =1  
  39      =1  
  40      =1  
  41      =1  
  42      =1  
  43      =1  
  44      =1  
  45      =1  
  46      =1  
  47      =1  
  48      =1  
  49      =1  
  50      =1  
  51      =1  
  52      =1  
  53      =1  
  54      =1  
  13          #include "CPU.h"
   1      =1  #ifndef __CPU__
   2      =1  #define __CPU__
   3      =1  
   4      =1  /*
   5      =1  #ifdef INTERNAL_MCU
   6      =1  #define I2C_SCL         P2_0
   7      =1  #else
   8      =1  #define I2C_SCL         P1_0
   9      =1  #endif
  10      =1  #define I2C_SDA         P1_1
  11      =1  */
  12      =1  #define I2C_SCL         P1_0
  13      =1  #define I2C_SDA         P1_1
  14      =1  #define BUF_MAX         8
  15      =1  #define DVR_BUF_MAX     30
  16      =1  
  17      =1  #ifdef REMO_RC5
           =1 #define EnableRemoconInt()      { RemoDataReady = 0;    EX0 = 1;}
           =1 #endif
  20      =1  void    InitCPU(void);
  21      =1  void    InitVars(void);
  22      =1  void    InitTechwell(void);
  23      =1  void    main_init (void);
  24      =1  void    PowerDown( void );
  25      =1  #if 0
           =1 BYTE    OKSleepTime(void);
           =1 #endif
  28      =1  #ifdef REMO_RC5
           =1 void    InitForRemo(void);
           =1 #endif
  31      =1  void    PowerLED(BYTE flag);
  32      =1  void    Wait_ms(WORD Tms);
  33      =1  BYTE    TW2835Command(char,char,char,char,char);
  34      =1  
  35      =1  #endif
  14          #include "Printf.h"
   1      =1  #ifndef __PRINTF__
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 37  

   2      =1  #define __PRINTF__
   3      =1  
   4      =1  #define _outchar(c) while(1) { if( !RS_Xbusy ) { SBUF = c; RS_Xbusy=1; break; } }
   5      =1  #define Putch(c) _outchar(c)
   6      =1  
   7      =1  #ifdef SERIAL
   8      =1  
   9      =1   void Printf ( const char CODE_P *fmt, ... );
  10      =1   void Puts ( CODE_P char *ptr );
  11      =1  
  12      =1  #define TW2835Cmd(a)   Puts ( a )
  13      =1  
  14      =1  #else
           =1 
           =1  #undef  DEBUG
           =1  #define Printf(a,b)    //
           =1  #define Puts(a)                //
           =1 
           =1 #endif
  21      =1  
  22      =1  
  23      =1  #ifndef DEBUG
  24      =1  
  25      =1   #define dPuts(a)               //
  26      =1   #define wPuts(a)               //
  27      =1   #define ePuts(a)               //
  28      =1  
  29      =1  #else
           =1 
           =1  void dPrintf( const char CODE_P *fmt, ... );
           =1  void wPrintf( const char CODE_P *fmt, ... );
           =1  void ePrintf( const char CODE_P *fmt, ... );
           =1 
           =1  void dPuts( CODE_P char *ptr );
           =1  void wPuts( CODE_P char *ptr );
           =1  void ePuts( CODE_P char *ptr );
           =1 
           =1 #endif  // DEBUG
  40      =1  
  41      =1  BYTE Getch(void);
  42      =1  BYTE Getche(void);
  43      =1  
  44      =1  
  45      =1  #endif  //__PRINTF__
  15          #include "rgbmix.h"             // for TW8801
   1      =1  #ifndef __RGBMIX__
   2      =1  #define __RGBMIX__
   3      =1  
   4      =1  #include "RegMap.h"
   1      =2  #ifndef __REGMAP__
   2      =2  #define __REGMAP__
   3      =2  
   4      =2  //-----------------------------------------------------------------------------
   5      =2  //                              Individual Decoder Registers 
   6      =2  //-----------------------------------------------------------------------------
   7      =2  
   8      =2  #define MCU_STOP_MODE   0xc8    // bit 7 is mcu stop, bit5 is MCU debug
   9      =2  
  10      =2  #define LAD0                    0xc9    // Low speed AD channel 0
  11      =2  #define LAD1                    0xca    // Low speed AD channel 1
  12      =2  
  13      =2  #define REG_PAGE                0xff
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 38  

  14      =2  #define STATUS0                 0xd0
  15      =2  #define STATUS1                 0xd1
  16      =2  #define IRQ_EN1                 0xd2
  17      =2  #define IRQ_EN0                 0xd3
  18      =2  
  19      =2  //-----------------------------------------------------------------------------
  20      =2  //                              Individual Decoder Registers 
  21      =2  //-----------------------------------------------------------------------------
  22      =2  
  23      =2  #define DECODERADDRESS  TW88I2CAddress
  24      =2  
  25      =2  #define CVFMT                   0x1e    // Component Video Format
  26      =2  #define FBSHIFT                 0x38    // RGB Anti-Alias Filter/FB Shift Level
  27      =2  #define SHUE                    0x3e    // RGB Hue
  28      =2  #define SCONTRAST               0x3b    // RGB Contrast
  29      =2  #define SBRIGHT                 0x3a    // RGB Brightness
  30      =2  #define SCbGAIN                 0x3c    // RGB Cb Gain
  31      =2  #define SCrGAIN                 0x3d    // RGB Cb Gain
  32      =2  #define RGBCONTROL              0x36    // RGB Powerdown..
  33      =2  #define RGBMISC                 0x39
  34      =2  #define FBCONTRL                0x3F
  35      =2  
  36      =2  //#define OSD_ADJ                       0xce
  37      =2  #define PNLSHARPNESS    0x78    // Sharpness Control
  38      =2  #define OSDWINSTATUS    0x95
  39      =2  //-----------------------------------------------------------------------------
  40      =2  //                              Common Registers
  41      =2  //-----------------------------------------------------------------------------
  42      =2  #define CSTATUS                 0x01    // Chip Status
  43      =2  #define INFORM                  0x02    // Input Format
  44      =2  #define ACNTL                   0x06    // Analog Control
  45      =2  #define CROP_HI                 0x07    // Cropping High
  46      =2  #define VDELAY_LO               0x08    // Vertical Delay Low
  47      =2  #define VACTIVE_LO              0x09    // Vertical Active Low
  48      =2  #define HDELAY_LO               0x0a    // Horizontal Delay Low
  49      =2  #define HACTIVE_LO              0x0b    // Horizontal Active Low
  50      =2  #define CNTRL1                  0x0c    // Control 1
  51      =2  
  52      =2  #define BRIGHT                  0x10    // Brightness Control
  53      =2  #define CONTRAST                0x11    // Contrast Control
  54      =2  #define SHARPNESS               0x12    // Sharpness Control
  55      =2  #define SAT_U                   0x13    // Chroma(U) Gain
  56      =2  #define SAT_V                   0x14    // Chroma(V) Gain
  57      =2  #define HUE                             0x15    // Hue Conrol
  58      =2  #define V_PEAKING               0x17    // Vertical Peaking
  59      =2  
  60      =2  #define CC_STATUS               0x1a    // CC/EDS Status
  61      =2  #define CC_DATA                 0x1b    // CC/EDS Data
  62      =2  #define SDT                             0x1c    // Standard Selection
  63      =2  #define SDTR                    0x1d    // Standard Recognition
  64      =2  
  65      =2  #define V_CONTROL2              0x29    // Vertical Control II
  66      =2  #define HFILTER                 0x2c
  67      =2  #define MISC1                   0x2d    // Miscellaneous Control 1
  68      =2  #define MISC2                   0x2e    // Miscellaneous Control 2
  69      =2  #define MISC3                   0x2f    // Miscellaneous Control 2
  70      =2  
  71      =2  #define VBI_CNTL2               0x34    // VBI control 2 - WSSEN
  72      =2  #define CC_ODDLINE              0x35    // CC Odd Line
  73      =2  
  74      =2  #define LADC0                   0xc9    //LADC Channel 0 Input Value 
  75      =2  #define LADC1                   0xca    //LADC Channel 1 Input Value 
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 39  

  76      =2  
  77      =2  #define WriteDecoder(index, val)                WriteTW88( index, val )
  78      =2  #define ReadDecoder(index)                              ReadTW88(  index )
  79      =2  #endif // __REGMAP__
   5      =1  
   6      =1  //#define       SetDigitalVideoContrastReg(vcval)                               WriteTW88(0x3b, vcval)
   7      =1  //#define       SetDigitalVideoBrightnessReg(vbval)                             WriteTW88(0x3c, vbval )
   8      =1  //#define       SetDigitalVideoHueReg(vhval)                                    WriteTW88(0x32, vhval )
   9      =1  //#define       SetDigitalVideoSaturationReg(gain, vhval)               WriteTW88(0x3d+gain, (ReadTW88(0x3d+gain)&0x80) + vhv
             -al )
  10      =1  #define SetDigitalVideoContrastReg(vcval)                               WriteI2C(DECODERADDRESS, SCONTRAST, vcval)
  11      =1  #define SetDigitalVideoBrightnessReg(vbval)                             WriteI2C(DECODERADDRESS, SBRIGHT,       vbval )
  12      =1  #define SetDigitalVideoHueReg(vhval)                                    WriteI2C(DECODERADDRESS, SHUE,  vhval )
  13      =1  #define SetDigitalVideoSaturationReg(gain, vhval)               WriteI2C(DECODERADDRESS, SCbGAIN+gain, (ReadI2C(DECODER
             -ADDRESS, SCbGAIN+gain)&0x80) + vhval )
  14      =1  
  15      =1  #endif // __RGBMIX__
  16          #include "panel.h"
   1      =1  //PanelConfig
   2      =1  
   3      =1          #if   defined SXGA
           =1                                                 #define PHR_ 1280
           =1                                                 #define PVR_ 1024
           =1         #elif defined XGA       
           =1                                                 #define PHR_ 1024
           =1                                                 #define PVR_ 768
           =1         #elif defined SVGA
           =1                                                 #define PHR_ 800
           =1                                                 #define PVR_ 600
           =1         #elif defined VGA
           =1                                                 #define PHR_ 640
           =1                                                 #define PVR_ 480
           =1         #elif defined QVGA
           =1                                                 #define PHR_ 320
           =1                                                 #define PVR_ 240
           =1         #elif defined WXGA
           =1                                                 #define PHR_ 1280 //1366
           =1                                                 #define PVR_ 768
           =1         #elif defined WSVGA
           =1                                                 #define PHR_ 1024
           =1                                                 #define PVR_ 600
           =1         #elif defined WVGA
  25      =1                                                  #define PHR_ 800
  26      =1                                                  #define PVR_ 600
  27      =1          #elif defined WQVGA
           =1                                 //              #define PHR_ 960 //480
           =1                                 //              #define PVR_ 237
           =1                                                 #define PHR_ 480 //480
           =1                                                 #define PVR_ 240
           =1         #endif
  33      =1  
  34      =1   
  35      =1  
  36      =1  /*
  37      =1  #define ACTIVE_LOW                      0
  38      =1  #define ACTIVE_HIGH                     1
  39      =1  
  40      =1  CODE struct PanelConfig {
  41      =1          unsigned                x_res,                                  y_res;
  42      =1          unsigned char   h_sync_min_pulse_width, v_sync_min_pulse_width;
  43      =1          unsigned                h_min_back_porch;
  44      =1          unsigned char   h_sync_polarity,                v_sync_polarity;
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 40  

  45      =1          unsigned                dot_clock,                              max_clock;                      // in unit Mhz*10
  46      =1          unsigned char   pixs_per_clock;
  47      =1          unsigned char   DE_only;
  48      =1  } PanelConfig=
  49      =1          {
  50      =1          //----------------------------------------------------
  51      =1          #ifdef WXGA
  52      =1          //LG  LM171W01 WXGA
  53      =1          1280,                   768,
  54      =1          8,                              1,
  55      =1          8,
  56      =1          ACTIVE_LOW,             ACTIVE_LOW,
  57      =1          #ifdef DOUBLE_PIXEL
  58      =1          320,                    470,
  59      =1          2,
  60      =1          #else
  61      =1          650,                    950,                                    //65Mhz
  62      =1          1,
  63      =1          #endif
  64      =1          0
  65      =1          //----------------------------------------------------
  66      =1          #elif defined XGA
  67      =1          //Samsung  LT150x1-151 XGA
  68      =1          1024,                   768,
  69      =1          68,                             1,
  70      =1          80,
  71      =1          ACTIVE_LOW,             ACTIVE_LOW,
  72      =1          #ifdef DOUBLE_PIXEL
  73      =1          325,                    400,                                    //32.5Mhz
  74      =1          2,
  75      =1          #else
  76      =1          650,                    800,
  77      =1          1,
  78      =1          #endif
  79      =1          0
  80      =1          //----------------------------------------------------
  81      =1          #elif defined SXGA
  82      =1          //Samsung  LT170E2-131  SXGA
  83      =1          1280,                   1024,
  84      =1          1,                              1,
  85      =1          1,
  86      =1          ACTIVE_LOW,             ACTIVE_LOW,
  87      =1          #ifdef DOUBLE_PIXEL
  88      =1          540,                    540,                                    //54.5Mhz
  89      =1          2,
  90      =1          #else
  91      =1          1080,                   1080,
  92      =1          1,
  93      =1          #endif
  94      =1          0
  95      =1          //----------------------------------------------------
  96      =1          #elif defined WSVGA                                             // Thosiba
  97      =1          1024,                   600,
  98      =1          8,                              3,
  99      =1          1,//80,                         
 100      =1          ACTIVE_LOW,             ACTIVE_LOW,
 101      =1          #ifdef DOUBLE_PIXEL
 102      =1          325,                    450,
 103      =1          2,
 104      =1          #else
 105      =1          500,                    550,                                    //50Mhz
 106      =1          1,
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 41  

 107      =1          #endif
 108      =1          0
 109      =1          //----------------------------------------------------
 110      =1  
 111      =1          #elif defined SVGA
 112      =1          //NEC NL8060AC26-11 SVGA
 113      =1          800,                    600,
 114      =1          2,                              1,
 115      =1          13,
 116      =1          ACTIVE_LOW,             ACTIVE_LOW,
 117      =1          #ifdef DOUBLE_PIXEL
 118      =1          384,                    500,                                    //38.4MHz
 119      =1          2,
 120      =1          #else
 121      =1          670,                    1000,
 122      =1          1,
 123      =1          #endif
 124      =1          0
 125      =1          //----------------------------------------------------
 126      =1          #elif defined VGA
 127      =1          //NEC NL6448AC33        VGA                                     // OK with SetPanelRegisters
 128      =1          640,                    480,
 129      =1          10,                             1,
 130      =1          4,
 131      =1          ACTIVE_LOW,             ACTIVE_LOW,
 132      =1          #ifdef DOUBLE_PIXEL
 133      =1          130,                    150,                                    //25.2MHz
 134      =1          2,
 135      =1          #else
 136      =1          250,                    300,
 137      =1          1,
 138      =1          #endif
 139      =1          0
 140      =1          //----------------------------------------------------
 141      =1  
 142      =1          #elif defined WVGA
 143      =1          // Panasonic  EDTCB27QBF WVGA
 144      =1          800,                    480,
 145      =1          4,                              1,
 146      =1          7,
 147      =1          ACTIVE_LOW,             ACTIVE_LOW,
 148      =1          #ifdef DOUBLE_PIXEL
 149      =1          166,                    200,                                    //33.2MHz
 150      =1          2,
 151      =1          #else
 152      =1          332,                    360,                                    //33.2MHz
 153      =1          1,
 154      =1          #endif
 155      =1          0
 156      =1  
 157      =1          //----------------------------------------------------
 158      =1          #else
 159      =1          // Default : XGA panel
 160      =1          // Samsung  LT150x1-151 XGA
 161      =1          1024,                   768,
 162      =1          68,                             1,
 163      =1          80,
 164      =1          ACTIVE_LOW,             ACTIVE_LOW,
 165      =1          #ifdef DOUBLE_PIXEL
 166      =1          325,                    400,                                    //32.5Mhz
 167      =1          2,
 168      =1          #else
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 42  

 169      =1          650,                    800,                                    //32.5Mhz
 170      =1          1,
 171      =1          #endif
 172      =1          0
 173      =1          #endif
 174      =1          };
 175      =1  
 176      =1  */
  17          #include "osdmenu.h"
   1      =1  //osdmenu.h
   2      =1  //LJY10292001
   3      =1  #ifndef __OSDMENU__
   4      =1  #define __OSDMENU__
   5      =1  
   6      =1  //=======================================================================
   7      =1  // 
   8      =1  //BYTE GetOSDDuration(void);
   9      =1  
  10      =1  void ResetVideoValue(void);
  11      =1  //#if defined( SUPPORT_PC ) || defined( SUPPORT_DTV )
  12      =1  //void ResetPCValue(void);
  13      =1  //#endif
  14      =1  BYTE GetOSDMenuLevel( void );
  15      =1  
  16      =1  void DrawMenulist(BYTE);
  17      =1  void Display_EnterPin(void);
  18      =1  void OSDHighMenu_sub(void);
  19      =1  void ResetOSDValue(void);
  20      =1  #ifdef E_Wintek
           =1 void ResetUESROSDValue(void);
           =1 #endif
  23      =1  //BYTE OnChangingValue(void);
  24      =1  //Not used yet *******************BYTE OnChangingTime(void);
  25      =1  
  26      =1  //WORD GetOSDclock(void);
  27      =1  
  28      =1  void InitOSDMenu(void);
  29      =1  BYTE CloseOSDMenu(void);
  30      =1  void OpenOSDMenu(void);
  31      =1  void OSDHighMenu(void);
  32      =1  void OSDSelect(void);
  33      =1  void OSDCursorMove(BYTE flag );
  34      =1  void OSDLeftRight(BYTE flag );
  35      =1  void OSDValueUpDn(BYTE flag);
  36      =1  WORD SetItemValue( BYTE id, BYTE flag );
  37      =1  BYTE DoAction(BYTE id);
  38      =1  
  39      =1  BYTE SaveValue1(void);
  40      =1  void ClearValueWin(void);
  41      =1  
  42      =1  void OSDNumber( BYTE num );
  43      =1  
  44      =1  void Set4WideScreen(BYTE id);
  45      =1  
  46      =1  void SetRGBContrast( BYTE id, BYTE val );
  47      =1  BYTE SetPCColorTemp(BYTE flag);
  48      =1  void ResetPanelAttributeValue(void);
  49      =1  WORD GetItemValue( BYTE);
  50      =1  void DisplayViewBar( WORD,BYTE);
  51      =1  void DrawNum(WORD, CODE_P struct NumType *, WORD);
  52      =1  void DrawStringByLang( WORD, CODE_P struct EnumType *, WORD);
  53      =1  
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 43  

  54      =1  void DisplayVolumebar(BYTE val);
  55      =1  BYTE GetOSDLang(void);
  56      =1  void InitOSDMenuXY(void);
  57      =1  
  58      =1  void Display_TVGuide_Window(void);
  59      =1  void Display_TVGuide_Status(void);
  60      =1  
  61      =1  void ChangeVchip_LevelCursor(BYTE);
  62      =1  void ChangeVchip_ContentCursor(BYTE);
  63      =1  void Select_VchipLevel(void);
  64      =1  void SetVideoMode(BYTE mode);
  65      =1  BYTE GetVideoDatawithOffset(BYTE offset);
  66      =1  void SetVideoContrast(BYTE newv);
  67      =1  void SetVideoBrightness(BYTE newv);
  68      =1  void SetVideoHue(BYTE newv) ;
  69      =1  void SetVideoSaturation(BYTE svtype, BYTE newv) ;
  70      =1  BYTE SetVideoSharpness(BYTE flag) ;
  71      =1  void SetVideoBacklight(BYTE newv) ;
  72      =1  //------------------------------------------------andy awt 981013
  73      =1  //void DaySelect(BYTE);
  74      =1  void CAMOutDSel(BYTE val);
  75      =1  void DVRAodioSel(BYTE  val);
  76      =1  
  77      =1  //------------------------------------------------andy awt 981013
  78      =1  
  79      =1  void DisplayLineOSD(void);      // OSD Line display Demo
  80      =1  
  81      =1  
  82      =1  struct MenuType {
  83      =1          BYTE    width,  height;
  84      =1          BYTE    TitleColor;     
  85      =1          BYTE    CursorColor;
  86      =1  };
  87      =1  
  88      =1  struct NumType {
  89      =1          BYTE    PrePostCharLen;         // high nibble(pre) / low nibble(post)
  90      =1          BYTE    PrePostChar[4];
  91      =1  };
  92      =1  
  93      =1  struct NumberStringType {
  94      =1          BYTE    x, y;
  95      =1          BYTE    width;
  96      =1          BYTE    BackColor;
  97      =1          BYTE    Radix;
  98      =1          BYTE    NumColor;
  99      =1          BYTE    MaxLen;                         // maximum length of string
 100      =1          BYTE    PrePostCharLen;         // high nibble(pre) / low nibble(post)
 101      =1          BYTE    PrePostChar[3];
 102      =1  };
 103      =1  
 104      =1  struct TimeType {
 105      =1          BYTE    x, y;
 106      =1          BYTE    width;
 107      =1          BYTE    BackColor;
 108      =1          BYTE    Format;                         //_24H_TIME
 109      =1          BYTE    TimeColor;
 110      =1          BYTE    CursorColor;
 111      =1  };
 112      =1  
 113      =1  struct EnumType {
 114      =1          BYTE    Sz;//size
 115      =1          BYTE    ByLang;
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 44  

 116      =1          BYTE    Str[15];                        // doesn't matter the size !!!
 117      =1  };
 118      =1  
 119      =1  #define ICON_CH_SZ              2
 120      =1  //#define BAR_NUM_SZ            4
 121      =1  #define ICON_BUF_SZ             2
 122      =1  struct DefineMenu {
 123      =1          //WORD                                          Icon[ICON_BUF_SZ];      
 124      =1          BYTE                            CODE    *Icon;
 125      =1          BYTE                                            **Desc;                         
 126      =1          BYTE                                            PreFnId, 
 127      =1                                                                  PostFnId;
 128      =1  //      void            (*CalltoFunction)(void);                                    // Un/Dn/Sel Function
 129      =1          BYTE                                            IconColor;                      //NIL: not to display icon
 130      =1          BYTE                                            DescColor;                      //NIL: not to display desc. (IconColor==NIL && DescColor==NIL)->Last Item
 131      =1          struct DefineMenu       CODE    *Child;
 132      =1          BYTE                                            Type;                           // MENU, CHOICEMENU, BAR, NUMBER, TIME, ACTION, ENUM_STRING
 133      =1          BYTE                                            ActiveWithCursor;
 134      =1          BYTE                                            Id;
 135      =1          BYTE                            CODE    *TypeData;      //MenuType, BarType, NumType,,,
 136      =1  } ;
 137      =1  
 138      =1  struct PictureInfo {
 139      =1  
 140      =1          BYTE Register_Addr;
 141      =1          BYTE EEPROM_Addr;
 142      =1          struct RegisterInfo     CODE    *Control_Range;
 143      =1  };
 144      =1  
 145      =1  
 146      =1  //-------------------------------------------------------------------
 147      =1  // OSD Window Information
 148      =1  //-------------------------------------------------------------------
 149      =1  // Window Number
 150      =1  #define OSDCURSORWINDOW                 1
 151      =1  #define OSDMENUWINDOW                   OSDCURSORWINDOW+1
 152      =1  #define OSDMENU_TOPWIN                  OSDCURSORWINDOW+2
 153      =1  #define OSDMENU_TITLEWIN                OSDCURSORWINDOW+3
 154      =1  #define OSDBARWINDOW                    OSDCURSORWINDOW
 155      =1  
 156      =1  #define TECHWELLOGO_OSDWIN      1       
 157      =1  #define TVINFO_OSDWIN           2       
 158      =1  #define FONTTEST_OSDWIN         2       
 159      =1  #define INPUTINFO_OSDWIN        3  
 160      =1  #define RATINGINFO_OSDWIN       1       
 161      =1  #define PCINFO_OSDWIN           3//4/   
 162      =1  
 163      =1  //-------------OSDMENU_TITLEWIN------------------------------------------------------
 164      =1  // Window Start address
 165      =1  #define OSDMENU_MAINADDR        0
 166      =1  #define OSDMENU_SUBADDR     OSDMENU_MAINADDR+15    //25*9:196
 167      =1  #define OSDMENU_BARADDR         175 //OSDMENU_SUBADDR+225    //256   //25x2:50
 168      =1  
 169      =1  #define INPUTINFO_ADDR          160     // 9x1:9
 170      =1  #ifdef WQVGA
           =1 #define INPUTINFO1_ADDR         INPUTINFO_ADDR+17       //17x3:51
           =1 #else
 173      =1  #define INPUTINFO1_ADDR         INPUTINFO_ADDR+34       //17x2:51
 174      =1  #endif
 175      =1  
 176      =1  #define MUTEINFO_ADDR       INPUTINFO1_ADDR+51  // 4x1:4
 177      =1  #define TVCHINFO_ADDR           MUTEINFO_ADDR//324      // 3X1:3
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 45  

 178      =1  #define LOGO_ADDR                       0
 179      =1  #define RATINGINFO_ADDR         0       //addr:210(8x1:8)
 180      =1  #define PCMEASUREINFO_ADDR  OSDMENU_BARADDR //10x1
 181      =1  
 182      =1  
 183      =1  //--------------------------------------------------------------------
 184      =1  // OSD Menu Position Range
 185      =1  #if ((defined WQVGA) && (defined ANALOG_7INCH)) || ((defined QVGA) && (defined SHARP_LQ050Q5DR01))
           =1         #define OSD_PHR_ PHR_/2
           =1 #else
 188      =1          #define OSD_PHR_ PHR_
 189      =1  #endif
 190      =1  
 191      =1  #define OSDHSTART_MAX (OSD_PHR_-(12+1)*25 - 56*2 -4)  //PHR - (pixelsize +Hspace)*MenuWidth - Hborder*2 - 
             -outlinewidth*2
 192      =1  #define OSDVSTART_MAX (PVR_-(18+11)*9 - 5*2 ) //  PVR - (Linesize+Vspace)*MENU_HEIGHT - Vborder*2  - outli
             -newidth*2
 193      =1  
 194      =1  #define OSDMENUX_MIN 1//0
 195      =1  #define OSDMENUX_MAX (OSDHSTART_MAX>>3)
 196      =1  #define OSDMENUX_50  (OSDHSTART_MAX>>4)
 197      =1  
 198      =1  #define OSDMENUY_MIN 2//0
 199      =1  #define OSDMENUY_MAX (OSDVSTART_MAX>>2)
 200      =1  #define OSDMENUY_50  (OSDVSTART_MAX>>3)
 201      =1  
 202      =1  //--------------------------------------------------------------------
 203      =1  // OSD Menu Width, Height 
 204      =1  #ifdef E_Wintek
           =1 #define ICON_HIGH                               0x14
           =1 #else
 207      =1  #define ICON_HIGH                               0x0a
 208      =1  #endif
 209      =1  #define TOTAL_MAX_HIGHT                 9
 210      =1  
 211      =1  #define TOPMENU_WIDTH                   2
 212      =1  #define TOTAL_TOP_HEIGHT                5       // Include blank line!
 213      =1  
 214      =1  #define TOPMENU_HEIGHT                  4       
 215      =1  
 216      =1  #if (defined QVGA) && (defined SHARP_LQ050Q5DR01)
           =1 #define MENU_WIDTH                              17 //23//25 
           =1 #define TITLE_MAX_DESC                  17//25  //
           =1 #define BAR_LENGTH                              0
           =1 #else
 221      =1  #define MENU_WIDTH                              23//23//25 
 222      =1  #define TITLE_MAX_DESC                  23//25  //
 223      =1  #define BAR_LENGTH                              5//8
 224      =1  #endif
 225      =1  
 226      =1  #define MENU_HEIGHT                             7//6 
 227      =1  
 228      =1  #define BARNUM_LENGTH                   8       //11
 229      =1  #ifdef REFERENCE
           =1 #define BACK_COLOR                              BG_COLOR_CYAN
           =1 #define DEFAULT_COLOR                   BG_COLOR_CYAN   | CH_COLOR_WHITE
           =1 //#define ACTIVE_COLOR                  BG_COLOR_YELLOW | CH_COLOR_WHITE
           =1 #define TITLE_BACK_COLOR                BG_COLOR_MAGENTA
           =1 #define TITLE_COLOR                             TITLE_BACK_COLOR | CH_COLOR_YELLOW
           =1 #define COMMENT_COLOR                   TITLE_BACK_COLOR | CH_COLOR_WHITE
           =1 #define CURSOR_COLOR                    BG_COLOR_YELLOW | CH_COLOR_BLUE
           =1 #define OSD_INFO_COLOR                  DEFAULT_COLOR
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 46  

           =1 #define BAR_COLOR                               DEFAULT_COLOR   
           =1 #define BAR_NUM_COLOR                   DEFAULT_COLOR
           =1 #define NUM_COLOR                               DEFAULT_COLOR
           =1 
           =1 #define OSDMENU_OUTLINE_COLOR   BG_COLOR_BLUE
           =1 
           =1 #else
 245      =1  #define BACK_COLOR                              BG_COLOR_CYAN
 246      =1  #define DEFAULT_COLOR                   BG_COLOR_CYAN | CH_COLOR_WHITE
 247      =1  //#define ACTIVE_COLOR                  BG_COLOR_YELLOW | CH_COLOR_WHITE
 248      =1  #define TITLE_BACK_COLOR                BG_COLOR_BLUE
 249      =1  #define TITLE_COLOR                             TITLE_BACK_COLOR | CH_COLOR_YELLOW
 250      =1  #define COMMENT_COLOR                   TITLE_BACK_COLOR | CH_COLOR_WHITE
 251      =1  #define CURSOR_COLOR                    BG_COLOR_YELLOW  | CH_COLOR_BLUE
 252      =1  #define OSD_INFO_COLOR                  BG_COLOR_CYAN    | CH_COLOR_GREEN
 253      =1  #define BAR_COLOR                               DEFAULT_COLOR   
 254      =1  #define BAR_NUM_COLOR                   DEFAULT_COLOR
 255      =1  #define NUM_COLOR                               DEFAULT_COLOR
 256      =1  
 257      =1  #define VER_COLOR               BG_COLOR_CYAN   | CH_COLOR_YELLOW   /// V1.1 03/07/07 simonsung
 258      =1  
 259      =1  
 260      =1  #define OSDMENU_OUTLINE_COLOR   BG_COLOR_CYAN
 261      =1  #endif 
 262      =1  
 263      =1  
 264      =1  //DisplayedOSD
 265      =1  //              new       |     MENU    TVINFO          CC              INPUTINFO               PCINFO          RATINGINFO
 266      =1  //      current   |
 267      =1  //============|=========================================================================
 268      =1  //      MENU      |                     TVINFO          --              INPUTINFO               PCINFO          MENU + RATINGINFO       
 269      =1  //                        |                                              
 270      =1  //------------|-------------------------------------------------------------------------
 271      =1  //      TVINFO    |     MENU    TVINFO          --              INPUTINFO               PCINFO          TVINFO+RATING
 272      =1  //------------|-------------------------------------------------------------------------
 273      =1  //      CC                |     MENU->  TVINFO->                        INPUTINFO->             PCINFO          RATINGINFO
 274      =1  //                        |      CC              CC                                      CC                                              
 275      =1  //------------|-------------------------------------------------------------------------
 276      =1  //      INPUTINFO |     MENU    TVINFO          --              INPUTINFO               PCINFO          --
 277      =1  //------------|-------------------------------------------------------------------------
 278      =1  //      PCINFO    |     MENU    x                       x               INPUTINFO               PCINFO          x
 279      =1  //------------|-------------------------------------------------------------------------
 280      =1  //      RATINGINFO|     MENU    TVINFO     RATING   INPUTINFO           x                       RATINGINFO
 281      =1  //                                                                      
 282      =1  
 283      =1  //=======================================================================================
 284      =1  // OSD Menu Constant define.
 285      =1  //=======================================================================================
 286      =1  //Time type
 287      =1  #define _24H_TIME               1
 288      =1  
 289      =1  //for previous, next, parent or child
 290      =1  #define YES                             0xfe    
 291      =1  #define NO                              0
 292      =1  
 293      =1  
 294      =1  //#define OVERWRITE             0
 295      =1  //#define POPUP                 1
 296      =1  
 297      =1  //CursorMove
 298      =1  #define VERT                    0
 299      =1  #define HORI                    1
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 47  

 300      =1  
 301      =1  //Type of MenuItem
 302      =1  #define OSDMENU                 1
 303      =1  #define CHOICEMENU              2
 304      =1  #define ACTION                  3
 305      =1  #define BAR                             4
 306      =1  #define NUMBER                  5
 307      =1  #define CHOICE                  6
 308      =1  #define ENUM_STRING             7 //YESNO                       7
 309      =1  #define CHOICE1                 8
 310      =1  #define TIME                    9
 311      =1  #define NUMBER_STRING   10
 312      =1  #define TEXT_STR              11   // V1.1 02/28/07 simonsung
 313      =1  
 314      =1  
 315      =1  //Bar type
 316      =1  #define LEFT_FILLED             1
 317      =1  #define RIGHT_FILLED    2
 318      =1  #define NO_FILLED               3
 319      =1  
 320      =1  //OSDmenu up and down key
 321      =1  #define UP                                      1
 322      =1  #define DN                                      2
 323      =1  #define RIGHT                           3
 324      =1  #define LEFT                            4
 325      =1  
 326      =1  // Action Id
 327      =1  #define DISP_INFO                       0x16
 328      =1  
 329      =1  #define INPUTSELECTION                          0x2f
 330      =1  
 331      =1  #define CHANGE_TO_COMPOSITE                     (0x20|CH_TW2835)                        // Low nibble need to start from 1 
 332      =1  #define CHANGE_TO_SVIDEO                        (0x20|SVIDEO)                           // so that it match with COMPOSITE...
 333      =1  #define CHANGE_TO_COMPONENT                     (0x20|COMPONENT)                
 334      =1  #define CHANGE_TO_DTV                           (0x20|DTV)              
 335      =1  #define CHANGE_TO_TV                            (0x20|TV)                                       
 336      =1  #define CHANGE_TO_PC                            (0x20|PC)                                       
 337      =1  #define CHANGE_TO_DIGITALVGA            (0x20|DIGITALVGA)                       
 338      =1  #define CHANGE_TO_SCART                         (0x20|SCART)                            
 339      =1  
 340      =1  
 341      =1  #define OSDPOSITIONMODE     0x10
 342      =1  #define OSD_VPOS                        0x11
 343      =1  #define OSD_HPOS                        0x12
 344      =1  #define OSD_HALFTONE            0x13
 345      =1  #define OSD_DURATION            0x14
 346      =1  #define RESET_OSDVALUE          0x15
 347      =1  #define OSDLANG                         0x16
 348      =1  
 349      =1  #define PANEL_CONTRAST          0x58
 350      =1  #define PANEL_BRIGHTNESS        0x59
 351      =1  #define PANEL_HUE                       0x5a
 352      =1  #define PANEL_SHARPNESS         0x5b
 353      =1  #define PANEL_SATURATION        0x5c
 354      =1  
 355      =1  #define PC_VPOS                         0x43
 356      =1  #define PC_HPOS                         0x44
 357      =1  #define PC_HSIZE                        0x4d
 358      =1  
 359      =1  #define PC_CLOCK                        0x45
 360      =1  #define PC_PHASE                        0x46
 361      =1  
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 48  

 362      =1  #define AUTOADJUST                      0x47
 363      =1  #define AUTOADJUST2                     0x48
 364      =1  //#define SAVE_AUTOADJUST               0x49
 365      =1  #define RESET_AUTOADJUST        0x4a
 366      =1  
 367      =1  #define PCCOLORADJUST           0x4b
 368      =1  #define SAVE_COLORADJUST        0x4c
 369      =1  //#define RESET_COLORADJUST     0x4d
 370      =1  
 371      =1  #define RESET_PCVALUE           0x4e
 372      =1  #define CameraOSD                       0x4f
 373      =1  
 374      =1  #define PC_COLOR_MODE           0x3f
 375      =1  #define PC_COLOR_TEMP           0x30
 376      =1  #define PC_COLOR_MODE1          0x31
 377      =1  #define PC_COLOR_MODE2          0x32
 378      =1  #define PC_COLOR_MODE3          0x33
 379      =1  #define PC_COLOR_USER           0x34
 380      =1  #define PC_COLOR_R                      0x35
 381      =1  #define PC_COLOR_G                      0x36
 382      =1  #define PC_COLOR_B                      0x37
 383      =1  
 384      =1  #define VIDEO_MODE                      0x90
 385      =1  #define VIDEO_MODE1                     0x91
 386      =1  #define VIDEO_MODE2                     0x92
 387      =1  #define VIDEO_MODE3                     0x93
 388      =1  #define VIDEO_USER                      0x94
 389      =1  #define VIDEO_CONTRAST          0x95
 390      =1  #define VIDEO_BRIGHTNESS        0x96
 391      =1  #define VIDEO_SATURATION        0x97
 392      =1  #define VIDEO_HUE                       0x99
 393      =1  #define VIDEO_SHARPNESS         0x9a
 394      =1  #define VIDEO_BACKLIGHT         0x9c            // add new value 
 395      =1  #define RESET_VIDEOVALUE        0x9b
 396      =1  #ifdef E_Wintek
           =1 #define RESET_USERVALUE 0x9d
           =1 #endif
 399      =1  #define VIDEOPICTURE            0x9f
 400      =1  
 401      =1  #define INPUTSTD                        0x6f
 402      =1  #define CHANGE_TO_AUTO          0x60
 403      =1  #define CHANGE_TO_NTSC          (0x60 | NTSC)
 404      =1  #define CHANGE_TO_PAL           (0x60 | PAL)
 405      =1  #define CHANGE_TO_SECAM         (0x60 | SECAM)
 406      =1  #define CHANGE_TO_NTSC4         (0x60 | NTSC4)
 407      =1  #define CHANGE_TO_PALM          (0x60 | PALM)
 408      =1  #define CHANGE_TO_PALN          (0x60 | PALN)
 409      =1  #define CHANGE_TO_PAL60         (0x60 | PAL60)
 410      =1  
 411      =1  
 412      =1  
 413      =1  
 414      =1  #define CLOSED_CAPTION          0x7f
 415      =1  #define CLOSEDCAP_OFF           0x70
 416      =1  #define CLOSEDCAP_CC1           0x71
 417      =1  #define CLOSEDCAP_CC2           0x72
 418      =1  #define CLOSEDCAP_CC3           0x73
 419      =1  #define CLOSEDCAP_CC4           0x74
 420      =1  #define CLOSEDCAP_T1            0x75
 421      =1  #define CLOSEDCAP_T2            0x76
 422      =1  #define CLOSEDCAP_T3            0x77
 423      =1  #define CLOSEDCAP_T4            0x78
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 49  

 424      =1  
 425      =1  #define TV_GUIDE                        0x8f
 426      =1  #define NO_VCHIP_LOCK           0
 427      =1  #define VCHIP_TV_Y                      1
 428      =1  #define VCHIP_TV_Y7                     2
 429      =1  #define VCHIP_TV_G                      3
 430      =1  #define VCHIP_TV_PG                     4
 431      =1  #define VCHIP_TV_14                     5
 432      =1  #define VCHIP_TV_MA                     6
 433      =1  #define PASSWORD                        0x87
 434      =1  #define NEW_PASSWORD            0x88
 435      =1  #define CHK_PASSWORD            0x89
 436      =1  #define RET_CHK_PASSWORD        0x8a
 437      =1  
 438      =1  #define MPAA_RATING                     0x9f
 439      =1  #define NO_MPAA_RATING          0
 440      =1  #define MPAA_G                          1
 441      =1  #define MPAA_PG                         2
 442      =1  #define MPAA_PG_13                      3
 443      =1  #define MPAA_R                          4
 444      =1  #define MPAA_NC_17                      5
 445      =1  #define MPAA_X                          6
 446      =1  
 447      =1  #define TVINSTALL                       0xa0
 448      =1  #define SCAN_CHANNEL            0xa1
 449      =1  #define AIR_CABLE_TV            0xa3
 450      =1  #define STORE_CLEAR_TVCHN       0xa4
 451      =1  #define MTS                                     0xa5
 452      =1  #define EDIT_CHANNEL            0xa6
 453      =1          #define         MTS_STEREO                      0//0x10
 454      =1          #define         MTS_MONO                        1//0x11
 455      =1  
 456      =1  #define AUDIO_VOLUME            0xb7
 457      =1  
 458      =1  #if 0 //andy AWT8.4 20090811
           =1 
           =1 #define AUDIO_BALANCE           0xb9
           =1 #define AUDIO_BASS                      0xba
           =1 #define AUDIO_TREBLE            0xbb
           =1 
           =1 #define AUDIO_LOUDNESS          0xbc
           =1 #define AUDIO_EFFECT            0xbd
           =1 #define AUDIO_MUTE                      0xbe
           =1 #endif
 468      =1  
 469      =1  #define DayChoice           0xb8
 470      =1  #define CAMOSDONOFF         0xb9
 471      =1  #define GAUGEChoice         0xba
 472      =1  #define OsdLockChoice       0xbb
 473      =1  #define PRIORITYChoice      0xcA
 474      =1  #define DVRDisplay              0xcc
 475      =1  
 476      =1  #define CAMAONOFF                   0xc1
 477      =1  #define CAMBONOFF               0xc2
 478      =1  #define CAMCONOFF                   0xc3
 479      =1  #define CAMRONOFF                       0xc4
 480      =1  
 481      =1  #define IMAGEChoice         0xc5 
 482      =1  #define REARChoice          0xc6
 483      =1  #define JUMPChoice          0xc7
 484      =1  #define CAMOUTChoice        0xc8 
 485      =1  #define STIME_STEP                  0xc9
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 50  

 486      =1  #define TriggerVGA                  0xcb
 487      =1  #define IMAGE_A_Choice         0xcd
 488      =1  #define IMAGE_B_Choice         0xce
 489      =1  #define IMAGE_C_Choice         0xcf
 490      =1  
 491      =1  
 492      =1  #define MANUAL_TUNE_CHANNEL     0xab
 493      =1  #define FINE_TUNE_CHANNEL       0xac
 494      =1  #define STORE_PALCHANNEL        0xad
 495      =1  
 496      =1  //#define CLEAR_TVCHN                   0xb0
 497      =1  //#define STORE_TVCHN                   0xb1
 498      =1  
 499      =1  #define WIDESCREEN                      0xc0
 500      =1  #define WIDESCREEN_NORMAL       0 
 501      =1  #define WIDESCREEN_WIDE         1 
 502      =1  #define WIDESCREEN_PANO         2
 503      =1  #define WIDESCREEN_FULL         3 
 504      =1  #define WIDESCREEN_ZOOM         4 
 505      =1  
 506      =1  #define SYSTEM_CLOCK            0xd1
 507      =1  #define SYSTEM_CLOCK_H          0xd2
 508      =1  #define WAKEUP_TIME                     0xd3
 509      =1  #define WAKEUP_TIME_H           0xd4
 510      =1  #define WAKEUP_PR                       0xd5
 511      =1  #define OFF_TIME                        0xd6
 512      =1  #define OFF_TIME_H                      0xd7
 513      =1  #define SLEEP_TIMER                     0xd8
 514      =1  
 515      =1  #define Resolution                      0xe0
 516      =1  #define FPS                                     0xe1
 517      =1  #define Quality                         0xe2
 518      =1  #define RecordMode                      0xe3
 519      =1  #define RecordLength            0xe4
 520      =1  #define PreAlarmLength          0xe5
 521      =1  #define PostAlarmLength         0xe6
 522      =1  #define Apply                           0xe7
 523      =1  #define ManualRecordStart       0xe8
 524      =1  #define ManualRecordStop        0xe9
 525      =1  #define Snapshot                        0xea
 526      =1  #define FormatSD                        0xeb
 527      =1  #define AudioRecord                     0xec
 528      =1  #define FirmwareUpdate          0xed
 529      =1  #define ChangePassword          0xee
 530      =1  #define OverWrite                       0xef
 531      =1  
 532      =1  
 533      =1  
 534      =1  
 535      =1  #define Year                            0x20
 536      =1  #define Month                           0x21
 537      =1  #define Day                                     0x22
 538      =1  #define Hour                            0x23
 539      =1  #define Minute                          0x24
 540      =1  
 541      =1  #define DaylightSaving                          0x25
 542      =1  #define TimeBeginesMonth                        0x26
 543      =1  #define TimeBeginesWeek                         0x27
 544      =1  #define TimeBeginesTime                         0x28
 545      =1  #define StandardTimeBeginesMonth        0x29
 546      =1  #define StandardTimeBeginesWeek         0x2a
 547      =1  #define StandardTimeBeginesTime         0x2b
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 51  

 548      =1  #define TimeZone                                        0x2c
 549      =1  #define FirstNumber                                     0x2d
 550      =1  #define SecondNumber                            0x2e
 551      =1  #define ThridNumber                                     0x2f
 552      =1  #define FourthNumber                            0x38
 553      =1  
 554      =1  
 555      =1  
 556      =1  #define OSDLANGI                        0xd9
 557      =1  #define OSDLANGII                       OSDLANGI+1
 558      =1  #define OSDLANGIII                      OSDLANGI+2
 559      =1  #define OSDLANGIV                       OSDLANGI+3
 560      =1  
 561      =1  
 562      =1  #define TOHIGHMENU                      0xf1
 563      =1  #define MOVECURSOR2FIRST        0xf2
 564      =1  #define RESET_ALL                       0xf3
 565      =1  #define EXITMENU                        0xf4
 566      =1  #define DVRParamApply           0xf5
 567      =1  #define DATETIMEApply           0xf6
 568      =1  
 569      =1  
 570      =1  #define CHOICE1_VAL                     0xfc
 571      =1  #define CHOICE_VAL                      0xfd
 572      =1  #define BAR_VAL                         0xfe
 573      =1  #define NUM_VAL                         0xff
 574      =1  
 575      =1  #define CAMNumberChoice     0xa3 
 576      =1  #define PelcoChoice         0xa4
 577      =1  #define Baud_rateChoice         0xa5
 578      =1  
 579      =1  #endif  // __OSDMENU__
  18          #include "osdbasic.h"
   1      =1  //osd_basic.h
   2      =1  //LJY11012001
   3      =1  #ifndef __OSD_BASIC__
   4      =1  #define __OSD_BASIC__
   5      =1  
   6      =1  // osd_basic.h
   7      =1  // char code
   8      =1  //#include "apilib.h"
   9      =1  
  10      =1  //ljy052903
  11      =1  //definition for internal OSD
  12      =1  #define FONT_WIDTH_TW88                 12
  13      =1  #define FONT_HEIGHT_TW88                18
  14      =1  #define PIXS_PER_XSTEP_TW88             8
  15      =1  #define LINES_PER_YSTEP_TW88    4
  16      =1  #define MAX_OSDWINDOW_TW88              8
  17      =1  
  18      =1  // Using TW88 OSD for Menu
  19      =1  #define FONT_WIDTH                      12
  20      =1  #define FONT_HEIGHT                     18
  21      =1  #define PIXS_PER_XSTEP          8
  22      =1  #define LINES_PER_YSTEP         4
  23      =1  #define MAX_OSDWINDOW           4
  24      =1  
  25      =1  #define MAX_FONT_BYTES          27
  26      =1  #define RAMFONT         0xFE
  27      =1  #define ROMFONT         0xFF
  28      =1  #define NO_UDFONT                       226 
  29      =1  
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 52  

  30      =1  #define FONT_ROM        1
  31      =1  #define FONT_RAM        2
  32      =1  
  33      =1  
  34      =1  /////////////////////////////////
  35      =1  // Old Registers...
  36      =1  /*
  37      =1          #define TW88_WIN1ATTR           0x76
  38      =1          #define TW88_WIN1XSTART         0x77
  39      =1          #define TW88_WIN1YSTART         0x78
  40      =1          #define TW88_WIN1WIDTH          0x79
  41      =1          #define TW88_WIN1HEIGHT         0x7a
  42      =1          #define TW88_WIN1BRDATTR        0x7b
  43      =1          #define TW88_WIN1BRDWIDTH       0x7c
  44      =1          #define TW88_WIN1BRDHEIGHT      0x7d
  45      =1          #define TW88_WIN1XSPACE         0x7e            // between characters.
  46      =1          #define TW88_WIN1YSPACE         0x7f
  47      =1          #define TW88_WIN1SADDR          0x80            // starting address of OSD ram for Windows 1
  48      =1  */
  49      =1  /////////////////////////////////
  50      =1  
  51      =1  // OSD
  52      =1  #define TW88_ENABLERAM          0x94    // TW8804C
  53      =1  #define TW88_FONTRAMADDR        0x99    // TW8804C
  54      =1  #define TW88_FONTRAMDATA        0x9a    // TW8804C
  55      =1  #define TW88_OSDRAMADDRHI       0x95    // TW8804C
  56      =1  #define TW88_OSDRAMADDRLO       0x96    // TW8804C
  57      =1  #define TW88_OSDRAMDATAHI       0x97    // TW8804C
  58      =1  #define TW88_OSDRAMDATALO       0x98    // TW8804C
  59      =1  #define TW88_MULTISTART         0x9b    // TW8804C
  60      =1  #define TW88_OSDLOCKUPSEL       0x9c
  61      =1  #define TW88_WINNUM                     0x9e    // TW8804C
  62      =1  #define TW88_WINATTR            0x9f    //
  63      =1  #define TW88_WINXSTART          0xa1    //
  64      =1  #define TW88_WINYSTART          0xa2    //
  65      =1  #define TW88_WINSTART_HI        0xa0    //
  66      =1  #define TW88_WINWIDTH           0xa3    //
  67      =1  #define TW88_WINHEIGHT          0xa4    //
  68      =1  #define TW88_WINBRDATTR         0xa5    //
  69      =1  #define TW88_WINBRDWIDTH        0xa6    //
  70      =1  #define TW88_WINBRDHEIGHT       0xa7    //
  71      =1  #define TW88_WINSPACE           0xa8    // between characters.
  72      =1  #define TW88_WINZOOM            0xa9    //
  73      =1  #define TW88_WINSADDRHI         0xa9    // starting address of OSD ram for Windows 1
  74      =1  #define TW88_WINSADDRLO         0xaa    // starting address of OSD ram for Windows 1
  75      =1  
  76      =1  #define TW88_WINSHADOW          0xab    //
  77      =1  #define TW88_WINBLENDING        0xac    //
  78      =1  #define TW88_WINCHEFFECT        0xad    //
  79      =1  
  80      =1  
  81      =1  //Attributes for OSD
  82      =1  #define WINZOOMx1                       0x01
  83      =1  #define WINZOOMx2                       0x02
  84      =1  #define WINZOOMx3                       0x03
  85      =1  #define WINZOOMx4                       0x04
  86      =1  #define SHOW                            0x08    
  87      =1  
  88      =1  #define EXTENDED_COLOR          0x80
  89      =1  #define BG_COLOR_BLACK          0x00    //For background color of window, border, and char. 
  90      =1  #define BG_COLOR_RED            0x40    
  91      =1  #define BG_COLOR_GREEN          0x20
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 53  

  92      =1  #define BG_COLOR_YELLOW         0x60
  93      =1  #define BG_COLOR_BLUE           0x10
  94      =1  #define BG_COLOR_MAGENTA        0x50
  95      =1  #define BG_COLOR_CYAN           0x30
  96      =1  #define BG_COLOR_WHITE          0x70
  97      =1  #define BG_COLOR_TRANS          0x80    
  98      =1  #define BG_COLOR_MASK           0xf0    
  99      =1  
 100      =1  #define CH_COLOR_BLACK          0x00    //For color of char.
 101      =1  #define CH_COLOR_RED            0x04    
 102      =1  #define CH_COLOR_GREEN          0x02
 103      =1  #define CH_COLOR_YELLOW         0x06
 104      =1  #define CH_COLOR_BLUE           0x01
 105      =1  #define CH_COLOR_MAGENTA        0x05
 106      =1  #define CH_COLOR_CYAN           0x03
 107      =1  #define CH_COLOR_WHITE          0x07
 108      =1  #define CH_BLINK                        0x08    
 109      =1  #define CH_COLOR_MASK           0x0f    
 110      =1  
 111      =1  #define CL_BLACK                        0x00    //For color of char.
 112      =1  #define CL_BLUE                         0x01
 113      =1  #define CL_GREEN                        0x02
 114      =1  #define CL_CYAN                         0x03
 115      =1  #define CL_RED                          0x04    
 116      =1  #define CL_MAGENTA                      0x05
 117      =1  #define CL_YELLOW                       0x06
 118      =1  #define CL_WHITE                        0x07
 119      =1  #define CL_BLINK                        0x08    
 120      =1  
 121      =1  // 0x76*(WindowNo*0x0b)
 122      =1  #define WINDOW_DISABLE          0x00
 123      =1  #define WINDOW_ENABLE           0x01
 124      =1  #define WINDOW_3D_ENABLE    0x04
 125      =1  #define WINDOW_3D_BOTTOM    0x08
 126      =1  #define WINDOW_3D_TOP       0x00
 127      =1  #define WINDOW_TRANS_ENABLE 0x80
 128      =1  
 129      =1  #define WINBDCOLOR_ENABLE       0x80
 130      =1  #define WINBDCOLOR_EXTENT       0x80
 131      =1  
 132      =1  
 133      =1  #define WINBLENDING_DISABLE 0x00
 134      =1  #define WINBLENDING_BACK    0x10
 135      =1  #define WINBLENDING_FORE    0x20
 136      =1  #define WINBLENDING_ALL     0x30
 137      =1  
 138      =1  #define WINSHADOW_ENABLE        0x80
 139      =1  // 0xc8*WindowNo
 140      =1  #define WIN_MULTICOLOR_ENABLE 0x20
 141      =1  #define WIN_CH_EFFECT_ENABLE  0x10
 142      =1  #define WIN_CH_EFFECT_SHADOW  0x08
 143      =1  
 144      =1  
 145      =1  
 146      =1  ///////// TW8804C /////////////
 147      =1  // Window Number
 148      =1  #define WINNUM1                         1
 149      =1  #define WINNUM2                         2
 150      =1  #define WINNUM3                         3
 151      =1  #define WINNUM4                         4
 152      =1  
 153      =1  // Index 0x9f Defination
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 54  

 154      =1  #define WIN_BG_COLOR_EX         0x80
 155      =1  #define WIN_BG_COLOR_EX0        0x00
 156      =1  #define WIN_3D_TYPE                     0x08
 157      =1  #define WIN_3D_TYPE0            0x00
 158      =1  #define WIN_3D_EN                       0x04
 159      =1  #define WIN_3D_EN0                      0x00
 160      =1  #define WIN_3D_LEVEL            0x02
 161      =1  #define WIN_EN                          0x01
 162      =1  #define WIN_EN0                         0x00
 163      =1  
 164      =1  // Index 0xa5 Defination
 165      =1  #define WIN_BD_EN                       0x80
 166      =1  #define WIN_BD_EN0                      0x00
 167      =1  #define WIN_BD_WIDTH(a)         a
 168      =1  
 169      =1  // Index 0xa6 Defination
 170      =1  #define WIN_BD_COLOR_EX         0x80
 171      =1  #define WIN_BD_COLOR_EX0        0x00
 172      =1  #define WIN_H_BD_W(a)           a
 173      =1  
 174      =1  // Index 0xa7 Defination
 175      =1  #define WIN_V_BD_W(a)           a
 176      =1  
 177      =1  // Index 0xa8
 178      =1  #define WIN_CH_VSPACE(a)        (a<<4)
 179      =1  #define WIN_CH_HSPACE(a)        a
 180      =1  
 181      =1  // Index 0xa9 Defination
 182      =1  #define WIN_VZOOM(a)            (a-1)
 183      =1  #define WIN_HZOOM(a)            (a-1)
 184      =1  #define WIN_SADDR(a)            a
 185      =1  
 186      =1  // Index 0xab
 187      =1  #define WIN_SHADOW_EN           0x80
 188      =1  #define WIN_SHADOW_EN0          0x00
 189      =1  #define WIN_SHADOW_W(a)         a
 190      =1  
 191      =1  // ad
 192      =1  #define WIN_SHADOW_COLOR_EX             0x80
 193      =1  #define WIN_SHADOW_COLOR_EX0    0x00
 194      =1  #define WIN_MULTI_EN                    0x40
 195      =1  #define WIN_MULTI_EN0                   0x00
 196      =1  #define WIN_V_EXT_EN                    0x20
 197      =1  #define WIN_V_EXT_EN0                   0x00
 198      =1  #define WIN_CH_BDSH_SEL(a)              a
 199      =1  #define SEL_BORDER                              0
 200      =1  #define SEL_SHADOW                              1
 201      =1  #define WIN_CH_BDSH_COLOR_EX    0x08
 202      =1  #define WIN_CH_BDSH_COLOR_EX0   0x00
 203      =1  
 204      =1  #define OSD_Win_Num(a)                  0x9e, a-1
 205      =1  #define OSD_Win_Start_Addr              0xa0
 206      =1  #define OSD_Win_Attr(a)                         a
 207      =1  #define OSD_Win_Start(h,v)                       (BYTE)(((WORD)h>>8) | (((WORD)v>>8)<<4)),(BYTE)h, (BYTE)v
 208      =1  #define OSD_Win_Width(a)                        a
 209      =1  #define OSD_Win_Height(a)                       a
 210      =1  #define OSD_Win_Border(a)                       a
 211      =1  #define OSD_Win_HBorder(a)                      a
 212      =1  #define OSD_Win_VBorder(a)                      a
 213      =1  #define OSD_Win_CH_Space(a)                     a
 214      =1  #define OSD_Win_ZM_SAddr(h,v,a)         ((h<<6)|(v<<4)|(a>>8)), (BYTE)a
 215      =1  #define OSD_Win_Shadow(a)                       a
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 55  

 216      =1  #define OSD_Win_Blending(a)                     a
 217      =1  #define OSD_Win_CH_BorderShadow(a)      a
 218      =1  
 219      =1  
 220      =1  #define SetOSDWindowNum(winno)          WriteTW88(TW88_WINNUM, winno-1)
 221      =1  
 222      =1  //#define  OSD_Window_Attr(Trans_en,Color,3D_Type,3D_en,W_en)       (((( Trans_en | Color ) | 3D_Type) | 3
             -D_en) | W_en)
 223      =1  #define  OSD_Window_Attr(a,b,c,d,e)                                                                     (((( a | b ) | c) | d) | e)
 224      =1  #define  OSD_WShadow_Attr(W_Shadow_en,Color,Width)                                      W_Shadow_en | Color | Width
 225      =1  //#define  OSD_Blending(en,level)                                                                               en | (level & 0x0f)
 226      =1  //#define  OSD_Ch_Effect(Multi, Effect_En, ShadowBorder, Color)         Multi | Effect_En | ShadowBorder | Color 
             - 
 227      =1  
 228      =1  
 229      =1  struct OSDStrInfo 
 230      =1  {
 231      =1          BYTE    cnt;
 232      =1          WORD    addr;
 233      =1          BYTE    attr;
 234      =1          DWORD   str;
 235      =1  };
 236      =1  /*
 237      =1  struct BarInfo {
 238      =1          struct RegisterInfo BarCnt;
 239      =1          BYTE    winno;
 240      =1          BYTE    xoff;
 241      =1          BYTE    yoff;
 242      =1          BYTE    color;
 243      =1          int             bar_cnt;
 244      =1  };
 245      =1  */
 246      =1  struct FontData {
 247      =1          BYTE    font[27];
 248      =1  } ;
 249      =1  
 250      =1  //====================================================================
 251      =1  //  Internal OSD Function
 252      =1  void CopyCharToOSDRAM_TW88(BYTE Addr, BYTE attr, BYTE ch);
 253      =1  void CopyUDCharToOSDRAM_TW88(BYTE Addr, BYTE attr, BYTE ch);
 254      =1  //BYTE GetOSDWindowWidth_TW88(BYTE winno);
 255      =1  WORD GetOSDWindowSA_TW88(BYTE winno);
 256      =1  void SetOSDWindowX_TW88(BYTE winno, BYTE x);
 257      =1  void SetOSDWindowY_TW88(BYTE winno, BYTE y);
 258      =1  void SetOSDWindowWidth_TW88(BYTE winno, BYTE w);
 259      =1  void SetOSDWindowSA_TW88(BYTE winno, WORD sa);
 260      =1  
 261      =1  void SetOSDItalicsAndUnderline(BYTE italics, BYTE underline);
 262      =1  
 263      =1  void SetOSDHBorderWidth_TW88(BYTE winno, BYTE w);
 264      =1  //BYTE GetOSDWindowColor_TW88(BYTE winno);
 265      =1  void SetOSDWindowColor_TW88(BYTE CCWin, BYTE color);
 266      =1  void EnableOSDRAMAndChangeFont(BYTE type);
 267      =1  void WriteCharToOSDRAM(WORD addr, BYTE ch, BYTE attr);
 268      =1  
 269      =1  
 270      =1  void ShowOSDWindowAll(BYTE on);
 271      =1  void ShowOSDWindow_TW88(BYTE winno, BYTE onoff);
 272      =1  void ClearOSD_TW88(void);
 273      =1  //void CreateOSDWindow_TW88(BYTE winno, BYTE x, BYTE y, BYTE w, BYTE h, WORD sa, BYTE attr);
 274      =1  /*not yet!!
 275      =1  //ljy012304...CC_ADJUST_POS
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 56  

 276      =1  void SetOSDWindowXS_TW88(BYTE winno, BYTE xs);
 277      =1  void SetOSDWindowYS_TW88(BYTE winno, BYTE ys);
 278      =1  */
 279      =1  
 280      =1  //====================================================================
 281      =1  //      OSDMenu Functions
 282      =1  
 283      =1  //--------------------------------------------------------------------
 284      =1  //      Functions used in only Menu
 285      =1  #define         CONVERT_CODE                    0x80
 286      =1  
 287      =1  void InitOSDWindow(BYTE *ptr);
 288      =1  
 289      =1  WORD GetOSDWindowX(BYTE winno);
 290      =1  WORD GetOSDWindowY(BYTE winno);
 291      =1  BYTE CreateOSDWindowOutline(BYTE winno, BYTE w, BYTE color);
 292      =1  void CreateOSDMenuWindow(BYTE, BYTE, BYTE, BYTE, BYTE, BYTE, BYTE);
 293      =1  void ClearOSDLine(BYTE winno, BYTE sx, BYTE sy, BYTE cnt, BYTE attr);
 294      =1  void WriteStringToAddr(WORD addr, BYTE *str, BYTE cnt);
 295      =1  void DrawAttrString(WORD addr, BYTE *str, BYTE cnt);
 296      =1  void DrawAttrCnt(WORD addr, BYTE color, BYTE cnt);
 297      =1  void ClearDataCnt(WORD, BYTE);
 298      =1  #define         SetOSDWindowX(A, B)                                                     SetOSDWindowX_TW88(A, B)
 299      =1  #define     SetOSDWindowY(A, B)                                                 SetOSDWindowY_TW88(A, B)
 300      =1  
 301      =1  
 302      =1  //--------------------------------------------------------------------
 303      =1  //      Functions used in Menu and others
 304      =1  #define         ShowOSDWindow(A, B)                                                     ShowOSDWindow_TW88(A, B)
 305      =1  #define     ClearOSD()                                                                  ClearOSD_TW88()
 306      =1  
 307      =1  //================================================================
 308      =1  //      Font
 309      =1  void DownloadUDFont(void);
 310      =1  #ifdef Hs_debug
           =1 void DisplayROMFont(BYTE);
           =1 void DisplayRAMFont(BYTE);
           =1 #endif
 314      =1  void DownloadFont(BYTE cod, CODE_P BYTE *fontdata);
 315      =1  //void DisplayGrid( void );
 316      =1  //void DisplayCone( void );
 317      =1  //void DisplayJapanese( void );
 318      =1  void TestRAMFont( void );
 319      =1  #ifdef BANKING
           =1 void DisplayMGrid( BYTE );
           =1 void DisplayMessage( void );
           =1 void DisplayChinese( void );
           =1 void DisplayJapanese( void );
           =1 void DisplayKorean( void );
           =1 void DisplayGridBank0( BYTE n );
           =1 void DisplayGridBank1( BYTE n );
           =1 #endif
 328      =1  
 329      =1  //================================================================
 330      =1  //      OSD COLOR
 331      =1  void Change_OSDColorLookup(void);
 332      =1  void Reset_OSDColorLookup(void);
 333      =1  
 334      =1  //====================================================================
 335      =1  //                              Conversion
 336      =1  //====================================================================
 337      =1  BYTE utoa(WORD value, BYTE *str, BYTE radix);
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 57  

 338      =1  BYTE ltoa_K(long value, BYTE *str, BYTE);
 339      =1  BYTE strlen( BYTE *str );
 340      =1  
 341      =1  #define CStrlen(A)                              strlen(A)
 342      =1  
 343      =1  void WaitEndofDisplayArea(void);
 344      =1  
 345      =1  #endif  // __OSD_BASIC__
  19          #include "Externs.h"
   1      =1  //
   2      =1  //Externs.h     : Register declaration
   3      =1  //
   4      =1  #ifdef INTERNAL_MCU
           =1 extern xdata BYTE REG00, REG01, REG02, REG03, REG04, REG05, REG06, REG07, REG08, REG09, REG0a, REG0b, REG0
             -c, REG0d, REG0e, REG0f,
           =1                   REG10, REG11, REG12, REG13, REG14, REG15, REG16, REG17, REG18, REG19, REG1a, REG1b, REG1c, REG1d, REG1
             -e, REG1f,
           =1                   REG20, REG21, REG22, REG23, REG24, REG25, REG26, REG27, REG28, REG29, REG2a, REG2b, REG2c, REG2d, REG2
             -e, REG2f,
           =1                   REG30, REG31, REG32, REG33, REG34, REG35, REG36, REG37, REG38, REG39, REG3a, REG3b, REG3c, REG3d, REG3
             -e, REG3f,
           =1                   REG40, REG41, REG42, REG43, REG44, REG45, REG46, REG47, REG48, REG49, REG4a, REG4b, REG4c, REG4d, REG4
             -e, REG4f,
           =1                   REG50, REG51, REG52, REG53, REG54, REG55, REG56, REG57, REG58, REG59, REG5a, REG5b, REG5c, REG5d, REG5
             -e, REG5f,
           =1                   REG60, REG61, REG62, REG63, REG64, REG65, REG66, REG67, REG68, REG69, REG6a, REG6b, REG6c, REG6d, REG6
             -e, REG6f,
           =1                   REG70, REG71, REG72, REG73, REG74, REG75, REG76, REG77, REG78, REG79, REG7a, REG7b, REG7c, REG7d, REG7
             -e, REG7f,
           =1                   REG80, REG81, REG82, REG83, REG84, REG85, REG86, REG87, REG88, REG89, REG8a, REG8b, REG8c, REG8d, REG8
             -e, REG8f,
           =1                   REG90, REG91, REG92, REG93, REG94, REG95, REG96, REG97, REG98, REG99, REG9a, REG9b, REG9c, REG9d, REG9
             -e, REG9f,
           =1                   REGa0, REGa1, REGa2, REGa3, REGa4, REGa5, REGa6, REGa7, REGa8, REGa9, REGaa, REGab, REGac, REGad, REGa
             -e, REGaf,
           =1                   REGb0, REGb1, REGb2, REGb3, REGb4, REGb5, REGb6, REGb7, REGb8, REGb9, REGba, REGbb, REGbc, REGbd, REGb
             -e, REGbf,
           =1                   REGc0, REGc1, REGc2, REGc3, REGc4, REGc5, REGc6, REGc7, REGc8, REGc9, REGca, REGcb, REGcc, REGcd, REGc
             -e, REGcf,
           =1                   REGd0, REGd1, REGd2, REGd3, REGd4, REGd5, REGd6, REGd7, REGd8, REGd9, REGda, REGdb, REGdc, REGdd, REGd
             -e, REGdf,
           =1                   REGe0, REGe1, REGe2, REGe3, REGe4, REGe5, REGe6, REGe7, REGe8, REGe9, REGea, REGeb, REGec, REGed, REGe
             -e, REGef,
           =1                   REGf0, REGf1, REGf2, REGf3, REGf4, REGf5, REGf6, REGf7, REGf8, REGf9, REGfa, REGfb, REGfc, REGfd, REGf
             -e, REGff;
           =1 
           =1 #endif  // internal MCU only variables
  23      =1  
  20          #include "audio.h"
   1      =1  
   2      =1  
   3      =1  extern  BYTE    AudioVol;
   4      =1  extern  BYTE    PCAudioVol;
   5      =1  
   6      =1  //BYTE ResetMSP(void);
   7      =1  //void SetMSPSCARTPrescale(void);
   8      =1  //void SetMSPSourceSel(void);
   9      =1  //void SetMSPVol(void);
  10      =1  
  11      =1  //BYTE AudioAutoStdDetection(void);
  12      =1  //BYTE SteroMonoDetection(void);
  13      =1  
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 58  

  14      =1  //BYTE TunerAudio(void);
  15      =1  //void ExtAudio(void);
  16      =1  //id PCAudio(void);
  17      =1  //id MuteOn(void);
  18      =1  //BYTE GetAudioVol(void);
  19      =1  BYTE ChangeVol(char);
  20      =1  //BYTE GetAudioBalance(void);
  21      =1  //BYTE ChangeBalance(char);
  22      =1  //BYTE GetAudioBass(void);
  23      =1  //BYTE ChangeBass(char);
  24      =1  //BYTE GetAudioTreble(void);
  25      =1  //BYTE ChangeTreble(char);
  26      =1  //BYTE GetAudioEffect(void);
  27      =1  //BYTE ChangeAudioEffect(char amount);
  28      =1  //void ToggleAudioMute(void);
  29      =1  //void CheckAndClearMuteOn(void);
  30      =1  
  31      =1  //BYTE IsAudioMuteOn(void);
  32      =1  //void SetAudioMute(BYTE on );
  33      =1  //void ChangeMTS(BYTE type);
  34      =1  //void AudioOff(void);
  35      =1  void AudioMute(bit mute);
  36      =1  
  37      =1  //#define AudioOn()                     SetMSPVol()
  38      =1  //void ResetAudioValue();
  21          #include "HS_keyremo.h"
   1      =1  #ifndef _HS_keyremo_
   2      =1  #define _HS_keyremo_
   3      =1  
   4      =1  //
   5      =1  // KeyRemo.h
   6      =1  // Default function for Key Input and Remocon Input
   7      =1  //
   8      =1  //=============================================================================
   9      =1  //                                  Operation Key Mapping
  10      =1  //=============================================================================
  11      =1  
  12      =1  
  13      =1  
  14      =1  #define  SelectMode 0
  15      =1  #define  JumpMode       1
  16      =1  
  17      =1  
  18      =1  
  19      =1  
  20      =1  extern BYTE NowModeState;
  21      =1  extern BYTE TriggerFlag;
  22      =1  extern bit      ParkFlag;
  23      =1  extern BYTE  Attr_A,Attr_B,Attr_C,Attr_R; 
  24      =1  extern BYTE TimeStep;
  25      =1  extern BYTE SEQFlag;
  26      =1  extern BYTE SEQIndex;
  27      =1  extern BYTE TriggerMode;
  28      =1  extern bit AVFlag;
  29      =1  extern bit VGAAudio;
  30      =1  
  31      =1  
  32      =1  
  33      =1  //BYTE TW2835Command(char,char,char,char,char);
  34      =1  void SetSourceMode(BYTE Index,char ,char ,char ,char );
  35      =1  void SetSelectMode(void);
  36      =1  //void PriorityOffSelectMode(void);
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 59  

  37      =1  void SetJumpMode(void);
  38      =1  void SetNowMode(void);
  39      =1  void SetRearSource(void);
  40      =1  void SetLeftSource(void);
  41      =1  void SetRightSource(void);
  42      =1  
  43      =1  
  44      =1  BYTE CheckTrigger(void);
  45      =1  void TriggerHandler(BYTE T_Flag);
  46      =1  void SEQMode(void);
  47      =1  
  48      =1  
  49      =1  
  50      =1  
  51      =1  #endif
  22          
  23          ///extern IDATA BYTE adc_i2c_address, CurrentADC;
  24          //extern        BYTE  CheckBuf;
  25          static  BYTE m_cStandard= 0;
  26          //=============================================================================
  27          //                                              Auto Detect
  28          //=============================================================================
  29          void SetAutoDetectStd(void)
  30          {
  31   1              BYTE val;
  32   1      
  33   1      //      if( GetInputSelection()==COMPONENT ) return;
  34   1      
  35   1              dPuts("\r\nSetAutoDetectStd");
  36   1              val = 0x80 | GetPossibleAutoDetectStdEE();              //AutoDetectStd
  37   1              WriteDecoder(SDTR, val);                // SDTR
  38   1              val = ReadDecoder(SDT);                 // SDT
  39   1              WriteDecoder(SDT,  val | 0x07); // SDT
  40   1      }
  41          
  42          void ClearAutoDetectStd(BYTE std)
  43          {
  44   1              BYTE val;
  45   1      
  46   1      //      if( GetInputSelection()==COMPONENT ) return;
  47   1      
  48   1              dPuts("\r\nClearAutoDetectStd");
  49   1      
  50   1              val = ReadDecoder(SDT); // SDT
  51   1              val = (val & 0xf8) | std;
  52   1              WriteDecoder(SDT,  val );
  53   1      }
  54          //=============================================================================
  55          //                                              Auto Panel H Period Control
  56          //=============================================================================
  57          void AutoPHPCalEnable(void)
  58          {
  59   1              #ifdef DEBUG
                      dPuts("\r\n +++++++++++++++++=>Auto PHP Enable");
                      #endif
  62   1              WriteDecoder( 0xb6, (ReadDecoder(0xb6) & 0x7f) );       // Auto PHP Enable
  63   1              WriteDecoder( 0xb2, ReadDecoder(0xb2) );
  64   1      
  65   1      }
  66          
  67          void AutoPHPCalDisable(void)
  68          {
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 60  

  69   1              #ifdef DEBUG
                      dPuts("\r\n +++++++++++++++++=>Auto PHP Disable");
                      #endif
  72   1              WriteDecoder( 0xb6, (ReadDecoder(0xb6) | 0x80) );       // Auto PHP Disable
  73   1              WriteDecoder( 0xb2, (ReadDecoder(0xb2)));
  74   1      
  75   1      }
  76          
  77          
  78          //=============================================================================
  79          //                              Video Input Functions   
  80          //=============================================================================
  81          //=============================================================================
  82          //                              Detect Video System by Decoder
  83          //=============================================================================
  84          #ifndef ID_CHECK_BY_FW
  85          BYTE DetectDecoderInput(void)
  86          {
  87   1              BYTE std;
  88   1              BYTE val;
  89   1      
  90   1              //----- Check No Input
  91   1              val = ReadDecoder(CSTATUS);             // Decoder status Register
  92   1              if( (val & 0xc0) != 0x40 ) {    // no decoder input
  93   2                      std = NOINPUT;
  94   2                      return std;
  95   2              }
  96   1              //----- Check Color System by decoder
  97   1              for ( std=0; std<10; std++ ) {
  98   2                      val = ReadDecoder(SDT);                         // SDT:0x1c
  99   2                      #ifdef DEBUG_DECODER
                              Printf("\r\nReadDecoder(0x1c): 0x%X", (WORD)val);
                              #endif
 102   2                      if ( val & 0x80 ) {
 103   3                              delay(10);
 104   3                      }
 105   2                      else {
 106   3                              val >>= 4;
 107   3                              if ( val == 0x07 ) return (UNKNOWN);
 108   3                              else return (val+1);
 109   3                      }
 110   2              }
 111   1      //      if( val & 0x80 ) {                                      // Detection in proress
 112   1      //              std = UNKNOWN;
 113   1      //      }
 114   1      //      else {
 115   1      //              val >>= 4;
 116   1      //              if( val==0x07 ) std = UNKNOWN;
 117   1      //              else            std = val + 1;
 118   1      //      }
 119   1      
 120   1              #ifdef DEBUG_DECODER
                      Printf("\r\nStill Detection in Progress, so return UNKNOWN: 0x%X", (WORD)val);
                      #endif
 123   1              return UNKNOWN;
 124   1      }
 125          #endif  // ID_CHECK_BY_FW
 126          
 127          //=============================================================================
 128          //                              Change Input 
 129          //=============================================================================
 130          
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 61  

 131          void COMPOSITE1Input(void)
 132          {
 133   1              WriteDecoder(INFORM, 0x40);                     // 01 00 00 x x         27M, COMPOSITE, Y0, C-, V-
 134   1              WriteDecoder(ACNTL, 0x03);      // CLK-on, Y-on, C-off, V(FB)-off       
 135   1      }
 136          
 137          void COMPOSITE2Input(void)
 138          {
 139   1          WriteDecoder(INFORM, 0xC6);                 // 01 00 00 x x         27M, COMPOSITE, Y0, C-, V-
 140   1              WriteDecoder(ACNTL, 0x03);      // CLK-on, Y-on, C-off, V(FB)-off
 141   1              WriteDecoder(MISC3, ReadDecoder(MISC3)|0x06); 
 142   1      }
 143          
 144          void COMPOSITE3Input(void)
 145          {
 146   1              WriteDecoder(INFORM, 0xCA);             // 01 00 00 x x         27M, COMPOSITE, Y0, C-, V-
 147   1              WriteDecoder(ACNTL, 0x03);      // CLK-on, Y-on, C-off, V(FB)-off
 148   1              WriteDecoder(MISC3, ReadDecoder(MISC3)|0x06); 
 149   1      }
 150          
 151          
 152          
 153          
 154          #ifdef SUPPORT_SVIDEO
              void SVIDEOInput(void)
              {
                      WriteDecoder(INFORM, 0x54);                     // 01 01 01 0 x         27M, S-VIDEO,   Y1, C0, --
                      WriteDecoder(ACNTL, 0x01);      // CLK-on, Y-on, C-on, V(FB)-off
              }
              #endif
 161          
 162          #ifdef SUPPORT_COMPONENT
              void COMPONENTInput(void)
              {
                      WriteDecoder(INFORM, 0x7a);                     // 0 1 11 10 1 0                27M, COMPONENT, Y2, C1, V0
                      WriteDecoder(ACNTL, 0x00);      // CLK-on, Y-on, C-on, V(FB)-on
              
              //      WriteDecoder(0x35, 0x00);               //      V clamp Enable
              //      WriteDecoder(SDTR, 0x03);               
              }
              #endif
 172          
 173          
 174          #ifdef SUPPORT_PC
 175          void AVGAInput(void)
 176          {
 177   1              MakeStartInt();
 178   1      
 179   1              WriteDecoder(ACNTL, 0x00);      // CLK-on, Y-on, C-on, V(FB)-on
 180   1      //      WriteDecoder(INFORM, 0xed);     // Y3,C2,V1
 181   1              WriteDecoder(INFORM, 0xcd);     // Y3,C2,V1
 182   1      
 183   1              
 184   1              SetADCMode(PC);                         // Load Inital Data
 185   1      
 186   1              //GetADCGainOffsetEE();                 // ADC gain & offset
 187   1              
 188   1              //-------------- comment out for debug by yhbae 082307-------------
 189   1      //      GetInitPanelAttribute1();               // Panel Brightness / Contrast, it should change for selectable
 190   1              //-----------------------------------------------------------------
 191   1      
 192   1              SelectPanelAttrRegGroup(GROUP_RGB);     // [0x70] = 0x20
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 62  

 193   1              WriteDecoder(0x77, 0x00);                       // Peaking register setting
 194   1              WriteDecoder(0x78, 0x00);                       // Panel sharpness=0
 195   1      
 196   1              WriteDecoder(0x86, 0x00);                       // Black/White stretsh Disable
 197   1              WriteDecoder(0x87, 0xff);                       // min=0, max=0xff
 198   1      
 199   1              //SelectADCmux(PC);
 200   1      }
 201          
 202          #endif // SUPPORT_PC
 203          
 204          #ifdef SUPPORT_DTV
              void DTVInput(void)
              {
                      MakeStartInt();
              
                      WriteDecoder(ACNTL, 0x00);      // CLK-on, Y-on, C-on, V(FB)-on
                      WriteDecoder(INFORM, 0x4a);     // Y3,C2,V1
                      SetADCMode(DTV);
              
                      //GetADCGainOffsetForDTVEE();           // ADC gain & offset
                      //GetInitPanelAttribute1();             // Panel Brightness / Contrast
                      //GetInitPanelAttribute2();             // Panel Hue / Sharpness / Saturation
              
                      SelectPanelAttrRegGroup(GROUP_YCbCr);
                      SetVideoMode( GetVideoModeEE());
                      WriteDecoder(0x77, 0x30);                       // Panel Peaking=0
                      WriteDecoder(0x78, 0x30);                       // Panel sharpness=0
              
                      //SelectADCmux(DTV);
              }
              #endif  // SUPPORT_DTV
 225          
 226          //=============================================================================
 227          //                                   Power Functions   
 228          //=============================================================================
 229          BYTE GetLCDPowerState(void)
 230          {
 231   1              BYTE val;
 232   1      
 233   1              val = ReadDecoder(0xd5);
 234   1              val &= 0x30;
 235   1              val >>= 4;
 236   1              return val;
 237   1      }
 238          
 239          /*
 240          void SetLCDPowerState(BYTE dat)
 241          {
 242                  WriteDecoder( 0xd4, 0x01 );     // timer prescaler
 243                  WriteDecoder( 0xd6, 0x11 );     // suspend->standby             on->suspend 
 244                  WriteDecoder( 0xd7, 0x11 );     // off->standby(!)              standby->off
 245                  WriteDecoder( 0xd8, 0x11 );     // standby->suspend(*)  suspend->on                     
 246                  
 247                  WriteDecoder( 0xd5, dat );              // Auto Power
 248          }
 249          */
 250          /*
 251          BYTE IsFreeRun(void)
 252          {
 253                  BYTE val;
 254          
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 63  

 255                  val = ReadDecoder(0xbe);
 256                  if( val & 0x04 ) return 1;
 257                  else             return 0;
 258          }
 259          */
 260          
 261          void PanelFreeRun(BYTE on)
 262          {
 263   1              BYTE val;
 264   1              #ifndef QVGA
 265   1              if( on ) AutoPHPCalDisable();
 266   1              else AutoPHPCalEnable();
 267   1              #endif
 268   1      
 269   1              val = ReadDecoder(0xbe);
 270   1              if( on ) {
 271   2                      val |= 0x04;
 272   2                      WriteDecoder(0xb6, ( ReadDecoder(0xb6)& 0x70) | 0x85 ); // Disable Auto calc H period
 273   2                      //WriteDecoder(0xb6, 0xb5 );    // Disable Auto calc H period
 274   2              }
 275   1              else {    
 276   2                      val &= 0xfb;
 277   2                      WriteDecoder(0xb6, ReadDecoder(0xb6) & 0x7f );  // Enable Auto calc H period
 278   2              }
 279   1              WriteDecoder(0xbe, val);
 280   1      
 281   1      
 282   1      }
 283          
 284          
 285          void PanelBlack(BYTE on)                        // what function for????
 286          {
 287   1              BYTE val, tmp;
 288   1      
 289   1              tmp = ReadDecoder(0xff);
 290   1              WriteDecoder(0xff, 0x01);
 291   1      
 292   1              val = ReadDecoder(0xf3);        // 0x1f3 bit5 is for all 0 out
 293   1              if( on ) {
 294   2                      val |= 0x20;
 295   2          }
 296   1              else    {
 297   2                      val &= 0xdf;
 298   2              }
 299   1      
 300   1              WaitEndofDisplayArea(); 
 301   1              WriteDecoder(0xf3, val);
 302   1      
 303   1              WriteDecoder(0xff, tmp);
 304   1      }
 305          
 306          void PanelMute(BYTE on)
 307          {
 308   1              if( on ){       // Mute
 309   2                      PanelBlack(on);
 310   2                      PanelFreeRun(on);
 311   2              }
 312   1              else
 313   1              {       // Recover
 314   2                      PanelFreeRun(on);
 315   2                      PanelBlack(on);
 316   2              }
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 64  

 317   1      }
 318          
 319          void ON_LVDS(void)
 320          {
 321   1              #ifdef LVDS
                      BYTE val;
                      val = ReadDecoder(0x4e) & 0xdd; //1101 1101 
                      WriteDecoder(0x4e, val|0x20);   // GPIO1 En & output enable
              
                      val = ReadDecoder(0x4f) & 0x0f;
                      WriteDecoder(0x4f, val | 0x1f);         // GPIO1 = 1
                      dPuts("\r\n--ON_LVDS"); 
                      #endif
 330   1      }
 331          
 332          void OFF_LVDS(void)
 333          {
 334   1              #ifdef LVDS
                      BYTE val;
                      val = ReadDecoder(0x4e) & 0xdd; //1101 1101 
              //      WriteDecoder(0x4e, val&~(0x20));        // GPIO0 En
                      WriteDecoder(0x4e, val|0x20);   // GPIO1 En
              
                      val = ReadDecoder(0x4f) & 0x0f; //0xf9;
                      WriteDecoder(0x4f, val | 0x00);         // GPIO1 = 0
                      dPuts("\r\n--OFF_LVDS");        
                      #endif
 344   1      }
 345          
 346          void LCDPowerON(BYTE mute)
 347          {
 348   1              
 349   1              if(PowerFlag==0 && CheckTrigger()==0)
 350   1              return;
 351   1              PowerLED(ON);
 352   1              //Printf("\r\n------> LCD on=%02x",(WORD)GetLCDPowerState());
 353   1      
 354   1              if( GetLCDPowerState()==POWER_OFF) 
 355   1               {
 356   2                      //Printf("\r\n------> LCD on");
 357   2                      OFF_LVDS();
 358   2                      //PanelMute(mute);
 359   2                      delay(1);
 360   2      
 361   2                      WriteDecoder(0xd5, 0x09);       // Standby      Panel:1  Signal:0  Back:0
 362   2                      delay(10);
 363   2      
 364   2                      WriteDecoder(0xd5, 0x0b);       // Suspend      Panel:1  Signal:1  Back:0
 365   2      //              delay(1);
 366   2      
 367   2      
 368   2              
 369   2      //      ON_LVDS();
 370   2      //              PanelMute(mute);
 371   2                      delay(10);
 372   2                      ON_LVDS();
 373   2      
 374   2                      
 375   2                      #ifdef BACKLIGHT_PWM
 376   2                      WriteDecoder(0xd5, 0x0f);       // On           Panel:1  Signal:1  Back:1
 377   2                      #endif
 378   2      
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 65  

 379   2                      //AudioMute(1);                         //WILLIAM-981103
 380   2                      
 381   2                      #ifdef BACKLIGHT_CCFL
                              //WriteDecoder(0xd5, 0x0f);     // On           Panel:1  Signal:1  Back:1
                              WriteDecoder(0xff, 1);
                              WriteDecoder(0xb1, 0x30);
                              WriteDecoder(0x30, 0xf1);
                              WriteDecoder(0x34, 0x6f);               // dimming frequency for WVGA pannel
                              WriteDecoder(0xff, 0);
                              WriteDecoder(0xd5, 0x0f);       // On           Panel:1  Signal:1  Back:1
                              #endif
 390   2                      #ifdef BACKLIGHT_LED
                              //WriteDecoder(0xd5, 0x0f);     // On           Panel:1  Signal:1  Back:1
                              WriteDecoder(0xff, 1);
                              WriteDecoder(0xb1, 0x20);
                              WriteDecoder(0x30, 0xd2);
                              WriteDecoder(0x31, 0xa6);
                              WriteDecoder(0x33, 0x40);
                              WriteDecoder(0x34, 0x80);
                              WriteDecoder(0x32, 0x84);
                              WriteDecoder(0x35, 0x80);
                              WriteDecoder(0x36, 0x00);
                              WriteDecoder(0xff, 0);
                              WriteDecoder(0xd5, 0x0f);       // On           Panel:1  Signal:1  Back:1
                              #endif
 404   2                      delay(5);
 405   2      
 406   2              
 407   2              
 408   2                      
 409   2                      Panel_Enable();
 410   2                      Wait_ms(250);
 411   2                      SetBacklight();
 412   2              TW2835Cmd("\n\rbusw 0 1 A1 11\n\r");
 413   2              Wait_ms(100);
 414   2          TW2835Cmd("\n\rbusw 0 1 A2 D7\n\r");  
 415   2              }
 416   1              //else  
 417   1                      //PanelMute(mute);
 418   1      }
*** WARNING C280 IN LINE 346 OF TW88.C: 'mute': unreferenced local variable
 419          /*
 420          void LCDPowerOFF(void)
 421          {
 422                  dPuts("\r\n------> LCD off");
 423                  
 424                  PanelMute(1);
 425          //      OFF_LVDS();
 426          
 427                  SetLCDPowerState(POWER_OFF);
 428                  OFF_LVDS();
 429          
 430                  delay(10);
 431          }
 432          */
 433          
 434          void LCDPowerOFF(void)
 435          {
 436   1      //      if( GetLCDPowerState()==POWER_OFF ) return;
 437   1      
 438   1              dPuts("\r\n------> LCD off");
 439   1      
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 66  

 440   1              //PanelMute(1);
 441   1      
 442   1              WriteDecoder(0xd5, 0x0b);       // Suspend      Panel:1  Signal:1  Back:0
 443   1              delay(1);
 444   1              WriteDecoder(0xd5, 0x09);       // Standby      Panel:1  Signal:0  Back:0
 445   1              delay(1);
 446   1              WriteDecoder(0xd5, 0x08);       // Off          Panel:0  Signal:0  Back:0
 447   1      
 448   1              OFF_LVDS();
 449   1      
 450   1              #ifdef BACKLIGHT_CCFL
                      WriteDecoder(0xff, 1);
                      WriteDecoder(0x30, 0xf2);
                      WriteDecoder(0xff, 0);
                      #endif
 455   1              #ifdef BACKLIGHT_LED
                      WriteDecoder(0xff, 1);
                      WriteDecoder(0x32, 0x44);
                      WriteDecoder(0xff, 0);
                      #endif
 460   1              
 461   1              clrBacklight();
 462   1              Wait_ms(100);
 463   1              Panel_Disable();
 464   1                      
 465   1      //      delay(10);
 466   1      
 467   1      }
 468          
 469          
 470          #ifdef Hs_debug
              #ifdef SERIAL
              void LCDPower(void)
              {
                      extern  BYTE InputSelection;
                      static BYTE state=0;
              
                      //state = GetLCDPowerState();
                      if( state==POWER_ON ){
                              state = POWER_OFF;
                              LCDPowerOFF();
                              PowerDown_XTAL(1);
              
                              Printf("\nPower Off!!");
                      }
                      else //if( state==POWER_OFF )
                      {
              //              reset = 0;
                              PowerDown_XTAL(0);
                              delay(10);
              /*              reset = 1;
                              delay(10);
                              InputSelection = 0xff;
                              ChangeInput( GetInputSelectionEE() );
                              LCDPowerON(0);
              */
                              state = POWER_ON;
                              LCDPowerON(0);
              
                              Printf("\nPower On!!");
              
                      }
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 67  

              
              }
              #endif // SERIAL
              #endif
 506          /*
 507          #if defined( SUPPORT_PC ) || defined( SUPPORT_DTV )
 508          void DPMSmodeOFF(void)
 509          {
 510                  //WriteDecoder(ACNTL, ReadDecoder(ACNTL) | 0x0f);       // HHY 1.44 power down 27M clock, ADC
 511          }
 512          
 513          void DPMSmodeON(void)
 514          {
 515                  //WriteDecoder(ACNTL, ReadDecoder(ACNTL) & 0xf0);       // HHY 1.44 power on 27M clock, ADC
 516                  //delay(5);
 517          }
 518          #endif  // SUPPORT_PC
 519          */
 520          /***
 521          void SetPanelBitOrder(BYTE swap)
 522          {
 523                  BYTE val;
 524                  val = ReadDecoder(0xf7);
 525                  if( swap ) val = val | 0x01;
 526                  else       val = val & 0xfe;
 527                  WriteDecoder(0xf7, val);
 528          }
 529          ***/
 530          /***
 531          void SetPanelSingleDouble(BYTE single)
 532          {
 533                  BYTE val;
 534                  val = ReadDecoder(0xb0);
 535                  if( single ) val = val & 0x7f;
 536                  else         val = val | 0x80;
 537                  WriteDecoder(0xb0, val);
 538          }
 539          ***/
 540          //=============================================================================
 541          //                          Measurement Functions
 542          //=============================================================================
 543          #if defined( SUPPORT_PC ) || defined( SUPPORT_DTV ) || defined( DEBUG_SETPANEL)
 544          BYTE MeasureAndWait(BYTE field)
 545          {
 546   1              BYTE val;
 547   1              BYTE i;
 548   1      
 549   1              // StartMeasurement
 550   1              val = ReadDecoder( 0x5b ) & 0xF0;
 551   1              val |= ( (field & 0x03) << 2 );                 // flag : choose field for measurement
 552   1              WriteDecoder(0x5b, val);
 553   1              val |= 0x01;
 554   1              WriteDecoder(0x5b, val);                        // measure start
 555   1      
 556   1              // WaitMeasurementDataReady
 557   1              for(i=0; i<50; i++) {                   // make more delay
 558   2                      delay(1);
 559   2                      val = ReadDecoder(0x5b);
 560   2                      val &= 0x01;
 561   2                      if( val == 0 ) return 1;
 562   2              }
 563   1      
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 68  

 564   1              // ClearMeasurement
 565   1              WriteDecoder(0x5b, 8);
 566   1              wPuts(" ? ");
 567   1              return 0;
 568   1      }
 569          #endif
 570          
 571          //=================================================================================================
 572          //
 573          //=================================================================================================
 574          #if defined( SUPPORT_PC ) || defined( SUPPORT_DTV ) || defined( DEBUG_SETPANEL)
 575          void SetEnDet(void)
 576          {
 577   1              BYTE val;
 578   1      
 579   1              val = ReadDecoder(0x5c);
 580   1              val |= 0x01;            //Enable Input HSYNC/VSYNC period change/loss detection.
 581   1              WriteDecoder(0x5c, val);
 582   1      
 583   1              val = ReadDecoder(0x5c);
 584   1      }
 585          
 586          void ClearEnDet(void)
 587          {
 588   1              BYTE val;
 589   1      
 590   1              val = ReadDecoder(0x5c);
 591   1              val &= 0xfe;            //Disable Input HSYNC/VSYNC period change/loss detection.
 592   1              WriteDecoder(0x5c, val);
 593   1      
 594   1              val = ReadDecoder(0x5c);
 595   1      }
 596          #endif // SUPPORT_PC || SUPPORT_DTV || DEBUG_SETPANEL
 597          
 598          //=============================================================================
 599          //                              Panel Setting
 600          //=============================================================================
 601          #if defined( SUPPORT_PC ) || defined( SUPPORT_DTV )
 602          
 603          BYTE IsBypassmode(void)
 604          {
 605   1              BYTE dat;
 606   1      
 607   1              dat = ReadDecoder(TW88_XYSCALEHI) & 0x10;       // Zoom by-pass
 608   1              return dat;
 609   1      }
 610          /*
 611          BYTE IsInteraced(void)
 612          {
 613                  if( ReadDecoder(0x42) & 0x80 ) return 1;
 614                  return 0;
 615          }
 616          */
 617          WORD GetHstart(void)
 618          {
 619   1              WORD hstartMax;
 620   1      
 621   1              WriteDecoder(0x5b, 0x88);
 622   1              hstartMax = (WORD)ReadDecoder(0x5a) << 8;               // change for TW8816B2
 623   1              hstartMax += ReadDecoder(0x59);
 624   1      
 625   1              #ifdef DEBUG_PC_MEAS
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 69  

                      dPrintf("\r\n === GetHstart(%d)", hstartMax);
                      #endif
 628   1              return ( hstartMax );
 629   1      }
 630          
 631          /*
 632          WORD GetHend(void)
 633          {
 634                  WORD hendMin, hendMax;
 635          
 636                  WriteDecoder(0x5b, 0x98);
 637                  hendMin = (WORD)ReadDecoder(0x58) << 8;
 638                  hendMin += ReadDecoder(0x57);
 639                  hendMax = (WORD)ReadDecoder(0x5a) << 8;
 640                  hendMax += ReadDecoder(0x59);
 641          
 642          
 643                  if ( hendMax < hendMin )
 644                          hendMax = hendMin;
 645                  #ifdef DEBUG_PC_MEAS
 646                  dPrintf("\r\n === GetHend(%d)", hendMax);
 647                  #endif
 648                  return hendMax;
 649          }
 650          */
 651          WORD GetVstart(void)
 652          {
 653   1              WORD vstartMin, vstartMax;
 654   1      
 655   1              WriteDecoder(0x5b, 0xa8);
 656   1              vstartMin = (WORD)ReadDecoder(0x58) << 8;
 657   1              vstartMin += ReadDecoder(0x57);
 658   1              vstartMax = (WORD)ReadDecoder(0x5a) << 8;               // change for TW8816B2
 659   1              vstartMax += ReadDecoder(0x59);
 660   1      
 661   1              if ( vstartMax < vstartMin )
 662   1                      vstartMax = vstartMin;
 663   1              #ifdef DEBUG_PC_MEAS
                      dPrintf( "\r\n === GetVstart%x(%d)", vstartMax, vstartMax );
                      #endif
 666   1              return vstartMax;
 667   1      }
 668          
 669          
 670          
 671          WORD GetVend(void)
 672          {
 673   1              WORD vend, vendMin;
 674   1      
 675   1              WriteDecoder(0x5b, 0xb8);
 676   1              vendMin = (WORD)ReadDecoder(0x58) << 8;
 677   1              vendMin += ReadDecoder(0x57);
 678   1              vend = (WORD)ReadDecoder(0x5a) << 8;
 679   1              vend += ReadDecoder(0x59);
 680   1      
 681   1              if ( vend < vendMin )
 682   1                      vend = vendMin;
 683   1              #ifdef DEBUG_PC_MEAS
                      dPrintf("\r\n === GetVend(%d)", vend);
                      #endif
 686   1              return vend;
 687   1      }
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 70  

 688          
 689          /**** Not used
 690          void MaskOnSYNCInt()
 691          {
 692                  BYTE val;
 693          
 694                  val = 0xfc;
 695                  WriteDecoder(0xb2, val);        //IRQ mask
 696                  dPrintf("\r\nDisableSYNCint:->%02x", val);
 697          }
 698          ****/
 699          
 700          void MaskOffSYNCInt()
 701          {
 702   1              BYTE val;
 703   1      
 704   1              val = 0xfc;
 705   1              WriteDecoder(0xd2, val);        //IRQ mask
 706   1              
 707   1              #ifdef DEBUG_TW88
                      dPrintf("\r\nEnableSYNCint:->%02x", (WORD)val);
                      #endif
 710   1      
 711   1              WriteDecoder(0xd2, 0xcc);
 712   1      
 713   1              #ifdef DEBUG_TW88
                      dPrintf("\r\nEnableSYNCint:->%02x", (WORD)0xcc);
                      #endif
 716   1      }
 717          
 718          
 719          void MakeStartInt(void)
 720          {
 721   1              MaskOffSYNCInt();
 722   1      
 723   1              WriteDecoder(0xd3, 0x02);                                       // IRQ mask 2
 724   1              WriteDecoder(0x4e, ReadDecoder(0x4e) | 0x08);   // IRQ pin, active low
 725   1              WriteDecoder(0x5b, 0x09);                                       // Start measure
 726   1              //WriteDecoder(0x5b, 0x08);                                     // clear measure self cleared bit
 727   1              WriteDecoder(0x5c, 0x07);                                       // change error tolerance and enable V/HSYNC change/loss detection
 728   1      
 729   1              SetEnDet();                                                             // Set enable-detection
 730   1      }
 731          
 732          void Clear_bypass()
 733          {
 734   1              BYTE dat;
 735   1      
 736   1              dat = ReadDecoder(TW88_XYSCALEHI);      
 737   1              WriteDecoder(TW88_XYSCALEHI, dat & 0xef);       // xxx0 xxxx
 738   1      }
 739          
 740          
 741          WORD GetHactiveStart(void)
 742          {
 743   1              WORD buf;
 744   1              BYTE val;
 745   1      
 746   1              val = ReadDecoder(0x49);        
 747   1              buf = (WORD)(val & 0x07) << 8;
 748   1              buf += ReadDecoder(0x47);
 749   1      
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 71  

 750   1              return buf;
 751   1      }
 752          
 753          /**** Not used */
 754          WORD GetHactiveEnd(void)
 755          {
 756   1              WORD buf;
 757   1              BYTE val;
 758   1      
 759   1              val = ReadDecoder(0x49);
 760   1              buf = (WORD)(val & 0xf0) << 4;
 761   1              buf += ReadDecoder(0x48);
 762   1      
 763   1              return buf;
 764   1      }
 765          /****/
 766          
 767          //#ifdef DEBUG_TW88
 768          WORD GetVactiveStart(void)
 769          {
 770   1              WORD buf;
 771   1              BYTE val;
 772   1      
 773   1              val = ReadDecoder(0x4d);                        // high 2 bits
 774   1              buf = (WORD)(val & 0x03) << 8;
 775   1              buf |= ReadDecoder(0x4a);                       // Vactive Odd field Line start position
 776   1      
 777   1              return buf;
 778   1      }
 779          //#endif
 780          
 781          //-------------------------------------------------------------------
 782          //                  Set Active Region Functions
 783          //-------------------------------------------------------------------
 784          void SetHactiveStart(WORD hstart)
 785          {
 786   1              BYTE val;
 787   1      
 788   1              #ifdef DEBUG_PC_MEAS
                      dPrintf("\r\n === SetHactiveStart(%d)", hstart);
                      #endif
 791   1              // TW8804 write LSByte first
 792   1              val = ReadDecoder(0x49);
 793   1              val = val & 0xf8;
 794   1              val = val | (hstart>>8);
 795   1      
 796   1              WriteDecoder(0x49, val);
 797   1              WriteDecoder(0x47, (BYTE)hstart);
 798   1      }
 799          
 800          void SetHactiveEnd(WORD hend)
 801          {
 802   1              BYTE    val, buf;
 803   1      
 804   1              #ifdef DEBUG_PC_MEAS
                      dPrintf("\r\n === SetHactiveEnd(%d)", hend);
                      #endif
 807   1              // TW8804 write LSByte first
 808   1              buf = (BYTE)(hend>>8)<<4;
 809   1              val = ReadDecoder(0x49);
 810   1              val = val & 0x0f;
 811   1              val = val | buf;
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 72  

 812   1              
 813   1              WriteDecoder(0x49, val);
 814   1              WriteDecoder(0x48, (BYTE)hend);
 815   1      }
 816          
 817          void SetVactiveStart(WORD vstart)
 818          {
 819   1              BYTE val, v_h, v_l;
 820   1      
 821   1              #ifdef DEBUG_PC_MEAS
                      dPrintf("\r\n === SetVactiveStart(%d)", vstart);
                      #endif
 824   1              // TW8804 write LSByte first
 825   1              v_l = (BYTE)vstart;
 826   1              v_h = (BYTE)(vstart>>8);
 827   1      
 828   1              val = ReadDecoder(0x4d);        // high 2 bits
 829   1              val = (val & 0xf0);
 830   1              val = val | (v_h<<2);
 831   1              val = val | v_h;
 832   1              WriteDecoder(0x4d, val);
 833   1      
 834   1              WriteDecoder(0x4a, v_l);        // Vactive Odd field Line start position
 835   1              WriteDecoder(0x4b, v_l);        // Vactive Even field Line start position
 836   1      }
 837          
 838          void SetVactiveLen(WORD van)
 839          {
 840   1      //      WORD vstop;
 841   1              BYTE val, buf;
 842   1      
 843   1              //van += 1;                                                     // HHY add 1, because of bottom line garbage
 844   1              #ifdef DEBUG_PC_MEAS
                      dPrintf("\r\n === SetVactiveLen(%d)", van);
                      #endif
 847   1      
 848   1              // TW8804 write LSByte first
 849   1              buf = (BYTE)(van>>8) << 4;
 850   1              val = ReadDecoder(0x4d);
 851   1              val = val & 0x8f;
 852   1              val = val | buf;
 853   1              WriteDecoder(0x4d, val);
 854   1              WriteDecoder(0x4c, (BYTE)van);          
 855   1                                              
 856   1      }
 857          
 858          #include "osdmenu.h"
   1      =1  //osdmenu.h
   2      =1  //LJY10292001
   3      =1  #ifndef __OSDMENU__
           =1 #define __OSDMENU__
           =1 
           =1 //=======================================================================
           =1 // 
           =1 //BYTE GetOSDDuration(void);
           =1 
           =1 void ResetVideoValue(void);
           =1 //#if defined( SUPPORT_PC ) || defined( SUPPORT_DTV )
           =1 //void ResetPCValue(void);
           =1 //#endif
           =1 BYTE GetOSDMenuLevel( void );
           =1 
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 73  

           =1 void DrawMenulist(BYTE);
           =1 void Display_EnterPin(void);
           =1 void OSDHighMenu_sub(void);
           =1 void ResetOSDValue(void);
           =1 #ifdef E_Wintek
           =1 void ResetUESROSDValue(void);
           =1 #endif
           =1 //BYTE OnChangingValue(void);
           =1 //Not used yet *******************BYTE OnChangingTime(void);
           =1 
           =1 //WORD GetOSDclock(void);
           =1 
           =1 void InitOSDMenu(void);
           =1 BYTE CloseOSDMenu(void);
           =1 void OpenOSDMenu(void);
           =1 void OSDHighMenu(void);
           =1 void OSDSelect(void);
           =1 void OSDCursorMove(BYTE flag );
           =1 void OSDLeftRight(BYTE flag );
           =1 void OSDValueUpDn(BYTE flag);
           =1 WORD SetItemValue( BYTE id, BYTE flag );
           =1 BYTE DoAction(BYTE id);
           =1 
           =1 BYTE SaveValue1(void);
           =1 void ClearValueWin(void);
           =1 
           =1 void OSDNumber( BYTE num );
           =1 
           =1 void Set4WideScreen(BYTE id);
           =1 
           =1 void SetRGBContrast( BYTE id, BYTE val );
           =1 BYTE SetPCColorTemp(BYTE flag);
           =1 void ResetPanelAttributeValue(void);
           =1 WORD GetItemValue( BYTE);
           =1 void DisplayViewBar( WORD,BYTE);
           =1 void DrawNum(WORD, CODE_P struct NumType *, WORD);
           =1 void DrawStringByLang( WORD, CODE_P struct EnumType *, WORD);
           =1 
           =1 void DisplayVolumebar(BYTE val);
           =1 BYTE GetOSDLang(void);
           =1 void InitOSDMenuXY(void);
           =1 
           =1 void Display_TVGuide_Window(void);
           =1 void Display_TVGuide_Status(void);
           =1 
           =1 void ChangeVchip_LevelCursor(BYTE);
           =1 void ChangeVchip_ContentCursor(BYTE);
           =1 void Select_VchipLevel(void);
           =1 void SetVideoMode(BYTE mode);
           =1 BYTE GetVideoDatawithOffset(BYTE offset);
           =1 void SetVideoContrast(BYTE newv);
           =1 void SetVideoBrightness(BYTE newv);
           =1 void SetVideoHue(BYTE newv) ;
           =1 void SetVideoSaturation(BYTE svtype, BYTE newv) ;
           =1 BYTE SetVideoSharpness(BYTE flag) ;
           =1 void SetVideoBacklight(BYTE newv) ;
           =1 //------------------------------------------------andy awt 981013
           =1 //void DaySelect(BYTE);
           =1 void CAMOutDSel(BYTE val);
           =1 void DVRAodioSel(BYTE  val);
           =1 
           =1 //------------------------------------------------andy awt 981013
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 74  

           =1 
           =1 void DisplayLineOSD(void);      // OSD Line display Demo
           =1 
           =1 
           =1 struct MenuType {
           =1         BYTE    width,  height;
           =1         BYTE    TitleColor;     
           =1         BYTE    CursorColor;
           =1 };
           =1 
           =1 struct NumType {
           =1         BYTE    PrePostCharLen;         // high nibble(pre) / low nibble(post)
           =1         BYTE    PrePostChar[4];
           =1 };
           =1 
           =1 struct NumberStringType {
           =1         BYTE    x, y;
           =1         BYTE    width;
           =1         BYTE    BackColor;
           =1         BYTE    Radix;
           =1         BYTE    NumColor;
           =1         BYTE    MaxLen;                         // maximum length of string
           =1         BYTE    PrePostCharLen;         // high nibble(pre) / low nibble(post)
           =1         BYTE    PrePostChar[3];
           =1 };
           =1 
           =1 struct TimeType {
           =1         BYTE    x, y;
           =1         BYTE    width;
           =1         BYTE    BackColor;
           =1         BYTE    Format;                         //_24H_TIME
           =1         BYTE    TimeColor;
           =1         BYTE    CursorColor;
           =1 };
           =1 
           =1 struct EnumType {
           =1         BYTE    Sz;//size
           =1         BYTE    ByLang;
           =1         BYTE    Str[15];                        // doesn't matter the size !!!
           =1 };
           =1 
           =1 #define ICON_CH_SZ              2
           =1 //#define BAR_NUM_SZ            4
           =1 #define ICON_BUF_SZ             2
           =1 struct DefineMenu {
           =1         //WORD                                          Icon[ICON_BUF_SZ];      
           =1         BYTE                            CODE    *Icon;
           =1         BYTE                                            **Desc;                         
           =1         BYTE                                            PreFnId, 
           =1                                                                 PostFnId;
           =1 //      void            (*CalltoFunction)(void);                                    // Un/Dn/Sel Function
           =1         BYTE                                            IconColor;                      //NIL: not to display icon
           =1         BYTE                                            DescColor;                      //NIL: not to display desc. (IconColor==NIL && DescColor==NIL)->Last Item
           =1         struct DefineMenu       CODE    *Child;
           =1         BYTE                                            Type;                           // MENU, CHOICEMENU, BAR, NUMBER, TIME, ACTION, ENUM_STRING
           =1         BYTE                                            ActiveWithCursor;
           =1         BYTE                                            Id;
           =1         BYTE                            CODE    *TypeData;      //MenuType, BarType, NumType,,,
           =1 } ;
           =1 
           =1 struct PictureInfo {
           =1 
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 75  

           =1         BYTE Register_Addr;
           =1         BYTE EEPROM_Addr;
           =1         struct RegisterInfo     CODE    *Control_Range;
           =1 };
           =1 
           =1 
           =1 //-------------------------------------------------------------------
           =1 // OSD Window Information
           =1 //-------------------------------------------------------------------
           =1 // Window Number
           =1 #define OSDCURSORWINDOW                 1
           =1 #define OSDMENUWINDOW                   OSDCURSORWINDOW+1
           =1 #define OSDMENU_TOPWIN                  OSDCURSORWINDOW+2
           =1 #define OSDMENU_TITLEWIN                OSDCURSORWINDOW+3
           =1 #define OSDBARWINDOW                    OSDCURSORWINDOW
           =1 
           =1 #define TECHWELLOGO_OSDWIN      1       
           =1 #define TVINFO_OSDWIN           2       
           =1 #define FONTTEST_OSDWIN         2       
           =1 #define INPUTINFO_OSDWIN        3  
           =1 #define RATINGINFO_OSDWIN       1       
           =1 #define PCINFO_OSDWIN           3//4/   
           =1 
           =1 //-------------OSDMENU_TITLEWIN------------------------------------------------------
           =1 // Window Start address
           =1 #define OSDMENU_MAINADDR        0
           =1 #define OSDMENU_SUBADDR     OSDMENU_MAINADDR+15    //25*9:196
           =1 #define OSDMENU_BARADDR         175 //OSDMENU_SUBADDR+225    //256   //25x2:50
           =1 
           =1 #define INPUTINFO_ADDR          160     // 9x1:9
           =1 #ifdef WQVGA
           =1 #define INPUTINFO1_ADDR         INPUTINFO_ADDR+17       //17x3:51
           =1 #else
           =1 #define INPUTINFO1_ADDR         INPUTINFO_ADDR+34       //17x2:51
           =1 #endif
           =1 
           =1 #define MUTEINFO_ADDR       INPUTINFO1_ADDR+51  // 4x1:4
           =1 #define TVCHINFO_ADDR           MUTEINFO_ADDR//324      // 3X1:3
           =1 #define LOGO_ADDR                       0
           =1 #define RATINGINFO_ADDR         0       //addr:210(8x1:8)
           =1 #define PCMEASUREINFO_ADDR  OSDMENU_BARADDR //10x1
           =1 
           =1 
           =1 //--------------------------------------------------------------------
           =1 // OSD Menu Position Range
           =1 #if ((defined WQVGA) && (defined ANALOG_7INCH)) || ((defined QVGA) && (defined SHARP_LQ050Q5DR01))
           =1         #define OSD_PHR_ PHR_/2
           =1 #else
           =1         #define OSD_PHR_ PHR_
           =1 #endif
           =1 
           =1 #define OSDHSTART_MAX (OSD_PHR_-(12+1)*25 - 56*2 -4)  //PHR - (pixelsize +Hspace)*MenuWidth - Hborder*2 - 
             -outlinewidth*2
           =1 #define OSDVSTART_MAX (PVR_-(18+11)*9 - 5*2 ) //  PVR - (Linesize+Vspace)*MENU_HEIGHT - Vborder*2  - outli
             -newidth*2
           =1 
           =1 #define OSDMENUX_MIN 1//0
           =1 #define OSDMENUX_MAX (OSDHSTART_MAX>>3)
           =1 #define OSDMENUX_50  (OSDHSTART_MAX>>4)
           =1 
           =1 #define OSDMENUY_MIN 2//0
           =1 #define OSDMENUY_MAX (OSDVSTART_MAX>>2)
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 76  

           =1 #define OSDMENUY_50  (OSDVSTART_MAX>>3)
           =1 
           =1 //--------------------------------------------------------------------
           =1 // OSD Menu Width, Height 
           =1 #ifdef E_Wintek
           =1 #define ICON_HIGH                               0x14
           =1 #else
           =1 #define ICON_HIGH                               0x0a
           =1 #endif
           =1 #define TOTAL_MAX_HIGHT                 9
           =1 
           =1 #define TOPMENU_WIDTH                   2
           =1 #define TOTAL_TOP_HEIGHT                5       // Include blank line!
           =1 
           =1 #define TOPMENU_HEIGHT                  4       
           =1 
           =1 #if (defined QVGA) && (defined SHARP_LQ050Q5DR01)
           =1 #define MENU_WIDTH                              17 //23//25 
           =1 #define TITLE_MAX_DESC                  17//25  //
           =1 #define BAR_LENGTH                              0
           =1 #else
           =1 #define MENU_WIDTH                              23//23//25 
           =1 #define TITLE_MAX_DESC                  23//25  //
           =1 #define BAR_LENGTH                              5//8
           =1 #endif
           =1 
           =1 #define MENU_HEIGHT                             7//6 
           =1 
           =1 #define BARNUM_LENGTH                   8       //11
           =1 #ifdef REFERENCE
           =1 #define BACK_COLOR                              BG_COLOR_CYAN
           =1 #define DEFAULT_COLOR                   BG_COLOR_CYAN   | CH_COLOR_WHITE
           =1 //#define ACTIVE_COLOR                  BG_COLOR_YELLOW | CH_COLOR_WHITE
           =1 #define TITLE_BACK_COLOR                BG_COLOR_MAGENTA
           =1 #define TITLE_COLOR                             TITLE_BACK_COLOR | CH_COLOR_YELLOW
           =1 #define COMMENT_COLOR                   TITLE_BACK_COLOR | CH_COLOR_WHITE
           =1 #define CURSOR_COLOR                    BG_COLOR_YELLOW | CH_COLOR_BLUE
           =1 #define OSD_INFO_COLOR                  DEFAULT_COLOR
           =1 #define BAR_COLOR                               DEFAULT_COLOR   
           =1 #define BAR_NUM_COLOR                   DEFAULT_COLOR
           =1 #define NUM_COLOR                               DEFAULT_COLOR
           =1 
           =1 #define OSDMENU_OUTLINE_COLOR   BG_COLOR_BLUE
           =1 
           =1 #else
           =1 #define BACK_COLOR                              BG_COLOR_CYAN
           =1 #define DEFAULT_COLOR                   BG_COLOR_CYAN | CH_COLOR_WHITE
           =1 //#define ACTIVE_COLOR                  BG_COLOR_YELLOW | CH_COLOR_WHITE
           =1 #define TITLE_BACK_COLOR                BG_COLOR_BLUE
           =1 #define TITLE_COLOR                             TITLE_BACK_COLOR | CH_COLOR_YELLOW
           =1 #define COMMENT_COLOR                   TITLE_BACK_COLOR | CH_COLOR_WHITE
           =1 #define CURSOR_COLOR                    BG_COLOR_YELLOW  | CH_COLOR_BLUE
           =1 #define OSD_INFO_COLOR                  BG_COLOR_CYAN    | CH_COLOR_GREEN
           =1 #define BAR_COLOR                               DEFAULT_COLOR   
           =1 #define BAR_NUM_COLOR                   DEFAULT_COLOR
           =1 #define NUM_COLOR                               DEFAULT_COLOR
           =1 
           =1 #define VER_COLOR               BG_COLOR_CYAN   | CH_COLOR_YELLOW   /// V1.1 03/07/07 simonsung
           =1 
           =1 
           =1 #define OSDMENU_OUTLINE_COLOR   BG_COLOR_CYAN
           =1 #endif 
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 77  

           =1 
           =1 
           =1 //DisplayedOSD
           =1 //              new       |     MENU    TVINFO          CC              INPUTINFO               PCINFO          RATINGINFO
           =1 //      current   |
           =1 //============|=========================================================================
           =1 //      MENU      |                     TVINFO          --              INPUTINFO               PCINFO          MENU + RATINGINFO       
           =1 //                        |                                              
           =1 //------------|-------------------------------------------------------------------------
           =1 //      TVINFO    |     MENU    TVINFO          --              INPUTINFO               PCINFO          TVINFO+RATING
           =1 //------------|-------------------------------------------------------------------------
           =1 //      CC                |     MENU->  TVINFO->                        INPUTINFO->             PCINFO          RATINGINFO
           =1 //                        |      CC              CC                                      CC                                              
           =1 //------------|-------------------------------------------------------------------------
           =1 //      INPUTINFO |     MENU    TVINFO          --              INPUTINFO               PCINFO          --
           =1 //------------|-------------------------------------------------------------------------
           =1 //      PCINFO    |     MENU    x                       x               INPUTINFO               PCINFO          x
           =1 //------------|-------------------------------------------------------------------------
           =1 //      RATINGINFO|     MENU    TVINFO     RATING   INPUTINFO           x                       RATINGINFO
           =1 //                                                                      
           =1 
           =1 //=======================================================================================
           =1 // OSD Menu Constant define.
           =1 //=======================================================================================
           =1 //Time type
           =1 #define _24H_TIME               1
           =1 
           =1 //for previous, next, parent or child
           =1 #define YES                             0xfe    
           =1 #define NO                              0
           =1 
           =1 
           =1 //#define OVERWRITE             0
           =1 //#define POPUP                 1
           =1 
           =1 //CursorMove
           =1 #define VERT                    0
           =1 #define HORI                    1
           =1 
           =1 //Type of MenuItem
           =1 #define OSDMENU                 1
           =1 #define CHOICEMENU              2
           =1 #define ACTION                  3
           =1 #define BAR                             4
           =1 #define NUMBER                  5
           =1 #define CHOICE                  6
           =1 #define ENUM_STRING             7 //YESNO                       7
           =1 #define CHOICE1                 8
           =1 #define TIME                    9
           =1 #define NUMBER_STRING   10
           =1 #define TEXT_STR              11   // V1.1 02/28/07 simonsung
           =1 
           =1 
           =1 //Bar type
           =1 #define LEFT_FILLED             1
           =1 #define RIGHT_FILLED    2
           =1 #define NO_FILLED               3
           =1 
           =1 //OSDmenu up and down key
           =1 #define UP                                      1
           =1 #define DN                                      2
           =1 #define RIGHT                           3
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 78  

           =1 #define LEFT                            4
           =1 
           =1 // Action Id
           =1 #define DISP_INFO                       0x16
           =1 
           =1 #define INPUTSELECTION                          0x2f
           =1 
           =1 #define CHANGE_TO_COMPOSITE                     (0x20|CH_TW2835)                        // Low nibble need to start from 1 
           =1 #define CHANGE_TO_SVIDEO                        (0x20|SVIDEO)                           // so that it match with COMPOSITE...
           =1 #define CHANGE_TO_COMPONENT                     (0x20|COMPONENT)                
           =1 #define CHANGE_TO_DTV                           (0x20|DTV)              
           =1 #define CHANGE_TO_TV                            (0x20|TV)                                       
           =1 #define CHANGE_TO_PC                            (0x20|PC)                                       
           =1 #define CHANGE_TO_DIGITALVGA            (0x20|DIGITALVGA)                       
           =1 #define CHANGE_TO_SCART                         (0x20|SCART)                            
           =1 
           =1 
           =1 #define OSDPOSITIONMODE     0x10
           =1 #define OSD_VPOS                        0x11
           =1 #define OSD_HPOS                        0x12
           =1 #define OSD_HALFTONE            0x13
           =1 #define OSD_DURATION            0x14
           =1 #define RESET_OSDVALUE          0x15
           =1 #define OSDLANG                         0x16
           =1 
           =1 #define PANEL_CONTRAST          0x58
           =1 #define PANEL_BRIGHTNESS        0x59
           =1 #define PANEL_HUE                       0x5a
           =1 #define PANEL_SHARPNESS         0x5b
           =1 #define PANEL_SATURATION        0x5c
           =1 
           =1 #define PC_VPOS                         0x43
           =1 #define PC_HPOS                         0x44
           =1 #define PC_HSIZE                        0x4d
           =1 
           =1 #define PC_CLOCK                        0x45
           =1 #define PC_PHASE                        0x46
           =1 
           =1 #define AUTOADJUST                      0x47
           =1 #define AUTOADJUST2                     0x48
           =1 //#define SAVE_AUTOADJUST               0x49
           =1 #define RESET_AUTOADJUST        0x4a
           =1 
           =1 #define PCCOLORADJUST           0x4b
           =1 #define SAVE_COLORADJUST        0x4c
           =1 //#define RESET_COLORADJUST     0x4d
           =1 
           =1 #define RESET_PCVALUE           0x4e
           =1 #define CameraOSD                       0x4f
           =1 
           =1 #define PC_COLOR_MODE           0x3f
           =1 #define PC_COLOR_TEMP           0x30
           =1 #define PC_COLOR_MODE1          0x31
           =1 #define PC_COLOR_MODE2          0x32
           =1 #define PC_COLOR_MODE3          0x33
           =1 #define PC_COLOR_USER           0x34
           =1 #define PC_COLOR_R                      0x35
           =1 #define PC_COLOR_G                      0x36
           =1 #define PC_COLOR_B                      0x37
           =1 
           =1 #define VIDEO_MODE                      0x90
           =1 #define VIDEO_MODE1                     0x91
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 79  

           =1 #define VIDEO_MODE2                     0x92
           =1 #define VIDEO_MODE3                     0x93
           =1 #define VIDEO_USER                      0x94
           =1 #define VIDEO_CONTRAST          0x95
           =1 #define VIDEO_BRIGHTNESS        0x96
           =1 #define VIDEO_SATURATION        0x97
           =1 #define VIDEO_HUE                       0x99
           =1 #define VIDEO_SHARPNESS         0x9a
           =1 #define VIDEO_BACKLIGHT         0x9c            // add new value 
           =1 #define RESET_VIDEOVALUE        0x9b
           =1 #ifdef E_Wintek
           =1 #define RESET_USERVALUE 0x9d
           =1 #endif
           =1 #define VIDEOPICTURE            0x9f
           =1 
           =1 #define INPUTSTD                        0x6f
           =1 #define CHANGE_TO_AUTO          0x60
           =1 #define CHANGE_TO_NTSC          (0x60 | NTSC)
           =1 #define CHANGE_TO_PAL           (0x60 | PAL)
           =1 #define CHANGE_TO_SECAM         (0x60 | SECAM)
           =1 #define CHANGE_TO_NTSC4         (0x60 | NTSC4)
           =1 #define CHANGE_TO_PALM          (0x60 | PALM)
           =1 #define CHANGE_TO_PALN          (0x60 | PALN)
           =1 #define CHANGE_TO_PAL60         (0x60 | PAL60)
           =1 
           =1 
           =1 
           =1 
           =1 #define CLOSED_CAPTION          0x7f
           =1 #define CLOSEDCAP_OFF           0x70
           =1 #define CLOSEDCAP_CC1           0x71
           =1 #define CLOSEDCAP_CC2           0x72
           =1 #define CLOSEDCAP_CC3           0x73
           =1 #define CLOSEDCAP_CC4           0x74
           =1 #define CLOSEDCAP_T1            0x75
           =1 #define CLOSEDCAP_T2            0x76
           =1 #define CLOSEDCAP_T3            0x77
           =1 #define CLOSEDCAP_T4            0x78
           =1 
           =1 #define TV_GUIDE                        0x8f
           =1 #define NO_VCHIP_LOCK           0
           =1 #define VCHIP_TV_Y                      1
           =1 #define VCHIP_TV_Y7                     2
           =1 #define VCHIP_TV_G                      3
           =1 #define VCHIP_TV_PG                     4
           =1 #define VCHIP_TV_14                     5
           =1 #define VCHIP_TV_MA                     6
           =1 #define PASSWORD                        0x87
           =1 #define NEW_PASSWORD            0x88
           =1 #define CHK_PASSWORD            0x89
           =1 #define RET_CHK_PASSWORD        0x8a
           =1 
           =1 #define MPAA_RATING                     0x9f
           =1 #define NO_MPAA_RATING          0
           =1 #define MPAA_G                          1
           =1 #define MPAA_PG                         2
           =1 #define MPAA_PG_13                      3
           =1 #define MPAA_R                          4
           =1 #define MPAA_NC_17                      5
           =1 #define MPAA_X                          6
           =1 
           =1 #define TVINSTALL                       0xa0
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 80  

           =1 #define SCAN_CHANNEL            0xa1
           =1 #define AIR_CABLE_TV            0xa3
           =1 #define STORE_CLEAR_TVCHN       0xa4
           =1 #define MTS                                     0xa5
           =1 #define EDIT_CHANNEL            0xa6
           =1         #define         MTS_STEREO                      0//0x10
           =1         #define         MTS_MONO                        1//0x11
           =1 
           =1 #define AUDIO_VOLUME            0xb7
           =1 
           =1 #if 0 //andy AWT8.4 20090811
           =1 
           =1 #define AUDIO_BALANCE           0xb9
           =1 #define AUDIO_BASS                      0xba
           =1 #define AUDIO_TREBLE            0xbb
           =1 
           =1 #define AUDIO_LOUDNESS          0xbc
           =1 #define AUDIO_EFFECT            0xbd
           =1 #define AUDIO_MUTE                      0xbe
           =1 #endif
           =1 
           =1 #define DayChoice           0xb8
           =1 #define CAMOSDONOFF         0xb9
           =1 #define GAUGEChoice         0xba
           =1 #define OsdLockChoice       0xbb
           =1 #define PRIORITYChoice      0xcA
           =1 #define DVRDisplay              0xcc
           =1 
           =1 #define CAMAONOFF                   0xc1
           =1 #define CAMBONOFF               0xc2
           =1 #define CAMCONOFF                   0xc3
           =1 #define CAMRONOFF                       0xc4
           =1 
           =1 #define IMAGEChoice         0xc5 
           =1 #define REARChoice          0xc6
           =1 #define JUMPChoice          0xc7
           =1 #define CAMOUTChoice        0xc8 
           =1 #define STIME_STEP                  0xc9
           =1 #define TriggerVGA                  0xcb
           =1 #define IMAGE_A_Choice         0xcd
           =1 #define IMAGE_B_Choice         0xce
           =1 #define IMAGE_C_Choice         0xcf
           =1 
           =1 
           =1 #define MANUAL_TUNE_CHANNEL     0xab
           =1 #define FINE_TUNE_CHANNEL       0xac
           =1 #define STORE_PALCHANNEL        0xad
           =1 
           =1 //#define CLEAR_TVCHN                   0xb0
           =1 //#define STORE_TVCHN                   0xb1
           =1 
           =1 #define WIDESCREEN                      0xc0
           =1 #define WIDESCREEN_NORMAL       0 
           =1 #define WIDESCREEN_WIDE         1 
           =1 #define WIDESCREEN_PANO         2
           =1 #define WIDESCREEN_FULL         3 
           =1 #define WIDESCREEN_ZOOM         4 
           =1 
           =1 #define SYSTEM_CLOCK            0xd1
           =1 #define SYSTEM_CLOCK_H          0xd2
           =1 #define WAKEUP_TIME                     0xd3
           =1 #define WAKEUP_TIME_H           0xd4
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 81  

           =1 #define WAKEUP_PR                       0xd5
           =1 #define OFF_TIME                        0xd6
           =1 #define OFF_TIME_H                      0xd7
           =1 #define SLEEP_TIMER                     0xd8
           =1 
           =1 #define Resolution                      0xe0
           =1 #define FPS                                     0xe1
           =1 #define Quality                         0xe2
           =1 #define RecordMode                      0xe3
           =1 #define RecordLength            0xe4
           =1 #define PreAlarmLength          0xe5
           =1 #define PostAlarmLength         0xe6
           =1 #define Apply                           0xe7
           =1 #define ManualRecordStart       0xe8
           =1 #define ManualRecordStop        0xe9
           =1 #define Snapshot                        0xea
           =1 #define FormatSD                        0xeb
           =1 #define AudioRecord                     0xec
           =1 #define FirmwareUpdate          0xed
           =1 #define ChangePassword          0xee
           =1 #define OverWrite                       0xef
           =1 
           =1 
           =1 
           =1 
           =1 #define Year                            0x20
           =1 #define Month                           0x21
           =1 #define Day                                     0x22
           =1 #define Hour                            0x23
           =1 #define Minute                          0x24
           =1 
           =1 #define DaylightSaving                          0x25
           =1 #define TimeBeginesMonth                        0x26
           =1 #define TimeBeginesWeek                         0x27
           =1 #define TimeBeginesTime                         0x28
           =1 #define StandardTimeBeginesMonth        0x29
           =1 #define StandardTimeBeginesWeek         0x2a
           =1 #define StandardTimeBeginesTime         0x2b
           =1 #define TimeZone                                        0x2c
           =1 #define FirstNumber                                     0x2d
           =1 #define SecondNumber                            0x2e
           =1 #define ThridNumber                                     0x2f
           =1 #define FourthNumber                            0x38
           =1 
           =1 
           =1 
           =1 #define OSDLANGI                        0xd9
           =1 #define OSDLANGII                       OSDLANGI+1
           =1 #define OSDLANGIII                      OSDLANGI+2
           =1 #define OSDLANGIV                       OSDLANGI+3
           =1 
           =1 
           =1 #define TOHIGHMENU                      0xf1
           =1 #define MOVECURSOR2FIRST        0xf2
           =1 #define RESET_ALL                       0xf3
           =1 #define EXITMENU                        0xf4
           =1 #define DVRParamApply           0xf5
           =1 #define DATETIMEApply           0xf6
           =1 
           =1 
           =1 #define CHOICE1_VAL                     0xfc
           =1 #define CHOICE_VAL                      0xfd
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 82  

           =1 #define BAR_VAL                         0xfe
           =1 #define NUM_VAL                         0xff
           =1 
           =1 #define CAMNumberChoice     0xa3 
           =1 #define PelcoChoice         0xa4
           =1 #define Baud_rateChoice         0xa5
           =1 
           =1 #endif  // __OSDMENU__
 859          extern CODE struct RegisterInfo UserRange;
 860          extern CODE struct RegisterInfo PanelContrastRange;
 861          extern CODE struct RegisterInfo PanelBrightnessRange;
 862          extern CODE struct RegisterInfo PanelSharpnessRange;
 863          extern CODE struct RegisterInfo PanelHueRange;
 864          extern CODE struct RegisterInfo PanelSaturationRange;
 865          
 866          void GetInitPanelAttribute1(void)
 867          {
 868   1              BYTE rdata;
 869   1              int     regv;
 870   1      
 871   1              rdata = GetPanelContrastEE();
 872   1              Mapping1( rdata, &UserRange ,&regv, &PanelContrastRange);
 873   1              SetRGBContrast( GetPCColorTempModeEE(), (BYTE)regv );
 874   1      
 875   1              rdata = GetPanelBrightnessEE() ;
 876   1              Mapping1( rdata, &UserRange , &regv,   &PanelBrightnessRange );
 877   1              SetPanelBrightnessReg(RED,   (BYTE)regv);
 878   1              SetPanelBrightnessReg(GREEN, (BYTE)regv);
 879   1              SetPanelBrightnessReg(BLUE,  (BYTE)regv);
 880   1      }
 881          
 882          #endif // SUPPORT_PC
 883          /*
 884          void DefaultPanelAttributeForVideo(void)
 885          {
 886                  BYTE rdata;
 887          
 888                  SelectPanelAttrRegGroup(GROUP_RGB);
 889                  rdata = GetAttributesFromNTSCSettings(0x70);
 890                  SetPanelHueReg( (ReadDecoder(0x70) & 0xc0) | (rdata & 0x3f) );
 891          
 892                  rdata = GetAttributesFromNTSCSettings(0x71);
 893                  SetPanelContrastReg(RED,  rdata);
 894          
 895                  rdata = GetAttributesFromNTSCSettings(0x72);
 896                  SetPanelContrastReg(GREEN,rdata);
 897          
 898                  rdata = GetAttributesFromNTSCSettings(0x73);
 899                  SetPanelContrastReg(BLUE, rdata);
 900          
 901                  rdata = GetAttributesFromNTSCSettings(0x74);
 902                  SetPanelBrightnessReg(RED,  rdata);
 903          
 904                  rdata = GetAttributesFromNTSCSettings(0x75);
 905                  SetPanelBrightnessReg(GREEN,rdata);
 906          
 907                  rdata = GetAttributesFromNTSCSettings(0x76);
 908                  SetPanelBrightnessReg(BLUE, rdata);
 909          
 910                  //rdata = GetAttributesFromNTSCSettings(0x77);
 911                  //SetPanelSharpnessReg( rdata );
 912          
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 83  

 913                  SelectPanelAttrRegGroup(GROUP_YCbCr);
 914                  SetPanelSaturationReg(U_SAT, 0x80);
 915                  SetPanelSaturationReg(V_SAT, 0x80);
 916                  //SelectPanelAttrRegGroup(GROUP_RGB);
 917          
 918          }
 919          */
 920          #ifdef SUPPORT_PC
 921          
 922          //=============================================================================
 923          //                          Invert Polarity Functions
 924          //=============================================================================
 925          /*
 926          void InvertHSYNCPolarity(void)
 927          {
 928                  BYTE val;
 929          
 930                  val = ReadDecoder(0x40);
 931                  if( val & 0x04 ) {
 932                          val &= 0xfb;
 933          
 934                          #ifdef DEBUG_PC
 935                          dPuts("\r\nInvert H Pol: N->P ");
 936                          #endif
 937          
 938                  }
 939                  else {
 940                          val |= 0x04;
 941                          
 942                          #ifdef DEBUG_PC
 943                          dPuts("\r\nInvert H Pol: P->N ");
 944                          #endif
 945          
 946                  }
 947                  WriteDecoder(0x40, val);
 948          }
 949          */
 950          void InvertVSYNCPolarity(void)
 951          {
 952   1              BYTE val;
 953   1      
 954   1              val = ReadDecoder(0x40);
 955   1              if( val & 0x02 ) {
 956   2                      val &= 0xfd;
 957   2      
 958   2                      #ifdef DEBUG_PC
                              dPuts("\r\nInvert V Pol: N->P ");
                              #endif
 961   2      
 962   2              }
 963   1              else {
 964   2                      val |= 0x02;
 965   2      
 966   2                      #ifdef DEBUG_PC
                              dPuts("\r\nInvert V Pol: P->N ");
                              #endif
 969   2      
 970   2              }
 971   1              WriteDecoder(0x40, val);
 972   1      }
 973          
 974          //=============================================================================
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 84  

 975          //                          get sync pulse Functions
 976          //=============================================================================
 977          WORD GetVSYNCPulse(void)
 978          {
 979   1              WORD buf;
 980   1      
 981   1              WriteDecoder(0x5b, 0x78);                       // VSYNC 
 982   1              delay(10);
 983   1              buf = (WORD)ReadDecoder(0x58) << 8;
 984   1              buf |= ReadDecoder(0x57);
 985   1      
 986   1              #ifdef DEBUG_PC
                      dPrintf("\r\nGetVSYNCPulse():%d ", buf);
                      #endif
 989   1              return buf;
 990   1      }
 991          
 992          /* Not used right now!!
 993          WORD GetRelativePosition(void)
 994          {
 995                  WORD buf;
 996          
 997                  WriteDecoder(0x5b, 0x70);                       // VSYNC 
 998          
 999                  buf = (WORD)ReadDecoder(0x5a) << 8;
1000                  buf |= ReadDecoder(0x59);
1001          
1002                  return buf;
1003          }
1004          //*/
1005          
1006          WORD GetHSYNCPulse(void)
1007          {
1008   1              WORD buf;
1009   1      
1010   1              WriteDecoder(0x5b, 0x68);                       // HSYNC 
1011   1              buf = (WORD)ReadDecoder(0x58) << 8;             // from MSB
1012   1              buf |= ReadDecoder(0x57);
1013   1      
1014   1              return buf;
1015   1      }
1016          
1017          #endif  // SUPPORT_PC
1018          
1019          //=============================================================================
1020          //                                                              Internal PLL
1021          //=============================================================================
1022          #if defined SUPPORT_PC || defined SUPPORT_DTV
1023          
1024          BYTE GetPOST(void)
1025          {
1026   1              BYTE post;
1027   1      
1028   1              post = ReadDecoder(TW88_PLL_DIV);
1029   1              return ((post>>6) & 0x03);                      // change register position
1030   1      }
1031          
1032          DWORD GetPPF(void)
1033          {
1034   1              DWORD ppf, Freq;
1035   1              BYTE  i;
1036   1      
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 85  

1037   1              Freq = ReadDecoder(TW88_FPLL0);
1038   1              Freq &= 0x0f;
1039   1              Freq <<= 8;
1040   1              Freq |= ReadDecoder(TW88_FPLL1);
1041   1              Freq <<= 8;
1042   1              Freq |= ReadDecoder(TW88_FPLL2);
1043   1      
1044   1              #ifdef DEBUG_PC
                      dPrintf("\r\n(GetFBDN) :%ld", Freq);
                      #endif
1047   1      // 27000000 * 4 * FREQ / 2^17  / 2^POST
1048   1              ppf = 824L * ( Freq );
1049   1      //      ppf = 412L * ( GetFBDN() );
1050   1      
1051   1              i= GetPOST();
1052   1              
1053   1              for(; i>0; i-- ) ppf /= 2;
1054   1      
1055   1              #ifdef DEBUG_PC
                      dPrintf("\r\n(GetPPF) :%ld", ppf);
                      #endif
1058   1              return ppf;
1059   1      }
1060          #endif 
1061          
1062          #if defined SUPPORT_PC || defined SUPPORT_DTV
1063          
1064          // PLL = 108MHz *FPLL / 2^17
1065          // FPLL = PLL * 2^17 / 108MHz
1066          void ChangeInternPLL(DWORD _PPF)
1067          {
1068   1              BYTE    ppf, CURR, VCO, POST, i;
1069   1              DWORD   FPLL;
1070   1      
1071   1              #ifdef DEBUG_PC
                      dPrintf("\r\n++ ChangeInternPLL ++_PPF:%08lx(%ld) ", _PPF, _PPF);
                      #endif
1074   1      
1075   1              ppf = _PPF/1000000;
1076   1      
1077   1              //----- Frequency Range --------------------
1078   1              if     ( ppf < 27 )  { VCO=0; CURR=0; POST=2; }         // step = 0.5MHz
1079   1              else if( ppf < 54 )  { VCO=1; CURR=0; POST=1; }         // step = 1.0MHz
1080   1              else if( ppf < 108 ) { VCO=2; CURR=0; POST=0; }         // step = 1.0MHz
1081   1              else                 { VCO=3; CURR=0; POST=0; }         // step = 1.0MHz
1082   1      
1083   1              //----- Get FBDN
1084   1              FPLL = (_PPF/100000L)*2427L;
1085   1      
1086   1              i = POST;
1087   1              for(; i>0; i-- )
1088   1                      FPLL *= 2;
1089   1      
1090   1              FPLL = FPLL / 20L;
1091   1      
1092   1              //----- Setting Registers : below is different with 8806
1093   1              WriteDecoder( TW88_FPLL0, (FPLL>>16));
1094   1              WriteDecoder( TW88_FPLL1, (BYTE)(FPLL>>8));
1095   1              WriteDecoder( TW88_FPLL2, (BYTE)FPLL );
1096   1      
1097   1              if(PcMode==EE_XGA_60)           //william-20100128
1098   1                      WriteDecoder( TW88_FPLL1,0xb5); 
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 86  

1099   1      
1100   1      
1101   1              WriteDecoder( TW88_PLL_DIV, (VCO<<4) | (POST<<6) |CURR );
1102   1      }
1103          //=============================================================================
1104          //                         Set Measurement Window Functions   
1105          //=============================================================================
1106          void SetMeasureWindowH(WORD start, WORD stop)
1107          {
1108   1              BYTE val;
1109   1      
1110   1              #ifdef DEBUG_PC
                      dPrintf("\r\nSetWindow H. Range(%04x, %04x)", start, stop);
                      #endif
1113   1      
1114   1              // TW8804 write LSByte first
1115   1              val = (BYTE)((stop >> 4) & 0xf0);
1116   1              val |= (BYTE)((start>>8) & 0x07);
1117   1              WriteDecoder(0x53, val);                                // H-start and H-stop
1118   1      
1119   1              WriteDecoder(0x51, (BYTE)start);                // H-start
1120   1              WriteDecoder(0x52, (BYTE)stop);                 // H-stop
1121   1      }
1122          
1123          void SetMeasureWindowV(WORD start, WORD stop)
1124          {
1125   1              BYTE val;
1126   1      
1127   1              #ifdef DEBUG_PC
                      dPrintf("\r\nSetWindow V. Range(%04x, %04x)", start, stop);
                      #endif
1130   1      
1131   1              // TW8804 write LSByte first
1132   1              val  = (BYTE)((stop>>4) & 0x70);
1133   1              val |= (BYTE)((start>>8) & 0x07);
1134   1              WriteDecoder(0x56, val);                                // V-start & V-stop
1135   1      
1136   1              WriteDecoder(0x54, (BYTE)start);                // V-start
1137   1              WriteDecoder(0x55, (BYTE)stop);                 // V-stop
1138   1      }
1139          #endif // SUPPORT_PC || defined SUPPORT_DTV
1140          
1141          //=============================================================================
1142          //                                    ZoomControl
1143          //=============================================================================
1144          #if defined(SUPPORT_PC) || defined(SUPPORT_DTV)
1145          void BypassZoom()
1146          {
1147   1              #ifdef WXGA
                      WriteDecoder(TW88_XUSCALELO, 0xcd);
                      WriteDecoder(TW88_YUSCALELO, 0x80);
                      WriteDecoder(TW88_XDSCALELO, 0x00);
                      WriteDecoder(TW88_XYSCALEHI, 0x06);     
                      #else
1153   1              //SetBypassmode=1;
1154   1              WriteDecoder(TW88_XUSCALELO, 0x00);
1155   1              WriteDecoder(TW88_XDSCALELO, 0x80);
1156   1              WriteDecoder(TW88_YUSCALELO, 0x00);
1157   1              WriteDecoder(TW88_XYSCALEHI, 0x15);     //Set bit 4 to 1
1158   1              #endif
1159   1      }
1160          #endif
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 87  

1161          
1162          #if defined(SUPPORT_PC) || defined(SUPPORT_DTV) //  || defined(WIDE_SCREEN)
1163          void XscaleU(DWORD scale)
1164          {
1165   1              BYTE val;
1166   1      
1167   1              WriteDecoder( TW88_XUSCALEFINE, (BYTE)scale);
1168   1      
1169   1              scale >>= 8;
1170   1              WriteDecoder( TW88_XUSCALELO, (BYTE)scale);
1171   1      
1172   1              scale >>= 8;
1173   1              val = ReadDecoder(TW88_XYSCALEHI);
1174   1              val &= 0xfe;
1175   1              val |= (BYTE)scale;
1176   1              WriteDecoder( TW88_XYSCALEHI, val );
1177   1      }
1178          
1179          void XscaleD(DWORD scale)
1180          {
1181   1              BYTE val;
1182   1      
1183   1              WriteDecoder( TW88_XDSCALELO, (BYTE)scale);
1184   1      
1185   1              scale >>= 8;
1186   1              scale <<= 1;
1187   1              val = ReadDecoder(TW88_XYSCALEHI);
1188   1              val &= 0xfd;
1189   1              val |= (BYTE)scale;
1190   1              WriteDecoder( TW88_XYSCALEHI, val );
1191   1      }
1192          
1193          void XScale2(DWORD scale)
1194          {
1195   1      extern  BYTE PcMode;
1196   1              if( scale==0x10000 ) {          // No Scale
1197   2                      XscaleU(0x10000);
1198   2                      XscaleD(0x80);
1199   2              }
1200   1              else if( scale<0x10000 ) {      // Up Scale
1201   2                      XscaleU(scale);
1202   2                      #ifdef REFERENCE
                              XscaleD(0x80);
                              #else
1205   2                      #ifdef XGA
                              XscaleD(0x80);
                              #else
1208   2                      if (PcMode >= EE_SVGA_56 && PcMode <= EE_SVGA_85 )
1209   2                              XscaleD(0x82);
1210   2                      else
1211   2                              XscaleD(0x80);
1212   2                      #endif 
1213   2                      #endif
1214   2              }
1215   1              else {                                          // Down Scale
1216   2                      XscaleU(0x10000);
1217   2                      #ifdef REFERENCE
                              XscaleD(scale/2/256);
                              #else
1220   2                      if (PcMode == EE_XGA_60)
1221   2                      {
1222   3                              XscaleD(scale/2/256 +1);
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 88  

1223   3                      }
1224   2                      else
1225   2                              XscaleD(scale/2/256);
1226   2                      #endif
1227   2              }
1228   1      }
1229          
1230          void YScale2(DWORD scale)
1231          {
1232   1              BYTE val;
1233   1      
1234   1              WriteDecoder( TW88_YUSCALEFINE, (BYTE)(scale));
1235   1      
1236   1              scale >>= 8;
1237   1              WriteDecoder( TW88_YUSCALELO, (BYTE)(scale));
1238   1      
1239   1              scale >>= 8;
1240   1              scale <<= 2;
1241   1              val = ReadDecoder(TW88_XYSCALEHI) & 0xf3;
1242   1              val |= (BYTE)scale;
1243   1              WriteDecoder( TW88_XYSCALEHI, val );
1244   1      }
1245          #endif // SUPPORT_PC || SUPPORT_DTV || WIDE_SCREEN
1246          
1247          /**
1248          #if defined(SUPPORT_PC) || defined(SUPPORT_DTV)
1249          WORD GetYScale(void)
1250          {
1251                  WORD scale;
1252                  BYTE val;
1253          
1254                  scale = ReadDecoder(TW88_YUSCALELO);
1255                  val = ReadDecoder(TW88_XYSCALEHI);
1256                  val = (val >> 2) & 0x03;
1257                  scale = scale + val*0x100;
1258          
1259                  return scale;
1260          }
1261          #endif // SUPPORT_PC || SUPPORT_DTV
1262          **/
1263          
1264          //=============================================================================
1265          //                                   Panel related..
1266          //=============================================================================
1267          /***
1268          #if (defined SERIAL) || (defined WIDE_SCREEN)
1269          void SetPVR(WORD pvr)
1270          {
1271                  BYTE buf;
1272          
1273                  // TW8804 write LSByte first
1274                  buf = ReadDecoder(0xbb) & 0x0f;
1275                  buf = buf | ( (pvr>>4) & 0xf0 );
1276                  WriteDecoder( 0xbb, buf );
1277          
1278                  WriteDecoder( 0xba, (BYTE)pvr );
1279          }
1280          
1281          void SetPHR(WORD phr)
1282          {
1283                  BYTE buf;
1284          
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 89  

1285                  // TW8804 write LSByte first
1286                  buf = ReadDecoder(0xb6) & 0x0f;
1287                  buf = buf | ( (phr>>4) & 0xf0 );
1288                  WriteDecoder( 0xb6, buf );
1289          
1290                  WriteDecoder( 0xb5, (BYTE)phr );
1291          }
1292          #endif // SERIAL || WIDE_SCREEN
1293          ***/
1294          
1295          #if defined( SUPPORT_PC ) || defined( SUPPORT_DTV ) || defined( DEBUG_SETPANEL)
1296          //----- Panel V Resolution
1297          WORD GetPVR(void)
1298          {
1299   1      /*      WORD    pvr;
1300   1              BYTE    val;
1301   1              
1302   1              val = ReadDecoder(0xbb);
1303   1              pvr = (val & 0x70) << 4;                // pppp xxxx -> pppp 0000 0000
1304   1              pvr |= ReadDecoder(0xba);
1305   1      
1306   1              return pvr;*/
1307   1              return PVR_;
1308   1      }
1309          
1310          //----- Panel H Resolution
1311          WORD GetPHR(void)
1312          {
1313   1      /*      WORD    phr;
1314   1              BYTE    val;
1315   1      
1316   1              val = ReadDecoder(0xb6);
1317   1              phr = (val & 0x70) << 4;                // pppp xxxx -> pppp 0000 0000
1318   1              phr |= ReadDecoder(0xb5);
1319   1      
1320   1              return phr;*/
1321   1              return PHR_;
1322   1      }
1323          
1324          WORD GetHPN(void)
1325          {
1326   1              WORD buf;
1327   1      
1328   1              ClearEnDet();                   // HHY 05.29.03 protect changing during read out
1329   1      
1330   1              WriteDecoder(0x5b, 0x58);       // HSYNC period and VSYNC period
1331   1      
1332   1              buf = ReadDecoder(0x58);        // from MSB
1333   1              buf = buf << 8;
1334   1              buf = buf | ReadDecoder(0x57);
1335   1      
1336   1              SetEnDet();                             // HHY 05.29.03 release protection
1337   1      
1338   1              return buf;
1339   1      
1340   1      
1341   1      }
1342          /*
1343          WORD GetHPN(void)
1344          {
1345                  WORD buf, sum;
1346                  BYTE i;
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 90  

1347          
1348                  //Get HPN 
1349                  WriteDecoder(0x5b, 0x50);       // HSYNC period and VSYNC period
1350          
1351                  //HPN
1352          
1353                  for(i=0, sum=0; i<5; i++) {             // HHY 1.45 take average 
1354                          buf = (WORD)ReadDecoder(0x58) << 8;// from MSB
1355                          buf |= ReadDecoder(0x57);
1356                          sum += buf;
1357                  }
1358          
1359                  buf = (sum+5)/5;
1360          
1361                  return buf;
1362          }
1363          */
1364          WORD GetVPN(void)
1365          {
1366   1              WORD buf;
1367   1      
1368   1              WriteDecoder(0x5b, 0x58);       // HSYNC period and VSYNC period
1369   1      
1370   1              buf = (WORD)ReadDecoder(0x5a);
1371   1              buf = buf << 8;
1372   1              buf = buf | ReadDecoder(0x59);
1373   1              return buf;
1374   1      }
1375          
1376          /*
1377          WORD GetPVP(void)
1378          {
1379                  WORD pvp;
1380          
1381                  pvp = ReadDecoder(0xbb);                                        // pvp = Panel Vsync Period
1382                  pvp = (pvp & 0x0f) << 8;                                //
1383                  pvp |= ReadDecoder(0xb7);                                       //
1384          
1385                  return pvp;
1386          }
1387          */
1388          
1389          BYTE GetVBackPorch(void)
1390          {
1391   1              return ReadDecoder(0xb9);
1392   1      }
1393          
1394          #endif // SUPPORT_PC
1395          
1396          #if defined SUPPORT_PC || defined SUPPORT_DTV
1397          void SetVBackPorch(BYTE val)
1398          {
1399   1              #ifdef DEBUG_PC
                      dPrintf("\r\n === SetVBackPorch(%d)", (WORD)val);
                      #endif
1402   1              WriteDecoder(0xb9, val);
1403   1      }
1404          
1405          void SetPVP(WORD period )
1406          {
1407   1              BYTE val;
1408   1      
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 91  

1409   1              // TW8804 write LSByte first
1410   1              val = ReadDecoder(0xbb);
1411   1              val = val & 0xf0;
1412   1              val = val | (BYTE)(period>>8);
1413   1              WriteDecoder(0xbb, val);
1414   1              WriteDecoder(0xb7, (BYTE)period);       // A4, A8 = Panel Vsync Period
1415   1      }
1416          
1417          void SetPHP(WORD php)
1418          {
1419   1              BYTE val;
1420   1      
1421   1              // TW8804 write LSByte first
1422   1              val = ReadDecoder(0xb6);
1423   1              val &= 0xf0;                            //0xf8; cut D
1424   1              val |= (BYTE)(php>>8);
1425   1              WriteDecoder(0xb6, val);
1426   1              WriteDecoder(0xb2, php);                // A9, AD = Panel Hsync Cycle
1427   1      }
1428          
1429          #endif //#if defined SUPPORT_PC || defined SUPPORT_DTV
1430          
1431          /*WORD GetPHP(void)
1432          {
1433                  WORD php;
1434          
1435                  php = ((WORD)ReadDecoder(0xb6) & 0x0f) << 8;
1436                  php += ReadDecoder(0xb2);
1437          
1438                  return php;
1439          }
1440          
1441          */
1442          
1443          
1444          //#if (defined SERIAL) || (defined WIDE_SCREEN)
1445          /*#if (defined WIDE_SCREEN)
1446          WORD GetVactive(void)  // Input V active length
1447          {
1448                  WORD actv;
1449          
1450                  actv =   ReadDecoder(CROP_HI) & 0x30;
1451                  actv <<= 4;
1452                  actv |=  ReadDecoder(VACTIVE_LO);
1453          
1454                  return actv;
1455          }
1456          #endif // WIDE_SCREEN
1457          
1458          
1459          WORD GetHCounter1(BYTE field )
1460          {
1461                  WORD counter;
1462          
1463                  MeasureAndWait(field);
1464          
1465                  WriteDecoder(0x5b, 0xc0);
1466                  counter = (WORD)ReadDecoder(0x58) << 8;
1467                  counter += ReadDecoder(0x57);
1468          
1469                  return counter;
1470          }
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 92  

1471          
1472          void SetHInitial(BYTE field, WORD counter)
1473          {
1474                  BYTE val;
1475                  
1476                  if( field==0 ) {        // odd
1477                          val = ReadDecoder( 0xc2 );
1478                          val = ( val & 0xf0 ) |  ( ( counter>>8 ) & 0x0f );
1479                          WriteDecoder(0xc2, val);
1480                          WriteDecoder(0xc0, (BYTE)counter);
1481                  }
1482                  
1483                  else {                          // even
1484                          val = ReadDecoder( 0xc2 );
1485                          val = ( val & 0x0f ) |  ( ( counter>>4 ) & 0xf0 );
1486                          WriteDecoder(0xc2, val);
1487                          WriteDecoder(0xc1, (BYTE)counter);
1488                  }
1489          }
1490          */
1491          //=============================================================================
1492          //
1493          //=============================================================================
1494          //
1495          /*
1496          void TuneLineBuffer(BYTE field)
1497          {
1498                  WORD php, hcounter;
1499                  int initial=0;
1500                  BYTE freerun;
1501          
1502                  extern IDATA BYTE  PcMode;
1503          
1504          
1505                  #if defined (DEBUG_PC) || defined (DEBUG_DECODER)
1506                  dPrintf("\r\n----- TuneLineBuffer:%d -----", (WORD)field);
1507                  #endif
1508          
1509                  #ifdef SUPPORT_PC
1510                  if( IsBypassmode() ) return;
1511                  #endif
1512          
1513                  //#ifdef SUPPORT_DTV
1514                  //if( IsDTVInput() ) return;
1515                  //#endif
1516          
1517                  // disable free run
1518                  freerun = IsFreeRun();
1519                  PanelFreeRun(0);
1520          
1521                  php = GetPHP();
1522          
1523                  initial = 0;
1524                  SetHInitial(field, initial);
1525          
1526                  hcounter = GetHCounter1(field);
1527                  #if defined (DEBUG_PC) || defined (DEBUG_DECODER)
1528                  dPrintf("\r\nInitial=%4x  Hcounter=%4x  PHP=%4x (%2d%%)", initial, hcounter, php, (WORD)((DWORD)hcounter*
             -100/php) );
1529                  #endif
1530                  
1531                  if( (hcounter < ((DWORD)php*78/100)) || (hcounter > ((DWORD)php*82/100)) ) {
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 93  

1532                          
1533                          initial = php*4/5 - hcounter + initial;
1534                          if( initial>=0 ) {
1535                                  SetHInitial(field, initial/2);
1536                                  dPuts(" + ");
1537                          }
1538                          else {
1539                                  SetHInitial(field, 0x1000 + initial/2);
1540                                  dPuts(" - ");
1541                          }
1542                          
1543          //              WriteDecoder(0xb1, ReadDecoder(0xb1)&0x08);
1544          //              WriteDecoder(0xb0, 0xff);
1545          //              WriteDecoder(0xb1, 0xff);
1546                          
1547                  }
1548                  
1549          
1550                  PanelFreeRun(freerun);
1551          }
1552          */
1553          
1554          //=============================================================================
1555          //
1556          //=============================================================================
1557          /*
1558          WORD GetAveHCVWRS(BYTE field)
1559          {
1560                  WORD hcounter, ave=0;
1561                  BYTE i;
1562          
1563          
1564                  #ifdef DEBUG_TW88
1565                  dPuts("\r\n------ Get Average of HCVWRS ------");
1566                  #endif
1567          
1568                  for(i=0; i<5; i++) {
1569                  
1570                          hcounter = GetHCounter1(field);
1571          
1572                          #ifdef DEBUG_TW88
1573                          dPrintf("\r\n[%2d] HCVWRS=%4d", i, hcounter);
1574                          #endif
1575                          if( i==0 )
1576                                  ave = hcounter;
1577                          else
1578                                  ave = ( ave + hcounter ) / 2;
1579                  }
1580                  #ifdef DEBUG_TW88
1581                  dPrintf("\r\n----------- Average:%d -------------", ave);
1582                  #endif
1583          
1584                  return ave;
1585          }
1586          */
1587          
1588          
1589          #if 0 //SERIAL
              void TestHCVWRS(BYTE field, WORD initial)
              {
                      WORD /*php,*/ hcounter, min=0, max=0;
                      BYTE i;
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 94  

              
              
                      #ifdef DEBUG_TW88
                      dPuts("\r\n------ Get HCVWRS ------");
                      #endif
              
              //      php = GetPHP();
                      
                      SetHInitial(field, initial);
              
                      for(i=0; i<30; i++) {
                      
                              hcounter = GetHCounter1(field);
                              dPrintf("\r\n[%2d] HInitial:%d  HCVWRS=%4d  PHP=%4d", i, initial, hcounter, GetPHP());
                              dPrintf(" : %d%% of PHP ", hcounter*10/(GetPHP()/10));
                              if( i==0 )
                                      min = hcounter;
                              if( min > hcounter )
                                      min = hcounter;
                              if( max < hcounter )
                                      max = hcounter;
                      }
                      dPrintf("\r\n------ Min:%d     Max:%d  ---(Field:%d)--", min, max, field);
              }
              #endif // SERIAL
1619          
1620          //#endif
1621          
1622          /***
1623          WORD GetHPN1(void)
1624          {
1625                  WORD buf;
1626                  BYTE val;
1627          
1628                  //Get HPN 
1629                  WriteDecoder(0x5b, 0x50);       // HSYNC period and VSYNC period
1630          
1631                  //HPN
1632          
1633                  val = ReadDecoder(0x58);        // from MSB
1634                  buf = (WORD)val << 8;
1635                  val = ReadDecoder(0x57);
1636                  buf |= val;
1637          
1638                  return buf;
1639          }
1640          ***/
1641          
1642          /****
1643          #if (defined SERIAL) || (defined WIDE_SCREEN)
1644          WORD CalcVBackPorch4DecoderInput( void )
1645          {
1646                  WORD            back_porch, vsud;
1647                  DWORD           realv;
1648          
1649                  vsud = GetVSUD();
1650                  back_porch = ( ReadDecoder(VDELAY_LO) - ReadDecoder( 0xbd ) + 2 ) * 0x100L ;    
1651                                                                                                  // input vdelay - diff_in_out_vsync + 2 
1652                  back_porch += (vsud-1);                                 // for getting rounded up result
1653                  back_porch /=  vsud ;                                   // convert to value based on output
1654                  back_porch -= ReadDecoder( 0xb8 );                      // - Pandel Vertical Pulse Width
1655          
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 95  

1656                  realv =  ( GetVactive() * (DWORD)0x100 / vsud - GetPVR() ) / 2 ;
1657                                                                                                  // because of overscan.
1658                  Printf("\r\n(CalcVBack...) min back proch:0x%x  add:0x%lx", back_porch, realv);
1659                  back_porch +=  realv;
1660          
1661                  SetVBackPorch( (BYTE) back_porch );
1662                  return back_porch;
1663          }
1664          #endif // SERIAL || WIDE_SCREEN
1665          ****/
1666          
1667          /******
1668          WORD GetVSUD(void)
1669          {
1670                  WORD            vsud;
1671                  BYTE        scale;
1672          
1673                  scale = ReadDecoder( TW88_XYSCALEHI );
1674                  vsud = (WORD)(scale & 0x0c) << 8;
1675                  vsud |= ReadDecoder( TW88_YUSCALELO );
1676          
1677                  #ifdef DEBUG_TW88
1678                  dPrintf("\r\n(GetVSDU) :0x%x", vsud);
1679                  #endif
1680                  return vsud;
1681          }
1682          ******/
1683          
1684          /////////////////////////////////////////////////////////////////////////////
1685          // Mapping( int fromValue, CRegInfo fromRange,
1686          //                                           int * toValue, CRegInfo toRange )
1687          // Purpose: Map a value in certain range to a value in another range
1688          // Input:   int fromValue - value to be mapped from
1689          //          CRegInfo fromRange - range of value mapping from
1690          //          CRegInfo toRange   - range of value mapping to
1691          // Output:  int * toValue - mapped value
1692          // Return:  Fail if error in parameter, else Success
1693          // Comment: No range checking is performed here. Assume parameters are in
1694          //          valid ranges.
1695          //          The mapping function does not assume default is always the mid
1696          //          point of the whole range. It only assumes default values of the
1697          //          two ranges correspond to each other.
1698          //          
1699          //          The mapping formula is:
1700          //
1701          //            For fromRange.Min() <= fromValue <= fromRange.Default():
1702          //
1703          //                              (fromValue -fromRange.Min())* (toRange.Default() - toRange.Min())
1704          //                              -------------------------------------------------------------------- + toRange.Min()
1705          //                                      fromRange.Default() - fromRange.Min()
1706          //
1707          //                        For fromRange.Default() < fromValue <= fromRange.Max():
1708          //
1709          //                              (fromValue - fromRange.Default()) * (toRange.Max() - toRange.Default())
1710          //                              --------------------------------------------------------------------- + toRange.Default()
1711          //                           fromRange.Max() - fromRange.Default()
1712          ////
1713          ////////////////////////////////////////////////////////////////////////////
1714          BYTE Mapping1( int fromValue, CODE_P struct RegisterInfo *fromRange,
1715                                           int * toValue, CODE_P struct RegisterInfo *toRange ){
1716   1      
1717   1              // calculate intermediate values
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 96  

1718   1              int a;
1719   1              int b;
1720   1      
1721   1              // perform mapping
1722   1              if ( fromValue <= fromRange->Default ) {
1723   2                      a = toRange->Default - toRange->Min;
1724   2                      b = fromRange->Default - fromRange->Min;
1725   2                      // prevent divide by zero
1726   2                      if( b==0 )              return (FALSE);
1727   2                      *toValue = (int) ( (DWORD)fromValue- (DWORD)fromRange->Min ) * a / b 
1728   2                                                      +(DWORD)toRange->Min;
1729   2              }
1730   1              else {
1731   2                      a = toRange->Max - toRange->Default;
1732   2                      b = fromRange->Max - fromRange->Default;
1733   2                      // prevent divide by zero
1734   2                      if( b==0 )              return (FALSE);
1735   2              *toValue = (int) ( (DWORD)fromValue - (DWORD)fromRange->Default ) * a / b
1736   2                             + (DWORD)toRange->Default;
1737   2              }
1738   1      
1739   1              #ifdef DEBUG_OSD
                      dPrintf("\r\n++(Mapping1)%d(%d-%d-%d)", (WORD)fromValue, (WORD)fromRange->Min, (WORD)fromRange->Default, 
             -(WORD)fromRange->Max );
                      dPrintf("->%d(%d-%d)", (WORD)*toValue, (WORD)toRange->Min, (WORD)toRange->Max);
                      #endif
1743   1              
1744   1              return ( TRUE );
1745   1         
1746   1      }
1747          
1748          #ifndef KEILC
              #ifdef SUPPORT_PC
              BYTE Mapping2( int fromValue, IDATA_P struct RegisterInfo *fromRange,
                                               int * toValue, CODE_P struct RegisterInfo *toRange ){
              
                      // calculate intermediate values
                      int a;
                      int b;
              
              
                      // perform mapping
                      if ( fromValue <= fromRange->Default ) {
                              a = toRange->Default - toRange->Min;
                              b = fromRange->Default - fromRange->Min;
                              // prevent divide by zero
                              if( b==0 )              return (FALSE);
                              *toValue = (int) ( (DWORD)fromValue- (DWORD)fromRange->Min ) * a / b 
                                                              +(DWORD)toRange->Min;
                      }
                      else {
                              a = toRange->Max - toRange->Default;
                              b = fromRange->Max - fromRange->Default;
                              // prevent divide by zero
                              if( b==0 )              return (FALSE);
                    *toValue = (int) ( (DWORD)fromValue - (DWORD)fromRange->Default ) * a / b
                                     + (DWORD)toRange->Default;
                      }
              
                      #ifdef DEBUG_OSD
                      dPrintf("\r\n++(Mapping2)%d(%d-%d-%d)", (WORD)fromValue, (WORD)fromRange->Min, (WORD)fromRange->Default, 
                              (WORD)fromRange->Max );
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 97  

                      dPrintf("->%d(%d-%d)", (WORD)*toValue, (WORD)toRange->Min, (WORD)toRange->Max);
                      #endif
                      
                      return ( TRUE );
                 
              }
              #endif
              
              BYTE Mapping3( int fromValue, CODE_P struct RegisterInfo *fromRange,
                                               int * toValue, IDATA_P struct RegisterInfo *toRange ){
              
                      // calculate intermediate values
                      int a;
                      int b;
              
              
                      // perform mapping
                      if ( fromValue <= fromRange->Default ) {
                              a = toRange->Default - toRange->Min;
                              b = fromRange->Default - fromRange->Min;
                              // prevent divide by zero
                              if( b==0 )              return (FALSE);
                              *toValue = (int) ( (DWORD)fromValue- (DWORD)fromRange->Min ) * a / b 
                                                              +(DWORD)toRange->Min;
                      }
                      else {
                              a = toRange->Max - toRange->Default;
                              b = fromRange->Max - fromRange->Default;
                              // prevent divide by zero
                              if( b==0 )              return (FALSE);
                    *toValue = (int) ( (DWORD)fromValue - (DWORD)fromRange->Default ) * a / b
                                     + (DWORD)toRange->Default;
                      }
              
                      #ifdef DEBUG_OSD
                      dPrintf("\r\n++(Mapping3)%d(%d-%d-%d)", (WORD)fromValue, (WORD)fromRange->Min, (WORD)fromRange->Default, 
                              (WORD)fromRange->Max );
                      dPrintf("->%d(%d-%d)", (WORD)*toValue, (WORD)toRange->Min, (WORD)toRange->Max);
                      #endif
                      
                      return ( TRUE );
                 
              }
              #endif
1823          
1824          //---------------------------------------------------------------------------------
1825          extern  CODE BYTE NTSC_Regs[];
1826          #ifdef ADD_ANALOGPANEL
              extern CODE BYTE NTSC_Regs_Analog[];
              #endif
1829          
1830          /*
1831          BYTE GetDataFromTxtFile(BYTE index)
1832          {
1833                  BYTE cnt;
1834                  CODE_P BYTE *RegSet;
1835          
1836                  #ifdef ADD_ANALOGPANEL
1837                  if(IsAnalogOn())
1838                          RegSet = NTSC_Regs_Analog;
1839                  else
1840                  #endif  
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 98  

1841                  RegSet = NTSC_Regs;
1842          
1843                  cnt = 0;
1844                  CheckBuf = 0;
1845                  while ( *RegSet != 0xFF ) {
1846          
1847                          if( cnt==0 ) {
1848                                  //first 2 bytes are I2C address and count of register
1849                                  if( (*RegSet) ==TW88I2CAddress ) {
1850                                          cnt = *(RegSet+1);
1851                                          RegSet+=2;
1852                                          for(; cnt>0; cnt--) {
1853                                                  if((*RegSet)==index ) {
1854          
1855                                                          #ifdef DEBUG_TW88
1856                                                          dPrintf("--%02x", (WORD)*(RegSet+1));
1857                                                          #endif
1858          
1859                                                          CheckBuf = (*(RegSet+1));
1860                                                          return 1;
1861                                                  }
1862                                                  RegSet+=2;
1863                                          }
1864                                          break;
1865                                  }
1866                                  else
1867                                          RegSet += ( (*(RegSet+1)+1)*2 );        // HHY 2.04
1868                          }
1869                  }
1870          
1871                  return 0;
1872          }
1873          */
1874          /*
1875          BYTE GetAttributesFromNTSCSettings(BYTE index)
1876          {
1877          
1878                  #ifdef DEBUG_TW88
1879                  dPuts("\r\n++(GetAttributesFromNTSCSettings)");
1880                  #endif
1881          
1882                  #ifdef DEBUG_TW88
1883                  dPrintf("\r\nindex:%02x", (WORD)index);
1884                  #endif
1885          
1886                  if(GetDataFromTxtFile(index)) return CheckBuf;
1887          
1888                  //in case of failing to find that register value in default setting
1889          
1890                  switch( index ) {
1891                  case 0x70:      return 0x20;
1892                  case 0x71:
1893                  case 0x72:
1894                  case 0x73:
1895                  case 0x74:      
1896                  case 0x75:
1897                  case 0x76:              return 0x80;
1898                  case 0x77:              return 0;
1899          
1900                  case BRIGHT:    return 0x00;
1901                  case CONTRAST:  return 0x60;
1902                  case SHARPNESS: return 0x10;
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 99  

1903                  case PNLSHARPNESS: return 0x03;
1904                  case SAT_U:             return 0x7f;
1905                  case SAT_V:             return 0x5a;
1906                  case HUE:               return 0x00;
1907          
1908                  case SHUE:              return 0x0;
1909                  case SCONTRAST: return 0x60;
1910                  case SBRIGHT:   return 0x0;
1911                  case SCbGAIN:   return 0x40;
1912                  case SCrGAIN:   return 0x40;
1913                  default:        return 0xff;
1914                  }
1915          }
1916          
1917          */
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 100 

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com0074 (BEGIN)
0000         L?0117:
0000 18                DEC     R0
0001 F2                MOVX    @R0,A
0002         L?0118:
0002 7800        R     MOV     R0,#LOW fromRange
0004         L?0119:
0004 120000      E     LCALL   ?C?PLDPDATA
0007         L?0120:
0007 900004            MOV     DPTR,#04H
000A 020000      E     LJMP    ?C?ILDOPTR
000D         L?0121:
000D EF                MOV     A,R7
000E F8                MOV     R0,A
000F E4                CLR     A
0010 F3                MOVX    @R1,A
0011 E8                MOV     A,R0
0012 19                DEC     R1
0013 F3                MOVX    @R1,A
0014 22                RET     
0015         L?0122:
0015 7800        R     MOV     R0,#LOW Freq
0017 120000      E     LCALL   ?C?LSTPDATA
001A 7800        R     MOV     R0,#LOW Freq
001C 120000      E     LCALL   ?C?LLDPDATA
001F 7808              MOV     R0,#08H
0021 120000      E     LCALL   ?C?LSHL
0024         L?0123:
0024 7800        R     MOV     R0,#LOW Freq
0026 120000      E     LCALL   ?C?LSTPDATA
0029 7800        R     MOV     R0,#LOW Freq
002B 22                RET     
002C         L?0124:
002C 7800        R     MOV     R0,#LOW fromValue
002E E2                MOVX    A,@R0
002F FE                MOV     R6,A
0030 08                INC     R0
0031 E2                MOVX    A,@R0
0032 FF                MOV     R7,A
0033 C3                CLR     C
0034 EF                MOV     A,R7
0035 9B                SUBB    A,R3
0036 FF                MOV     R7,A
0037 EE                MOV     A,R6
0038 9A                SUBB    A,R2
0039 FE                MOV     R6,A
003A 7800        R     MOV     R0,#LOW a
003C E2                MOVX    A,@R0
003D FC                MOV     R4,A
003E 08                INC     R0
003F E2                MOVX    A,@R0
0040 FD                MOV     R5,A
0041 120000      E     LCALL   ?C?IMUL
0044 7800        R     MOV     R0,#LOW b
0046 E2                MOVX    A,@R0
0047 FC                MOV     R4,A
0048 08                INC     R0
0049 E2                MOVX    A,@R0
004A FD                MOV     R5,A
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 101 

004B 020000      E     LJMP    ?C?SIDIV
004E         L?0126:
004E         L?0127:
004E E2                MOVX    A,@R0
004F 2F                ADD     A,R7
0050 F2                MOVX    @R0,A
0051 18                DEC     R0
0052 E2                MOVX    A,@R0
0053 3400              ADDC    A,#00H
0055 F2                MOVX    @R0,A
0056 22                RET     
0057         L?0128:
0057         L?0129:
0057 E2                MOVX    A,@R0
0058 FE                MOV     R6,A
0059 08                INC     R0
005A E2                MOVX    A,@R0
005B 4F                ORL     A,R7
005C FF                MOV     R7,A
005D 18                DEC     R0
005E EE                MOV     A,R6
005F F2                MOVX    @R0,A
0060 FE                MOV     R6,A
0061 08                INC     R0
0062 EF                MOV     A,R7
0063 F2                MOVX    @R0,A
0064 22                RET     
0065         L?0130:
0065 EF                MOV     A,R7
0066 F8                MOV     R0,A
0067 E4                CLR     A
0068 F3                MOVX    @R1,A
0069 E8                MOV     A,R0
006A 19                DEC     R1
006B F3                MOVX    @R1,A
006C 22                RET     
006D         L?0131:
006D EF                MOV     A,R7
006E F8                MOV     R0,A
006F E4                CLR     A
0070 F3                MOVX    @R1,A
0071 E8                MOV     A,R0
0072 19                DEC     R1
0073 F3                MOVX    @R1,A
0074 22                RET     
0075         L?0133:
0075 FB                MOV     R3,A
0076         L?0134:
0076 120000      E     LCALL   ?C?LLDPDATA
0079 EB                MOV     A,R3
007A 4F                ORL     A,R7
007B FB                MOV     R3,A
007C 7D63              MOV     R5,#063H
007E 7F8A              MOV     R7,#08AH
0080 22                RET     
0081         L?0137:
0081 E2                MOVX    A,@R0
0082 F8                MOV     R0,A
0083 E4                CLR     A
0084 F3                MOVX    @R1,A
0085 E8                MOV     A,R0
0086 19                DEC     R1
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 102 

0087 F3                MOVX    @R1,A
0088 22                RET     
0089         L?0138:
0089 120000      E     LCALL   ?C?LLDPDATA
008C         L?0139:
008C E4                CLR     A
008D 7B02              MOV     R3,#02H
008F FA                MOV     R2,A
0090 F9                MOV     R1,A
0091 F8                MOV     R0,A
0092 22                RET     
0093         L?0140:
0093 E4                CLR     A
0094 FF                MOV     R7,A
0095 FE                MOV     R6,A
0096 7D01              MOV     R5,#01H
0098 FC                MOV     R4,A
0099 7800        R     MOV     R0,#LOW scale
009B 120000      E     LCALL   ?C?LLDPDATA0
009E C3                CLR     C
009F 020000      E     LJMP    ?C?ULCMP
00A2         L?0144:
00A2 E3                MOVX    A,@R1
00A3 C4                SWAP    A
00A4 F8                MOV     R0,A
00A5 54F0              ANL     A,#0F0H
00A7 C8                XCH     A,R0
00A8 09                INC     R1
00A9 E3                MOVX    A,@R1
00AA C4                SWAP    A
00AB 540F              ANL     A,#0FH
00AD 48                ORL     A,R0
00AE 22                RET     
00AF         L?0145:
00AF 120000      E     LCALL   ?C?ULDIV
00B2 E4                CLR     A
00B3 FB                MOV     R3,A
00B4 7A01              MOV     R2,#01H
00B6 F9                MOV     R1,A
00B7 F8                MOV     R0,A
00B8 020000      E     LJMP    ?C?ULDIV
00BB         L?0149:
00BB 7800        R     MOV     R0,#LOW regv
00BD 08                INC     R0
00BE E2                MOVX    A,@R0
00BF FB                MOV     R3,A
00C0 7F8A              MOV     R7,#08AH
00C2 22                RET     
00C3         L?0150:
00C3 EE                MOV     A,R6
00C4 F2                MOVX    @R0,A
00C5 08                INC     R0
00C6 EF                MOV     A,R7
00C7 F2                MOVX    @R0,A
00C8 08                INC     R0
00C9 EC                MOV     A,R4
00CA F2                MOVX    @R0,A
00CB 08                INC     R0
00CC ED                MOV     A,R5
00CD F2                MOVX    @R0,A
00CE 22                RET     
00CF         L?0151:
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 103 

00CF EE                MOV     A,R6
00D0 F2                MOVX    @R0,A
00D1 08                INC     R0
00D2 EF                MOV     A,R7
00D3 F2                MOVX    @R0,A
00D4 18                DEC     R0
00D5 E2                MOVX    A,@R0
00D6 C4                SWAP    A
00D7 54F0              ANL     A,#0F0H
00D9 22                RET     
00DA         L?0152:
00DA 7800        R     MOV     R0,#LOW scale
00DC 120000      E     LCALL   ?C?LSTPDATA
00DF 7800        R     MOV     R0,#LOW scale
00E1 020000      E     LJMP    ?C?LLDPDATA
00E4         L?0154:
00E4         L?0155:
00E4 7B03              MOV     R3,#03H
00E6 7D06              MOV     R5,#06H
00E8 7F8A              MOV     R7,#08AH
00EA 22                RET     
00EB         L?0156:
00EB F8                MOV     R0,A
00EC E4                CLR     A
00ED F3                MOVX    @R1,A
00EE E8                MOV     A,R0
00EF 19                DEC     R1
00F0 F3                MOVX    @R1,A
00F1 22                RET     
00F2         L?0157:
00F2 AD07              MOV     R5,AR7
00F4 ED                MOV     A,R5
00F5 54F0              ANL     A,#0F0H
00F7 FD                MOV     R5,A
00F8 E2                MOVX    A,@R0
00F9 4D                ORL     A,R5
00FA FB                MOV     R3,A
00FB 22                RET     
00FC         L?0158:
00FC FF                MOV     R7,A
00FD AEF0              MOV     R6,B
00FF 900002            MOV     DPTR,#02H
0102 020000      E     LJMP    ?C?ILDOPTR
             ; FUNCTION Com0074 (END)

             ; FUNCTION SetAutoDetectStd (BEGIN)
                                           ; SOURCE LINE # 29
                                           ; SOURCE LINE # 30
                                           ; SOURCE LINE # 36
0000 120000      E     LCALL   GetPossibleAutoDetectStdEE
0003 EF                MOV     A,R7
0004 4480              ORL     A,#080H
;---- Variable 'val' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 37
0006 FB                MOV     R3,A
0007 7D1D              MOV     R5,#01DH
0009 7F8A              MOV     R7,#08AH
000B 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 38
000E 7D1C              MOV     R5,#01CH
0010 7F8A              MOV     R7,#08AH
0012 120000      E     LCALL   _ReadI2C
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 104 

                                           ; SOURCE LINE # 39
0015 EF                MOV     A,R7
0016 4407              ORL     A,#07H
0018 FB                MOV     R3,A
0019 7D1C              MOV     R5,#01CH
001B 7F8A              MOV     R7,#08AH
001D 020000      E     LJMP    _WriteI2C
             ; FUNCTION SetAutoDetectStd (END)

             ; FUNCTION _ClearAutoDetectStd (BEGIN)
                                           ; SOURCE LINE # 42
0000 7800        R     MOV     R0,#LOW std
0002 EF                MOV     A,R7
0003 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 43
                                           ; SOURCE LINE # 50
0004 7D1C              MOV     R5,#01CH
0006 7F8A              MOV     R7,#08AH
0008 120000      E     LCALL   _ReadI2C
;---- Variable 'val' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 51
000B EF                MOV     A,R7
000C 54F8              ANL     A,#0F8H
000E FF                MOV     R7,A
000F 7800        R     MOV     R0,#LOW std
0011 E2                MOVX    A,@R0
0012 4F                ORL     A,R7
                                           ; SOURCE LINE # 52
0013 FB                MOV     R3,A
0014 7D1C              MOV     R5,#01CH
0016 7F8A              MOV     R7,#08AH
0018 020000      E     LJMP    _WriteI2C
             ; FUNCTION _ClearAutoDetectStd (END)

             ; FUNCTION AutoPHPCalEnable (BEGIN)
                                           ; SOURCE LINE # 57
                                           ; SOURCE LINE # 58
                                           ; SOURCE LINE # 62
0000 7DB6              MOV     R5,#0B6H
0002 7F8A              MOV     R7,#08AH
0004 120000      E     LCALL   _ReadI2C
0007 EF                MOV     A,R7
0008 547F              ANL     A,#07FH
000A FB                MOV     R3,A
000B 7DB6              MOV     R5,#0B6H
000D 7F8A              MOV     R7,#08AH
000F 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 63
0012 7DB2              MOV     R5,#0B2H
0014 7F8A              MOV     R7,#08AH
0016 120000      E     LCALL   _ReadI2C
0019 AB07              MOV     R3,AR7
001B 7DB2              MOV     R5,#0B2H
001D 7F8A              MOV     R7,#08AH
001F 020000      E     LJMP    _WriteI2C
             ; FUNCTION AutoPHPCalEnable (END)

             ; FUNCTION AutoPHPCalDisable (BEGIN)
                                           ; SOURCE LINE # 67
                                           ; SOURCE LINE # 68
                                           ; SOURCE LINE # 72
0000 7DB6              MOV     R5,#0B6H
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 105 

0002 7F8A              MOV     R7,#08AH
0004 120000      E     LCALL   _ReadI2C
0007 EF                MOV     A,R7
0008 4480              ORL     A,#080H
000A FB                MOV     R3,A
000B 7DB6              MOV     R5,#0B6H
000D 7F8A              MOV     R7,#08AH
000F 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 73
0012 7DB2              MOV     R5,#0B2H
0014 7F8A              MOV     R7,#08AH
0016 120000      E     LCALL   _ReadI2C
0019 AB07              MOV     R3,AR7
001B 7DB2              MOV     R5,#0B2H
001D 7F8A              MOV     R7,#08AH
001F 020000      E     LJMP    _WriteI2C
             ; FUNCTION AutoPHPCalDisable (END)

             ; FUNCTION DetectDecoderInput (BEGIN)
                                           ; SOURCE LINE # 85
                                           ; SOURCE LINE # 86
                                           ; SOURCE LINE # 91
0000 7D01              MOV     R5,#01H
0002 120000      R     LCALL   L?0159
                                           ; SOURCE LINE # 92
0005 54C0              ANL     A,#0C0H
0007 6440              XRL     A,#040H
0009 6005              JZ      ?C0005
                                           ; SOURCE LINE # 93
000B E4                CLR     A
000C 18                DEC     R0
000D F2                MOVX    @R0,A
                                           ; SOURCE LINE # 94
000E FF                MOV     R7,A
000F 22                RET     
                                           ; SOURCE LINE # 95
0010         ?C0005:
                                           ; SOURCE LINE # 97
0010 E4                CLR     A
0011 7800        R     MOV     R0,#LOW std
0013 F2                MOVX    @R0,A
0014         ?C0007:
                                           ; SOURCE LINE # 98
0014 7D1C              MOV     R5,#01CH
0016 120000      R     LCALL   L?0159
                                           ; SOURCE LINE # 102
0019 30E707            JNB     ACC.7,?C0010
                                           ; SOURCE LINE # 103
001C 7F0A              MOV     R7,#0AH
001E 120000      E     LCALL   _delay
                                           ; SOURCE LINE # 104
0021 8014              SJMP    ?C0009
0023         ?C0010:
                                           ; SOURCE LINE # 105
                                           ; SOURCE LINE # 106
0023 7800        R     MOV     R0,#LOW val
0025 E2                MOVX    A,@R0
0026 C4                SWAP    A
0027 540F              ANL     A,#0FH
0029 FF                MOV     R7,A
002A F2                MOVX    @R0,A
                                           ; SOURCE LINE # 107
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 106 

002B BF0703            CJNE    R7,#07H,?C0012
002E 7FFE              MOV     R7,#0FEH
0030 22                RET     
0031         ?C0012:
                                           ; SOURCE LINE # 108
0031 7800        R     MOV     R0,#LOW val
0033 E2                MOVX    A,@R0
0034 04                INC     A
0035 FF                MOV     R7,A
0036 22                RET     
                                           ; SOURCE LINE # 109
                                           ; SOURCE LINE # 110
0037         ?C0009:
0037 7800        R     MOV     R0,#LOW std
0039 E2                MOVX    A,@R0
003A 04                INC     A
003B F2                MOVX    @R0,A
003C E2                MOVX    A,@R0
003D C3                CLR     C
003E 940A              SUBB    A,#0AH
0040 40D2              JC      ?C0007
0042         ?C0008:
                                           ; SOURCE LINE # 123
0042 7FFE              MOV     R7,#0FEH
                                           ; SOURCE LINE # 124
0044         ?C0006:
0044 22                RET     
0045         L?0159:
0045 7F8A              MOV     R7,#08AH
0047 120000      E     LCALL   _ReadI2C
004A 7800        R     MOV     R0,#LOW val
004C EF                MOV     A,R7
004D F2                MOVX    @R0,A
004E 22                RET     
             ; FUNCTION DetectDecoderInput (END)

             ; FUNCTION COMPOSITE1Input (BEGIN)
                                           ; SOURCE LINE # 131
                                           ; SOURCE LINE # 132
                                           ; SOURCE LINE # 133
0000 7B40              MOV     R3,#040H
0002 7D02              MOV     R5,#02H
0004 7F8A              MOV     R7,#08AH
0006 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 134
0009 120000      R     LCALL   L?0154
000C 020000      E     LJMP    _WriteI2C
             ; FUNCTION COMPOSITE1Input (END)

             ; FUNCTION COMPOSITE2Input (BEGIN)
                                           ; SOURCE LINE # 137
                                           ; SOURCE LINE # 138
                                           ; SOURCE LINE # 139
0000 7BC6              MOV     R3,#0C6H
0002 7D02              MOV     R5,#02H
0004 7F8A              MOV     R7,#08AH
0006 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 140
0009 120000      R     LCALL   L?0154
000C 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 141
000F 7D2F              MOV     R5,#02FH
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 107 

0011 7F8A              MOV     R7,#08AH
0013 120000      E     LCALL   _ReadI2C
0016 EF                MOV     A,R7
0017 4406              ORL     A,#06H
0019 FB                MOV     R3,A
001A 7D2F              MOV     R5,#02FH
001C 7F8A              MOV     R7,#08AH
001E 020000      E     LJMP    _WriteI2C
             ; FUNCTION COMPOSITE2Input (END)

             ; FUNCTION COMPOSITE3Input (BEGIN)
                                           ; SOURCE LINE # 144
                                           ; SOURCE LINE # 145
                                           ; SOURCE LINE # 146
0000 7BCA              MOV     R3,#0CAH
0002 7D02              MOV     R5,#02H
0004 7F8A              MOV     R7,#08AH
0006 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 147
0009 120000      R     LCALL   L?0155
000C 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 148
000F 7D2F              MOV     R5,#02FH
0011 7F8A              MOV     R7,#08AH
0013 120000      E     LCALL   _ReadI2C
0016 EF                MOV     A,R7
0017 4406              ORL     A,#06H
0019 FB                MOV     R3,A
001A 7D2F              MOV     R5,#02FH
001C 7F8A              MOV     R7,#08AH
001E 020000      E     LJMP    _WriteI2C
             ; FUNCTION COMPOSITE3Input (END)

             ; FUNCTION AVGAInput (BEGIN)
                                           ; SOURCE LINE # 175
                                           ; SOURCE LINE # 176
                                           ; SOURCE LINE # 177
0000 120000      R     LCALL   MakeStartInt
                                           ; SOURCE LINE # 179
0003 7D06              MOV     R5,#06H
0005 120000      R     LCALL   L?0136
                                           ; SOURCE LINE # 181
0008 7BCD              MOV     R3,#0CDH
000A 7D02              MOV     R5,#02H
000C 7F8A              MOV     R7,#08AH
000E 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 184
0011 7F07              MOV     R7,#07H
0013 120000      E     LCALL   _SetADCMode
                                           ; SOURCE LINE # 192
0016 7D70              MOV     R5,#070H
0018 7F8A              MOV     R7,#08AH
001A 120000      E     LCALL   _ReadI2C
001D EF                MOV     A,R7
001E 54BF              ANL     A,#0BFH
0020 FB                MOV     R3,A
0021 7D70              MOV     R5,#070H
0023 7F8A              MOV     R7,#08AH
0025 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 193
0028 7D77              MOV     R5,#077H
002A 120000      R     LCALL   L?0136
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 108 

                                           ; SOURCE LINE # 194
002D 7D78              MOV     R5,#078H
002F 120000      R     LCALL   L?0153
                                           ; SOURCE LINE # 196
0032 7D86              MOV     R5,#086H
0034 120000      R     LCALL   L?0153
                                           ; SOURCE LINE # 197
0037 7BFF              MOV     R3,#0FFH
0039 7D87              MOV     R5,#087H
003B 7F8A              MOV     R7,#08AH
003D 020000      E     LJMP    _WriteI2C
                                           ; SOURCE LINE # 200
0040         L?0136:
0040 E4                CLR     A
0041 FB                MOV     R3,A
0042 7F8A              MOV     R7,#08AH
0044 120000      E     LCALL   _WriteI2C
0047 22                RET     
0048         L?0153:
0048 E4                CLR     A
0049 FB                MOV     R3,A
004A 7F8A              MOV     R7,#08AH
004C 120000      E     LCALL   _WriteI2C
004F 22                RET     
             ; FUNCTION AVGAInput (END)

             ; FUNCTION GetLCDPowerState (BEGIN)
                                           ; SOURCE LINE # 229
                                           ; SOURCE LINE # 230
                                           ; SOURCE LINE # 233
0000 7DD5              MOV     R5,#0D5H
0002 7F8A              MOV     R7,#08AH
0004 120000      E     LCALL   _ReadI2C
;---- Variable 'val' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 234
0007 EF                MOV     A,R7
0008 5430              ANL     A,#030H
                                           ; SOURCE LINE # 235
000A C4                SWAP    A
000B 540F              ANL     A,#0FH
000D FF                MOV     R7,A
                                           ; SOURCE LINE # 236
                                           ; SOURCE LINE # 237
000E         ?C0018:
000E 22                RET     
             ; FUNCTION GetLCDPowerState (END)

             ; FUNCTION _PanelFreeRun (BEGIN)
                                           ; SOURCE LINE # 261
0000 7800        R     MOV     R0,#LOW on
0002 EF                MOV     A,R7
0003 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 262
                                           ; SOURCE LINE # 265
0004 6005              JZ      ?C0019
0006 120000      R     LCALL   AutoPHPCalDisable
0009 8003              SJMP    ?C0020
000B         ?C0019:
                                           ; SOURCE LINE # 266
000B 120000      R     LCALL   AutoPHPCalEnable
000E         ?C0020:
                                           ; SOURCE LINE # 269
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 109 

000E 7DBE              MOV     R5,#0BEH
0010 7F8A              MOV     R7,#08AH
0012 120000      E     LCALL   _ReadI2C
0015 7800        R     MOV     R0,#LOW val
0017 EF                MOV     A,R7
0018 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 270
0019 18                DEC     R0
001A E2                MOVX    A,@R0
001B 600D              JZ      ?C0021
                                           ; SOURCE LINE # 271
001D 08                INC     R0
001E E2                MOVX    A,@R0
001F 4404              ORL     A,#04H
                                           ; SOURCE LINE # 272
0021 120000      R     LCALL   L?0160
0024 5470              ANL     A,#070H
0026 4485              ORL     A,#085H
                                           ; SOURCE LINE # 274
0028 800A              SJMP    ?C0109
002A         ?C0021:
                                           ; SOURCE LINE # 275
                                           ; SOURCE LINE # 276
002A 7800        R     MOV     R0,#LOW val
002C E2                MOVX    A,@R0
002D 54FB              ANL     A,#0FBH
                                           ; SOURCE LINE # 277
002F 120000      R     LCALL   L?0160
0032 547F              ANL     A,#07FH
0034         ?C0109:
0034 FB                MOV     R3,A
0035 7DB6              MOV     R5,#0B6H
0037 7F8A              MOV     R7,#08AH
0039 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 278
003C         ?C0022:
                                           ; SOURCE LINE # 279
003C 7800        R     MOV     R0,#LOW val
003E E2                MOVX    A,@R0
003F FB                MOV     R3,A
0040 7DBE              MOV     R5,#0BEH
0042 7F8A              MOV     R7,#08AH
0044 020000      E     LJMP    _WriteI2C
                                           ; SOURCE LINE # 282
0047         L?0160:
0047 F2                MOVX    @R0,A
0048 7DB6              MOV     R5,#0B6H
004A 7F8A              MOV     R7,#08AH
004C 120000      E     LCALL   _ReadI2C
004F EF                MOV     A,R7
0050 22                RET     
             ; FUNCTION _PanelFreeRun (END)

             ; FUNCTION _PanelBlack (BEGIN)
                                           ; SOURCE LINE # 285
0000 7800        R     MOV     R0,#LOW on
0002 EF                MOV     A,R7
0003 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 286
                                           ; SOURCE LINE # 289
0004 7DFF              MOV     R5,#0FFH
0006 7F8A              MOV     R7,#08AH
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 110 

0008 120000      E     LCALL   _ReadI2C
000B 7800        R     MOV     R0,#LOW tmp
000D EF                MOV     A,R7
000E F2                MOVX    @R0,A
                                           ; SOURCE LINE # 290
000F 7B01              MOV     R3,#01H
0011 7DFF              MOV     R5,#0FFH
0013 7F8A              MOV     R7,#08AH
0015 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 292
0018 7DF3              MOV     R5,#0F3H
001A 7F8A              MOV     R7,#08AH
001C 120000      E     LCALL   _ReadI2C
001F 7800        R     MOV     R0,#LOW val
0021 EF                MOV     A,R7
0022 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 293
0023 18                DEC     R0
0024 E2                MOVX    A,@R0
0025 6007              JZ      ?C0024
                                           ; SOURCE LINE # 294
0027 08                INC     R0
0028 E2                MOVX    A,@R0
0029 4420              ORL     A,#020H
002B F2                MOVX    @R0,A
                                           ; SOURCE LINE # 295
002C 8006              SJMP    ?C0025
002E         ?C0024:
                                           ; SOURCE LINE # 296
                                           ; SOURCE LINE # 297
002E 7800        R     MOV     R0,#LOW val
0030 E2                MOVX    A,@R0
0031 54DF              ANL     A,#0DFH
0033 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 298
0034         ?C0025:
                                           ; SOURCE LINE # 300
0034 120000      E     LCALL   WaitEndofDisplayArea
                                           ; SOURCE LINE # 301
0037 7800        R     MOV     R0,#LOW val
0039 E2                MOVX    A,@R0
003A FB                MOV     R3,A
003B 7DF3              MOV     R5,#0F3H
003D 7F8A              MOV     R7,#08AH
003F 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 303
0042 7800        R     MOV     R0,#LOW tmp
0044 E2                MOVX    A,@R0
0045 FB                MOV     R3,A
0046 7DFF              MOV     R5,#0FFH
0048 7F8A              MOV     R7,#08AH
004A 020000      E     LJMP    _WriteI2C
             ; FUNCTION _PanelBlack (END)

             ; FUNCTION _PanelMute (BEGIN)
                                           ; SOURCE LINE # 306
0000 7800        R     MOV     R0,#LOW on
0002 EF                MOV     A,R7
0003 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 307
                                           ; SOURCE LINE # 308
0004 600C              JZ      ?C0027
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 111 

                                           ; SOURCE LINE # 309
0006 E2                MOVX    A,@R0
0007 FF                MOV     R7,A
0008 120000      R     LCALL   _PanelBlack
                                           ; SOURCE LINE # 310
000B 7800        R     MOV     R0,#LOW on
000D E2                MOVX    A,@R0
000E FF                MOV     R7,A
000F 020000      R     LJMP    _PanelFreeRun
                                           ; SOURCE LINE # 311
0012         ?C0027:
                                           ; SOURCE LINE # 313
                                           ; SOURCE LINE # 314
0012 7800        R     MOV     R0,#LOW on
0014 E2                MOVX    A,@R0
0015 FF                MOV     R7,A
0016 120000      R     LCALL   _PanelFreeRun
                                           ; SOURCE LINE # 315
0019 7800        R     MOV     R0,#LOW on
001B E2                MOVX    A,@R0
001C FF                MOV     R7,A
001D 120000      R     LCALL   _PanelBlack
                                           ; SOURCE LINE # 316
                                           ; SOURCE LINE # 317
0020         ?C0029:
0020 22                RET     
             ; FUNCTION _PanelMute (END)

             ; FUNCTION ON_LVDS (BEGIN)
                                           ; SOURCE LINE # 319
                                           ; SOURCE LINE # 320
                                           ; SOURCE LINE # 330
0000 22                RET     
             ; FUNCTION ON_LVDS (END)

             ; FUNCTION OFF_LVDS (BEGIN)
                                           ; SOURCE LINE # 332
                                           ; SOURCE LINE # 333
                                           ; SOURCE LINE # 344
0000 22                RET     
             ; FUNCTION OFF_LVDS (END)

             ; FUNCTION _LCDPowerON (BEGIN)
                                           ; SOURCE LINE # 346
0000 7800        R     MOV     R0,#LOW mute
0002 EF                MOV     A,R7
0003 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 347
                                           ; SOURCE LINE # 349
0004 7800        E     MOV     R0,#LOW PowerFlag
0006 E2                MOVX    A,@R0
0007 7006              JNZ     ?C0032
0009 120000      E     LCALL   CheckTrigger
000C EF                MOV     A,R7
000D 6054              JZ      ?C0033
000F         ?C0032:
                                           ; SOURCE LINE # 351
000F 7F01              MOV     R7,#01H
0011 120000      E     LCALL   _PowerLED
                                           ; SOURCE LINE # 354
0014 120000      R     LCALL   GetLCDPowerState
0017 EF                MOV     A,R7
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 112 

0018 7049              JNZ     ?C0033
                                           ; SOURCE LINE # 355
                                           ; SOURCE LINE # 357
001A 120000      R     LCALL   OFF_LVDS
                                           ; SOURCE LINE # 359
001D 7F01              MOV     R7,#01H
001F 120000      E     LCALL   _delay
                                           ; SOURCE LINE # 361
0022 7B09              MOV     R3,#09H
                                           ; SOURCE LINE # 362
0024 120000      R     LCALL   L?0146
                                           ; SOURCE LINE # 364
0027 7B0B              MOV     R3,#0BH
                                           ; SOURCE LINE # 371
0029 120000      R     LCALL   L?0146
                                           ; SOURCE LINE # 372
002C 120000      R     LCALL   ON_LVDS
                                           ; SOURCE LINE # 376
002F 7B0F              MOV     R3,#0FH
0031 7DD5              MOV     R5,#0D5H
0033 7F8A              MOV     R7,#08AH
0035 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 404
0038 7F05              MOV     R7,#05H
003A 120000      E     LCALL   _delay
                                           ; SOURCE LINE # 409
003D 43E808            ORL     P4,#08H
                                           ; SOURCE LINE # 410
0040 7FFA              MOV     R7,#0FAH
0042 7E00              MOV     R6,#00H
0044 120000      E     LCALL   _Wait_ms
                                           ; SOURCE LINE # 411
0047 43E804            ORL     P4,#04H
                                           ; SOURCE LINE # 412
004A 7BFF              MOV     R3,#0FFH
004C 7A00        R     MOV     R2,#HIGH ?SC_0
004E 7900        R     MOV     R1,#LOW ?SC_0
0050 120000      E     LCALL   _Puts
                                           ; SOURCE LINE # 413
0053 7F64              MOV     R7,#064H
0055 7E00              MOV     R6,#00H
0057 120000      E     LCALL   _Wait_ms
                                           ; SOURCE LINE # 414
005A 7BFF              MOV     R3,#0FFH
005C 7A00        R     MOV     R2,#HIGH ?SC_19
005E 7900        R     MOV     R1,#LOW ?SC_19
0060 120000      E     LCALL   _Puts
                                           ; SOURCE LINE # 415
                                           ; SOURCE LINE # 418
0063         ?C0033:
0063 22                RET     
0064         L?0146:
0064 7DD5              MOV     R5,#0D5H
0066 7F8A              MOV     R7,#08AH
0068 120000      E     LCALL   _WriteI2C
006B 7F0A              MOV     R7,#0AH
006D 120000      E     LCALL   _delay
0070 22                RET     
             ; FUNCTION _LCDPowerON (END)

             ; FUNCTION LCDPowerOFF (BEGIN)
                                           ; SOURCE LINE # 434
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 113 

                                           ; SOURCE LINE # 435
                                           ; SOURCE LINE # 442
0000 7B0B              MOV     R3,#0BH
                                           ; SOURCE LINE # 443
0002 120000      R     LCALL   L?0147
                                           ; SOURCE LINE # 444
0005 7B09              MOV     R3,#09H
                                           ; SOURCE LINE # 445
0007 120000      R     LCALL   L?0147
                                           ; SOURCE LINE # 446
000A 7B08              MOV     R3,#08H
000C 7DD5              MOV     R5,#0D5H
000E 7F8A              MOV     R7,#08AH
0010 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 448
0013 120000      R     LCALL   OFF_LVDS
                                           ; SOURCE LINE # 461
0016 53E8FB            ANL     P4,#0FBH
                                           ; SOURCE LINE # 462
0019 7F64              MOV     R7,#064H
001B 7E00              MOV     R6,#00H
001D 120000      E     LCALL   _Wait_ms
                                           ; SOURCE LINE # 463
0020 53E8F7            ANL     P4,#0F7H
                                           ; SOURCE LINE # 467
0023 22                RET     
0024         L?0147:
0024 7DD5              MOV     R5,#0D5H
0026 7F8A              MOV     R7,#08AH
0028 120000      E     LCALL   _WriteI2C
002B 7F01              MOV     R7,#01H
002D 120000      E     LCALL   _delay
0030 22                RET     
             ; FUNCTION LCDPowerOFF (END)

             ; FUNCTION _MeasureAndWait (BEGIN)
                                           ; SOURCE LINE # 544
0000 7800        R     MOV     R0,#LOW field
0002 EF                MOV     A,R7
0003 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 545
                                           ; SOURCE LINE # 550
0004 7D5B              MOV     R5,#05BH
0006 7F8A              MOV     R7,#08AH
0008 120000      E     LCALL   _ReadI2C
000B EF                MOV     A,R7
000C 54F0              ANL     A,#0F0H
000E FF                MOV     R7,A
000F 7800        R     MOV     R0,#LOW val
0011 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 551
0012 18                DEC     R0
0013 E2                MOVX    A,@R0
0014 5403              ANL     A,#03H
0016 FE                MOV     R6,A
0017 25E0              ADD     A,ACC
0019 25E0              ADD     A,ACC
001B 4F                ORL     A,R7
001C 08                INC     R0
                                           ; SOURCE LINE # 552
001D 120000      R     LCALL   L?0143
                                           ; SOURCE LINE # 553
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 114 

0020 7800        R     MOV     R0,#LOW val
0022 E2                MOVX    A,@R0
0023 4401              ORL     A,#01H
                                           ; SOURCE LINE # 554
0025 120000      R     LCALL   L?0143
                                           ; SOURCE LINE # 557
0028 E4                CLR     A
0029 7800        R     MOV     R0,#LOW i
002B F2                MOVX    @R0,A
002C         ?C0036:
                                           ; SOURCE LINE # 558
002C 7F01              MOV     R7,#01H
002E 120000      E     LCALL   _delay
                                           ; SOURCE LINE # 559
0031 7D5B              MOV     R5,#05BH
0033 7F8A              MOV     R7,#08AH
0035 120000      E     LCALL   _ReadI2C
0038 7800        R     MOV     R0,#LOW val
003A EF                MOV     A,R7
003B F2                MOVX    @R0,A
                                           ; SOURCE LINE # 560
003C 5401              ANL     A,#01H
003E F2                MOVX    @R0,A
                                           ; SOURCE LINE # 561
003F 7003              JNZ     ?C0038
0041 7F01              MOV     R7,#01H
0043 22                RET     
                                           ; SOURCE LINE # 562
0044         ?C0038:
0044 7800        R     MOV     R0,#LOW i
0046 E2                MOVX    A,@R0
0047 04                INC     A
0048 F2                MOVX    @R0,A
0049 E2                MOVX    A,@R0
004A C3                CLR     C
004B 9432              SUBB    A,#032H
004D 40DD              JC      ?C0036
004F         ?C0037:
                                           ; SOURCE LINE # 565
004F 7B08              MOV     R3,#08H
0051 7D5B              MOV     R5,#05BH
0053 7F8A              MOV     R7,#08AH
0055 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 567
0058 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 568
005A         ?C0040:
005A 22                RET     
005B         L?0143:
005B F2                MOVX    @R0,A
005C FB                MOV     R3,A
005D 7D5B              MOV     R5,#05BH
005F 7F8A              MOV     R7,#08AH
0061 120000      E     LCALL   _WriteI2C
0064 22                RET     
             ; FUNCTION _MeasureAndWait (END)

             ; FUNCTION SetEnDet (BEGIN)
                                           ; SOURCE LINE # 575
                                           ; SOURCE LINE # 576
                                           ; SOURCE LINE # 579
0000 7D5C              MOV     R5,#05CH
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 115 

0002 7F8A              MOV     R7,#08AH
0004 120000      E     LCALL   _ReadI2C
;---- Variable 'val' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 580
0007 EF                MOV     A,R7
0008 4401              ORL     A,#01H
                                           ; SOURCE LINE # 581
000A FB                MOV     R3,A
000B 7D5C              MOV     R5,#05CH
000D 7F8A              MOV     R7,#08AH
000F 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 583
0012 7D5C              MOV     R5,#05CH
0014 7F8A              MOV     R7,#08AH
0016 020000      E     LJMP    _ReadI2C
             ; FUNCTION SetEnDet (END)

             ; FUNCTION ClearEnDet (BEGIN)
                                           ; SOURCE LINE # 586
                                           ; SOURCE LINE # 587
                                           ; SOURCE LINE # 590
0000 7D5C              MOV     R5,#05CH
0002 7F8A              MOV     R7,#08AH
0004 120000      E     LCALL   _ReadI2C
;---- Variable 'val' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 591
0007 EF                MOV     A,R7
0008 54FE              ANL     A,#0FEH
                                           ; SOURCE LINE # 592
000A FB                MOV     R3,A
000B 7D5C              MOV     R5,#05CH
000D 7F8A              MOV     R7,#08AH
000F 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 594
0012 7D5C              MOV     R5,#05CH
0014 7F8A              MOV     R7,#08AH
0016 020000      E     LJMP    _ReadI2C
             ; FUNCTION ClearEnDet (END)

             ; FUNCTION IsBypassmode (BEGIN)
                                           ; SOURCE LINE # 603
                                           ; SOURCE LINE # 604
                                           ; SOURCE LINE # 607
0000 7D63              MOV     R5,#063H
0002 7F8A              MOV     R7,#08AH
0004 120000      E     LCALL   _ReadI2C
0007 EF                MOV     A,R7
0008 5410              ANL     A,#010H
000A FF                MOV     R7,A
;---- Variable 'dat' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 608
                                           ; SOURCE LINE # 609
000B         ?C0043:
000B 22                RET     
             ; FUNCTION IsBypassmode (END)

             ; FUNCTION GetHstart (BEGIN)
                                           ; SOURCE LINE # 617
                                           ; SOURCE LINE # 618
                                           ; SOURCE LINE # 621
0000 7B88              MOV     R3,#088H
0002 7D5B              MOV     R5,#05BH
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 116 

0004 7F8A              MOV     R7,#08AH
0006 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 622
0009 7D5A              MOV     R5,#05AH
000B 7F8A              MOV     R7,#08AH
000D 120000      E     LCALL   _ReadI2C
0010 7900        R     MOV     R1,#LOW hstartMax+01H
0012 120000      R     LCALL   L?0121
                                           ; SOURCE LINE # 623
0015 7D59              MOV     R5,#059H
0017 7F8A              MOV     R7,#08AH
0019 120000      E     LCALL   _ReadI2C
001C 7800        R     MOV     R0,#LOW hstartMax+01H
001E 120000      R     LCALL   L?0126
                                           ; SOURCE LINE # 628
0021 E2                MOVX    A,@R0
0022 FE                MOV     R6,A
0023 08                INC     R0
0024 E2                MOVX    A,@R0
0025 FF                MOV     R7,A
                                           ; SOURCE LINE # 629
0026         ?C0044:
0026 22                RET     
             ; FUNCTION GetHstart (END)

             ; FUNCTION GetVstart (BEGIN)
                                           ; SOURCE LINE # 651
                                           ; SOURCE LINE # 652
                                           ; SOURCE LINE # 655
0000 7BA8              MOV     R3,#0A8H
0002 7D5B              MOV     R5,#05BH
0004 7F8A              MOV     R7,#08AH
0006 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 656
0009 7D58              MOV     R5,#058H
000B 7F8A              MOV     R7,#08AH
000D 120000      E     LCALL   _ReadI2C
0010 7900        R     MOV     R1,#LOW vstartMin+01H
0012 120000      R     LCALL   L?0121
                                           ; SOURCE LINE # 657
0015 7D57              MOV     R5,#057H
0017 7F8A              MOV     R7,#08AH
0019 120000      E     LCALL   _ReadI2C
001C 7800        R     MOV     R0,#LOW vstartMin+01H
001E 120000      R     LCALL   L?0126
                                           ; SOURCE LINE # 658
0021 7D5A              MOV     R5,#05AH
0023 7F8A              MOV     R7,#08AH
0025 120000      E     LCALL   _ReadI2C
0028 7900        R     MOV     R1,#LOW vstartMax+01H
002A 120000      R     LCALL   L?0130
                                           ; SOURCE LINE # 659
002D 7D59              MOV     R5,#059H
002F 7F8A              MOV     R7,#08AH
0031 120000      E     LCALL   _ReadI2C
0034 7800        R     MOV     R0,#LOW vstartMax+01H
0036 120000      R     LCALL   L?0127
                                           ; SOURCE LINE # 661
0039 7800        R     MOV     R0,#LOW vstartMin
003B E2                MOVX    A,@R0
003C FE                MOV     R6,A
003D 08                INC     R0
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 117 

003E E2                MOVX    A,@R0
003F FF                MOV     R7,A
0040 C3                CLR     C
0041 7800        R     MOV     R0,#LOW vstartMax+01H
0043 E2                MOVX    A,@R0
0044 9F                SUBB    A,R7
0045 18                DEC     R0
0046 E2                MOVX    A,@R0
0047 9E                SUBB    A,R6
0048 5005              JNC     ?C0045
                                           ; SOURCE LINE # 662
004A EE                MOV     A,R6
004B F2                MOVX    @R0,A
004C 08                INC     R0
004D EF                MOV     A,R7
004E F2                MOVX    @R0,A
004F         ?C0045:
                                           ; SOURCE LINE # 666
004F 7800        R     MOV     R0,#LOW vstartMax
0051 E2                MOVX    A,@R0
0052 FE                MOV     R6,A
0053 08                INC     R0
0054 E2                MOVX    A,@R0
0055 FF                MOV     R7,A
                                           ; SOURCE LINE # 667
0056         ?C0046:
0056 22                RET     
             ; FUNCTION GetVstart (END)

             ; FUNCTION GetVend (BEGIN)
                                           ; SOURCE LINE # 671
                                           ; SOURCE LINE # 672
                                           ; SOURCE LINE # 675
0000 7BB8              MOV     R3,#0B8H
0002 7D5B              MOV     R5,#05BH
0004 7F8A              MOV     R7,#08AH
0006 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 676
0009 7D58              MOV     R5,#058H
000B 7F8A              MOV     R7,#08AH
000D 120000      E     LCALL   _ReadI2C
0010 7900        R     MOV     R1,#LOW vendMin+01H
0012 120000      R     LCALL   L?0130
                                           ; SOURCE LINE # 677
0015 7D57              MOV     R5,#057H
0017 7F8A              MOV     R7,#08AH
0019 120000      E     LCALL   _ReadI2C
001C 7800        R     MOV     R0,#LOW vendMin+01H
001E 120000      R     LCALL   L?0127
                                           ; SOURCE LINE # 678
0021 7D5A              MOV     R5,#05AH
0023 7F8A              MOV     R7,#08AH
0025 120000      E     LCALL   _ReadI2C
0028 7900        R     MOV     R1,#LOW vend+01H
002A 120000      R     LCALL   L?0131
                                           ; SOURCE LINE # 679
002D 7D59              MOV     R5,#059H
002F 7F8A              MOV     R7,#08AH
0031 120000      E     LCALL   _ReadI2C
0034 7800        R     MOV     R0,#LOW vend+01H
0036 120000      R     LCALL   L?0127
                                           ; SOURCE LINE # 681
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 118 

0039 7800        R     MOV     R0,#LOW vendMin
003B E2                MOVX    A,@R0
003C FE                MOV     R6,A
003D 08                INC     R0
003E E2                MOVX    A,@R0
003F FF                MOV     R7,A
0040 C3                CLR     C
0041 7800        R     MOV     R0,#LOW vend+01H
0043 E2                MOVX    A,@R0
0044 9F                SUBB    A,R7
0045 18                DEC     R0
0046 E2                MOVX    A,@R0
0047 9E                SUBB    A,R6
0048 5005              JNC     ?C0047
                                           ; SOURCE LINE # 682
004A EE                MOV     A,R6
004B F2                MOVX    @R0,A
004C 08                INC     R0
004D EF                MOV     A,R7
004E F2                MOVX    @R0,A
004F         ?C0047:
                                           ; SOURCE LINE # 686
004F 7800        R     MOV     R0,#LOW vend
0051 E2                MOVX    A,@R0
0052 FE                MOV     R6,A
0053 08                INC     R0
0054 E2                MOVX    A,@R0
0055 FF                MOV     R7,A
                                           ; SOURCE LINE # 687
0056         ?C0048:
0056 22                RET     
             ; FUNCTION GetVend (END)

             ; FUNCTION MaskOffSYNCInt (BEGIN)
                                           ; SOURCE LINE # 700
                                           ; SOURCE LINE # 701
                                           ; SOURCE LINE # 704
;---- Variable 'val' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 705
0000 7BFC              MOV     R3,#0FCH
0002 7DD2              MOV     R5,#0D2H
0004 7F8A              MOV     R7,#08AH
0006 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 711
0009 7BCC              MOV     R3,#0CCH
000B 7DD2              MOV     R5,#0D2H
000D 7F8A              MOV     R7,#08AH
000F 020000      E     LJMP    _WriteI2C
             ; FUNCTION MaskOffSYNCInt (END)

             ; FUNCTION MakeStartInt (BEGIN)
                                           ; SOURCE LINE # 719
                                           ; SOURCE LINE # 720
                                           ; SOURCE LINE # 721
0000 120000      R     LCALL   MaskOffSYNCInt
                                           ; SOURCE LINE # 723
0003 7B02              MOV     R3,#02H
0005 7DD3              MOV     R5,#0D3H
0007 7F8A              MOV     R7,#08AH
0009 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 724
000C 7D4E              MOV     R5,#04EH
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 119 

000E 7F8A              MOV     R7,#08AH
0010 120000      E     LCALL   _ReadI2C
0013 EF                MOV     A,R7
0014 4408              ORL     A,#08H
0016 FB                MOV     R3,A
0017 7D4E              MOV     R5,#04EH
0019 7F8A              MOV     R7,#08AH
001B 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 725
001E 7B09              MOV     R3,#09H
0020 7D5B              MOV     R5,#05BH
0022 7F8A              MOV     R7,#08AH
0024 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 727
0027 7B07              MOV     R3,#07H
0029 7D5C              MOV     R5,#05CH
002B 7F8A              MOV     R7,#08AH
002D 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 729
0030 020000      R     LJMP    SetEnDet
             ; FUNCTION MakeStartInt (END)

             ; FUNCTION Clear_bypass (BEGIN)
                                           ; SOURCE LINE # 732
                                           ; SOURCE LINE # 733
                                           ; SOURCE LINE # 736
0000 7D63              MOV     R5,#063H
0002 7F8A              MOV     R7,#08AH
0004 120000      E     LCALL   _ReadI2C
;---- Variable 'dat' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 737
0007 EF                MOV     A,R7
0008 54EF              ANL     A,#0EFH
000A FB                MOV     R3,A
000B 7D63              MOV     R5,#063H
000D 7F8A              MOV     R7,#08AH
000F 020000      E     LJMP    _WriteI2C
             ; FUNCTION Clear_bypass (END)

             ; FUNCTION GetHactiveStart (BEGIN)
                                           ; SOURCE LINE # 741
                                           ; SOURCE LINE # 742
                                           ; SOURCE LINE # 746
0000 7D49              MOV     R5,#049H
0002 7F8A              MOV     R7,#08AH
0004 120000      E     LCALL   _ReadI2C
;---- Variable 'val' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 747
0007 EF                MOV     A,R7
0008 5407              ANL     A,#07H
000A 7900        R     MOV     R1,#LOW buf+01H
000C 120000      R     LCALL   L?0156
                                           ; SOURCE LINE # 748
000F 7D47              MOV     R5,#047H
0011 7F8A              MOV     R7,#08AH
0013 120000      E     LCALL   _ReadI2C
0016 7800        R     MOV     R0,#LOW buf+01H
0018 120000      R     LCALL   L?0127
                                           ; SOURCE LINE # 750
001B E2                MOVX    A,@R0
001C FE                MOV     R6,A
001D 08                INC     R0
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 120 

001E E2                MOVX    A,@R0
001F FF                MOV     R7,A
                                           ; SOURCE LINE # 751
0020         ?C0052:
0020 22                RET     
             ; FUNCTION GetHactiveStart (END)

             ; FUNCTION GetHactiveEnd (BEGIN)
                                           ; SOURCE LINE # 754
                                           ; SOURCE LINE # 755
                                           ; SOURCE LINE # 759
0000 7D49              MOV     R5,#049H
0002 7F8A              MOV     R7,#08AH
0004 120000      E     LCALL   _ReadI2C
;---- Variable 'val' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 760
0007 EF                MOV     A,R7
0008 54F0              ANL     A,#0F0H
000A 75F010            MOV     B,#010H
000D A4                MUL     AB
000E 7900        R     MOV     R1,#LOW buf+01H
0010 F3                MOVX    @R1,A
0011 E5F0              MOV     A,B
0013 19                DEC     R1
0014 F3                MOVX    @R1,A
                                           ; SOURCE LINE # 761
0015 7D48              MOV     R5,#048H
0017 7F8A              MOV     R7,#08AH
0019 120000      E     LCALL   _ReadI2C
001C 7800        R     MOV     R0,#LOW buf+01H
001E 120000      R     LCALL   L?0127
                                           ; SOURCE LINE # 763
0021 E2                MOVX    A,@R0
0022 FE                MOV     R6,A
0023 08                INC     R0
0024 E2                MOVX    A,@R0
0025 FF                MOV     R7,A
                                           ; SOURCE LINE # 764
0026         ?C0053:
0026 22                RET     
             ; FUNCTION GetHactiveEnd (END)

             ; FUNCTION GetVactiveStart (BEGIN)
                                           ; SOURCE LINE # 768
                                           ; SOURCE LINE # 769
                                           ; SOURCE LINE # 773
0000 7D4D              MOV     R5,#04DH
0002 7F8A              MOV     R7,#08AH
0004 120000      E     LCALL   _ReadI2C
;---- Variable 'val' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 774
0007 EF                MOV     A,R7
0008 5403              ANL     A,#03H
000A 7900        R     MOV     R1,#LOW buf+01H
000C 120000      R     LCALL   L?0156
                                           ; SOURCE LINE # 775
000F 7D4A              MOV     R5,#04AH
0011 7F8A              MOV     R7,#08AH
0013 120000      E     LCALL   _ReadI2C
0016 7800        R     MOV     R0,#LOW buf
0018 120000      R     LCALL   L?0128
                                           ; SOURCE LINE # 777
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 121 

                                           ; SOURCE LINE # 778
001B         ?C0054:
001B 22                RET     
             ; FUNCTION GetVactiveStart (END)

             ; FUNCTION _SetHactiveStart (BEGIN)
                                           ; SOURCE LINE # 784
0000 7800        R     MOV     R0,#LOW hstart
0002 EE                MOV     A,R6
0003 F2                MOVX    @R0,A
0004 08                INC     R0
0005 EF                MOV     A,R7
0006 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 785
                                           ; SOURCE LINE # 792
0007 7D49              MOV     R5,#049H
0009 7F8A              MOV     R7,#08AH
000B 120000      E     LCALL   _ReadI2C
;---- Variable 'val' assigned to Register 'R5' ----
000E AD07              MOV     R5,AR7
                                           ; SOURCE LINE # 793
0010 ED                MOV     A,R5
0011 54F8              ANL     A,#0F8H
0013 FD                MOV     R5,A
                                           ; SOURCE LINE # 794
0014 7800        R     MOV     R0,#LOW hstart
0016 E2                MOVX    A,@R0
0017 4D                ORL     A,R5
                                           ; SOURCE LINE # 796
0018 FB                MOV     R3,A
0019 7D49              MOV     R5,#049H
001B 7F8A              MOV     R7,#08AH
001D 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 797
0020 7800        R     MOV     R0,#LOW hstart
0022 08                INC     R0
0023 E2                MOVX    A,@R0
0024 FB                MOV     R3,A
0025 7D47              MOV     R5,#047H
0027 7F8A              MOV     R7,#08AH
0029 020000      E     LJMP    _WriteI2C
             ; FUNCTION _SetHactiveStart (END)

             ; FUNCTION _SetHactiveEnd (BEGIN)
                                           ; SOURCE LINE # 800
0000 7800        R     MOV     R0,#LOW hend
                                           ; SOURCE LINE # 801
                                           ; SOURCE LINE # 808
0002 120000      R     LCALL   L?0151
0005 7800        R     MOV     R0,#LOW buf
0007 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 809
0008 7D49              MOV     R5,#049H
000A 7F8A              MOV     R7,#08AH
000C 120000      E     LCALL   _ReadI2C
;---- Variable 'val' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 810
000F EF                MOV     A,R7
0010 540F              ANL     A,#0FH
0012 FF                MOV     R7,A
                                           ; SOURCE LINE # 811
0013 7800        R     MOV     R0,#LOW buf
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 122 

0015 E2                MOVX    A,@R0
0016 4F                ORL     A,R7
                                           ; SOURCE LINE # 813
0017 FB                MOV     R3,A
0018 7D49              MOV     R5,#049H
001A 7F8A              MOV     R7,#08AH
001C 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 814
001F 7800        R     MOV     R0,#LOW hend
0021 08                INC     R0
0022 E2                MOVX    A,@R0
0023 FB                MOV     R3,A
0024 7D48              MOV     R5,#048H
0026 7F8A              MOV     R7,#08AH
0028 020000      E     LJMP    _WriteI2C
             ; FUNCTION _SetHactiveEnd (END)

             ; FUNCTION _SetVactiveStart (BEGIN)
                                           ; SOURCE LINE # 817
;---- Variable 'vstart' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 818
                                           ; SOURCE LINE # 825
0000 7800        R     MOV     R0,#LOW v_l
0002 EF                MOV     A,R7
0003 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 826
0004 EE                MOV     A,R6
0005 18                DEC     R0
0006 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 828
0007 7D4D              MOV     R5,#04DH
0009 7F8A              MOV     R7,#08AH
000B 120000      E     LCALL   _ReadI2C
;---- Variable 'val' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 829
000E EF                MOV     A,R7
000F 54F0              ANL     A,#0F0H
0011 FF                MOV     R7,A
                                           ; SOURCE LINE # 830
0012 7800        R     MOV     R0,#LOW v_h
0014 E2                MOVX    A,@R0
0015 FE                MOV     R6,A
0016 25E0              ADD     A,ACC
0018 25E0              ADD     A,ACC
001A 4F                ORL     A,R7
001B FF                MOV     R7,A
                                           ; SOURCE LINE # 831
001C EE                MOV     A,R6
001D 4F                ORL     A,R7
                                           ; SOURCE LINE # 832
001E 7D4D              MOV     R5,#04DH
                                           ; SOURCE LINE # 834
0020 120000      R     LCALL   L?0161
0023 7D4A              MOV     R5,#04AH
                                           ; SOURCE LINE # 835
0025 120000      R     LCALL   L?0161
0028 FB                MOV     R3,A
0029 7D4B              MOV     R5,#04BH
002B 7F8A              MOV     R7,#08AH
002D 020000      E     LJMP    _WriteI2C
                                           ; SOURCE LINE # 836
0030         L?0161:
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 123 

0030 FB                MOV     R3,A
0031 7F8A              MOV     R7,#08AH
0033 120000      E     LCALL   _WriteI2C
0036 7800        R     MOV     R0,#LOW v_l
0038 E2                MOVX    A,@R0
0039 22                RET     
             ; FUNCTION _SetVactiveStart (END)

             ; FUNCTION _SetVactiveLen (BEGIN)
                                           ; SOURCE LINE # 838
0000 7800        R     MOV     R0,#LOW van
                                           ; SOURCE LINE # 839
                                           ; SOURCE LINE # 849
0002 120000      R     LCALL   L?0151
0005 7800        R     MOV     R0,#LOW buf
0007 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 850
0008 7D4D              MOV     R5,#04DH
000A 7F8A              MOV     R7,#08AH
000C 120000      E     LCALL   _ReadI2C
;---- Variable 'val' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 851
000F EF                MOV     A,R7
0010 548F              ANL     A,#08FH
0012 FF                MOV     R7,A
                                           ; SOURCE LINE # 852
0013 7800        R     MOV     R0,#LOW buf
0015 E2                MOVX    A,@R0
0016 4F                ORL     A,R7
                                           ; SOURCE LINE # 853
0017 FB                MOV     R3,A
0018 7D4D              MOV     R5,#04DH
001A 7F8A              MOV     R7,#08AH
001C 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 854
001F 7800        R     MOV     R0,#LOW van
0021 08                INC     R0
0022 E2                MOVX    A,@R0
0023 FB                MOV     R3,A
0024 7D4C              MOV     R5,#04CH
0026 7F8A              MOV     R7,#08AH
0028 020000      E     LJMP    _WriteI2C
             ; FUNCTION _SetVactiveLen (END)

             ; FUNCTION GetInitPanelAttribute1 (BEGIN)
                                           ; SOURCE LINE # 866
                                           ; SOURCE LINE # 867
                                           ; SOURCE LINE # 871
0000 7F10              MOV     R7,#010H
;---- Variable 'rdata' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 872
0002 120000      R     LCALL   L?0135
0005 7A00        E     MOV     R2,#HIGH PanelContrastRange
0007 7900        E     MOV     R1,#LOW PanelContrastRange
0009 120000      R     LCALL   L?0148
                                           ; SOURCE LINE # 873
000C 7F80              MOV     R7,#080H
000E 7E00              MOV     R6,#00H
0010 120000      E     LCALL   _ReadEEP
0013 7800        R     MOV     R0,#LOW regv
0015 08                INC     R0
0016 E2                MOVX    A,@R0
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 124 

0017 FD                MOV     R5,A
0018 120000      E     LCALL   _SetRGBContrast
                                           ; SOURCE LINE # 875
001B 7F11              MOV     R7,#011H
                                           ; SOURCE LINE # 876
001D 120000      R     LCALL   L?0135
0020 7A00        E     MOV     R2,#HIGH PanelBrightnessRange
0022 7900        E     MOV     R1,#LOW PanelBrightnessRange
0024 120000      R     LCALL   L?0148
                                           ; SOURCE LINE # 877
0027 7D74              MOV     R5,#074H
0029 120000      R     LCALL   L?0149
002C 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 878
002F 7D75              MOV     R5,#075H
0031 120000      R     LCALL   L?0149
0034 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 879
0037 7800        R     MOV     R0,#LOW regv
0039 08                INC     R0
003A E2                MOVX    A,@R0
003B FB                MOV     R3,A
003C 7D76              MOV     R5,#076H
003E 7F8A              MOV     R7,#08AH
0040 020000      E     LJMP    _WriteI2C
                                           ; SOURCE LINE # 880
0043         L?0135:
0043 7E00              MOV     R6,#00H
0045 120000      E     LCALL   _ReadEEP
0048 7E00              MOV     R6,#00H
004A 7BFE              MOV     R3,#0FEH
004C 7A00        R     MOV     R2,#HIGH regv
004E 7900        R     MOV     R1,#LOW regv
0050 7800        R     MOV     R0,#LOW ?_Mapping1?BYTE+05H
0052 120000      E     LCALL   ?C?PSTPDATA
0055 0B                INC     R3
0056 22                RET     
0057         L?0148:
0057 7800        R     MOV     R0,#LOW ?_Mapping1?BYTE+08H
0059 120000      E     LCALL   ?C?PSTPDATA
005C 7A00        E     MOV     R2,#HIGH UserRange
005E 7900        E     MOV     R1,#LOW UserRange
0060 120000      R     LCALL   _Mapping1
0063 22                RET     
             ; FUNCTION GetInitPanelAttribute1 (END)

             ; FUNCTION InvertVSYNCPolarity (BEGIN)
                                           ; SOURCE LINE # 950
                                           ; SOURCE LINE # 951
                                           ; SOURCE LINE # 954
0000 7D40              MOV     R5,#040H
0002 7F8A              MOV     R7,#08AH
0004 120000      E     LCALL   _ReadI2C
;---- Variable 'val' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 955
0007 EF                MOV     A,R7
0008 30E105            JNB     ACC.1,?C0060
                                           ; SOURCE LINE # 956
000B 54FD              ANL     A,#0FDH
000D FF                MOV     R7,A
                                           ; SOURCE LINE # 962
000E 8004              SJMP    ?C0061
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 125 

0010         ?C0060:
                                           ; SOURCE LINE # 963
                                           ; SOURCE LINE # 964
0010 EF                MOV     A,R7
0011 4402              ORL     A,#02H
0013 FF                MOV     R7,A
                                           ; SOURCE LINE # 970
0014         ?C0061:
                                           ; SOURCE LINE # 971
0014 AB07              MOV     R3,AR7
0016 7D40              MOV     R5,#040H
0018 7F8A              MOV     R7,#08AH
001A 020000      E     LJMP    _WriteI2C
             ; FUNCTION InvertVSYNCPolarity (END)

             ; FUNCTION GetVSYNCPulse (BEGIN)
                                           ; SOURCE LINE # 977
                                           ; SOURCE LINE # 978
                                           ; SOURCE LINE # 981
0000 7B78              MOV     R3,#078H
0002 7D5B              MOV     R5,#05BH
0004 7F8A              MOV     R7,#08AH
0006 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 982
0009 7F0A              MOV     R7,#0AH
000B 120000      E     LCALL   _delay
                                           ; SOURCE LINE # 983
000E 7D58              MOV     R5,#058H
0010 7F8A              MOV     R7,#08AH
0012 120000      E     LCALL   _ReadI2C
0015 7900        R     MOV     R1,#LOW buf+01H
0017 120000      R     LCALL   L?0131
                                           ; SOURCE LINE # 984
001A 7D57              MOV     R5,#057H
001C 7F8A              MOV     R7,#08AH
001E 120000      E     LCALL   _ReadI2C
0021 7800        R     MOV     R0,#LOW buf
0023 120000      R     LCALL   L?0128
                                           ; SOURCE LINE # 989
                                           ; SOURCE LINE # 990
0026         ?C0063:
0026 22                RET     
             ; FUNCTION GetVSYNCPulse (END)

             ; FUNCTION GetHSYNCPulse (BEGIN)
                                           ; SOURCE LINE # 1006
                                           ; SOURCE LINE # 1007
                                           ; SOURCE LINE # 1010
0000 7B68              MOV     R3,#068H
0002 7D5B              MOV     R5,#05BH
0004 7F8A              MOV     R7,#08AH
0006 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 1011
0009 7D58              MOV     R5,#058H
000B 7F8A              MOV     R7,#08AH
000D 120000      E     LCALL   _ReadI2C
0010 EF                MOV     A,R7
0011 F8                MOV     R0,A
0012 E4                CLR     A
0013 7900        R     MOV     R1,#LOW buf+01H
0015 F3                MOVX    @R1,A
0016 E8                MOV     A,R0
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 126 

0017 19                DEC     R1
0018 F3                MOVX    @R1,A
                                           ; SOURCE LINE # 1012
0019 7D57              MOV     R5,#057H
001B 7F8A              MOV     R7,#08AH
001D 120000      E     LCALL   _ReadI2C
0020 7800        R     MOV     R0,#LOW buf
0022 120000      R     LCALL   L?0129
                                           ; SOURCE LINE # 1014
                                           ; SOURCE LINE # 1015
0025         ?C0064:
0025 22                RET     
             ; FUNCTION GetHSYNCPulse (END)

             ; FUNCTION GetPOST (BEGIN)
                                           ; SOURCE LINE # 1024
                                           ; SOURCE LINE # 1025
                                           ; SOURCE LINE # 1028
0000 7DFE              MOV     R5,#0FEH
0002 7F8A              MOV     R7,#08AH
0004 120000      E     LCALL   _ReadI2C
;---- Variable 'post' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1029
0007 EF                MOV     A,R7
0008 C4                SWAP    A
0009 13                RRC     A
000A 13                RRC     A
000B 5403              ANL     A,#03H
000D FF                MOV     R7,A
                                           ; SOURCE LINE # 1030
000E         ?C0065:
000E 22                RET     
             ; FUNCTION GetPOST (END)

             ; FUNCTION GetPPF (BEGIN)
                                           ; SOURCE LINE # 1032
                                           ; SOURCE LINE # 1033
                                           ; SOURCE LINE # 1037
0000 7DF9              MOV     R5,#0F9H
0002 120000      R     LCALL   L?0141
                                           ; SOURCE LINE # 1038
0005 120000      R     LCALL   L?0123
0008 120000      E     LCALL   ?C?LLDPDATA
000B EF                MOV     A,R7
000C 540F              ANL     A,#0FH
000E FF                MOV     R7,A
000F E4                CLR     A
0010 FE                MOV     R6,A
0011 FD                MOV     R5,A
0012 FC                MOV     R4,A
                                           ; SOURCE LINE # 1039
                                           ; SOURCE LINE # 1040
0013 120000      R     LCALL   L?0122
0016 120000      E     LCALL   ?C?LLDPDATA0
0019 C000              PUSH    AR0
001B C001              PUSH    AR1
001D C002              PUSH    AR2
001F C003              PUSH    AR3
0021 7DFA              MOV     R5,#0FAH
0023 120000      R     LCALL   L?0141
0026 D003              POP     AR3
0028 D002              POP     AR2
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 127 

002A D001              POP     AR1
002C D000              POP     AR0
002E 120000      E     LCALL   ?C?LOR
                                           ; SOURCE LINE # 1041
                                           ; SOURCE LINE # 1042
0031 120000      R     LCALL   L?0122
0034 120000      E     LCALL   ?C?LLDPDATA0
0037 C000              PUSH    AR0
0039 C001              PUSH    AR1
003B C002              PUSH    AR2
003D C003              PUSH    AR3
003F 7DFB              MOV     R5,#0FBH
0041 7F8A              MOV     R7,#08AH
0043 120000      E     LCALL   _ReadI2C
0046 E4                CLR     A
0047 FC                MOV     R4,A
0048 FD                MOV     R5,A
0049 FE                MOV     R6,A
004A D003              POP     AR3
004C D002              POP     AR2
004E D001              POP     AR1
0050 D000              POP     AR0
0052 120000      E     LCALL   ?C?LOR
0055 7800        R     MOV     R0,#LOW Freq
0057 120000      E     LCALL   ?C?LSTPDATA
                                           ; SOURCE LINE # 1048
005A E4                CLR     A
005B 7F38              MOV     R7,#038H
005D 7E03              MOV     R6,#03H
005F FD                MOV     R5,A
0060 FC                MOV     R4,A
0061 7800        R     MOV     R0,#LOW Freq
0063 120000      E     LCALL   ?C?LLDPDATA0
0066 120000      E     LCALL   ?C?LMUL
0069 7800        R     MOV     R0,#LOW ppf
006B 120000      E     LCALL   ?C?LSTPDATA
                                           ; SOURCE LINE # 1051
006E 120000      R     LCALL   GetPOST
0071 7800        R     MOV     R0,#LOW i
0073 EF                MOV     A,R7
0074 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1053
0075         ?C0066:
0075 7800        R     MOV     R0,#LOW i
0077 E2                MOVX    A,@R0
0078 D3                SETB    C
0079 9400              SUBB    A,#00H
007B 4014              JC      ?C0067
007D 7800        R     MOV     R0,#LOW ppf
007F 120000      R     LCALL   L?0138
0082 120000      E     LCALL   ?C?ULDIV
0085 7800        R     MOV     R0,#LOW ppf
0087 120000      E     LCALL   ?C?LSTPDATA
008A 7800        R     MOV     R0,#LOW i
008C E2                MOVX    A,@R0
008D 14                DEC     A
008E F2                MOVX    @R0,A
008F 80E4              SJMP    ?C0066
0091         ?C0067:
                                           ; SOURCE LINE # 1058
0091 7800        R     MOV     R0,#LOW ppf
0093 120000      E     LCALL   ?C?LLDPDATA
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 128 

                                           ; SOURCE LINE # 1059
0096         ?C0069:
0096 22                RET     
0097         L?0141:
0097 7F8A              MOV     R7,#08AH
0099 120000      E     LCALL   _ReadI2C
009C E4                CLR     A
009D FC                MOV     R4,A
009E FD                MOV     R5,A
009F FE                MOV     R6,A
00A0 22                RET     
             ; FUNCTION GetPPF (END)

             ; FUNCTION _ChangeInternPLL (BEGIN)
                                           ; SOURCE LINE # 1066
0000 7800        R     MOV     R0,#LOW _PPF
0002 120000      E     LCALL   ?C?LSTPDATA
                                           ; SOURCE LINE # 1067
                                           ; SOURCE LINE # 1075
0005 7B40              MOV     R3,#040H
0007 7A42              MOV     R2,#042H
0009 790F              MOV     R1,#0FH
000B 7800              MOV     R0,#00H
000D C000              PUSH    AR0
000F 7800        R     MOV     R0,#LOW _PPF
0011 120000      E     LCALL   ?C?LLDPDATA
0014 D000              POP     AR0
0016 120000      E     LCALL   ?C?ULDIV
;---- Variable 'ppf' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1078
0019 EF                MOV     A,R7
001A C3                CLR     C
001B 941B              SUBB    A,#01BH
001D 500D              JNC     ?C0070
001F E4                CLR     A
0020 7800        R     MOV     R0,#LOW VCO
0022 F2                MOVX    @R0,A
0023 18                DEC     R0
0024 F2                MOVX    @R0,A
0025 7800        R     MOV     R0,#LOW POST
0027 7402              MOV     A,#02H
0029 F2                MOVX    @R0,A
002A 8029              SJMP    ?C0071
002C         ?C0070:
                                           ; SOURCE LINE # 1079
002C EF                MOV     A,R7
002D C3                CLR     C
002E 9436              SUBB    A,#036H
0030 500E              JNC     ?C0072
0032 7800        R     MOV     R0,#LOW VCO
0034 7401              MOV     A,#01H
0036 F2                MOVX    @R0,A
0037 E4                CLR     A
0038 18                DEC     R0
0039 F2                MOVX    @R0,A
003A 7800        R     MOV     R0,#LOW POST
003C 04                INC     A
003D F2                MOVX    @R0,A
003E 8015              SJMP    ?C0071
0040         ?C0072:
                                           ; SOURCE LINE # 1080
0040 EF                MOV     A,R7
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 129 

0041 C3                CLR     C
0042 946C              SUBB    A,#06CH
0044 7800        R     MOV     R0,#LOW VCO
0046 5004              JNC     ?C0074
0048 7402              MOV     A,#02H
004A 8002              SJMP    ?C0110
004C         ?C0074:
                                           ; SOURCE LINE # 1081
004C 7403              MOV     A,#03H
004E         ?C0110:
004E F2                MOVX    @R0,A
004F E4                CLR     A
0050 18                DEC     R0
0051 F2                MOVX    @R0,A
0052 7800        R     MOV     R0,#LOW POST
0054 F2                MOVX    @R0,A
0055         ?C0071:
                                           ; SOURCE LINE # 1084
0055 7BA0              MOV     R3,#0A0H
0057 7A86              MOV     R2,#086H
0059 7901              MOV     R1,#01H
005B 7800              MOV     R0,#00H
005D C000              PUSH    AR0
005F 7800        R     MOV     R0,#LOW _PPF
0061 120000      E     LCALL   ?C?LLDPDATA
0064 D000              POP     AR0
0066 120000      E     LCALL   ?C?ULDIV
0069 E4                CLR     A
006A 7B7B              MOV     R3,#07BH
006C 7A09              MOV     R2,#09H
006E F9                MOV     R1,A
006F F8                MOV     R0,A
0070 120000      E     LCALL   ?C?LMUL
0073 7800        R     MOV     R0,#LOW FPLL
0075 120000      E     LCALL   ?C?LSTPDATA
                                           ; SOURCE LINE # 1086
0078 7800        R     MOV     R0,#LOW POST
007A E2                MOVX    A,@R0
007B 08                INC     R0
007C F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1087
007D         ?C0076:
007D 7800        R     MOV     R0,#LOW i
007F E2                MOVX    A,@R0
0080 D3                SETB    C
0081 9400              SUBB    A,#00H
0083 4013              JC      ?C0077
                                           ; SOURCE LINE # 1088
0085 08                INC     R0
0086 120000      R     LCALL   L?0138
0089 120000      E     LCALL   ?C?LMUL
008C 7800        R     MOV     R0,#LOW FPLL
008E 120000      E     LCALL   ?C?LSTPDATA
0091 7800        R     MOV     R0,#LOW i
0093 E2                MOVX    A,@R0
0094 14                DEC     A
0095 F2                MOVX    @R0,A
0096 80E5              SJMP    ?C0076
0098         ?C0077:
                                           ; SOURCE LINE # 1090
0098 7800        R     MOV     R0,#LOW FPLL
009A 120000      E     LCALL   ?C?LLDPDATA
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 130 

009D E4                CLR     A
009E 7B14              MOV     R3,#014H
00A0 FA                MOV     R2,A
00A1 F9                MOV     R1,A
00A2 F8                MOV     R0,A
00A3 120000      E     LCALL   ?C?ULDIV
00A6 7800        R     MOV     R0,#LOW FPLL
00A8 120000      E     LCALL   ?C?LSTPDATA
                                           ; SOURCE LINE # 1093
00AB 7800        R     MOV     R0,#LOW FPLL
00AD 120000      E     LCALL   ?C?LLDPDATA
00B0 7810              MOV     R0,#010H
00B2 120000      E     LCALL   ?C?ULSHR
00B5 7DF9              MOV     R5,#0F9H
00B7 120000      R     LCALL   L?0142
                                           ; SOURCE LINE # 1094
00BA 7800        R     MOV     R0,#LOW FPLL
00BC 120000      E     LCALL   ?C?LLDPDATA
00BF 7808              MOV     R0,#08H
00C1 120000      E     LCALL   ?C?ULSHR
00C4 7DFA              MOV     R5,#0FAH
00C6 120000      R     LCALL   L?0142
                                           ; SOURCE LINE # 1095
00C9 7800        R     MOV     R0,#LOW FPLL
00CB 120000      E     LCALL   ?C?LLDPDATA
00CE AB07              MOV     R3,AR7
00D0 7DFB              MOV     R5,#0FBH
00D2 7F8A              MOV     R7,#08AH
00D4 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 1097
00D7 7800        E     MOV     R0,#LOW PcMode
00D9 E2                MOVX    A,@R0
00DA B41109            CJNE    A,#011H,?C0079
                                           ; SOURCE LINE # 1098
00DD 7BB5              MOV     R3,#0B5H
00DF 7DFA              MOV     R5,#0FAH
00E1 7F8A              MOV     R7,#08AH
00E3 120000      E     LCALL   _WriteI2C
00E6         ?C0079:
                                           ; SOURCE LINE # 1101
00E6 7800        R     MOV     R0,#LOW POST
00E8 E2                MOVX    A,@R0
00E9 C4                SWAP    A
00EA 33                RLC     A
00EB 33                RLC     A
00EC 54C0              ANL     A,#0C0H
00EE FF                MOV     R7,A
00EF 18                DEC     R0
00F0 E2                MOVX    A,@R0
00F1 FE                MOV     R6,A
00F2 C4                SWAP    A
00F3 54F0              ANL     A,#0F0H
00F5 4F                ORL     A,R7
00F6 FF                MOV     R7,A
00F7 18                DEC     R0
00F8 E2                MOVX    A,@R0
00F9 4F                ORL     A,R7
00FA FB                MOV     R3,A
00FB 7DFE              MOV     R5,#0FEH
00FD 7F8A              MOV     R7,#08AH
00FF 020000      E     LJMP    _WriteI2C
                                           ; SOURCE LINE # 1102
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 131 

0102         L?0142:
0102 AB07              MOV     R3,AR7
0104 7F8A              MOV     R7,#08AH
0106 120000      E     LCALL   _WriteI2C
0109 22                RET     
             ; FUNCTION _ChangeInternPLL (END)

             ; FUNCTION _SetMeasureWindowH (BEGIN)
                                           ; SOURCE LINE # 1106
0000 7800        R     MOV     R0,#LOW start
0002 120000      R     LCALL   L?0150
                                           ; SOURCE LINE # 1107
                                           ; SOURCE LINE # 1115
0005 7900        R     MOV     R1,#LOW stop
0007 120000      R     LCALL   L?0144
000A 54F0              ANL     A,#0F0H
;---- Variable 'val' assigned to Register 'R5' ----
000C FD                MOV     R5,A
                                           ; SOURCE LINE # 1116
000D 7800        R     MOV     R0,#LOW start
000F E2                MOVX    A,@R0
0010 5407              ANL     A,#07H
0012 4D                ORL     A,R5
                                           ; SOURCE LINE # 1117
0013 FB                MOV     R3,A
0014 7D53              MOV     R5,#053H
0016 7F8A              MOV     R7,#08AH
0018 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 1119
001B 7800        R     MOV     R0,#LOW start
001D 08                INC     R0
001E E2                MOVX    A,@R0
001F FB                MOV     R3,A
0020 7D51              MOV     R5,#051H
0022 7F8A              MOV     R7,#08AH
0024 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 1120
0027 7800        R     MOV     R0,#LOW stop
0029 08                INC     R0
002A E2                MOVX    A,@R0
002B FB                MOV     R3,A
002C 7D52              MOV     R5,#052H
002E 7F8A              MOV     R7,#08AH
0030 020000      E     LJMP    _WriteI2C
             ; FUNCTION _SetMeasureWindowH (END)

             ; FUNCTION _SetMeasureWindowV (BEGIN)
                                           ; SOURCE LINE # 1123
0000 7800        R     MOV     R0,#LOW start
0002 120000      R     LCALL   L?0150
                                           ; SOURCE LINE # 1124
                                           ; SOURCE LINE # 1132
0005 7900        R     MOV     R1,#LOW stop
0007 120000      R     LCALL   L?0144
000A 5470              ANL     A,#070H
;---- Variable 'val' assigned to Register 'R5' ----
000C FD                MOV     R5,A
                                           ; SOURCE LINE # 1133
000D 7800        R     MOV     R0,#LOW start
000F E2                MOVX    A,@R0
0010 5407              ANL     A,#07H
0012 4D                ORL     A,R5
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 132 

                                           ; SOURCE LINE # 1134
0013 FB                MOV     R3,A
0014 7D56              MOV     R5,#056H
0016 7F8A              MOV     R7,#08AH
0018 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 1136
001B 7800        R     MOV     R0,#LOW start
001D 08                INC     R0
001E E2                MOVX    A,@R0
001F FB                MOV     R3,A
0020 7D54              MOV     R5,#054H
0022 7F8A              MOV     R7,#08AH
0024 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 1137
0027 7800        R     MOV     R0,#LOW stop
0029 08                INC     R0
002A E2                MOVX    A,@R0
002B FB                MOV     R3,A
002C 7D55              MOV     R5,#055H
002E 7F8A              MOV     R7,#08AH
0030 020000      E     LJMP    _WriteI2C
             ; FUNCTION _SetMeasureWindowV (END)

             ; FUNCTION BypassZoom (BEGIN)
                                           ; SOURCE LINE # 1145
                                           ; SOURCE LINE # 1146
                                           ; SOURCE LINE # 1154
0000 E4                CLR     A
0001 FB                MOV     R3,A
0002 7D60              MOV     R5,#060H
0004 7F8A              MOV     R7,#08AH
0006 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 1155
0009 7B80              MOV     R3,#080H
000B 7D61              MOV     R5,#061H
000D 7F8A              MOV     R7,#08AH
000F 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 1156
0012 E4                CLR     A
0013 FB                MOV     R3,A
0014 7D62              MOV     R5,#062H
0016 7F8A              MOV     R7,#08AH
0018 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 1157
001B 7B15              MOV     R3,#015H
001D 7D63              MOV     R5,#063H
001F 7F8A              MOV     R7,#08AH
0021 020000      E     LJMP    _WriteI2C
             ; FUNCTION BypassZoom (END)

             ; FUNCTION _XscaleU (BEGIN)
                                           ; SOURCE LINE # 1163
0000 7800        R     MOV     R0,#LOW scale
0002 120000      E     LCALL   ?C?LSTPDATA
                                           ; SOURCE LINE # 1164
                                           ; SOURCE LINE # 1167
0005 7800        R     MOV     R0,#LOW scale
0007 120000      E     LCALL   ?C?LLDPDATA
000A 7D69              MOV     R5,#069H
                                           ; SOURCE LINE # 1169
000C 120000      R     LCALL   L?0132
                                           ; SOURCE LINE # 1170
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 133 

000F 7800        R     MOV     R0,#LOW scale
0011 120000      E     LCALL   ?C?LLDPDATA
0014 7D60              MOV     R5,#060H
                                           ; SOURCE LINE # 1172
0016 120000      R     LCALL   L?0132
                                           ; SOURCE LINE # 1173
0019 7D63              MOV     R5,#063H
001B 7F8A              MOV     R7,#08AH
001D 120000      E     LCALL   _ReadI2C
;---- Variable 'val' assigned to Register 'R3' ----
0020 AB07              MOV     R3,AR7
                                           ; SOURCE LINE # 1174
0022 EB                MOV     A,R3
0023 54FE              ANL     A,#0FEH
                                           ; SOURCE LINE # 1175
0025 7800        R     MOV     R0,#LOW scale
                                           ; SOURCE LINE # 1176
0027 120000      R     LCALL   L?0133
002A 020000      E     LJMP    _WriteI2C
                                           ; SOURCE LINE # 1177
002D         L?0132:
002D AB07              MOV     R3,AR7
002F 7F8A              MOV     R7,#08AH
0031 120000      E     LCALL   _WriteI2C
0034 7800        R     MOV     R0,#LOW scale
0036 120000      E     LCALL   ?C?LLDPDATA
0039 7808              MOV     R0,#08H
003B 120000      E     LCALL   ?C?ULSHR
003E 7800        R     MOV     R0,#LOW scale
0040 120000      E     LCALL   ?C?LSTPDATA
0043 22                RET     
             ; FUNCTION _XscaleU (END)

             ; FUNCTION _XscaleD (BEGIN)
                                           ; SOURCE LINE # 1179
                                           ; SOURCE LINE # 1180
                                           ; SOURCE LINE # 1183
0000 120000      R     LCALL   L?0152
0003 AB07              MOV     R3,AR7
0005 7D61              MOV     R5,#061H
0007 7F8A              MOV     R7,#08AH
0009 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 1185
000C 7800        R     MOV     R0,#LOW scale
000E 120000      E     LCALL   ?C?LLDPDATA
0011 7808              MOV     R0,#08H
0013 120000      E     LCALL   ?C?ULSHR
                                           ; SOURCE LINE # 1186
0016 120000      R     LCALL   L?0152
0019 7801              MOV     R0,#01H
001B 120000      E     LCALL   ?C?LSHL
001E 7800        R     MOV     R0,#LOW scale
0020 120000      E     LCALL   ?C?LSTPDATA
                                           ; SOURCE LINE # 1187
0023 7D63              MOV     R5,#063H
0025 7F8A              MOV     R7,#08AH
0027 120000      E     LCALL   _ReadI2C
;---- Variable 'val' assigned to Register 'R3' ----
002A AB07              MOV     R3,AR7
                                           ; SOURCE LINE # 1188
002C EB                MOV     A,R3
002D 54FD              ANL     A,#0FDH
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 134 

                                           ; SOURCE LINE # 1189
002F 7800        R     MOV     R0,#LOW scale
                                           ; SOURCE LINE # 1190
0031 120000      R     LCALL   L?0133
0034 020000      E     LJMP    _WriteI2C
             ; FUNCTION _XscaleD (END)

             ; FUNCTION _XScale2 (BEGIN)
                                           ; SOURCE LINE # 1193
0000 7800        R     MOV     R0,#LOW scale
0002 120000      E     LCALL   ?C?LSTPDATA
                                           ; SOURCE LINE # 1194
                                           ; SOURCE LINE # 1196
0005 120000      R     LCALL   L?0140
0008 700A              JNZ     ?C0086
                                           ; SOURCE LINE # 1197
000A FF                MOV     R7,A
000B FE                MOV     R6,A
000C 7D01              MOV     R5,#01H
000E FC                MOV     R4,A
000F 120000      R     LCALL   _XscaleU
                                           ; SOURCE LINE # 1198
                                           ; SOURCE LINE # 1199
0012 8020              SJMP    ?C0111
0014         ?C0086:
                                           ; SOURCE LINE # 1200
0014 120000      R     LCALL   L?0140
0017 5025              JNC     ?C0088
                                           ; SOURCE LINE # 1201
0019 7800        R     MOV     R0,#LOW scale
001B 120000      E     LCALL   ?C?LLDPDATA
001E 120000      R     LCALL   _XscaleU
                                           ; SOURCE LINE # 1208
0021 7800        E     MOV     R0,#LOW PcMode
0023 E2                MOVX    A,@R0
0024 FF                MOV     R7,A
0025 C3                CLR     C
0026 940A              SUBB    A,#0AH
0028 400A              JC      ?C0089
002A EF                MOV     A,R7
002B D3                SETB    C
002C 940F              SUBB    A,#0FH
002E 5004              JNC     ?C0089
                                           ; SOURCE LINE # 1209
0030 7F82              MOV     R7,#082H
0032 8002              SJMP    ?C0112
0034         ?C0089:
                                           ; SOURCE LINE # 1211
0034         ?C0111:
0034 7F80              MOV     R7,#080H
0036         ?C0112:
0036 7E00              MOV     R6,#00H
0038 7D00              MOV     R5,#00H
003A 7C00              MOV     R4,#00H
                                           ; SOURCE LINE # 1214
003C 803E              SJMP    ?C0114
003E         ?C0088:
                                           ; SOURCE LINE # 1215
                                           ; SOURCE LINE # 1216
003E 7F00              MOV     R7,#00H
0040 7E00              MOV     R6,#00H
0042 7D01              MOV     R5,#01H
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 135 

0044 7C00              MOV     R4,#00H
0046 120000      R     LCALL   _XscaleU
                                           ; SOURCE LINE # 1220
0049 7800        E     MOV     R0,#LOW PcMode
004B E2                MOVX    A,@R0
004C B4111E            CJNE    A,#011H,?C0092
                                           ; SOURCE LINE # 1221
                                           ; SOURCE LINE # 1222
004F 120000      R     LCALL   L?0139
0052 C000              PUSH    AR0
0054 7800        R     MOV     R0,#LOW scale
0056 120000      E     LCALL   ?C?LLDPDATA
0059 D000              POP     AR0
005B 120000      R     LCALL   L?0145
005E EF                MOV     A,R7
005F 2401              ADD     A,#01H
0061 FF                MOV     R7,A
0062 E4                CLR     A
0063 3E                ADDC    A,R6
0064 FE                MOV     R6,A
0065 E4                CLR     A
0066 3D                ADDC    A,R5
0067 FD                MOV     R5,A
0068 E4                CLR     A
0069 3C                ADDC    A,R4
006A FC                MOV     R4,A
006B         ?C0113:
                                           ; SOURCE LINE # 1223
006B 800F              SJMP    ?C0114
006D         ?C0092:
                                           ; SOURCE LINE # 1225
006D 120000      R     LCALL   L?0139
0070 C000              PUSH    AR0
0072 7800        R     MOV     R0,#LOW scale
0074 120000      E     LCALL   ?C?LLDPDATA
0077 D000              POP     AR0
0079 120000      R     LCALL   L?0145
007C         ?C0114:
007C 120000      R     LCALL   _XscaleD
                                           ; SOURCE LINE # 1227
                                           ; SOURCE LINE # 1228
007F         ?C0094:
007F 22                RET     
             ; FUNCTION _XScale2 (END)

             ; FUNCTION _YScale2 (BEGIN)
                                           ; SOURCE LINE # 1230
0000 7800        R     MOV     R0,#LOW scale
0002 120000      E     LCALL   ?C?LSTPDATA
                                           ; SOURCE LINE # 1231
                                           ; SOURCE LINE # 1234
0005 7800        R     MOV     R0,#LOW scale
0007 120000      E     LCALL   ?C?LLDPDATA
000A 7D6A              MOV     R5,#06AH
                                           ; SOURCE LINE # 1236
                                           ; SOURCE LINE # 1237
000C 120000      R     LCALL   L?0125
000F 7D62              MOV     R5,#062H
                                           ; SOURCE LINE # 1239
                                           ; SOURCE LINE # 1240
0011 120000      R     LCALL   L?0125
0014 7802              MOV     R0,#02H
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 136 

0016 120000      E     LCALL   ?C?LSHL
0019 7800        R     MOV     R0,#LOW scale
001B 120000      E     LCALL   ?C?LSTPDATA
                                           ; SOURCE LINE # 1241
001E 7D63              MOV     R5,#063H
0020 7F8A              MOV     R7,#08AH
0022 120000      E     LCALL   _ReadI2C
0025 EF                MOV     A,R7
0026 54F3              ANL     A,#0F3H
;---- Variable 'val' assigned to Register 'R3' ----
0028 FB                MOV     R3,A
                                           ; SOURCE LINE # 1242
0029 7800        R     MOV     R0,#LOW scale
                                           ; SOURCE LINE # 1243
002B 120000      R     LCALL   L?0134
002E 020000      E     LJMP    _WriteI2C
                                           ; SOURCE LINE # 1244
0031         L?0125:
0031 AB07              MOV     R3,AR7
0033 7F8A              MOV     R7,#08AH
0035 120000      E     LCALL   _WriteI2C
0038 7800        R     MOV     R0,#LOW scale
003A 120000      E     LCALL   ?C?LLDPDATA
003D 7808              MOV     R0,#08H
003F 120000      E     LCALL   ?C?ULSHR
0042 7800        R     MOV     R0,#LOW scale
0044 120000      E     LCALL   ?C?LSTPDATA
0047 7800        R     MOV     R0,#LOW scale
0049 120000      E     LCALL   ?C?LLDPDATA
004C 22                RET     
             ; FUNCTION _YScale2 (END)

             ; FUNCTION GetPVR (BEGIN)
                                           ; SOURCE LINE # 1297
                                           ; SOURCE LINE # 1298
                                           ; SOURCE LINE # 1307
0000 7E02              MOV     R6,#02H
0002 7F58              MOV     R7,#058H
                                           ; SOURCE LINE # 1308
0004         ?C0096:
0004 22                RET     
             ; FUNCTION GetPVR (END)

             ; FUNCTION GetPHR (BEGIN)
                                           ; SOURCE LINE # 1311
                                           ; SOURCE LINE # 1312
                                           ; SOURCE LINE # 1321
0000 7E03              MOV     R6,#03H
0002 7F20              MOV     R7,#020H
                                           ; SOURCE LINE # 1322
0004         ?C0097:
0004 22                RET     
             ; FUNCTION GetPHR (END)

             ; FUNCTION GetHPN (BEGIN)
                                           ; SOURCE LINE # 1324
                                           ; SOURCE LINE # 1325
                                           ; SOURCE LINE # 1328
0000 120000      R     LCALL   ClearEnDet
                                           ; SOURCE LINE # 1330
0003 7B58              MOV     R3,#058H
0005 7D5B              MOV     R5,#05BH
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 137 

0007 7F8A              MOV     R7,#08AH
0009 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 1332
000C 7D58              MOV     R5,#058H
000E 7F8A              MOV     R7,#08AH
0010 120000      E     LCALL   _ReadI2C
0013 7800        R     MOV     R0,#LOW buf
0015 E4                CLR     A
0016 F2                MOVX    @R0,A
0017 08                INC     R0
0018 EF                MOV     A,R7
0019 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1333
001A 7900        R     MOV     R1,#LOW buf+01H
001C 120000      R     LCALL   L?0137
                                           ; SOURCE LINE # 1334
001F 7D57              MOV     R5,#057H
0021 7F8A              MOV     R7,#08AH
0023 120000      E     LCALL   _ReadI2C
0026 7800        R     MOV     R0,#LOW buf
0028 E2                MOVX    A,@R0
0029 F2                MOVX    @R0,A
002A 08                INC     R0
002B E2                MOVX    A,@R0
002C 4F                ORL     A,R7
002D F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1336
002E 120000      R     LCALL   SetEnDet
                                           ; SOURCE LINE # 1338
0031 7800        R     MOV     R0,#LOW buf
0033 E2                MOVX    A,@R0
0034 FE                MOV     R6,A
0035 08                INC     R0
0036 E2                MOVX    A,@R0
0037 FF                MOV     R7,A
                                           ; SOURCE LINE # 1341
0038         ?C0098:
0038 22                RET     
             ; FUNCTION GetHPN (END)

             ; FUNCTION GetVPN (BEGIN)
                                           ; SOURCE LINE # 1364
                                           ; SOURCE LINE # 1365
                                           ; SOURCE LINE # 1368
0000 7B58              MOV     R3,#058H
0002 7D5B              MOV     R5,#05BH
0004 7F8A              MOV     R7,#08AH
0006 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 1370
0009 7D5A              MOV     R5,#05AH
000B 7F8A              MOV     R7,#08AH
000D 120000      E     LCALL   _ReadI2C
0010 7800        R     MOV     R0,#LOW buf
0012 E4                CLR     A
0013 F2                MOVX    @R0,A
0014 08                INC     R0
0015 EF                MOV     A,R7
0016 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1371
0017 7900        R     MOV     R1,#LOW buf+01H
0019 120000      R     LCALL   L?0137
                                           ; SOURCE LINE # 1372
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 138 

001C 7D59              MOV     R5,#059H
001E 7F8A              MOV     R7,#08AH
0020 120000      E     LCALL   _ReadI2C
0023 7800        R     MOV     R0,#LOW buf
0025 120000      R     LCALL   L?0129
                                           ; SOURCE LINE # 1373
                                           ; SOURCE LINE # 1374
0028         ?C0099:
0028 22                RET     
             ; FUNCTION GetVPN (END)

             ; FUNCTION GetVBackPorch (BEGIN)
                                           ; SOURCE LINE # 1389
                                           ; SOURCE LINE # 1390
                                           ; SOURCE LINE # 1391
0000 7DB9              MOV     R5,#0B9H
0002 7F8A              MOV     R7,#08AH
0004 120000      E     LCALL   _ReadI2C
                                           ; SOURCE LINE # 1392
0007         ?C0100:
0007 22                RET     
             ; FUNCTION GetVBackPorch (END)

             ; FUNCTION _SetVBackPorch (BEGIN)
                                           ; SOURCE LINE # 1397
;---- Variable 'val' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1398
                                           ; SOURCE LINE # 1402
0000 AB07              MOV     R3,AR7
0002 7DB9              MOV     R5,#0B9H
0004 7F8A              MOV     R7,#08AH
0006 020000      E     LJMP    _WriteI2C
             ; FUNCTION _SetVBackPorch (END)

             ; FUNCTION _SetPVP (BEGIN)
                                           ; SOURCE LINE # 1405
0000 7800        R     MOV     R0,#LOW period
0002 EE                MOV     A,R6
0003 F2                MOVX    @R0,A
0004 08                INC     R0
0005 EF                MOV     A,R7
0006 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1406
                                           ; SOURCE LINE # 1410
0007 7DBB              MOV     R5,#0BBH
0009 7F8A              MOV     R7,#08AH
000B 120000      E     LCALL   _ReadI2C
;---- Variable 'val' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 1411
                                           ; SOURCE LINE # 1412
000E 7800        R     MOV     R0,#LOW period
                                           ; SOURCE LINE # 1413
0010 120000      R     LCALL   L?0157
0013 7DBB              MOV     R5,#0BBH
0015 7F8A              MOV     R7,#08AH
0017 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 1414
001A 7800        R     MOV     R0,#LOW period
001C 08                INC     R0
001D E2                MOVX    A,@R0
001E FB                MOV     R3,A
001F 7DB7              MOV     R5,#0B7H
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 139 

0021 7F8A              MOV     R7,#08AH
0023 020000      E     LJMP    _WriteI2C
             ; FUNCTION _SetPVP (END)

             ; FUNCTION _SetPHP (BEGIN)
                                           ; SOURCE LINE # 1417
0000 7800        R     MOV     R0,#LOW php
0002 EE                MOV     A,R6
0003 F2                MOVX    @R0,A
0004 08                INC     R0
0005 EF                MOV     A,R7
0006 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1418
                                           ; SOURCE LINE # 1422
0007 7DB6              MOV     R5,#0B6H
0009 7F8A              MOV     R7,#08AH
000B 120000      E     LCALL   _ReadI2C
;---- Variable 'val' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 1423
                                           ; SOURCE LINE # 1424
000E 7800        R     MOV     R0,#LOW php
                                           ; SOURCE LINE # 1425
0010 120000      R     LCALL   L?0157
0013 7DB6              MOV     R5,#0B6H
0015 7F8A              MOV     R7,#08AH
0017 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 1426
001A 7800        R     MOV     R0,#LOW php
001C 08                INC     R0
001D E2                MOVX    A,@R0
001E FB                MOV     R3,A
001F 7DB2              MOV     R5,#0B2H
0021 7F8A              MOV     R7,#08AH
0023 020000      E     LJMP    _WriteI2C
             ; FUNCTION _SetPHP (END)

             ; FUNCTION _Mapping1 (BEGIN)
                                           ; SOURCE LINE # 1714
0000 7800        R     MOV     R0,#LOW fromValue
0002 EE                MOV     A,R6
0003 F2                MOVX    @R0,A
0004 08                INC     R0
0005 EF                MOV     A,R7
0006 F2                MOVX    @R0,A
0007 08                INC     R0
0008 120000      E     LCALL   ?C?PSTPDATA
                                           ; SOURCE LINE # 1715
                                           ; SOURCE LINE # 1722
000B 120000      R     LCALL   L?0120
000E FD                MOV     R5,A
000F D3                SETB    C
0010 EF                MOV     A,R7
0011 9D                SUBB    A,R5
0012 E5F0              MOV     A,B
0014 6480              XRL     A,#080H
0016 F8                MOV     R0,A
0017 EE                MOV     A,R6
0018 6480              XRL     A,#080H
001A 98                SUBB    A,R0
001B 5046              JNC     ?C0104
                                           ; SOURCE LINE # 1723
001D 7800        R     MOV     R0,#LOW toRange
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 140 

001F 120000      R     LCALL   L?0119
0022 FF                MOV     R7,A
0023 AEF0              MOV     R6,B
0025 120000      E     LCALL   ?C?ILDPTR
0028 FD                MOV     R5,A
0029 ACF0              MOV     R4,B
002B C3                CLR     C
002C EF                MOV     A,R7
002D 9D                SUBB    A,R5
002E 7800        R     MOV     R0,#LOW a+01H
0030 F2                MOVX    @R0,A
0031 EE                MOV     A,R6
0032 9C                SUBB    A,R4
                                           ; SOURCE LINE # 1724
0033 120000      R     LCALL   L?0117
0036 FD                MOV     R5,A
0037 ACF0              MOV     R4,B
0039 120000      E     LCALL   ?C?ILDPTR
003C FB                MOV     R3,A
003D AAF0              MOV     R2,B
003F C3                CLR     C
0040 ED                MOV     A,R5
0041 9B                SUBB    A,R3
0042 FF                MOV     R7,A
0043 EC                MOV     A,R4
0044 9A                SUBB    A,R2
0045 FE                MOV     R6,A
0046 7800        R     MOV     R0,#LOW b
0048 F2                MOVX    @R0,A
0049 08                INC     R0
004A EF                MOV     A,R7
004B F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1726
004C 4E                ORL     A,R6
004D 7002              JNZ     ?C0105
004F FF                MOV     R7,A
0050 22                RET     
0051         ?C0105:
                                           ; SOURCE LINE # 1728
0051 120000      R     LCALL   L?0124
0054 C006              PUSH    AR6
0056 C007              PUSH    AR7
0058 7800        R     MOV     R0,#LOW toRange
005A 120000      E     LCALL   ?C?PLDPDATA
005D 120000      E     LCALL   ?C?ILDPTR
                                           ; SOURCE LINE # 1729
0060 020000      R     LJMP    ?C0115
0063         ?C0104:
                                           ; SOURCE LINE # 1730
                                           ; SOURCE LINE # 1731
0063 7800        R     MOV     R0,#LOW toRange
0065 120000      R     LCALL   L?0119
0068 120000      R     LCALL   L?0158
006B ACF0              MOV     R4,B
006D C3                CLR     C
006E 9F                SUBB    A,R7
006F 7800        R     MOV     R0,#LOW a+01H
0071 F2                MOVX    @R0,A
0072 EC                MOV     A,R4
0073 9E                SUBB    A,R6
                                           ; SOURCE LINE # 1732
0074 120000      R     LCALL   L?0117
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 141 

0077 120000      R     LCALL   L?0158
007A C3                CLR     C
007B 9F                SUBB    A,R7
007C FF                MOV     R7,A
007D E5F0              MOV     A,B
007F 9E                SUBB    A,R6
0080 FE                MOV     R6,A
0081 7800        R     MOV     R0,#LOW b
0083 F2                MOVX    @R0,A
0084 08                INC     R0
0085 EF                MOV     A,R7
0086 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1734
0087 4E                ORL     A,R6
0088 7002              JNZ     ?C0108
008A FF                MOV     R7,A
008B 22                RET     
008C         ?C0108:
                                           ; SOURCE LINE # 1736
008C 120000      R     LCALL   L?0118
008F FF                MOV     R7,A
0090 AEF0              MOV     R6,B
0092 AB07              MOV     R3,AR7
0094 AA06              MOV     R2,AR6
0096 120000      R     LCALL   L?0124
0099 C006              PUSH    AR6
009B C007              PUSH    AR7
009D 7800        R     MOV     R0,#LOW toRange
009F 120000      R     LCALL   L?0119
00A2         ?C0115:
00A2 FF                MOV     R7,A
00A3 AEF0              MOV     R6,B
00A5 D0E0              POP     ACC
00A7 2F                ADD     A,R7
00A8 FF                MOV     R7,A
00A9 D0E0              POP     ACC
00AB 3E                ADDC    A,R6
00AC FE                MOV     R6,A
00AD 7800        R     MOV     R0,#LOW toValue
00AF 120000      E     LCALL   ?C?PLDPDATA
00B2 EE                MOV     A,R6
00B3 8FF0              MOV     B,R7
00B5 120000      E     LCALL   ?C?ISTPTR
                                           ; SOURCE LINE # 1737
00B8         ?C0107:
                                           ; SOURCE LINE # 1744
00B8 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 1746
00BA         ?C0106:
00BA 22                RET     
             ; FUNCTION _Mapping1 (END)

C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 142 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


_SetADCMode. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
COMPOSITE3Input. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
SetEnDet . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  val. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_Mapping1. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  fromValue. . . . . . . . . . . . . .  AUTO     PDATA  INT      0000H  2
  fromRange. . . . . . . . . . . . . .  AUTO     PDATA  PTR      0002H  3
  toValue. . . . . . . . . . . . . . .  AUTO     PDATA  PTR      0005H  3
  toRange. . . . . . . . . . . . . . .  AUTO     PDATA  PTR      0008H  3
  a. . . . . . . . . . . . . . . . . .  AUTO     PDATA  INT      000BH  2
  b. . . . . . . . . . . . . . . . . .  AUTO     PDATA  INT      000DH  2
DWORD. . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
_LCDPowerON. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  mute . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0000H  1
_MeasureAndWait. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  field. . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0000H  1
  val. . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0001H  1
  i. . . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0002H  1
GetHactiveEnd. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  buf. . . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0000H  2
  val. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
CAM_R. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
P4 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E8H  1
PanelBrightnessRange . . . . . . . . .  EXTERN   CODE   STRUCT   -----  6
CAM_BAR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ABR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
GetPPF . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ppf. . . . . . . . . . . . . . . . .  AUTO     PDATA  U_LONG   0000H  4
  Freq . . . . . . . . . . . . . . . .  AUTO     PDATA  U_LONG   0004H  4
  i. . . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0008H  1
_SetHactiveStart . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  hstart . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0000H  2
  val. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
GetHPN . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  buf. . . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0000H  2
CAM_CAR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ACR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_CBR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_BCR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
GetVactiveStart. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  buf. . . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0000H  2
  val. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
GetLCDPowerState . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  val. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
GetPHR . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
PowerFlag. . . . . . . . . . . . . . .  EXTERN   PDATA  U_CHAR   -----  1
NumberStringType . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  11
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  width. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  BackColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  Radix. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  NumColor . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  MaxLen . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  PrePostCharLen . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  PrePostChar. . . . . . . . . . . . .  MEMBER   -----  ARRAY    0008H  3
_SetHactiveEnd . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 143 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  hend . . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0000H  2
  val. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  buf. . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0002H  1
_PanelMute . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  on . . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0000H  1
_ClearAutoDetectStd. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  std. . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0000H  1
  val. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
UserRange. . . . . . . . . . . . . . .  EXTERN   CODE   STRUCT   -----  6
_delay . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
FontData . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  27
  font . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  27
_SetVactiveStart . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  vstart . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
  val. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  v_h. . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0000H  1
  v_l. . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0001H  1
_SetPHP. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  php. . . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0000H  2
  val. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
GetVPN . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  buf. . . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0000H  2
MaskOffSYNCInt . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  val. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
GetInitPanelAttribute1 . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  rdata. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  regv . . . . . . . . . . . . . . . .  AUTO     PDATA  INT      0000H  2
GetPossibleAutoDetectStdEE . . . . . .  EXTERN   CODE   PROC     -----  -----
GetPVR . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
GetHstart. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  hstartMax. . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0000H  2
BypassZoom . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
AVMode . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
SourceModeType . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
CAM_NUM. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_SetPVP. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  period . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0000H  2
  val. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
_SetVactiveLen . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  van. . . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0000H  2
  val. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  buf. . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0002H  1
_ChangeInternPLL . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  _PPF . . . . . . . . . . . . . . . .  AUTO     PDATA  U_LONG   0000H  4
  ppf. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  CURR . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0004H  1
  VCO. . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0005H  1
  POST . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0006H  1
  i. . . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0007H  1
  FPLL . . . . . . . . . . . . . . . .  AUTO     PDATA  U_LONG   0008H  4
_XscaleD . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  scale. . . . . . . . . . . . . . . .  AUTO     PDATA  U_LONG   0000H  4
  val. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0003H  1
GetVstart. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  vstartMin. . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0000H  2
  vstartMax. . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0002H  2
DetectDecoderInput . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 144 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  std. . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0000H  1
  val. . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0001H  1
_Puts. . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_PanelFreeRun. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  on . . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0000H  1
  val. . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0001H  1
CAM_RAB_H. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
OSDStrInfo . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  8
  cnt. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  addr . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  attr . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  str. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0004H  4
GetVend. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  vend . . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0000H  2
  vendMin. . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0002H  2
AVGAInput. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
CAM_BA . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_AB . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
BYTE . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
TimeType . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  7
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  width. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  BackColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  Format . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  TimeColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  CursorColor. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
GetHSYNCPulse. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  buf. . . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0000H  2
CAM_CA . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_AC . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_BC . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_CB . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
PanelContrastRange . . . . . . . . . .  EXTERN   CODE   STRUCT   -----  6
ON_LVDS. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_XscaleU . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  scale. . . . . . . . . . . . . . . .  AUTO     PDATA  U_LONG   0000H  4
  val. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0003H  1
CheckTrigger . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
SourceModeTypeEnum . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
PcMode . . . . . . . . . . . . . . . .  EXTERN   PDATA  U_CHAR   -----  1
struct_IdName. . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  17
  Id . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  Name . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0001H  16
EnumType . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  17
  Sz . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  ByLang . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  Str. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0002H  15
MenuType . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  4
  width. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  height . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  TitleColor . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  CursorColor. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
CAM_RAB_T. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
ClearEnDet . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  val. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_ReadI2C . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 145 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


WORD . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
MakeStartInt . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
LCDPowerOFF. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
GetVSYNCPulse. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  buf. . . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0000H  2
CAM_AR . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_BR . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_RB . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_CR . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_SetMeasureWindowH . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  start. . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0000H  2
  stop . . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0002H  2
  val. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
Register . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
_WriteI2C. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
AutoPHPCalDisable. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_PanelBlack. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  on . . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0000H  1
  val. . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0001H  1
  tmp. . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0002H  1
SetAutoDetectStd . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  val. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
NumType. . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  5
  PrePostCharLen . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  PrePostChar. . . . . . . . . . . . .  MEMBER   -----  ARRAY    0001H  4
_Wait_ms . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_SetMeasureWindowV . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  start. . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0000H  2
  stop . . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0002H  2
  val. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
RegisterInfo . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  Min. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0000H  2
  Max. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0002H  2
  Default. . . . . . . . . . . . . . .  MEMBER   -----  INT      0004H  2
_ReadEEP . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
IsBypassmode . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  dat. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_PCMDATA . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  22
  Support. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  HAN. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  VAN. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0003H  2
  IVF. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0005H  2
  CLOCK. . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0007H  2
  low. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0009H  2
  high . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000BH  2
  Hstart . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000DH  2
  Vstart . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000FH  2
  IPF. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0011H  2
  PPF. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0013H  2
  VBack. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0015H  1
WaitEndofDisplayArea . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_SetRGBContrast. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CAM_QUAD . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Clear_bypass . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  dat. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
AutoPHPCalEnable . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
DefineMenu . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  16
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 146 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  Icon . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0000H  2
  Desc . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0002H  3
  PreFnId. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  PostFnId . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  IconColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  DescColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
  Child. . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0009H  2
  Type . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000BH  1
  ActiveWithCursor . . . . . . . . . .  MEMBER   -----  U_CHAR   000CH  1
  Id . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000DH  1
  TypeData . . . . . . . . . . . . . .  MEMBER   -----  PTR      000EH  2
_PowerLED. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
VGAMode. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
m_cStandard. . . . . . . . . . . . . .  STATIC   PDATA  U_CHAR   0000H  1
GetPOST. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  post . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
SEQ. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
GetVBackPorch. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
InvertVSYNCPolarity. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  val. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
LongRegisterInfo . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  Min. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  Max. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  Default. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
PictureInfo. . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  4
  Register_Addr. . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  EEPROM_Addr. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  Control_Range. . . . . . . . . . . .  MEMBER   -----  PTR      0002H  2
CAM_ABR_T3 . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ABR_T4 . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_A. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_B. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_C. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_XScale2 . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  scale. . . . . . . . . . . . . . . .  AUTO     PDATA  U_LONG   0000H  4
CAM_D. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
OFF_LVDS . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_YScale2 . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  scale. . . . . . . . . . . . . . . .  AUTO     PDATA  U_LONG   0000H  4
  val. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0003H  1
_SetVBackPorch . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  val. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
CAM_CAB. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_BAC. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ABC. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
COMPOSITE1Input. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
GetHactiveStart. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  buf. . . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0000H  2
  val. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
COMPOSITE2Input. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3251    ----
   CONSTANT SIZE    =     38    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =      1     113
   DATA SIZE        =   ----    ----
C51 COMPILER V8.16   TW88                                                                  03/04/2011 15:51:19 PAGE 147 

   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
