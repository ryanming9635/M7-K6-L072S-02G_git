C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 1   


C51 COMPILER V8.16, COMPILATION OF MODULE MEASURE
OBJECT MODULE PLACED IN .\Output\Measure.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Measure.c COMPACT OPTIMIZE(9,SIZE) BROWSE INCDIR(.\Include\) DEBUG OBJECTEX
                    -TEND CODE LISTINCLUDE SYMBOLS PRINT(.\Source\Measure.lst) OBJECT(.\Output\Measure.obj)

line level    source

   1          #include "Config.h"
   1      =1  /*****************************************************************************/
   2      =1  /*                           System Configurations                           */
   3      =1  /*                                                      rev 0.10 include auto test                                               */
   4      =1  // 0.11 change DTV, PC input initial download data correct for Charge Pump
   5      =1  // 0.12 correct phase measurement routine '>>3'
   6      =1  // 0.13 enable function for SPI control... only EXT MCU case
   7      =1  // 0.14 corrected PC measurement......
   8      =1  // 0.0a test function only for CVBS, SVIDEO
   9      =1  // 0.15 corrected DTV scaler setting for panel resolutions
  10      =1  // 0.0b panel for AND 640x480 TICON panel
  11      =1  // 0.16 corrected COMPONENT scaler setting for panel resolutions        11/21/2007
  12      =1  // 0.0c automatic chip test
  13      =1  // 0.17 add monitor function, osd grid for writing grid
  14      =1  // 0.18 add component, dtv pc for analogpanel, 12/06/2007
  15      =1  // 0.19 correct pal input for CES, 12/20/2007
  16      =1  // 0.1a CCFL control, 12/28/2007
  17      =1  // 0.19 Multi Grid for Banking on Internal MCU  01/17/2008
  18      =1  // 0.20 CCFL contol for backlight brightness    01/21/2008
  19      =1  // 0.21 CCFL contol for backlight brightness    01/25/2008
  20      =1  // 0.22 phase setting 02/07/2008
  21      =1  // 0.221 display input correction 04/03/2008
  22      =1  // 0.23 PC, DTV mode, no signal display
  23      =1  // 0.24 PC Auto Color adjustment
  24      =1  // 0.25 revised PC Auto Clock adjustment - find divide number and phase
  25      =1  // 0.26 Digital RGB for TW8826
  26      =1  // 0.27 Correct LVDS control                                    08/22/2008
  27      =1  // 0.28 Add WSVGA resolution                                    10/23/2008
  28      =1  // 0.29 Add NEW GRID                                                    11/14/2008
  29      =1  // 0.30 Fix DTV input                                                   12/10/2008
  30      =1  // 0.31 Add 1080i23, 24, 25A, 25B                               01/20/2009
  31      =1  // 0.32 TCON setting FIX all mode                               01/22/2009
  32      =1  // 0.33 autodetect is auto on/off by dip sw1    02/02/2009
  33      =1  // 0.34 Fix autocolor function and clamp position 02/08/2009
  34      =1  /*****************************************************************************/
  35      =1  #ifndef __CONFIG_H__
  36      =1  #define __CONFIG_H__
  37      =1  
  38      =1  //#define INTERNAL_MCU -- defined by Project Compiler session
  39      =1  
  40      =1  
  41      =1  //-----------------------------------------------------------------------------
  42      =1  //              Firmware Version
  43      =1  //-----------------------------------------------------------------------------
  44      =1  #define FWVER                   0x140                   // Rev 0.14
  45      =1  //-----------------------------------------------------------------------------
  46      =1  //              Compiler
  47      =1  //-----------------------------------------------------------------------------
  48      =1  #define KEILC                                           // Keil C 5.0
  49      =1  //-----------------------------------------------------------------------------
  50      =1  //              MPU Clock
  51      =1  //-----------------------------------------------------------------------------
  52      =1  #ifndef INTERNAL_MCU
  53      =1  //#define CLOCK_11M                                     // 11.0592MHz
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 2   

  54      =1  #define CLOCK_22M                                       // 22.1184MHz
  55      =1  #else                                                           // INTERNAL_MCU
           =1 #define CLOCK_27M                                       // 27MHz
           =1 #define REG_START_ADDRESS       0xc000          // register start 0xc000, for page0, 0xc100-page1 
           =1 #endif
  59      =1  //-----------------------------------------------------------------------------
  60      =1  //              TW88 Version
  61      =1  //-----------------------------------------------------------------------------
  62      =1  #define TW8816
  63      =1  //-----------------------------------------------------------------------------
  64      =1  //              Options for Backlight control
  65      =1  //-----------------------------------------------------------------------------
  66      =1  //#define       BACKLIGHT_CCFL
  67      =1  //#define       BACKLIGHT_LED
  68      =1  #define BACKLIGHT_PWM
  69      =1  
  70      =1  //-----------------------------------------------------------------------------
  71      =1  //              Panel Resolution
  72      =1  //-----------------------------------------------------------------------------
  73      =1  // ---- Select Default Panel
  74      =1  //
  75      =1  //#define UXGA                                          // 1600 x 1200
  76      =1  //#define SXGA                                          // 1280 x 1024
  77      =1  //#define XGA  // 1024 x 768
  78      =1  #ifdef XGA
           =1         #define LVDS                                    
           =1         #define PWIDTH  1024
           =1         #define PHEIGHT 768
           =1 #endif
  83      =1  //#define SVGA                                          //  800 x 600
  84      =1  //#define VGA                                           //  640 x 480
  85      =1  #ifdef VGA
           =1         #define PWIDTH  640
           =1         #define PHEIGHT 480
           =1         //#define       HITACHI_640_B_160               //--> 640 x 160
           =1         #define AND_640_480
           =1 #endif
  91      =1  //#define WXGA                                          // 1280 x 768 (15:9) // 1366 x 768 (16:9)
  92      =1  #ifdef WXGA
           =1     //#define WX_SHARP_LQ106K1LA
           =1         #define PWIDTH  1280
           =1         #define PHEIGHT 768
           =1 #endif
  97      =1  //#define WSVGA                                         // 1024 x 600   *** only video mode
  98      =1  #ifdef WSVGA
           =1         #define PWIDTH  1024
           =1         #define PHEIGHT 600
           =1         #define UNIDEN_1024_600
           =1 #endif
 103      =1  #define WVGA                                            //  800 x 480
 104      =1  #ifdef WVGA
 105      =1          #define PWIDTH  800
 106      =1          #define PHEIGHT 600//480
 107      =1          // If WVGA, you have to select panel.
 108      =1          //#define AU_10INCH
 109      =1          //#define WVGA_TPO
 110      =1          //#define SAMSUNG_10INCH
 111      =1          //#define SAMSUNG_TICONLESS_10INCH
 112      =1          //#define SHARP_TICONLESS_7INCH
 113      =1          #define AU_TICONLESS_7INCH
 114      =1          //#define INNOLUX_AT080TN03
 115      =1          //#define AU_TICONLESS_7INCH_CCFL
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 3   

 116      =1          //#define CMO                   // CHIMEI panel
 117      =1          //#define AU_TICONLESS_10INCH
 118      =1          //#define HITACHI_T01
 119      =1          //#define HITACHI_TX23D12
 120      =1          //#define HITACHI_TX18D24
 121      =1          //#define HITACHI_TX18D16
 122      =1          //#define TMD_LTA070A320F
 123      =1          //#define TMD_LTA080B
 124      =1  #endif  //WVGA
 125      =1  //#define HVGA                                          //  480 x 320
 126      =1  //#define QVGA                                          //  320 x 240   *** only video mode
 127      =1  #ifdef QVGA
           =1         #define PWIDTH  320
           =1         #define PHEIGHT 240
           =1         //#define HITACHI_TX09D73
           =1         //#define AU_DELTARGB
           =1         //#define SHARP_LQ050Q5DR01
           =1         //#define SHARP_LQ035
           =1         //#define       TMD
           =1 #endif
 136      =1  
 137      =1  //#define WQVGA                                         //  480 x 234   *** only video mode
 138      =1  #ifdef WQVGA
           =1         #define PWIDTH  480
           =1         #define PHEIGHT 240
           =1         // If WQVGA, you have to select panel   
           =1     #define ANALOG_7INCH
           =1         //#define       PWIDTH  400
           =1         //#define PHEIGHT       240
           =1         //#define SHARP_LQ043T3DX02             //  400 x 237
           =1         //#define LG_ANALOG
           =1         //#define TMD_ANALOG                            //TMD_LTA05B352A
           =1         //#define       T_51945GD                               // Optorex Panel
           =1 #endif  // WQVGA
 150      =1  
 151      =1  //if LVDS pannel disable TICONLESS
 152      =1  
 153      =1  //-----------------------------------------------------------------------------
 154      =1  //---- Add Support One more panel with DIPSW#1
 155      =1  //---- Ex. Add Analog AU 7" Panel with Default Panel for evalution
 156      =1  //#define ADD_ANALOGPANEL               // Added Analog panel(AU7") from default set panel(expect WQVGA) with DIP #1 sw
             -itch.(DIP#1=L:ANALOG, H:DEFAULT)
 157      =1                                                          // It can't support WQVGA and ADD_ANALOGPANEL same time!!
 158      =1          //#define ADD_ANALOG_7INCH
 159      =1          //#define ADD_TMD_LTA05B352A
 160      =1                                                                          
 161      =1  //---- Support Wide panel function
 162      =1  #if (defined WXGA) || (defined WSVGA) || (defined WVGA) || (defined WQVGA)
 163      =1  #define WIDE_SCREEN                             // Can support 4 display mode, i.e. Normal, Wide, Full, Zoom
 164      =1  #endif                                                          // Tested panasonic WVGA panel.
 165      =1  
 166      =1  //-----------------------------------------------------------------------------
 167      =1  //              Panel Vendor Specific
 168      =1  //-----------------------------------------------------------------------------
 169      =1  
 170      =1  //-----------------------------------------------------------------------------
 171      =1  //              TV Tuner
 172      =1  //-----------------------------------------------------------------------------
 173      =1  #define PHILIPS                         0
 174      =1  #define ALPS                            1               // ALPS, LG
 175      =1  #define TEMIC                           2
 176      =1  #define TVAVA                           3
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 4   

 177      =1  #define LGTUNER                         4
 178      =1  #define SAMSUNGMUTITUNER        5
 179      =1  
 180      =1  #define TVTunerDevice           4
 181      =1  //-----------------------------------------------------------------------------
 182      =1  //              IR Remote Controller Type
 183      =1  //-----------------------------------------------------------------------------
 184      =1  //#define REMO_RC5                                      // RC5 style
 185      =1  #define TECHWELL_REMOCON
 186      =1  //#define REMO_NEC                                      // NEC style
 187      =1  //#define PHILIPS_REMOCON // New remocon 
 188      =1  
 189      =1  
 190      =1  //-----------------------------------------------------------------------------
 191      =1  //              I2C Device Access Address Mapping
 192      =1  //-----------------------------------------------------------------------------
 193      =1  
 194      =1  #define EEPROMI2CAddress        0xa0    // EEPROM (24C16)
 195      =1  #define TW88I2CAddress          0x8a    // TW880x
 196      =1  
 197      =1  #define MSPI2CAddress           0x80    // MSP
 198      =1  
 199      =1  //-----------------------------------------------------------------------------
 200      =1  //              Options for Possible Inputs
 201      =1  //-----------------------------------------------------------------------------
 202      =1  #define         AWT
 203      =1  //#define       E_Wintek 
 204      =1  //#define SUPPORT_SVIDEO                     //andy Awt 20090914
 205      =1  //#define SUPPORT_COMPONENT                     // support component analog to decoder//andy Awt 20090914
 206      =1  
 207      =1  //#define SUPPORT_DTV                           // support DTV input through component( to ADC ).//andy Awt 20090914
 208      =1  #define SUPPORT_PC                              // support PC function
 209      =1  //#define SUPPORT_DVI                           // support DVI input
 210      =1  #define SUPPORT_SDCARD
 211      =1  
 212      =1  //#define SUPPORT_RS485
 213      =1  
 214      =1  //-----------------------------------------------------------------------------
 215      =1  //              Options for Possible Standards
 216      =1  //              Default:NTSC
 217      =1  //-----------------------------------------------------------------------------
 218      =1  #define SUPPORT_PAL                     
 219      =1  #define SUPPORT_SECAM
 220      =1  #define SUPPORT_NTSC4           
 221      =1  #define SUPPORT_PALM    
 222      =1  #define SUPPORT_PALN            
 223      =1  #define SUPPORT_PAL60           
 224      =1  
 225      =1  
 226      =1  //#define ID_CHECK_BY_FW                        // in Video mode, check input system ID by firmware
 227      =1  
 228      =1  //-----------------------------------------------------------------------------
 229      =1  //              Options for Debugging/Release
 230      =1  //-----------------------------------------------------------------------------
 231      =1  //#define SUPPORT_PATTERN                       // support LCD test pattern
 232      =1  
 233      =1  
 234      =1  #ifndef WQVGA
 235      =1          #ifndef QVGA
 236      =1  #define SUPPORT_OSDPOSITIONMOVE
 237      =1          #endif
 238      =1  #endif
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 5   

 239      =1  
 240      =1  #define SERIAL                                  // include serial communication routines
 241      =1  
 242      =1  //#define SUPPORT_DEBUG                         // Support to use Read & Write in debug OSD Window by remocon.
 243      =1  
 244      =1  //#define DEBUG                                         // include debug information
 245      =1  #ifdef DEBUG
           =1         //#define DEBUG_MAIN
           =1         //#define DEBUG_TIME
           =1         //#define DEBUG_KEYREMO
           =1         //#define DEBUG_TW88
           =1         //#define DEBUG_DECODER
           =1         //#define DEBUG_I2C
           =1         //#define DEBUG_EEP
           =1         //#define DEBUG_OSD
           =1         //#define DEBUG_AUDIO
           =1         //#define DEBUG_SETPANEL
           =1         //#define DEBUG_DTV
           =1         #define DEBUG_PC
           =1         //#define DEBUG_PC_MEAS
           =1         #define DEBUG_PC_COLOR
           =1         //#define DEBUG_COMPONENT
           =1         //#define DEBUG_BANK
           =1         //#define DEBUG_PAUSE
           =1         //#define DEBUG_MCU
           =1 #endif
 265      =1  
 266      =1  #define AUTOCALC_PC                                     // in PC mode, Enable Auto Calcuration
 267      =1  //#define SUPPORT_USERCOLORFROMTXT      // Use color setting of text file in Color mode=USER MODE which is as B
             -rightness(Reg10), Contast(Reg11),
 268      =1                                                                          //    Sat_U(Reg13),Sat_V(Reg14),Sharpness(Reg12,Reg78)                                                                  
 269      =1  //#define SUPPORT_GAMMA
 270      =1  
 271      =1  //#define CHIP_MANUAL_TEST                      // DIPSW#1
 272      =1  
 273      =1  #ifndef INTERNAL_MCU
 274      =1  //#define NO_INITIALIZE                         // After Power switch turn on with DIP SW4 Enable(Low), or pressed MENU button 
             -for internal MCU
 275      =1                                      //     micom works to access only I2C bus by serial command.
 276      =1  #endif
 277      =1  
 278      =1  //#define SUPPORT_KRS_OSDDEMO           // For KRS Company Demo 
 279      =1  //#define SUPPORT_LINE_OSDDEMO
 280      =1  
 281      =1  //-----------------------------------------------------------------------------
 282      =1  //              Special Features
 283      =1  //-----------------------------------------------------------------------------
 284      =1  
 285      =1  #ifndef INTERNAL_MCU
 286      =1  //#define       SUPPORT_DELTA_RGB
 287      =1  #endif
 288      =1  #define SUPPORT_SELECTKEY                       // choose the keymap of using select key or left,right key.
 289      =1  //-----------------------------------------------------------------------------
 290      =1  #endif  //__CONFIG_H__
   2          
   3          #if defined( SUPPORT_PC ) || defined( SUPPORT_DTV )
   4          
   5          #include "typedefs.h"
   1      =1  #ifndef __TYPEDEFS__
   2      =1  #define __TYPEDEFS__
   3      =1  
   4      =1  
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 6   

   5      =1  #define DATA            data
   6      =1  #define PDATA           pdata
   7      =1  #define IDATA           data
   8      =1  #define CODE            code
   9      =1  #define CODE_P
  10      =1  #define PDATA_P
  11      =1  #define IDATA_P
  12      =1  #define DATA_P
  13      =1  
  14      =1  #define INTERRUPT( num, name ) name() interrupt num
  15      =1  
  16      =1  #define _between(x, a, b)       (a<=x && x<=b)
  17      =1  #define _swap(a, b)                     { a^=b; b^=a; a^=b; }
  18      =1  
  19      =1  typedef unsigned char   Register;
  20      =1  typedef unsigned char   BYTE;
  21      =1  typedef unsigned short  WORD;
  22      =1  typedef unsigned long   DWORD;
  23      =1  
  24      =1  #define TRUE    1
  25      =1  #define FALSE   0
  26      =1  
  27      =1  //VInputStdDetectMode
  28      =1  #define AUTO    0
  29      =1  
  30      =1  //VInputStd
  31      =1  #define NTSC    1                       
  32      =1  #define PAL             2
  33      =1  #define SECAM   3
  34      =1  #define NTSC4   4
  35      =1  #define PALM    5
  36      =1  #define PALN    6
  37      =1  #define PAL60   7
  38      =1  
  39      =1  #define MAXINPUTSTD     PAL60+1 // 
  40      =1  
  41      =1  #define UNKNOWN 0xfe
  42      =1  #define NOINPUT 0       //0xff
  43      =1  
  44      =1  
  45      =1  
  46      =1  
  47      =1  #define NIL                     0xff
  48      =1  
  49      =1  enum SourceModeTypeEnum
  50      =1  {       
  51      =1          AVMode,            // 0
  52      =1          VGAMode,       // 1
  53      =1          CAM_D,         // 2
  54      =1          CAM_A,         // 3
  55      =1          CAM_B,         // 4
  56      =1          CAM_C,         // 5
  57      =1          CAM_R,         // 6
  58      =1          CAM_AB,        // 7
  59      =1          CAM_CR,        // 8
  60      =1          CAM_AR,        // 9
  61      =1          CAM_RB,        // 10
  62      =1          CAM_AC,        // 11
  63      =1          CAM_CB,        // 12
  64      =1          CAM_RAB_T,     // 13
  65      =1          CAM_RAB_H,     // 14
  66      =1  
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 7   

  67      =1          CAM_QUAD,      // 15
  68      =1          CAM_ABR_T3,    // 16
  69      =1          CAM_ABR_T4,    // 17
  70      =1          SEQ,           // 18
  71      =1          CAM_BA,                 //19
  72      =1          
  73      =1          CAM_BC,
  74      =1          CAM_BR,
  75      =1          CAM_CA,
  76      =1          CAM_ABC,
  77      =1          CAM_ABR,
  78      =1          CAM_ACR,
  79      =1          CAM_BAC,
  80      =1          CAM_BAR,
  81      =1          CAM_BCR,
  82      =1          CAM_CAB,
  83      =1          CAM_CAR,
  84      =1          CAM_CBR,        
  85      =1          CAM_NUM
  86      =1  };
  87      =1  
  88      =1  typedef unsigned char SourceModeType;
  89      =1  
  90      =1  #endif  /* __TYPEDEFS__ */
   6          
   7          #include "main.h"
   1      =1  #ifndef __MAIN__
   2      =1  #define __MAIN__
   3      =1  
   4      =1  #define ON                                      1
   5      =1  #define OFF                                     0
   6      =1  //#define Hs_debug
   7      =1  //#define       DVR
   8      =1  
   9      =1  //================= DIP SW Definition =========================================
  10      =1  ///#define PIXEL_SINGLE         P0_0
  11      =1  #define DIP_PANEL_SWITCH        P0_0    // Samsung(0) // Sharp-Noticon(1)
  12      =1  #define DIP_AUTO_DETECT         P0_1
  13      =1  #define DIP_EDGE_ENHANCE        P0_2
  14      =1  #define DIP_BW_STRETCH          P0_3
  15      =1  
  16      =1  #define Panel_Enable()          P4=P4|0x08 //andy 980908
  17      =1  #define Panel_Disable()                 P4=P4&0xf7
  18      =1  
  19      =1  #define SetBacklight()      P4=P4|0x04
  20      =1  #define clrBacklight()      P4=P4&0xfb
  21      =1  
  22      =1  
  23      =1  //InputSelection
  24      =1  struct struct_IdName {
  25      =1          BYTE    Id;
  26      =1          BYTE    Name[16];
  27      =1  };
  28      =1  
  29      =1  #define CH_TW2835              1
  30      =1  #define CH_CAMD                2
  31      =1  #define CH_AV                  3
  32      =1  #define PC                                         7
  33      =1  #define ChineseDefaultMenu   8
  34      =1  
  35      =1  #define SVIDEO                          2
  36      =1  #define COMPONENT                       3
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 8   

  37      =1  //#define ANALOGDTV                     4
  38      =1  #define DTV                                     4
  39      =1  #define TV                                      5
  40      =1  #define SCART                           6
  41      =1  
  42      =1  #define DIGITALVGA                      8
  43      =1  
  44      =1  #define AIRTV                           0 //9
  45      =1  #define CABLETV                         1 //0xa
  46      =1  
  47      =1  
  48      =1  #define TVTUNER                         0xd             //10
  49      =1  #define MUTE                            1       
  50      =1  #define MENU                            2       
  51      =1  #define TVVOL                           4       
  52      =1  #define CC                                      8       
  53      =1  #define INPUTINFO                       0x10
  54      =1  #define PCINFO                          0x20
  55      =1  #define GAUGEINFO           0x40
  56      =1  //#define RATINGINFO                    0x40
  57      =1  #define TVCHN                           0x80
  58      =1  //#define MUTE                          0x40
  59      =1  
  60      =1  #define YPBPR_480i                      0
  61      =1  #define YPBPR_576i                      1
  62      =1  #define YPBPR_480p                      2
  63      =1  #define YPBPR_576p                      3
  64      =1  #define YPBPR_1080i                     4
  65      =1  #define YPBPR_720p                      5
  66      =1  #define YPBPR_720p50            6
  67      =1  
  68      =1  
  69      =1  //--------------------------- P0 Define -----------------------------
  70      =1  #define SEL_MIX                 P0_6    // 
  71      =1  //--------------------------- P1 Define -----------------------------
  72      =1  #define SEL_DVI                 P3_5    //LJY062001             
  73      =1  
  74      =1  #define TW88HWReset                     P3_4    //LJY001010 //LJY000721
  75      =1  #define PowerUp             P1_4
  76      =1  //======================= CDS Control ================================= 
  77      =1  #define CDS_CTRL           P1_5
  78      =1  extern BYTE     SelectModeType;
  79      =1  extern BYTE InputSelection;
  80      =1  extern BYTE SEQTime;
  81      =1  extern BYTE     Priority;
  82      =1  extern BYTE AutoDayNight;
  83      =1  extern BYTE PowerFlag;
  84      =1  
  85      =1  BYTE keyIn(void);
  86      =1  void TimerForRemocon(void);
  87      =1  void TimerForTick(void);
  88      =1  void DisableRemoconInt(void);
  89      =1  BYTE SetSupport_remocon(BYTE newd);
  90      =1  
  91      =1  void delay(BYTE cnt);
  92      =1  
  93      =1  BYTE RS_ready(void);
  94      =1  BYTE RS_rx(void);
  95      =1  void RS_tx(BYTE tx_buf);
  96      =1  
  97      =1  BYTE RS2_rx(void);
  98      =1  void RS2_tx(BYTE tx_buf);
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 9   

  99      =1  
 100      =1  void NewLine(void);
 101      =1  void PutsP(PDATA_P BYTE *ptr);
 102      =1  #ifdef Hs_debug
           =1 void MonWriteI2C(BYTE addr, BYTE index, BYTE val);
           =1 BYTE MonReadI2C(BYTE addr, BYTE index);
           =1 #endif
 106      =1  BYTE Asc1Bin(BYTE asc);
 107      =1  BYTE Asc2Bin(PDATA_P BYTE *s);
 108      =1  
 109      =1  void I2CDeviceInitialize( CODE_P BYTE *RegSet);
 110      =1  
 111      =1  //void RestartSystemClock(WORD clock_hm);
 112      =1  WORD GetTime_ms(void);
 113      =1  BYTE GetTime_H(void);
 114      =1  BYTE GetTime_M(void);
 115      =1  void ChangeTime_H( char add );
 116      =1  void ChangeTime_M( char add );
 117      =1  //WORD GetWakeupTime(void);
 118      =1  //void SetWakeupTime(WORD wtime);
 119      =1  
 120      =1  
 121      =1  //WORD GetOffTime(void);
 122      =1  //void SetOffTime(WORD wtime);
 123      =1  //BYTE GetSleepTimer(void);
 124      =1  //void SetSleepTimer(BYTE stime);
 125      =1  WORD DiffTime_ms( WORD stime, WORD etime );
 126      =1  //void SetLastBlockedTime(void);
 127      =1  void SetLastCCTime(void);                               //ljy010904...CC_FIX_CLEAR_ON_TIME
 128      =1  
 129      =1  void SetOSDLastKeyInTime(void);
 130      =1  WORD GetOSDLastKeyInTime(void);
 131      =1  WORD GetIVF(void);
 132      =1  DWORD GetIHF(void);
 133      =1  BYTE ReadVInputSTD(void);
 134      =1  void SetVInputStd(BYTE newd);
 135      =1  BYTE GetVInputStd(void);
 136      =1  BYTE GetInputSelection(void);
 137      =1  #ifdef ADD_ANALOGPANEL
           =1 BYTE IsAnalogOn(void);
           =1 #endif
 140      =1  void InitVideoData(BYTE src);
 141      =1  void ChangeVInputStdDetectMode(BYTE val);
 142      =1  BYTE GetVInputStdInx(void);
 143      =1  
 144      =1  void MonWriteI2Cn_(BYTE addr, BYTE *val, BYTE cnt) ;
 145      =1  
 146      =1  ///void Usage(void);
 147      =1  #ifdef Hs_debug
           =1         void Prompt(void);
           =1 #endif
 150      =1  void DebugKeyIn(BYTE ikey);
 151      =1  void DVIPowerDown(bit flag);
 152      =1  void PowerDown_XTAL(bit flag);
 153      =1  
 154      =1  void ChangeInput(BYTE newsel);
 155      =1  
 156      =1  
 157      =1  void WaitPowerOn(void);
 158      =1  void PowerOff(void);
 159      =1  BYTE GetNextInputSelection(void);
 160      =1  
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 10  

 161      =1  BYTE WantToStopTVScan(void);
 162      =1  
 163      =1  //BYTE IsTW8801(void);
 164      =1  //BYTE IsTW8803(void);
 165      =1  //BYTE ConvertVideoVSAT(BYTE reg);
 166      =1  
 167      =1  BYTE IsNoInput(void);
 168      =1  void LoadEEPROM (void);
 169      =1  void Hs_InitVars(void);
 170      =1  void AdjustAutoDayNight(BYTE val);
 171      =1  void ACCPowerControl(void);
 172      =1  struct RegisterInfo
 173      =1  {
 174      =1     int  Min;
 175      =1     int  Max;
 176      =1     int  Default;
 177      =1  };
 178      =1  struct LongRegisterInfo
 179      =1  {
 180      =1     WORD Min;
 181      =1     WORD Max;
 182      =1     WORD Default;
 183      =1  };
 184      =1  
 185      =1  #endif  // __MAIN__
   8          #include "tw88.h"
   1      =1  #ifndef __TW88__
   2      =1  #define __TW88__
   3      =1  
   4      =1  #include "main.h"
   1      =2  #ifndef __MAIN__
           =2 #define __MAIN__
           =2 
           =2 #define ON                                      1
           =2 #define OFF                                     0
           =2 //#define Hs_debug
           =2 //#define       DVR
           =2 
           =2 //================= DIP SW Definition =========================================
           =2 ///#define PIXEL_SINGLE         P0_0
           =2 #define DIP_PANEL_SWITCH        P0_0    // Samsung(0) // Sharp-Noticon(1)
           =2 #define DIP_AUTO_DETECT         P0_1
           =2 #define DIP_EDGE_ENHANCE        P0_2
           =2 #define DIP_BW_STRETCH          P0_3
           =2 
           =2 #define Panel_Enable()          P4=P4|0x08 //andy 980908
           =2 #define Panel_Disable()                 P4=P4&0xf7
           =2 
           =2 #define SetBacklight()      P4=P4|0x04
           =2 #define clrBacklight()      P4=P4&0xfb
           =2 
           =2 
           =2 //InputSelection
           =2 struct struct_IdName {
           =2         BYTE    Id;
           =2         BYTE    Name[16];
           =2 };
           =2 
           =2 #define CH_TW2835              1
           =2 #define CH_CAMD                2
           =2 #define CH_AV                  3
           =2 #define PC                                         7
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 11  

           =2 #define ChineseDefaultMenu   8
           =2 
           =2 #define SVIDEO                          2
           =2 #define COMPONENT                       3
           =2 //#define ANALOGDTV                     4
           =2 #define DTV                                     4
           =2 #define TV                                      5
           =2 #define SCART                           6
           =2 
           =2 #define DIGITALVGA                      8
           =2 
           =2 #define AIRTV                           0 //9
           =2 #define CABLETV                         1 //0xa
           =2 
           =2 
           =2 #define TVTUNER                         0xd             //10
           =2 #define MUTE                            1       
           =2 #define MENU                            2       
           =2 #define TVVOL                           4       
           =2 #define CC                                      8       
           =2 #define INPUTINFO                       0x10
           =2 #define PCINFO                          0x20
           =2 #define GAUGEINFO           0x40
           =2 //#define RATINGINFO                    0x40
           =2 #define TVCHN                           0x80
           =2 //#define MUTE                          0x40
           =2 
           =2 #define YPBPR_480i                      0
           =2 #define YPBPR_576i                      1
           =2 #define YPBPR_480p                      2
           =2 #define YPBPR_576p                      3
           =2 #define YPBPR_1080i                     4
           =2 #define YPBPR_720p                      5
           =2 #define YPBPR_720p50            6
           =2 
           =2 
           =2 //--------------------------- P0 Define -----------------------------
           =2 #define SEL_MIX                 P0_6    // 
           =2 //--------------------------- P1 Define -----------------------------
           =2 #define SEL_DVI                 P3_5    //LJY062001             
           =2 
           =2 #define TW88HWReset                     P3_4    //LJY001010 //LJY000721
           =2 #define PowerUp             P1_4
           =2 //======================= CDS Control ================================= 
           =2 #define CDS_CTRL           P1_5
           =2 extern BYTE     SelectModeType;
           =2 extern BYTE InputSelection;
           =2 extern BYTE SEQTime;
           =2 extern BYTE     Priority;
           =2 extern BYTE AutoDayNight;
           =2 extern BYTE PowerFlag;
           =2 
           =2 BYTE keyIn(void);
           =2 void TimerForRemocon(void);
           =2 void TimerForTick(void);
           =2 void DisableRemoconInt(void);
           =2 BYTE SetSupport_remocon(BYTE newd);
           =2 
           =2 void delay(BYTE cnt);
           =2 
           =2 BYTE RS_ready(void);
           =2 BYTE RS_rx(void);
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 12  

           =2 void RS_tx(BYTE tx_buf);
           =2 
           =2 BYTE RS2_rx(void);
           =2 void RS2_tx(BYTE tx_buf);
           =2 
           =2 void NewLine(void);
           =2 void PutsP(PDATA_P BYTE *ptr);
           =2 #ifdef Hs_debug
           =2 void MonWriteI2C(BYTE addr, BYTE index, BYTE val);
           =2 BYTE MonReadI2C(BYTE addr, BYTE index);
           =2 #endif
           =2 BYTE Asc1Bin(BYTE asc);
           =2 BYTE Asc2Bin(PDATA_P BYTE *s);
           =2 
           =2 void I2CDeviceInitialize( CODE_P BYTE *RegSet);
           =2 
           =2 //void RestartSystemClock(WORD clock_hm);
           =2 WORD GetTime_ms(void);
           =2 BYTE GetTime_H(void);
           =2 BYTE GetTime_M(void);
           =2 void ChangeTime_H( char add );
           =2 void ChangeTime_M( char add );
           =2 //WORD GetWakeupTime(void);
           =2 //void SetWakeupTime(WORD wtime);
           =2 
           =2 
           =2 //WORD GetOffTime(void);
           =2 //void SetOffTime(WORD wtime);
           =2 //BYTE GetSleepTimer(void);
           =2 //void SetSleepTimer(BYTE stime);
           =2 WORD DiffTime_ms( WORD stime, WORD etime );
           =2 //void SetLastBlockedTime(void);
           =2 void SetLastCCTime(void);                               //ljy010904...CC_FIX_CLEAR_ON_TIME
           =2 
           =2 void SetOSDLastKeyInTime(void);
           =2 WORD GetOSDLastKeyInTime(void);
           =2 WORD GetIVF(void);
           =2 DWORD GetIHF(void);
           =2 BYTE ReadVInputSTD(void);
           =2 void SetVInputStd(BYTE newd);
           =2 BYTE GetVInputStd(void);
           =2 BYTE GetInputSelection(void);
           =2 #ifdef ADD_ANALOGPANEL
           =2 BYTE IsAnalogOn(void);
           =2 #endif
           =2 void InitVideoData(BYTE src);
           =2 void ChangeVInputStdDetectMode(BYTE val);
           =2 BYTE GetVInputStdInx(void);
           =2 
           =2 void MonWriteI2Cn_(BYTE addr, BYTE *val, BYTE cnt) ;
           =2 
           =2 ///void Usage(void);
           =2 #ifdef Hs_debug
           =2         void Prompt(void);
           =2 #endif
           =2 void DebugKeyIn(BYTE ikey);
           =2 void DVIPowerDown(bit flag);
           =2 void PowerDown_XTAL(bit flag);
           =2 
           =2 void ChangeInput(BYTE newsel);
           =2 
           =2 
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 13  

           =2 void WaitPowerOn(void);
           =2 void PowerOff(void);
           =2 BYTE GetNextInputSelection(void);
           =2 
           =2 BYTE WantToStopTVScan(void);
           =2 
           =2 //BYTE IsTW8801(void);
           =2 //BYTE IsTW8803(void);
           =2 //BYTE ConvertVideoVSAT(BYTE reg);
           =2 
           =2 BYTE IsNoInput(void);
           =2 void LoadEEPROM (void);
           =2 void Hs_InitVars(void);
           =2 void AdjustAutoDayNight(BYTE val);
           =2 void ACCPowerControl(void);
           =2 struct RegisterInfo
           =2 {
           =2    int  Min;
           =2    int  Max;
           =2    int  Default;
           =2 };
           =2 struct LongRegisterInfo
           =2 {
           =2    WORD Min;
           =2    WORD Max;
           =2    WORD Default;
           =2 };
           =2 
           =2 #endif  // __MAIN__
   5      =1  
   6      =1  //Value for register 0x44
   7      =1  //#define DECODER_YCbCr         0x08            //xxxx bbxx
   8      =1  //#define RGB_RGB                               0x0C
   9      =1  
  10      =1  #define TW88_FPLL0                      0xf9
  11      =1  #define TW88_FPLL1                      0xfa
  12      =1  #define TW88_FPLL2                      0xfb
  13      =1  #define TW88_FSS                        0xfc
  14      =1  #define TW88_FSS_PD                     0xfd
  15      =1  #define TW88_PLL_DIV            0xfe
  16      =1  
  17      =1  //#define TW88_XSCALE                   0x5d
  18      =1  //#define TW88_YSCALE                   0x5e
  19      =1  
  20      =1  #define TW88_XUSCALELO          0x60
  21      =1  #define TW88_XDSCALELO          0x61
  22      =1  #define TW88_YUSCALELO          0x62
  23      =1  #define TW88_XYSCALEHI          0x63
  24      =1  #define TW88_XUSCALEFINE        0x69
  25      =1  #define TW88_YUSCALEFINE        0x6a
  26      =1  
  27      =1  //Power Mgt
  28      =1  #define POWER_OFF                       0
  29      =1  #define POWER_STANDBY           1
  30      =1  #define POWER_SUSPEND           2
  31      =1  #define POWER_ON                        3
  32      =1  
  33      =1  //void TWChipsDetect(void);
  34      =1  void SetAutoDetectStd(void);
  35      =1  void ClearAutoDetectStd(BYTE);
  36      =1  void I2CDeviceInitialize( CODE_P BYTE *RegSet);
  37      =1  
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 14  

  38      =1  
  39      =1  //0x63.. Register Group
  40      =1  #define GROUP_YCbCr                     0x40
  41      =1  #define GROUP_RGB                       0
  42      =1  #define SelectPanelAttrRegGroup(A)                              WriteTW88(0x70, (ReadTW88(0x70) & 0xbf) | A)
  43      =1  
  44      =1  //#if defined TW8801 || defined TW8803
  45      =1  #define FB_MAIN         2
  46      =1  #define FB_NORMAL       1
  47      =1  #define FB_RGB          0
  48      =1  //void SetFBmode( BYTE mode );
  49      =1  //#endif // TW8801
  50      =1  
  51      =1  
  52      =1  //=============================================================================
  53      =1  //                                   LCD Functions   
  54      =1  //=============================================================================
  55      =1  BYTE GetLCDPowerState(void);
  56      =1  void SetLCDPowerState(BYTE dat);
  57      =1  
  58      =1  BYTE IsFreeRun(void);
  59      =1  void PanelFreeRun(BYTE on);
  60      =1  void PanelBlack(BYTE on);
  61      =1  
  62      =1  void PanelMute(BYTE on);
  63      =1  
  64      =1  void LCDPowerON(BYTE mute); 
  65      =1  void LCDPowerOFF(void);
  66      =1  #ifdef Hs_debug
           =1 void LCDPower(void);
           =1 #endif
  69      =1  void DPMSmodeOFF(void);
  70      =1  void DPMSmodeON(void);
  71      =1  //=============================================================================
  72      =1  //                              Get PC Parameter Functions   
  73      =1  //=============================================================================
  74      =1  void GetInitPanelAttribute1(void);
  75      =1  //void GetInitPanelAttribute2(void);
  76      =1  void DefaultPanelAttributeForVideo(void);
  77      =1  void SetPVR(WORD pvr);
  78      =1  void SetPHR(WORD phr);
  79      =1  WORD GetPVR(void);
  80      =1  WORD GetPHR(void);
  81      =1  WORD GetHPN(void);
  82      =1  WORD GetVPN(void);
  83      =1  
  84      =1  //WORD GetVactive(void);
  85      =1  
  86      =1  WORD GetHstart(void);
  87      =1  WORD GetHend(void);
  88      =1  WORD GetVstart(void);
  89      =1  WORD GetVend(void);
  90      =1  void TuneLineBuffer(BYTE field);
  91      =1  void TuneLineBuffer4Video(BYTE field);
  92      =1  
  93      =1  #if defined (SUPPORT_DTV)
           =1 void SetCoarstForDTV(BYTE en);
           =1 #endif
  96      =1  
  97      =1  WORD GetHactiveStart(void);
  98      =1  WORD GetHactiveEnd(void);
  99      =1  WORD GetVactiveStart(void);
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 15  

 100      =1  //WORD GetVactiveLen(void);
 101      =1  BYTE GetVBackPorch(void);
 102      =1  void SetVBackPorch(BYTE val);
 103      =1  WORD GetPHP(void);
 104      =1  void SetPHP(WORD php);
 105      =1  void SetPVP(WORD period);
 106      =1  WORD GetPVP(void);
 107      =1  //void SetPanelRelatedRegisters(void);
 108      =1  //BYTE ChangedHPN(void);
 109      =1  //WORD GetVSUD(void);
 110      =1  
 111      =1  void SetDefaultPLL(void);
 112      =1  //void SetDefaultFPHSperiod(void);
 113      =1  //BYTE CalcPHP(DWORD ppf, BYTE tol);
 114      =1  //void ChangeFPHSperiod4DecoderInput(WORD vsud, BYTE tol);
 115      =1  
 116      =1  //-------------------------------------------------------------------
 117      =1  //                  Set Active Region Functions
 118      =1  //-------------------------------------------------------------------
 119      =1  void SetHactiveStart(WORD hstart);
 120      =1  void SetHactiveEnd(WORD hend);
 121      =1  void SetVactiveStart(WORD vstart);
 122      =1  //void SetVactiveLen(WORD van, WORD vstart);
 123      =1  void SetVactiveLen(WORD van);
 124      =1  //=============================================================================
 125      =1  //                         Set Measurement Window Functions   
 126      =1  //=============================================================================
 127      =1  void SetMeasureWindowH(WORD start, WORD stop);
 128      =1  void SetMeasureWindowV(WORD start, WORD stop);
 129      =1  //=============================================================================
 130      =1  //                              Video Input Functions   
 131      =1  //=============================================================================
 132      =1  BYTE IsVideoInput(void);
 133      =1  BYTE DetectDecoderInput(void);
 134      =1  //=============================================================================
 135      =1  //
 136      =1  //=============================================================================
 137      =1  void AutoPHPCalEnable(void);
 138      =1  void AutoPHPCalDisable(void);
 139      =1  
 140      =1  void MakeStartInt(void);
 141      =1  void AVGAInput(void);
 142      =1  void DVIInput(void);
 143      =1  //void DVGAInput(void);
 144      =1  void DisableDVGA(void);
 145      =1  
 146      =1  void COMPOSITE1Input(void);
 147      =1  void COMPOSITE2Input(void);
 148      =1  void COMPOSITE3Input(void);
 149      =1  
 150      =1  void SVIDEOInput(void);
 151      =1  void COMPONENTInput(void);
 152      =1  void ANALOGDTVInput(void);
 153      =1  void DTVInput(void);
 154      =1  void TVInput(void);
 155      =1  void SCARTInput(void);
 156      =1  
 157      =1  //=============================================================================
 158      =1  //                          Measurement Functions
 159      =1  //=============================================================================
 160      =1  ///void SetPanelBitOrder(BYTE swap);
 161      =1  //void SetPanelSingleDouble(BYTE single);
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 16  

 162      =1  
 163      =1  BYTE MeasureAndWait(BYTE flag);
 164      =1  
 165      =1  //WORD GetHCounter1(BYTE field);
 166      =1  //void SetHInitial(BYTE field, WORD counter);
 167      =1  //=============================================================================
 168      =1  //                          Invert Polarity Functions
 169      =1  //=============================================================================
 170      =1  void InvertHSYNCPolarity(void);
 171      =1  void InvertVSYNCPolarity(void);
 172      =1  //=============================================================================
 173      =1  //            Interrupt / SW Reset Control Functions
 174      =1  //=============================================================================
 175      =1  void SetInt(void);
 176      =1  //void ClearInt(void);
 177      =1  void SetEnDet(void);
 178      =1  void ClearEnDet(void);
 179      =1  void SWReset(void);
 180      =1  //void ClearSYNCLossStatus(void);
 181      =1  //void ClearSYNCChangeStatus(void);
 182      =1  //=============================================================================
 183      =1  //
 184      =1  //=============================================================================
 185      =1  BYTE IsBypassmode(void);
 186      =1  //BYTE IsInteraced(void);
 187      =1  void Clear_bypass(void);
 188      =1  void MaskOnSYNCInt(void);
 189      =1  void MaskOffSYNCInt(void);
 190      =1  //=============================================================================
 191      =1  //                                    ZoomControl
 192      =1  //=============================================================================
 193      =1  void BypassZoom(void);
 194      =1  
 195      =1  void XscaleU(DWORD scale);
 196      =1  void XscaleD(DWORD scale);
 197      =1  void XScale2(DWORD scale);
 198      =1  void YScale2(DWORD scale);
 199      =1  WORD GetYScale(void);
 200      =1  //=============================================================================
 201      =1  //
 202      =1  //=============================================================================
 203      =1  WORD GetHSYNCPulse(void);
 204      =1  WORD GetVSYNCPulse(void);
 205      =1  //#if defined TW8801 || defined TW8803
 206      =1  WORD GetRelativePosition(void);
 207      =1  //#endif
 208      =1  //=============================================================================
 209      =1  //                                                              MISC2 for decoder
 210      =1  //=============================================================================
 211      =1  #define BLUE_DECODER            2
 212      =1  #define BLACK_DECODER           0
 213      =1  
 214      =1  BYTE ForceDecoderOutput(BYTE color);
 215      =1  BYTE ClearForcedDecoderOutput(void);
 216      =1  //=============================================================================
 217      =1  //                                                              CC and EDS
 218      =1  //=============================================================================
 219      =1  BYTE GetCCStatus(void);
 220      =1  void DisableCC(void);
 221      =1  void EnableCC(void);
 222      =1  BYTE GetCCData(void);
 223      =1  BYTE IsCCEnabled(void);
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 17  

 224      =1  void EnableEDS(void);
 225      =1  void DisableEDS(void);
 226      =1  void RecoverCCOverflow(void);
 227      =1  
 228      =1  #define CCFIFOHalfFull()                        (ReadDecoder(CSTATUS) & 0x04)
 229      =1  //=============================================================================
 230      =1  //                                                              Internal PLL
 231      =1  //=============================================================================
 232      =1  BYTE GetPOST(void);
 233      =1  void SetPLLS(BYTE plls);
 234      =1  BYTE GetREFDM(void);
 235      =1  void SetREFDM(BYTE refdm);
 236      =1  DWORD GetFBDN(void);
 237      =1  void SetFBDN(WORD fbdn, BYTE vcsel);
 238      =1  DWORD GetPPF(void);
 239      =1  void ChangeInternPLL(DWORD _PPF);
 240      =1  
 241      =1  //=============================================================================
 242      =1  //                                                              Macros for attribute
 243      =1  //=============================================================================
 244      =1  //#define       GetOSDTransReg()                                                ReadTW88(0xAE)
 245      =1  //#define SetOSDTransReg(AlphaV)                                        WriteTW88(0xAE, (BYTE)AlphaV )
 246      =1  
 247      =1  #define GetPanelContrastReg(gccolor)                    ReadTW88(0x71+gccolor)
 248      =1  #define SetPanelContrastReg(sccolor, cval)              WriteTW88(0x71+sccolor,cval)
 249      =1  
 250      =1  #define GetPanelBrightnessReg(gbcolor)                  ReadTW88(0x74+gbcolor);
 251      =1  #define SetPanelBrightnessReg(sbcolor, bval)    WriteTW88(0x74+sbcolor,bval);
 252      =1  
 253      =1  #define SetDTVBrightnessReg(bval)                               WriteTW88(0x74,bval);
 254      =1  
 255      =1  #define GetPanelSaturationReg(gbcolor)                  ReadTW88(0x72+gbcolor);
 256      =1  #define SetPanelSaturationReg(sbcolor, bval)    WriteTW88(0x72+sbcolor,bval);
 257      =1  
 258      =1  #define SetPanelSharpnessReg(bval)                              WriteTW88(0x78,((bval&0x07)|0x38) );
 259      =1  
 260      =1  #define SetPanelHueReg(bval)                                    WriteTW88(0x70, (ReadTW88(0x70) & 0xc0 | (bval)) );
 261      =1  
 262      =1  #define GetVideoContrastReg()                                   ReadDecoder(CONTRAST)
 263      =1  #define SetVideoContrastReg(vcval)                              WriteDecoder(CONTRAST, vcval)
 264      =1  
 265      =1  #define GetVideoBrightnessReg()                                 ReadDecoder(BRIGHT)
 266      =1  #define SetVideoBrightnessReg(vbval)                    WriteDecoder(BRIGHT, vbval )
 267      =1  
 268      =1  #define GetVideoSaturationReg(gvstype)                  ReadDecoder(SAT_U+gvstype)
 269      =1  #define SetVideoSaturationReg(svstype, vsval)   WriteDecoder(SAT_U+svstype,     vsval)
 270      =1  
 271      =1  #define GetVideoHueReg()                                                ReadDecoder(HUE)
 272      =1  #define SetVideoHueReg(vhval)                                   WriteDecoder(HUE,       vhval )
 273      =1  
 274      =1  #define GetVideoSharpnessRegDef                                 (ReadDecoder(SHARPNESS) & 0x0f) 
 275      =1  
 276      =1  #define GetVideoSharpnessReg()                                  GetVideoSharpnessRegDef
 277      =1  //#define       SetVideoSharpnessReg(vshval)                    WriteDecoder(SHARPNESS, vshval )
 278      =1  #define SetVideoSharpnessReg(vshval)                    WriteDecoder(SHARPNESS, ((ReadDecoder(SHARPNESS) & 0xf0) | (vshval 
             -& 0x0f) ) );
 279      =1  
 280      =1  #ifdef TW9908
           =1 #define SetVideoVPeakingReg(vshval)
           =1 #else
 283      =1  #define SetVideoVPeakingReg(vshval)                             WriteDecoder(V_PEAKING, ((ReadDecoder(V_PEAKING) & 0xf8) | (vshval 
             -& 0x07) ) );
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 18  

 284      =1  #endif
 285      =1  
 286      =1  #define SetVideoHfilterReg(val)                                 WriteDecoder(HFILTER, ((ReadDecoder(HFILTER) & 0xf8) | (val & 0x07) )|
             -0x08 );
 287      =1  //----------------------------------------------------------------------------------
 288      =1  //color type
 289      =1  #define RED             0
 290      =1  #define GREEN   1
 291      =1  #define BLUE    2
 292      =1  #define WHITE   3
 293      =1  //saturation type
 294      =1  #define U_SAT   0
 295      =1  #define V_SAT   1
 296      =1  
 297      =1  //Alpha Blending Level
 298      =1  #define _0              0
 299      =1  #define _25             0x12
 300      =1  #define _37_5   0x13
 301      =1  #define _50             0x14
 302      =1  #define _100    0x18
 303      =1  
 304      =1  
 305      =1  /*
 306      =1  BYTE Mapping( int fromValue, struct RegisterInfo fromRange,
 307      =1                                   int * toValue, struct RegisterInfo toRange );
 308      =1  */
 309      =1  BYTE Mapping1( int fromValue, CODE_P struct RegisterInfo *fromRange,
 310      =1                                   int * toValue, CODE_P struct RegisterInfo *toRange );
 311      =1  #ifdef KEILC
 312      =1  #define Mapping2( A, B, C, D )                  Mapping1( A, B, C, D )
 313      =1  #define Mapping3( A, B, C, D )                  Mapping1( A, B, C, D )
 314      =1  #else
           =1 BYTE Mapping2( int fromValue, IDATA_P struct RegisterInfo *fromRange,
           =1                                  int * toValue, CODE_P struct RegisterInfo *toRange );
           =1 BYTE Mapping3( int fromValue, CODE_P struct RegisterInfo *fromRange,
           =1                                  int * toValue, IDATA_P struct RegisterInfo *toRange );
           =1 #endif
 320      =1  
 321      =1  BYTE GetAttributesFromNTSCSettings(BYTE index);
 322      =1  
 323      =1  #endif  // __TW88__
 324      =1  
   9          #include "measure.h"
   1      =1  #ifndef __MEASURE__
   2      =1  #define __MEASURE__
   3      =1  
   4      =1  #define EE_DOS                          0
   5      =1  
   6      =1  #define EE_SP1                          1
   7      =1  #define EE_SP2                          2
   8      =1  #define EE_SP3                          3
   9      =1  
  10      =1  #define EE_VGA_60                       4
  11      =1  #define EE_VGA_66                       5
  12      =1  #define EE_VGA_70                       6
  13      =1  #define EE_VGA_72                       7
  14      =1  #define EE_VGA_75                       8
  15      =1  #define EE_VGA_85                       9
  16      =1  
  17      =1  #define EE_SVGA_56                      10
  18      =1  #define EE_SVGA_60                      11
  19      =1  #define EE_SVGA_70                      12
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 19  

  20      =1  #define EE_SVGA_72                      13
  21      =1  #define EE_SVGA_75                      14
  22      =1  #define EE_SVGA_85                      15
  23      =1  
  24      =1  #define EE_832_75                       16
  25      =1  
  26      =1  #define EE_XGA_60                       17
  27      =1  #define EE_XGA_70                       18
  28      =1  #define EE_XGA_72                       19
  29      =1  #define EE_XGA_75                       20
  30      =1  #define EE_XGA_85                       21
  31      =1  
  32      =1  #define EE_1152_60                      22
  33      =1  #define EE_1152_70                      23
  34      =1  #define EE_1152_75                      24
  35      =1  
  36      =1  #define EE_SXGA_60                      25
  37      =1  #define EE_SXGA_70                      26
  38      =1  #define EE_SXGA_75                      27
  39      =1  
  40      =1  #define EE_RGB_480P                     28
  41      =1  #define EE_RGB_720P                     29
  42      =1  #define EE_RGB_720P50           30
  43      =1  #define EE_RGB_1080I            31
  44      =1  #define EE_RGB_1080I50A         32
  45      =1  #define EE_RGB_1080I50B         33
  46      =1  #define EE_RGB_480I                     34
  47      =1  #define EE_RGB_576I                     35
  48      =1  #define EE_RGB_576P                     36
  49      =1  
  50      =1  #define EE_YPbPr_480P           37
  51      =1  #define EE_YPbPr_720P           38
  52      =1  #define EE_YPbPr_720P50         39
  53      =1  #define EE_YPbPr_1080I          40
  54      =1  #define EE_YPbPr_1080I50A       41
  55      =1  #define EE_YPbPr_1080I50B       42
  56      =1  #define EE_YPbPr_480I           43
  57      =1  #define EE_YPbPr_576I           44
  58      =1  #define EE_YPbPr_576P           45
  59      =1  
  60      =1  #define EE_PC_MAX                       46
  61      =1  
  62      =1  #define EE_PC_NO_SIGNAL         0xfe
  63      =1  #define EE_PC_UNKNOWN           0xff
  64      =1  
  65      =1  struct _PCMDATA {
  66      =1          CODE_P BYTE  Support;
  67      =1          CODE_P WORD  HAN;
  68      =1          CODE_P WORD  VAN;
  69      =1          CODE_P WORD  IVF;
  70      =1          CODE_P WORD  CLOCK;
  71      =1          CODE_P WORD  low;
  72      =1          CODE_P WORD  high;
  73      =1          CODE_P WORD  Hstart;
  74      =1          CODE_P WORD  Vstart;
  75      =1          CODE_P WORD  IPF;               // 0.1MHz
  76      =1          CODE_P WORD  PPF;               // 0.1MHz
  77      =1          CODE_P BYTE  VBack;
  78      =1  };
  79      =1  #ifndef AUTOCALC_PC
           =1 
           =1 #ifdef SUPPORT_DTV
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 20  

           =1 struct _DTVMDATA {
           =1         CODE_P BYTE Reg62;
           =1         CODE_P BYTE RegBC;
           =1         CODE_P BYTE RegBD;
           =1         CODE_P BYTE RegBE;
           =1         CODE_P WORD PHP;
           =1 };
           =1 #endif
           =1 #endif
  91      =1  #if defined     XGA
           =1         #define MAX_PPF          90000000
           =1 #elif defined SXGA
           =1         #define MAX_PPF         135000000
           =1 #elif defined WXGA
           =1         #define MAX_PPF          90000000
           =1 #elif defined WVGA
  98      =1          #define MAX_PPF          90000000
  99      =1  #elif defined VGA
           =1         #define MAX_PPF          50000000
           =1 #elif defined SVGA
           =1         #define MAX_PPF          80000000
           =1 #elif defined QVGA
           =1         #define MAX_PPF          30000000
           =1 #elif defined WQVGA
           =1         #define MAX_PPF          30000000
           =1 #endif
 108      =1  
 109      =1  extern BYTE cLastSyncLoss;
 110      =1  extern BYTE PcMode;
 111      =1  
 112      =1  void CompLT170E2(void);
 113      =1  
 114      =1  WORD gap(WORD a, WORD b);
 115      =1  
 116      =1  //===================================================================
 117      =1  WORD GetHpnVpn(BYTE);
 118      =1  
 119      =1  WORD ConvertBasedOnInput(WORD dat);
 120      =1  
 121      =1  BYTE IsDTVInput(void);
 122      =1  
 123      =1  void SetVValueForPanel(WORD vstart);
 124      =1  BYTE SetHValueForPanel(void);
 125      =1  BYTE GetActiveRegion(void);
 126      =1  
 127      =1  BYTE DetectAndSetForVGAInput(BYTE);
 128      =1  #ifdef SUPPORT_DTV
           =1 BYTE DetectAndSetForDTVInput(BYTE);
           =1 #endif
 131      =1  void CheckPCinput(void);
 132      =1  void CheckDTVinput(void);
 133      =1  
 134      =1  WORD GetCoarseValue(void);
 135      =1  BYTE GetPhaseValue(void);
 136      =1  WORD SetPCCoarseValue(BYTE val);
 137      =1  BYTE SetPhaseValue(BYTE val);
 138      =1  
 139      =1  void DisplayResultAndSetActiveRange(void);
 140      =1  
 141      =1  //=============================================================================
 142      =1  //                    PC Screen Position Move Functions
 143      =1  //=============================================================================
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 21  

 144      =1  void MoveActiveVpos(BYTE val);          // Up/Down
 145      =1  void MoveActiveHpos(BYTE val);          // Left/Right
 146      =1  
 147      =1  BYTE GetVPosition(void);
 148      =1  BYTE SetVPosition(BYTE val);
 149      =1  BYTE GetHPosition(void);
 150      =1  BYTE SetHPosition(BYTE val);
 151      =1  
 152      =1  void ResetPCValue(void);
 153      =1  
 154      =1  CODE_P BYTE *GetPCInputSourceName(void);
 155      =1  BYTE AutoAdjust(void);
 156      =1  
 157      =1  #endif // __MEASURE__
  10          #include "adc.h"
   1      =1  #ifndef __ADC__
   2      =1  #define __ADC__
   3      =1  
   4      =1  //=============================================================================
   5      =1  //                             ADC Functions
   6      =1  //=============================================================================
   7      =1  
   8      =1  void ADCPowerDown(bit flag);
   9      =1  void SelectADCmux(BYTE sel);
  10      =1  void SetADCMode(BYTE mode);
  11      =1  
  12      =1  void EnableADC(void);
  13      =1  void DisableADC(void);
  14      =1  
  15      =1  WORD GetCoarse(void);
  16      =1  void SetCoarse(WORD i);
  17      =1  void SetPhase(BYTE j);
  18      =1  BYTE GetPhaseCurrent(void);
  19      =1  BYTE SetVCORange(DWORD _IPF);
  20      =1  
  21      =1  //void SetADCGainOffset(BYTE gain, BYTE offset);
  22      =1  void AutoColorAdjust(void);
  23      =1  
  24      =1  
  25      =1  
  26      =1  void AutoColorAdjustForDTV(BYTE flag);
  27      =1  
  28      =1  #endif  // __ADC__
  29      =1  
  30      =1  
  31      =1  
  32      =1  
  33      =1  
  34      =1  
  35      =1  
  36      =1  
  37      =1  
  38      =1  
  39      =1  
  40      =1  
  41      =1  
  42      =1  
  43      =1  
  44      =1  
  45      =1  
  46      =1  
  47      =1  
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 22  

  48      =1  
  49      =1  
  50      =1  
  51      =1  
  52      =1  
  53      =1  
  54      =1  
  11          #include "i2c.h"
   1      =1  #ifndef __I2C_H__
   2      =1  #define __I2C_H__
   3      =1  
   4      =1  
   5      =1  void I2CReadByte3(BYTE *);
   6      =1  void I2CRead8Byte(BYTE *);
   7      =1  #if 0
           =1 void I2CReadByteMSP(BYTE addr, BYTE index, BYTE *pd, BYTE cnt);
           =1 #endif
  10      =1  BYTE I2CWriteByte2(BYTE);
  11      =1  BYTE I2CWriteByte3(BYTE*);
  12      =1  BYTE I2CWrite8Byte(BYTE *);
  13      =1  
  14      =1  void I2CStart(void);
  15      =1  void I2CWriteData(BYTE value);
  16      =1  BYTE I2CReadData(void);
  17      =1  #if 0
           =1 BYTE I2CReadDataWithACK(void);
           =1 #endif
  20      =1  void I2CStop(void);
  21      =1  void I2Cdelay(void);
  22      =1  
  23      =1  
  24      =1  #define WriteTW88(a,b)          WriteI2C(TW88I2CAddress, a, b)
  25      =1  #define ReadTW88(a)                     ReadI2C(TW88I2CAddress, a)
  26      =1  
  27      =1  BYTE WriteTW88_Wait     (BYTE, BYTE);
  28      =1  void WriteADC           (BYTE, BYTE);
  29      =1  BYTE ReadADC            (BYTE);
  30      =1  BYTE ReadADC_TW88(BYTE index);
  31      =1  void WriteADC_TW88(BYTE index, BYTE dat);
  32      =1  
  33      =1  void WriteEEP           (WORD, BYTE);
  34      =1  BYTE ReadEEP            (WORD);
  35      =1  
  36      =1  
  37      =1  BYTE ReadI2C            (BYTE addr, BYTE index);
  38      =1  void WriteI2C           (BYTE addr, BYTE index, BYTE val);
  39      =1  
  40      =1  void WriteI2Cn_(BYTE addr, BYTE *val, BYTE cnt);
  41      =1  void WriteI2Cn (BYTE addr, BYTE index, BYTE *val, BYTE cnt);
  42      =1  void WriteI2CnD(BYTE addr, BYTE index, BYTE val, BYTE cnt);
  43      =1  
  44      =1  void ReadI2Cmn(BYTE addr, BYTE wcnt, BYTE rcnt, BYTE *rwdata);
  45      =1  
  46      =1  #define         WriteADC(a,b)   WriteADC_TW88(a,b)
  47      =1  #define         ReadADC(a)              ReadADC_TW88(a)
  48      =1  
  49      =1  #endif  /* __I2C_H__ */
  12          #include "debug.h"
   1      =1  #ifndef __DEBUG__
   2      =1  #define __DEBUG__
   3      =1  
   4      =1  #define DEBUG_ERR       1
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 23  

   5      =1  #define DEBUG_WARN      2
   6      =1  #define DEBUG_INFO      3
   7      =1  #define DEBUG_BREAK     4
   8      =1  
   9      =1  #define Pause(a)        { Printf("\r\n"); Printf(a); while(!RS_ready()); RS_rx(); }
  10      =1  
  11      =1  //#define BURSTLOCK     7
  12      =1  
  13      =1  void DebugWindowControl (void) ;
  14      =1  void Draw_Debug_Char(void);
  15      =1  void DebugWindowCursor( BYTE flag ) ;
  16      =1  void DebugWindowData( BYTE flag ) ;
  17      =1  void Debug_Write(void);
  18      =1  void Debug_Read(void);
  19      =1  
  20      =1  
  21      =1  
  22      =1  #endif  // __DEBUG__
  23      =1  
  24      =1  #ifdef CHIP_MANUAL_TEST
           =1 BYTE DelaynCheck(void);
           =1 void ChipManualTest(void);
           =1 
           =1 #endif
  13          #include "dispinfo.h"
   1      =1  #ifndef __DISPINFO__
   2      =1  #define __DISPINFO__
   3      =1  //==================================================================
   4      =1  //                              Display Information
   5      =1  //==================================================================
   6      =1  #if (defined WQVGA) && (defined ANALOG_7INCH)
           =1 #define         INPUTINFO_ZOOM          WINZOOMx1
           =1 #define         LOGO_ZOOM                       WINZOOMx3
           =1 
           =1 #else // (defined WQVGA) && (defined SHARP_LQ043T3DX02)
  11      =1  #define         INPUTINFO_ZOOM          WINZOOMx2
  12      =1  #define         LOGO_ZOOM                       WINZOOMx2
  13      =1  #endif
  14      =1  //#define               VOL_ZOOM                        WINZOOMx4
  15      =1  #define         MUTE_ZOOM                       WINZOOMx3
  16      =1  #define         TVCHN_ZOOM                      WINZOOMx4
  17      =1  #define         RATINGINFO_ZOOM         WINZOOMx3
  18      =1  #define     SCANTV_ZOOM                 WINZOOMx2               //ljy012304
  19      =1  #define         PCINFO_ZOOM                     WINZOOMx2
  20      =1  #define     BAR_ZOOM                    WINZOOMx2
  21      =1  
  22      =1  
  23      =1  #define DVRStatus_OSDWIN        4 
  24      =1  #define DVRStatus_ADDR  195 
  25      =1  
  26      =1  extern  IDATA BYTE  DisplayedOSD;
  27      =1  
  28      =1  
  29      =1  void ClearDisplayedOSD( BYTE newd );
  30      =1  void SetDisplayedOSD( BYTE newd );
  31      =1  BYTE GetDisplayedOSD(void);
  32      =1  void ClearOSDInfo(void);
  33      =1  
  34      =1  void DisplayInput(void);
  35      =1  BYTE ClearInput(void);
  36      =1  
  37      =1  
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 24  

  38      =1  void DisplayLogo(void);
  39      =1  void ClearLogo(void);
  40      =1  
  41      =1  void DisplayPCInfo(BYTE CODE *ptr);
  42      =1  void ClearPCInfo(void);
  43      =1  void DisplayAutoAdjust(void);
  44      =1  void ClearAutoAdjust(void);
  45      =1  
  46      =1  
  47      =1  void DisplayVol(void);
  48      =1  #if 0
           =1 void DisplayMuteInfo(void);
           =1 #endif
  51      =1  void ClearMuteInfo(void);
  52      =1  BYTE CheckAndClearOSD(void);
  53      =1  
  54      =1  //==================================================================
  55      =1  //                                              TV Info
  56      =1  //==================================================================
  57      =1  
  58      =1  BYTE ClearTVInfo(void);
  59      =1  
  60      =1  #endif  // __DISPINFO__
  14          #include "pc_eep.h"
   1      =1  #ifndef __PC_EEP__
   2      =1  #define __PC_EEP__
   3      =1  
   4      =1  
   5      =1  // -----------------------------------------------------------------------------
   6      =1  #define PC_COLOR_DATA   0x80    // StartAddress of EEPROM for PC Color Temperature
   7      =1  #define PC_USERCOLOR    0x8A
   8      =1  #define SetPCColorTempModeEE( ctid )                    WriteEEP( PC_COLOR_DATA, ctid )
   9      =1  #define GetPCColorTempModeEE()                                  ReadEEP( PC_COLOR_DATA )
  10      =1  
  11      =1  #define GetPCUserColorTempEE( ucolorr)                  ReadEEP( PC_USERCOLOR+ucolorr )
  12      =1  #define SavePCUserColorTempEE( ucolorw, uval)   WriteEEP( PC_USERCOLOR+ucolorw, uval )
  13      =1  #define GetPCColorEE(index)                                             ReadEEP(index)
  14      =1  
  15      =1  // -----------------------------------------------------------------------------
  16      =1  #define EE_ADC_GO               0x90    // ADC Gain Offset for PC
  17      =1  #define EE_ADC_GO_DTV   0x98    // ADC Gain Offset for DTV
  18      =1  
  19      =1  #define EE_PCDATA               0xC0    // StartAddress of EEPROM for PCDATA
  20      =1  #define LEN_PCDATA              5               // Length of PCDATA
  21      =1  
  22      =1  WORD GetHPNfromEE(BYTE mode);
  23      =1  
  24      =1  BYTE CheckPcDataEEValid(BYTE, WORD);
  25      =1  
  26      =1  WORD GetVactiveStartEE(BYTE mode);
  27      =1  WORD GetHactiveStartEE(BYTE mode);
  28      =1  
  29      =1  void GetPCDataEE(BYTE mode);
  30      =1  void SavePCDataEE(BYTE mode);
  31      =1  void SaveDefaultPCDataEE(void);
  32      =1  void SaveDefaultPCDataAllEE(void);
  33      =1  
  34      =1  void SaveHactiveEE(BYTE mode);
  35      =1  void SaveVactiveEE(BYTE mode);
  36      =1  void SaveVBackPorchEE(BYTE mode);
  37      =1  void SaveCoarseEE(BYTE mode);
  38      =1  void SavePhaseEE(BYTE mode);
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 25  

  39      =1  /*
  40      =1  WORD GetHactiveStartEE(BYTE mode);
  41      =1  WORD GetVactiveStartEE(BYTE mode);
  42      =1  */
  43      =1  void DumpPCData(void);
  44      =1  
  45      =1  void SaveActiveVEE(WORD);
  46      =1  void SaveBackPorchEE(BYTE);
  47      =1  void SaveActiveHEE(WORD);
  48      =1  
  49      =1  void SaveADCGainOffsetEE(BYTE mod);
  50      =1  void GetADCGainOffsetEE(void);
  51      =1  
  52      =1  void SaveADCGainOffsetForDTVEE(BYTE mod);
  53      =1  void GetADCGainOffsetForDTVEE(void);
  54      =1  
  55      =1  #endif  // __PC_EEP__
  15          #include "etc_eep.h"
   1      =1  #ifndef __ETC_EEP__
   2      =1  #define __ETC_EEP__
   3      =1  
   4      =1  
   5      =1  ////eeprom.h
   6      =1  
   7      =1  //=========================================================================
   8      =1  //      EEPROM structure
   9      =1  //      0x00    BYTE    4       'TW88'
  10      =1  #define EEP_FWREV_MAJOR                 0x04    //BYTE  1       F/W Rev.-major(Hex)     
  11      =1  #define EEP_FWREV_MINOR                 0x05    //BYTE  1       F/W Rev.-minor(Hex)
  12      =1  #define EEP_DEBUGLEVEL                  0x06    //BYTE  1       DebugLevel
  13      =1  //
  14      =1  #define EEP_AUTODETECT                  0x07    //BYTE  1       Flag for Input Auto Detect      -0:Auto, 1:NTSC,....
  15      =1  #define EEP_AUTODETECTTYTE              0x08    //BYTE  1       Type of Auto-detect(will be value of register 0x1d)
  16      =1  //                      ---------------------------------------------------------------
  17      =1  #define EEP_WIDEMODE                    0x09    //BYTE  1   Wide Mode
  18      =1  
  19      =1  #define EEP_AUTORECOGNITION             0x0a    //BYTE  1       Auto Recognition
  20      =1  #define EEP_VIDEOMODE                   0x0b    //BYTE  1   Video Mode
  21      =1  
  22      =1  #define EEP_OSDLANG                             0x0c    //BYTE  1   OSDLang                                             // 0
  23      =1  
  24      =1  #define EEP_OSDPOSITIONMODE     0x0d    //BYTE  1       OSD Position Mode
  25      =1  #define EEP_CCD                                 0x0e    //BYTE  1       Closed Caption- 0: off, 1:on
  26      =1  
  27      =1  #define EEP_INPUTSELECTION              0x0f    //BYTE  1       InputSelection
  28      =1  
  29      =1  //
  30      =1  #define EEP_PC_CONTRAST                 0x10
  31      =1  #define EEP_PC_BRIGHT                   0x11
  32      =1  
  33      =1  #define EEP_CONTRAST                    0x12    //BYTE  1       Contrast 
  34      =1  #define EEP_BRIGHTNESS                  0x13    //BYTE  1       Brightness
  35      =1  #define EEP_SATURATION_U                0x14    //BYTE  1       Saturation :U
  36      =1  #define EEP_SATURATION_V                0x15    //BYTE  1       Saturation :V
  37      =1  #define EEP_SHARPNESS                   0x16    //BYTE  1       Sharpness 
  38      =1  #define EEP_HUE                                 0x17    //BYTE  1       Hue                    
  39      =1  
  40      =1  //====================================HS AWT 981001
  41      =1  #define  EEP_AutoMode           0xa0
  42      =1  #define  EEP_IMAGEMode          0xa1
  43      =1  #define  EEP_RearMode           0xa2
  44      =1  #define  EEP_COSDMode           0xa3
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 26  

  45      =1  #define  EEP_GAUGEMode          0xa4
  46      =1  #define  EEP_CAMAMode           0xa5 
  47      =1  #define  EEP_CAMBMode           0xa6
  48      =1  #define  EEP_CAMCMode           0xa7
  49      =1  #define  EEP_CAMRMode           0xa8
  50      =1  #define  EEP_CAMOutMode         0xa9    
  51      =1  #define  EEP_TimeStep           0xaa
  52      =1  #define  EEP_Powerflag          0xab   
  53      =1  #define  EEP_ONOFFChoice        0xac 
  54      =1  
  55      =1  #define  EEP_PRIORITY           0xad
  56      =1  #define  EEP_JUMPMode           0xae
  57      =1  #define  EEP_NowModeState       0xaf
  58      =1  #define  EEP_SelectMode         0xb0
  59      =1  #define  EEP_PriorityOffSelectMode      0xb1
  60      =1  #define  EEP_AudioRecord                0xb2
  61      =1  
  62      =1  #define  EEP_FirstNumber                0xb3
  63      =1  #define  EEP_SecondNumber               0xb4
  64      =1  #define  EEP_ThridNumber                0xb5
  65      =1  #define  EEP_FourthNumber               0xb6
  66      =1  
  67      =1  #define  EEP_CAMNUMBER     0xb7
  68      =1  #define  EEP_PELCO                 0xb8
  69      =1  #define  EEP_Baud_rate     0xb9
  70      =1  #define  EEP_TriggerVGA    0xba
  71      =1  #define  EEP_DVRDisplay    0xbb
  72      =1  #define  EEP_IMAGE_A_Mode    0xbc//andy A1.4 20100113
  73      =1  #define  EEP_IMAGE_B_Mode    0xbd//andy A1.4 20100113
  74      =1  #define  EEP_IMAGE_C_Mode    0xbe//andy A1.4 20100113
  75      =1  
  76      =1  //#define  EEP_SelectModeBuf         0xb2
  77      =1  
  78      =1  #if 0
           =1 #define  EEP_Resolution                 0xc0
           =1 #define  EEP_FPS                                0xc1
           =1 #define  EEP_Quality                    0xc2
           =1 #define  EEP_RecordMode                 0xc3
           =1 #define  EEP_RecordLength               0xc4
           =1 #define  EEP_PreAlarmLength             0xc5
           =1 #define  EEP_PostAlarmLength    0xc6
           =1 #endif
  87      =1  //====================================HS AWT 981001
  88      =1  
  89      =1  //
  90      =1  //              ---------------------------------------------------------------
  91      =1  #define EEP_PCAUDIOPVOL         0x37    //BYTE  1   AudioVol
  92      =1  #define EEP_AUDIOPVOL                   0x38    //BYTE  1   AudioVol
  93      =1  #define EEP_AUDIOBALANCE                0x39    //BYTE  1   AudioBalance
  94      =1  //
  95      =1  //              ---------------------------------------------------------------
  96      =1  
  97      =1  #define EEP_BLOCKMOVIE                  0x40    //BYTE  1       BlockedMovie:Blocked rating for Movie   
  98      =1  #define EEP_BLOCKTV                             0x41    //BYTE  1       BlockedTV:Blocked rating for TV                 
  99      =1  #define EEP_FVSLD                               0x42    //BYTE  6
 100      =1  //                                                              7    6       4    3    2    1    0
 101      =1  //  FVSLD Level                        ALL   FV(V)   S    L    D    
 102      =1  //  0x43    BYTE    1   TV-Y            X  
 103      =1  //  0x44        BYTE    1   TV-Y7           X    X 
 104      =1  //  0x45        BYTE    1   TV-G            X 
 105      =1  //  0x46        BYTE    1   TV-PG           X       X    X    X    X
 106      =1  //  0x47        BYTE    1   TV-14           X       X    X    X    X 
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 27  

 107      =1  //  0x48        BYTE    1   TV-MA           X       X    X    X
 108      =1  //
 109      =1  #define EEP_VCHIPPASSWORD               0x49    //BYTE  4   OSDPassword                                 //Defualt:3366
 110      =1  //                      ---------------------------------------------------------------
 111      =1  //
 112      =1  //
 113      =1  //      0x61    WORD    2   PanelXRes
 114      =1  //      0x63    WORD    2       PanelYRes
 115      =1  //      0x65    BYTE    1       PanelHsyncMinPulseWidth
 116      =1  //      0x66    BYTE    1       PanelVsyncMinPulseWidth
 117      =1  //      0x67    WORD    2       PanelHminBackPorch
 118      =1  //      0x69    BYTE    1       PanelHsyncPolarity
 119      =1  //      0x6a    BYTE    1       PanelVsyncPolarity
 120      =1  //      0x6b    WORD    2       PanelDotClock
 121      =1  //      0x6d    BYTE    1       PanelPixsPerClock
 122      =1  //      0x6e    BYTE    1       PanelDEonly
 123      =1  //                      ---------------------------------------------------------------
 124      =1  //
 125      =1  //      0x80    PC Data
 126      =1  //
 127      =1  //                      ---------------------------------------------------------------
 128      =1  //
 129      =1  //      0x300   TV Data
 130      =1  //
 131      =1  //      --- NTSC_TV -------------------------------------------------------------
 132      =1  //      CNT_SAVEDAIR                    BYTE    1   Total count of saved Air TV Channel.
 133      =1  //      IDX_CURAIR                              BYTE    1   Index of Current Air TV Channel
 134      =1  //      CHN_CURAIR                              BYTE    1   Current Air TV Channel.
 135      =1  //
 136      =1  //      FIRSTSAVED_AIRCHN               BYTE    1       First saved Air TV channel no   (maximum 100)
 137      =1  //      ....
 138      =1  //
 139      =1  //      CNT_SAVEDCABLE                  BYTE    1   Total count of saved Cable TV Channel.
 140      =1  //      IDX_CURCABLE                    BYTE    1   Index of Current Cable TV Channel
 141      =1  //      CHN_CURCABLE                    BYTE    1   Current Cable TV Channel.
 142      =1  //
 143      =1  //      FIRSTSAVED_CABLECHN             BYTE    1       First saved Cable TV channel no (maximum 100)
 144      =1  //
 145      =1  //      --- PAL_TV --------------------------------------------------------------
 146      =1  //      PR_CUR                                  BYTE    1   Current PR no.
 147      =1  //      FIRST_SAVEDPR                   DWORD   4   Freq of PR0.        (TOTAL_PR)
 148      =1  //      FIRST_SAVEDPR+4                 DWORD   4   Freq of PR1.
 149      =1  //      .....
 150      =1  //
 151      =1  
 152      =1  
 153      =1  
 154      =1  //
 155      =1  // Offset of EEPROM
 156      =1  //
 157      =1  /*
 158      =1  #define VIDEOCONTRAST           0x18            // for NTSC.(PAL:0x20,SECAM:0x28)
 159      =1  #define VIDEOBRIGHTNESS         0x19
 160      =1  #define VIDEOSATURATION_U       0x1a
 161      =1  #define VIDEOSATURATION_V       0x1b
 162      =1  #define VIDEOHUE                        0x1c            // only for NTSC
 163      =1  #define VIDEOSHARPNESS          0x1d
 164      =1  */
 165      =1  #define CCCOLOR         0x52
 166      =1  #define VOLZOOM         0x53
 167      =1  
 168      =1  #define PANELINFO       0x61
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 28  

 169      =1  
 170      =1  // PAL_TV
 171      =1  #define  PR_CUR                                 0x301   
 172      =1  #define  FIRST_SAVEDPR                  0x308   
 173      =1   #define TVFREQ_HIGH 0 
 174      =1   #define TVFREQ_LOW  1
 175      =1  #ifdef PAL_TV
           =1  #define TVFINETUNE  2
           =1                 // NOT Finetune: 0 , Range: -32 ~ +32
           =1  #define TVPRSYSTEM  3  
           =1                 // bit 7: Add:1 Ereased :0
           =1                 // 
           =1  #define TVCHNAME    4
           =1 
           =1  #define BYTEPERCHANNEL 9 
           =1 #endif
 185      =1  // NTSC_TV
 186      =1  #define  EEP_TVInputSel                 0x302
 187      =1  #define  CHN_CURAIR                             0x303   
 188      =1  #define  FIRSTSAVED_AIRCHN              0x308   
 189      =1  #define  CHN_CURCABLE                   0x403   
 190      =1  #define  FIRSTSAVED_CABLECHN    0x408   
 191      =1  #ifdef NTSC_TV
           =1  #define TVFINETUNE  0
           =1                 // NOT Finetune: 0 , Range: -32 ~ +32
           =1  #define TVPRSYSTEM  1  
           =1                 // bit 7: Add:1 Ereased :0
           =1                 // 
           =1  #define BYTEPERCHANNEL 2
           =1 #endif
 199      =1  
 200      =1  
 201      =1  
 202      =1  
 203      =1  WORD GetFWRevEE(void);
 204      =1  void SaveFWRevEE(WORD);
 205      =1  
 206      =1  BYTE GetDebugLevelEE(void);
 207      =1  void SaveDebugLevelEE(BYTE);
 208      =1  
 209      =1  #ifdef WIDE_SCREEN
 210      =1  BYTE GetWideModeEE(void);
 211      =1  void SaveWideModeEE(BYTE dl);
 212      =1  #endif
 213      =1  
 214      =1  
 215      =1  //BYTE GetRange4CoarseEE(void);
 216      =1  //void SaveRange4CoarseEE(BYTE);
 217      =1  
 218      =1  BYTE GetPossibleAutoDetectStdEE(void);
 219      =1  void SetPossibleAutoDetectStdEE(void);
 220      =1  
 221      =1  //BYTE GetOSDXPositionEE(void);
 222      =1  //BYTE GetOSDYPositionEE(void);
 223      =1  BYTE GetClosedCaptionFlagEE(void);
 224      =1  
 225      =1  BYTE GetVideoDatafromEE(BYTE);
 226      =1  void SaveVideoDatatoEE(BYTE offset, BYTE ndata);
 227      =1  
 228      =1  //BYTE GetVideoBrightnessEE(void);
 229      =1  //BYTE GetVideoSaturationEE(BYTE);
 230      =1  //BYTE GetVideoHueEE(void);
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 29  

 231      =1  //BYTE GetVideoSharpnessEE(void);
 232      =1  
 233      =1  //void SaveVideoContrastEE(BYTE ndata);
 234      =1  //void SaveVideoBrightnessEE(BYTE ndata);
 235      =1  //void SaveVideoSaturationEE(BYTE, BYTE ndata);
 236      =1  //void SaveVideoHueEE(BYTE ndata);
 237      =1  //void SaveVideoSharpnessEE(BYTE ndata);
 238      =1  
 239      =1  BYTE GetOSDPositionModeEE(void);
 240      =1  void SaveOSDPositionModeEE(BYTE ndata);
 241      =1  //void SaveOSDXPositionEE(BYTE);
 242      =1  //void SaveOSDYPositionEE(BYTE);
 243      =1  
 244      =1  void SaveClosedCaptionFlagEE(BYTE);
 245      =1  
 246      =1  BYTE GetBlockedTVEE(void);                      
 247      =1  void SaveBlockedTVEE(BYTE vi);          
 248      =1  BYTE GetBlockedTV_FLDSLEE( BYTE level ) ;
 249      =1  void SaveBlockedTV_FLDSLEE(BYTE level, BYTE vi) ;
 250      =1  
 251      =1  BYTE GetBlockedMovieEE(void);           
 252      =1  void SaveBlockedMovieEE(BYTE vi);       
 253      =1  #if 0
           =1 BYTE GetInputSelectionEE(void);
           =1 #endif
 256      =1  void SaveInputSelectionEE(BYTE val);
 257      =1  
 258      =1  //BYTE GetOSDDurationEE(void);
 259      =1  //void SaveOSDDurationEE(BYTE val);
 260      =1  
 261      =1  BYTE GetOSDLangEE(void);
 262      =1  void SaveOSDLangEE(BYTE val);
 263      =1  
 264      =1  //ljy100303...BYTE GetOSDZoomEE(void);
 265      =1  //ljy100303...void SaveOSDZoomEE(BYTE val);
 266      =1  
 267      =1  BYTE GetAudioVolEE(void);
 268      =1  void SetAudioVolEE( BYTE vol );
 269      =1  BYTE GetPCAudioVolEE(void);
 270      =1  void SetPCAudioVolEE( BYTE vol );
 271      =1  #if 0
           =1 BYTE GetAudioBalanceEE(void);
           =1 void SetAudioBalanceEE( BYTE vol );
           =1 BYTE GetAudioBassEE(void);
           =1 void SetAudioBassEE( BYTE vol );
           =1 BYTE GetAudioTrebleEE(void);
           =1 void SetAudioTrebleEE( BYTE vol );
           =1 #endif
 279      =1  //BYTE GetAudioEffectEE(void);
 280      =1  //void SetAudioEffectEE( BYTE vol );
 281      =1  
 282      =1  void ClearBasicEE(void);
 283      =1  
 284      =1  BYTE ValidPassword(DATA_P BYTE *numstr, BYTE index);
 285      =1  BYTE SetNewPassword(DATA_P BYTE *numstr, BYTE index);
 286      =1  
 287      =1  //WORD GetPanelXRes(void);
 288      =1  //WORD GetPanelYRes(void);
 289      =1  BYTE GetPanelHsyncMinPulseWidth(void);
 290      =1  BYTE GetPanelVsyncMinPulseWidth(void);
 291      =1  WORD GetPanelHMinBackPorch(void);
 292      =1  BYTE GetPanelHsyncPolarity(void);
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 30  

 293      =1  BYTE GetPanelVsyncPolarity(void);
 294      =1  WORD GetPanelDotClock(void);
 295      =1  WORD GetPanelMaxClock(void);
 296      =1  BYTE GetPanelPixsPerClock(void);
 297      =1  // Not used yet *************************  BYTE GetPanelDEonly(void);
 298      =1  
 299      =1  void AddTVChannelEE( BYTE tvtype, BYTE chn);
 300      =1  BYTE GetTVChannelEE( BYTE tvtype, BYTE inx);
 301      =1  void ResetTVChannelEE( BYTE tvtype );
 302      =1  BYTE GetTVChannelCntEE(BYTE tvtype);
 303      =1  BYTE GetTVChnIdxEE(BYTE tvtype);
 304      =1  BYTE GetCurTVChannelEE(BYTE tvtype);
 305      =1  void SetTVChnIdxEE(BYTE tvtype, BYTE newd);
 306      =1  void SetCurTVChannelEE(BYTE tvtype, BYTE newd);
 307      =1  BYTE InsertTVChannelEE(BYTE tvtype, BYTE newd);
 308      =1  BYTE RemoveTVChannelEE(BYTE tvtype, BYTE newd);
 309      =1  
 310      =1  void SetTVPrEE(void);
 311      =1  BYTE GetTVPrEE(void);
 312      =1  void SetTVFreqEE(BYTE, WORD);
 313      =1  WORD GetTVFreqEE(BYTE);
 314      =1  void SetFineTuneEE(BYTE, BYTE);
 315      =1  BYTE GetFineTuneEE(BYTE);
 316      =1  BYTE GetTVPrSystem(BYTE);
 317      =1  void SetTVPrSystem(BYTE, BYTE);
 318      =1  BYTE GetTVInputSelEE(void);
 319      =1  void SetTVInputSelEE(BYTE);
 320      =1  
 321      =1  #define GetVInputStdDetectModeEE()                              ReadEEP(EEP_AUTODETECTTYTE)
 322      =1  #define SaveVInputStdDetectModeEE(A)                    WriteEEP(EEP_AUTODETECTTYTE, A)
 323      =1  
 324      =1  #define GetAutoRecogntionEE()                                   ReadEEP(EEP_AUTORECOGNITION)
 325      =1  #define SaveAutoRecogntionEE(A)                                 WriteEEP(EEP_AUTORECOGNITION, A)
 326      =1  
 327      =1  #define SetVideoModeEE( ctid )                                  WriteEEP( EEP_VIDEOMODE, ctid )
 328      =1  #define GetVideoModeEE()                                                ReadEEP( EEP_VIDEOMODE )
 329      =1  
 330      =1  #define GetPanelContrastEE()                                    ReadEEP(0x10)
 331      =1  
 332      =1  #if defined( SUPPORT_PC ) || defined( SUPPORT_DTV )
 333      =1  //#define GetPanelHueEE()                                                       ReadEEP(0x28)
 334      =1  //#define GetPanelSharpnessEE()                                 ReadEEP(0x29)
 335      =1  #define GetPanelBrightnessEE()                                  ReadEEP(0x11)
 336      =1  //#define GetPanelSaturationEE()                                        ReadEEP(0x2a)
 337      =1  
 338      =1  //#define SavePanelHueEE(A)                                             WriteEEP(0x28, A)
 339      =1  //#define SavePanelSharpnessEE(A)                                       WriteEEP(0x29, A)
 340      =1  #define SavePanelContrastEE(A)                                  WriteEEP(0x10, A)
 341      =1  #define SavePanelBrightnessEE(A)                                WriteEEP(0x11, A)
 342      =1  //#define SavePanelSaturationEE(A)                              WriteEEP(0x2a, A)
 343      =1  #endif
 344      =1  
 345      =1  /*
 346      =1  #define GetDigitalVideoContrastEE()                             ReadEEP(0x2b)
 347      =1  #define GetDigitalVideoBrightnessEE()                   ReadEEP(0x2c)
 348      =1  #define GetDigitalVideoHueEE()                                  ReadEEP(0x2d)
 349      =1  #define GetDigitalVideoSaturationEE(off)                ReadEEP(0x2e+off)
 350      =1  
 351      =1  #define SaveDigitalVideoContrastEE(A)                   WriteEEP(0x2b, A)
 352      =1  #define SaveDigitalVideoBrightnessEE(A)                 WriteEEP(0x2c, A)
 353      =1  #define SaveDigitalVideoHueEE(A)                                WriteEEP(0x2d, A)
 354      =1  #define SaveDigitalVideoSaturationEE(off,A)             WriteEEP(0x2e+off, A)
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 31  

 355      =1  */
 356      =1  
 357      =1  #endif  // __ETC_EEP__
  16          #include "printf.h"
   1      =1  #ifndef __PRINTF__
   2      =1  #define __PRINTF__
   3      =1  
   4      =1  #define _outchar(c) while(1) { if( !RS_Xbusy ) { SBUF = c; RS_Xbusy=1; break; } }
   5      =1  #define Putch(c) _outchar(c)
   6      =1  
   7      =1  #ifdef SERIAL
   8      =1  
   9      =1   void Printf ( const char CODE_P *fmt, ... );
  10      =1   void Puts ( CODE_P char *ptr );
  11      =1  
  12      =1  #define TW2835Cmd(a)   Puts ( a )
  13      =1  
  14      =1  #else
           =1 
           =1  #undef  DEBUG
           =1  #define Printf(a,b)    //
           =1  #define Puts(a)                //
           =1 
           =1 #endif
  21      =1  
  22      =1  
  23      =1  #ifndef DEBUG
  24      =1  
  25      =1   #define dPuts(a)               //
  26      =1   #define wPuts(a)               //
  27      =1   #define ePuts(a)               //
  28      =1  
  29      =1  #else
           =1 
           =1  void dPrintf( const char CODE_P *fmt, ... );
           =1  void wPrintf( const char CODE_P *fmt, ... );
           =1  void ePrintf( const char CODE_P *fmt, ... );
           =1 
           =1  void dPuts( CODE_P char *ptr );
           =1  void wPuts( CODE_P char *ptr );
           =1  void ePuts( CODE_P char *ptr );
           =1 
           =1 #endif  // DEBUG
  40      =1  
  41      =1  BYTE Getch(void);
  42      =1  BYTE Getche(void);
  43      =1  
  44      =1  
  45      =1  #endif  //__PRINTF__
  17          #include "osdmenu.h"
   1      =1  //osdmenu.h
   2      =1  //LJY10292001
   3      =1  #ifndef __OSDMENU__
   4      =1  #define __OSDMENU__
   5      =1  
   6      =1  //=======================================================================
   7      =1  // 
   8      =1  //BYTE GetOSDDuration(void);
   9      =1  
  10      =1  void ResetVideoValue(void);
  11      =1  //#if defined( SUPPORT_PC ) || defined( SUPPORT_DTV )
  12      =1  //void ResetPCValue(void);
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 32  

  13      =1  //#endif
  14      =1  BYTE GetOSDMenuLevel( void );
  15      =1  
  16      =1  void DrawMenulist(BYTE);
  17      =1  void Display_EnterPin(void);
  18      =1  void OSDHighMenu_sub(void);
  19      =1  void ResetOSDValue(void);
  20      =1  #ifdef E_Wintek
           =1 void ResetUESROSDValue(void);
           =1 #endif
  23      =1  //BYTE OnChangingValue(void);
  24      =1  //Not used yet *******************BYTE OnChangingTime(void);
  25      =1  
  26      =1  //WORD GetOSDclock(void);
  27      =1  
  28      =1  void InitOSDMenu(void);
  29      =1  BYTE CloseOSDMenu(void);
  30      =1  void OpenOSDMenu(void);
  31      =1  void OSDHighMenu(void);
  32      =1  void OSDSelect(void);
  33      =1  void OSDCursorMove(BYTE flag );
  34      =1  void OSDLeftRight(BYTE flag );
  35      =1  void OSDValueUpDn(BYTE flag);
  36      =1  WORD SetItemValue( BYTE id, BYTE flag );
  37      =1  BYTE DoAction(BYTE id);
  38      =1  
  39      =1  BYTE SaveValue1(void);
  40      =1  void ClearValueWin(void);
  41      =1  
  42      =1  void OSDNumber( BYTE num );
  43      =1  
  44      =1  void Set4WideScreen(BYTE id);
  45      =1  
  46      =1  void SetRGBContrast( BYTE id, BYTE val );
  47      =1  BYTE SetPCColorTemp(BYTE flag);
  48      =1  void ResetPanelAttributeValue(void);
  49      =1  WORD GetItemValue( BYTE);
  50      =1  void DisplayViewBar( WORD,BYTE);
  51      =1  void DrawNum(WORD, CODE_P struct NumType *, WORD);
  52      =1  void DrawStringByLang( WORD, CODE_P struct EnumType *, WORD);
  53      =1  
  54      =1  void DisplayVolumebar(BYTE val);
  55      =1  BYTE GetOSDLang(void);
  56      =1  void InitOSDMenuXY(void);
  57      =1  
  58      =1  void Display_TVGuide_Window(void);
  59      =1  void Display_TVGuide_Status(void);
  60      =1  
  61      =1  void ChangeVchip_LevelCursor(BYTE);
  62      =1  void ChangeVchip_ContentCursor(BYTE);
  63      =1  void Select_VchipLevel(void);
  64      =1  void SetVideoMode(BYTE mode);
  65      =1  BYTE GetVideoDatawithOffset(BYTE offset);
  66      =1  void SetVideoContrast(BYTE newv);
  67      =1  void SetVideoBrightness(BYTE newv);
  68      =1  void SetVideoHue(BYTE newv) ;
  69      =1  void SetVideoSaturation(BYTE svtype, BYTE newv) ;
  70      =1  BYTE SetVideoSharpness(BYTE flag) ;
  71      =1  void SetVideoBacklight(BYTE newv) ;
  72      =1  //------------------------------------------------andy awt 981013
  73      =1  //void DaySelect(BYTE);
  74      =1  void CAMOutDSel(BYTE val);
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 33  

  75      =1  void DVRAodioSel(BYTE  val);
  76      =1  
  77      =1  //------------------------------------------------andy awt 981013
  78      =1  
  79      =1  void DisplayLineOSD(void);      // OSD Line display Demo
  80      =1  
  81      =1  
  82      =1  struct MenuType {
  83      =1          BYTE    width,  height;
  84      =1          BYTE    TitleColor;     
  85      =1          BYTE    CursorColor;
  86      =1  };
  87      =1  
  88      =1  struct NumType {
  89      =1          BYTE    PrePostCharLen;         // high nibble(pre) / low nibble(post)
  90      =1          BYTE    PrePostChar[4];
  91      =1  };
  92      =1  
  93      =1  struct NumberStringType {
  94      =1          BYTE    x, y;
  95      =1          BYTE    width;
  96      =1          BYTE    BackColor;
  97      =1          BYTE    Radix;
  98      =1          BYTE    NumColor;
  99      =1          BYTE    MaxLen;                         // maximum length of string
 100      =1          BYTE    PrePostCharLen;         // high nibble(pre) / low nibble(post)
 101      =1          BYTE    PrePostChar[3];
 102      =1  };
 103      =1  
 104      =1  struct TimeType {
 105      =1          BYTE    x, y;
 106      =1          BYTE    width;
 107      =1          BYTE    BackColor;
 108      =1          BYTE    Format;                         //_24H_TIME
 109      =1          BYTE    TimeColor;
 110      =1          BYTE    CursorColor;
 111      =1  };
 112      =1  
 113      =1  struct EnumType {
 114      =1          BYTE    Sz;//size
 115      =1          BYTE    ByLang;
 116      =1          BYTE    Str[15];                        // doesn't matter the size !!!
 117      =1  };
 118      =1  
 119      =1  #define ICON_CH_SZ              2
 120      =1  //#define BAR_NUM_SZ            4
 121      =1  #define ICON_BUF_SZ             2
 122      =1  struct DefineMenu {
 123      =1          //WORD                                          Icon[ICON_BUF_SZ];      
 124      =1          BYTE                            CODE    *Icon;
 125      =1          BYTE                                            **Desc;                         
 126      =1          BYTE                                            PreFnId, 
 127      =1                                                                  PostFnId;
 128      =1  //      void            (*CalltoFunction)(void);                                    // Un/Dn/Sel Function
 129      =1          BYTE                                            IconColor;                      //NIL: not to display icon
 130      =1          BYTE                                            DescColor;                      //NIL: not to display desc. (IconColor==NIL && DescColor==NIL)->Last Item
 131      =1          struct DefineMenu       CODE    *Child;
 132      =1          BYTE                                            Type;                           // MENU, CHOICEMENU, BAR, NUMBER, TIME, ACTION, ENUM_STRING
 133      =1          BYTE                                            ActiveWithCursor;
 134      =1          BYTE                                            Id;
 135      =1          BYTE                            CODE    *TypeData;      //MenuType, BarType, NumType,,,
 136      =1  } ;
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 34  

 137      =1  
 138      =1  struct PictureInfo {
 139      =1  
 140      =1          BYTE Register_Addr;
 141      =1          BYTE EEPROM_Addr;
 142      =1          struct RegisterInfo     CODE    *Control_Range;
 143      =1  };
 144      =1  
 145      =1  
 146      =1  //-------------------------------------------------------------------
 147      =1  // OSD Window Information
 148      =1  //-------------------------------------------------------------------
 149      =1  // Window Number
 150      =1  #define OSDCURSORWINDOW                 1
 151      =1  #define OSDMENUWINDOW                   OSDCURSORWINDOW+1
 152      =1  #define OSDMENU_TOPWIN                  OSDCURSORWINDOW+2
 153      =1  #define OSDMENU_TITLEWIN                OSDCURSORWINDOW+3
 154      =1  #define OSDBARWINDOW                    OSDCURSORWINDOW
 155      =1  
 156      =1  #define TECHWELLOGO_OSDWIN      1       
 157      =1  #define TVINFO_OSDWIN           2       
 158      =1  #define FONTTEST_OSDWIN         2       
 159      =1  #define INPUTINFO_OSDWIN        3  
 160      =1  #define RATINGINFO_OSDWIN       1       
 161      =1  #define PCINFO_OSDWIN           3//4/   
 162      =1  
 163      =1  //-------------OSDMENU_TITLEWIN------------------------------------------------------
 164      =1  // Window Start address
 165      =1  #define OSDMENU_MAINADDR        0
 166      =1  #define OSDMENU_SUBADDR     OSDMENU_MAINADDR+15    //25*9:196
 167      =1  #define OSDMENU_BARADDR         175 //OSDMENU_SUBADDR+225    //256   //25x2:50
 168      =1  
 169      =1  #define INPUTINFO_ADDR          160     // 9x1:9
 170      =1  #ifdef WQVGA
           =1 #define INPUTINFO1_ADDR         INPUTINFO_ADDR+17       //17x3:51
           =1 #else
 173      =1  #define INPUTINFO1_ADDR         INPUTINFO_ADDR+34       //17x2:51
 174      =1  #endif
 175      =1  
 176      =1  #define MUTEINFO_ADDR       INPUTINFO1_ADDR+51  // 4x1:4
 177      =1  #define TVCHINFO_ADDR           MUTEINFO_ADDR//324      // 3X1:3
 178      =1  #define LOGO_ADDR                       0
 179      =1  #define RATINGINFO_ADDR         0       //addr:210(8x1:8)
 180      =1  #define PCMEASUREINFO_ADDR  OSDMENU_BARADDR //10x1
 181      =1  
 182      =1  
 183      =1  //--------------------------------------------------------------------
 184      =1  // OSD Menu Position Range
 185      =1  #if ((defined WQVGA) && (defined ANALOG_7INCH)) || ((defined QVGA) && (defined SHARP_LQ050Q5DR01))
           =1         #define OSD_PHR_ PHR_/2
           =1 #else
 188      =1          #define OSD_PHR_ PHR_
 189      =1  #endif
 190      =1  
 191      =1  #define OSDHSTART_MAX (OSD_PHR_-(12+1)*25 - 56*2 -4)  //PHR - (pixelsize +Hspace)*MenuWidth - Hborder*2 - 
             -outlinewidth*2
 192      =1  #define OSDVSTART_MAX (PVR_-(18+11)*9 - 5*2 ) //  PVR - (Linesize+Vspace)*MENU_HEIGHT - Vborder*2  - outli
             -newidth*2
 193      =1  
 194      =1  #define OSDMENUX_MIN 1//0
 195      =1  #define OSDMENUX_MAX (OSDHSTART_MAX>>3)
 196      =1  #define OSDMENUX_50  (OSDHSTART_MAX>>4)
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 35  

 197      =1  
 198      =1  #define OSDMENUY_MIN 2//0
 199      =1  #define OSDMENUY_MAX (OSDVSTART_MAX>>2)
 200      =1  #define OSDMENUY_50  (OSDVSTART_MAX>>3)
 201      =1  
 202      =1  //--------------------------------------------------------------------
 203      =1  // OSD Menu Width, Height 
 204      =1  #ifdef E_Wintek
           =1 #define ICON_HIGH                               0x14
           =1 #else
 207      =1  #define ICON_HIGH                               0x0a
 208      =1  #endif
 209      =1  #define TOTAL_MAX_HIGHT                 9
 210      =1  
 211      =1  #define TOPMENU_WIDTH                   2
 212      =1  #define TOTAL_TOP_HEIGHT                5       // Include blank line!
 213      =1  
 214      =1  #define TOPMENU_HEIGHT                  4       
 215      =1  
 216      =1  #if (defined QVGA) && (defined SHARP_LQ050Q5DR01)
           =1 #define MENU_WIDTH                              17 //23//25 
           =1 #define TITLE_MAX_DESC                  17//25  //
           =1 #define BAR_LENGTH                              0
           =1 #else
 221      =1  #define MENU_WIDTH                              23//23//25 
 222      =1  #define TITLE_MAX_DESC                  23//25  //
 223      =1  #define BAR_LENGTH                              5//8
 224      =1  #endif
 225      =1  
 226      =1  #define MENU_HEIGHT                             7//6 
 227      =1  
 228      =1  #define BARNUM_LENGTH                   8       //11
 229      =1  #ifdef REFERENCE
           =1 #define BACK_COLOR                              BG_COLOR_CYAN
           =1 #define DEFAULT_COLOR                   BG_COLOR_CYAN   | CH_COLOR_WHITE
           =1 //#define ACTIVE_COLOR                  BG_COLOR_YELLOW | CH_COLOR_WHITE
           =1 #define TITLE_BACK_COLOR                BG_COLOR_MAGENTA
           =1 #define TITLE_COLOR                             TITLE_BACK_COLOR | CH_COLOR_YELLOW
           =1 #define COMMENT_COLOR                   TITLE_BACK_COLOR | CH_COLOR_WHITE
           =1 #define CURSOR_COLOR                    BG_COLOR_YELLOW | CH_COLOR_BLUE
           =1 #define OSD_INFO_COLOR                  DEFAULT_COLOR
           =1 #define BAR_COLOR                               DEFAULT_COLOR   
           =1 #define BAR_NUM_COLOR                   DEFAULT_COLOR
           =1 #define NUM_COLOR                               DEFAULT_COLOR
           =1 
           =1 #define OSDMENU_OUTLINE_COLOR   BG_COLOR_BLUE
           =1 
           =1 #else
 245      =1  #define BACK_COLOR                              BG_COLOR_CYAN
 246      =1  #define DEFAULT_COLOR                   BG_COLOR_CYAN | CH_COLOR_WHITE
 247      =1  //#define ACTIVE_COLOR                  BG_COLOR_YELLOW | CH_COLOR_WHITE
 248      =1  #define TITLE_BACK_COLOR                BG_COLOR_BLUE
 249      =1  #define TITLE_COLOR                             TITLE_BACK_COLOR | CH_COLOR_YELLOW
 250      =1  #define COMMENT_COLOR                   TITLE_BACK_COLOR | CH_COLOR_WHITE
 251      =1  #define CURSOR_COLOR                    BG_COLOR_YELLOW  | CH_COLOR_BLUE
 252      =1  #define OSD_INFO_COLOR                  BG_COLOR_CYAN    | CH_COLOR_GREEN
 253      =1  #define BAR_COLOR                               DEFAULT_COLOR   
 254      =1  #define BAR_NUM_COLOR                   DEFAULT_COLOR
 255      =1  #define NUM_COLOR                               DEFAULT_COLOR
 256      =1  
 257      =1  #define VER_COLOR               BG_COLOR_CYAN   | CH_COLOR_YELLOW   /// V1.1 03/07/07 simonsung
 258      =1  
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 36  

 259      =1  
 260      =1  #define OSDMENU_OUTLINE_COLOR   BG_COLOR_CYAN
 261      =1  #endif 
 262      =1  
 263      =1  
 264      =1  //DisplayedOSD
 265      =1  //              new       |     MENU    TVINFO          CC              INPUTINFO               PCINFO          RATINGINFO
 266      =1  //      current   |
 267      =1  //============|=========================================================================
 268      =1  //      MENU      |                     TVINFO          --              INPUTINFO               PCINFO          MENU + RATINGINFO       
 269      =1  //                        |                                              
 270      =1  //------------|-------------------------------------------------------------------------
 271      =1  //      TVINFO    |     MENU    TVINFO          --              INPUTINFO               PCINFO          TVINFO+RATING
 272      =1  //------------|-------------------------------------------------------------------------
 273      =1  //      CC                |     MENU->  TVINFO->                        INPUTINFO->             PCINFO          RATINGINFO
 274      =1  //                        |      CC              CC                                      CC                                              
 275      =1  //------------|-------------------------------------------------------------------------
 276      =1  //      INPUTINFO |     MENU    TVINFO          --              INPUTINFO               PCINFO          --
 277      =1  //------------|-------------------------------------------------------------------------
 278      =1  //      PCINFO    |     MENU    x                       x               INPUTINFO               PCINFO          x
 279      =1  //------------|-------------------------------------------------------------------------
 280      =1  //      RATINGINFO|     MENU    TVINFO     RATING   INPUTINFO           x                       RATINGINFO
 281      =1  //                                                                      
 282      =1  
 283      =1  //=======================================================================================
 284      =1  // OSD Menu Constant define.
 285      =1  //=======================================================================================
 286      =1  //Time type
 287      =1  #define _24H_TIME               1
 288      =1  
 289      =1  //for previous, next, parent or child
 290      =1  #define YES                             0xfe    
 291      =1  #define NO                              0
 292      =1  
 293      =1  
 294      =1  //#define OVERWRITE             0
 295      =1  //#define POPUP                 1
 296      =1  
 297      =1  //CursorMove
 298      =1  #define VERT                    0
 299      =1  #define HORI                    1
 300      =1  
 301      =1  //Type of MenuItem
 302      =1  #define OSDMENU                 1
 303      =1  #define CHOICEMENU              2
 304      =1  #define ACTION                  3
 305      =1  #define BAR                             4
 306      =1  #define NUMBER                  5
 307      =1  #define CHOICE                  6
 308      =1  #define ENUM_STRING             7 //YESNO                       7
 309      =1  #define CHOICE1                 8
 310      =1  #define TIME                    9
 311      =1  #define NUMBER_STRING   10
 312      =1  #define TEXT_STR              11   // V1.1 02/28/07 simonsung
 313      =1  
 314      =1  
 315      =1  //Bar type
 316      =1  #define LEFT_FILLED             1
 317      =1  #define RIGHT_FILLED    2
 318      =1  #define NO_FILLED               3
 319      =1  
 320      =1  //OSDmenu up and down key
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 37  

 321      =1  #define UP                                      1
 322      =1  #define DN                                      2
 323      =1  #define RIGHT                           3
 324      =1  #define LEFT                            4
 325      =1  
 326      =1  // Action Id
 327      =1  #define DISP_INFO                       0x16
 328      =1  
 329      =1  #define INPUTSELECTION                          0x2f
 330      =1  
 331      =1  #define CHANGE_TO_COMPOSITE                     (0x20|CH_TW2835)                        // Low nibble need to start from 1 
 332      =1  #define CHANGE_TO_SVIDEO                        (0x20|SVIDEO)                           // so that it match with COMPOSITE...
 333      =1  #define CHANGE_TO_COMPONENT                     (0x20|COMPONENT)                
 334      =1  #define CHANGE_TO_DTV                           (0x20|DTV)              
 335      =1  #define CHANGE_TO_TV                            (0x20|TV)                                       
 336      =1  #define CHANGE_TO_PC                            (0x20|PC)                                       
 337      =1  #define CHANGE_TO_DIGITALVGA            (0x20|DIGITALVGA)                       
 338      =1  #define CHANGE_TO_SCART                         (0x20|SCART)                            
 339      =1  
 340      =1  
 341      =1  #define OSDPOSITIONMODE     0x10
 342      =1  #define OSD_VPOS                        0x11
 343      =1  #define OSD_HPOS                        0x12
 344      =1  #define OSD_HALFTONE            0x13
 345      =1  #define OSD_DURATION            0x14
 346      =1  #define RESET_OSDVALUE          0x15
 347      =1  #define OSDLANG                         0x16
 348      =1  
 349      =1  #define PANEL_CONTRAST          0x58
 350      =1  #define PANEL_BRIGHTNESS        0x59
 351      =1  #define PANEL_HUE                       0x5a
 352      =1  #define PANEL_SHARPNESS         0x5b
 353      =1  #define PANEL_SATURATION        0x5c
 354      =1  
 355      =1  #define PC_VPOS                         0x43
 356      =1  #define PC_HPOS                         0x44
 357      =1  #define PC_HSIZE                        0x4d
 358      =1  
 359      =1  #define PC_CLOCK                        0x45
 360      =1  #define PC_PHASE                        0x46
 361      =1  
 362      =1  #define AUTOADJUST                      0x47
 363      =1  #define AUTOADJUST2                     0x48
 364      =1  //#define SAVE_AUTOADJUST               0x49
 365      =1  #define RESET_AUTOADJUST        0x4a
 366      =1  
 367      =1  #define PCCOLORADJUST           0x4b
 368      =1  #define SAVE_COLORADJUST        0x4c
 369      =1  //#define RESET_COLORADJUST     0x4d
 370      =1  
 371      =1  #define RESET_PCVALUE           0x4e
 372      =1  #define CameraOSD                       0x4f
 373      =1  
 374      =1  #define PC_COLOR_MODE           0x3f
 375      =1  #define PC_COLOR_TEMP           0x30
 376      =1  #define PC_COLOR_MODE1          0x31
 377      =1  #define PC_COLOR_MODE2          0x32
 378      =1  #define PC_COLOR_MODE3          0x33
 379      =1  #define PC_COLOR_USER           0x34
 380      =1  #define PC_COLOR_R                      0x35
 381      =1  #define PC_COLOR_G                      0x36
 382      =1  #define PC_COLOR_B                      0x37
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 38  

 383      =1  
 384      =1  #define VIDEO_MODE                      0x90
 385      =1  #define VIDEO_MODE1                     0x91
 386      =1  #define VIDEO_MODE2                     0x92
 387      =1  #define VIDEO_MODE3                     0x93
 388      =1  #define VIDEO_USER                      0x94
 389      =1  #define VIDEO_CONTRAST          0x95
 390      =1  #define VIDEO_BRIGHTNESS        0x96
 391      =1  #define VIDEO_SATURATION        0x97
 392      =1  #define VIDEO_HUE                       0x99
 393      =1  #define VIDEO_SHARPNESS         0x9a
 394      =1  #define VIDEO_BACKLIGHT         0x9c            // add new value 
 395      =1  #define RESET_VIDEOVALUE        0x9b
 396      =1  #ifdef E_Wintek
           =1 #define RESET_USERVALUE 0x9d
           =1 #endif
 399      =1  #define VIDEOPICTURE            0x9f
 400      =1  
 401      =1  #define INPUTSTD                        0x6f
 402      =1  #define CHANGE_TO_AUTO          0x60
 403      =1  #define CHANGE_TO_NTSC          (0x60 | NTSC)
 404      =1  #define CHANGE_TO_PAL           (0x60 | PAL)
 405      =1  #define CHANGE_TO_SECAM         (0x60 | SECAM)
 406      =1  #define CHANGE_TO_NTSC4         (0x60 | NTSC4)
 407      =1  #define CHANGE_TO_PALM          (0x60 | PALM)
 408      =1  #define CHANGE_TO_PALN          (0x60 | PALN)
 409      =1  #define CHANGE_TO_PAL60         (0x60 | PAL60)
 410      =1  
 411      =1  
 412      =1  
 413      =1  
 414      =1  #define CLOSED_CAPTION          0x7f
 415      =1  #define CLOSEDCAP_OFF           0x70
 416      =1  #define CLOSEDCAP_CC1           0x71
 417      =1  #define CLOSEDCAP_CC2           0x72
 418      =1  #define CLOSEDCAP_CC3           0x73
 419      =1  #define CLOSEDCAP_CC4           0x74
 420      =1  #define CLOSEDCAP_T1            0x75
 421      =1  #define CLOSEDCAP_T2            0x76
 422      =1  #define CLOSEDCAP_T3            0x77
 423      =1  #define CLOSEDCAP_T4            0x78
 424      =1  
 425      =1  #define TV_GUIDE                        0x8f
 426      =1  #define NO_VCHIP_LOCK           0
 427      =1  #define VCHIP_TV_Y                      1
 428      =1  #define VCHIP_TV_Y7                     2
 429      =1  #define VCHIP_TV_G                      3
 430      =1  #define VCHIP_TV_PG                     4
 431      =1  #define VCHIP_TV_14                     5
 432      =1  #define VCHIP_TV_MA                     6
 433      =1  #define PASSWORD                        0x87
 434      =1  #define NEW_PASSWORD            0x88
 435      =1  #define CHK_PASSWORD            0x89
 436      =1  #define RET_CHK_PASSWORD        0x8a
 437      =1  
 438      =1  #define MPAA_RATING                     0x9f
 439      =1  #define NO_MPAA_RATING          0
 440      =1  #define MPAA_G                          1
 441      =1  #define MPAA_PG                         2
 442      =1  #define MPAA_PG_13                      3
 443      =1  #define MPAA_R                          4
 444      =1  #define MPAA_NC_17                      5
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 39  

 445      =1  #define MPAA_X                          6
 446      =1  
 447      =1  #define TVINSTALL                       0xa0
 448      =1  #define SCAN_CHANNEL            0xa1
 449      =1  #define AIR_CABLE_TV            0xa3
 450      =1  #define STORE_CLEAR_TVCHN       0xa4
 451      =1  #define MTS                                     0xa5
 452      =1  #define EDIT_CHANNEL            0xa6
 453      =1          #define         MTS_STEREO                      0//0x10
 454      =1          #define         MTS_MONO                        1//0x11
 455      =1  
 456      =1  #define AUDIO_VOLUME            0xb7
 457      =1  
 458      =1  #if 0 //andy AWT8.4 20090811
           =1 
           =1 #define AUDIO_BALANCE           0xb9
           =1 #define AUDIO_BASS                      0xba
           =1 #define AUDIO_TREBLE            0xbb
           =1 
           =1 #define AUDIO_LOUDNESS          0xbc
           =1 #define AUDIO_EFFECT            0xbd
           =1 #define AUDIO_MUTE                      0xbe
           =1 #endif
 468      =1  
 469      =1  #define DayChoice           0xb8
 470      =1  #define CAMOSDONOFF         0xb9
 471      =1  #define GAUGEChoice         0xba
 472      =1  #define OsdLockChoice       0xbb
 473      =1  #define PRIORITYChoice      0xcA
 474      =1  #define DVRDisplay              0xcc
 475      =1  
 476      =1  #define CAMAONOFF                   0xc1
 477      =1  #define CAMBONOFF               0xc2
 478      =1  #define CAMCONOFF                   0xc3
 479      =1  #define CAMRONOFF                       0xc4
 480      =1  
 481      =1  #define IMAGEChoice         0xc5 
 482      =1  #define REARChoice          0xc6
 483      =1  #define JUMPChoice          0xc7
 484      =1  #define CAMOUTChoice        0xc8 
 485      =1  #define STIME_STEP                  0xc9
 486      =1  #define TriggerVGA                  0xcb
 487      =1  #define IMAGE_A_Choice         0xcd
 488      =1  #define IMAGE_B_Choice         0xce
 489      =1  #define IMAGE_C_Choice         0xcf
 490      =1  
 491      =1  
 492      =1  #define MANUAL_TUNE_CHANNEL     0xab
 493      =1  #define FINE_TUNE_CHANNEL       0xac
 494      =1  #define STORE_PALCHANNEL        0xad
 495      =1  
 496      =1  //#define CLEAR_TVCHN                   0xb0
 497      =1  //#define STORE_TVCHN                   0xb1
 498      =1  
 499      =1  #define WIDESCREEN                      0xc0
 500      =1  #define WIDESCREEN_NORMAL       0 
 501      =1  #define WIDESCREEN_WIDE         1 
 502      =1  #define WIDESCREEN_PANO         2
 503      =1  #define WIDESCREEN_FULL         3 
 504      =1  #define WIDESCREEN_ZOOM         4 
 505      =1  
 506      =1  #define SYSTEM_CLOCK            0xd1
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 40  

 507      =1  #define SYSTEM_CLOCK_H          0xd2
 508      =1  #define WAKEUP_TIME                     0xd3
 509      =1  #define WAKEUP_TIME_H           0xd4
 510      =1  #define WAKEUP_PR                       0xd5
 511      =1  #define OFF_TIME                        0xd6
 512      =1  #define OFF_TIME_H                      0xd7
 513      =1  #define SLEEP_TIMER                     0xd8
 514      =1  
 515      =1  #define Resolution                      0xe0
 516      =1  #define FPS                                     0xe1
 517      =1  #define Quality                         0xe2
 518      =1  #define RecordMode                      0xe3
 519      =1  #define RecordLength            0xe4
 520      =1  #define PreAlarmLength          0xe5
 521      =1  #define PostAlarmLength         0xe6
 522      =1  #define Apply                           0xe7
 523      =1  #define ManualRecordStart       0xe8
 524      =1  #define ManualRecordStop        0xe9
 525      =1  #define Snapshot                        0xea
 526      =1  #define FormatSD                        0xeb
 527      =1  #define AudioRecord                     0xec
 528      =1  #define FirmwareUpdate          0xed
 529      =1  #define ChangePassword          0xee
 530      =1  #define OverWrite                       0xef
 531      =1  
 532      =1  
 533      =1  
 534      =1  
 535      =1  #define Year                            0x20
 536      =1  #define Month                           0x21
 537      =1  #define Day                                     0x22
 538      =1  #define Hour                            0x23
 539      =1  #define Minute                          0x24
 540      =1  
 541      =1  #define DaylightSaving                          0x25
 542      =1  #define TimeBeginesMonth                        0x26
 543      =1  #define TimeBeginesWeek                         0x27
 544      =1  #define TimeBeginesTime                         0x28
 545      =1  #define StandardTimeBeginesMonth        0x29
 546      =1  #define StandardTimeBeginesWeek         0x2a
 547      =1  #define StandardTimeBeginesTime         0x2b
 548      =1  #define TimeZone                                        0x2c
 549      =1  #define FirstNumber                                     0x2d
 550      =1  #define SecondNumber                            0x2e
 551      =1  #define ThridNumber                                     0x2f
 552      =1  #define FourthNumber                            0x38
 553      =1  
 554      =1  
 555      =1  
 556      =1  #define OSDLANGI                        0xd9
 557      =1  #define OSDLANGII                       OSDLANGI+1
 558      =1  #define OSDLANGIII                      OSDLANGI+2
 559      =1  #define OSDLANGIV                       OSDLANGI+3
 560      =1  
 561      =1  
 562      =1  #define TOHIGHMENU                      0xf1
 563      =1  #define MOVECURSOR2FIRST        0xf2
 564      =1  #define RESET_ALL                       0xf3
 565      =1  #define EXITMENU                        0xf4
 566      =1  #define DVRParamApply           0xf5
 567      =1  #define DATETIMEApply           0xf6
 568      =1  
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 41  

 569      =1  
 570      =1  #define CHOICE1_VAL                     0xfc
 571      =1  #define CHOICE_VAL                      0xfd
 572      =1  #define BAR_VAL                         0xfe
 573      =1  #define NUM_VAL                         0xff
 574      =1  
 575      =1  #define CAMNumberChoice     0xa3 
 576      =1  #define PelcoChoice         0xa4
 577      =1  #define Baud_rateChoice         0xa5
 578      =1  
 579      =1  #endif  // __OSDMENU__
  18          #include "RegMap.h"
   1      =1  #ifndef __REGMAP__
   2      =1  #define __REGMAP__
   3      =1  
   4      =1  //-----------------------------------------------------------------------------
   5      =1  //                              Individual Decoder Registers 
   6      =1  //-----------------------------------------------------------------------------
   7      =1  
   8      =1  #define MCU_STOP_MODE   0xc8    // bit 7 is mcu stop, bit5 is MCU debug
   9      =1  
  10      =1  #define LAD0                    0xc9    // Low speed AD channel 0
  11      =1  #define LAD1                    0xca    // Low speed AD channel 1
  12      =1  
  13      =1  #define REG_PAGE                0xff
  14      =1  #define STATUS0                 0xd0
  15      =1  #define STATUS1                 0xd1
  16      =1  #define IRQ_EN1                 0xd2
  17      =1  #define IRQ_EN0                 0xd3
  18      =1  
  19      =1  //-----------------------------------------------------------------------------
  20      =1  //                              Individual Decoder Registers 
  21      =1  //-----------------------------------------------------------------------------
  22      =1  
  23      =1  #define DECODERADDRESS  TW88I2CAddress
  24      =1  
  25      =1  #define CVFMT                   0x1e    // Component Video Format
  26      =1  #define FBSHIFT                 0x38    // RGB Anti-Alias Filter/FB Shift Level
  27      =1  #define SHUE                    0x3e    // RGB Hue
  28      =1  #define SCONTRAST               0x3b    // RGB Contrast
  29      =1  #define SBRIGHT                 0x3a    // RGB Brightness
  30      =1  #define SCbGAIN                 0x3c    // RGB Cb Gain
  31      =1  #define SCrGAIN                 0x3d    // RGB Cb Gain
  32      =1  #define RGBCONTROL              0x36    // RGB Powerdown..
  33      =1  #define RGBMISC                 0x39
  34      =1  #define FBCONTRL                0x3F
  35      =1  
  36      =1  //#define OSD_ADJ                       0xce
  37      =1  #define PNLSHARPNESS    0x78    // Sharpness Control
  38      =1  #define OSDWINSTATUS    0x95
  39      =1  //-----------------------------------------------------------------------------
  40      =1  //                              Common Registers
  41      =1  //-----------------------------------------------------------------------------
  42      =1  #define CSTATUS                 0x01    // Chip Status
  43      =1  #define INFORM                  0x02    // Input Format
  44      =1  #define ACNTL                   0x06    // Analog Control
  45      =1  #define CROP_HI                 0x07    // Cropping High
  46      =1  #define VDELAY_LO               0x08    // Vertical Delay Low
  47      =1  #define VACTIVE_LO              0x09    // Vertical Active Low
  48      =1  #define HDELAY_LO               0x0a    // Horizontal Delay Low
  49      =1  #define HACTIVE_LO              0x0b    // Horizontal Active Low
  50      =1  #define CNTRL1                  0x0c    // Control 1
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 42  

  51      =1  
  52      =1  #define BRIGHT                  0x10    // Brightness Control
  53      =1  #define CONTRAST                0x11    // Contrast Control
  54      =1  #define SHARPNESS               0x12    // Sharpness Control
  55      =1  #define SAT_U                   0x13    // Chroma(U) Gain
  56      =1  #define SAT_V                   0x14    // Chroma(V) Gain
  57      =1  #define HUE                             0x15    // Hue Conrol
  58      =1  #define V_PEAKING               0x17    // Vertical Peaking
  59      =1  
  60      =1  #define CC_STATUS               0x1a    // CC/EDS Status
  61      =1  #define CC_DATA                 0x1b    // CC/EDS Data
  62      =1  #define SDT                             0x1c    // Standard Selection
  63      =1  #define SDTR                    0x1d    // Standard Recognition
  64      =1  
  65      =1  #define V_CONTROL2              0x29    // Vertical Control II
  66      =1  #define HFILTER                 0x2c
  67      =1  #define MISC1                   0x2d    // Miscellaneous Control 1
  68      =1  #define MISC2                   0x2e    // Miscellaneous Control 2
  69      =1  #define MISC3                   0x2f    // Miscellaneous Control 2
  70      =1  
  71      =1  #define VBI_CNTL2               0x34    // VBI control 2 - WSSEN
  72      =1  #define CC_ODDLINE              0x35    // CC Odd Line
  73      =1  
  74      =1  #define LADC0                   0xc9    //LADC Channel 0 Input Value 
  75      =1  #define LADC1                   0xca    //LADC Channel 1 Input Value 
  76      =1  
  77      =1  #define WriteDecoder(index, val)                WriteTW88( index, val )
  78      =1  #define ReadDecoder(index)                              ReadTW88(  index )
  79      =1  #endif // __REGMAP__
  19          #include "panel.h"
   1      =1  //PanelConfig
   2      =1  
   3      =1          #if   defined SXGA
           =1                                                 #define PHR_ 1280
           =1                                                 #define PVR_ 1024
           =1         #elif defined XGA       
           =1                                                 #define PHR_ 1024
           =1                                                 #define PVR_ 768
           =1         #elif defined SVGA
           =1                                                 #define PHR_ 800
           =1                                                 #define PVR_ 600
           =1         #elif defined VGA
           =1                                                 #define PHR_ 640
           =1                                                 #define PVR_ 480
           =1         #elif defined QVGA
           =1                                                 #define PHR_ 320
           =1                                                 #define PVR_ 240
           =1         #elif defined WXGA
           =1                                                 #define PHR_ 1280 //1366
           =1                                                 #define PVR_ 768
           =1         #elif defined WSVGA
           =1                                                 #define PHR_ 1024
           =1                                                 #define PVR_ 600
           =1         #elif defined WVGA
  25      =1                                                  #define PHR_ 800
  26      =1                                                  #define PVR_ 600
  27      =1          #elif defined WQVGA
           =1                                 //              #define PHR_ 960 //480
           =1                                 //              #define PVR_ 237
           =1                                                 #define PHR_ 480 //480
           =1                                                 #define PVR_ 240
           =1         #endif
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 43  

  33      =1  
  34      =1   
  35      =1  
  36      =1  /*
  37      =1  #define ACTIVE_LOW                      0
  38      =1  #define ACTIVE_HIGH                     1
  39      =1  
  40      =1  CODE struct PanelConfig {
  41      =1          unsigned                x_res,                                  y_res;
  42      =1          unsigned char   h_sync_min_pulse_width, v_sync_min_pulse_width;
  43      =1          unsigned                h_min_back_porch;
  44      =1          unsigned char   h_sync_polarity,                v_sync_polarity;
  45      =1          unsigned                dot_clock,                              max_clock;                      // in unit Mhz*10
  46      =1          unsigned char   pixs_per_clock;
  47      =1          unsigned char   DE_only;
  48      =1  } PanelConfig=
  49      =1          {
  50      =1          //----------------------------------------------------
  51      =1          #ifdef WXGA
  52      =1          //LG  LM171W01 WXGA
  53      =1          1280,                   768,
  54      =1          8,                              1,
  55      =1          8,
  56      =1          ACTIVE_LOW,             ACTIVE_LOW,
  57      =1          #ifdef DOUBLE_PIXEL
  58      =1          320,                    470,
  59      =1          2,
  60      =1          #else
  61      =1          650,                    950,                                    //65Mhz
  62      =1          1,
  63      =1          #endif
  64      =1          0
  65      =1          //----------------------------------------------------
  66      =1          #elif defined XGA
  67      =1          //Samsung  LT150x1-151 XGA
  68      =1          1024,                   768,
  69      =1          68,                             1,
  70      =1          80,
  71      =1          ACTIVE_LOW,             ACTIVE_LOW,
  72      =1          #ifdef DOUBLE_PIXEL
  73      =1          325,                    400,                                    //32.5Mhz
  74      =1          2,
  75      =1          #else
  76      =1          650,                    800,
  77      =1          1,
  78      =1          #endif
  79      =1          0
  80      =1          //----------------------------------------------------
  81      =1          #elif defined SXGA
  82      =1          //Samsung  LT170E2-131  SXGA
  83      =1          1280,                   1024,
  84      =1          1,                              1,
  85      =1          1,
  86      =1          ACTIVE_LOW,             ACTIVE_LOW,
  87      =1          #ifdef DOUBLE_PIXEL
  88      =1          540,                    540,                                    //54.5Mhz
  89      =1          2,
  90      =1          #else
  91      =1          1080,                   1080,
  92      =1          1,
  93      =1          #endif
  94      =1          0
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 44  

  95      =1          //----------------------------------------------------
  96      =1          #elif defined WSVGA                                             // Thosiba
  97      =1          1024,                   600,
  98      =1          8,                              3,
  99      =1          1,//80,                         
 100      =1          ACTIVE_LOW,             ACTIVE_LOW,
 101      =1          #ifdef DOUBLE_PIXEL
 102      =1          325,                    450,
 103      =1          2,
 104      =1          #else
 105      =1          500,                    550,                                    //50Mhz
 106      =1          1,
 107      =1          #endif
 108      =1          0
 109      =1          //----------------------------------------------------
 110      =1  
 111      =1          #elif defined SVGA
 112      =1          //NEC NL8060AC26-11 SVGA
 113      =1          800,                    600,
 114      =1          2,                              1,
 115      =1          13,
 116      =1          ACTIVE_LOW,             ACTIVE_LOW,
 117      =1          #ifdef DOUBLE_PIXEL
 118      =1          384,                    500,                                    //38.4MHz
 119      =1          2,
 120      =1          #else
 121      =1          670,                    1000,
 122      =1          1,
 123      =1          #endif
 124      =1          0
 125      =1          //----------------------------------------------------
 126      =1          #elif defined VGA
 127      =1          //NEC NL6448AC33        VGA                                     // OK with SetPanelRegisters
 128      =1          640,                    480,
 129      =1          10,                             1,
 130      =1          4,
 131      =1          ACTIVE_LOW,             ACTIVE_LOW,
 132      =1          #ifdef DOUBLE_PIXEL
 133      =1          130,                    150,                                    //25.2MHz
 134      =1          2,
 135      =1          #else
 136      =1          250,                    300,
 137      =1          1,
 138      =1          #endif
 139      =1          0
 140      =1          //----------------------------------------------------
 141      =1  
 142      =1          #elif defined WVGA
 143      =1          // Panasonic  EDTCB27QBF WVGA
 144      =1          800,                    480,
 145      =1          4,                              1,
 146      =1          7,
 147      =1          ACTIVE_LOW,             ACTIVE_LOW,
 148      =1          #ifdef DOUBLE_PIXEL
 149      =1          166,                    200,                                    //33.2MHz
 150      =1          2,
 151      =1          #else
 152      =1          332,                    360,                                    //33.2MHz
 153      =1          1,
 154      =1          #endif
 155      =1          0
 156      =1  
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 45  

 157      =1          //----------------------------------------------------
 158      =1          #else
 159      =1          // Default : XGA panel
 160      =1          // Samsung  LT150x1-151 XGA
 161      =1          1024,                   768,
 162      =1          68,                             1,
 163      =1          80,
 164      =1          ACTIVE_LOW,             ACTIVE_LOW,
 165      =1          #ifdef DOUBLE_PIXEL
 166      =1          325,                    400,                                    //32.5Mhz
 167      =1          2,
 168      =1          #else
 169      =1          650,                    800,                                    //32.5Mhz
 170      =1          1,
 171      =1          #endif
 172      =1          0
 173      =1          #endif
 174      =1          };
 175      =1  
 176      =1  */
  20          #ifdef REFERENCE
              #else //REFERENCE
  22          #include "stdlib.h"
   1      =1  /*--------------------------------------------------------------------------
   2      =1  STDLIB.H
   3      =1  
   4      =1  Standard functions.
   5      =1  Copyright (c) 1988-2005 Keil Elektronik GmbH and Keil Software, Inc.
   6      =1  All rights reserved.
   7      =1  --------------------------------------------------------------------------*/
   8      =1  
   9      =1  #ifndef __STDLIB_H__
  10      =1  #define __STDLIB_H__
  11      =1  
  12      =1  #ifndef _SIZE_T
  13      =1   #define _SIZE_T
  14      =1   typedef unsigned int size_t;
  15      =1  #endif
  16      =1  
  17      =1  #ifndef NULL
  18      =1   #define NULL ((void *) 0L)
  19      =1  #endif
  20      =1  
  21      =1  #ifndef _WCHAR_T_DEFINED_
  22      =1  #define _WCHAR_T_DEFINED_
  23      =1  typedef char wchar_t;
  24      =1  #endif
  25      =1  
  26      =1  
  27      =1  #pragma SAVE
  28      =1  #pragma REGPARMS
  29      =1  
  30      =1  extern int    abs  (int   val);
  31      =1  extern long  labs  (long  val);
  32      =1  
  33      =1  extern float atof (char *s1);
  34      =1  extern long  atol (char *s1);
  35      =1  extern int   atoi (char *s1);
  36      =1  extern int   rand ();
  37      =1  extern void  srand (int);
  38      =1  
  39      =1  extern float         strtod  (char *, char **);
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 46  

  40      =1  extern long          strtol  (char *, char **, unsigned char);
  41      =1  extern unsigned long strtoul (char *, char **, unsigned char);
  42      =1  
  43      =1  #define _MALLOC_MEM_    xdata
  44      =1  
  45      =1  extern void init_mempool          (void _MALLOC_MEM_ *p, unsigned int size);
  46      =1  extern void _MALLOC_MEM_ *malloc  (unsigned int size);
  47      =1  extern void free                  (void _MALLOC_MEM_ *p);
  48      =1  extern void _MALLOC_MEM_ *realloc (void _MALLOC_MEM_ *p, unsigned int size);
  49      =1  extern void _MALLOC_MEM_ *calloc  (unsigned int size, unsigned int len);
  50      =1  
  51      =1  #pragma RESTORE
  52      =1  
  53      =1  #endif
  23          #endif //REFERENCE
  24          //================== Input Measurement ====================================
  25          #ifdef REFERENCE
              #else // REFERENCE
  27          static WORD  LastHPN=0;
  28          BYTE cLastSyncLoss= 0;
  29          #endif // REFERENCE
  30          static WORD  LastVPN=0;
  31          static DWORD LastIHF=0;
  32          static WORD  LastIVF=0;
  33          
  34          BYTE    VPosMax, VPosCurr, HPosMax, HPosCurr;
  35          
  36          DWORD   RGBPeak, PhaseRGB, RGBMin;
  37          
  38          #ifdef WIDE_SCREEN
  39          extern BYTE WideScreenMode;
  40          #endif //WIDE_SCREEN
  41          
  42          CODE BYTE PcModeStr[][15] = {
  43              "720x400 70Hz",     // 0
  44          
  45              "640x400 80Hz",     // 1
  46              "640x350 85Hz",     // 2
  47              "720x400 85Hz",     // 3
  48          
  49              "640x480 60Hz",     // 4
  50              "640x480 66Hz",     // 5
  51              "640x480 70Hz",     // 6
  52              "640x480 72Hz",     // 7
  53              "640x480 75Hz",     // 8
  54              "640x480 85Hz",     // 9
  55          
  56              "800x600 56Hz",     // 10
  57              "800x600 60Hz",     // 11
  58              "800x600 70Hz",     // 12
  59              "800x600 72Hz",     // 13
  60              "800x600 75Hz",     // 14
  61              "800x600 85Hz",     // 15
  62              
  63              "832x624 75Hz",     // 16
  64          
  65              "1024x768 60Hz",    // 17
  66              "1024x768 70Hz",    // 18
  67              "1024x768 72Hz",    // 19
  68              "1024x768 75Hz",    // 20
  69              "1024x768 85Hz",    // 21
  70          
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 47  

  71              "1152x864 60Hz",    // 22
  72              "1152x864 70Hz",    // 23
  73              "1152x864 75Hz",    // 24
  74              
  75                  "1280x1024 60Hz",       // 25
  76              "1280x1024 70Hz",   // 26
  77              "1280x1024 75Hz",   // 27
  78          
  79              "RGB 480p 60Hz",    // 28
  80              "RGB 720p 60Hz",    // 29
  81              "RGB 720p 50Hz",    // 30
  82              "RGB 1080i 60Hz",   // 31
  83              "RGB 1080i 50Hz",   // 32
  84              "RGB 1080i 50Hz",   // 33
  85              "RGB 480i 60Hz",    // 34
  86              "RGB 576i 50Hz",    // 35
  87              "RGB 576p 50Hz",    // 36
  88          
  89              "YPbPr 480p",       // 37
  90              "YPbPr 720p",       // 38
  91              "YPbPr 720p50",     // 39
  92              "YPbPr 1080i",      // 40
  93              "YPbPr 1080i50A",   // 41
  94              "YPbPr 1080i50B",   // 42
  95              "YPbPr 480i",       // 43
  96              "YPbPr 576i",       // 44
  97              "YPbPr 576p",       // 45
  98          
  99                  ""
 100          };
 101          
 102          //-------------------------------------------------------------------------
 103          extern CODE struct RegisterInfo UserRange;
 104          
 105          extern  IDATA WORD  IVF;
 106          extern  IDATA DWORD     IHF;
 107          extern            BYTE  DebugLevel;
 108          extern        bit   Range4Coarse;
 109          extern  DATA  WORD  tm01, tm001;
 110          extern  DATA  BYTE  tic01;
 111          extern  DATA  WORD  tic_pc;
 112          
 113                          BYTE PcMode;
 114          
 115          #if defined WVGA || defined WSVGA || defined WXGA || defined VGA_PRIMEVIEW
 116                          bit   Flag4Bypass=0;        // 0:non-bypass
 117          #else //defined WVGA || defined WSVGA || defined WXGA || defined VGA_PRIMEVIEW
                              bit   Flag4Bypass=0;//1;                // 1:bypass 
              #endif //defined WVGA || defined WSVGA || defined WXGA || defined VGA_PRIMEVIEW
 120          
 121          //-----------------------------------------------------------------------------
 122          extern  CODE struct _PCMDATA  PCMDATA[];
 123          
 124          extern CODE BYTE *CheckPCCableStr[];
 125          extern CODE BYTE *CheckDTVCableStr[];
 126          extern CODE BYTE *OutOfRangeStr[] ;
 127          
 128          
 129          CODE BYTE DTVMode[] = { EE_YPbPr_480I, EE_YPbPr_576I, EE_YPbPr_480P, EE_YPbPr_576P,
 130                                                          EE_YPbPr_1080I, EE_YPbPr_720P, EE_PC_UNKNOWN, EE_PC_UNKNOWN };
 131          //#define DetectDTVInputSource()        DTVMode[ReadADC(0xC1)& 0x07]
 132          
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 48  

 133          //=============================================================================
 134          BYTE Measure_VPN_IHF( WORD *p_vpn, DWORD *p_ihf)
 135          {
 136   1              DWORD ppf;
 137   1              WORD  hpn;
 138   1      
 139   1      
 140   1              if( !MeasureAndWait(3) ) {
 141   2              
 142   2                      #ifdef DEBUG_PC
                              dPuts("\r\n  ** Error at Get_VPN_IHF");
                              #endif //DEBUG_PC
 145   2                      return 0;
 146   2              }
 147   1      
 148   1              ppf    = GetPPF();                      //
 149   1              *p_vpn = GetVPN();                      //
 150   1              hpn    = GetHPN();                      // HPN = H Period Num
 151   1      
 152   1              *p_ihf = (ppf + hpn/2) / hpn;                   // IHF = PPF / HPN 
 153   1      
 154   1              #ifdef DEBUG_PC_MEAS
                      dPrintf("\r\n  *** PPF=%ld   HPN=%4d", ppf, hpn);
                      dPrintf("  --> VPN=%4d   IHF=%ld ", *p_vpn, *p_ihf);
                      dPrintf("  IVF=%d", (WORD)((*p_ihf + *p_vpn/2) / *p_vpn) );
              
                      dPrintf(" [%d, %ld]", LastVPN, LastIHF);
              
                      #endif // DEBUG_PC_MEAS
 162   1      
 163   1              return 1;
 164   1      }
 165          #ifdef SUPPORT_DTV
              BYTE    DetectDTVInputSource( void )
              {
                      WORD    vpn;
                      DWORD   ihf;
              
                      if ( Measure_VPN_IHF( &vpn, &ihf) ) {
                              if (( ihf > 15634 ) && ( ihf < 15834 ))                         //15734
                                      return EE_YPbPr_480I;
                              else if (( ihf > 31369 ) && ( ihf < 31569 ))            // 31469
                                      return EE_YPbPr_480P;
                              else if (( ihf > 15525 ) && ( ihf < 15725 ))                    // 15625
                                      return EE_YPbPr_576I;
                              else if (( ihf > 31150 ) && ( ihf < 31350 )) {          // 31250 576P & 1080I50B
                                      WriteTW88(0x54, 0);
                                      MeasureAndWait(3);
                                      vpn = GetVstart();
                                      if ( vpn < 3 ) return EE_YPbPr_1080I50B;
                                      else return EE_YPbPr_576P;
                                      /*
                                      ChangeInternPLL(PCMDATA[EE_YPbPr_1080I50B].PPF * 100000L);      // Set PPF (Internal PLL) as 0x948      for 1080I
             -50B
                                      WriteTW88( 0x40, 0xA4 );                                                // clear invert field
                                      WriteTW88(0x45, 0xD2);                                                  // Field detection start=128, end=1664
                                      WriteDecoder(0x06, 0x80);                                               // software reset
                                      delay(100);
                                      WriteDecoder(0x5b, 1);                                                  // ODD field measure
                                      delay(100);
                                      vpn = GetVPN();
                                      #ifdef DEBUG_DTV
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 49  

                                      Printf("\r\nODD field VPN: %d", vpn);
                                      #endif
                                      if ( !vpn )     return EE_YPbPr_576P;
                                      WriteDecoder(0x06, 0x80);                                               // software reset
                                      delay(100);
                                      WriteDecoder(0x5b, 1);                                                  // EVEN field measure
                                      delay(100);
                                      vpn = GetVPN();
                                      #ifdef DEBUG_DTV
                                      Printf("\r\nEVEN field VPN: %d", vpn);
                                      #endif
                                      if ( !vpn )     return EE_YPbPr_576P;
                                      return EE_YPbPr_1080I50B;
                                      */
                              }
                              else if (( ihf > 36500 ) && ( ihf < 38500 ))                    // 37500
                                      return EE_YPbPr_720P50;
                              else if (( ihf > 44000 ) && ( ihf < 46000 ))                    // 45000
                                      return EE_YPbPr_720P;
                              else if (( ihf > 32750 ) && ( ihf < 34750 ))                    // 33750
                                      return EE_YPbPr_1080I;
                              else if (( ihf > 27125 ) && ( ihf < 29125 ))                    // 28125
                                      return EE_YPbPr_1080I50A;
                              else
                                      return EE_PC_UNKNOWN;
                      }
              
                      return (EE_PC_UNKNOWN);         // cannot find correct mode
              }
              #endif
 224          void ResetPCValue(void)
 225          {
 226   1              SaveDefaultPCDataEE();
 227   1              if( DetectAndSetForVGAInput(3)==FALSE )         // HHY 1.44 change 1 to 3
 228   1                      CloseOSDMenu();
 229   1      
 230   1              LCDPowerON(0);
 231   1      }
 232          
 233          void StartNewDetect(void)
 234          {
 235   1              ClearEnDet();
 236   1              MeasureAndWait(3);
 237   1              SetEnDet();
 238   1      
 239   1              WriteTW88(0xd0, 0xff);
 240   1              WriteTW88(0xd1, 0xff);
 241   1      }
 242          /*
 243          WORD gap(WORD a, WORD b)
 244          {
 245                  if( a>b ) return a-b;
 246                  return b-a;
 247          }
 248          */
 249          WORD GetCoarseValue(void)
 250          {
 251   1              return GetCoarse();
 252   1      }
 253          
 254          WORD SetPCCoarseValue(BYTE val)         //1:Up  2:Dn
 255          {
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 50  

 256   1              WORD    coarse;
 257   1      
 258   1      //      WriteADC(0xc1, 0x30);
 259   1              WriteADC(0xc0, 0x38);
 260   1      
 261   1              coarse = GetCoarse();
 262   1              if( val==UP ) coarse++;
 263   1              else coarse--;
 264   1      
 265   1              SetCoarse(coarse);
 266   1              SaveCoarseEE(PcMode);   // HHY 1.33
 267   1      
 268   1              StartNewDetect();
 269   1      
 270   1      //      WriteADC(0xc1, 0x20);
 271   1              WriteADC(0xc0, 0x28);
 272   1              return coarse;
 273   1      }
 274          
 275          
 276          BYTE SetPhaseValue(BYTE val)
 277          {
 278   1              BYTE    phase;
 279   1      
 280   1              phase = GetPhaseCurrent();
 281   1      
 282   1              if( val==UP ) {
 283   2                      if( phase>=31 ) return phase;
 284   2                      else phase++;
 285   2              }
 286   1              else {
 287   2                      if( phase==0 ) return phase;
 288   2                      else phase--;
 289   2              }
 290   1      
 291   1              SetPhase(phase);
 292   1              SavePhaseEE(PcMode);    // HHY 1.33
 293   1      
 294   1              return phase;
 295   1      }
 296          
 297          BYTE IsDTVInput(void)
 298          {
 299   1              if( GetInputSelection()==DTV || GetInputSelection()==PC ) {
 300   2                      if( PcMode>=EE_RGB_480P && PcMode<=EE_YPbPr_576P ) return 1;
 301   2              }
 302   1              return 0;
 303   1      }
 304          
 305          IDATA struct RegisterInfo VPositionRange={0,100, 50};
 306          
 307          //=============================================================================
 308          //                    PC Screen Position Move Functions
 309          //=============================================================================
 310          void MoveActiveVpos(BYTE dir)           //=== Up
 311          {
 312   1              char add;
 313   1      
 314   1              if( dir==UP ) {
 315   2                      if( VPosCurr>=VPosMax ) return;
 316   2                      add = 1;
 317   2              }
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 51  

 318   1              else {
 319   2                      if( VPosCurr==0 ) return;
 320   2                      add = -1;
 321   2              }
 322   1              VPosCurr += add;
 323   1      
 324   1              if( IsBypassmode() ) {
 325   2                      SetVactiveStart( GetVactiveStart()+add );
 326   2                      SaveVactiveEE(PcMode);                                          // HHY 1.33
 327   2              }
 328   1              else {
 329   2                      SetVactiveStart( GetVactiveStart()+add );
 330   2                      SaveVactiveEE(PcMode);                                          // HHY 1.33
 331   2                      SetVBackPorch( GetVBackPorch()+add );           // A6
 332   2                      SaveVBackPorchEE(PcMode);                                       // HHY 1.33
 333   2              }
 334   1      }
 335          
 336          void MoveActiveHpos(BYTE dir)           //=== Right
 337          {
 338   1              char add;
 339   1              WORD hstart, hend;
 340   1      
 341   1              if( dir==UP ) {
 342   2                      if( HPosCurr>=HPosMax ) return;
 343   2                      add = 1;
 344   2              }
 345   1              else {
 346   2                      if( HPosCurr==0 ) return;
 347   2                      add = -1;
 348   2              }
 349   1              HPosCurr += add;
 350   1      
 351   1              hstart = GetHactiveStart();
 352   1              hend   = GetHactiveEnd();
 353   1      
 354   1              hstart += add;
 355   1              hend   += add;
 356   1              SetHactiveStart(hstart);
 357   1              SetHactiveEnd(hend);
 358   1      
 359   1              SaveHactiveEE(PcMode);          // HHY 1.33
 360   1      }
 361          
 362          BYTE GetVPosition(void)
 363          {
 364   1              int newv;
 365   1      
 366   1              VPositionRange.Max = VPosMax;
 367   1              VPositionRange.Default = VPosMax/2;
 368   1              Mapping2( VPosCurr, &VPositionRange, &newv, &UserRange );
 369   1      
 370   1              return newv;
 371   1      }
 372          
 373          BYTE SetVPosition(BYTE val)             //0:UP, 1:DOWN
 374          {
 375   1              int newv;
 376   1      
 377   1              MoveActiveVpos(val);
 378   1      
 379   1              VPositionRange.Max = VPosMax;
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 52  

 380   1              VPositionRange.Default = VPosMax/2;
 381   1              Mapping2( VPosCurr, &VPositionRange, &newv, &UserRange );
 382   1              
 383   1              return newv;
 384   1      }
 385          
 386          BYTE GetHPosition(void)
 387          {
 388   1              return HPosCurr;
 389   1      }
 390          
 391          BYTE SetHPosition(BYTE val)
 392          {
 393   1              MoveActiveHpos(val);
 394   1      
 395   1              return HPosCurr;
 396   1      }
 397          //=============================================================================
 398          //              Phase Measurement
 399          //                      Return : PhaseBlue, PhaseGreen, PhaseRed                                                                                   
 400          //=============================================================================
 401          DWORD ReadOut4(void)
 402          {
 403   1              BYTE    i;
 404   1              DWORD   dat=0;
 405   1      
 406   1              for(i=0; i<4; i++) {
 407   2                      dat <<= 8;
 408   2                      dat |= (DWORD)ReadTW88(0x5a-i);
 409   2              }
 410   1              return dat;
 411   1      }
 412          
 413          BYTE GetPhaseRGB(void)          // HHY 1.10 BYTE return 
 414          {
 415   1              static bit flag=0;
 416   1              DWORD _RGB;
 417   1      
 418   1              #ifdef DEBUG_PC_MEAS
                      BYTE sign;
                      #endif // DEBUG_PC_MEAS
 421   1      
 422   1              _RGB = PhaseRGB;
 423   1      
 424   1              if( !MeasureAndWait(3) ) {
 425   2                      return 0;               //LJY001219
 426   2              }
 427   1      
 428   1              WriteTW88(0x5b, 0x08);                  // Read Phase B
 429   1              PhaseRGB  = ReadOut4();
 430   1      
 431   1              WriteTW88(0x5b, 0x18);                  // Read Phase G
 432   1              PhaseRGB += ReadOut4();
 433   1      
 434   1              WriteTW88(0x5b, 0x28);                  // Read Phase R
 435   1              PhaseRGB += ReadOut4();
 436   1      
 437   1              #ifdef DEBUG_PC_MEAS
                      if( PhaseRGB  >= _RGB ) sign = '+'; else sign = '-';
                      dPrintf("(%c%lu)", (WORD)sign, PhaseRGB);
                      dPrintf("(%c%lu), %d", (WORD)sign, PhaseRGB, GetHstart() );
                      #endif //DEBUG_PC_MEAS
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 53  

 442   1      
 443   1              if( PhaseRGB==_RGB ) {                  // NO INPUT ???
 444   2                      dPuts("\r\n??? SYNC loss...");
 445   2                      if(flag) {
 446   3                              flag = 0;
 447   3                              return 0;
 448   3                      }
 449   2                      else flag = 1;
 450   2              }
 451   1              else flag = 0;
 452   1      
 453   1              return 1;
 454   1      }
 455          
 456          //============================================================================
 457          //                      Detect Input source for PC
 458          //============================================================================
 459          /*
 460          BYTE DetectPCInputSource(void)
 461          {
 462                  BYTE     mode, PCMode;
 463          
 464                  mode = ReadADC(0xC1)& 0x07;     // 8816 0x1c1 for LLPLL input detection register
 465          
 466                  #ifdef DEBUG_PC
 467                  dPrintf("\n +++DetectPCInputSource ==> Detect from ADC : 0x%2x", (WORD)mode);
 468                  #endif
 469                  switch(mode) {
 470                          case 1: PCMode = EE_RGB_480I;   break;
 471                          case 2: PCMode = EE_RGB_576I;  break;
 472                          case 3: PCMode = EE_RGB_480P;   break;
 473                          case 4: PCMode = EE_RGB_576P;   break;
 474                          case 5: PCMode = EE_RGB_720P;   break;
 475                          default:PCMode = EE_PC_UNKNOWN; break;
 476                  }
 477          
 478                  return PCMode;
 479          }
 480          */
 481          
 482          //============================================================================
 483          //                      Determine InputSource Format based on VPN
 484          //============================================================================
 485          //      Input   VPN
 486          //      Return  PcMode
 487          //                      InputSource (PC_XGA, PC_SVGA, PC_VGA)
 488          
 489          BYTE DecideVGAInputSource(WORD vpn, WORD ivf)
 490          {
 491   1              BYTE _PcMode;
 492   1      
 493   1              #ifdef DEBUG_PC_MEAS
                      dPrintf("\r\n-> DecideVGAInputSource: vpn:%4xh, ivf:%4xh", vpn, ivf);
                      #endif // DEBUG_PC_MEAS
 496   1      
 497   1      
 498   1              _PcMode     = EE_PC_UNKNOWN;
 499   1              //InputSource = UNKNOWN;
 500   1      
 501   1              /*              comment out for there is no DTV type on PC input mode 10/05/2007
 502   1              _PcMode = DetectDTVInputSource();
 503   1              #ifdef DEBUG_PC
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 54  

 504   1              dPrintf("\r\n-----> DetectDTVInputSource(): _PcMode:%d", (WORD)_PcMode);
 505   1              #endif
 506   1              if(_PcMode != EE_PC_UNKNOWN ) return _PcMode;
 507   1              */
 508   1              //====================== PC DOS ================================
 509   1              if( vpn >= 440  && vpn <= 460 ) { 
 510   2                      #ifdef DEBUG_PC_MEAS
                              dPrintf("\r\n=== PC DOS ===: vpn:%4d, ivf:%4d", (WORD)vpn, (WORD)ivf);
                              #endif //DEBUG_PC_MEAS
 513   2                      //InputSource = PC_DOS1;  
 514   2                      switch( ivf ) {
 515   3                      case 69: case 70: case 71:      _PcMode = EE_DOS;                       break;
 516   3                      
 517   3                      case 84: case 85: case 86: case 87:
 518   3                              GetHpnVpn(1);
 519   3                      #ifdef REFERENCE
                                      if( ReadTW88(0x40) & 0x02 ) 
                                              _PcMode = EE_SP1;                       
                                      else
                                              _PcMode = EE_SP2;
                              #else // REFERENCE
 525   3                              if( ReadTW88(0x40) & 0x02 )
 526   3                              {
 527   4                                      if(IHF >= 37910 && IHF <= 38000)
 528   4                                              _PcMode = EE_SP3;       
 529   4                                      else if((IHF >= 37850 && IHF <= 37900) && 
 530   4                                                      (GetHPN <= 1360 && GetHPN >= 1330))
 531   4                                              _PcMode = EE_SP2;
 532   4                                      else
 533   4                                              _PcMode = EE_SP1;       
 534   4                              }
 535   3                              else
 536   3                                      _PcMode = EE_SP2;       
 537   3                      #endif //REFERENCE
 538   3                              break;
 539   3      
 540   3                      default:                                        _PcMode = EE_PC_UNKNOWN;        break;
 541   3      
 542   3                      }
 543   2              }
 544   1              //====================== PC VGA, DTV 480P ======================
 545   1              else if( vpn>=490  && vpn<=540 ) { 
 546   2      
 547   2                      #ifdef DEBUG_PC_MEAS
                              dPrintf("\r\n=== PC VGA, DTV 480P ===: vpn:%4d, ivf:%4d", (WORD)vpn, (WORD)ivf);
                              #endif //DEBUG_PC_MEAS
 550   2                      switch( ivf ) {
 551   3                              case 59: case 60: case 61:
 552   3                                      _PcMode = EE_VGA_60;    break;
 553   3                              case 65: case 66: case 67:      _PcMode = EE_VGA_66;            break;
 554   3                              case 69: case 70: case 71:      _PcMode = EE_VGA_70;            break;
 555   3                      case 72: case 73:                       _PcMode = EE_VGA_72;            break;
 556   3                              case 74: case 75: case 76:      _PcMode = EE_VGA_75;            break;
 557   3                              case 83:
 558   3                              case 84: case 85: case 86:      _PcMode = EE_VGA_85;            break;
 559   3                              default:                                        _PcMode = EE_PC_UNKNOWN;        break;
 560   3                      }
 561   2              }
 562   1              //====================== PC SVGA ===============================
 563   1              else if( vpn>=610 && vpn<=680+30 ) {
 564   2                      #ifdef DEBUG_PC_MEAS
                              dPrintf("\r\n=== PC SVGA ===: vpn:%4d, ivf:%4d", (WORD)vpn, (WORD)ivf);
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 55  

                              #endif //DEBUG_PC_MEAS
 567   2                      //InputSource = PC_SVGA;        
 568   2                      switch( ivf ) {
 569   3                              case 49: case 50: case 51: _PcMode = EE_RGB_576P;               break;
 570   3                      
 571   3                              case 55: case 56: case 57:      _PcMode = EE_SVGA_56;           break;
 572   3                              case 59: case 60: case 61: case 62: case 63: case 64:
 573   3                                                                                      _PcMode = EE_SVGA_60;           break;
 574   3                              case 69: case 70: case 71:      _PcMode = EE_SVGA_70;           break;
 575   3                          case 72: case 73:                   _PcMode = EE_SVGA_72;           break;
 576   3                              case 74: case 75: case 76:      _PcMode = EE_SVGA_75;           break;
 577   3      
 578   3                              case 83:
 579   3                              case 84: case 85: case 86:      _PcMode = EE_SVGA_85;           break;
 580   3                      
 581   3                              default:                                        _PcMode = EE_PC_UNKNOWN;        break;
 582   3                      }
 583   2              }
 584   1      
 585   1              //====================== DTV 720P ==============================
 586   1              else if(vpn>=751-20 && vpn<=751+30) {
 587   2                      #ifdef DEBUG_PC_MEAS
                              dPrintf("\r\n=== DTV 720P ===: vpn:%4d, ivf:%4d", (WORD)vpn, (WORD)ivf);
                              #endif //DEBUG_PC_MEAS
 590   2                      #ifdef REFERENCE
                              if( ivf>=55) 
                              #else //REFERENCE
 593   2                      if( ivf>=55  && ivf<=65) 
 594   2                      #endif //REFERENCE
 595   2                      {
 596   3                              _PcMode = EE_RGB_720P;
 597   3                      }
 598   2                      #ifdef REFERENCE
                              else
                              #else //REFERENCE
 601   2                      else if( ivf>=45  && ivf<=55) 
 602   2                      #endif //REFERENCE
 603   2                      {
 604   3                              _PcMode = EE_RGB_720P50;
 605   3                      }
 606   2              }
 607   1              //====================== DTV 1080i =============================
 608   1              else if(vpn>=563-10 && vpn<=563+10) {
 609   2                      #ifdef DEBUG_PC_MEAS
                              dPrintf("\r\n=== DTV 1080i ===: vpn:%4d, ivf:%4d", (WORD)vpn, (WORD)ivf);
                              #endif //DEBUG_PC_MEAS
 612   2                      if( ivf>=55 ) {
 613   3                              _PcMode = EE_RGB_1080I;
 614   3                      }
 615   2                      else {
 616   3                              _PcMode = EE_RGB_1080I50A;
 617   3                      }
 618   2              }
 619   1              //====================== DTV 480i ==============================
 620   1              else if(vpn>=264-40 && vpn<=264+35) {
 621   2                      #ifdef DEBUG_PC_MEAS
                              dPrintf("\r\n=== DTV 480i ===: vpn:%4d, ivf:%4d", (WORD)vpn, (WORD)ivf);
                              #endif //DEBUG_PC_MEAS
 624   2                      _PcMode = EE_RGB_480I;
 625   2              }
 626   1              //====================== DTV 576i ==============================
 627   1              else if(vpn>=314-14 && vpn<=314+50) {
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 56  

 628   2                      #ifdef DEBUG_PC_MEAS
                              dPrintf("\r\n=== DTV 576i ===: vpn:%4d, ivf:%4d", (WORD)vpn, (WORD)ivf);
                              #endif //DEBUG_PC_MEAS
 631   2                      _PcMode = EE_RGB_576I;
 632   2              }
 633   1      
 634   1              //====================== PC XGA ================================
 635   1              else if( vpn>=790 && vpn<=820 ) {
 636   2                      #ifdef DEBUG_PC_MEAS
                              dPrintf("\r\n=== PC XGA ===: vpn:%4d, ivf:%4d", (WORD)vpn, (WORD)ivf);
                              #endif //DEBUG_PC_MEAS
 639   2                      //InputSource = PC_XGA; 
 640   2                      switch( ivf ) {
 641   3                      case 59: case 60: case 61:      _PcMode = EE_XGA_60;            break;
 642   3                      case 69: case 70: case 71:      _PcMode = EE_XGA_70;            break;
 643   3                               case 72: case 73:      _PcMode = EE_XGA_72;            break;
 644   3                      case 74: case 75: case 76:      _PcMode = EE_XGA_75;            break;
 645   3                      case 84: case 85: case 86:      _PcMode = EE_XGA_85;            break;
 646   3                      default:                                        _PcMode = EE_PC_UNKNOWN;        break;
 647   3                      }
 648   2              }
 649   1              //====================== PC 1152x864 ===========================
 650   1              else if( vpn>=850 && vpn<=1000 ) {
 651   2                      #ifdef DEBUG_PC_MEAS
                              dPrintf("\r\n=== PC 1152x864 ===: vpn:%4d, ivf:%4d", (WORD)vpn, (WORD)ivf);
                              #endif //DEBUG_PC_MEAS
 654   2                      //InputSource = PC_SXGA;        
 655   2                      switch( ivf ) {
 656   3                      case 59: case 60: case 61:      _PcMode = EE_1152_60;           break;
 657   3                      case 69: case 70: case 71:      _PcMode = EE_1152_70;           break;
 658   3                      case 74: case 75: case 76:      _PcMode = EE_1152_75;           break;
 659   3                      default:                                        _PcMode = EE_PC_UNKNOWN;        break;
 660   3                      }
 661   2              }
 662   1      
 663   1              //====================== PC SXGA ===============================
 664   1              else if( vpn>=1024 && vpn<=1600 ) {
 665   2                      #ifdef DEBUG_PC_MEAS
                              dPrintf("\r\n=== PC SXGA ===: vpn:%4d, ivf:%4d", (WORD)vpn, (WORD)ivf);
                              #endif //DEBUG_PC_MEAS
 668   2                      //InputSource = PC_SXGA;        
 669   2                      switch( ivf ) {
 670   3                      case 59: case 60: case 61:      _PcMode = EE_SXGA_60;           break;
 671   3                      case 69: case 70: case 71:      _PcMode = EE_SXGA_70;           break;
 672   3                      case 74: case 75: case 76:      _PcMode = EE_SXGA_75;           break;
 673   3                      default:                                        _PcMode = EE_PC_UNKNOWN;        break;
 674   3                      }
 675   2              }
 676   1      
 677   1              #ifdef DEBUG_PC_MEAS
                      if( _PcMode == EE_PC_UNKNOWN )
                              dPrintf("\r\nUnknown Input-- VPN:%d IVF:%d", vpn, ivf);
                      else
                              dPrintf("\r\nInput VPN(%d) IVF(%d) :%d(%s)", vpn, ivf, (WORD)_PcMode, PcModeStr[_PcMode] );
                      #endif //DEBUG_PC_MEAS
 683   1      
 684   1              if( !PCMDATA[_PcMode].Support ) _PcMode = EE_PC_UNKNOWN;
 685   1      
 686   1              return _PcMode;
 687   1      }
 688          
 689          WORD ConvertBasedOnInput(WORD dat)
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 57  

 690          {                                 
 691   1              DWORD   dtmp;
 692   1      
 693   1              if( IsBypassmode() ) return dat;                                // HHY 2.01
 694   1      
 695   1              dtmp = PCMDATA[PcMode].PPF*100000L/dat;                 // from PPF-based to IPF-based
 696   1              dtmp = PCMDATA[PcMode].IPF*100000L/dtmp;                // NewHPN = OldHPN * (IPF/PPF)
 697   1              return (WORD)dtmp;
 698   1      }
 699          
 700          //=============================================================================
 701          //                              Search ADC Clock with measuring Phase
 702          //=============================================================================
 703          /*
 704          WORD AutoTuneClock(void)
 705          {
 706                  WORD    low, high, lowV, highV; // Test value range of plldiv
 707                  WORD    i;
 708          //      BYTE    phase, phasepeak, j;
 709                  WORD    num, width, height;
 710          
 711                  #ifdef DEBUG_PC
 712                  dPrintf("\r\n---Tune-Coarse Mode=%d", (WORD)PcMode);
 713                  #endif
 714          
 715                  //------ Set Test Range, Divide Range more detail
 716          
 717                  low  = 10;
 718                  high = ConvertBasedOnInput( GetHPN() );
 719                  SetMeasureWindowH(low, high);                   //
 720          
 721                  low  = 1;
 722                  high = GetVPN() - 1;
 723                  SetMeasureWindowV(low, high);                   //
 724          
 725                  low  = PCMDATA[PcMode].low;
 726                  high = PCMDATA[PcMode].high;
 727          
 728                  #ifdef DEBUG_PC_MEAS
 729                  dPrintf("\r\n===>>>>Get Divider Number=0x%4x to 0x%4x", (WORD)low, (WORD)high);
 730                  #endif
 731                  width = PCMDATA[PcMode].HAN;
 732                  height = PCMDATA[PcMode].VAN;
 733                  SetCoarse( low );
 734                  MeasureAndWait(3);
 735                  low = GetHend() - GetHstart() - 1;
 736                  lowV = GetVend() - GetVstart() - 1;
 737                  SetCoarse( high );
 738                  MeasureAndWait(3);
 739                  high = GetHend() - GetHstart() - 1;
 740                  highV = GetVend() - GetVstart() - 1;
 741          
 742                  #ifdef DEBUG_PC_MEAS
 743                  dPrintf("\r\n===>>>>width: 0x%4x, low: 0x%4x, high: 0x%4x", (WORD)width, (WORD)low, (WORD)high);
 744                  dPrintf("\r\n===>>>>height: 0x%4x, lowV: 0x%4x, highV: 0x%4x", (WORD)height, (WORD)lowV, (WORD)highV);
 745                  #endif
 746                  if(( low > width ) || ( width > high ) )        return 0;               // cannot adjustable in setting range...
 747          //      if(( height > (highV+100) ) )   return 0;               // cannot adjustable in setting range...
 748          
 749                  for(i=PCMDATA[PcMode].low; i <= PCMDATA[PcMode].high; i+=4 ) {  // increment by 4
 750          
 751                          SetCoarse(i);
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 58  

 752                          MeasureAndWait(3);
 753                          width = GetHend() - GetHstart();
 754                          if ( width >= PCMDATA[PcMode].HAN ) return (i);
 755                  }
 756                  return num;
 757          
 758          }
 759          */
 760          
 761          WORD AutoTuneClock(void)
 762          {
 763   1              WORD    low, high;      // Test value range of plldiv
 764   1              WORD    i;
 765   1              BYTE    phase, phasepeak, j, phasemin;
 766   1              WORD    num;
 767   1              DWORD   RGBdiff, RGBmin;
 768   1      
 769   1              #ifdef DEBUG_PC
                      dPrintf("\r\n---Tune-Coarse Mode=%d", (WORD)PcMode);
                      #endif //DEBUG_PC
 772   1      
 773   1              //------ Set Test Range, Divide Range more detail
 774   1      
 775   1              low  = 10;
 776   1              high = ConvertBasedOnInput( GetHPN() );
 777   1              SetMeasureWindowH(low, high);                   //
 778   1      
 779   1              low  = 1;
 780   1              high = GetVPN() - 1;
 781   1              SetMeasureWindowV(low, high);                   //
 782   1      
 783   1              low  = PCMDATA[PcMode].low;
 784   1              high = PCMDATA[PcMode].high;
 785   1      
 786   1              i = IVF;
 787   1              num = GetHpnVpn(1);                                                             // Get vpn, IVF
 788   1              if( num==0 ) {
 789   2                      #ifdef DEBUG_PC
                              dPrintf("\r\n  --> Error at GetHpnVpn() line:%d", __LINE__);
                              #endif //DEBUG_PC
 792   2                      return 0;
 793   2              }
 794   1      
 795   1              #ifdef DEBUG_PC
                      if( i != IVF ) dPrintf("\r\nIVF changed %d -> %d ****", i, IVF);
                      #endif //DEBUG_PC
 798   1      
 799   1              SetVCORange( (DWORD)IVF * num * PCMDATA[PcMode].CLOCK );
 800   1      
 801   1              #ifdef DEBUG_PC
                      dPrintf("\r\nRange:%04x to %04x\r\n", low, high);
                      #endif //DEBUG_PC
 804   1      
 805   1              //===== For the PLL div range, seek the Phase Peak =====
 806   1              // if PLL div value is correct, phase RGB values are peak.
 807   1              
 808   1              RGBPeak=0;
 809   1      
 810   1              num = low;      // plldiv of new peak
 811   1              RGBdiff = 0;
 812   1              for(i=low; i <= high; ) {
 813   2      
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 59  

 814   2                      SetCoarse(i);
 815   2                      WriteADC( 0xCD, 1 );    // init LLPLL
 816   2                      delay(20);
 817   2      
 818   2                      GetPhaseRGB();
 819   2                      RGBPeak = 0;
 820   2                      RGBmin = PhaseRGB;
 821   2      
 822   2                      for(j=0; j<8; j++) {
 823   3                              phase = (7-j)*4;                                        // HHY 1.10
 824   3                              SetPhase(phase);                                        // if NO_INPUT stop
 825   3                              if( !GetPhaseRGB() ) return 0;          //
 826   3      
 827   3                              if(RGBPeak < PhaseRGB) {
 828   4                                      RGBPeak = PhaseRGB;
 829   4                                      phasepeak = phase;
 830   4                                      // num = i;
 831   4                                      dPuts(" -*"); 
 832   4                              } 
 833   3                              else {
 834   4                                      dPuts("   ");
 835   4                              }
 836   3                              if (RGBmin > PhaseRGB ) {
 837   4                                      RGBmin = PhaseRGB;
 838   4                                      phasemin = phase;
 839   4                              }
 840   3                      }
 841   2                      if ( RGBdiff < (RGBPeak - RGBmin) ) {
 842   3                              RGBdiff = (RGBPeak - RGBmin);
 843   3                              num = i;
 844   3                      }
 845   2      #ifdef REFERENCE
                              if( Range4Coarse ) i++;
                              else if(PcMode>=EE_SXGA_60 || PcMode==EE_VGA_60)
                                      i += 4;
                              else    
                                      i += 4;
              #else //REFERENCE
 852   2                      i++;
 853   2      #endif //REFERENCE
 854   2              }
 855   1      
 856   1              if( high!=low ) SetCoarse(num);         // set value of peak
 857   1              Printf("\r\nFind Coarse Number: %x[%d]", num, num );
 858   1              WriteADC( 0xCD, 1 );    // init LLPLL
 859   1              SetPhase(phasemin + 14);
 860   1      //      SetPhase(phasepeak);
 861   1              return num;
 862   1      
 863   1      }
 864          
 865          //-----------------------------------------------------------------------------
 866          //              Final Set ADC [PLL div], [Phase]
 867          //-----------------------------------------------------------------------------
 868          /*
 869          void AutoTunePhase(void)
 870          {
 871                  BYTE    i, j, peak_j, min_j;
 872                  DWORD   Phase0, Phase1, Phase2, PhaseT;
 873          
 874                  dPuts("\r\n-------------Tune-Fine");
 875          
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 60  

 876                  if( IsDTVInput() ) return;
 877          //      WriteTW88(0xff, 1);
 878          //      WriteTW88(0xcd, 1);
 879          //      WriteTW88(0xff, 0);
 880          
 881                  SetMeasureWindowH( 0,  PCMDATA[PcMode].HAN + 200);
 882                  SetMeasureWindowV( 0,  PCMDATA[PcMode].VAN + 200);
 883          
 884                  j = GetPhaseCurrent();
 885          
 886                  GetPhaseRGB();
 887                  Phase0 = PhaseRGB;
 888                  j++;
 889                  j &= 0x1f;
 890                  SetPhase(j);
 891                  GetPhaseRGB();
 892                  Phase1 = PhaseRGB;
 893                  j++;
 894                  j &= 0x1f;
 895                  SetPhase(j);
 896                  GetPhaseRGB();
 897                  Phase2 = PhaseRGB;
 898          
 899                  PhaseT = Phase0 + Phase1 + Phase2;
 900                  
 901                  peak_j = j;
 902                  RGBPeak = PhaseT;
 903                  RGBMin = PhaseT;
 904                  for(i=0; i<32; i++) {
 905                          j++;
 906                          j &= 0x1f;
 907                          SetPhase(j);                                            // if NO_INPUT stop
 908                          if( !GetPhaseRGB() ) return;            //
 909          
 910                          Phase0 = Phase1;
 911                          Phase1 = Phase2;
 912                          Phase2 = PhaseRGB;
 913                          PhaseT = Phase0 + Phase1 + Phase2;
 914                          if(RGBPeak < PhaseT) {
 915                                  RGBPeak = PhaseT;
 916                                  peak_j = j;
 917                                  dPuts("--peak");
 918                          } 
 919                          else if(RGBMin > PhaseT) {              // real case is smallest is good diplay
 920                                  RGBMin = PhaseT;
 921                                  min_j = j;
 922                                  dPuts("--min");
 923                          }
 924                          else {
 925                                  dPuts("   ");
 926                          }
 927                  }
 928          
 929          //      j = (min_j + 16 -1 ) & 0x1f;
 930                  j = (peak_j - 1 ) & 0x1f;
 931                  SetPhase(j);
 932          }
 933          */
 934          void AutoTunePhase(void)
 935          {
 936   1              BYTE    i, j, peak_j, min_j;
 937   1      #ifdef REFERENCE
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 61  

                      DWORD   RGBmin, RGBavg;
              #else //REFERENCE
 940   1              DWORD   RGBmin;
 941   1      #endif //REFERENCE
 942   1      
 943   1              #ifdef DEBUG_PC
                      dPuts("\r\n-------------Tune-Fine");
                      #endif //DEBUG_PC
 946   1      
 947   1              #ifdef SUPPORT_DTV
                      if( IsDTVInput() ) return;
                      #endif //SUPPORT_DTV
 950   1      
 951   1              //j = GetPhaseCurrent() - Start_Phase;  
 952   1      
 953   1              SetMeasureWindowH( 0,  PCMDATA[PcMode].HAN + 200);
 954   1              SetMeasureWindowV( 0,  PCMDATA[PcMode].VAN + 200);
 955   1      
 956   1          j =0;
 957   1              RGBPeak=0;//9
 958   1              GetPhaseRGB();
 959   1              RGBmin = PhaseRGB;
 960   1              for(i=0; i<32; i++, j++) {              // full scan PHASE
 961   2      
 962   2                      SetPhase(j);                                            // if NO_INPUT stop
 963   2      
 964   2                      if( !GetPhaseRGB() ) return;            //
 965   2                      
 966   2      
 967   2                      if(RGBPeak < PhaseRGB) {
 968   3                              RGBPeak = PhaseRGB;
 969   3                              peak_j = j;
 970   3                              #ifdef DEBUG_PC
                                      dPuts("--peak");
                                      #endif //DEBUG_PC
 973   3                      } 
 974   2                      else {
 975   3                              #ifdef DEBUG_PC
                                      dPuts("   ");
                                      #endif //DEBUG_PC
 978   3                      }
 979   2                      if ( PhaseRGB < RGBmin ) {
 980   3                              RGBmin = PhaseRGB;
 981   3                              min_j = j;
 982   3                      }
 983   2              }
 984   1              SetPhase(min_j + 16);           // opposite phase of min value
 985   1              WriteADC( 0xCD, 1 );    // init LLPLL
 986   1              return;
 987   1      
 988   1      /*
 989   1              RGBavg = ( RGBmin + RGBPeak );
 990   1              RGBavg >>= 1;
 991   1              
 992   1              for ( j=min_j; j<min_j+32; j++ ) {
 993   1                      SetPhase(j);                                            // if NO_INPUT stop
 994   1                      if( !GetPhaseRGB() ) return;            //
 995   1                      
 996   1                      if ( PhaseRGB > RGBavg ) {
 997   1                              for ( i=j+1; i<min_j+32; i++ ) {
 998   1                                      SetPhase(i);                                            // if NO_INPUT stop
 999   1                                      if( !GetPhaseRGB() ) return;            //
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 62  

1000   1                                      if ( PhaseRGB < RGBavg ) {
1001   1                                              peak_j = (j + i - 1) / 2 - 2;           // center of big value, move 2 points left
1002   1                                              SetPhase( peak_j);
1003   1                                              #ifdef DEBUG
1004   1                                              dPrintf("\r\n set phase: %d, min_j: %d", peak_j, min_j);
1005   1                                              #endif
1006   1                                              return;
1007   1                                      }
1008   1                              }
1009   1                      }
1010   1              }
1011   1              //SetPhase(peak_j);
1012   1              //SetPhase(min_j + 12);         // opposite phase of min value
1013   1              SetPhase(min_j + 16);           // opposite phase of min value
1014   1      */
1015   1      }
1016          //-----------------------------------------------------------------------------
1017          //                      Measure    VPN, HPN
1018          //                      Calculate  IVF, IHF
1019          //-----------------------------------------------------------------------------
1020          WORD GetHpnVpn(BYTE en)
1021          {
1022   1              WORD    vpn, hpn, sync; //hsync, vsync;
1023   1              BYTE    SyncPol;
1024   1      
1025   1              en = DebugLevel;
1026   1              if( !en && DebugLevel )         DebugLevel = 0;
1027   1      
1028   1              #ifdef DEBUG_PC
                      dPuts("\r\n------ GetHpnVpn()");
                      #endif //DEBUG_PC
1031   1              //----- Measurement Command -------------
1032   1      
1033   1              if( !MeasureAndWait(3) ) {                      // field any...
1034   2                      #ifdef DEBUG_PC
                              dPrintf(" Error at GetHpnVpn ");
                              #endif //DEBUG_PC
1037   2                      DebugLevel = en;
1038   2                      return 0;
1039   2              }
1040   1      
1041   1              //----- Get VPN -------------------------
1042   1              vpn = GetVPN();                                 // VPN = V Period Num
1043   1              sync = GetVSYNCPulse();
1044   1      // in case of 8816 sync is same to vpn so I cannot use below....
1045   1              // Polarity check
1046   1              if( sync > (vpn/3) ) {
1047   2                      InvertVSYNCPolarity();
1048   2                      MeasureAndWait(3);
1049   2                      sync = GetVSYNCPulse();
1050   2                      #ifdef DEBUG_PC_MEAS
                              dPrintf(" --->New VSYNC:%04x(%d)", sync, sync);
                              #endif //DEBUG_PC_MEAS
1053   2              }
1054   1              #ifdef DEBUG_PC_MEAS
                      dPrintf("\r\n VPN:%04x(%d)  VSYNC:%04x(%d)", vpn, vpn, sync, sync);
                      dPrintf("\r\n IHF:%08lx(%ld)", IHF, IHF);
                      #endif //DEBUG_PC_MEAS
1058   1      
1059   1              //----- Get HPN ---------------------
1060   1              hpn = GetHPN();                                         // HPN = H Period Num
1061   1              sync = GetHSYNCPulse();                 // H sync Pulse Width = HSYNC interval
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 63  

1062   1      
1063   1              #ifdef DEBUG_PC_MEAS
                      dPrintf("\r\n HPN:%04x(%d)  HSYNC:%04x(%d)", hpn, hpn, sync, sync);
                      dPrintf("\r\n PPF:%08lx(%ld)", GetPPF(), GetPPF() );
                      #endif //DEBUG_PC_MEAS
1067   1      
1068   1              if( sync >= (hpn/3) ) {
1069   2                      SyncPol = ReadDecoder(0x40);    // INVERT SYNC POLARITY
1070   2                      if ( SyncPol & 0x04 )                   // b'2 is HSYNC POL
1071   2                              SyncPol &= 0xfb;
1072   2                      else SyncPol |= 0x04;
1073   2                      WriteDecoder(0x40, SyncPol);
1074   2      
1075   2                      MeasureAndWait(3);
1076   2                      sync = GetHSYNCPulse();                 // H sync Pulse Width = HSYNC interval
1077   2                      hpn = GetHPN();                                         // HPN = H Period Num
1078   2              }
1079   1      
1080   1              //----- Get New HPN -------------
1081   1              IHF = (GetPPF()+hpn/2) / hpn;           // IHF = PPF / HPN 
1082   1      
1083   1              //----- Get New VPN -------------
1084   1              vpn = GetVPN();
1085   1              IVF = (WORD)((IHF+vpn/2)/vpn);          // IVF = IHF / VPN 
1086   1      
1087   1              #ifdef DEBUG_PC_MEAS
                      dPrintf("\r\nIHF(New):%08lx(%ld)", IHF, IHF);
                      dPrintf("\r\nHPN(New):%04x(%d)  HSYNC(New):%04x(%d)", hpn, hpn, sync, sync);
                      dPrintf("\r\nVPN(New):%04x(%d)", vpn, vpn);
                      dPrintf("\r\nIVF(New):%04x(%d)", IVF, IVF);
                      dPuts("\r\n-------");
                      #endif //DEBUG_PC_MEAS
1094   1      
1095   1              DebugLevel = en;
1096   1              return vpn;
1097   1      }
1098          
1099          //=============================================================================
1100          //                      Return V active Start
1101          //=============================================================================
1102          WORD GetVerticalActiveArea(void)
1103          {
1104   1      
1105   1              WORD  vstart, vstart1, vend;
1106   1      
1107   1              char  off=0;
1108   1      
1109   1              dPuts("\r\n----- Get V Active Area");
1110   1      
1111   1              //----- if current mode is DTV, use default value----------------
1112   1      
1113   1              //#ifdef SUPPORT_DTV
1114   1              if( IsDTVInput() ) {
1115   2      
1116   2                      #ifdef DEBUG_DTV
                              dPrintf("  ---> Use fixed data Vstart=%d  VAN=%d", PCMDATA[PcMode].Vstart, PCMDATA[PcMode].VAN);
                              #endif //DEBUG_DTV
1119   2      
1120   2                      SetVactiveStart( PCMDATA[PcMode].Vstart );
1121   2                      
1122   2                      switch (PcMode) {
1123   3                      case EE_YPbPr_480I:             off = 4;        break;
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 64  

1124   3                      case EE_YPbPr_1080I:    off = 2;        break;
1125   3                      case EE_RGB_1080I:              off = 4;        break;
1126   3                      default:                                off = 0;        break;
1127   3                      }
1128   2                      SetVactiveLen( PCMDATA[PcMode].VAN+off+20 );
1129   2                      
1130   2                      return PCMDATA[PcMode].Vstart;
1131   2              }
1132   1              //#endif
1133   1      
1134   1              //======================== Get the Bottom End ========================
1135   1      #ifdef REFERENCE        
                      vend   = GetVend();
              
                      if( vend >= GetVPN() ) {
                              #ifdef DEBUG_PC_MEAS
                              dPrintf("\r\nToo big vend [%04x]", vend);
                              #endif
                              vend = GetVPN()-1;
                      }
                      vstart  = vend - PCMDATA[PcMode].VAN + 1;
                      vstart1 = GetVstart();
              //      vstart  = GetVstart();
              #else //REFERENCE
1148   1                      vstart  = GetVstart();
1149   1                      vend   = GetVend();
1150   1      #endif //REFERENCE
1151   1              #ifdef DEBUG_PC_MEAS
                      dPrintf("\r\nFind Vend   --- %04x %04x", vstart, vend);
                      #endif //DEBUG_PC_MEAS
1154   1      
1155   1              //================================================= HHY 2.00
1156   1              if( PcMode >= EE_1152_60 && PcMode <=EE_1152_75 ) {
1157   2                      if( vstart1 > vstart && vstart1 <= vstart+3 ) {
1158   3                              vstart = vstart1;
1159   3                              vend   = vstart + PCMDATA[PcMode].VAN - 1;
1160   3                              #ifdef DEBUG_PC_MEAS
                                      dPuts("    -------> Use Vstart");
                                      #endif //DEBUG_PC_MEAS
1163   3                      }
1164   2              }
1165   1              //=================================================
1166   1      
1167   1              #ifdef DEBUG_PC_MEAS
                      dPrintf("\r\nAuto Measure Vstart=%04x(%d)  Vend=%04x(%d)", vstart, vstart, vend, vend);
                      #endif //DEBUG_PC_MEAS
1170   1      
1171   1              if( (vstart > PCMDATA[PcMode].Vstart + 30) || ((int)vstart < ((int)PCMDATA[PcMode].Vstart - 30) ) ) {
1172   2      
1173   2                      #ifdef DEBUG_PC_MEAS
                              dPrintf("    ==> Out Of Range V Active");
                              #endif //DEBUG_PC_MEAS
1176   2      
1177   2                      vstart = GetVactiveStartEE(PcMode);
1178   2                      vend   = vstart + PCMDATA[PcMode].VAN - 1;
1179   2              }
1180   1      
1181   1              //----- Compensation mode by mode -------------------------------
1182   1      
1183   1              #ifdef VGA
                      if( PcMode>=EE_VGA_60 || PcMode<=EE_VGA_85 ) {
                              vstart -= 5;
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 65  

                              dPrintf("\r\n      ----------- VGA Bypass !!!");
                      }
                      #endif //VGA
1189   1      
1190   1              if( PcMode==EE_SP2 ) vstart = PCMDATA[EE_SP2].Vstart;   // HHY 1.62     640x350
1191   1      
1192   1              //----- set the register values ( Vstart, VAN ) -----------------
1193   1      #ifdef REFERENCE
                      if ( PcMode == EE_VGA_75 ) vstart --;
                      if ( PcMode == EE_VGA_85 ) vstart --;
              #endif //REFERENCE
1197   1      #ifdef XGA
                      if (PcMode == EE_VGA_72)
                              SetVactiveStart(vstart-1);
                      else
                              SetVactiveStart(vstart);
              #else //XGA
1203   1              SetVactiveStart(vstart);
1204   1      #endif //XGA
1205   1              //SetVactiveStart(vstart1 - 1);
1206   1      
1207   1              //SetVactiveLen(PCMDATA[PcMode].VAN + 6);               // with VAN
1208   1      #ifdef REFERENCE        
                      SetVactiveLen(PCMDATA[PcMode].VAN);             // with VAN
              #else //REFERENCE
1211   1      #ifdef XGA
                      if (PcMode == EE_VGA_72)
                              SetVactiveLen(vend - vstart +2);
                      else
                              SetVactiveLen(vend - vstart +1);
              #else //XGA
1217   1              SetVactiveLen(vend - vstart +1);
1218   1      #endif //XGA 
1219   1      #endif  //REFERENCE
1220   1              
1221   1              #ifdef DEBUG_PC_MEAS
                      dPrintf("\r\n@@@@@ Vstart=%04x[%d]  Vend=%04x[%d]", vstart, vstart, vend, vend);
                      #endif //DEBUG_PC_MEAS
1224   1      
1225   1              return vstart;
1226   1      }
1227          //=============================================================================
1228          //
1229          //=============================================================================
1230          BYTE GetHorizontalActiveArea(void)
1231          {
1232   1              WORD    hstart, hend;
1233   1      
1234   1              dPuts("\r\n----- Get H Active Area ");
1235   1      
1236   1              #ifdef SUPPORT_DTV
                      if( IsDTVInput() ) {
                              hstart = PCMDATA[PcMode].Hstart;
                              #ifdef REFERENCE
                              hend   = hstart + PCMDATA[PcMode].HAN + 1;
                              else
                              if ( PcMode >= EE_YPbPr_1080I || PcMode <= EE_YPbPr_1080I50B) 
                                      hend =  PCMDATA[PcMode].HAN + 1;        
                              #endif //REFERENCE
                              #ifdef DEBUG_PC
                              dPrintf("  ---> Use fixed data Hstart=%d  HAN=%d  Hend=%d", hstart, PCMDATA[PcMode].HAN, hend);
                              #endif //DEBUG_PC
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 66  

                              
                              SetHactiveStart( hstart );
                              SetHactiveEnd( hend+3 );                                // with HAN, Hstart
                              return TRUE;
                      }
                      #endif //SUPPORT_DTV
1254   1      
1255   1              //======================== Get the Right End ========================
1256   1      
1257   1              hstart = GetHstart();
1258   1              #ifdef REFERENCE
                      //hend   = hstart + PCMDATA[PcMode].HAN + hstart;
                      hend   = hstart + PCMDATA[PcMode].HAN + 5;
                      #else //REFERENCE
1262   1              LastHPN = GetCoarseValue();
1263   1              hend   = LastHPN;
1264   1              #endif //REFERENCE
1265   1              #ifdef DEBUG_PC_MEAS
                      dPrintf("\r\nAuto Measure Hstart=%04x(%d)  Hend=%04x(%d)", hstart, hstart, hend, hend);
                      #endif //DEBUG_PC_MEAS
1268   1              
1269   1              if( (hstart > PCMDATA[PcMode].Hstart + 100) || ((int)hstart < (int)PCMDATA[PcMode].Hstart - 100) ) {
1270   2      
1271   2                      #ifdef DEBUG_PC
                              ePuts("    ==> Out Of Range H Active");
                              #endif //DEBUG_PC
1274   2                      
1275   2                      hstart = GetHactiveStartEE(PcMode);
1276   2                      hend   = hstart + PCMDATA[PcMode].HAN + 1;
1277   2      
1278   2                      SetHactiveStart(hstart);                        // with Hstart
1279   2                      SetHactiveEnd( hend );                          // with HAN, Hstart
1280   2      
1281   2                      return TRUE;
1282   2              }
1283   1      
1284   1              //----- Compensation mode by mode -------------------------------
1285   1              #ifdef REFERENCE
                      if( PcMode < EE_XGA_60 ) hend++;
                      #endif //REFERENCE
1288   1      
1289   1              if( !IsBypassmode() ) {
1290   2                      #ifdef REFERENCE
                              hstart -= 2;
                              hend -= 2;
                              if ( PcMode == EE_VGA_60 ) {
                              }
                              else if ( PcMode <= EE_VGA_72 ) {
                                      hstart++;
                                      hend++;
                              }
                              else if ( PcMode <= EE_VGA_85 ) {
                                      hstart++;
                                      hend++;
                              }
                              #else //REFERENCE
1304   2                      if ( PcMode <= EE_VGA_85)
1305   2                              hstart -= 1;
1306   2                      else if ( PcMode <= EE_SVGA_85)
1307   2                              hstart -= 2;    
1308   2                      #ifdef XGA
                              else if( PcMode ==  EE_XGA_60 ) 
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 67  

                                      hstart -= 1;
                              #else //XGA
1312   2                      else if( PcMode ==  EE_XGA_60 ) 
1313   2                              hstart -= 4;    
1314   2                      #endif //XGA
1315   2                      hend -= 2;
1316   2                      //if(  PcMode == EE_SVGA_72)
1317   2                      //      hend   = hend -hstart;
1318   2                      #endif //REFERENCE
1319   2                      }
1320   1      
1321   1              #ifdef XGA
                      if( PcMode>=EE_1152_60 ) {
                              hstart+=3;
                              hend+=3;
                      }
                      #endif //XGA
1327   1      
1328   1              #ifdef SXGA
                      if( PcMode>=EE_1152_60 && PcMode<=EE_1152_75 ) {
                              hstart+=2;
                              hend+=2;
                      }
                      #endif //SXGA
1334   1      
1335   1              //----- set the register values ( Hstart, Hend ) ----------------
1336   1      
1337   1              SetHactiveStart(hstart);                        // with Hstart
1338   1              SetHactiveEnd( hend );                          // with HAN, Hstart
1339   1      
1340   1              #ifdef DEBUG_PC_MEAS
                      dPrintf("\r\n@@@@@ Hstart=%04x[%d]  Hend=%04x[%d]", hstart, hstart, hend, hend);
                      #endif //DEBUG_PC_MEAS
1343   1              
1344   1              return TRUE;
1345   1      }
1346          
1347          //-----------------------------------------------------------------------------
1348          //                      Calcurate and Save VOback(0xb9) & PVP(0xb7,0xbb)
1349          //             - Refer to additional document
1350          //-----------------------------------------------------------------------------
1351          void SetVValueForPanel(WORD VIstart)
1352          {
1353   1              WORD    PVR, VAN, VScale, VIsync, dtmp;
1354   1              BYTE    VOsync, VOback;
1355   1      
1356   1              VIsync  = GetVSYNCPulse();              // active pulse width
1357   1              PVR     = GetPVR();
1358   1              #ifdef REFERENCE
                      VAN     = PCMDATA[PcMode].VAN;
                      #else //REFERENCE
1361   1              VAN     = GetVend() - GetVactiveStart();
1362   1              #endif //REFERENCE
1363   1              VOsync  = ReadTW88(0xb8);
1364   1      
1365   1              if ( VIsync > VAN ) VIsync = 0;         // if reverse, and cannot measure
1366   1              dtmp = VIstart - VIsync + 1;
1367   1              VScale = ReadTW88(0x63) & 0x0c;
1368   1              VScale <<= 6;
1369   1              VScale += ReadTW88(0x62);                       // read VScale
1370   1              dtmp <<= 8;                     // multiply by 256
1371   1              dtmp += (VScale >> 1);          // 0.5 calculation....
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 68  

1372   1              dtmp /= VScale;         // divide by scale, calculate 
1373   1              if ( ReadTW88(0xbe) & 2 )               // unset AUTO CALC
1374   1                      VOback = dtmp - VOsync;
1375   1              else
1376   1                      VOback = dtmp - VOsync - 4;
1377   1              #ifdef REFERENCE
                      if ( PcMode == EE_VGA_75 ) {            // vga 75Hz
                              VOback += 3;
                      }
                      else if ( PcMode == EE_VGA_85 ) {               // vga 85Hz
                              VOback += 2;
                      }
                      else if ( PcMode == EE_SVGA_56 ) {              // svga 56Hz
                              VOback++;
                      }
                      #else //REFERENCE
1388   1              #ifdef XGA
                      if ( PcMode == EE_VGA_72 ) 
                      {
                              VOback += 2;
                      }
                      #endif //XGA
1394   1              #endif //REFERENCE
1395   1              #ifdef DEBUG_PC_MEAS
                      dPrintf("\r\n************ void SetVValueForPanel(WORD VIstart) ************");
                      dPrintf("\r\nVScale=%d VIsync=%d PVR=%d VAN=%d ", (WORD)VScale, (WORD)VIsync, (WORD)PVR, (WORD)VAN);
                      dPrintf("\r\nVIstart=%d VIsync=%d PVR=%d VAN=%d ", (WORD)VIstart, (WORD)VIsync, (WORD)PVR, (WORD)VAN);
                      dPrintf("VOsync=%d", (WORD)VOsync);
                      dPrintf("==> VOback=%02bx(%bd)", VOback, VOback);
                      dPrintf("\r\n**************************************************************");
                      #endif // DEBUG_PC
1403   1      
1404   1      /*
1405   1              //----- Compensation mode by mode -------------------------------
1406   1              #ifdef XGA
1407   1              if     ( PcMode==EE_DOS ) VOback -= 2;  // HHY 3.00 
1408   1              else if( PcMode==EE_SP1 ) VOback -= 2;  // HHY 3.00 
1409   1              #endif
1410   1      
1411   1              #if defined VGA || defined WVGA
1412   1              if     ( PcMode==EE_DOS ) VOback += 1;
1413   1              else if( (PcMode>=EE_SVGA_56) && (PcMode<=EE_SVGA_85) ) VOback += 1;
1414   1              #endif
1415   1      */
1416   1              //-----------------------------------------------------------
1417   1      
1418   1              SetVBackPorch( (BYTE)VOback );
1419   1              SetPVP(VOsync + VOback + PVR + 10);
1420   1      }
1421          //-----------------------------------------------------------------------------
1422          //                      Calcurate [Panel H. Cycle] = PHP(Panel H Period)
1423          //-----------------------------------------------------------------------------
1424          #ifndef AUTOCALC_PC
              BYTE SetHValueForPanel(void)
              {
                      WORD    sum=0;
                      WORD    php;
              
                      sum = ReadTW88(0xb3) + ReadTW88(0xb4) + GetPHR();       // sum = AA+AB+AC,AD = From Hsync to Active region
                      
                      MeasureAndWait(3);
              
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 69  

                      php = (DWORD)(GetHPN()) * PCMDATA[PcMode].VAN / GetPVR();               // PHP = HPN * (VAN/PVR)
              
                      #ifdef DEBUG_PC_MEAS
                      dPrintf("\r\nHPN:%04x(%d)", GetHPN(), GetHPN());
                      dPrintf("\r\nVAN:%04x(%d)", PCMDATA[PcMode].VAN, PCMDATA[PcMode].VAN);
                      dPrintf("\r\nPVR:%04x(%d)", GetPVR(), GetPVR());
                      dPrintf("\r\nPanel H. Cycle:%04x(%d),  aa+ab+ac:%04x(%d)", php, php, sum, sum); 
                      #endif //DEBUG_PC_MEAS
              
                      if( php <= sum ) {
                              ePuts("--not enough");
              
                              #ifdef DEBUG_PC
                              return FALSE;
                              #endif //DEBUG_PC_MEAS
                      }
              
                      //=================================
              
                      #ifdef SXGA
                      switch( PcMode ) {
                      case EE_RGB_576I:               case EE_YPbPr_576I:             php = 0x70f;    break;
                      case EE_RGB_720P:               case EE_YPbPr_720P:             php = 0x623;    break;
                      case EE_RGB_1080I:              case EE_YPbPr_1080I:    php = 0x618;    break;
                      case EE_RGB_1080I50A:   case EE_YPbPr_1080I50A: php -= 6;               break;
                      }
                      #endif //SXGA
              
                      //=================================
                      
                      //------ Set PHP ----------
                      SetPHP(php);
              
                      return TRUE;
              }
              #else //AUTOCALC_PC
1470          BYTE SetHValueForPanel(void)
1471          {
1472   1              return TRUE;
1473   1      }
1474          #endif //AUTOCALC_PC
1475          //-----------------------------------------------------------------------------
1476          //              VAN = V Active Number
1477          //              HAN = H active Number
1478          //-----------------------------------------------------------------------------
1479          BYTE GetActiveRegion(void)
1480          {
1481   1              WORD    vstart;
1482   1              #ifdef REFERENCE
                      #else //REFERENCE
1484   1              #ifndef WIDE_SCREEN
                      WORD    vend;
                      #endif //WIDE_SCREEN
1487   1              BYTE    cDelta =0;
1488   1              #endif //REFERENCE
1489   1              DWORD   pres, scale;
1490   1              DWORD   ppf;
1491   1      
1492   1              WORD    period, sync;
1493   1      
1494   1              //----- Set Measurement Wondow Size -----
1495   1      
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 70  

1496   1      
1497   1              SetMeasureWindowV(1, 0x400);
1498   1              MeasureAndWait(3);
1499   1      
1500   1              // Set H window
1501   1              if( (PCMDATA[PcMode].VAN != GetPVR()) || !Flag4Bypass ) {       // --- Change hpulse & hpn ---
1502   2                      period = ConvertBasedOnInput( GetHPN() );
1503   2                      sync   = ConvertBasedOnInput( GetHSYNCPulse() );
1504   2              }
1505   1              else {
1506   2                      period = GetCoarse();
1507   2                      sync   = GetHSYNCPulse();
1508   2              }
1509   1              #ifdef REFERENCE
                      SetMeasureWindowH(sync, period);
                      #else //REFERENCE
1512   1              SetMeasureWindowH(sync, period + sync);
1513   1              #endif //REFERENCE
1514   1              // Set V window
1515   1              period = GetVPN();
1516   1              sync   = GetVSYNCPulse();
1517   1              SetMeasureWindowV(1, period);
1518   1      
1519   1              //----- Do Measurement ---------------------------
1520   1              MeasureAndWait(3);
1521   1      
1522   1              //----- Get VAN = Vertical Active Area -----------
1523   1      
1524   1              vstart = GetVerticalActiveArea();  // Measure Input Vstart, Vactive
1525   1      
1526   1              #ifndef REFERENCE
1527   1              SetMeasureWindowV(1, period);
1528   1              #else //REFERENCE
                      SetMeasureWindowV(1, period  + sync);
                      #endif //REFERENCE
1531   1              //----- Calculate Y-scale Factor, and save -------
1532   1      
1533   1              #if (defined WIDE_SCREEN)
1534   1              Set4WideScreen(GetWideModeEE());
1535   1              #else //WIDE_SCREEN
                      { //NORNAL SCREEN
                              #ifdef REFERENCE
                              pres = (DWORD)PVR_;
                              scale = ((PCMDATA[PcMode].VAN * 0x10000L)+pres/2) / pres;
                              #else //REFERENCE
                              vstart  = GetVstart();
                              vend   = GetVend();
                              pres = (DWORD)PVR_;
                              #ifdef XGA
                              if (PcMode >= EE_XGA_60)
                                      scale = (((vend-vstart +1) * 0x10000L)+pres/2) / pres + 0x64;
                              else if (PcMode == EE_SVGA_72)
                                      scale = ((PCMDATA[PcMode].VAN * 0x10000L)+pres/2) / pres;
                              else
                                      scale = (((vend-vstart +1) * 0x10000L)+pres/2) / pres;  
                              #else //XGA
                              scale = (((vend-vstart +1) * 0x10000L)+pres/2) / pres;
                              #endif //XGA
                              #endif //REFERENCE
                              Printf("\nVRes = %d\n", PCMDATA[PcMode].VAN );
                              Printf("\nOutput VRes = %d\n", PVR_);
                              #ifdef DEBUG_PC_MEAS
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 71  

                              dPrintf("\r\n VAN=%04x  PVR=%04x", PCMDATA[PcMode].VAN, pres);
                              dPrintf("\r\nYscaleFactor:%04x(%d)", scale, scale);
                              #endif //DEBUG_PC_MEAS
                      
                              #ifndef WXGA
                              if( scale==0x10000 && Flag4Bypass ) {           // Bypass
                                      BypassZoom();
                              }
                              else
                              #endif //WXGA
                              {
                                      Clear_bypass();
                                      YScale2(scale);                                         // save V Scale Up Factor
                              }
                      } // WIDE
                      #endif //WIDE_SCREEN
1574   1              vstart = GetVactiveStart();
1575   1              //vstart = GetVstart();                 // get from input measurement
1576   1              SetVValueForPanel(vstart);              // with VAN, Vstart with offset^^
1577   1      
1578   1              //----- Calcurate Panel H. Cycle(A9,AD) ----------
1579   1      
1580   1              ppf = GetPPF();
1581   1      
1582   1      /**
1583   1              #ifdef DEBUG_PC_MEAS
1584   1              while( !SetHValueForPanel() )   {       // we need to use higher PPF
1585   1      
1586   1                      ppf += 2700000;
1587   1                      if( ppf > MAX_PPF ) {
1588   1                              ePuts("\r\n\n--------------Too big IPF\r\n");
1589   1                              return FALSE;
1590   1                      }
1591   1                      ChangeInternPLL(ppf);                   // internal PLL
1592   1                      #ifdef DEBUG_PC
1593   1                      dPrintf("--> Increased PPF:%8ld", ppf);
1594   1                      #endif
1595   1                      delay(10);
1596   1              }
1597   1              #endif
1598   1      /****/
1599   1      
1600   1              //----- Get HAN = Horizontal Active Area ---------
1601   1      
1602   1              GetHorizontalActiveArea();  
1603   1      
1604   1              if( (PCMDATA[PcMode].VAN != GetPVR()) || !Flag4Bypass) {        // non-bypass
1605   2                      pres = (DWORD)GetPHR();
1606   2                      #ifdef REFERENCE
                              scale = ((PCMDATA[PcMode].HAN * 0x10000L )+pres/2) / pres;      // 256*han/phr
                              #else //REFERENCE
1609   2                      if ( PcMode <= EE_SP3)
1610   2                      {
1611   3                              LastHPN = GetCoarseValue();
1612   3                              if  (LastHPN == PCMDATA[PcMode].CLOCK)
1613   3                                      scale = ((PCMDATA[PcMode].HAN * 0x10000L )+pres/2) / pres;      // 256*han/phr
1614   3                              else 
1615   3                              {
1616   4                                      if  (LastHPN < PCMDATA[PcMode].CLOCK)
1617   4                                      {
1618   5                                              cDelta = PCMDATA[PcMode].CLOCK - LastHPN;
1619   5                                              //Printf("xxx");
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 72  

1620   5                                      }
1621   4                                      else if  (LastHPN > PCMDATA[PcMode].CLOCK)
1622   4                                      {
1623   5                                              cDelta = LastHPN - PCMDATA[PcMode].CLOCK;
1624   5                                              //Printf("ooo");
1625   5                                      }
1626   4                                      scale =(((PCMDATA[PcMode].HAN + cDelta) * 0x10000L )+pres/2) / pres;
1627   4                              }
1628   3                      }
1629   2                      if ( PcMode <= EE_VGA_85)
1630   2                      {
1631   3                              scale = ((PCMDATA[PcMode].HAN * 0x10000L )+pres/2) / pres;      // 256*han/phr
1632   3                      }
1633   2                      else if ( PcMode <= EE_SVGA_85)
1634   2                      {
1635   3                              LastHPN = GetCoarseValue();
1636   3                              if  (LastHPN == PCMDATA[PcMode].CLOCK)
1637   3                                      #ifdef XGA
                                              scale = ((PCMDATA[PcMode].HAN * 0x10000L )+pres/2) / pres + 64; // 256*han/phr
                                              #else //XGA
1640   3                                      scale = ((PCMDATA[PcMode].HAN * 0x10000L )+pres/2) / pres;      // 256*han/phr
1641   3                                      #endif //XGA 
1642   3                              else 
1643   3                              {
1644   4                                      if  (LastHPN < PCMDATA[PcMode].CLOCK)
1645   4                                      {
1646   5                                              cDelta = PCMDATA[PcMode].CLOCK - LastHPN;
1647   5                                              //Printf("xxx");
1648   5                                      }
1649   4                                      else if  (LastHPN > PCMDATA[PcMode].CLOCK)
1650   4                                      {
1651   5                                              cDelta = LastHPN - PCMDATA[PcMode].CLOCK;
1652   5                                              //Printf("ooo");
1653   5                                      }
1654   4                                      scale =(((PCMDATA[PcMode].HAN + cDelta) * 0x10000L )+pres/2) / pres;
1655   4                              }
1656   3                                      
1657   3                      }
1658   2                      else
1659   2                      {
1660   3                              scale = ((PCMDATA[PcMode].HAN * 0x10000L )+pres/2) / pres;      // 256*han/phr
1661   3                              //scale = (PCMDATA[PcMode].HAN * 0x10000L ) / pres + pres/96;
1662   3                      }
1663   2                      #endif //REFERENCE
1664   2                      #ifdef DEBUG_PC_MEAS
                              dPrintf("\r\nPCMDATA[PcMode].HAN = %04x(%d), pres = %04x(%d)", PCMDATA[PcMode].HAN,PCMDATA[PcMode].HAN, 
             -pres, pres)  ;        // 256*han/phr
                              dPrintf("\r\nXscaleFactor:%04x(%d)", scale, scale);
                              #endif //DEBUG_PC_MEAS
1668   2      
1669   2                      //#if (defined SXGA) || (defined WXGA) || (defined WSGA)
1670   2                      #ifdef XGA
                              if( PCMDATA[PcMode].HAN == 1024 ) {//1100
                                      scale = (PCMDATA[PcMode].HAN * 0x80L ) / 1024 + 1;              // (HAN/1024)*256
                                      XscaleD(scale);
                                      scale = ((PCMDATA[PcMode].HAN -8) * 0x10000L ) / 1024;                                          // (1024/PHR)*256
                                      XscaleU(scale);
                              }
                              else if( PCMDATA[PcMode].HAN > 1024 )
                              {
                                      scale = (PCMDATA[PcMode].HAN * 0x80L ) / 1024 + 1;              // (HAN/1024)*256
                                      XscaleD(scale);
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 73  

                                      scale = (1024 * 0x10000L ) / 1024;                                              // (1024/PHR)*256
                                      XscaleU(scale);
                              }
                              #else //XGA
1685   2                      if( PCMDATA[PcMode].HAN > 1024 ) {//1100
1686   3                              scale = (PCMDATA[PcMode].HAN * 0x80L ) / 1024 + 1;              // (HAN/1024)*256
1687   3                              XscaleD(scale);
1688   3                              #ifdef DEBUG_PC_MEAS
                                      dPrintf("\r\nXscaleFactorD:%04x(%d)", scale, scale);
                                      #endif //DEBUG_PC_MEAS
1691   3                              scale = (1024 * 0x10000L ) / 1280;                                              // (1024/PHR)*256
1692   3                              XscaleU(scale);
1693   3                              #ifdef DEBUG_PC_MEAS
                                      dPrintf("\r\nXscaleFactorU:%04x(%d)", scale, scale);
                                      #endif //DEBUG_PC_MEAS
1696   3                      }
1697   2                      #endif //XGA
1698   2                      else
1699   2                      //#endif
1700   2                      {
1701   3              #ifdef WIDE_SCREEN
1702   3                      if(WideScreenMode == WIDESCREEN_WIDE)
1703   3              #endif // WIDE_SCREEN
1704   3                              XScale2(scale);
1705   3                      }
1706   2              }
1707   1      
1708   1              return TRUE;
1709   1      }
1710          /*===========================================================================*/
1711          /*                                        Display The Result for Debugging                                   */
1712          /*===========================================================================*/
1713          void DisplayResultAndSetActiveRange(void)
1714          {
1715   1      
1716   1              WORD    Back, Front;
1717   1      
1718   1              //------- Display the Result ---------------------
1719   1      
1720   1              #ifdef DEBUG_PC_MEAS
                      dPuts  ("\r\n-------------------------------------------");
                      dPrintf("\r\n   Resolution    = %d x %d (%s)", PCMDATA[PcMode].HAN, PCMDATA[PcMode].VAN, PcModeStr[PcMode
             -]);
                      dPrintf("\r\n   IVF(Refresh)  = (%d)", IVF);
                      dPrintf("\r\n   IHF           = %08lx (%ld)", IHF, IHF);
                      dPrintf("\r\n   IHPN(PLLdiv)  = %04x(%d) %02x", GetCoarse(), GetCoarse(), (WORD)GetPhaseCurrent() );
                      dPrintf("\r\n   VPN           = %04x(%d)", GetVPN(), GetVPN() );
                      dPrintf("\r\n   PPF           = %ld / 2 = %ld", GetPPF(), GetPPF()/2 );
                      dPrintf("\r\n   IPF           = %ld", IHF * GetCoarse() );
                      #endif //DEBUG_PC_MEAS
1730   1      
1731   1              //----- calculate H Pos Range
1732   1              Back  = GetHactiveStart() - GetHSYNCPulse();
1733   1              Front = GetCoarse() - PCMDATA[PcMode].HAN - GetHactiveStart();
1734   1      
1735   1              #ifdef DEBUG_PC_MEAS
                      dPrintf("\r\nH  ~~~|_%d_|~%d~", (WORD)GetHSYNCPulse(), (WORD)Back );
                      dPrintf(":+++ %d +++:~%d~|_%d_|~~~ ",  (WORD)PCMDATA[PcMode].HAN, (WORD)Front, (WORD)GetHSYNCPulse() );
                      #endif //DEBUG_PC_MEAS
1739   1      
1740   1              /*
1741   1              if( (Back>50) && (Front>50) ) {
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 74  

1742   1                      Back = 50;
1743   1                      Front = 50;
1744   1              }
1745   1              else if( Back+Front>=100 ) {
1746   1                      if( Back>Front )
1747   1                              Back = 100 - Front;
1748   1                      else if( Front>Back ) 
1749   1                              Front = 100 - Back;
1750   1              }
1751   1      
1752   1              HPosCurr = (BYTE)Back;
1753   1              HPosMax  = (BYTE)(Back + Front);
1754   1              */
1755   1              HPosCurr = (WORD)Back;
1756   1              HPosMax = Back + Front;
1757   1              //----- calculate V Pos Range
1758   1              Back  = GetVactiveStart() - GetVSYNCPulse();
1759   1              //Back  = GetVstart() - GetVSYNCPulse();
1760   1              Front = GetVPN() - PCMDATA[PcMode].VAN - GetVactiveStart();
1761   1              //Front = GetVPN() - PCMDATA[PcMode].VAN - GetVstart();
1762   1      
1763   1              #ifdef DEBUG_PC_MEAS
                      dPrintf("\r\nV  ~~~|_%d_|~%d~", (WORD)GetVSYNCPulse(), Back );
                      dPrintf(":+++ %d +++:~%d~|_%d_|~~~ ",  PCMDATA[PcMode].VAN, Front, (WORD)GetVSYNCPulse() );
                      dPuts  ("\r\n-------------------------------------------");
                      #endif //DEBUG_PC_MEAS
1768   1      
1769   1              VPosCurr = Back-4;
1770   1      
1771   1              if( Front <= 0 )
1772   1                      VPosMax = VPosCurr+1;
1773   1              else
1774   1                      VPosMax = VPosCurr + Front;
1775   1      
1776   1      }
1777          /*===========================================================================*/
1778          /*                                                Real Measurement routine                                           */
1779          /*===========================================================================*/
1780          BYTE DoMeasurement(void)
1781          {
1782   1              WORD coarse;
1783   1      
1784   1              //------------------------ Clock Tuning -------------------------------
1785   1              #ifdef DEBUG_PAUSE
                      Printf("coarse = AutoTuneClock()");
                      #endif //DEBUG_PAUSE
1788   1      
1789   1              coarse = AutoTuneClock();                       // plldiv
1790   1              if( coarse == 0 ) {
1791   2                      ePuts("\r\nToo big IPF");
1792   2                      MeasureAndWait(3);
1793   2                      return FALSE;
1794   2              }
1795   1      
1796   1      
1797   1              //-------------------------- Fine Tuning ------------------------------
1798   1      
1799   1              AutoTunePhase();
1800   1              
1801   1              //-------------------------- Get Active Region ------------------------
1802   1              if( !GetActiveRegion() ) {
1803   2      
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 75  

1804   2                      GetPCDataEE(PcMode);
1805   2      
1806   2                      MeasureAndWait(3);
1807   2                      return FALSE;
1808   2              }
1809   1      
1810   1              //-------------------------- Display Result ---------------------------
1811   1              DisplayResultAndSetActiveRange();
1812   1      
1813   1              return TRUE;
1814   1      }
1815          
1816          //#ifdef SUPPORT_DTV
1817          void RGBModeFieldDetect(BYTE flag)
1818          {
1819   1              BYTE val;
1820   1      
1821   1              val = ReadTW88(0x42);
1822   1              if( flag ) val = val | 0x80;
1823   1              else       val = val & 0x7f;
1824   1              WriteTW88( 0x42, val);
1825   1      }
1826          //#endif
1827          
1828          #include "data\DTV_PC.txt"
   1      =1  /*---------------------------------------------------------------------------*/
   2      =1  /*                          PC Mode Initial Setup                            */
   3      =1  /*---------------------------------------------------------------------------*/
   4      =1  
   5      =1  CODE BYTE PC_RGB_ADC_Reg[] = {
   6      =1  
   7      =1          TW88I2CAddress, 9,
   8      =1          0x49, 0x40, //; seq
   9      =1          0x47, 0xD5,
  10      =1          0x48, 0x00,
  11      =1          0x4D, 0x20, //; seq
  12      =1          0x4A, 0x10,
  13      =1          0x4B, 0x33,
  14      =1          0x4C, 0x59,
  15      =1  
  16      =1          0x60, 0x00,
  17      =1          0x61, 0x80,
  18      =1          0x62, 0x42,
  19      =1          0x63, 0x05,
  20      =1  
  21      =1  //      0xB2, 0x94,
  22      =1  //      0xb8, 0x06,
  23      =1  //      0xB9, 0x0A,
  24      =1  //      0xBA, 0xE1,
  25      =1  
  26      =1          0xff, 0x01,             // page 1
  27      =1          0x7b, 0x0d,
  28      =1  
  29      =1  //      0x84, 0x75,
  30      =1  
  31      =1  //      0xc0, 0x18,             //0xC0, 0x10,
  32      =1          0xC1, 0xFF,
  33      =1  //      0xC2, 0x13,
  34      =1          0xC3, 0x04,
  35      =1          0xC4, 0x20,
  36      =1          0xC5, 0x10,
  37      =1  //      0xcc, 0x1f,
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 76  

  38      =1  
  39      =1          0xd0, 0x07,
  40      =1          0xd1, 0x80,
  41      =1          0xd2, 0x80,
  42      =1          0xd3, 0x80,
  43      =1  
  44      =1          0xff, 0x00,
  45      =1          0xff, 0xff
  46      =1  };
  47      =1  
  48      =1  
  49      =1  /*---------------------------------------------------------------------------*/
  50      =1  /*                          DTV Mode Initial Setup                           */
  51      =1  /*---------------------------------------------------------------------------*/
  52      =1  
  53      =1  CODE BYTE DTV_YPbPr_480I_Reg[] = {
  54      =1          
  55      =1          TW88I2CAddress, 5,
  56      =1          0x49, 0x30,             //sequence
  57      =1          0x47, 0x7d,
  58      =1          0x48, 0x4B,
  59      =1          0x4D, 0x00,             // seq
  60      =1          0x4A, 0x10,
  61      =1          0x4B, 0x10,
  62      =1          0x4C, 0xF3,
  63      =1  
  64      =1          0x60, 0xe1,     //0xE0,
  65      =1          0x61, 0x80,
  66      =1          0x62, 0x80,     //0x7C,
  67      =1          0x63, 0x00,
  68      =1          0x69, 0x00,
  69      =1          0x6a, 0x00,
  70      =1  
  71      =1  //      0xb2, 0x2d,
  72      =1  //      0xb8, 0x03,
  73      =1  //      0xba, 0xea,
  74      =1  //      0xb9, 0x20,
  75      =1  
  76      =1          0xff, 0x01,             // page 1
  77      =1          0x7b, 0x0d,
  78      =1  
  79      =1  
  80      =1          0xC0, 0x10,
  81      =1          0xC1, 0x08,
  82      =1  //      0xC2, 0x03,
  83      =1  //      0xC3, 0x03,
  84      =1  //      0xC4, 0x5A,
  85      =1  //      0xC5, 0x12,
  86      =1          0xcc, 0x0f,
  87      =1  
  88      =1          0xd0, 0x07,
  89      =1          0xd1, 0x80,
  90      =1          0xd2, 0x80,
  91      =1          0xd3, 0x80,
  92      =1          0xd7, 140,              //for 480i
  93      =1  
  94      =1          0xff, 0x00,
  95      =1          0xff, 0xff
  96      =1  };
  97      =1  
  98      =1  CODE BYTE DTV_YPbPr_576I_Reg[] = {
  99      =1          
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 77  

 100      =1          TW88I2CAddress, 7,
 101      =1          0x49, 0x30,             //sequence
 102      =1          0x47, 0x8a,     //0x8c,12202007
 103      =1          0x48, 0x75,
 104      =1          0x4D, 0x10,             // seq
 105      =1          0x4A, 0x14,
 106      =1          0x4B, 0x14,
 107      =1          0x4C, 0x21,
 108      =1  
 109      =1          0x60, 0xE1,
 110      =1          0x61, 0x80,
 111      =1          0x62, 0x96,
 112      =1          0x63, 0x00,
 113      =1  
 114      =1  //      0xb2, 0x4d,
 115      =1  //      0xb8, 0x03,
 116      =1  #ifdef WQVGA
           =1         0xb9, 0x0e,
           =1 #endif
 119      =1  //      0xba, 0xe2,
 120      =1          0xb9, 0x22,
 121      =1  
 122      =1          0xff, 0x01,             // page 1
 123      =1          0x7b, 0x05,
 124      =1  
 125      =1          0xC0, 0x10,
 126      =1          0xC1, 0x09,
 127      =1  //      0xC2, 0x03,
 128      =1  //      0xC3, 0x03,
 129      =1  //      0xC4, 0x60,
 130      =1  //      0xC5, 0x12,
 131      =1          0xcc, 0x0f,
 132      =1  
 133      =1          0xd0, 0x07,
 134      =1          0xd1, 0x80,
 135      =1          0xd2, 0x80,
 136      =1          0xd3, 0x80,
 137      =1          0xd7, 140,      
 138      =1  
 139      =1          0xff, 0x00,
 140      =1          0xff, 0xff
 141      =1  };
 142      =1  
 143      =1  CODE BYTE DTV_YPbPr_1080I_Reg[] = {
 144      =1          
 145      =1          TW88I2CAddress, 7,
 146      =1          0x49, 0x80,             //sequence
 147      =1          0x47, 0xef,     //0xdc,
 148      =1          0x48, 0xa0,
 149      =1          0x49, 0x80,
 150      =1          0x4D, 0x20,             // seq
 151      =1          0x4A, 0x12,
 152      =1          0x4B, 0x12,
 153      =1          0x4C, 0x1d,
 154      =1          0x4d, 0x20,
 155      =1  
 156      =1          0x60, 0x00,
 157      =1          0x61, 0x2e,     //0x34,
 158      =1          0x62, 0x1f,     //0x20,
 159      =1          0x63, 0x07,
 160      =1          0x69, 0x00,
 161      =1          0x6a, 0x00,
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 78  

 162      =1  
 163      =1  //      0xb2, 0x9b,
 164      =1  //      0xb8, 0x06,
 165      =1  //      0xb9, 0x0f,     //0x12,
 166      =1  //      0xba, 0xe2,
 167      =1  
 168      =1          0xff, 0x01,             // page 1
 169      =1          0x7b, 0x0d,
 170      =1  
 171      =1          0xC0, 0x10,
 172      =1          0xC1, 0x0c,
 173      =1  //      0xC2, 0x23,
 174      =1  //      0xC3, 0x08,
 175      =1  //      0xC4, 0x98,
 176      =1  //      0xC5, 0x1f,
 177      =1          0xcc, 0x0f,
 178      =1  
 179      =1          0xd0, 0x07,
 180      =1          0xd1, 0x80,
 181      =1          0xd2, 0x80,
 182      =1          0xd3, 0x80,
 183      =1          0xd7, 24,       
 184      =1  
 185      =1          0xff, 0x00,
 186      =1          0xff, 0xff
 187      =1  };
 188      =1  
 189      =1  CODE BYTE DTV_YPbPr_1080I50A_Reg[] = {
 190      =1          
 191      =1          TW88I2CAddress, 7,
 192      =1          0x49, 0x81,             //sequence
 193      =1          0x47, 0x0f,     //0xdc,
 194      =1          0x48, 0xa0,
 195      =1          0x49, 0x81,
 196      =1          0x4D, 0x20,             // seq
 197      =1          0x4A, 0x12,
 198      =1          0x4B, 0x12,
 199      =1          0x4C, 0x1d,
 200      =1          0x4d, 0x20,
 201      =1  
 202      =1          0x60, 0x00,
 203      =1          0x61, 0x2e,     //0x34,
 204      =1          0x62, 0x1f,     //0x20,
 205      =1          0x63, 0x07,
 206      =1          0x69, 0x00,
 207      =1          0x6a, 0x00,
 208      =1  
 209      =1  //      0xb2, 0x9b,
 210      =1  //      0xb8, 0x06,
 211      =1  //      0xb9, 0x0f,     //0x12,
 212      =1  //      0xba, 0xe2,
 213      =1  
 214      =1          0xff, 0x01,             // page 1
 215      =1          0x7b, 0x0d,
 216      =1  
 217      =1          0xC0, 0x10,
 218      =1          0xC1, 0x0c,
 219      =1  //      0xC2, 0x23,
 220      =1  //      0xC3, 0x08,
 221      =1  //      0xC4, 0x98,
 222      =1  //      0xC5, 0x1f,
 223      =1          0xcc, 0x0f,
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 79  

 224      =1  
 225      =1          0xd0, 0x07,
 226      =1          0xd1, 0x80,
 227      =1          0xd2, 0x80,
 228      =1          0xd3, 0x80,
 229      =1          0xd7, 24,       
 230      =1  
 231      =1          0xff, 0x00,
 232      =1          0xff, 0xff
 233      =1  };
 234      =1  
 235      =1  CODE BYTE DTV_YPbPr_1080I50B_Reg[] = {
 236      =1          
 237      =1          TW88I2CAddress, 7,
 238      =1          0x49, 0x81,             //sequence
 239      =1          0x47, 0x9b,     //0xdc,
 240      =1          0x48, 0xe0,
 241      =1          0x49, 0x91,
 242      =1          0x4D, 0x20,             // seq
 243      =1          0x4A, 0x4a,
 244      =1          0x4B, 0x4a,
 245      =1          0x4C, 0x1d,
 246      =1          0x4d, 0x20,
 247      =1  
 248      =1          0x60, 0x00,
 249      =1          0x61, 0x2e,     //0x34,
 250      =1          0x62, 0x1d,     //0x20,
 251      =1          0x63, 0x07,
 252      =1          0x69, 0x00,
 253      =1          0x6a, 0x00,
 254      =1  
 255      =1  //      0xb2, 0x9b,
 256      =1          0xb8, 0x25,
 257      =1  //      0xb9, 0x0f,     //0x12,
 258      =1  //      0xba, 0xe2,
 259      =1  //      0xbd, 0x08,
 260      =1          0xbe, 0xc3,
 261      =1  
 262      =1          0xff, 0x01,             // page 1
 263      =1          0x7b, 0x0d,
 264      =1  
 265      =1          0xC0, 0x10,
 266      =1          0xC1, 0x0c,
 267      =1  //      0xC2, 0x23,
 268      =1  //      0xC3, 0x0a,
 269      =1  //      0xC4, 0x50,
 270      =1  //      0xC5, 0x1f,
 271      =1          0xcc, 0x0f,
 272      =1  
 273      =1          0xd0, 0x07,
 274      =1          0xd1, 0x80,
 275      =1          0xd2, 0x80,
 276      =1          0xd3, 0x80,
 277      =1          0xd7, 0x48,     
 278      =1  
 279      =1          0xff, 0x00,
 280      =1          0xff, 0xff
 281      =1  };
 282      =1  
 283      =1  CODE BYTE DTV_YPbPr_720P_Reg[] = {
 284      =1  
 285      =1          TW88I2CAddress, 7,
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 80  

 286      =1          0x49, 0x61,             //sequence
 287      =1          0x47, 0x3a,
 288      =1          0x48, 0x4B,
 289      =1          0x4D, 0x20,             // seq
 290      =1          0x4A, 0x17,
 291      =1          0x4B, 0x21,
 292      =1          0x4C, 0xd1,
 293      =1  
 294      =1          0x60, 0x00,
 295      =1          0x61, 0xc8,             //0xcd,
 296      =1          0x62, 0x80,
 297      =1          0x63, 0x05,
 298      =1          0x64, 0x00,
 299      =1          0x69, 0x00,
 300      =1  
 301      =1  
 302      =1  //      0xb2, 0x9a,
 303      =1  //      0xb8, 0x06,
 304      =1  //      0xb9, 0x0b,             //0x11,
 305      =1  //      0xba, 0xe2,
 306      =1  
 307      =1          0xff, 0x01,             // page 1
 308      =1          0x7b, 0x0d,
 309      =1  
 310      =1          0xC0, 0x10,
 311      =1          0xC1, 0x0d,
 312      =1  //      0xC2, 0x23,
 313      =1  //      0xC3, 0x06,
 314      =1  //      0xC4, 0x72,
 315      =1  //      0xC5, 0x10,
 316      =1          0xcc, 0x0f,
 317      =1  
 318      =1          0xd0, 0x07,
 319      =1          0xd1, 0x80,
 320      =1          0xd2, 0x80,
 321      =1          0xd3, 0x80,
 322      =1          0xd7, 38,               
 323      =1  
 324      =1          0xff, 0x00,
 325      =1          0xff, 0xff
 326      =1  };
 327      =1  
 328      =1  CODE BYTE DTV_YPbPr_720P50_Reg[] = {
 329      =1  
 330      =1  
 331      =1          TW88I2CAddress, 7,
 332      =1          0x49, 0x61,             //sequence
 333      =1          0x47, 0x52,
 334      =1          0x48, 0x4A,
 335      =1          0x4D, 0x20,             // seq
 336      =1          0x4A, 0x17,
 337      =1          0x4B, 0x17,
 338      =1          0x4C, 0xd1,
 339      =1  
 340      =1          0x60, 0x00,
 341      =1          0x61, 0xc8,             //0xcd,
 342      =1          0x62, 0x80,
 343      =1          0x63, 0x05,
 344      =1          0x64, 0x00,
 345      =1          0x69, 0x00,
 346      =1  
 347      =1  
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 81  

 348      =1  //      0xb2, 0x9a,
 349      =1  //      0xb8, 0x06,
 350      =1  //      0xb9, 0x0b,             //0x11,
 351      =1  //      0xba, 0xe2,
 352      =1  
 353      =1          0xff, 0x01,             // page 1
 354      =1          0x7b, 0x0d,
 355      =1  
 356      =1          0xC0, 0x10,
 357      =1          0xC1, 0x0d,
 358      =1  //      0xC2, 0x23,
 359      =1  //      0xC3, 0x06,
 360      =1  //      0xC4, 0x72,
 361      =1  //      0xC5, 0x10,
 362      =1          0xcc, 0x0f,
 363      =1  
 364      =1          0xd0, 0x07,
 365      =1          0xd1, 0x80,
 366      =1          0xd2, 0x80,
 367      =1          0xd3, 0x80,
 368      =1          0xd7, 38,               
 369      =1  
 370      =1          0xff, 0x00,
 371      =1          0xff, 0xff
 372      =1  };
 373      =1  
 374      =1  
 375      =1  CODE BYTE DTV_YPbPr_480P_Reg[] = {
 376      =1          
 377      =1          TW88I2CAddress, 7,
 378      =1          0x49, 0x30,             //sequence
 379      =1          0x47, 0x7d,             //0x83,
 380      =1          0x48, 0x55,
 381      =1          0x4D, 0x10,             // seq
 382      =1          0x4A, 0x22,
 383      =1          0x4B, 0x22,             //0x2a,
 384      =1          0x4C, 0xe2,
 385      =1  
 386      =1          0x60, 0xe6,             //0xE1,
 387      =1          0x61, 0x80,
 388      =1          0x62, 0x00,             //0xf8,
 389      =1          0x63, 0x04,             //0x00,
 390      =1          0x69, 0x00,
 391      =1  
 392      =1  //      0xb2, 0x58,             //0x2d,
 393      =1  //      0xb8, 0x06,
 394      =1  //      0xb9, 0x23,             //0x2d,
 395      =1  //      0xba, 0xe2,
 396      =1  
 397      =1          0xff, 0x01,             // page 1
 398      =1          0x7b, 0x0d,
 399      =1  
 400      =1          0xC0, 0x10,             // component input, very important....
 401      =1          0xC1, 0x0a,
 402      =1  //      0xC2, 0x03,
 403      =1  //      0xC3, 0x03,
 404      =1  //      0xC4, 0x64,             //0x5A,
 405      =1  //      0xC5, 0x14,
 406      =1          0xcc, 0x0f,             //0x04,
 407      =1  
 408      =1          0xd0, 0x07,
 409      =1          0xd1, 0x80,
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 82  

 410      =1          0xd2, 0x80,
 411      =1          0xd3, 0x80,
 412      =1          0xd7, 52,               //for 480i
 413      =1  
 414      =1          0xff, 0x00,
 415      =1          0xff, 0xff
 416      =1  };
 417      =1  
 418      =1  CODE BYTE DTV_YPbPr_576P_Reg[] = {
 419      =1          
 420      =1          TW88I2CAddress, 7,
 421      =1          0x49, 0x30,             //sequence
 422      =1          0x47, 0x8d,
 423      =1          0x48, 0x60,
 424      =1          0x4D, 0x20,             // seq
 425      =1          0x4A, 0x2a,
 426      =1          0x4B, 0x2a,
 427      =1          0x4C, 0x41,
 428      =1  
 429      =1          0x60, 0xE1,
 430      =1          0x61, 0x80,
 431      =1          0x62, 0x26,
 432      =1          0x63, 0x04,
 433      =1  
 434      =1  //      0xb2, 0x2e,
 435      =1  //      0xb8, 0x06,
 436      =1  //      0xb9, 0x20,
 437      =1  //      0xba, 0xe2,
 438      =1  
 439      =1          0xff, 0x01,             // page 1
 440      =1          0x7b, 0x0d,
 441      =1  
 442      =1          0xC0, 0x10,
 443      =1          0xC1, 0x0b,
 444      =1  //      0xC2, 0x03,
 445      =1  //      0xC3, 0x03,
 446      =1  //      0xC4, 0x60,
 447      =1  //      0xC5, 0x14,
 448      =1          0xcc, 0x0f,
 449      =1  
 450      =1          0xd0, 0x07,
 451      =1          0xd1, 0x80,
 452      =1          0xd2, 0x80,
 453      =1          0xd3, 0x80,
 454      =1          0xd7, 58,               //for 480i
 455      =1  
 456      =1          0xff, 0x00,
 457      =1          0xff, 0xff
 458      =1  };
 459      =1  
 460      =1  //-----------------------------------------------------------------------
 461      =1  // Seperate Sync mode
 462      =1  //
 463      =1  CODE BYTE DTV_RGB_480I_Reg[] = { // H/V Mode
 464      =1  
 465      =1          TW88I2CAddress, 9,
 466      =1          0x40, 0xE4,
 467      =1          0x41, 0x00,
 468      =1          0x42, 0x84,//0
 469      =1          0x44, 0x2f,
 470      =1          //0x45, 0x11,                                   // even, odd field detection
 471      =1          //0x65, 0x80,                                   // Vscale Offset
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 83  

 472      =1          0xbe, 0xc2,
 473      =1  
 474      =1          0xff, 0x01,
 475      =1          0xc5, 0x0c,     // Phase
 476      =1  
 477      =1          0xda, 0x10,     // Clamp UV
 478      =1          
 479      =1          0xff, 0x00,
 480      =1          0xff, 0xff
 481      =1  };
 482      =1  
 483      =1  CODE BYTE DTV_RGB_480P_Reg[] = {
 484      =1          
 485      =1          TW88I2CAddress, 9,
 486      =1          0x40, 0xE4,
 487      =1          0x41, 0x00,
 488      =1          0x42, 0x84,//0
 489      =1          0x44, 0x2f,
 490      =1          //0x45, 0x11,                                   // even, odd field detection
 491      =1          //0x65, 0x80,                                   // Vscale Offset
 492      =1          0xbe, 0xc2,
 493      =1  
 494      =1          0xff, 0x01,
 495      =1          0xc5, 0x0c,     // Phase
 496      =1  
 497      =1          0xda, 0x10,     // Clamp UV
 498      =1          
 499      =1          0xff, 0x00,
 500      =1          0xff, 0xff
 501      =1  };
 502      =1  
 503      =1  
 504      =1  CODE BYTE DTV_RGB_720P_Reg[] = {
 505      =1          
 506      =1          TW88I2CAddress, 9,
 507      =1          0x40, 0xE4,
 508      =1          0x41, 0x00,
 509      =1          0x42, 0x84,//0
 510      =1          0x44, 0x2f,
 511      =1          //0x45, 0x11,                                   // even, odd field detection
 512      =1          //0x65, 0x80,                                   // Vscale Offset
 513      =1          0xbe, 0xc2,
 514      =1  
 515      =1          0xff, 0x01,
 516      =1          0xc5, 0x0c,     // Phase
 517      =1  
 518      =1          0xda, 0x10,     // Clamp UV
 519      =1          
 520      =1          0xff, 0x00,
 521      =1          0xff, 0xff
 522      =1  };
 523      =1  
 524      =1  //=============================================================================
 525      =1  CODE BYTE DTV_RGB_480I_Reg_Analog[] = { // H/V Mode
 526      =1          TW88I2CAddress, 18+38,
 527      =1          0x40, 0x06,
 528      =1          0x41, 0x00,
 529      =1          0x42, 0x00,
 530      =1          0x44, 0x1b,
 531      =1  //--
 532      =1          0x49, 0x38,
 533      =1          0x47, 0x7A,
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 84  

 534      =1          0x48, 0x4F,
 535      =1          0x4d, 0x10,
 536      =1          0x4a, 0x0C,
 537      =1          0x4b, 0x0C,
 538      =1          0x4c, 0x0b,
 539      =1          0x4e, 0x68,
 540      =1          0x4f, 0x10,
 541      =1  
 542      =1          0x63, 0x04,
 543      =1          0x60, 0xC0,
 544      =1          0x61, 0x80,
 545      =1          0x62, 0x00,
 546      =1          0x64, 0x00,
 547      =1          0x65, 0x80,
 548      =1          0x66, 0x00,
 549      =1          0x67, 0x00,
 550      =1          0x68, 0x00,
 551      =1  
 552      =1  //      0xb0, 0x40,
 553      =1  //      0xb1, 0x80,
 554      =1  //      0xb6, 0x34,
 555      =1  //      0xb2, 0xB8,
 556      =1  //      0xb3, 0x04,
 557      =1  //      0xb4, 0x10,
 558      =1  //      0xb5, 0xC0,
 559      =1  //      0xbb, 0x01,
 560      =1  //      0xb7, 0x01,
 561      =1  //      0xb8, 0x06,
 562      =1  //      0xb9, 0x01,
 563      =1  //      0xba, 0xED,
 564      =1  //      0xbc, 0x00,
 565      =1  //      0xbd, 0x08,
 566      =1  
 567      =1          0xf9, 0x00,
 568      =1          0xfa, 0xb4,
 569      =1          0xfb, 0x21,
 570      =1          0xfc, 0x00,
 571      =1          0xfd, 0x00,
 572      =1          0xfe, 0x00,
 573      =1  
 574      =1  //--
 575      =1          0xc5, 0xc7,     // Phase
 576      =1          0xc6, 0x11,
 577      =1  
 578      =1          0xc5, 0xe2,     // Clamp UV
 579      =1          0xc6, 0x80,
 580      =1  
 581      =1  //-->
 582      =1          0xc5, 0xc1,     // 
 583      =1          0xc6, 0x30,
 584      =1          
 585      =1          0xc5, 0xc4,     // Divider H
 586      =1          0xc6, 0x03,
 587      =1          0xc5, 0xc5,     // Phase
 588      =1          0xc6, 0x59,
 589      =1  
 590      =1          0xc5, 0xc1,     // 
 591      =1          0xc6, 0x20,
 592      =1  
 593      =1          0x06, 0x80,
 594      =1  //<--   
 595      =1          
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 85  

 596      =1          0xbe, 0xc3,
 597      =1          0xff, 0xff
 598      =1  };
 599      =1  
 600      =1  
 601      =1  CODE BYTE DTV_RGB_480P_Reg_Analog[] = {
 602      =1          
 603      =1          TW88I2CAddress, 18+38,
 604      =1          0x40, 0x06,
 605      =1          0x41, 0x00,
 606      =1          0x42, 0x00,
 607      =1          0x44, 0x1b,
 608      =1  //--
 609      =1          0x49, 0x38,
 610      =1          0x47, 0x7A,
 611      =1          0x48, 0x4F,
 612      =1          0x4d, 0x10,
 613      =1          0x4a, 0x0C,
 614      =1          0x4b, 0x0C,
 615      =1          0x4c, 0xF8,
 616      =1          0x4e, 0x68,
 617      =1          0x4f, 0x10,
 618      =1  
 619      =1          0x63, 0x08,
 620      =1          0x60, 0xC0,
 621      =1          0x61, 0x80,
 622      =1          0x62, 0x00,
 623      =1          0x64, 0x00,
 624      =1          0x65, 0x80,
 625      =1          0x66, 0x00,
 626      =1          0x67, 0x00,
 627      =1          0x68, 0x00,
 628      =1  
 629      =1  //      0xb0, 0x40,
 630      =1  //      0xb1, 0x80,
 631      =1  //      0xb6, 0x35,
 632      =1  //      0xb2, 0xB8,
 633      =1  //      0xb3, 0x04,
 634      =1  //      0xb4, 0x10,
 635      =1  //      0xb5, 0xC0,
 636      =1  //      0xbb, 0x01,
 637      =1  //      0xb7, 0xFA,
 638      =1  //      0xb8, 0x06,
 639      =1  //      0xb9, 0x07,
 640      =1  //      0xba, 0xED,
 641      =1  //      0xbc, 0x00,
 642      =1  //      0xbd, 0x08,
 643      =1  
 644      =1          0xf9, 0x00,
 645      =1          0xfa, 0xDA,
 646      =1          0xfb, 0x0D,
 647      =1          0xfc, 0x00,
 648      =1          0xfd, 0x00,
 649      =1          0xfe, 0x00,
 650      =1  
 651      =1  //--
 652      =1          0xc5, 0xc7,     // Phase
 653      =1          0xc6, 0x1a,
 654      =1  
 655      =1          0xc5, 0xe2,     // Clamp UV
 656      =1          0xc6, 0x80,
 657      =1  //-->
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 86  

 658      =1          0xc5, 0xc1,     // 
 659      =1          0xc6, 0x30,
 660      =1          
 661      =1          0xc5, 0xc4,     // Divider H
 662      =1          0xc6, 0x03,
 663      =1          0xc5, 0xc5,     // Phase
 664      =1          0xc6, 0x59,
 665      =1  
 666      =1          0xc5, 0xc1,     // 
 667      =1          0xc6, 0x20,
 668      =1  
 669      =1          0x06, 0x80,
 670      =1  //<--   
 671      =1          
 672      =1          0xbe, 0xc3,
 673      =1          0xff, 0xff
 674      =1  };
 675      =1  
 676      =1  
 677      =1  
 678      =1  
 679      =1  
 680      =1  
 681      =1  
 682      =1  
 683      =1  
 684      =1  
1829          
1830          /*===========================================================================*/
1831          /*                                                                           */
1832          /*===========================================================================*/
1833          BYTE SetADCandInputRegisterByVGAMode(BYTE mode)
1834          {
1835   1      
1836   1              CODE_P BYTE *reg=0;
1837   1              BYTE fielddetect=0, ret;
1838   1      
1839   1              SetCoarse( PCMDATA[mode].CLOCK );
1840   1      //      ret = SetVCORange(IHF * PCMDATA[mode].CLOCK);   
1841   1              ret = SetVCORange(PCMDATA[mode].IPF * 100000L); 
1842   1      
1843   1              {
1844   2                      switch (mode) {
1845   3                      case EE_RGB_480I:               
1846   3                      case EE_RGB_576I:               
1847   3                      case EE_RGB_1080I:              
1848   3                      case EE_RGB_1080I50A:
1849   3                                                                      #ifdef ADD_ANALOGPANEL
                                                                              if(IsAnalogOn())reg = DTV_RGB_480I_Reg_Analog; 
                                                                              else
                                                                              #endif   //ADD_ANALOGPANEL      
1853   3                                                                      reg = DTV_RGB_480I_Reg; fielddetect = 1;        break;
1854   3                      case EE_RGB_576P:
1855   3                      case EE_RGB_480P:
1856   3                                                                      #ifdef ADD_ANALOGPANEL
                                                                              if(IsAnalogOn())reg = DTV_RGB_480P_Reg_Analog; 
                                                                              else
                                                                              #endif  //ADD_ANALOGPANEL       
1860   3                                                                      reg = DTV_RGB_480P_Reg; 
1861   3                      
1862   3                                                                      fielddetect = 0;        break;
1863   3                      case EE_RGB_720P50:             
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 87  

1864   3                      case EE_RGB_720P:
1865   3                                                                      reg = DTV_RGB_720P_Reg; fielddetect = 0;        break;
1866   3                      default:                                reg = PC_RGB_ADC_Reg; fielddetect = 0;  break;
1867   3                      }
1868   2                      
1869   2              }
1870   1      
1871   1              RGBModeFieldDetect(fielddetect);
1872   1              if( reg ) I2CDeviceInitialize( reg );
1873   1      
1874   1              return ret;
1875   1      
1876   1      }
1877          #ifdef SUPPORT_DTV
              /*===========================================================================*/
              /*                                                                           */
              /*===========================================================================*/
              BYTE SetADCandInputRegisterByDTVMode(BYTE mode)
              {
              
                      CODE_P BYTE *reg=0;
                      BYTE fielddetect=1, ret;
                      WORD    width, height;
                      DWORD   scale;
              
                      WriteADC_TW88(0xc6, 0x20);
                      ret = SetVCORange(PCMDATA[mode].IPF * 100000L); 
                      SetCoarse( PCMDATA[mode].CLOCK );
              
                      switch (mode) {
                              case EE_YPbPr_480I:             reg = DTV_YPbPr_480I_Reg;               break;
                              case EE_YPbPr_576I:             reg = DTV_YPbPr_576I_Reg;               break;
                              case EE_YPbPr_480P:             reg = DTV_YPbPr_480P_Reg;               break;
                              case EE_YPbPr_576P:             reg = DTV_YPbPr_576P_Reg;               break;
                              case EE_YPbPr_720P:             reg = DTV_YPbPr_720P_Reg;               break;
                              case EE_YPbPr_720P50:   reg = DTV_YPbPr_720P50_Reg;             break;
                              case EE_YPbPr_1080I:    reg = DTV_YPbPr_1080I_Reg;              break;
                              case EE_YPbPr_1080I50A: reg = DTV_YPbPr_1080I50A_Reg;   break;
                              case EE_YPbPr_1080I50B: reg = DTV_YPbPr_1080I50B_Reg;   break;
                              // default: reg = DTV_YPbPr_480I_Reg;   width = 706;    height = 240;   break;                          // default no input setting
                      }
              
                      RGBModeFieldDetect(1);          // always detect
                      Printf("\r\nMODE: %d", (WORD)mode);
                      if( reg ) {
                              I2CDeviceInitialize( reg );
                              WriteTW88(0xB9, PCMDATA[mode].VBack );                  // important for panel setting
                              height = PCMDATA[mode].VAN;                                             // using table for calc
                              width = PCMDATA[mode].HAN;
                              scale = width;
                              scale *= 0x10000L;                              
                              scale /= PWIDTH;
                              XScale2(scale);
                              //#ifdef DEBUG_DTV
                              Printf("\r\nMODE: %d, width: %d, H scale: %xh - %xh", (WORD)mode, width, (WORD)(scale>>8), (WORD)(scale 
             -& 0xff));
                              //#endif
              
                              scale = height;
                              scale *= 0x10000L;
                              scale /= PHEIGHT;
                              YScale2(scale);
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 88  

                              #ifdef DEBUG_DTV
                              Printf("\r\nMODE: %d, height: %d, V scale: %xh - %xh", (WORD)mode, height, (WORD)(scale>>8), (WORD)(scal
             -e & 0xff));
                              #endif //DEBUG_DTV
                      }
              
                      //delay(250);
                      //WriteADC_TW88(0xc6, 0x27);
                      return ret;
              }
              
              /*===========================================================================*/
              /*                                                                           */
              /*===========================================================================*/
              BYTE DetectAndSetForDTVInput(BYTE eflag)                // 0: measure    Range4Coarse=0
                                                                                                              // 1: check EEP  Range4Coarse=0
                                                                                                              // 2: measure    Range4Coarse=1
                                                                                                              // 3: restore EEP
              {
                      bit VCORangeChged;
                      /*
                      BYTE  i;
                      WORD vpn, vpn1, ivf;
                      */
              #ifdef REFERENCE
              #else //REFERENCE
                      cLastSyncLoss = 0;
              #endif //REFERENCE
                      if (eflag > 3) return FALSE;
                      Printf("\r\n 0xd0=%2x", (WORD)ReadTW88(0xd0));
                      if (( ReadTW88(0xD0) & 0x01 ) == 0) {
                              DisplayPCInfo(CheckDTVCableStr[GetOSDLang()]);
                              PcMode = EE_PC_UNKNOWN;         // no signal
                              #ifdef DEBUG_DTV
                              Puts("\r\nCheck DTV Cable.....");
                              #endif //DEBUG_DTV
                              PanelFreeRun(1);
                              PanelBlack(1);
                              return FALSE;
                      }
                      #ifdef DEBUG_DTV
                      Printf("\r\nDetectAndSetForDTVInput_eflag: %2x,", (WORD)eflag);
                      #endif //DEBUG_DTV
              //      if( DebugLevel<3 && (eflag==1 || eflag==3) )    LCDPowerOFF();//PanelMute(1); 
              
                      PcMode = DetectDTVInputSource();
                      VCORangeChged = SetADCandInputRegisterByDTVMode(PcMode);
                      //ChangeInternPLL(PCMDATA[PcMode].PPF * 100000L);       // Set PPF (Internal PLL)
              
                      return TRUE;
              
              }
              #endif //SUPPORT_DTV
1977          /*===========================================================================*/
1978          /*                                                                           */
1979          /*===========================================================================*/
1980          BYTE DetectAndSetForVGAInput(BYTE eflag)                // 0: measure    Range4Coarse=0
1981                                                                                                          // 1: check EEP  Range4Coarse=0
1982                                                                                                          // 2: measure    Range4Coarse=1
1983                                                                                                          // 3: restore EEP
1984          {
1985   1      
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 89  

1986   1              bit VCORangeChged;
1987   1              BYTE  i;
1988   1              WORD vpn, vpn1, ivf;
1989   1      
1990   1              cLastSyncLoss = 0;
1991   1      
1992   1              if (( ReadTW88(0xD0) & 0x01 ) == 0) {
1993   2                      DisplayPCInfo(CheckPCCableStr[GetOSDLang()]);
1994   2                      PcMode = EE_PC_NO_SIGNAL;               // no signal
1995   2                      #ifdef DEBUG
                              Puts("\r\nCheck PC Cable.....");
                              #endif //DEBUG  
1998   2                      PanelFreeRun(1);
1999   2                      PanelBlack(1);
2000   2                      return FALSE;
2001   2              }
2002   1              WriteTW88( 0x44, (ReadTW88(0x44)&0xf3)|0x08 );          // set mode to YUV - direct path
2003   1      
2004   1              #ifdef DEBUG_PC_MEAS
                      dPrintf("\r\nDetectAndSetForVGAInput_eflag: %2x,", (WORD)eflag);
                      #endif //DEBUG_PC_MEAS
2007   1      
2008   1      
2009   1              //---------- Set Panel constant reg.------------------
2010   1      
2011   1              WriteTW88( 0x5c, (ReadTW88(0x5c) & 0x0f) | 0x30 );      // Noise Mask: 3
2012   1              WriteTW88( 0x5d, (ReadTW88(0x5d) & 0x0f) | 0x30 );      // active detect threshold: 3
2013   1      
2014   1              AutoPHPCalEnable();
2015   1      
2016   1              WriteTW88( 0xbd, 8 );                           // Vdelay=8
2017   1              WriteTW88( 0xb8, 6 );                           // Vsync Pulse Width
2018   1      
2019   1              //------- Assume the PC_XGA input, 60Hz Refresh -----------------
2020   1              WriteTW88( 0xff, 1 );           //set page 1
2021   1              if ( ReadTW88( 0xc1 ) & 0x40 )
2022   1              {       // HSYNC POL ?
2023   2                      dPuts("\r\ninvert CSYNC det pol");
2024   2                      WriteTW88( 0xc0, 0x18 );                //CSYNC det input polarity reverse
2025   2              }
2026   1              else 
2027   1              {
2028   2                      WriteTW88( 0xc0, 0x38 );                //CSYNC det input polarity reverse
2029   2              }
2030   1              if ( ReadTW88( 0xc1 ) & 0x80 ){ // VSYNC POL ?
2031   2                      dPuts("\r\nNo invert VSYNC pol");
2032   2                      WriteTW88( 0xcc, 0x1F );                //CSYNC det input polarity reverse
2033   2              }
2034   1              else {
2035   2                      WriteTW88( 0xcc, 0x1d );                //CSYNC det input polarity reverse
2036   2              }
2037   1              WriteTW88( 0xff, 0 );
2038   1      
2039   1              SetMeasureWindowH(1, 1400);             // default window to 1400
2040   1              SetMeasureWindowV(1, 1200);             //1200
2041   1      
2042   1              //if ( eflag == 1 ) return 0;
2043   1      
2044   1              #ifdef DEBUG_PAUSE
                      Pause("GetHpnVpn_before{CR}");
                      #endif //DEBUG_PAUSE
2047   1              vpn = GetHpnVpn(1);                                     // VPN, IVF 
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 90  

2048   1              ivf = IVF;
2049   1      
2050   1              //------- Estimate IPF and Set VCO Range (ADC) ---------------
2051   1              i=0;
2052   1              do {
2053   2                      #ifdef DEBUG_PC_MEAS
                              dPrintf("\r\n=========================== LOOP:%d", (WORD)i);
                              #endif //DEBUG_PC_MEAS
2056   2                      #ifdef DEBUG_PAUSE
                              Pause("DecideVGAInputSource{CR}");
                              #endif //DEBUG_PAUSE
2059   2                      PcMode = DecideVGAInputSource(vpn, IVF);                // check with vertical line and IVF
2060   2                      #ifdef XGA
                              if (PcMode <= EE_SP3)
                                      WriteTW88( 0xb1, ReadTW88(0xb1) |4);
                              else
                                      WriteTW88( 0xb1, ReadTW88(0xb1) & 0xf8);
                              if (PcMode == EE_VGA_72)
                                      WriteTW88( 0xb8, 5 );                           // Vsync Pulse Width
                              #endif //XGA
2068   2      
2069   2                      #ifdef DEBUG_PC_MEAS
                              dPrintf("\r\n-----> Detect PCMODE: %d", (WORD)PcMode);
                              #endif //DEBUG_PC_MEAS
2072   2                      if( PcMode==EE_PC_UNKNOWN ) { 
2073   3                              #ifdef DEBUG_PC
                                      dPuts("\r\n-----> PC_UNKNOWN");
                                      #endif //DEBUG_PC
2076   3                              if( vpn<200 ) vpn = 250;        // HHY 1.62 if coarse value is too small, ADC is malfunctioned.
2077   3                              VCORangeChged = SetVCORange( IHF * (vpn/3)*4 ); 
2078   3                              SetCoarse(vpn/3*4);                                             // HHY 1.43
2079   3                      }
2080   2                      else if( PcMode==EE_PC_NO_SIGNAL ) {
2081   3                              #ifdef DEBUG_PC
                                      dPuts("\r\n-----> Sync Loss");
                                      #endif //DEBUG_PC
2084   3                              if( GetInputSelection()==PC ) goto Failure;
2085   3                      }
2086   2                      else {
2087   3                              #ifdef DEBUG_PC_MEAS
                                      dPuts("\r\n-----> Find PC mode");
                                      #endif //DEBUG_PC_MEAS
2090   3                              if( eflag==1 || eflag==3 ) {    // HHY 2.01
2091   4                                      VCORangeChged = SetADCandInputRegisterByVGAMode(PcMode);
2092   4                              
2093   4                                      #ifdef DEBUG_PC_MEAS
                                              dPrintf("\r\n   ---->>> Set Initial value by detected mode[%d]", (WORD)PcMode);
                                              #endif //DEBUG_PC_MEAS
2096   4                              }
2097   3                              if ( PcMode < 28 ) {
2098   4                                      #ifdef DEBUG_PC_MEAS
                                              dPuts("\r\n-----> stop searching...................");
                                              #endif //DEBUG_PC_MEAS
2101   4                                      break;
2102   4                              }
2103   3                              #ifdef REFERENCE
                                      #else
2105   3                              else
2106   3                              {
2107   4                                      WriteTW88( 0x40, ReadTW88(0x40) & 0xdf);
2108   4                              }
2109   3                              #endif                          
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 91  

2110   3                      }
2111   2      
2112   2                      vpn1 = GetHpnVpn(1);                                            // VPN, IVF ***
2113   2      
2114   2                      if( vpn1==0 ) {
2115   3                              #ifdef DEBUG_PC
                                      dPrintf("\r\n   ---> Error at GetHpnVpn line:%d", __LINE__);
                                      #endif //DEBUG_PC
2118   3                              goto Failure;
2119   3                      }
2120   2      
2121   2                      // Check SYNC Loss      // HHY 1.47
2122   2                      if( PcMode == EE_PC_UNKNOWN ) {
2123   3                              StartNewDetect();
2124   3                              if( (ReadTW88(0xd0) & 0x06) )  {
2125   4                                      PcMode = EE_PC_NO_SIGNAL;
2126   4                                      #ifdef DEBUG_PC
                                              ePuts("\r\n-----> Sync Loss");
                                              #endif //DEBUG_PC
2129   4                                      if( GetInputSelection()==PC ) goto Failure;
2130   4                              }
2131   3                      }
2132   2      
2133   2                      vpn = vpn1;
2134   2                      ivf = IVF;
2135   2      
2136   2                      i++;
2137   2              } while( ( (PcMode==EE_PC_UNKNOWN) || VCORangeChged) && i<5 );  // by getting valid VPN
2138   1      
2139   1              if( PcMode==EE_PC_UNKNOWN ) goto Failure;
2140   1              if( PcMode==EE_PC_NO_SIGNAL) goto Failure;
2141   1      
2142   1      
2143   1              //==================================
2144   1              #ifdef ADD_ANALOGPANEL
                      if(IsAnalogOn()) return TRUE;
                      #endif //ADD_ANALOGPANEL
2147   1      
2148   1              //---------------------------------------------------------------------
2149   1      
2150   1              #ifdef DEBUG_PAUSE
                      Pause("ChangeInternPLL(PCMDATA[PcMode].PPF * 100000L){CR}");
                      #endif //DEBUG_PAUSE
2153   1              ChangeInternPLL(PCMDATA[PcMode].PPF * 100000L); // Set PPF (Internal PLL)
2154   1      
2155   1              //---------------------------------------------------------------------
2156   1      
2157   1              #ifdef DEBUG_PC_MEAS
                      dPrintf("\r\n eflag = %d PcMode = %d(%s)", (WORD)eflag, (WORD)PcMode, PcModeStr[PcMode] );
                      #endif //DEBUG_PC_MEAS
2160   1      
2161   1              //==================================
2162   1              #ifdef DEBUG_PAUSE
                      Pause("Measure_VPN_IHF(&LastVPN, &LastIHF){CR}");
                      #endif //DEBUG_PAUSE
2165   1              Measure_VPN_IHF(&LastVPN, &LastIHF);
2166   1      
2167   1              ivf = (LastIHF + LastVPN/2) / LastVPN;
2168   1      
2169   1              // Check if PcMode same as before
2170   1              #ifdef DEBUG_PAUSE
                      Pause("i = DecideVGAInputSource(LastVPN, ivf){CR}");
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 92  

                      #endif //DEBUG_PAUSE
2173   1              i = DecideVGAInputSource(LastVPN, ivf);
2174   1              #ifdef DEBUG_PC_MEAS
                      dPrintf("\r\n  --> Detect PcMode again:%d[%s]", (WORD)i, PcModeStr[i] );
                      #endif //DEBUG_PC_MEAS
2177   1              if( PcMode != i )  {
2178   2                      #ifdef DEBUG_PC_MEAS
                              dPrintf("  --- New PcMode=%d  i=%d", (WORD)PcMode, (WORD)i);
                              #endif //DEBUG_PC_MEAS
2181   2                      LastVPN = 0;
2182   2                      LastIHF = 0;
2183   2                      PcMode = EE_PC_UNKNOWN;
2184   2                      goto Failure;
2185   2      #ifdef REFERENCE
                              return FALSE;
              #endif //REFERENCE
2188   2              }
2189   1      
2190   1              //==================================
2191   1      
2192   1              if( (eflag==3) || (eflag==1) ) {
2193   2      
2194   2                      //==================
2195   2                      GetPCDataEE(PcMode);
2196   2      
2197   2                      goto Success;
2198   2      
2199   2              }
2200   1              else {
2201   2                      switch( eflag ) {
2202   3                      case 0: Range4Coarse = 0; break;
2203   3                      case 1: Range4Coarse = 0; break;
2204   3                      case 2: Range4Coarse = 1; break;
2205   3                      }
2206   2      
2207   2      //              SetADCGainOffset(0x80, 0xd0);
2208   2      //Abnormal_Test:
2209   2      
2210   2                      //--------------------
2211   2                      #ifdef DEBUG_PAUSE
                              Pause("i = DoMeasurement(){CR}");
                              #endif //DEBUG_PAUSE
2214   2                      i = DoMeasurement();                    // *** Coarse, Fine, Active
2215   2                      //--------------------
2216   2      //              i = 1;
2217   2      
2218   2                      if( i ) goto Success;
2219   2                      else    goto Failure;
2220   2              }
2221   1      
2222   1      Success:
2223   1              //==============================================
2224   1      
2225   1              WriteTW88( 0x44, (ReadTW88(0x44)&0xf3)|0x0c );          // set mode to RGB
2226   1              if( (ReadTW88(0xd0) & 0x06) )  {
2227   2                      #ifdef DEBUG_PC
                              ePuts("\r\n---> Finish, but Sync Loss");
                              #endif //DEBUG_PC
2230   2      #ifdef REFERENCE
              
                              LastVPN = 0;
                              LastIHF = 0;
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 93  

                              PcMode = EE_PC_NO_SIGNAL;
                              return FALSE;
              #else //REFERENCE
2237   2                      goto Failure;
2238   2      #endif //REFERENCE
2239   2              }
2240   1              else {
2241   2                      ClearPCInfo();
2242   2                      if( eflag==0 || eflag==2 ) SavePCDataEE(PcMode);
2243   2      
2244   2                      WriteTW88( 0xd0, 0xff );
2245   2                      WriteTW88( 0xd1, 0xff );
2246   2                      
2247   2                      return TRUE;
2248   2              }
2249   1      
2250   1      Failure:
2251   1      
2252   1              WriteTW88( 0x44, (ReadTW88(0x44)&0xf3)|0x0c );          // set mode to RGB
2253   1              WriteDecoder( ACNTL, ReadDecoder(ACNTL) | 0x80 );               // SW reset, because sometimes unstable
2254   1      #ifdef REFERENCE
                      PcMode = EE_PC_UNKNOWN;
                      if( (ReadTW88(0xd0) & 0x06) ) {
              #else //REFERENCE
2258   1              if((ReadTW88(0xd0) & 2) || (ReadTW88(0xd0) & 4)){
2259   2      #endif //REFERENCE
2260   2                      PcMode = EE_PC_NO_SIGNAL;
2261   2      
2262   2                      #ifdef DEBUG_PC
                              ePuts("\r\n-----> Out Of Range, but Sync Loss");
                              #endif
2265   2      
2266   2                      LastVPN = 0;
2267   2                      LastIHF = 0;
2268   2      #ifdef REFERENCE
              #else //REFERENCE
2270   2                      DisplayPCInfo(CheckPCCableStr[GetOSDLang()]);
2271   2                      PanelFreeRun(1);
2272   2                      PanelBlack(1);
2273   2                      Printf("aaaaa0");
2274   2      #endif //REFERENCE
2275   2                      return FALSE;
2276   2              }
2277   1              else {
2278   2      #ifdef REFERENCE
              #else //REFERENCE
2280   2                      PcMode = EE_PC_UNKNOWN;
2281   2      #endif //REFERENCE
2282   2                      GetHpnVpn(0);
2283   2      
2284   2                      if( !Measure_VPN_IHF(&LastVPN, &LastIHF) ) {
2285   3                              LastVPN = 0;
2286   3                              LastIHF = 0;
2287   3      
2288   3                              return FALSE;
2289   3                      }
2290   2                      IVF = (LastIHF + LastVPN/2) / LastVPN;
2291   2      
2292   2                      if( PcMode != DecideVGAInputSource(LastVPN, IVF) )  {
2293   3                              LastVPN = 0;
2294   3                              LastIHF = 0;
2295   3      #ifdef REFERENCE
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 94  

                                      PcMode = EE_PC_UNKNOWN;
                                      return FALSE;
              #endif //REFERENCE
2299   3                      }
2300   2      
2301   2                      DisplayPCInfo(OutOfRangeStr[GetOSDLang()]);
2302   2                      LastVPN = 0;
2303   2                      LastIHF = 0;
2304   2                      PanelFreeRun(1);
2305   2                      PanelBlack(1);
2306   2              }
2307   1              return FALSE;
2308   1              }
2309          /*****************************************************************************/
2310          /*                                PC Function Main - called by main periodically             */
2311          /*****************************************************************************/
2312          void CheckPCinput(void)
2313          {
2314   1              extern  BYTE InputSelection;
2315   1              BYTE statusD0, statusD1, i, page;
2316   1              
2317   1      
2318   1      
2319   1              DWORD   dwIHF;
2320   1              WORD    wIVF;
2321   1              WORD    vpn;
2322   1              BYTE    cCurrentPCMode;
2323   1      
2324   1              //===================== HSYNC/VSYNC loss ========================
2325   1      
2326   1              page = ReadTW88( REG_PAGE);
2327   1              WriteTW88( REG_PAGE, 0 );       
2328   1              statusD0 = ReadTW88(0xd0);
2329   1              statusD1 = ReadTW88(0xd1);
2330   1      #if 0   
              #ifdef REFERENCE
                      if( statusD0 & 0x06 ) {         // 
                              if ( PcMode == EE_PC_NO_SIGNAL )        return;         // before state is "no signal"
                              for(i=0; i<3; i++) {
                                      #ifdef DEBUG_PC
                                      ePrintf("\r\nSync Loss cnt=%d", (WORD)i);
                                      #endif //DEBUG_PC
                                      WriteTW88( 0xd0, 0xff); // clear status
                                      WriteTW88( 0xd1, 0xff); // clear status
                                      statusD0 = ReadTW88(0xd0);
                                      if( statusD0 & 0x06 ) 
                                              delay(1);
                                      else {
                                              WriteTW88( REG_PAGE, page );    // save back to page
                                              return;
                                      }
                              }
                              PcMode = EE_PC_NO_SIGNAL;               // no signal
                              //PanelBlack(1);
                              ClearLogo();
                              DisplayPCInfo(CheckPCCableStr[GetOSDLang()]);
                              //PanelBlack(1);
                              #ifdef DEBUG_PC
                              Puts("\r\nLost PC signal, Check Cable.....");
                              #endif //DEBUG_PC
                              WriteTW88( REG_PAGE, page );    // save back to page
                              return;
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 95  

                      }
                      else if ( (statusD1 & 0x30) == 0x30) {          // means VSYNC & HSYNC changed
              
                              #ifdef DEBUG_PC
                              Puts("\r\nPC mode change detected, waiting for stable");
                              #endif //DEBUG_PC
                              i = 0;
                              do {
                                      delay(100);                             // wait 0.1sec
                                      WriteTW88( 0xd0, 0xff); // clear status
                                      WriteTW88( 0xd1, 0xff); // clear status
                                      statusD0 = ReadTW88(0xd0);
                                      statusD1 = ReadTW88(0xd1);
                                      i++;
                                      if ( i > 10 ) {
                                              WriteTW88( REG_PAGE, page );    // save back to page
                                              #ifdef DEBUG_PC
                                              Puts("\r\ncannot find stable value...........");
                                              #endif //DEBUG_PC
                                              return;
                                      }
                              } while ( statusD1 & 0x30 );
              
                              #ifdef DEBUG_PC
                              Puts("\r\nPC mode change detected........");
                              #endif //DEBUG_PC
                              i = InputSelection;
                              InputSelection--;
                              ChangeInput( i );
                              delay(100);
              
                              WriteTW88( 0xd0, 0xff); // clear status
                              WriteTW88( 0xd1, 0xff); // clear status
                      }
              #else //REFERENCE
              #endif
              #endif
2395   1              //Printf("\r\nPcMode=%x",(WORD)PcMode);
2396   1      
2397   1              if ( PcMode == EE_PC_UNKNOWN)
2398   1              {
2399   2                      if(!cLastSyncLoss) 
2400   2                      {
2401   3                              DisplayPCInfo(OutOfRangeStr[GetOSDLang()]);
2402   3                              PanelFreeRun(1);
2403   3                              PanelBlack(1);
2404   3                              cLastSyncLoss = 1;
2405   3                      }
2406   2              }
2407   1              if((statusD0 & 2) || (statusD0 & 4)) 
2408   1              {               
2409   2                      if ( PcMode == EE_PC_NO_SIGNAL)
2410   2                      {
2411   3                              if(!cLastSyncLoss) 
2412   3                              {
2413   4                                      DisplayPCInfo(CheckPCCableStr[GetOSDLang()]);
2414   4                                      PanelFreeRun(1);
2415   4                                      PanelBlack(1);
2416   4                                      cLastSyncLoss = 1;
2417   4                              }
2418   3                              return;
2419   3                      }       
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 96  

2420   2                      for(i=0; i<3; i++) 
2421   2                      {
2422   3                              WriteTW88( 0xd0, 0xff); // clear status
2423   3                              WriteTW88( 0xd1, 0xff); // clear status
2424   3                              statusD0 = ReadTW88(0xd0);
2425   3                              if((statusD0 & 2) || (statusD0 & 4)) 
2426   3                                      delay(100);
2427   3                      }
2428   2                      PcMode = EE_PC_NO_SIGNAL;               // no signal
2429   2                      WriteTW88( 0xd0, 0xff); // clear status
2430   2                      WriteTW88( 0xd1, 0xff); // clear status
2431   2                      DisplayPCInfo(CheckPCCableStr[GetOSDLang()]);
2432   2                      PanelFreeRun(1);
2433   2                      PanelBlack(1);
2434   2                      //ClearLogo();
2435   2                      WriteTW88( REG_PAGE, page );    // save back to page
2436   2                      return;
2437   2              }
2438   1              else if ( (statusD1 & 0x10) ||(statusD1 & 0x20) ||(statusD1 & 1)) 
2439   1              {               // means VSYNC & HSYNC changed
2440   2                      i = 0;
2441   2                      do {
2442   3                              delay(100);                             // wait 0.1sec
2443   3                              WriteTW88( 0xd0, 0xff); // clear status
2444   3                              WriteTW88( 0xd1, 0xff); // clear status
2445   3                              statusD0 = ReadTW88(0xd0);
2446   3                              statusD1 = ReadTW88(0xd1);
2447   3                              i++;
2448   3                              if ( i > 10 )
2449   3                              {
2450   4                                      WriteTW88( REG_PAGE, page );    // save back to page
2451   4                                      return;
2452   4                              }
2453   3                      } while ( (statusD1 & 0x10) ||(statusD1 & 0x20) || (statusD1 & 1)) ;
2454   2                      i = InputSelection;
2455   2                      InputSelection--;
2456   2                      ClearPCInfo();
2457   2                      ChangeInput(i);
2458   2                      return;
2459   2              }
2460   1              // solve to change timing is fast at unstable sync
2461   1              // 2009.01.16 start
2462   1              MeasureAndWait(3);
2463   1              //----- Get New HPN -------------
2464   1              dwIHF = (GetPPF()+GetHPN()/2) / GetHPN();               // IHF = PPF / HPN 
2465   1              MeasureAndWait(3);
2466   1              //----- Get New VPN -------------
2467   1              wIVF = (WORD)((IHF+GetVPN()/2)/GetVPN());               // IVF = IHF / VPN 
2468   1              if((abs(IHF -dwIHF) > 500) ||(abs(IVF -wIVF) >= 2))
2469   1              {
2470   2                      i = InputSelection;
2471   2                      InputSelection--;
2472   2                      delay(100);                             // wait 0.1sec
2473   2                      ClearPCInfo();
2474   2                      ChangeInput( i );
2475   2                      WriteTW88( REG_PAGE, page );    // save back to page
2476   2                      return;
2477   2              }
2478   1              vpn = GetHpnVpn(1);                                     // VPN, IVF 
2479   1              cCurrentPCMode = DecideVGAInputSource(vpn, IVF);                // check with vertical line and IVF
2480   1              if (cCurrentPCMode != PcMode)
2481   1              {
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 97  

2482   2                      i = InputSelection;
2483   2                      InputSelection--;
2484   2                      ClearPCInfo();
2485   2                      ChangeInput(i);
2486   2                      page = ReadTW88( REG_PAGE );
2487   2                      WriteTW88( REG_PAGE, 0 );       
2488   2                      delay(100);
2489   2                      WriteTW88( 0xd0, 0xff); // clear status
2490   2                      WriteTW88( 0xd1, 0xff); // clear status
2491   2              }
2492   1              // 2009.01.16 end
2493   1              WriteTW88( REG_PAGE, page );    // save back to page
2494   1      }
2495          #ifdef SUPPORT_DTV
              /*****************************************************************************/
              /*                                DTV Function Main - called by main periodically            */
              /*****************************************************************************/
              void CheckDTVinput(void)
              {
                      extern IDATA BYTE InputSelection;
                      //BYTE statusD0, statusD1, i, page;
                      BYTE i;
                      
                      //===================== HSYNC/VSYNC loss ========================
                      if ((ReadTW88(0xD0) & 0x01) == 0) 
                      {
                              if(!cLastSyncLoss) 
                              {
                                      DisplayPCInfo(CheckDTVCableStr[GetOSDLang()]);
                                      PcMode = EE_PC_UNKNOWN;         // no signal
                                      #ifdef DEBUG_DTV
                                      Puts("\r\nCheck DTV Cable.....");
                                      #endif //DEBUG_DTV
                                      PanelFreeRun(1);
                                      PanelBlack(1);
                                      cLastSyncLoss = 1;
                              }
                              return;
                      }
                      i = DetectDTVInputSource();
                      if ( PcMode == i ) return;                      // no input change
                      cLastSyncLoss = 0;
                      i = InputSelection;
                      InputSelection--;
                      ChangeInput( i );
              
              }
              #endif //SUPPORT_DTV
2530          CODE_P BYTE *GetPCInputSourceName(void)
2531          {
2532   1              BYTE *ptr;
2533   1      
2534   1              if( PcMode<EE_PC_MAX ) ptr = PcModeStr[PcMode];
2535   1              else                   ptr = (CODE_P BYTE *)"";
2536   1      
2537   1              #ifdef DEBUG
                      dPrintf("\r\n++(GetPCInputSourceName)=<%s>", ptr);
                      #endif //DEBUG
2540   1      
2541   1              return ptr;
2542   1      }
2543          
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 98  

2544          BYTE AutoAdjust(void)
2545          {
2546   1              BYTE ret=0;
2547   1      
2548   1              WriteTW88( 0xff, 0 );                   // set page 0
2549   1              ClearOSDInfo();
2550   1              DisplayAutoAdjust();
2551   1              ret = DetectAndSetForVGAInput(0);       
2552   1              ClearAutoAdjust();
2553   1              LCDPowerON(0);  //HHY 1.63
2554   1              WriteTW88( 0xd0, 0xff );
2555   1              WriteTW88( 0xd1, 0xff );
2556   1      
2557   1              return ret;
2558   1      }                                               
2559          #endif //defined( SUPPORT_PC ) || defined( SUPPORT_DTV )
2560          
2561          
2562          
2563          
2564          
2565          
2566          
2567          
2568          
2569          
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 99  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com017C (BEGIN)
0000         L?0381:
0000         L?0382:
0000 7800        R     MOV     R0,#LOW PcMode
0002         L?0383:
0002 900000      E     MOV     DPTR,#PCMDATA+07H
0005         L?0384:
0005 E2                MOVX    A,@R0
0006 75F016            MOV     B,#016H
0009         L?0385:
0009 120000      E     LCALL   ?C?OFFXADD
000C E4                CLR     A
000D 93                MOVC    A,@A+DPTR
000E FE                MOV     R6,A
000F 7401              MOV     A,#01H
0011 93                MOVC    A,@A+DPTR
0012 FF                MOV     R7,A
0013 22                RET     
0014         L?0386:
0014         L?0387:
0014 900000      E     MOV     DPTR,#PCMDATA+03H
0017         L?0388:
0017 7800        R     MOV     R0,#LOW PcMode
0019 E2                MOVX    A,@R0
001A 75F016            MOV     B,#016H
001D 020000      E     LJMP    ?C?OFFXADD
0020         L?0390:
0020         L?0391:
0020 900000      E     MOV     DPTR,#CheckPCCableStr
0023         L?0392:
0023 75F003            MOV     B,#03H
0026 EF                MOV     A,R7
0027         L?0393:
0027 120000      E     LCALL   ?C?OFFXADD
002A 120000      E     LCALL   ?C?PLDCODE
002D AE02              MOV     R6,AR2
002F AF01              MOV     R7,AR1
0031 22                RET     
0032         L?0395:
0032         L?0396:
0032 7800        R     MOV     R0,#LOW vpn
0034         L?0397:
0034 E2                MOVX    A,@R0
0035 FE                MOV     R6,A
0036 08                INC     R0
0037 E2                MOVX    A,@R0
0038 FF                MOV     R7,A
0039 C3                CLR     C
003A 22                RET     
003B         L?0398:
003B         L?0399:
003B 7800        R     MOV     R0,#LOW PcMode
003D 900000      E     MOV     DPTR,#PCMDATA+01H
0040         L?0400:
0040 E2                MOVX    A,@R0
0041 75F016            MOV     B,#016H
0044 020000      E     LJMP    ?C?OFFXADD
0047         L?0401:
0047 7800        R     MOV     R0,#LOW LastVPN
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 100 

0049         L?0402:
0049 E2                MOVX    A,@R0
004A FE                MOV     R6,A
004B 08                INC     R0
004C E2                MOVX    A,@R0
004D FB                MOV     R3,A
004E AA06              MOV     R2,AR6
0050 E4                CLR     A
0051 F9                MOV     R1,A
0052 F8                MOV     R0,A
0053 22                RET     
0054         L?0404:
0054         L?0405:
0054 E4                CLR     A
0055 FC                MOV     R4,A
0056 FD                MOV     R5,A
0057 7BA0              MOV     R3,#0A0H
0059 7A86              MOV     R2,#086H
005B         L?0406:
005B 7901              MOV     R1,#01H
005D F8                MOV     R0,A
005E 020000      E     LJMP    ?C?LMUL
0061         L?0408:
0061 7800        R     MOV     R0,#LOW vpn
0063         L?0409:
0063 E2                MOVX    A,@R0
0064 FE                MOV     R6,A
0065 08                INC     R0
0066 E2                MOVX    A,@R0
0067 FF                MOV     R7,A
0068 7C00              MOV     R4,#00H
006A 7D03              MOV     R5,#03H
006C 020000      E     LJMP    ?C?UIDIV
006F         L?0410:
006F EE                MOV     A,R6
0070 F2                MOVX    @R0,A
0071 08                INC     R0
0072 EF                MOV     A,R7
0073 F2                MOVX    @R0,A
0074 18                DEC     R0
0075         L?0411:
0075 E2                MOVX    A,@R0
0076 C3                CLR     C
0077 13                RRC     A
0078 FE                MOV     R6,A
0079 08                INC     R0
007A E2                MOVX    A,@R0
007B 13                RRC     A
007C FF                MOV     R7,A
007D 22                RET     
007E         L?0412:
007E 18                DEC     R0
007F E2                MOVX    A,@R0
0080 FF                MOV     R7,A
0081 7E00              MOV     R6,#00H
0083 7BFE              MOV     R3,#0FEH
0085 7800        E     MOV     R0,#LOW ?_Mapping1?BYTE+05H
0087 120000      E     LCALL   ?C?PSTPDATA
008A 0B                INC     R3
008B 7A00        E     MOV     R2,#HIGH UserRange
008D 7900        E     MOV     R1,#LOW UserRange
008F 7800        E     MOV     R0,#LOW ?_Mapping1?BYTE+08H
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 101 

0091 120000      E     LCALL   ?C?PSTPDATA
0094 7B00              MOV     R3,#00H
0096 7A00        R     MOV     R2,#HIGH VPositionRange
0098 7900        R     MOV     R1,#LOW VPositionRange
009A 22                RET     
009B         L?0414:
009B 7800        R     MOV     R0,#LOW PhaseRGB
009D 120000      E     LCALL   ?C?LLDPDATA
00A0 7800        R     MOV     R0,#LOW RGBPeak
00A2         L?0415:
00A2 120000      E     LCALL   ?C?LLDPDATA0
00A5 C3                CLR     C
00A6 020000      E     LJMP    ?C?ULCMP
00A9         L?0419:
00A9         L?0420:
00A9 08                INC     R0
00AA E2                MOVX    A,@R0
00AB FE                MOV     R6,A
00AC 08                INC     R0
00AD E2                MOVX    A,@R0
00AE FF                MOV     R7,A
00AF 22                RET     
00B0         L?0422:
00B0 7800        R     MOV     R0,#LOW cDelta
00B2 E2                MOVX    A,@R0
00B3 FF                MOV     R7,A
00B4         L?0423:
00B4 7401              MOV     A,#01H
00B6 93                MOVC    A,@A+DPTR
00B7 2F                ADD     A,R7
00B8 FF                MOV     R7,A
00B9 E4                CLR     A
00BA 93                MOVC    A,@A+DPTR
00BB 22                RET     
00BC         L?0426:
00BC         L?0427:
00BC E4                CLR     A
00BD         L?0428:
00BD 7800        R     MOV     R0,#LOW LastVPN
00BF F2                MOVX    @R0,A
00C0 08                INC     R0
00C1 F2                MOVX    @R0,A
00C2 7800        R     MOV     R0,#LOW LastIHF
00C4 22                RET     
00C5         L?0431:
00C5         L?0432:
00C5 7800        R     MOV     R0,#LOW PcMode
00C7 E2                MOVX    A,@R0
00C8 75F016            MOV     B,#016H
00CB 22                RET     
00CC         L?0433:
00CC F2                MOVX    @R0,A
00CD FC                MOV     R4,A
00CE 08                INC     R0
00CF EF                MOV     A,R7
00D0 F2                MOVX    @R0,A
00D1 FD                MOV     R5,A
00D2         L?0434:
00D2 7800        R     MOV     R0,#LOW low
00D4 E2                MOVX    A,@R0
00D5 FE                MOV     R6,A
00D6 08                INC     R0
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 102 

00D7 E2                MOVX    A,@R0
00D8 FF                MOV     R7,A
00D9 22                RET     
00DA         L?0435:
00DA 7800        R     MOV     R0,#LOW vpn
00DC F2                MOVX    @R0,A
00DD 08                INC     R0
00DE EF                MOV     A,R7
00DF F2                MOVX    @R0,A
00E0 7800        R     MOV     R0,#LOW ivf
00E2         L?0436:
00E2 E500        E     MOV     A,IVF
00E4 F2                MOVX    @R0,A
00E5 08                INC     R0
00E6 E500        E     MOV     A,IVF+01H
00E8 F2                MOVX    @R0,A
00E9 22                RET     
00EA         L?0438:
00EA 7800        R     MOV     R0,#LOW LastIHF
00EC         L?0439:
00EC E4                CLR     A
00ED FC                MOV     R4,A
00EE FD                MOV     R5,A
00EF 120000      E     LCALL   ?C?LLDPDATA0
00F2 020000      E     LJMP    ?C?LADD
00F5         L?0441:
00F5 E4                CLR     A
00F6 FD                MOV     R5,A
00F7 FC                MOV     R4,A
00F8         L?0442:
00F8 AB00        E     MOV     R3,IHF+03H
00FA AA00        E     MOV     R2,IHF+02H
00FC A900        E     MOV     R1,IHF+01H
00FE A800        E     MOV     R0,IHF
0100 22                RET     
0101         L?0443:
0101 EF                MOV     A,R7
0102 2500        E     ADD     A,IHF+03H
0104 FF                MOV     R7,A
0105 EE                MOV     A,R6
0106 3500        E     ADDC    A,IHF+02H
0108 FE                MOV     R6,A
0109 E4                CLR     A
010A 3500        E     ADDC    A,IHF+01H
010C FD                MOV     R5,A
010D E4                CLR     A
010E 3500        E     ADDC    A,IHF
0110 FC                MOV     R4,A
0111 22                RET     
0112         L?0444:
0112 FF                MOV     R7,A
0113 EE                MOV     A,R6
0114 34FF              ADDC    A,#0FFH
0116 FE                MOV     R6,A
0117 C3                CLR     C
0118 EB                MOV     A,R3
0119 9F                SUBB    A,R7
011A EE                MOV     A,R6
011B 6480              XRL     A,#080H
011D F8                MOV     R0,A
011E EA                MOV     A,R2
011F 6480              XRL     A,#080H
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 103 

0121 98                SUBB    A,R0
0122 22                RET     
0123         L?0445:
0123 93                MOVC    A,@A+DPTR
0124 FF                MOV     R7,A
0125 7401              MOV     A,#01H
0127 93                MOVC    A,@A+DPTR
0128 CF                XCH     A,R7
0129 F2                MOVX    @R0,A
012A 08                INC     R0
012B EF                MOV     A,R7
012C F2                MOVX    @R0,A
012D 22                RET     
012E         L?0446:
012E 120000      E     LCALL   ?C?LADD
0131 7800        R     MOV     R0,#LOW pres
0133 120000      E     LCALL   ?C?LLDPDATA0
0136 120000      E     LCALL   ?C?ULDIV
0139 7800        R     MOV     R0,#LOW scale
013B 020000      E     LJMP    ?C?LSTPDATA
013E         L?0448:
013E 7800        R     MOV     R0,#LOW VPosMax
0140 E2                MOVX    A,@R0
0141 750000      R     MOV     VPositionRange+02H,#00H
0144 F500        R     MOV     VPositionRange+03H,A
0146 C3                CLR     C
0147 13                RRC     A
0148 750000      R     MOV     VPositionRange+04H,#00H
014B F500        R     MOV     VPositionRange+05H,A
014D 22                RET     
014E         L?0449:
014E 7800        R     MOV     R0,#LOW Back+01H
0150         L?0450:
0150 C3                CLR     C
0151 ED                MOV     A,R5
0152 9F                SUBB    A,R7
0153 F2                MOVX    @R0,A
0154 EC                MOV     A,R4
0155 9E                SUBB    A,R6
0156 18                DEC     R0
0157 F2                MOVX    @R0,A
0158 22                RET     
0159         L?0451:
0159 7401              MOV     A,#01H
015B 93                MOVC    A,@A+DPTR
015C 24C8              ADD     A,#0C8H
015E FD                MOV     R5,A
015F E4                CLR     A
0160 93                MOVC    A,@A+DPTR
0161 3400              ADDC    A,#00H
0163 FC                MOV     R4,A
0164 E4                CLR     A
0165 FF                MOV     R7,A
0166 FE                MOV     R6,A
0167 22                RET     
0168         L?0452:
0168 E4                CLR     A
0169 93                MOVC    A,@A+DPTR
016A FC                MOV     R4,A
016B 7401              MOV     A,#01H
016D 93                MOVC    A,@A+DPTR
016E FD                MOV     R5,A
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 104 

016F C3                CLR     C
0170 EF                MOV     A,R7
0171 9D                SUBB    A,R5
0172 FF                MOV     R7,A
0173 EE                MOV     A,R6
0174 9C                SUBB    A,R4
0175 FE                MOV     R6,A
0176 22                RET     
0177         L?0455:
0177 FD                MOV     R5,A
0178 E4                CLR     A
0179 3E                ADDC    A,R6
017A FC                MOV     R4,A
017B E2                MOVX    A,@R0
017C FA                MOV     R2,A
017D 08                INC     R0
017E E2                MOVX    A,@R0
017F FB                MOV     R3,A
0180 D3                SETB    C
0181 9D                SUBB    A,R5
0182 EA                MOV     A,R2
0183 9C                SUBB    A,R4
0184 22                RET     
0185         L?0456:
0185 E2                MOVX    A,@R0
0186 2401              ADD     A,#01H
0188         L?0457:
0188 F2                MOVX    @R0,A
0189 18                DEC     R0
018A E2                MOVX    A,@R0
018B 3400              ADDC    A,#00H
018D F2                MOVX    @R0,A
018E 22                RET     
018F         L?0458:
018F 3E                ADDC    A,R6
0190 CF                XCH     A,R7
0191 24FF              ADD     A,#0FFH
0193 7800        R     MOV     R0,#LOW vend+01H
0195 F2                MOVX    @R0,A
0196 EF                MOV     A,R7
0197 34FF              ADDC    A,#0FFH
0199 18                DEC     R0
019A F2                MOVX    @R0,A
019B 22                RET     
019C         L?0461:
019C         L?0462:
019C E2                MOVX    A,@R0
019D 2F                ADD     A,R7
019E F2                MOVX    @R0,A
019F 18                DEC     R0
01A0 E2                MOVX    A,@R0
01A1 3E                ADDC    A,R6
01A2 F2                MOVX    @R0,A
01A3 22                RET     
01A4         L?0463:
01A4 E4                CLR     A
01A5 7E94              MOV     R6,#094H
01A7 FD                MOV     R5,A
01A8 FC                MOV     R4,A
01A9 A800        E     MOV     R0,IHF
01AB D3                SETB    C
01AC 020000      E     LJMP    ?C?ULCMP
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 105 

01AF         L?0464:
01AF         L?0465:
01AF 7800        R     MOV     R0,#LOW PhaseRGB
01B1 120000      E     LCALL   ?C?LLDPDATA
01B4 7800        R     MOV     R0,#LOW RGBmin
01B6 22                RET     
01B7         L?0466:
01B7         L?0467:
01B7 7800        R     MOV     R0,#LOW num
01B9 E2                MOVX    A,@R0
01BA FE                MOV     R6,A
01BB 08                INC     R0
01BC E2                MOVX    A,@R0
01BD FF                MOV     R7,A
01BE 22                RET     
01BF         L?0468:
01BF         L?0469:
01BF 7800        R     MOV     R0,#LOW vstart
01C1 E2                MOVX    A,@R0
01C2 FE                MOV     R6,A
01C3 08                INC     R0
01C4 E2                MOVX    A,@R0
01C5 FF                MOV     R7,A
01C6 22                RET     
01C7         L?0470:
01C7         L?0471:
01C7 7800        R     MOV     R0,#LOW period
01C9 EE                MOV     A,R6
01CA F2                MOVX    @R0,A
01CB 08                INC     R0
01CC EF                MOV     A,R7
01CD F2                MOVX    @R0,A
01CE 22                RET     
01CF         L?0472:
01CF 7800        R     MOV     R0,#LOW LastHPN
01D1 E2                MOVX    A,@R0
01D2 FC                MOV     R4,A
01D3 08                INC     R0
01D4 E2                MOVX    A,@R0
01D5 FD                MOV     R5,A
01D6 C3                CLR     C
01D7 9F                SUBB    A,R7
01D8 EC                MOV     A,R4
01D9 9E                SUBB    A,R6
01DA 22                RET     
01DB         L?0474:
01DB 7800        R     MOV     R0,#LOW PhaseRGB
01DD 120000      E     LCALL   ?C?LLDPDATA
01E0 7800        R     MOV     R0,#LOW RGBPeak
01E2 020000      E     LJMP    ?C?LSTPDATA
01E5         L?0475:
01E5 7800        R     MOV     R0,#LOW PhaseRGB
01E7 120000      E     LCALL   ?C?LLDPDATA
01EA 7800        R     MOV     R0,#LOW RGBmin
01EC 020000      E     LJMP    ?C?LSTPDATA
01EF         L?0477:
01EF         L?0478:
01EF 7BFF              MOV     R3,#0FFH
01F1 7DD0              MOV     R5,#0D0H
01F3 7F8A              MOV     R7,#08AH
01F5 22                RET     
01F6         L?0479:
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 106 

01F6         L?0480:
01F6 7BFF              MOV     R3,#0FFH
01F8 7DD1              MOV     R5,#0D1H
01FA 7F8A              MOV     R7,#08AH
01FC 22                RET     
01FD         L?0481:
01FD         L?0482:
01FD F2                MOVX    @R0,A
01FE 18                DEC     R0
01FF E2                MOVX    A,@R0
0200 34FF              ADDC    A,#0FFH
0202 F2                MOVX    @R0,A
0203 22                RET     
0204         L?0483:
0204 7800        R     MOV     R0,#LOW sync
0206 EE                MOV     A,R6
0207 F2                MOVX    @R0,A
0208 FA                MOV     R2,A
0209 08                INC     R0
020A EF                MOV     A,R7
020B F2                MOVX    @R0,A
020C FB                MOV     R3,A
020D 22                RET     
020E         L?0484:
020E E2                MOVX    A,@R0
020F 9F                SUBB    A,R7
0210 FF                MOV     R7,A
0211 18                DEC     R0
0212 E2                MOVX    A,@R0
0213 9E                SUBB    A,R6
0214 CF                XCH     A,R7
0215 2401              ADD     A,#01H
0217 22                RET     
0218         L?0485:
0218 08                INC     R0
0219 E2                MOVX    A,@R0
021A FF                MOV     R7,A
021B 08                INC     R0
021C E2                MOVX    A,@R0
021D FE                MOV     R6,A
021E C3                CLR     C
021F EF                MOV     A,R7
0220 9E                SUBB    A,R6
0221 22                RET     
             ; FUNCTION Com017C (END)

             ; FUNCTION _Measure_VPN_IHF (BEGIN)
                                           ; SOURCE LINE # 134
0000 7800        R     MOV     R0,#LOW p_vpn
0002 120000      E     LCALL   ?C?PSTPDATA
                                           ; SOURCE LINE # 135
                                           ; SOURCE LINE # 140
0005 7F03              MOV     R7,#03H
0007 120000      E     LCALL   _MeasureAndWait
000A EF                MOV     A,R7
000B 7002              JNZ     ?C0001
                                           ; SOURCE LINE # 145
000D FF                MOV     R7,A
000E 22                RET     
                                           ; SOURCE LINE # 146
000F         ?C0001:
                                           ; SOURCE LINE # 148
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 107 

000F 120000      E     LCALL   GetPPF
0012 7800        R     MOV     R0,#LOW ppf
0014 120000      E     LCALL   ?C?LSTPDATA
                                           ; SOURCE LINE # 149
0017 120000      E     LCALL   GetVPN
001A 7800        R     MOV     R0,#LOW p_vpn
001C 120000      E     LCALL   ?C?PLDPDATA
001F EE                MOV     A,R6
0020 8FF0              MOV     B,R7
0022 120000      E     LCALL   ?C?ISTPTR
                                           ; SOURCE LINE # 150
0025 120000      E     LCALL   GetHPN
0028 7800        R     MOV     R0,#LOW hpn
                                           ; SOURCE LINE # 152
002A 120000      R     LCALL   L?0410
002D 7800        R     MOV     R0,#LOW ppf
002F 120000      R     LCALL   L?0439
0032 C006              PUSH    AR6
0034 C007              PUSH    AR7
0036 7800        R     MOV     R0,#LOW hpn
0038 120000      R     LCALL   L?0402
003B D007              POP     AR7
003D D006              POP     AR6
003F 120000      E     LCALL   ?C?ULDIV
0042 7800        R     MOV     R0,#LOW p_ihf
0044 120000      E     LCALL   ?C?PLDPDATA
0047 120000      E     LCALL   ?C?LSTPTR
                                           ; SOURCE LINE # 163
004A 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 164
004C         ?C0002:
004C 22                RET     
             ; FUNCTION _Measure_VPN_IHF (END)

             ; FUNCTION ResetPCValue (BEGIN)
                                           ; SOURCE LINE # 224
                                           ; SOURCE LINE # 225
                                           ; SOURCE LINE # 226
0000 120000      E     LCALL   SaveDefaultPCDataEE
                                           ; SOURCE LINE # 227
0003 7F03              MOV     R7,#03H
0005 120000      R     LCALL   _DetectAndSetForVGAInput
0008 EF                MOV     A,R7
0009 7003              JNZ     ?C0003
                                           ; SOURCE LINE # 228
000B 120000      E     LCALL   CloseOSDMenu
000E         ?C0003:
                                           ; SOURCE LINE # 230
000E E4                CLR     A
000F FF                MOV     R7,A
0010 020000      E     LJMP    _LCDPowerON
             ; FUNCTION ResetPCValue (END)

             ; FUNCTION StartNewDetect (BEGIN)
                                           ; SOURCE LINE # 233
                                           ; SOURCE LINE # 234
                                           ; SOURCE LINE # 235
0000 120000      E     LCALL   ClearEnDet
                                           ; SOURCE LINE # 236
0003 7F03              MOV     R7,#03H
0005 120000      E     LCALL   _MeasureAndWait
                                           ; SOURCE LINE # 237
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 108 

0008 120000      E     LCALL   SetEnDet
                                           ; SOURCE LINE # 239
000B 120000      R     LCALL   L?0477
000E 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 240
0011 120000      R     LCALL   L?0479
0014 020000      E     LJMP    _WriteI2C
             ; FUNCTION StartNewDetect (END)

             ; FUNCTION GetCoarseValue (BEGIN)
                                           ; SOURCE LINE # 249
                                           ; SOURCE LINE # 250
                                           ; SOURCE LINE # 251
0000 120000      E     LCALL   GetCoarse
                                           ; SOURCE LINE # 252
0003         ?C0006:
0003 22                RET     
             ; FUNCTION GetCoarseValue (END)

             ; FUNCTION _SetPCCoarseValue (BEGIN)
                                           ; SOURCE LINE # 254
0000 7800        R     MOV     R0,#LOW val
0002 EF                MOV     A,R7
0003 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 255
                                           ; SOURCE LINE # 259
0004 7D38              MOV     R5,#038H
0006 7FC0              MOV     R7,#0C0H
0008 120000      E     LCALL   _WriteADC_TW88
                                           ; SOURCE LINE # 261
000B 120000      E     LCALL   GetCoarse
000E 7800        R     MOV     R0,#LOW coarse
0010 EE                MOV     A,R6
0011 F2                MOVX    @R0,A
0012 08                INC     R0
0013 EF                MOV     A,R7
0014 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 262
0015 7800        R     MOV     R0,#LOW val
0017 E2                MOVX    A,@R0
0018 7800        R     MOV     R0,#LOW coarse+01H
001A B40105            CJNE    A,#01H,?C0007
001D 120000      R     LCALL   L?0456
0020 8006              SJMP    ?C0008
0022         ?C0007:
                                           ; SOURCE LINE # 263
0022 E2                MOVX    A,@R0
0023 24FF              ADD     A,#0FFH
0025 120000      R     LCALL   L?0481
0028         ?C0008:
                                           ; SOURCE LINE # 265
0028 7800        R     MOV     R0,#LOW coarse
002A E2                MOVX    A,@R0
002B FE                MOV     R6,A
002C 08                INC     R0
002D E2                MOVX    A,@R0
002E FF                MOV     R7,A
002F 120000      E     LCALL   _SetCoarse
                                           ; SOURCE LINE # 266
0032 7800        R     MOV     R0,#LOW PcMode
0034 E2                MOVX    A,@R0
0035 FF                MOV     R7,A
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 109 

0036 120000      E     LCALL   _SaveCoarseEE
                                           ; SOURCE LINE # 268
0039 120000      R     LCALL   StartNewDetect
                                           ; SOURCE LINE # 271
003C 7D28              MOV     R5,#028H
003E 7FC0              MOV     R7,#0C0H
0040 120000      E     LCALL   _WriteADC_TW88
                                           ; SOURCE LINE # 272
0043 7800        R     MOV     R0,#LOW coarse
0045 E2                MOVX    A,@R0
0046 FE                MOV     R6,A
0047 08                INC     R0
0048 E2                MOVX    A,@R0
0049 FF                MOV     R7,A
                                           ; SOURCE LINE # 273
004A         ?C0009:
004A 22                RET     
             ; FUNCTION _SetPCCoarseValue (END)

             ; FUNCTION _SetPhaseValue (BEGIN)
                                           ; SOURCE LINE # 276
0000 7800        R     MOV     R0,#LOW val
0002 EF                MOV     A,R7
0003 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 277
                                           ; SOURCE LINE # 280
0004 120000      E     LCALL   GetPhaseCurrent
0007 7800        R     MOV     R0,#LOW phase
0009 EF                MOV     A,R7
000A F2                MOVX    @R0,A
                                           ; SOURCE LINE # 282
000B 18                DEC     R0
000C E2                MOVX    A,@R0
000D B40110            CJNE    A,#01H,?C0010
                                           ; SOURCE LINE # 283
0010 08                INC     R0
0011 E2                MOVX    A,@R0
0012 FF                MOV     R7,A
0013 C3                CLR     C
0014 941F              SUBB    A,#01FH
0016 4001              JC      ?C0011
0018 22                RET     
0019         ?C0011:
                                           ; SOURCE LINE # 284
0019 7800        R     MOV     R0,#LOW phase
001B E2                MOVX    A,@R0
001C 04                INC     A
001D F2                MOVX    @R0,A
                                           ; SOURCE LINE # 285
001E 800C              SJMP    ?C0014
0020         ?C0010:
                                           ; SOURCE LINE # 286
                                           ; SOURCE LINE # 287
0020 7800        R     MOV     R0,#LOW phase
0022 E2                MOVX    A,@R0
0023 FF                MOV     R7,A
0024 7001              JNZ     ?C0015
0026 22                RET     
0027         ?C0015:
                                           ; SOURCE LINE # 288
0027 7800        R     MOV     R0,#LOW phase
0029 E2                MOVX    A,@R0
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 110 

002A 14                DEC     A
002B F2                MOVX    @R0,A
                                           ; SOURCE LINE # 289
002C         ?C0014:
                                           ; SOURCE LINE # 291
002C 7800        R     MOV     R0,#LOW phase
002E E2                MOVX    A,@R0
002F FF                MOV     R7,A
0030 120000      E     LCALL   _SetPhase
                                           ; SOURCE LINE # 292
0033 7800        R     MOV     R0,#LOW PcMode
0035 E2                MOVX    A,@R0
0036 FF                MOV     R7,A
0037 120000      E     LCALL   _SavePhaseEE
                                           ; SOURCE LINE # 294
003A 7800        R     MOV     R0,#LOW phase
003C E2                MOVX    A,@R0
003D FF                MOV     R7,A
                                           ; SOURCE LINE # 295
003E         ?C0012:
003E 22                RET     
             ; FUNCTION _SetPhaseValue (END)

             ; FUNCTION IsDTVInput (BEGIN)
                                           ; SOURCE LINE # 297
                                           ; SOURCE LINE # 298
                                           ; SOURCE LINE # 299
0000 120000      E     LCALL   GetInputSelection
0003 EF                MOV     A,R7
0004 6404              XRL     A,#04H
0006 6006              JZ      ?C0018
0008 120000      E     LCALL   GetInputSelection
000B BF0712            CJNE    R7,#07H,?C0017
000E         ?C0018:
                                           ; SOURCE LINE # 300
000E 7800        R     MOV     R0,#LOW PcMode
0010 E2                MOVX    A,@R0
0011 FF                MOV     R7,A
0012 C3                CLR     C
0013 941C              SUBB    A,#01CH
0015 4009              JC      ?C0017
0017 EF                MOV     A,R7
0018 D3                SETB    C
0019 942D              SUBB    A,#02DH
001B 5003              JNC     ?C0017
001D 7F01              MOV     R7,#01H
001F 22                RET     
                                           ; SOURCE LINE # 301
0020         ?C0017:
                                           ; SOURCE LINE # 302
0020 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 303
0022         ?C0020:
0022 22                RET     
             ; FUNCTION IsDTVInput (END)

             ; FUNCTION _MoveActiveVpos (BEGIN)
                                           ; SOURCE LINE # 310
;---- Variable 'dir' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 311
                                           ; SOURCE LINE # 314
0000 EF                MOV     A,R7
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 111 

0001 B40111            CJNE    A,#01H,?C0021
                                           ; SOURCE LINE # 315
0004 7800        R     MOV     R0,#LOW VPosMax
0006 E2                MOVX    A,@R0
0007 FF                MOV     R7,A
0008 18                DEC     R0
0009 E2                MOVX    A,@R0
000A C3                CLR     C
000B 9F                SUBB    A,R7
000C 503E              JNC     ?C0023
000E         ?C0022:
                                           ; SOURCE LINE # 316
000E 7800        R     MOV     R0,#LOW add
0010 7401              MOV     A,#01H
0012 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 317
0013 800A              SJMP    ?C0024
0015         ?C0021:
                                           ; SOURCE LINE # 318
                                           ; SOURCE LINE # 319
0015 7800        R     MOV     R0,#LOW VPosCurr
0017 E2                MOVX    A,@R0
0018 6032              JZ      ?C0023
001A         ?C0025:
                                           ; SOURCE LINE # 320
001A 7800        R     MOV     R0,#LOW add
001C 74FF              MOV     A,#0FFH
001E F2                MOVX    @R0,A
                                           ; SOURCE LINE # 321
001F         ?C0024:
                                           ; SOURCE LINE # 322
001F 7800        R     MOV     R0,#LOW add
0021 E2                MOVX    A,@R0
0022 FF                MOV     R7,A
0023 7800        R     MOV     R0,#LOW VPosCurr
0025 E2                MOVX    A,@R0
0026 2F                ADD     A,R7
0027 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 324
0028 120000      E     LCALL   IsBypassmode
002B EF                MOV     A,R7
002C 6006              JZ      ?C0026
                                           ; SOURCE LINE # 325
                                           ; SOURCE LINE # 326
002E 120000      R     LCALL   L?0421
0031 020000      E     LJMP    _SaveVactiveEE
                                           ; SOURCE LINE # 327
0034         ?C0026:
                                           ; SOURCE LINE # 328
                                           ; SOURCE LINE # 329
                                           ; SOURCE LINE # 330
0034 120000      R     LCALL   L?0421
0037 120000      E     LCALL   _SaveVactiveEE
                                           ; SOURCE LINE # 331
003A 120000      E     LCALL   GetVBackPorch
003D 7800        R     MOV     R0,#LOW add
003F E2                MOVX    A,@R0
0040 2F                ADD     A,R7
0041 FF                MOV     R7,A
0042 120000      E     LCALL   _SetVBackPorch
                                           ; SOURCE LINE # 332
0045 7800        R     MOV     R0,#LOW PcMode
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 112 

0047 E2                MOVX    A,@R0
0048 FF                MOV     R7,A
0049 120000      E     LCALL   _SaveVBackPorchEE
                                           ; SOURCE LINE # 333
                                           ; SOURCE LINE # 334
004C         ?C0023:
004C 22                RET     
004D         L?0421:
004D 120000      E     LCALL   GetVactiveStart
0050 7800        R     MOV     R0,#LOW add
0052 E2                MOVX    A,@R0
0053 FD                MOV     R5,A
0054 33                RLC     A
0055 95E0              SUBB    A,ACC
0057 FC                MOV     R4,A
0058 EF                MOV     A,R7
0059 2D                ADD     A,R5
005A FF                MOV     R7,A
005B EE                MOV     A,R6
005C 3C                ADDC    A,R4
005D FE                MOV     R6,A
005E 120000      E     LCALL   _SetVactiveStart
0061 7800        R     MOV     R0,#LOW PcMode
0063 E2                MOVX    A,@R0
0064 FF                MOV     R7,A
0065 22                RET     
             ; FUNCTION _MoveActiveVpos (END)

             ; FUNCTION _MoveActiveHpos (BEGIN)
                                           ; SOURCE LINE # 336
;---- Variable 'dir' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 337
                                           ; SOURCE LINE # 341
0000 EF                MOV     A,R7
0001 B40111            CJNE    A,#01H,?C0028
                                           ; SOURCE LINE # 342
0004 7800        R     MOV     R0,#LOW HPosMax
0006 E2                MOVX    A,@R0
0007 FF                MOV     R7,A
0008 18                DEC     R0
0009 E2                MOVX    A,@R0
000A C3                CLR     C
000B 9F                SUBB    A,R7
000C 505B              JNC     ?C0030
000E         ?C0029:
                                           ; SOURCE LINE # 343
000E 7800        R     MOV     R0,#LOW add
0010 7401              MOV     A,#01H
0012 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 344
0013 800A              SJMP    ?C0031
0015         ?C0028:
                                           ; SOURCE LINE # 345
                                           ; SOURCE LINE # 346
0015 7800        R     MOV     R0,#LOW HPosCurr
0017 E2                MOVX    A,@R0
0018 604F              JZ      ?C0030
001A         ?C0032:
                                           ; SOURCE LINE # 347
001A 7800        R     MOV     R0,#LOW add
001C 74FF              MOV     A,#0FFH
001E F2                MOVX    @R0,A
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 113 

                                           ; SOURCE LINE # 348
001F         ?C0031:
                                           ; SOURCE LINE # 349
001F 7800        R     MOV     R0,#LOW add
0021 E2                MOVX    A,@R0
0022 FF                MOV     R7,A
0023 7800        R     MOV     R0,#LOW HPosCurr
0025 E2                MOVX    A,@R0
0026 2F                ADD     A,R7
0027 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 351
0028 120000      E     LCALL   GetHactiveStart
002B 7800        R     MOV     R0,#LOW hstart
002D EE                MOV     A,R6
002E F2                MOVX    @R0,A
002F 08                INC     R0
0030 EF                MOV     A,R7
0031 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 352
0032 120000      E     LCALL   GetHactiveEnd
0035 7800        R     MOV     R0,#LOW hend
0037 EE                MOV     A,R6
0038 F2                MOVX    @R0,A
0039 08                INC     R0
003A EF                MOV     A,R7
003B F2                MOVX    @R0,A
                                           ; SOURCE LINE # 354
003C 7800        R     MOV     R0,#LOW add
003E E2                MOVX    A,@R0
003F FF                MOV     R7,A
0040 33                RLC     A
0041 95E0              SUBB    A,ACC
0043 FE                MOV     R6,A
0044 7800        R     MOV     R0,#LOW hstart+01H
0046 120000      R     LCALL   L?0461
                                           ; SOURCE LINE # 355
0049 7800        R     MOV     R0,#LOW hend+01H
004B 120000      R     LCALL   L?0461
                                           ; SOURCE LINE # 356
004E 7800        R     MOV     R0,#LOW hstart
0050 E2                MOVX    A,@R0
0051 FE                MOV     R6,A
0052 08                INC     R0
0053 E2                MOVX    A,@R0
0054 FF                MOV     R7,A
0055 120000      E     LCALL   _SetHactiveStart
                                           ; SOURCE LINE # 357
0058 7800        R     MOV     R0,#LOW hend
005A E2                MOVX    A,@R0
005B FE                MOV     R6,A
005C 08                INC     R0
005D E2                MOVX    A,@R0
005E FF                MOV     R7,A
005F 120000      E     LCALL   _SetHactiveEnd
                                           ; SOURCE LINE # 359
0062 7800        R     MOV     R0,#LOW PcMode
0064 E2                MOVX    A,@R0
0065 FF                MOV     R7,A
0066 120000      E     LCALL   _SaveHactiveEE
                                           ; SOURCE LINE # 360
0069         ?C0030:
0069 22                RET     
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 114 

             ; FUNCTION _MoveActiveHpos (END)

             ; FUNCTION GetVPosition (BEGIN)
                                           ; SOURCE LINE # 362
                                           ; SOURCE LINE # 363
                                           ; SOURCE LINE # 366
                                           ; SOURCE LINE # 367
0000 120000      R     LCALL   L?0448
                                           ; SOURCE LINE # 368
0003 7A00        R     MOV     R2,#HIGH newv
0005 7900        R     MOV     R1,#LOW newv
0007 120000      R     LCALL   L?0412
000A 120000      E     LCALL   _Mapping1
                                           ; SOURCE LINE # 370
000D 7800        R     MOV     R0,#LOW newv
000F 08                INC     R0
0010 E2                MOVX    A,@R0
0011 FF                MOV     R7,A
                                           ; SOURCE LINE # 371
0012         ?C0033:
0012 22                RET     
             ; FUNCTION GetVPosition (END)

             ; FUNCTION _SetVPosition (BEGIN)
                                           ; SOURCE LINE # 373
;---- Variable 'val' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 374
                                           ; SOURCE LINE # 377
0000 120000      R     LCALL   _MoveActiveVpos
                                           ; SOURCE LINE # 379
                                           ; SOURCE LINE # 380
0003 120000      R     LCALL   L?0448
                                           ; SOURCE LINE # 381
0006 7A00        R     MOV     R2,#HIGH newv
0008 7900        R     MOV     R1,#LOW newv
000A 120000      R     LCALL   L?0412
000D 120000      E     LCALL   _Mapping1
                                           ; SOURCE LINE # 383
0010 7800        R     MOV     R0,#LOW newv
0012 08                INC     R0
0013 E2                MOVX    A,@R0
0014 FF                MOV     R7,A
                                           ; SOURCE LINE # 384
0015         ?C0034:
0015 22                RET     
             ; FUNCTION _SetVPosition (END)

             ; FUNCTION GetHPosition (BEGIN)
                                           ; SOURCE LINE # 386
                                           ; SOURCE LINE # 387
                                           ; SOURCE LINE # 388
0000 7800        R     MOV     R0,#LOW HPosCurr
0002 E2                MOVX    A,@R0
0003 FF                MOV     R7,A
                                           ; SOURCE LINE # 389
0004         ?C0035:
0004 22                RET     
             ; FUNCTION GetHPosition (END)

             ; FUNCTION _SetHPosition (BEGIN)
                                           ; SOURCE LINE # 391
;---- Variable 'val' assigned to Register 'R7' ----
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 115 

                                           ; SOURCE LINE # 392
                                           ; SOURCE LINE # 393
0000 120000      R     LCALL   _MoveActiveHpos
                                           ; SOURCE LINE # 395
0003 7800        R     MOV     R0,#LOW HPosCurr
0005 E2                MOVX    A,@R0
0006 FF                MOV     R7,A
                                           ; SOURCE LINE # 396
0007         ?C0036:
0007 22                RET     
             ; FUNCTION _SetHPosition (END)

             ; FUNCTION ReadOut4 (BEGIN)
                                           ; SOURCE LINE # 401
                                           ; SOURCE LINE # 402
                                           ; SOURCE LINE # 404
0000 7800        R     MOV     R0,#LOW dat
0002 120000      E     LCALL   ?C?LSTKPDATA
0005 00                DB      00H
0006 00                DB      00H
0007 00                DB      00H
0008 00                DB      00H
                                           ; SOURCE LINE # 406
0009 E4                CLR     A
000A 7800        R     MOV     R0,#LOW i
000C F2                MOVX    @R0,A
000D         ?C0037:
                                           ; SOURCE LINE # 407
000D 7800        R     MOV     R0,#LOW dat
000F 120000      E     LCALL   ?C?LLDPDATA
0012 7808              MOV     R0,#08H
0014 120000      E     LCALL   ?C?LSHL
0017 7800        R     MOV     R0,#LOW dat
0019 120000      E     LCALL   ?C?LSTPDATA
                                           ; SOURCE LINE # 408
001C 7800        R     MOV     R0,#LOW dat
001E 120000      E     LCALL   ?C?LLDPDATA0
0021 C000              PUSH    AR0
0023 C001              PUSH    AR1
0025 C002              PUSH    AR2
0027 C003              PUSH    AR3
0029 7800        R     MOV     R0,#LOW i
002B E2                MOVX    A,@R0
002C FF                MOV     R7,A
002D C3                CLR     C
002E 745A              MOV     A,#05AH
0030 9F                SUBB    A,R7
0031 FD                MOV     R5,A
0032 7F8A              MOV     R7,#08AH
0034 120000      E     LCALL   _ReadI2C
0037 E4                CLR     A
0038 FC                MOV     R4,A
0039 FD                MOV     R5,A
003A FE                MOV     R6,A
003B D003              POP     AR3
003D D002              POP     AR2
003F D001              POP     AR1
0041 D000              POP     AR0
0043 120000      E     LCALL   ?C?LOR
0046 7800        R     MOV     R0,#LOW dat
0048 120000      E     LCALL   ?C?LSTPDATA
                                           ; SOURCE LINE # 409
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 116 

004B 7800        R     MOV     R0,#LOW i
004D E2                MOVX    A,@R0
004E 04                INC     A
004F F2                MOVX    @R0,A
0050 E2                MOVX    A,@R0
0051 C3                CLR     C
0052 9404              SUBB    A,#04H
0054 40B7              JC      ?C0037
0056         ?C0038:
                                           ; SOURCE LINE # 410
0056 7800        R     MOV     R0,#LOW dat
0058 120000      E     LCALL   ?C?LLDPDATA
                                           ; SOURCE LINE # 411
005B         ?C0040:
005B 22                RET     
             ; FUNCTION ReadOut4 (END)

             ; FUNCTION GetPhaseRGB (BEGIN)
                                           ; SOURCE LINE # 413
                                           ; SOURCE LINE # 414
                                           ; SOURCE LINE # 422
0000 7800        R     MOV     R0,#LOW PhaseRGB
0002 120000      E     LCALL   ?C?LLDPDATA
0005 7800        R     MOV     R0,#LOW _RGB
0007 120000      E     LCALL   ?C?LSTPDATA
                                           ; SOURCE LINE # 424
000A 7F03              MOV     R7,#03H
000C 120000      E     LCALL   _MeasureAndWait
000F EF                MOV     A,R7
0010 7002              JNZ     ?C0041
                                           ; SOURCE LINE # 425
0012 FF                MOV     R7,A
0013 22                RET     
                                           ; SOURCE LINE # 426
0014         ?C0041:
                                           ; SOURCE LINE # 428
0014 7B08              MOV     R3,#08H
0016 7D5B              MOV     R5,#05BH
0018 7F8A              MOV     R7,#08AH
001A 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 429
001D 120000      R     LCALL   ReadOut4
0020 7800        R     MOV     R0,#LOW PhaseRGB
0022 120000      E     LCALL   ?C?LSTPDATA
                                           ; SOURCE LINE # 431
0025 7B18              MOV     R3,#018H
                                           ; SOURCE LINE # 432
0027 120000      R     LCALL   L?0459
002A C000              PUSH    AR0
002C C001              PUSH    AR1
002E C002              PUSH    AR2
0030 C003              PUSH    AR3
0032 120000      R     LCALL   ReadOut4
0035 D003              POP     AR3
0037 D002              POP     AR2
0039 D001              POP     AR1
003B D000              POP     AR0
003D 120000      E     LCALL   ?C?LADD
0040 7800        R     MOV     R0,#LOW PhaseRGB
0042 120000      E     LCALL   ?C?LSTPDATA
                                           ; SOURCE LINE # 434
0045 7B28              MOV     R3,#028H
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 117 

                                           ; SOURCE LINE # 435
0047 120000      R     LCALL   L?0459
004A C000              PUSH    AR0
004C C001              PUSH    AR1
004E C002              PUSH    AR2
0050 C003              PUSH    AR3
0052 120000      R     LCALL   ReadOut4
0055 D003              POP     AR3
0057 D002              POP     AR2
0059 D001              POP     AR1
005B D000              POP     AR0
005D 120000      E     LCALL   ?C?LADD
0060 7800        R     MOV     R0,#LOW PhaseRGB
0062 120000      E     LCALL   ?C?LSTPDATA
                                           ; SOURCE LINE # 443
0065 7800        R     MOV     R0,#LOW _RGB
0067 120000      E     LCALL   ?C?LLDPDATA
006A 7800        R     MOV     R0,#LOW PhaseRGB
006C 120000      R     LCALL   L?0415
006F 700B              JNZ     ?C0043
                                           ; SOURCE LINE # 445
0071 300004      R     JNB     flag,?C0044
                                           ; SOURCE LINE # 446
0074 C200        R     CLR     flag
                                           ; SOURCE LINE # 447
0076 FF                MOV     R7,A
0077 22                RET     
                                           ; SOURCE LINE # 448
0078         ?C0044:
                                           ; SOURCE LINE # 449
0078 D200        R     SETB    flag
                                           ; SOURCE LINE # 450
007A 8002              SJMP    ?C0046
007C         ?C0043:
                                           ; SOURCE LINE # 451
007C C200        R     CLR     flag
007E         ?C0046:
                                           ; SOURCE LINE # 453
007E 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 454
0080         ?C0042:
0080 22                RET     
0081         L?0459:
0081 7D5B              MOV     R5,#05BH
0083 7F8A              MOV     R7,#08AH
0085 120000      E     LCALL   _WriteI2C
0088 7800        R     MOV     R0,#LOW PhaseRGB
008A 120000      E     LCALL   ?C?LLDPDATA0
008D 22                RET     
             ; FUNCTION GetPhaseRGB (END)

             ; FUNCTION _DecideVGAInputSource (BEGIN)
                                           ; SOURCE LINE # 489
0000 7800        R     MOV     R0,#LOW ivf
0002 EC                MOV     A,R4
0003 F2                MOVX    @R0,A
0004 08                INC     R0
0005 ED                MOV     A,R5
0006 F2                MOVX    @R0,A
0007 7800        R     MOV     R0,#LOW vpn
0009 EE                MOV     A,R6
000A F2                MOVX    @R0,A
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 118 

000B 08                INC     R0
000C EF                MOV     A,R7
000D F2                MOVX    @R0,A
                                           ; SOURCE LINE # 490
                                           ; SOURCE LINE # 498
000E 7800        R     MOV     R0,#LOW _PcMode
0010 74FF              MOV     A,#0FFH
0012 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 509
0013 C3                CLR     C
0014 EF                MOV     A,R7
0015 94B8              SUBB    A,#0B8H
0017 EE                MOV     A,R6
0018 9401              SUBB    A,#01H
001A 5003              JNC     $ + 5H
001C 020000      R     LJMP    ?C0047
001F D3                SETB    C
0020 7800        R     MOV     R0,#LOW vpn+01H
0022 E2                MOVX    A,@R0
0023 94CC              SUBB    A,#0CCH
0025 18                DEC     R0
0026 E2                MOVX    A,@R0
0027 9401              SUBB    A,#01H
0029 4003              JC      $ + 5H
002B 020000      R     LJMP    ?C0047
                                           ; SOURCE LINE # 514
002E 7800        R     MOV     R0,#LOW ivf
0030 E2                MOVX    A,@R0
0031 FE                MOV     R6,A
0032 08                INC     R0
0033 E2                MOVX    A,@R0
0034 FF                MOV     R7,A
0035 EE                MOV     A,R6
0036 6003              JZ      $ + 5H
0038 020000      R     LJMP    ?C0062
003B EF                MOV     A,R7
003C 24BB              ADD     A,#0BBH
003E 24FD              ADD     A,#0FDH
0040 5009              JNC     ?C0051
0042 24F4              ADD     A,#0F4H
0044 24FC              ADD     A,#0FCH
0046 500A              JNC     ?C0055
0048 020000      R     LJMP    ?C0062
                                           ; SOURCE LINE # 515
004B         ?C0051:
004B E4                CLR     A
004C 7800        R     MOV     R0,#LOW _PcMode
004E F2                MOVX    @R0,A
004F 020000      R     LJMP    ?C0063
                                           ; SOURCE LINE # 517
0052         ?C0055:
                                           ; SOURCE LINE # 518
0052 7F01              MOV     R7,#01H
0054 120000      R     LCALL   _GetHpnVpn
                                           ; SOURCE LINE # 525
0057 7D40              MOV     R5,#040H
0059 7F8A              MOV     R7,#08AH
005B 120000      E     LCALL   _ReadI2C
005E EF                MOV     A,R7
005F 30E14F            JNB     ACC.1,?C0056
                                           ; SOURCE LINE # 526
                                           ; SOURCE LINE # 527
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 119 

0062 7F16              MOV     R7,#016H
0064 7E94              MOV     R6,#094H
0066 120000      R     LCALL   L?0441
0069 C3                CLR     C
006A 120000      E     LCALL   ?C?ULCMP
006D 400F              JC      ?C0057
006F 7F70              MOV     R7,#070H
0071 120000      R     LCALL   L?0463
0074 5008              JNC     ?C0057
                                           ; SOURCE LINE # 528
0076 7800        R     MOV     R0,#LOW _PcMode
0078 7403              MOV     A,#03H
007A F2                MOVX    @R0,A
007B 020000      R     LJMP    ?C0063
007E         ?C0057:
                                           ; SOURCE LINE # 529
007E 7FDA              MOV     R7,#0DAH
0080 7E93              MOV     R6,#093H
0082 120000      R     LCALL   L?0441
0085 C3                CLR     C
0086 120000      E     LCALL   ?C?ULCMP
0089 401E              JC      ?C0059
008B 7F0C              MOV     R7,#0CH
008D 120000      R     LCALL   L?0463
0090 5017              JNC     ?C0059
0092 7E00        E     MOV     R6,#HIGH GetHPN
0094 7F00        E     MOV     R7,#LOW GetHPN
0096 EF                MOV     A,R7
0097 9450              SUBB    A,#050H
0099 EE                MOV     A,R6
009A 9405              SUBB    A,#05H
009C 500B              JNC     ?C0059
009E C3                CLR     C
009F EF                MOV     A,R7
00A0 9432              SUBB    A,#032H
00A2 EE                MOV     A,R6
00A3 9405              SUBB    A,#05H
00A5 4002              JC      ?C0059
                                           ; SOURCE LINE # 531
00A7 8008              SJMP    ?C0354
00A9         ?C0059:
                                           ; SOURCE LINE # 533
00A9 7800        R     MOV     R0,#LOW _PcMode
00AB 7401              MOV     A,#01H
00AD F2                MOVX    @R0,A
                                           ; SOURCE LINE # 534
00AE 020000      R     LJMP    ?C0063
00B1         ?C0056:
                                           ; SOURCE LINE # 536
00B1         ?C0354:
00B1 7800        R     MOV     R0,#LOW _PcMode
00B3 7402              MOV     A,#02H
00B5 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 538
00B6 020000      R     LJMP    ?C0063
                                           ; SOURCE LINE # 540
00B9         ?C0062:
00B9 020000      R     LJMP    ?C0359
                                           ; SOURCE LINE # 542
                                           ; SOURCE LINE # 543
00BC         ?C0047:
                                           ; SOURCE LINE # 545
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 120 

00BC 120000      R     LCALL   L?0395
00BF 94EA              SUBB    A,#0EAH
00C1 EE                MOV     A,R6
00C2 9401              SUBB    A,#01H
00C4 5003              JNC     $ + 5H
00C6 020000      R     LJMP    ?C0064
00C9 D3                SETB    C
00CA EF                MOV     A,R7
00CB 941C              SUBB    A,#01CH
00CD EE                MOV     A,R6
00CE 9402              SUBB    A,#02H
00D0 5077              JNC     ?C0064
                                           ; SOURCE LINE # 550
00D2 120000      R     LCALL   L?0419
00D5 EE                MOV     A,R6
00D6 706E              JNZ     ?C0084
00D8 EF                MOV     A,R7
00D9 120000      E     LCALL   ?C?CCASE
00DC 0000        R     DW      ?C0068
00DE 3B                DB      03BH
00DF 0000        R     DW      ?C0068
00E1 3C                DB      03CH
00E2 0000        R     DW      ?C0068
00E4 3D                DB      03DH
00E5 0000        R     DW      ?C0071
00E7 41                DB      041H
00E8 0000        R     DW      ?C0071
00EA 42                DB      042H
00EB 0000        R     DW      ?C0071
00ED 43                DB      043H
00EE 0000        R     DW      ?C0074
00F0 45                DB      045H
00F1 0000        R     DW      ?C0074
00F3 46                DB      046H
00F4 0000        R     DW      ?C0074
00F6 47                DB      047H
00F7 0000        R     DW      ?C0076
00F9 48                DB      048H
00FA 0000        R     DW      ?C0076
00FC 49                DB      049H
00FD 0000        R     DW      ?C0079
00FF 4A                DB      04AH
0100 0000        R     DW      ?C0079
0102 4B                DB      04BH
0103 0000        R     DW      ?C0079
0105 4C                DB      04CH
0106 0000        R     DW      ?C0083
0108 53                DB      053H
0109 0000        R     DW      ?C0083
010B 54                DB      054H
010C 0000        R     DW      ?C0083
010E 55                DB      055H
010F 0000        R     DW      ?C0083
0111 56                DB      056H
0112 0000              DW      00H
0114 0000        R     DW      ?C0084
                                           ; SOURCE LINE # 551
0116         ?C0068:
                                           ; SOURCE LINE # 552
0116 7800        R     MOV     R0,#LOW _PcMode
0118 7404              MOV     A,#04H
011A F2                MOVX    @R0,A
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 121 

011B 020000      R     LJMP    ?C0063
                                           ; SOURCE LINE # 553
011E         ?C0071:
011E 7800        R     MOV     R0,#LOW _PcMode
0120 7405              MOV     A,#05H
0122 F2                MOVX    @R0,A
0123 020000      R     LJMP    ?C0063
                                           ; SOURCE LINE # 554
0126         ?C0074:
0126 7800        R     MOV     R0,#LOW _PcMode
0128 7406              MOV     A,#06H
012A F2                MOVX    @R0,A
012B 020000      R     LJMP    ?C0063
                                           ; SOURCE LINE # 555
012E         ?C0076:
012E 7800        R     MOV     R0,#LOW _PcMode
0130 7407              MOV     A,#07H
0132 F2                MOVX    @R0,A
0133 020000      R     LJMP    ?C0063
                                           ; SOURCE LINE # 556
0136         ?C0079:
0136 7800        R     MOV     R0,#LOW _PcMode
0138 7408              MOV     A,#08H
013A F2                MOVX    @R0,A
013B 020000      R     LJMP    ?C0063
                                           ; SOURCE LINE # 557
                                           ; SOURCE LINE # 558
013E         ?C0083:
013E 7800        R     MOV     R0,#LOW _PcMode
0140 7409              MOV     A,#09H
0142 F2                MOVX    @R0,A
0143 020000      R     LJMP    ?C0063
                                           ; SOURCE LINE # 559
0146         ?C0084:
0146         ?C0355:
0146 020000      R     LJMP    ?C0359
                                           ; SOURCE LINE # 560
                                           ; SOURCE LINE # 561
0149         ?C0064:
                                           ; SOURCE LINE # 563
0149 120000      R     LCALL   L?0395
014C 9462              SUBB    A,#062H
014E EE                MOV     A,R6
014F 9402              SUBB    A,#02H
0151 5003              JNC     $ + 5H
0153 020000      R     LJMP    ?C0086
0156 D3                SETB    C
0157 EF                MOV     A,R7
0158 94C6              SUBB    A,#0C6H
015A EE                MOV     A,R6
015B 9402              SUBB    A,#02H
015D 4003              JC      $ + 5H
015F 020000      R     LJMP    ?C0086
                                           ; SOURCE LINE # 568
0162 120000      R     LCALL   L?0420
0165 EE                MOV     A,R6
0166 6003              JZ      $ + 5H
0168 020000      R     LJMP    ?C0112
016B EF                MOV     A,R7
016C 120000      E     LCALL   ?C?CCASE
016F 0000        R     DW      ?C0090
0171 31                DB      031H
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 122 

0172 0000        R     DW      ?C0090
0174 32                DB      032H
0175 0000        R     DW      ?C0090
0177 33                DB      033H
0178 0000        R     DW      ?C0093
017A 37                DB      037H
017B 0000        R     DW      ?C0093
017D 38                DB      038H
017E 0000        R     DW      ?C0093
0180 39                DB      039H
0181 0000        R     DW      ?C0099
0183 3B                DB      03BH
0184 0000        R     DW      ?C0099
0186 3C                DB      03CH
0187 0000        R     DW      ?C0099
0189 3D                DB      03DH
018A 0000        R     DW      ?C0099
018C 3E                DB      03EH
018D 0000        R     DW      ?C0099
018F 3F                DB      03FH
0190 0000        R     DW      ?C0099
0192 40                DB      040H
0193 0000        R     DW      ?C0102
0195 45                DB      045H
0196 0000        R     DW      ?C0102
0198 46                DB      046H
0199 0000        R     DW      ?C0102
019B 47                DB      047H
019C 0000        R     DW      ?C0104
019E 48                DB      048H
019F 0000        R     DW      ?C0104
01A1 49                DB      049H
01A2 0000        R     DW      ?C0107
01A4 4A                DB      04AH
01A5 0000        R     DW      ?C0107
01A7 4B                DB      04BH
01A8 0000        R     DW      ?C0107
01AA 4C                DB      04CH
01AB 0000        R     DW      ?C0111
01AD 53                DB      053H
01AE 0000        R     DW      ?C0111
01B0 54                DB      054H
01B1 0000        R     DW      ?C0111
01B3 55                DB      055H
01B4 0000        R     DW      ?C0111
01B6 56                DB      056H
01B7 0000              DW      00H
01B9 0000        R     DW      ?C0112
                                           ; SOURCE LINE # 569
01BB         ?C0090:
01BB 7800        R     MOV     R0,#LOW _PcMode
01BD 7424              MOV     A,#024H
01BF F2                MOVX    @R0,A
01C0 020000      R     LJMP    ?C0063
                                           ; SOURCE LINE # 571
01C3         ?C0093:
01C3 7800        R     MOV     R0,#LOW _PcMode
01C5 740A              MOV     A,#0AH
01C7 F2                MOVX    @R0,A
01C8 020000      R     LJMP    ?C0063
                                           ; SOURCE LINE # 572
01CB         ?C0099:
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 123 

                                           ; SOURCE LINE # 573
01CB 7800        R     MOV     R0,#LOW _PcMode
01CD 740B              MOV     A,#0BH
01CF F2                MOVX    @R0,A
01D0 020000      R     LJMP    ?C0063
                                           ; SOURCE LINE # 574
01D3         ?C0102:
01D3 7800        R     MOV     R0,#LOW _PcMode
01D5 740C              MOV     A,#0CH
01D7 F2                MOVX    @R0,A
01D8 020000      R     LJMP    ?C0063
                                           ; SOURCE LINE # 575
01DB         ?C0104:
01DB 7800        R     MOV     R0,#LOW _PcMode
01DD 740D              MOV     A,#0DH
01DF F2                MOVX    @R0,A
01E0 020000      R     LJMP    ?C0063
                                           ; SOURCE LINE # 576
01E3         ?C0107:
01E3 7800        R     MOV     R0,#LOW _PcMode
01E5 740E              MOV     A,#0EH
01E7 F2                MOVX    @R0,A
01E8 020000      R     LJMP    ?C0063
                                           ; SOURCE LINE # 578
                                           ; SOURCE LINE # 579
01EB         ?C0111:
01EB 7800        R     MOV     R0,#LOW _PcMode
01ED 740F              MOV     A,#0FH
01EF F2                MOVX    @R0,A
01F0 020000      R     LJMP    ?C0063
                                           ; SOURCE LINE # 581
01F3         ?C0112:
01F3         ?C0356:
01F3 020000      R     LJMP    ?C0359
                                           ; SOURCE LINE # 582
                                           ; SOURCE LINE # 583
01F6         ?C0086:
                                           ; SOURCE LINE # 586
01F6 120000      R     LCALL   L?0396
01F9 94DB              SUBB    A,#0DBH
01FB EE                MOV     A,R6
01FC 9402              SUBB    A,#02H
01FE 4044              JC      ?C0114
0200 D3                SETB    C
0201 EF                MOV     A,R7
0202 940D              SUBB    A,#0DH
0204 EE                MOV     A,R6
0205 9403              SUBB    A,#03H
0207 503B              JNC     ?C0114
                                           ; SOURCE LINE # 593
0209 08                INC     R0
020A 120000      R     LCALL   L?0397
020D 9437              SUBB    A,#037H
020F EE                MOV     A,R6
0210 9400              SUBB    A,#00H
0212 4010              JC      ?C0115
0214 D3                SETB    C
0215 EF                MOV     A,R7
0216 9441              SUBB    A,#041H
0218 EE                MOV     A,R6
0219 9400              SUBB    A,#00H
021B 5007              JNC     ?C0115
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 124 

                                           ; SOURCE LINE # 595
                                           ; SOURCE LINE # 596
021D 08                INC     R0
021E 741D              MOV     A,#01DH
0220 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 597
0221 020000      R     LJMP    ?C0063
0224         ?C0115:
                                           ; SOURCE LINE # 601
0224 C3                CLR     C
0225 EF                MOV     A,R7
0226 942D              SUBB    A,#02DH
0228 EE                MOV     A,R6
0229 9400              SUBB    A,#00H
022B 5003              JNC     $ + 5H
022D 020000      R     LJMP    ?C0063
0230 D3                SETB    C
0231 EF                MOV     A,R7
0232 9437              SUBB    A,#037H
0234 EE                MOV     A,R6
0235 9400              SUBB    A,#00H
0237 4003              JC      $ + 5H
0239 020000      R     LJMP    ?C0063
                                           ; SOURCE LINE # 603
                                           ; SOURCE LINE # 604
023C 7800        R     MOV     R0,#LOW _PcMode
023E 741E              MOV     A,#01EH
0240 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 605
                                           ; SOURCE LINE # 606
0241 020000      R     LJMP    ?C0063
0244         ?C0114:
                                           ; SOURCE LINE # 608
0244 120000      R     LCALL   L?0396
0247 9429              SUBB    A,#029H
0249 EE                MOV     A,R6
024A 9402              SUBB    A,#02H
024C 4023              JC      ?C0119
024E D3                SETB    C
024F EF                MOV     A,R7
0250 943D              SUBB    A,#03DH
0252 EE                MOV     A,R6
0253 9402              SUBB    A,#02H
0255 501A              JNC     ?C0119
                                           ; SOURCE LINE # 612
0257 C3                CLR     C
0258 7800        R     MOV     R0,#LOW ivf+01H
025A E2                MOVX    A,@R0
025B 9437              SUBB    A,#037H
025D 18                DEC     R0
025E E2                MOVX    A,@R0
025F 9400              SUBB    A,#00H
0261 7800        R     MOV     R0,#LOW _PcMode
0263 4006              JC      ?C0120
                                           ; SOURCE LINE # 613
0265 741F              MOV     A,#01FH
0267 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 614
0268 020000      R     LJMP    ?C0063
026B         ?C0120:
                                           ; SOURCE LINE # 615
                                           ; SOURCE LINE # 616
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 125 

026B 7420              MOV     A,#020H
026D F2                MOVX    @R0,A
                                           ; SOURCE LINE # 617
                                           ; SOURCE LINE # 618
026E 020000      R     LJMP    ?C0063
0271         ?C0119:
                                           ; SOURCE LINE # 620
0271 120000      R     LCALL   L?0396
0274 94E0              SUBB    A,#0E0H
0276 EE                MOV     A,R6
0277 9400              SUBB    A,#00H
0279 4011              JC      ?C0123
027B D3                SETB    C
027C EF                MOV     A,R7
027D 942B              SUBB    A,#02BH
027F EE                MOV     A,R6
0280 9401              SUBB    A,#01H
0282 5008              JNC     ?C0123
                                           ; SOURCE LINE # 624
0284 7800        R     MOV     R0,#LOW _PcMode
0286 7422              MOV     A,#022H
0288 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 625
0289 020000      R     LJMP    ?C0063
028C         ?C0123:
                                           ; SOURCE LINE # 627
028C C3                CLR     C
028D EF                MOV     A,R7
028E 942C              SUBB    A,#02CH
0290 EE                MOV     A,R6
0291 9401              SUBB    A,#01H
0293 4011              JC      ?C0125
0295 D3                SETB    C
0296 EF                MOV     A,R7
0297 946C              SUBB    A,#06CH
0299 EE                MOV     A,R6
029A 9401              SUBB    A,#01H
029C 5008              JNC     ?C0125
                                           ; SOURCE LINE # 631
029E 7800        R     MOV     R0,#LOW _PcMode
02A0 7423              MOV     A,#023H
02A2 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 632
02A3 020000      R     LJMP    ?C0063
02A6         ?C0125:
                                           ; SOURCE LINE # 635
02A6 C3                CLR     C
02A7 EF                MOV     A,R7
02A8 9416              SUBB    A,#016H
02AA EE                MOV     A,R6
02AB 9403              SUBB    A,#03H
02AD 4070              JC      ?C0127
02AF D3                SETB    C
02B0 EF                MOV     A,R7
02B1 9434              SUBB    A,#034H
02B3 EE                MOV     A,R6
02B4 9403              SUBB    A,#03H
02B6 5067              JNC     ?C0127
                                           ; SOURCE LINE # 640
02B8 7800        R     MOV     R0,#LOW ivf
02BA E2                MOVX    A,@R0
02BB FE                MOV     R6,A
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 126 

02BC 08                INC     R0
02BD E2                MOVX    A,@R0
02BE FF                MOV     R7,A
02BF EE                MOV     A,R6
02C0 705A              JNZ     ?C0143
02C2 EF                MOV     A,R7
02C3 120000      E     LCALL   ?C?CCASE
02C6 0000        R     DW      ?C0131
02C8 3B                DB      03BH
02C9 0000        R     DW      ?C0131
02CB 3C                DB      03CH
02CC 0000        R     DW      ?C0131
02CE 3D                DB      03DH
02CF 0000        R     DW      ?C0134
02D1 45                DB      045H
02D2 0000        R     DW      ?C0134
02D4 46                DB      046H
02D5 0000        R     DW      ?C0134
02D7 47                DB      047H
02D8 0000        R     DW      ?C0136
02DA 48                DB      048H
02DB 0000        R     DW      ?C0136
02DD 49                DB      049H
02DE 0000        R     DW      ?C0139
02E0 4A                DB      04AH
02E1 0000        R     DW      ?C0139
02E3 4B                DB      04BH
02E4 0000        R     DW      ?C0139
02E6 4C                DB      04CH
02E7 0000        R     DW      ?C0142
02E9 54                DB      054H
02EA 0000        R     DW      ?C0142
02EC 55                DB      055H
02ED 0000        R     DW      ?C0142
02EF 56                DB      056H
02F0 0000              DW      00H
02F2 0000        R     DW      ?C0143
                                           ; SOURCE LINE # 641
02F4         ?C0131:
02F4 7800        R     MOV     R0,#LOW _PcMode
02F6 7411              MOV     A,#011H
02F8 F2                MOVX    @R0,A
02F9 020000      R     LJMP    ?C0063
                                           ; SOURCE LINE # 642
02FC         ?C0134:
02FC 7800        R     MOV     R0,#LOW _PcMode
02FE 7412              MOV     A,#012H
0300 F2                MOVX    @R0,A
0301 020000      R     LJMP    ?C0063
                                           ; SOURCE LINE # 643
0304         ?C0136:
0304 7800        R     MOV     R0,#LOW _PcMode
0306 7413              MOV     A,#013H
0308 F2                MOVX    @R0,A
0309 020000      R     LJMP    ?C0063
                                           ; SOURCE LINE # 644
030C         ?C0139:
030C 7800        R     MOV     R0,#LOW _PcMode
030E 7414              MOV     A,#014H
0310 F2                MOVX    @R0,A
0311 020000      R     LJMP    ?C0063
                                           ; SOURCE LINE # 645
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 127 

0314         ?C0142:
0314 7800        R     MOV     R0,#LOW _PcMode
0316 7415              MOV     A,#015H
0318 F2                MOVX    @R0,A
0319 020000      R     LJMP    ?C0063
                                           ; SOURCE LINE # 646
031C         ?C0143:
031C         ?C0357:
031C 020000      R     LJMP    ?C0359
                                           ; SOURCE LINE # 647
                                           ; SOURCE LINE # 648
031F         ?C0127:
                                           ; SOURCE LINE # 650
031F 120000      R     LCALL   L?0396
0322 9452              SUBB    A,#052H
0324 EE                MOV     A,R6
0325 9403              SUBB    A,#03H
0327 403B              JC      ?C0145
0329 D3                SETB    C
032A EF                MOV     A,R7
032B 94E8              SUBB    A,#0E8H
032D EE                MOV     A,R6
032E 9403              SUBB    A,#03H
0330 5032              JNC     ?C0145
                                           ; SOURCE LINE # 655
0332 120000      R     LCALL   L?0420
0335 EE                MOV     A,R6
0336 702A              JNZ     ?C0156
0338 EF                MOV     A,R7
0339 24C5              ADD     A,#0C5H
033B 24FD              ADD     A,#0FDH
033D 500E              JNC     ?C0149
033F 24F9              ADD     A,#0F9H
0341 24FD              ADD     A,#0FDH
0343 500F              JNC     ?C0152
0345 24FE              ADD     A,#0FEH
0347 24FD              ADD     A,#0FDH
0349 5010              JNC     ?C0155
034B 8015              SJMP    ?C0156
                                           ; SOURCE LINE # 656
034D         ?C0149:
034D 7800        R     MOV     R0,#LOW _PcMode
034F 7416              MOV     A,#016H
0351 F2                MOVX    @R0,A
0352 8056              SJMP    ?C0063
                                           ; SOURCE LINE # 657
0354         ?C0152:
0354 7800        R     MOV     R0,#LOW _PcMode
0356 7417              MOV     A,#017H
0358 F2                MOVX    @R0,A
0359 804F              SJMP    ?C0063
                                           ; SOURCE LINE # 658
035B         ?C0155:
035B 7800        R     MOV     R0,#LOW _PcMode
035D 7418              MOV     A,#018H
035F F2                MOVX    @R0,A
0360 8048              SJMP    ?C0063
                                           ; SOURCE LINE # 659
0362         ?C0156:
0362         ?C0358:
0362 8041              SJMP    ?C0359
                                           ; SOURCE LINE # 660
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 128 

                                           ; SOURCE LINE # 661
0364         ?C0145:
                                           ; SOURCE LINE # 664
0364 120000      R     LCALL   L?0396
0367 EE                MOV     A,R6
0368 9404              SUBB    A,#04H
036A 403E              JC      ?C0063
036C D3                SETB    C
036D EF                MOV     A,R7
036E 9440              SUBB    A,#040H
0370 EE                MOV     A,R6
0371 9406              SUBB    A,#06H
0373 5035              JNC     ?C0063
                                           ; SOURCE LINE # 669
0375 120000      R     LCALL   L?0420
0378 EE                MOV     A,R6
0379 702A              JNZ     ?C0169
037B EF                MOV     A,R7
037C 24C5              ADD     A,#0C5H
037E 24FD              ADD     A,#0FDH
0380 500E              JNC     ?C0162
0382 24F9              ADD     A,#0F9H
0384 24FD              ADD     A,#0FDH
0386 500F              JNC     ?C0165
0388 24FE              ADD     A,#0FEH
038A 24FD              ADD     A,#0FDH
038C 5010              JNC     ?C0168
038E 8015              SJMP    ?C0169
                                           ; SOURCE LINE # 670
0390         ?C0162:
0390 7800        R     MOV     R0,#LOW _PcMode
0392 7419              MOV     A,#019H
0394 F2                MOVX    @R0,A
0395 8013              SJMP    ?C0063
                                           ; SOURCE LINE # 671
0397         ?C0165:
0397 7800        R     MOV     R0,#LOW _PcMode
0399 741A              MOV     A,#01AH
039B F2                MOVX    @R0,A
039C 800C              SJMP    ?C0063
                                           ; SOURCE LINE # 672
039E         ?C0168:
039E 7800        R     MOV     R0,#LOW _PcMode
03A0 741B              MOV     A,#01BH
03A2 F2                MOVX    @R0,A
03A3 8005              SJMP    ?C0063
                                           ; SOURCE LINE # 673
03A5         ?C0169:
03A5         ?C0359:
03A5 7800        R     MOV     R0,#LOW _PcMode
03A7 74FF              MOV     A,#0FFH
03A9 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 674
                                           ; SOURCE LINE # 675
03AA         ?C0063:
                                           ; SOURCE LINE # 684
03AA 7800        R     MOV     R0,#LOW _PcMode
03AC 900000      E     MOV     DPTR,#PCMDATA
03AF 120000      R     LCALL   L?0400
03B2 E4                CLR     A
03B3 93                MOVC    A,@A+DPTR
03B4 7003              JNZ     ?C0170
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 129 

03B6 74FF              MOV     A,#0FFH
03B8 F2                MOVX    @R0,A
03B9         ?C0170:
                                           ; SOURCE LINE # 686
03B9 7800        R     MOV     R0,#LOW _PcMode
03BB E2                MOVX    A,@R0
03BC FF                MOV     R7,A
                                           ; SOURCE LINE # 687
03BD         ?C0171:
03BD 22                RET     
             ; FUNCTION _DecideVGAInputSource (END)

             ; FUNCTION _ConvertBasedOnInput (BEGIN)
                                           ; SOURCE LINE # 689
0000 7800        R     MOV     R0,#LOW dat
0002 EE                MOV     A,R6
0003 F2                MOVX    @R0,A
0004 08                INC     R0
0005 EF                MOV     A,R7
0006 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 690
                                           ; SOURCE LINE # 693
0007 120000      E     LCALL   IsBypassmode
000A EF                MOV     A,R7
000B 6008              JZ      ?C0172
000D 7800        R     MOV     R0,#LOW dat
000F E2                MOVX    A,@R0
0010 FE                MOV     R6,A
0011 08                INC     R0
0012 E2                MOVX    A,@R0
0013 FF                MOV     R7,A
0014 22                RET     
0015         ?C0172:
                                           ; SOURCE LINE # 695
0015 7800        R     MOV     R0,#LOW PcMode
0017 900000      E     MOV     DPTR,#PCMDATA+013H
001A 120000      R     LCALL   L?0384
001D 120000      R     LCALL   L?0404
0020 C006              PUSH    AR6
0022 C007              PUSH    AR7
0024 7800        R     MOV     R0,#LOW dat
0026 120000      R     LCALL   L?0402
0029 D007              POP     AR7
002B D006              POP     AR6
002D 120000      E     LCALL   ?C?SLDIV
0030 7800        R     MOV     R0,#LOW dtmp
0032 120000      E     LCALL   ?C?LSTPDATA
                                           ; SOURCE LINE # 696
0035 120000      R     LCALL   L?0431
0038 900000      E     MOV     DPTR,#PCMDATA+011H
003B 120000      R     LCALL   L?0385
003E 120000      R     LCALL   L?0404
0041 7800        R     MOV     R0,#LOW dtmp
0043 120000      E     LCALL   ?C?LLDPDATA0
0046 120000      E     LCALL   ?C?ULDIV
0049 7800        R     MOV     R0,#LOW dtmp
004B 120000      E     LCALL   ?C?LSTPDATA
                                           ; SOURCE LINE # 697
004E 7800        R     MOV     R0,#LOW dtmp
0050 120000      E     LCALL   ?C?LLDPDATA
                                           ; SOURCE LINE # 698
0053         ?C0173:
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 130 

0053 22                RET     
             ; FUNCTION _ConvertBasedOnInput (END)

             ; FUNCTION AutoTuneClock (BEGIN)
                                           ; SOURCE LINE # 761
                                           ; SOURCE LINE # 762
                                           ; SOURCE LINE # 775
0000 7800        R     MOV     R0,#LOW low
0002 E4                CLR     A
0003 F2                MOVX    @R0,A
0004 08                INC     R0
0005 740A              MOV     A,#0AH
0007 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 776
0008 120000      E     LCALL   GetHPN
000B 120000      R     LCALL   _ConvertBasedOnInput
000E 7800        R     MOV     R0,#LOW high
0010 EE                MOV     A,R6
                                           ; SOURCE LINE # 777
0011 120000      R     LCALL   L?0433
0014 120000      E     LCALL   _SetMeasureWindowH
                                           ; SOURCE LINE # 779
0017 7800        R     MOV     R0,#LOW low
0019 E4                CLR     A
001A F2                MOVX    @R0,A
001B 08                INC     R0
001C 04                INC     A
001D F2                MOVX    @R0,A
                                           ; SOURCE LINE # 780
001E 120000      E     LCALL   GetVPN
0021 EF                MOV     A,R7
0022 24FF              ADD     A,#0FFH
0024 FF                MOV     R7,A
0025 EE                MOV     A,R6
0026 34FF              ADDC    A,#0FFH
0028 7800        R     MOV     R0,#LOW high
                                           ; SOURCE LINE # 781
002A 120000      R     LCALL   L?0433
002D 120000      E     LCALL   _SetMeasureWindowV
                                           ; SOURCE LINE # 783
0030 7800        R     MOV     R0,#LOW PcMode
0032 E2                MOVX    A,@R0
0033 FF                MOV     R7,A
0034 75F016            MOV     B,#016H
0037 900000      E     MOV     DPTR,#PCMDATA+09H
003A 120000      E     LCALL   ?C?OFFXADD
003D E4                CLR     A
003E 93                MOVC    A,@A+DPTR
003F FD                MOV     R5,A
0040 7401              MOV     A,#01H
0042 93                MOVC    A,@A+DPTR
0043 7800        R     MOV     R0,#LOW low
0045 CD                XCH     A,R5
0046 F2                MOVX    @R0,A
0047 08                INC     R0
0048 ED                MOV     A,R5
0049 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 784
004A 75F016            MOV     B,#016H
004D EF                MOV     A,R7
004E 900000      E     MOV     DPTR,#PCMDATA+0BH
0051 120000      E     LCALL   ?C?OFFXADD
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 131 

0054 E4                CLR     A
0055 08                INC     R0
0056 120000      R     LCALL   L?0445
                                           ; SOURCE LINE # 786
0059 08                INC     R0
005A 120000      R     LCALL   L?0436
                                           ; SOURCE LINE # 787
005D 7F01              MOV     R7,#01H
005F 120000      R     LCALL   _GetHpnVpn
0062 7800        R     MOV     R0,#LOW num
0064 EE                MOV     A,R6
0065 F2                MOVX    @R0,A
0066 08                INC     R0
0067 EF                MOV     A,R7
0068 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 788
0069 4E                ORL     A,R6
006A 7003              JNZ     ?C0174
                                           ; SOURCE LINE # 792
006C FE                MOV     R6,A
006D FF                MOV     R7,A
006E 22                RET     
                                           ; SOURCE LINE # 793
006F         ?C0174:
                                           ; SOURCE LINE # 799
006F AE00        E     MOV     R6,IVF
0071 AF00        E     MOV     R7,IVF+01H
0073 7800        R     MOV     R0,#LOW num
0075 E2                MOVX    A,@R0
0076 FC                MOV     R4,A
0077 08                INC     R0
0078 E2                MOVX    A,@R0
0079 FD                MOV     R5,A
007A 120000      E     LCALL   ?C?LIMUL
007D C004              PUSH    AR4
007F A905              MOV     R1,AR5
0081 AA06              MOV     R2,AR6
0083 AB07              MOV     R3,AR7
0085 120000      R     LCALL   L?0381
0088 E4                CLR     A
0089 FC                MOV     R4,A
008A FD                MOV     R5,A
008B D000              POP     AR0
008D 120000      E     LCALL   ?C?LMUL
0090 120000      E     LCALL   _SetVCORange
                                           ; SOURCE LINE # 808
0093 7800        R     MOV     R0,#LOW RGBPeak
0095 120000      E     LCALL   ?C?LSTKPDATA
0098 00                DB      00H
0099 00                DB      00H
009A 00                DB      00H
009B 00                DB      00H
                                           ; SOURCE LINE # 810
009C 7800        R     MOV     R0,#LOW low
009E E2                MOVX    A,@R0
009F FA                MOV     R2,A
00A0 08                INC     R0
00A1 E2                MOVX    A,@R0
00A2 FB                MOV     R3,A
00A3 7800        R     MOV     R0,#LOW num
00A5 EA                MOV     A,R2
00A6 F2                MOVX    @R0,A
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 132 

00A7 08                INC     R0
00A8 EB                MOV     A,R3
00A9 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 811
00AA 08                INC     R0
00AB 120000      E     LCALL   ?C?LSTKPDATA
00AE 00                DB      00H
00AF 00                DB      00H
00B0 00                DB      00H
00B1 00                DB      00H
                                           ; SOURCE LINE # 812
00B2 7800        R     MOV     R0,#LOW i
00B4 EA                MOV     A,R2
00B5 F2                MOVX    @R0,A
00B6 08                INC     R0
00B7 EB                MOV     A,R3
00B8 F2                MOVX    @R0,A
00B9         ?C0176:
00B9 7800        R     MOV     R0,#LOW high
00BB E2                MOVX    A,@R0
00BC FC                MOV     R4,A
00BD 08                INC     R0
00BE E2                MOVX    A,@R0
00BF FD                MOV     R5,A
00C0 120000      R     LCALL   L?0419
00C3 D3                SETB    C
00C4 9D                SUBB    A,R5
00C5 EE                MOV     A,R6
00C6 9C                SUBB    A,R4
00C7 4003              JC      $ + 5H
00C9 020000      R     LJMP    ?C0177
                                           ; SOURCE LINE # 814
00CC 120000      E     LCALL   _SetCoarse
                                           ; SOURCE LINE # 815
00CF 7D01              MOV     R5,#01H
00D1 7FCD              MOV     R7,#0CDH
00D3 120000      E     LCALL   _WriteADC_TW88
                                           ; SOURCE LINE # 816
00D6 7F14              MOV     R7,#014H
00D8 120000      E     LCALL   _delay
                                           ; SOURCE LINE # 818
00DB 120000      R     LCALL   GetPhaseRGB
                                           ; SOURCE LINE # 819
00DE 7800        R     MOV     R0,#LOW RGBPeak
00E0 120000      E     LCALL   ?C?LSTKPDATA
00E3 00                DB      00H
00E4 00                DB      00H
00E5 00                DB      00H
00E6 00                DB      00H
                                           ; SOURCE LINE # 820
00E7 120000      R     LCALL   L?0464
00EA 120000      E     LCALL   ?C?LSTPDATA
                                           ; SOURCE LINE # 822
00ED E4                CLR     A
00EE 7800        R     MOV     R0,#LOW j
00F0 F2                MOVX    @R0,A
00F1         ?C0178:
00F1 7800        R     MOV     R0,#LOW j
00F3 E2                MOVX    A,@R0
00F4 FF                MOV     R7,A
00F5 C3                CLR     C
00F6 9408              SUBB    A,#08H
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 133 

00F8 5044              JNC     ?C0179
                                           ; SOURCE LINE # 823
00FA C3                CLR     C
00FB 7407              MOV     A,#07H
00FD 9F                SUBB    A,R7
00FE 25E0              ADD     A,ACC
0100 25E0              ADD     A,ACC
0102 FF                MOV     R7,A
0103 7800        R     MOV     R0,#LOW phase
0105 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 824
0106 120000      E     LCALL   _SetPhase
                                           ; SOURCE LINE # 825
0109 120000      R     LCALL   GetPhaseRGB
010C EF                MOV     A,R7
010D 7003              JNZ     ?C0181
010F FE                MOV     R6,A
0110 FF                MOV     R7,A
0111 22                RET     
0112         ?C0181:
                                           ; SOURCE LINE # 827
0112 120000      R     LCALL   L?0414
0115 5008              JNC     ?C0183
                                           ; SOURCE LINE # 828
0117 120000      R     LCALL   L?0474
                                           ; SOURCE LINE # 829
011A 7800        R     MOV     R0,#LOW phase
011C E2                MOVX    A,@R0
011D 08                INC     R0
011E F2                MOVX    @R0,A
                                           ; SOURCE LINE # 832
                                           ; SOURCE LINE # 833
                                           ; SOURCE LINE # 835
011F         ?C0183:
                                           ; SOURCE LINE # 836
011F 120000      R     LCALL   L?0464
0122 120000      E     LCALL   ?C?LLDPDATA0
0125 D3                SETB    C
0126 120000      E     LCALL   ?C?ULCMP
0129 400C              JC      ?C0180
                                           ; SOURCE LINE # 837
012B 120000      R     LCALL   L?0465
012E 120000      E     LCALL   ?C?LSTPDATA
                                           ; SOURCE LINE # 838
0131 7800        R     MOV     R0,#LOW phase
0133 E2                MOVX    A,@R0
0134 7800        R     MOV     R0,#LOW phasemin
0136 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 839
                                           ; SOURCE LINE # 840
0137         ?C0180:
0137 7800        R     MOV     R0,#LOW j
0139 E2                MOVX    A,@R0
013A 04                INC     A
013B F2                MOVX    @R0,A
013C 80B3              SJMP    ?C0178
013E         ?C0179:
                                           ; SOURCE LINE # 841
013E 7800        R     MOV     R0,#LOW RGBmin
0140 120000      E     LCALL   ?C?LLDPDATA0
0143 C000              PUSH    AR0
0145 7800        R     MOV     R0,#LOW RGBPeak
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 134 

0147 120000      E     LCALL   ?C?LLDPDATA
014A D000              POP     AR0
014C 120000      E     LCALL   ?C?LSUB
014F 7800        R     MOV     R0,#LOW RGBdiff
0151 120000      R     LCALL   L?0415
0154 5023              JNC     ?C0185
                                           ; SOURCE LINE # 842
0156 7800        R     MOV     R0,#LOW RGBmin
0158 120000      E     LCALL   ?C?LLDPDATA0
015B C000              PUSH    AR0
015D 7800        R     MOV     R0,#LOW RGBPeak
015F 120000      E     LCALL   ?C?LLDPDATA
0162 D000              POP     AR0
0164 120000      E     LCALL   ?C?LSUB
0167 7800        R     MOV     R0,#LOW RGBdiff
0169 120000      E     LCALL   ?C?LSTPDATA
                                           ; SOURCE LINE # 843
016C 7800        R     MOV     R0,#LOW i
016E E2                MOVX    A,@R0
016F FF                MOV     R7,A
0170 08                INC     R0
0171 E2                MOVX    A,@R0
0172 7800        R     MOV     R0,#LOW num
0174 CF                XCH     A,R7
0175 F2                MOVX    @R0,A
0176 08                INC     R0
0177 EF                MOV     A,R7
0178 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 844
0179         ?C0185:
                                           ; SOURCE LINE # 852
0179 7800        R     MOV     R0,#LOW i+01H
017B 120000      R     LCALL   L?0456
                                           ; SOURCE LINE # 854
017E 020000      R     LJMP    ?C0176
0181         ?C0177:
                                           ; SOURCE LINE # 856
0181 120000      R     LCALL   L?0434
0184 7800        R     MOV     R0,#LOW high+01H
0186 E2                MOVX    A,@R0
0187 6F                XRL     A,R7
0188 7003              JNZ     ?C0347
018A 18                DEC     R0
018B E2                MOVX    A,@R0
018C 6E                XRL     A,R6
018D         ?C0347:
018D 6006              JZ      ?C0186
018F 120000      R     LCALL   L?0466
0192 120000      E     LCALL   _SetCoarse
0195         ?C0186:
                                           ; SOURCE LINE # 857
0195 7BFF              MOV     R3,#0FFH
0197 7A00        R     MOV     R2,#HIGH ?SC_0
0199 7900        R     MOV     R1,#LOW ?SC_0
019B 120000      R     LCALL   L?0466
019E 7800        E     MOV     R0,#LOW ?_Printf?BYTE+03H
01A0 EE                MOV     A,R6
01A1 F2                MOVX    @R0,A
01A2 08                INC     R0
01A3 EF                MOV     A,R7
01A4 F2                MOVX    @R0,A
01A5 08                INC     R0
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 135 

01A6 EE                MOV     A,R6
01A7 F2                MOVX    @R0,A
01A8 08                INC     R0
01A9 EF                MOV     A,R7
01AA F2                MOVX    @R0,A
01AB 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 858
01AE 7D01              MOV     R5,#01H
01B0 7FCD              MOV     R7,#0CDH
01B2 120000      E     LCALL   _WriteADC_TW88
                                           ; SOURCE LINE # 859
01B5 7800        R     MOV     R0,#LOW phasemin
01B7 E2                MOVX    A,@R0
01B8 240E              ADD     A,#0EH
01BA FF                MOV     R7,A
01BB 120000      E     LCALL   _SetPhase
                                           ; SOURCE LINE # 861
01BE 120000      R     LCALL   L?0467
                                           ; SOURCE LINE # 863
01C1         ?C0175:
01C1 22                RET     
             ; FUNCTION AutoTuneClock (END)

             ; FUNCTION AutoTunePhase (BEGIN)
                                           ; SOURCE LINE # 934
                                           ; SOURCE LINE # 935
                                           ; SOURCE LINE # 953
0000 900000      E     MOV     DPTR,#PCMDATA+01H
0003 120000      R     LCALL   L?0388
0006 120000      R     LCALL   L?0451
0009 120000      E     LCALL   _SetMeasureWindowH
                                           ; SOURCE LINE # 954
000C 120000      R     LCALL   L?0386
000F 120000      R     LCALL   L?0451
0012 120000      E     LCALL   _SetMeasureWindowV
                                           ; SOURCE LINE # 956
0015 E4                CLR     A
0016 7800        R     MOV     R0,#LOW j
0018 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 957
0019 7800        R     MOV     R0,#LOW RGBPeak
001B 120000      E     LCALL   ?C?LSTKPDATA
001E 00                DB      00H
001F 00                DB      00H
0020 00                DB      00H
0021 00                DB      00H
                                           ; SOURCE LINE # 958
0022 120000      R     LCALL   GetPhaseRGB
                                           ; SOURCE LINE # 959
0025 120000      R     LCALL   L?0475
                                           ; SOURCE LINE # 960
0028 E4                CLR     A
0029 7800        R     MOV     R0,#LOW i
002B F2                MOVX    @R0,A
002C         ?C0187:
002C 7800        R     MOV     R0,#LOW i
002E E2                MOVX    A,@R0
002F C3                CLR     C
0030 9420              SUBB    A,#020H
0032 5039              JNC     ?C0188
                                           ; SOURCE LINE # 962
0034 08                INC     R0
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 136 

0035 E2                MOVX    A,@R0
0036 FF                MOV     R7,A
0037 120000      E     LCALL   _SetPhase
                                           ; SOURCE LINE # 964
003A 120000      R     LCALL   GetPhaseRGB
003D EF                MOV     A,R7
003E 603D              JZ      ?C0191
0040         ?C0190:
                                           ; SOURCE LINE # 967
0040 120000      R     LCALL   L?0414
0043 5008              JNC     ?C0193
                                           ; SOURCE LINE # 968
0045 120000      R     LCALL   L?0474
                                           ; SOURCE LINE # 969
0048 7800        R     MOV     R0,#LOW j
004A E2                MOVX    A,@R0
004B 08                INC     R0
004C F2                MOVX    @R0,A
                                           ; SOURCE LINE # 973
                                           ; SOURCE LINE # 974
                                           ; SOURCE LINE # 978
004D         ?C0193:
                                           ; SOURCE LINE # 979
004D 7800        R     MOV     R0,#LOW RGBmin
004F 120000      E     LCALL   ?C?LLDPDATA
0052 7800        R     MOV     R0,#LOW PhaseRGB
0054 120000      R     LCALL   L?0415
0057 5009              JNC     ?C0189
                                           ; SOURCE LINE # 980
0059 120000      R     LCALL   L?0475
                                           ; SOURCE LINE # 981
005C 7800        R     MOV     R0,#LOW j
005E E2                MOVX    A,@R0
005F 7800        R     MOV     R0,#LOW min_j
0061 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 982
                                           ; SOURCE LINE # 983
0062         ?C0189:
0062 7800        R     MOV     R0,#LOW i
0064 E2                MOVX    A,@R0
0065 04                INC     A
0066 F2                MOVX    @R0,A
0067 08                INC     R0
0068 E2                MOVX    A,@R0
0069 04                INC     A
006A F2                MOVX    @R0,A
006B 80BF              SJMP    ?C0187
006D         ?C0188:
                                           ; SOURCE LINE # 984
006D 7800        R     MOV     R0,#LOW min_j
006F E2                MOVX    A,@R0
0070 2410              ADD     A,#010H
0072 FF                MOV     R7,A
0073 120000      E     LCALL   _SetPhase
                                           ; SOURCE LINE # 985
0076 7D01              MOV     R5,#01H
0078 7FCD              MOV     R7,#0CDH
007A 120000      E     LCALL   _WriteADC_TW88
                                           ; SOURCE LINE # 1015
007D         ?C0191:
007D 22                RET     
             ; FUNCTION AutoTunePhase (END)
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 137 


             ; FUNCTION _GetHpnVpn (BEGIN)
                                           ; SOURCE LINE # 1020
0000 7800        R     MOV     R0,#LOW en
0002 EF                MOV     A,R7
0003 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1021
                                           ; SOURCE LINE # 1025
0004 7800        E     MOV     R0,#LOW DebugLevel
0006 E2                MOVX    A,@R0
0007 FF                MOV     R7,A
0008 7800        R     MOV     R0,#LOW en
000A F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1026
000B 7007              JNZ     ?C0195
000D EF                MOV     A,R7
000E 6004              JZ      ?C0195
0010 E4                CLR     A
0011 7800        E     MOV     R0,#LOW DebugLevel
0013 F2                MOVX    @R0,A
0014         ?C0195:
                                           ; SOURCE LINE # 1033
0014 7F03              MOV     R7,#03H
0016 120000      E     LCALL   _MeasureAndWait
0019 EF                MOV     A,R7
001A 700A              JNZ     ?C0196
                                           ; SOURCE LINE # 1037
001C 7800        R     MOV     R0,#LOW en
001E E2                MOVX    A,@R0
001F 7800        E     MOV     R0,#LOW DebugLevel
0021 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1038
0022 E4                CLR     A
0023 FE                MOV     R6,A
0024 FF                MOV     R7,A
0025 22                RET     
                                           ; SOURCE LINE # 1039
0026         ?C0196:
                                           ; SOURCE LINE # 1042
0026 120000      E     LCALL   GetVPN
0029 7800        R     MOV     R0,#LOW vpn
002B EE                MOV     A,R6
002C F2                MOVX    @R0,A
002D 08                INC     R0
002E EF                MOV     A,R7
002F F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1043
0030 120000      E     LCALL   GetVSYNCPulse
0033 120000      R     LCALL   L?0483
                                           ; SOURCE LINE # 1046
0036 7800        R     MOV     R0,#LOW vpn
0038 120000      R     LCALL   L?0409
003B D3                SETB    C
003C EB                MOV     A,R3
003D 9F                SUBB    A,R7
003E EA                MOV     A,R2
003F 9E                SUBB    A,R6
0040 4012              JC      ?C0198
                                           ; SOURCE LINE # 1047
0042 120000      E     LCALL   InvertVSYNCPolarity
                                           ; SOURCE LINE # 1048
0045 7F03              MOV     R7,#03H
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 138 

0047 120000      E     LCALL   _MeasureAndWait
                                           ; SOURCE LINE # 1049
004A 120000      E     LCALL   GetVSYNCPulse
004D 7800        R     MOV     R0,#LOW sync
004F EE                MOV     A,R6
0050 F2                MOVX    @R0,A
0051 08                INC     R0
0052 EF                MOV     A,R7
0053 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1053
0054         ?C0198:
                                           ; SOURCE LINE # 1060
0054 120000      R     LCALL   L?0476
                                           ; SOURCE LINE # 1061
0057 120000      E     LCALL   GetHSYNCPulse
005A 120000      R     LCALL   L?0483
                                           ; SOURCE LINE # 1068
005D 7800        R     MOV     R0,#LOW hpn
005F 120000      R     LCALL   L?0409
0062 C3                CLR     C
0063 EB                MOV     A,R3
0064 9F                SUBB    A,R7
0065 EA                MOV     A,R2
0066 9E                SUBB    A,R6
0067 402F              JC      ?C0199
                                           ; SOURCE LINE # 1069
0069 7D40              MOV     R5,#040H
006B 7F8A              MOV     R7,#08AH
006D 120000      E     LCALL   _ReadI2C
;---- Variable 'SyncPol' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1070
0070 EF                MOV     A,R7
0071 30E205            JNB     ACC.2,?C0200
                                           ; SOURCE LINE # 1071
0074 54FB              ANL     A,#0FBH
0076 FF                MOV     R7,A
0077 8004              SJMP    ?C0201
0079         ?C0200:
                                           ; SOURCE LINE # 1072
0079 EF                MOV     A,R7
007A 4404              ORL     A,#04H
007C FF                MOV     R7,A
007D         ?C0201:
                                           ; SOURCE LINE # 1073
007D AB07              MOV     R3,AR7
007F 7D40              MOV     R5,#040H
0081 7F8A              MOV     R7,#08AH
0083 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 1075
0086 7F03              MOV     R7,#03H
0088 120000      E     LCALL   _MeasureAndWait
                                           ; SOURCE LINE # 1076
008B 120000      E     LCALL   GetHSYNCPulse
008E 7800        R     MOV     R0,#LOW sync
0090 EE                MOV     A,R6
0091 F2                MOVX    @R0,A
0092 08                INC     R0
0093 EF                MOV     A,R7
0094 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1077
0095 120000      R     LCALL   L?0476
                                           ; SOURCE LINE # 1078
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 139 

0098         ?C0199:
                                           ; SOURCE LINE # 1081
0098 120000      E     LCALL   GetPPF
009B C004              PUSH    AR4
009D A905              MOV     R1,AR5
009F AA06              MOV     R2,AR6
00A1 AB07              MOV     R3,AR7
00A3 7800        R     MOV     R0,#LOW hpn
00A5 120000      R     LCALL   L?0411
00A8 E4                CLR     A
00A9 FC                MOV     R4,A
00AA FD                MOV     R5,A
00AB D000              POP     AR0
00AD 120000      E     LCALL   ?C?LADD
00B0 C006              PUSH    AR6
00B2 C007              PUSH    AR7
00B4 7800        R     MOV     R0,#LOW hpn
00B6 120000      R     LCALL   L?0402
00B9 D007              POP     AR7
00BB D006              POP     AR6
00BD 120000      E     LCALL   ?C?ULDIV
00C0 8F00        E     MOV     IHF+03H,R7
00C2 8E00        E     MOV     IHF+02H,R6
00C4 8D00        E     MOV     IHF+01H,R5
00C6 8C00        E     MOV     IHF,R4
                                           ; SOURCE LINE # 1084
00C8 120000      E     LCALL   GetVPN
00CB 7800        R     MOV     R0,#LOW vpn
                                           ; SOURCE LINE # 1085
00CD 120000      R     LCALL   L?0410
00D0 120000      R     LCALL   L?0443
00D3 C006              PUSH    AR6
00D5 C007              PUSH    AR7
00D7 18                DEC     R0
00D8 120000      R     LCALL   L?0402
00DB D007              POP     AR7
00DD D006              POP     AR6
00DF 120000      E     LCALL   ?C?ULDIV
00E2 8E00        E     MOV     IVF,R6
00E4 8F00        E     MOV     IVF+01H,R7
                                           ; SOURCE LINE # 1095
00E6 7800        R     MOV     R0,#LOW en
00E8 E2                MOVX    A,@R0
00E9 7800        E     MOV     R0,#LOW DebugLevel
00EB F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1096
00EC 7800        R     MOV     R0,#LOW vpn
00EE E2                MOVX    A,@R0
00EF FE                MOV     R6,A
00F0 08                INC     R0
00F1 E2                MOVX    A,@R0
00F2 FF                MOV     R7,A
                                           ; SOURCE LINE # 1097
00F3         ?C0197:
00F3 22                RET     
00F4         L?0476:
00F4 120000      E     LCALL   GetHPN
00F7 7800        R     MOV     R0,#LOW hpn
00F9 EE                MOV     A,R6
00FA F2                MOVX    @R0,A
00FB 08                INC     R0
00FC EF                MOV     A,R7
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 140 

00FD F2                MOVX    @R0,A
00FE 22                RET     
             ; FUNCTION _GetHpnVpn (END)

             ; FUNCTION GetVerticalActiveArea (BEGIN)
                                           ; SOURCE LINE # 1102
                                           ; SOURCE LINE # 1103
                                           ; SOURCE LINE # 1107
0000 E4                CLR     A
0001 7800        R     MOV     R0,#LOW off
0003 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1114
0004 120000      R     LCALL   IsDTVInput
0007 EF                MOV     A,R7
0008 605A              JZ      ?C0202
                                           ; SOURCE LINE # 1120
000A 120000      R     LCALL   L?0431
000D 900000      E     MOV     DPTR,#PCMDATA+0FH
0010 120000      R     LCALL   L?0385
0013 120000      E     LCALL   _SetVactiveStart
                                           ; SOURCE LINE # 1122
0016 7800        R     MOV     R0,#LOW PcMode
0018 E2                MOVX    A,@R0
0019 F9                MOV     R1,A
001A 24E1              ADD     A,#0E1H
001C 6008              JZ      ?C0204
001E 24F7              ADD     A,#0F7H
0020 6006              JZ      ?C0205
0022 24FD              ADD     A,#0FDH
0024 7010              JNZ     ?C0207
                                           ; SOURCE LINE # 1123
0026         ?C0204:
0026 8007              SJMP    ?C0360
                                           ; SOURCE LINE # 1124
0028         ?C0205:
0028 7800        R     MOV     R0,#LOW off
002A 7402              MOV     A,#02H
002C F2                MOVX    @R0,A
002D 800B              SJMP    ?C0203
                                           ; SOURCE LINE # 1125
002F         ?C0360:
002F 7800        R     MOV     R0,#LOW off
0031 7404              MOV     A,#04H
0033 F2                MOVX    @R0,A
0034 8004              SJMP    ?C0203
                                           ; SOURCE LINE # 1126
0036         ?C0207:
0036 E4                CLR     A
0037 7800        R     MOV     R0,#LOW off
0039 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1127
003A         ?C0203:
                                           ; SOURCE LINE # 1128
003A 75F016            MOV     B,#016H
003D E9                MOV     A,R1
003E 900000      E     MOV     DPTR,#PCMDATA+03H
0041 120000      E     LCALL   ?C?OFFXADD
0044 7800        R     MOV     R0,#LOW off
0046 E2                MOVX    A,@R0
0047 FF                MOV     R7,A
0048 33                RLC     A
0049 95E0              SUBB    A,ACC
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 141 

004B FE                MOV     R6,A
004C 120000      R     LCALL   L?0423
004F 3E                ADDC    A,R6
0050 CF                XCH     A,R7
0051 2414              ADD     A,#014H
0053 CF                XCH     A,R7
0054 3400              ADDC    A,#00H
0056 FE                MOV     R6,A
0057 120000      E     LCALL   _SetVactiveLen
                                           ; SOURCE LINE # 1130
005A 120000      R     LCALL   L?0432
005D 900000      E     MOV     DPTR,#PCMDATA+0FH
0060 120000      R     LCALL   L?0385
0063 22                RET     
                                           ; SOURCE LINE # 1131
0064         ?C0202:
                                           ; SOURCE LINE # 1148
0064 120000      E     LCALL   GetVstart
0067 7800        R     MOV     R0,#LOW vstart
0069 EE                MOV     A,R6
006A F2                MOVX    @R0,A
006B 08                INC     R0
006C EF                MOV     A,R7
006D F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1149
006E 120000      E     LCALL   GetVend
0071 7800        R     MOV     R0,#LOW vend
0073 EE                MOV     A,R6
0074 F2                MOVX    @R0,A
0075 08                INC     R0
0076 EF                MOV     A,R7
0077 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1156
0078 7800        R     MOV     R0,#LOW PcMode
007A E2                MOVX    A,@R0
007B FF                MOV     R7,A
007C C3                CLR     C
007D 9416              SUBB    A,#016H
007F 403A              JC      ?C0209
0081 EF                MOV     A,R7
0082 D3                SETB    C
0083 9418              SUBB    A,#018H
0085 5034              JNC     ?C0209
                                           ; SOURCE LINE # 1157
0087 120000      R     LCALL   L?0468
008A 08                INC     R0
008B E2                MOVX    A,@R0
008C FC                MOV     R4,A
008D 08                INC     R0
008E E2                MOVX    A,@R0
008F FD                MOV     R5,A
0090 9F                SUBB    A,R7
0091 EC                MOV     A,R4
0092 9E                SUBB    A,R6
0093 4026              JC      ?C0209
0095 EF                MOV     A,R7
0096 2403              ADD     A,#03H
0098 FF                MOV     R7,A
0099 E4                CLR     A
009A 3E                ADDC    A,R6
009B FE                MOV     R6,A
009C D3                SETB    C
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 142 

009D ED                MOV     A,R5
009E 9F                SUBB    A,R7
009F EC                MOV     A,R4
00A0 9E                SUBB    A,R6
00A1 5018              JNC     ?C0209
                                           ; SOURCE LINE # 1158
00A3 18                DEC     R0
00A4 E2                MOVX    A,@R0
00A5 FE                MOV     R6,A
00A6 08                INC     R0
00A7 E2                MOVX    A,@R0
00A8 FF                MOV     R7,A
00A9 7800        R     MOV     R0,#LOW vstart
00AB EE                MOV     A,R6
00AC F2                MOVX    @R0,A
00AD FE                MOV     R6,A
00AE 08                INC     R0
00AF EF                MOV     A,R7
00B0 F2                MOVX    @R0,A
00B1 FF                MOV     R7,A
                                           ; SOURCE LINE # 1159
00B2 120000      R     LCALL   L?0386
00B5 120000      R     LCALL   L?0423
00B8 120000      R     LCALL   L?0458
                                           ; SOURCE LINE # 1163
                                           ; SOURCE LINE # 1164
00BB         ?C0209:
                                           ; SOURCE LINE # 1171
00BB 120000      R     LCALL   L?0432
00BE 900000      E     MOV     DPTR,#PCMDATA+0FH
00C1 120000      R     LCALL   L?0385
00C4 241E              ADD     A,#01EH
00C6 7800        R     MOV     R0,#LOW vstart
00C8 120000      R     LCALL   L?0455
00CB 5008              JNC     ?C0212
00CD EF                MOV     A,R7
00CE 24E2              ADD     A,#0E2H
00D0 120000      R     LCALL   L?0444
00D3 5017              JNC     ?C0211
00D5         ?C0212:
                                           ; SOURCE LINE # 1177
00D5 7800        R     MOV     R0,#LOW PcMode
00D7 E2                MOVX    A,@R0
00D8 FF                MOV     R7,A
00D9 120000      E     LCALL   _GetVactiveStartEE
00DC 7800        R     MOV     R0,#LOW vstart
00DE EE                MOV     A,R6
00DF F2                MOVX    @R0,A
00E0 08                INC     R0
00E1 EF                MOV     A,R7
00E2 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1178
00E3 120000      R     LCALL   L?0387
00E6 120000      R     LCALL   L?0423
00E9 120000      R     LCALL   L?0458
                                           ; SOURCE LINE # 1179
00EC         ?C0211:
                                           ; SOURCE LINE # 1190
00EC 7800        R     MOV     R0,#LOW PcMode
00EE E2                MOVX    A,@R0
00EF B40209            CJNE    A,#02H,?C0213
00F2 900000      E     MOV     DPTR,#PCMDATA+03BH
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 143 

00F5 E4                CLR     A
00F6 7800        R     MOV     R0,#LOW vstart
00F8 120000      R     LCALL   L?0445
00FB         ?C0213:
                                           ; SOURCE LINE # 1203
00FB 120000      R     LCALL   L?0468
00FE 120000      E     LCALL   _SetVactiveStart
                                           ; SOURCE LINE # 1217
0101 7800        R     MOV     R0,#LOW vstart
0103 120000      R     LCALL   L?0397
0106 7800        R     MOV     R0,#LOW vend+01H
0108 120000      R     LCALL   L?0484
010B CF                XCH     A,R7
010C 3400              ADDC    A,#00H
010E FE                MOV     R6,A
010F 120000      E     LCALL   _SetVactiveLen
                                           ; SOURCE LINE # 1225
0112 120000      R     LCALL   L?0469
                                           ; SOURCE LINE # 1226
0115         ?C0208:
0115 22                RET     
             ; FUNCTION GetVerticalActiveArea (END)

             ; FUNCTION GetHorizontalActiveArea (BEGIN)
                                           ; SOURCE LINE # 1230
                                           ; SOURCE LINE # 1231
                                           ; SOURCE LINE # 1257
0000 120000      E     LCALL   GetHstart
0003 7800        R     MOV     R0,#LOW hstart
0005 EE                MOV     A,R6
0006 F2                MOVX    @R0,A
0007 08                INC     R0
0008 EF                MOV     A,R7
0009 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1262
000A 120000      R     LCALL   GetCoarseValue
000D 7800        R     MOV     R0,#LOW LastHPN
000F EE                MOV     A,R6
0010 F2                MOVX    @R0,A
0011 08                INC     R0
0012 EF                MOV     A,R7
0013 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1263
0014 7800        R     MOV     R0,#LOW hend
0016 EE                MOV     A,R6
0017 F2                MOVX    @R0,A
0018 08                INC     R0
0019 EF                MOV     A,R7
001A F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1269
001B 7800        R     MOV     R0,#LOW PcMode
001D E2                MOVX    A,@R0
001E F9                MOV     R1,A
001F 75F016            MOV     B,#016H
0022 900000      E     MOV     DPTR,#PCMDATA+0DH
0025 120000      R     LCALL   L?0385
0028 2464              ADD     A,#064H
002A 7800        R     MOV     R0,#LOW hstart
002C 120000      R     LCALL   L?0455
002F 5008              JNC     ?C0215
0031 EF                MOV     A,R7
0032 249C              ADD     A,#09CH
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 144 

0034 120000      R     LCALL   L?0444
0037 5023              JNC     ?C0214
0039         ?C0215:
                                           ; SOURCE LINE # 1275
0039 AF01              MOV     R7,AR1
003B 120000      E     LCALL   _GetHactiveStartEE
003E 7800        R     MOV     R0,#LOW hstart
0040 EE                MOV     A,R6
0041 F2                MOVX    @R0,A
0042 08                INC     R0
0043 EF                MOV     A,R7
0044 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1276
0045 120000      R     LCALL   L?0398
0048 7401              MOV     A,#01H
004A 93                MOVC    A,@A+DPTR
004B 2F                ADD     A,R7
004C FD                MOV     R5,A
004D E4                CLR     A
004E 93                MOVC    A,@A+DPTR
004F 3E                ADDC    A,R6
0050 CD                XCH     A,R5
0051 2401              ADD     A,#01H
0053 7800        R     MOV     R0,#LOW hend+01H
0055 F2                MOVX    @R0,A
0056 E4                CLR     A
0057 3D                ADDC    A,R5
0058 18                DEC     R0
0059 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1278
                                           ; SOURCE LINE # 1279
                                           ; SOURCE LINE # 1281
005A 803E              SJMP    ?C0361
                                           ; SOURCE LINE # 1282
005C         ?C0214:
                                           ; SOURCE LINE # 1289
005C 120000      E     LCALL   IsBypassmode
005F EF                MOV     A,R7
0060 7031              JNZ     ?C0217
                                           ; SOURCE LINE # 1304
0062 7800        R     MOV     R0,#LOW PcMode
0064 E2                MOVX    A,@R0
0065 FF                MOV     R7,A
0066 D3                SETB    C
0067 9409              SUBB    A,#09H
0069 5007              JNC     ?C0218
                                           ; SOURCE LINE # 1305
006B 7800        R     MOV     R0,#LOW hstart+01H
006D E2                MOVX    A,@R0
006E 24FF              ADD     A,#0FFH
0070 8016              SJMP    ?C0363
0072         ?C0218:
                                           ; SOURCE LINE # 1306
0072 EF                MOV     A,R7
0073 D3                SETB    C
0074 940F              SUBB    A,#0FH
0076 5007              JNC     ?C0220
                                           ; SOURCE LINE # 1307
0078 7800        R     MOV     R0,#LOW hstart+01H
007A E2                MOVX    A,@R0
007B 24FE              ADD     A,#0FEH
007D         ?C0362:
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 145 

007D 8009              SJMP    ?C0363
007F         ?C0220:
                                           ; SOURCE LINE # 1312
007F EF                MOV     A,R7
0080 B41108            CJNE    A,#011H,?C0219
                                           ; SOURCE LINE # 1313
0083 7800        R     MOV     R0,#LOW hstart+01H
0085 E2                MOVX    A,@R0
0086 24FC              ADD     A,#0FCH
0088         ?C0363:
0088 120000      R     LCALL   L?0481
008B         ?C0219:
                                           ; SOURCE LINE # 1315
008B 7800        R     MOV     R0,#LOW hend+01H
008D E2                MOVX    A,@R0
008E 24FE              ADD     A,#0FEH
0090 120000      R     LCALL   L?0482
                                           ; SOURCE LINE # 1319
0093         ?C0217:
                                           ; SOURCE LINE # 1337
0093 7800        R     MOV     R0,#LOW hstart
0095 E2                MOVX    A,@R0
0096 FE                MOV     R6,A
0097 08                INC     R0
0098 E2                MOVX    A,@R0
0099 FF                MOV     R7,A
009A         ?C0361:
009A 120000      E     LCALL   _SetHactiveStart
                                           ; SOURCE LINE # 1338
009D 7800        R     MOV     R0,#LOW hend
009F E2                MOVX    A,@R0
00A0 FE                MOV     R6,A
00A1 08                INC     R0
00A2 E2                MOVX    A,@R0
00A3 FF                MOV     R7,A
00A4 120000      E     LCALL   _SetHactiveEnd
                                           ; SOURCE LINE # 1344
00A7 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 1345
00A9         ?C0216:
00A9 22                RET     
             ; FUNCTION GetHorizontalActiveArea (END)

             ; FUNCTION _SetVValueForPanel (BEGIN)
                                           ; SOURCE LINE # 1351
0000 7800        R     MOV     R0,#LOW VIstart
0002 EE                MOV     A,R6
0003 F2                MOVX    @R0,A
0004 08                INC     R0
0005 EF                MOV     A,R7
0006 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1352
                                           ; SOURCE LINE # 1356
0007 120000      E     LCALL   GetVSYNCPulse
000A 7800        R     MOV     R0,#LOW VIsync
000C EE                MOV     A,R6
000D F2                MOVX    @R0,A
000E 08                INC     R0
000F EF                MOV     A,R7
0010 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1357
0011 120000      E     LCALL   GetPVR
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 146 

0014 7800        R     MOV     R0,#LOW PVR
0016 EE                MOV     A,R6
0017 F2                MOVX    @R0,A
0018 08                INC     R0
0019 EF                MOV     A,R7
001A F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1361
001B 120000      E     LCALL   GetVactiveStart
001E C006              PUSH    AR6
0020 C007              PUSH    AR7
0022 120000      E     LCALL   GetVend
0025 AC06              MOV     R4,AR6
0027 AD07              MOV     R5,AR7
0029 D007              POP     AR7
002B D006              POP     AR6
002D 7800        R     MOV     R0,#LOW VAN+01H
002F 120000      R     LCALL   L?0450
                                           ; SOURCE LINE # 1363
0032 7DB8              MOV     R5,#0B8H
0034 7F8A              MOV     R7,#08AH
0036 120000      E     LCALL   _ReadI2C
0039 7800        R     MOV     R0,#LOW VOsync
003B EF                MOV     A,R7
003C F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1365
003D 7800        R     MOV     R0,#LOW VAN
003F E2                MOVX    A,@R0
0040 FE                MOV     R6,A
0041 08                INC     R0
0042 E2                MOVX    A,@R0
0043 FF                MOV     R7,A
0044 D3                SETB    C
0045 7800        R     MOV     R0,#LOW VIsync+01H
0047 E2                MOVX    A,@R0
0048 9F                SUBB    A,R7
0049 18                DEC     R0
004A E2                MOVX    A,@R0
004B 9E                SUBB    A,R6
004C 4004              JC      ?C0223
004E E4                CLR     A
004F F2                MOVX    @R0,A
0050 08                INC     R0
0051 F2                MOVX    @R0,A
0052         ?C0223:
                                           ; SOURCE LINE # 1366
0052 7800        R     MOV     R0,#LOW VIsync
0054 120000      R     LCALL   L?0397
0057 7800        R     MOV     R0,#LOW VIstart+01H
0059 120000      R     LCALL   L?0484
005C 7800        R     MOV     R0,#LOW dtmp+01H
005E F2                MOVX    @R0,A
005F E4                CLR     A
0060 3F                ADDC    A,R7
0061 18                DEC     R0
0062 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1367
0063 7D63              MOV     R5,#063H
0065 7F8A              MOV     R7,#08AH
0067 120000      E     LCALL   _ReadI2C
006A E4                CLR     A
006B 7800        R     MOV     R0,#LOW VScale
006D F2                MOVX    @R0,A
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 147 

006E EF                MOV     A,R7
006F 540C              ANL     A,#0CH
0071 08                INC     R0
0072 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1368
0073 18                DEC     R0
0074 E2                MOVX    A,@R0
0075 FE                MOV     R6,A
0076 08                INC     R0
0077 E2                MOVX    A,@R0
0078 7806              MOV     R0,#06H
007A         ?C0348:
007A C3                CLR     C
007B 33                RLC     A
007C CE                XCH     A,R6
007D 33                RLC     A
007E CE                XCH     A,R6
007F D8F9              DJNZ    R0,?C0348
0081 7900        R     MOV     R1,#LOW VScale+01H
0083 F3                MOVX    @R1,A
0084 EE                MOV     A,R6
0085 19                DEC     R1
0086 F3                MOVX    @R1,A
                                           ; SOURCE LINE # 1369
0087 7D62              MOV     R5,#062H
0089 7F8A              MOV     R7,#08AH
008B 120000      E     LCALL   _ReadI2C
008E 7800        R     MOV     R0,#LOW VScale+01H
0090 E2                MOVX    A,@R0
0091 2F                ADD     A,R7
0092 120000      R     LCALL   L?0457
                                           ; SOURCE LINE # 1370
0095 7800        R     MOV     R0,#LOW dtmp+01H
0097 E2                MOVX    A,@R0
0098 F8                MOV     R0,A
0099 E4                CLR     A
009A 7900        R     MOV     R1,#LOW dtmp+01H
009C F3                MOVX    @R1,A
009D E8                MOV     A,R0
009E 19                DEC     R1
009F F3                MOVX    @R1,A
                                           ; SOURCE LINE # 1371
00A0 7800        R     MOV     R0,#LOW VScale
00A2 E2                MOVX    A,@R0
00A3 FC                MOV     R4,A
00A4 08                INC     R0
00A5 E2                MOVX    A,@R0
00A6 FD                MOV     R5,A
00A7 EC                MOV     A,R4
00A8 C3                CLR     C
00A9 13                RRC     A
00AA FE                MOV     R6,A
00AB ED                MOV     A,R5
00AC 13                RRC     A
00AD FF                MOV     R7,A
00AE 7800        R     MOV     R0,#LOW dtmp+01H
00B0 120000      R     LCALL   L?0462
                                           ; SOURCE LINE # 1372
00B3 E2                MOVX    A,@R0
00B4 FE                MOV     R6,A
00B5 08                INC     R0
00B6 E2                MOVX    A,@R0
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 148 

00B7 FF                MOV     R7,A
00B8 120000      E     LCALL   ?C?UIDIV
00BB 7800        R     MOV     R0,#LOW dtmp
00BD EE                MOV     A,R6
00BE F2                MOVX    @R0,A
00BF 08                INC     R0
00C0 EF                MOV     A,R7
00C1 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1373
00C2 7DBE              MOV     R5,#0BEH
00C4 7F8A              MOV     R7,#08AH
00C6 120000      E     LCALL   _ReadI2C
00C9 EF                MOV     A,R7
00CA 7800        R     MOV     R0,#LOW dtmp
00CC 30E107            JNB     ACC.1,?C0224
                                           ; SOURCE LINE # 1374
00CF 120000      R     LCALL   L?0485
00D2 08                INC     R0
00D3 F2                MOVX    @R0,A
00D4 8007              SJMP    ?C0225
00D6         ?C0224:
                                           ; SOURCE LINE # 1376
00D6 120000      R     LCALL   L?0485
00D9 24FC              ADD     A,#0FCH
00DB 08                INC     R0
00DC F2                MOVX    @R0,A
00DD         ?C0225:
                                           ; SOURCE LINE # 1418
00DD 7800        R     MOV     R0,#LOW VOback
00DF E2                MOVX    A,@R0
00E0 FF                MOV     R7,A
00E1 120000      E     LCALL   _SetVBackPorch
                                           ; SOURCE LINE # 1419
00E4 7800        R     MOV     R0,#LOW VOback
00E6 E2                MOVX    A,@R0
00E7 FF                MOV     R7,A
00E8 18                DEC     R0
00E9 E2                MOVX    A,@R0
00EA 2F                ADD     A,R7
00EB FF                MOV     R7,A
00EC E4                CLR     A
00ED 33                RLC     A
00EE FE                MOV     R6,A
00EF 7800        R     MOV     R0,#LOW PVR+01H
00F1 E2                MOVX    A,@R0
00F2 2F                ADD     A,R7
00F3 FF                MOV     R7,A
00F4 18                DEC     R0
00F5 E2                MOVX    A,@R0
00F6 3E                ADDC    A,R6
00F7 CF                XCH     A,R7
00F8 240A              ADD     A,#0AH
00FA CF                XCH     A,R7
00FB 3400              ADDC    A,#00H
00FD FE                MOV     R6,A
00FE 020000      E     LJMP    _SetPVP
             ; FUNCTION _SetVValueForPanel (END)

             ; FUNCTION SetHValueForPanel (BEGIN)
                                           ; SOURCE LINE # 1470
                                           ; SOURCE LINE # 1471
                                           ; SOURCE LINE # 1472
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 149 

0000 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 1473
0002         ?C0227:
0002 22                RET     
             ; FUNCTION SetHValueForPanel (END)

             ; FUNCTION GetActiveRegion (BEGIN)
                                           ; SOURCE LINE # 1479
                                           ; SOURCE LINE # 1480
                                           ; SOURCE LINE # 1487
0000 E4                CLR     A
0001 7800        R     MOV     R0,#LOW cDelta
0003 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1497
0004 FD                MOV     R5,A
0005 7C04              MOV     R4,#04H
0007 7F01              MOV     R7,#01H
0009 FE                MOV     R6,A
000A 120000      E     LCALL   _SetMeasureWindowV
                                           ; SOURCE LINE # 1498
000D 7F03              MOV     R7,#03H
000F 120000      E     LCALL   _MeasureAndWait
                                           ; SOURCE LINE # 1501
0012 120000      E     LCALL   GetPVR
0015 120000      R     LCALL   L?0387
0018 7401              MOV     A,#01H
001A 93                MOVC    A,@A+DPTR
001B B50708            CJNE    A,AR7,?C0229
001E E4                CLR     A
001F 93                MOVC    A,@A+DPTR
0020 B50603            CJNE    A,AR6,?C0229
0023 200011      R     JB      Flag4Bypass,?C0228
0026         ?C0229:
                                           ; SOURCE LINE # 1502
0026 120000      E     LCALL   GetHPN
0029 120000      R     LCALL   _ConvertBasedOnInput
002C 120000      R     LCALL   L?0470
                                           ; SOURCE LINE # 1503
002F 120000      E     LCALL   GetHSYNCPulse
0032 120000      R     LCALL   _ConvertBasedOnInput
                                           ; SOURCE LINE # 1504
0035 8009              SJMP    ?C0364
0037         ?C0228:
                                           ; SOURCE LINE # 1505
                                           ; SOURCE LINE # 1506
0037 120000      E     LCALL   GetCoarse
003A 120000      R     LCALL   L?0470
                                           ; SOURCE LINE # 1507
003D 120000      E     LCALL   GetHSYNCPulse
0040         ?C0364:
0040 7800        R     MOV     R0,#LOW sync
0042 EE                MOV     A,R6
0043 F2                MOVX    @R0,A
0044 08                INC     R0
0045 EF                MOV     A,R7
0046 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1508
0047         ?C0230:
                                           ; SOURCE LINE # 1512
0047 7800        R     MOV     R0,#LOW sync
0049 E2                MOVX    A,@R0
004A FE                MOV     R6,A
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 150 

004B 08                INC     R0
004C E2                MOVX    A,@R0
004D FF                MOV     R7,A
004E 18                DEC     R0
004F E2                MOVX    A,@R0
0050 FC                MOV     R4,A
0051 08                INC     R0
0052 E2                MOVX    A,@R0
0053 FD                MOV     R5,A
0054 7800        R     MOV     R0,#LOW period+01H
0056 E2                MOVX    A,@R0
0057 2D                ADD     A,R5
0058 FD                MOV     R5,A
0059 18                DEC     R0
005A E2                MOVX    A,@R0
005B 3C                ADDC    A,R4
005C FC                MOV     R4,A
005D 120000      E     LCALL   _SetMeasureWindowH
                                           ; SOURCE LINE # 1515
0060 120000      E     LCALL   GetVPN
0063 120000      R     LCALL   L?0471
                                           ; SOURCE LINE # 1516
0066 120000      E     LCALL   GetVSYNCPulse
0069 7800        R     MOV     R0,#LOW sync
006B EE                MOV     A,R6
006C F2                MOVX    @R0,A
006D 08                INC     R0
006E EF                MOV     A,R7
006F F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1517
0070 120000      R     LCALL   L?0453
                                           ; SOURCE LINE # 1520
0073 7F03              MOV     R7,#03H
0075 120000      E     LCALL   _MeasureAndWait
                                           ; SOURCE LINE # 1524
0078 120000      R     LCALL   GetVerticalActiveArea
;---- Variable 'vstart' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 1527
007B 120000      R     LCALL   L?0453
                                           ; SOURCE LINE # 1534
007E 120000      E     LCALL   GetWideModeEE
0081 120000      E     LCALL   _Set4WideScreen
                                           ; SOURCE LINE # 1574
0084 120000      E     LCALL   GetVactiveStart
                                           ; SOURCE LINE # 1576
0087 120000      R     LCALL   _SetVValueForPanel
                                           ; SOURCE LINE # 1580
008A 120000      E     LCALL   GetPPF
008D 7800        R     MOV     R0,#LOW ppf
008F 120000      E     LCALL   ?C?LSTPDATA
                                           ; SOURCE LINE # 1602
0092 120000      R     LCALL   GetHorizontalActiveArea
                                           ; SOURCE LINE # 1604
0095 120000      E     LCALL   GetPVR
0098 120000      R     LCALL   L?0387
009B 7401              MOV     A,#01H
009D 93                MOVC    A,@A+DPTR
009E B5070B            CJNE    A,AR7,?C0232
00A1 E4                CLR     A
00A2 93                MOVC    A,@A+DPTR
00A3 B50606            CJNE    A,AR6,?C0232
00A6 300003      R     JNB     Flag4Bypass,$ + 6H
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 151 

00A9 020000      R     LJMP    ?C0231
00AC         ?C0232:
                                           ; SOURCE LINE # 1605
00AC 120000      E     LCALL   GetPHR
00AF E4                CLR     A
00B0 FC                MOV     R4,A
00B1 FD                MOV     R5,A
00B2 7800        R     MOV     R0,#LOW pres
00B4 120000      E     LCALL   ?C?LSTPDATA
                                           ; SOURCE LINE # 1609
00B7 7800        R     MOV     R0,#LOW PcMode
00B9 E2                MOVX    A,@R0
00BA D3                SETB    C
00BB 9403              SUBB    A,#03H
00BD 506B              JNC     ?C0233
                                           ; SOURCE LINE # 1610
                                           ; SOURCE LINE # 1611
                                           ; SOURCE LINE # 1612
00BF 120000      R     LCALL   L?0413
00C2 7003              JNZ     ?C0351
00C4 E4                CLR     A
00C5 93                MOVC    A,@A+DPTR
00C6 6E                XRL     A,R6
00C7         ?C0351:
00C7 700C              JNZ     ?C0234
                                           ; SOURCE LINE # 1613
00C9 75F016            MOV     B,#016H
00CC ED                MOV     A,R5
00CD 900000      E     MOV     DPTR,#PCMDATA+01H
00D0 120000      R     LCALL   L?0385
00D3 8028              SJMP    ?C0365
00D5         ?C0234:
                                           ; SOURCE LINE # 1615
                                           ; SOURCE LINE # 1616
00D5 120000      R     LCALL   L?0381
00D8 120000      R     LCALL   L?0472
00DB 5005              JNC     ?C0236
                                           ; SOURCE LINE # 1617
                                           ; SOURCE LINE # 1618
00DD C3                CLR     C
00DE EF                MOV     A,R7
00DF 9D                SUBB    A,R5
                                           ; SOURCE LINE # 1620
00E0 800F              SJMP    ?C0366
00E2         ?C0236:
                                           ; SOURCE LINE # 1621
00E2 120000      R     LCALL   L?0382
00E5 D3                SETB    C
00E6 ED                MOV     A,R5
00E7 9F                SUBB    A,R7
00E8 EC                MOV     A,R4
00E9 9E                SUBB    A,R6
00EA 4008              JC      ?C0237
                                           ; SOURCE LINE # 1622
                                           ; SOURCE LINE # 1623
00EC 7800        R     MOV     R0,#LOW LastHPN
00EE 08                INC     R0
00EF E2                MOVX    A,@R0
00F0 9F                SUBB    A,R7
00F1         ?C0366:
00F1 7800        R     MOV     R0,#LOW cDelta
00F3 F2                MOVX    @R0,A
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 152 

                                           ; SOURCE LINE # 1625
00F4         ?C0237:
                                           ; SOURCE LINE # 1626
00F4 120000      R     LCALL   L?0398
00F7 120000      R     LCALL   L?0422
00FA 3400              ADDC    A,#00H
00FC FE                MOV     R6,A
00FD         ?C0365:
00FD E4                CLR     A
00FE FC                MOV     R4,A
00FF FD                MOV     R5,A
0100 FB                MOV     R3,A
0101 FA                MOV     R2,A
0102 120000      R     LCALL   L?0406
0105 C004              PUSH    AR4
0107 C005              PUSH    AR5
0109 C006              PUSH    AR6
010B C007              PUSH    AR7
010D E4                CLR     A
010E 7B02              MOV     R3,#02H
0110 FA                MOV     R2,A
0111 F9                MOV     R1,A
0112 F8                MOV     R0,A
0113 C000              PUSH    AR0
0115 7800        R     MOV     R0,#LOW pres
0117 120000      E     LCALL   ?C?LLDPDATA
011A D000              POP     AR0
011C 120000      E     LCALL   ?C?ULDIV
011F D003              POP     AR3
0121 D002              POP     AR2
0123 D001              POP     AR1
0125 D000              POP     AR0
0127 120000      R     LCALL   L?0446
                                           ; SOURCE LINE # 1627
                                           ; SOURCE LINE # 1628
012A         ?C0233:
                                           ; SOURCE LINE # 1629
012A 7800        R     MOV     R0,#LOW PcMode
012C E2                MOVX    A,@R0
012D FF                MOV     R7,A
012E D3                SETB    C
012F 9409              SUBB    A,#09H
0131 5007              JNC     ?C0239
                                           ; SOURCE LINE # 1630
                                           ; SOURCE LINE # 1631
0133 75F016            MOV     B,#016H
0136 EF                MOV     A,R7
                                           ; SOURCE LINE # 1632
0137 020000      R     LJMP    ?C0368
013A         ?C0239:
                                           ; SOURCE LINE # 1633
013A 7800        R     MOV     R0,#LOW PcMode
013C E2                MOVX    A,@R0
013D D3                SETB    C
013E 940F              SUBB    A,#0FH
0140 503A              JNC     ?C0241
                                           ; SOURCE LINE # 1634
                                           ; SOURCE LINE # 1635
                                           ; SOURCE LINE # 1636
0142 120000      R     LCALL   L?0413
0145 7003              JNZ     ?C0352
0147 E4                CLR     A
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 153 

0148 93                MOVC    A,@A+DPTR
0149 6E                XRL     A,R6
014A         ?C0352:
014A 7006              JNZ     ?C0242
                                           ; SOURCE LINE # 1640
014C 75F016            MOV     B,#016H
014F ED                MOV     A,R5
0150         ?C0367:
0150 802D              SJMP    ?C0368
0152         ?C0242:
                                           ; SOURCE LINE # 1643
                                           ; SOURCE LINE # 1644
0152 120000      R     LCALL   L?0382
0155 120000      R     LCALL   L?0472
0158 5005              JNC     ?C0244
                                           ; SOURCE LINE # 1645
                                           ; SOURCE LINE # 1646
015A C3                CLR     C
015B EF                MOV     A,R7
015C 9D                SUBB    A,R5
                                           ; SOURCE LINE # 1648
015D 800F              SJMP    ?C0369
015F         ?C0244:
                                           ; SOURCE LINE # 1649
015F 120000      R     LCALL   L?0382
0162 D3                SETB    C
0163 ED                MOV     A,R5
0164 9F                SUBB    A,R7
0165 EC                MOV     A,R4
0166 9E                SUBB    A,R6
0167 4008              JC      ?C0245
                                           ; SOURCE LINE # 1650
                                           ; SOURCE LINE # 1651
0169 7800        R     MOV     R0,#LOW LastHPN
016B 08                INC     R0
016C E2                MOVX    A,@R0
016D 9F                SUBB    A,R7
016E         ?C0369:
016E 7800        R     MOV     R0,#LOW cDelta
0170 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1653
0171         ?C0245:
                                           ; SOURCE LINE # 1654
0171 120000      R     LCALL   L?0399
0174 120000      R     LCALL   L?0422
0177 3400              ADDC    A,#00H
0179 FE                MOV     R6,A
                                           ; SOURCE LINE # 1655
                                           ; SOURCE LINE # 1657
017A 8009              SJMP    ?C0370
017C         ?C0241:
                                           ; SOURCE LINE # 1659
                                           ; SOURCE LINE # 1660
017C 120000      R     LCALL   L?0432
017F         ?C0368:
017F 900000      E     MOV     DPTR,#PCMDATA+01H
0182 120000      R     LCALL   L?0385
0185         ?C0370:
0185 E4                CLR     A
0186 FC                MOV     R4,A
0187 FD                MOV     R5,A
0188 FB                MOV     R3,A
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 154 

0189 FA                MOV     R2,A
018A 120000      R     LCALL   L?0406
018D C004              PUSH    AR4
018F C005              PUSH    AR5
0191 C006              PUSH    AR6
0193 C007              PUSH    AR7
0195 E4                CLR     A
0196 7B02              MOV     R3,#02H
0198 FA                MOV     R2,A
0199 F9                MOV     R1,A
019A F8                MOV     R0,A
019B C000              PUSH    AR0
019D 7800        R     MOV     R0,#LOW pres
019F 120000      E     LCALL   ?C?LLDPDATA
01A2 D000              POP     AR0
01A4 120000      E     LCALL   ?C?ULDIV
01A7 D003              POP     AR3
01A9 D002              POP     AR2
01AB D001              POP     AR1
01AD D000              POP     AR0
01AF 120000      R     LCALL   L?0446
                                           ; SOURCE LINE # 1662
01B2         ?C0240:
                                           ; SOURCE LINE # 1685
01B2 120000      R     LCALL   L?0432
01B5 900000      E     MOV     DPTR,#PCMDATA+01H
01B8 120000      R     LCALL   L?0385
01BB D3                SETB    C
01BC 9400              SUBB    A,#00H
01BE EE                MOV     A,R6
01BF 9404              SUBB    A,#04H
01C1 4041              JC      ?C0248
                                           ; SOURCE LINE # 1686
01C3 E4                CLR     A
01C4 FC                MOV     R4,A
01C5 FD                MOV     R5,A
01C6 7B80              MOV     R3,#080H
01C8 FA                MOV     R2,A
01C9 F9                MOV     R1,A
01CA F8                MOV     R0,A
01CB 120000      E     LCALL   ?C?LMUL
01CE E4                CLR     A
01CF FB                MOV     R3,A
01D0 7A04              MOV     R2,#04H
01D2 F9                MOV     R1,A
01D3 F8                MOV     R0,A
01D4 120000      E     LCALL   ?C?SLDIV
01D7 EF                MOV     A,R7
01D8 2401              ADD     A,#01H
01DA FF                MOV     R7,A
01DB E4                CLR     A
01DC 3E                ADDC    A,R6
01DD FE                MOV     R6,A
01DE E4                CLR     A
01DF 3D                ADDC    A,R5
01E0 FD                MOV     R5,A
01E1 E4                CLR     A
01E2 3C                ADDC    A,R4
01E3 FC                MOV     R4,A
01E4 7800        R     MOV     R0,#LOW scale
01E6 120000      E     LCALL   ?C?LSTPDATA
                                           ; SOURCE LINE # 1687
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 155 

01E9 7800        R     MOV     R0,#LOW scale
01EB 120000      E     LCALL   ?C?LLDPDATA
01EE 120000      E     LCALL   _XscaleD
                                           ; SOURCE LINE # 1691
01F1 7800        R     MOV     R0,#LOW scale
01F3 120000      E     LCALL   ?C?LSTKPDATA
01F6 00                DB      00H
01F7 00                DB      00H
01F8 CC                DB      0CCH
01F9 CC                DB      0CCH
                                           ; SOURCE LINE # 1692
01FA 7800        R     MOV     R0,#LOW scale
01FC 120000      E     LCALL   ?C?LLDPDATA
01FF 120000      E     LCALL   _XscaleU
                                           ; SOURCE LINE # 1696
0202 800E              SJMP    ?C0231
0204         ?C0248:
                                           ; SOURCE LINE # 1700
                                           ; SOURCE LINE # 1702
0204 7800        E     MOV     R0,#LOW WideScreenMode
0206 E2                MOVX    A,@R0
0207 B40108            CJNE    A,#01H,?C0231
                                           ; SOURCE LINE # 1704
020A 7800        R     MOV     R0,#LOW scale
020C 120000      E     LCALL   ?C?LLDPDATA
020F 120000      E     LCALL   _XScale2
                                           ; SOURCE LINE # 1705
                                           ; SOURCE LINE # 1706
0212         ?C0231:
                                           ; SOURCE LINE # 1708
0212 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 1709
0214         ?C0251:
0214 22                RET     
0215         L?0413:
0215 120000      R     LCALL   GetCoarseValue
0218 7800        R     MOV     R0,#LOW LastHPN
021A EE                MOV     A,R6
021B F2                MOVX    @R0,A
021C 08                INC     R0
021D EF                MOV     A,R7
021E F2                MOVX    @R0,A
021F 7800        R     MOV     R0,#LOW PcMode
0221 E2                MOVX    A,@R0
0222 FD                MOV     R5,A
0223 75F016            MOV     B,#016H
0226 900000      E     MOV     DPTR,#PCMDATA+07H
0229 120000      E     LCALL   ?C?OFFXADD
022C 7401              MOV     A,#01H
022E 93                MOVC    A,@A+DPTR
022F 6F                XRL     A,R7
0230 22                RET     
0231         L?0453:
0231 7800        R     MOV     R0,#LOW period
0233 E2                MOVX    A,@R0
0234 FC                MOV     R4,A
0235 08                INC     R0
0236 E2                MOVX    A,@R0
0237 FD                MOV     R5,A
0238 7F01              MOV     R7,#01H
023A 7E00              MOV     R6,#00H
023C 120000      E     LCALL   _SetMeasureWindowV
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 156 

023F 22                RET     
             ; FUNCTION GetActiveRegion (END)

             ; FUNCTION DisplayResultAndSetActiveRange (BEGIN)
                                           ; SOURCE LINE # 1713
                                           ; SOURCE LINE # 1714
                                           ; SOURCE LINE # 1732
0000 120000      E     LCALL   GetHSYNCPulse
0003 C006              PUSH    AR6
0005 C007              PUSH    AR7
0007 120000      E     LCALL   GetHactiveStart
000A AC06              MOV     R4,AR6
000C AD07              MOV     R5,AR7
000E D007              POP     AR7
0010 D006              POP     AR6
0012 120000      R     LCALL   L?0449
                                           ; SOURCE LINE # 1733
0015 120000      E     LCALL   GetCoarse
0018 120000      R     LCALL   L?0399
001B 120000      R     LCALL   L?0452
001E C006              PUSH    AR6
0020 C007              PUSH    AR7
0022 120000      E     LCALL   GetHactiveStart
0025 C3                CLR     C
0026 D0E0              POP     ACC
0028 9F                SUBB    A,R7
0029 FF                MOV     R7,A
002A D0E0              POP     ACC
002C 9E                SUBB    A,R6
002D FE                MOV     R6,A
;---- Variable 'Front' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 1755
002E 7800        R     MOV     R0,#LOW Back
0030 08                INC     R0
0031 E2                MOVX    A,@R0
0032 FD                MOV     R5,A
0033 7800        R     MOV     R0,#LOW HPosCurr
0035 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1756
0036 ED                MOV     A,R5
0037 2F                ADD     A,R7
0038 08                INC     R0
0039 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1758
003A 120000      E     LCALL   GetVSYNCPulse
003D C006              PUSH    AR6
003F C007              PUSH    AR7
0041 120000      E     LCALL   GetVactiveStart
0044 AC06              MOV     R4,AR6
0046 AD07              MOV     R5,AR7
0048 D007              POP     AR7
004A D006              POP     AR6
004C 120000      R     LCALL   L?0449
                                           ; SOURCE LINE # 1760
004F 120000      E     LCALL   GetVPN
0052 120000      R     LCALL   L?0387
0055 120000      R     LCALL   L?0452
0058 C006              PUSH    AR6
005A C007              PUSH    AR7
005C 120000      E     LCALL   GetVactiveStart
005F C3                CLR     C
0060 D0E0              POP     ACC
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 157 

0062 9F                SUBB    A,R7
0063 FF                MOV     R7,A
0064 D0E0              POP     ACC
0066 9E                SUBB    A,R6
0067 FE                MOV     R6,A
                                           ; SOURCE LINE # 1769
0068 7800        R     MOV     R0,#LOW Back
006A 08                INC     R0
006B E2                MOVX    A,@R0
006C 24FC              ADD     A,#0FCH
006E 7800        R     MOV     R0,#LOW VPosCurr
0070 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1771
0071 D3                SETB    C
0072 EF                MOV     A,R7
0073 9400              SUBB    A,#00H
0075 EE                MOV     A,R6
0076 9400              SUBB    A,#00H
0078 5005              JNC     ?C0252
                                           ; SOURCE LINE # 1772
007A E2                MOVX    A,@R0
007B 04                INC     A
007C 08                INC     R0
007D F2                MOVX    @R0,A
007E 22                RET     
007F         ?C0252:
                                           ; SOURCE LINE # 1774
007F 7800        R     MOV     R0,#LOW VPosCurr
0081 E2                MOVX    A,@R0
0082 2F                ADD     A,R7
0083 08                INC     R0
0084 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1776
0085         ?C0254:
0085 22                RET     
             ; FUNCTION DisplayResultAndSetActiveRange (END)

             ; FUNCTION DoMeasurement (BEGIN)
                                           ; SOURCE LINE # 1780
                                           ; SOURCE LINE # 1781
                                           ; SOURCE LINE # 1789
0000 120000      R     LCALL   AutoTuneClock
;---- Variable 'coarse' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 1790
0003 EF                MOV     A,R7
0004 4E                ORL     A,R6
0005 7002              JNZ     ?C0255
                                           ; SOURCE LINE # 1792
                                           ; SOURCE LINE # 1793
0007 8010              SJMP    ?C0371
                                           ; SOURCE LINE # 1794
0009         ?C0255:
                                           ; SOURCE LINE # 1799
0009 120000      R     LCALL   AutoTunePhase
                                           ; SOURCE LINE # 1802
000C 120000      R     LCALL   GetActiveRegion
000F EF                MOV     A,R7
0010 700F              JNZ     ?C0257
                                           ; SOURCE LINE # 1804
0012 7800        R     MOV     R0,#LOW PcMode
0014 E2                MOVX    A,@R0
0015 FF                MOV     R7,A
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 158 

0016 120000      E     LCALL   _GetPCDataEE
                                           ; SOURCE LINE # 1806
0019         ?C0371:
0019 7F03              MOV     R7,#03H
001B 120000      E     LCALL   _MeasureAndWait
                                           ; SOURCE LINE # 1807
001E 7F00              MOV     R7,#00H
0020 22                RET     
                                           ; SOURCE LINE # 1808
0021         ?C0257:
                                           ; SOURCE LINE # 1811
0021 120000      R     LCALL   DisplayResultAndSetActiveRange
                                           ; SOURCE LINE # 1813
0024 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 1814
0026         ?C0256:
0026 22                RET     
             ; FUNCTION DoMeasurement (END)

             ; FUNCTION _RGBModeFieldDetect (BEGIN)
                                           ; SOURCE LINE # 1817
0000 7800        R     MOV     R0,#LOW flag
0002 EF                MOV     A,R7
0003 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1818
                                           ; SOURCE LINE # 1821
0004 7D42              MOV     R5,#042H
0006 7F8A              MOV     R7,#08AH
0008 120000      E     LCALL   _ReadI2C
;---- Variable 'val' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1822
000B 7800        R     MOV     R0,#LOW flag
000D E2                MOVX    A,@R0
000E 6006              JZ      ?C0258
0010 EF                MOV     A,R7
0011 4480              ORL     A,#080H
0013 FF                MOV     R7,A
0014 8004              SJMP    ?C0259
0016         ?C0258:
                                           ; SOURCE LINE # 1823
0016 EF                MOV     A,R7
0017 547F              ANL     A,#07FH
0019 FF                MOV     R7,A
001A         ?C0259:
                                           ; SOURCE LINE # 1824
001A AB07              MOV     R3,AR7
001C 7D42              MOV     R5,#042H
001E 7F8A              MOV     R7,#08AH
0020 020000      E     LJMP    _WriteI2C
             ; FUNCTION _RGBModeFieldDetect (END)

             ; FUNCTION _SetADCandInputRegisterByVGAMode (BEGIN)
                                           ; SOURCE LINE # 1833
0000 7800        R     MOV     R0,#LOW mode
0002 EF                MOV     A,R7
0003 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1834
                                           ; SOURCE LINE # 1836
0004 7B00              MOV     R3,#00H
0006 7A00              MOV     R2,#00H
0008 7900              MOV     R1,#00H
000A 08                INC     R0
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 159 

000B 120000      E     LCALL   ?C?PSTPDATA
                                           ; SOURCE LINE # 1837
000E E4                CLR     A
000F 7800        R     MOV     R0,#LOW fielddetect
0011 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1839
0012 7800        R     MOV     R0,#LOW mode
0014 120000      R     LCALL   L?0383
0017 120000      E     LCALL   _SetCoarse
                                           ; SOURCE LINE # 1841
001A 7800        R     MOV     R0,#LOW mode
001C E2                MOVX    A,@R0
001D 75F016            MOV     B,#016H
0020 900000      E     MOV     DPTR,#PCMDATA+011H
0023 120000      R     LCALL   L?0385
0026 120000      R     LCALL   L?0405
0029 120000      E     LCALL   _SetVCORange
002C 7800        R     MOV     R0,#LOW ret
002E EF                MOV     A,R7
002F F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1843
                                           ; SOURCE LINE # 1844
0030 7800        R     MOV     R0,#LOW mode
0032 E2                MOVX    A,@R0
0033 24E4              ADD     A,#0E4H
0035 6026              JZ      ?C0267
0037 14                DEC     A
0038 602B              JZ      ?C0269
003A 14                DEC     A
003B 6028              JZ      ?C0269
003D 24FD              ADD     A,#0FDH
003F 602C              JZ      ?C0270
0041 2402              ADD     A,#02H
0043 24FB              ADD     A,#0FBH
0045 5004              JNC     ?C0265
0047 6014              JZ      ?C0267
0049 8022              SJMP    ?C0270
                                           ; SOURCE LINE # 1845
                                           ; SOURCE LINE # 1846
                                           ; SOURCE LINE # 1847
                                           ; SOURCE LINE # 1848
004B         ?C0265:
                                           ; SOURCE LINE # 1853
004B 7BFF              MOV     R3,#0FFH
004D 7A00        R     MOV     R2,#HIGH DTV_RGB_480I_Reg
004F 7900        R     MOV     R1,#LOW DTV_RGB_480I_Reg
0051 7800        R     MOV     R0,#LOW reg
0053 120000      E     LCALL   ?C?PSTPDATA
0056 7800        R     MOV     R0,#LOW fielddetect
0058 7401              MOV     A,#01H
005A F2                MOVX    @R0,A
005B 801F              SJMP    ?C0261
                                           ; SOURCE LINE # 1854
                                           ; SOURCE LINE # 1855
005D         ?C0267:
                                           ; SOURCE LINE # 1860
005D 7BFF              MOV     R3,#0FFH
005F 7A00        R     MOV     R2,#HIGH DTV_RGB_480P_Reg
0061 7900        R     MOV     R1,#LOW DTV_RGB_480P_Reg
                                           ; SOURCE LINE # 1862
0063 800E              SJMP    ?C0373
                                           ; SOURCE LINE # 1863
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 160 

                                           ; SOURCE LINE # 1864
0065         ?C0269:
                                           ; SOURCE LINE # 1865
0065 7BFF              MOV     R3,#0FFH
0067 7A00        R     MOV     R2,#HIGH DTV_RGB_720P_Reg
0069 7900        R     MOV     R1,#LOW DTV_RGB_720P_Reg
006B         ?C0372:
006B 8006              SJMP    ?C0373
                                           ; SOURCE LINE # 1866
006D         ?C0270:
006D 7BFF              MOV     R3,#0FFH
006F 7A00        R     MOV     R2,#HIGH PC_RGB_ADC_Reg
0071 7900        R     MOV     R1,#LOW PC_RGB_ADC_Reg
0073         ?C0373:
0073 7800        R     MOV     R0,#LOW reg
0075 120000      E     LCALL   ?C?PSTPDATA
0078 E4                CLR     A
0079 7800        R     MOV     R0,#LOW fielddetect
007B F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1867
007C         ?C0261:
                                           ; SOURCE LINE # 1869
                                           ; SOURCE LINE # 1871
007C 7800        R     MOV     R0,#LOW fielddetect
007E E2                MOVX    A,@R0
007F FF                MOV     R7,A
0080 120000      R     LCALL   _RGBModeFieldDetect
                                           ; SOURCE LINE # 1872
0083 7800        R     MOV     R0,#LOW reg
0085 120000      E     LCALL   ?C?PLDPDATA
0088 EA                MOV     A,R2
0089 49                ORL     A,R1
008A 4B                ORL     A,R3
008B 6008              JZ      ?C0271
008D 7800        R     MOV     R0,#LOW reg
008F 120000      E     LCALL   ?C?PLDPDATA
0092 120000      E     LCALL   _I2CDeviceInitialize
0095         ?C0271:
                                           ; SOURCE LINE # 1874
0095 7800        R     MOV     R0,#LOW ret
0097 E2                MOVX    A,@R0
0098 FF                MOV     R7,A
                                           ; SOURCE LINE # 1876
0099         ?C0272:
0099 22                RET     
             ; FUNCTION _SetADCandInputRegisterByVGAMode (END)

             ; FUNCTION _DetectAndSetForVGAInput (BEGIN)
                                           ; SOURCE LINE # 1980
0000 7800        R     MOV     R0,#LOW eflag
0002 EF                MOV     A,R7
0003 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1984
                                           ; SOURCE LINE # 1990
0004 E4                CLR     A
0005 7800        R     MOV     R0,#LOW cLastSyncLoss
0007 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1992
0008 120000      R     LCALL   L?0403
000B 20E014            JB      ACC.0,?C0273
                                           ; SOURCE LINE # 1993
000E 120000      E     LCALL   GetOSDLang
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 161 

0011 120000      R     LCALL   L?0390
0014 120000      E     LCALL   _DisplayPCInfo
                                           ; SOURCE LINE # 1994
0017 7800        R     MOV     R0,#LOW PcMode
0019 74FE              MOV     A,#0FEH
001B F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1998
                                           ; SOURCE LINE # 1999
001C 120000      R     LCALL   L?0440
                                           ; SOURCE LINE # 2000
001F 7F00              MOV     R7,#00H
0021 22                RET     
                                           ; SOURCE LINE # 2001
0022         ?C0273:
                                           ; SOURCE LINE # 2002
0022 120000      R     LCALL   L?0407
0025 54F3              ANL     A,#0F3H
0027 4408              ORL     A,#08H
0029 120000      R     LCALL   L?0473
                                           ; SOURCE LINE # 2011
002C 7D5C              MOV     R5,#05CH
002E 7F8A              MOV     R7,#08AH
0030 120000      E     LCALL   _ReadI2C
0033 7D5C              MOV     R5,#05CH
0035 120000      R     LCALL   L?0424
                                           ; SOURCE LINE # 2012
0038 7D5D              MOV     R5,#05DH
003A 7F8A              MOV     R7,#08AH
003C 120000      E     LCALL   _ReadI2C
003F 7D5D              MOV     R5,#05DH
0041 120000      R     LCALL   L?0424
                                           ; SOURCE LINE # 2014
0044 120000      E     LCALL   AutoPHPCalEnable
                                           ; SOURCE LINE # 2016
0047 7B08              MOV     R3,#08H
0049 7DBD              MOV     R5,#0BDH
004B 7F8A              MOV     R7,#08AH
004D 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 2017
0050 7B06              MOV     R3,#06H
0052 7DB8              MOV     R5,#0B8H
0054 7F8A              MOV     R7,#08AH
0056 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 2020
0059 7B01              MOV     R3,#01H
005B 120000      R     LCALL   L?0447
                                           ; SOURCE LINE # 2021
005E 120000      R     LCALL   L?0416
0061 30E604            JNB     ACC.6,?C0275
                                           ; SOURCE LINE # 2022
                                           ; SOURCE LINE # 2024
0064 7B18              MOV     R3,#018H
                                           ; SOURCE LINE # 2025
0066 8002              SJMP    ?C0374
0068         ?C0275:
                                           ; SOURCE LINE # 2027
                                           ; SOURCE LINE # 2028
0068 7B38              MOV     R3,#038H
006A         ?C0374:
006A 7DC0              MOV     R5,#0C0H
006C 7F8A              MOV     R7,#08AH
006E 120000      E     LCALL   _WriteI2C
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 162 

                                           ; SOURCE LINE # 2029
0071         ?C0276:
                                           ; SOURCE LINE # 2030
0071 120000      R     LCALL   L?0416
0074 30E704            JNB     ACC.7,?C0277
                                           ; SOURCE LINE # 2032
0077 7B1F              MOV     R3,#01FH
                                           ; SOURCE LINE # 2033
0079 8002              SJMP    ?C0375
007B         ?C0277:
                                           ; SOURCE LINE # 2034
                                           ; SOURCE LINE # 2035
007B 7B1D              MOV     R3,#01DH
007D         ?C0375:
007D 7DCC              MOV     R5,#0CCH
007F 7F8A              MOV     R7,#08AH
0081 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 2036
0084         ?C0278:
                                           ; SOURCE LINE # 2037
0084 E4                CLR     A
0085 FB                MOV     R3,A
0086 120000      R     LCALL   L?0447
                                           ; SOURCE LINE # 2039
0089 7D78              MOV     R5,#078H
008B 7C05              MOV     R4,#05H
008D 7F01              MOV     R7,#01H
008F 7E00              MOV     R6,#00H
0091 120000      E     LCALL   _SetMeasureWindowH
                                           ; SOURCE LINE # 2040
0094 7DB0              MOV     R5,#0B0H
0096 7C04              MOV     R4,#04H
0098 7F01              MOV     R7,#01H
009A 7E00              MOV     R6,#00H
009C 120000      E     LCALL   _SetMeasureWindowV
                                           ; SOURCE LINE # 2047
009F 7F01              MOV     R7,#01H
00A1 120000      R     LCALL   _GetHpnVpn
00A4 EE                MOV     A,R6
                                           ; SOURCE LINE # 2048
00A5 120000      R     LCALL   L?0435
                                           ; SOURCE LINE # 2051
00A8 E4                CLR     A
00A9 7800        R     MOV     R0,#LOW i
00AB F2                MOVX    @R0,A
00AC         ?C0281:
                                           ; SOURCE LINE # 2052
                                           ; SOURCE LINE # 2059
00AC 7800        R     MOV     R0,#LOW vpn
00AE 120000      R     LCALL   L?0454
00B1 EF                MOV     A,R7
00B2 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 2072
00B3 F4                CPL     A
00B4 7042              JNZ     ?C0282
                                           ; SOURCE LINE # 2076
00B6 C3                CLR     C
00B7 7800        R     MOV     R0,#LOW vpn+01H
00B9 E2                MOVX    A,@R0
00BA 94C8              SUBB    A,#0C8H
00BC 18                DEC     R0
00BD E2                MOVX    A,@R0
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 163 

00BE 9400              SUBB    A,#00H
00C0 5006              JNC     ?C0283
00C2 E4                CLR     A
00C3 F2                MOVX    @R0,A
00C4 08                INC     R0
00C5 74FA              MOV     A,#0FAH
00C7 F2                MOVX    @R0,A
00C8         ?C0283:
                                           ; SOURCE LINE # 2077
00C8 120000      R     LCALL   L?0408
00CB E4                CLR     A
00CC FC                MOV     R4,A
00CD FD                MOV     R5,A
00CE 120000      R     LCALL   L?0442
00D1 120000      E     LCALL   ?C?LMUL
00D4 E4                CLR     A
00D5 7B04              MOV     R3,#04H
00D7 FA                MOV     R2,A
00D8 F9                MOV     R1,A
00D9 F8                MOV     R0,A
00DA 120000      E     LCALL   ?C?LMUL
00DD 120000      E     LCALL   _SetVCORange
00E0 EF                MOV     A,R7
00E1 24FF              ADD     A,#0FFH
00E3 9200        R     MOV     VCORangeChged,C
                                           ; SOURCE LINE # 2078
00E5 120000      R     LCALL   L?0408
00E8 EF                MOV     A,R7
00E9 7802              MOV     R0,#02H
00EB         ?C0353:
00EB C3                CLR     C
00EC 33                RLC     A
00ED CE                XCH     A,R6
00EE 33                RLC     A
00EF CE                XCH     A,R6
00F0 D8F9              DJNZ    R0,?C0353
00F2 FF                MOV     R7,A
00F3 120000      E     LCALL   _SetCoarse
                                           ; SOURCE LINE # 2079
00F6 8040              SJMP    ?C0284
00F8         ?C0282:
                                           ; SOURCE LINE # 2080
00F8 7800        R     MOV     R0,#LOW PcMode
00FA E2                MOVX    A,@R0
00FB B4FE0B            CJNE    A,#0FEH,?C0285
                                           ; SOURCE LINE # 2084
00FE 120000      E     LCALL   GetInputSelection
0101 EF                MOV     A,R7
0102 6407              XRL     A,#07H
0104 7032              JNZ     ?C0284
0106 020000      R     LJMP    Failure
                                           ; SOURCE LINE # 2085
0109         ?C0285:
                                           ; SOURCE LINE # 2086
                                           ; SOURCE LINE # 2090
0109 7800        R     MOV     R0,#LOW eflag
010B E2                MOVX    A,@R0
010C FF                MOV     R7,A
010D 6401              XRL     A,#01H
010F 6004              JZ      ?C0290
0111 EF                MOV     A,R7
0112 B4030C            CJNE    A,#03H,?C0289
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 164 

0115         ?C0290:
                                           ; SOURCE LINE # 2091
0115 7800        R     MOV     R0,#LOW PcMode
0117 E2                MOVX    A,@R0
0118 FF                MOV     R7,A
0119 120000      R     LCALL   _SetADCandInputRegisterByVGAMode
011C EF                MOV     A,R7
011D 24FF              ADD     A,#0FFH
011F 9200        R     MOV     VCORangeChged,C
                                           ; SOURCE LINE # 2096
0121         ?C0289:
                                           ; SOURCE LINE # 2097
0121 7800        R     MOV     R0,#LOW PcMode
0123 E2                MOVX    A,@R0
0124 C3                CLR     C
0125 941C              SUBB    A,#01CH
0127 4064              JC      ?C0280
                                           ; SOURCE LINE # 2101
                                           ; SOURCE LINE # 2102
0129         ?C0291:
                                           ; SOURCE LINE # 2106
                                           ; SOURCE LINE # 2107
0129 7D40              MOV     R5,#040H
012B 120000      R     LCALL   L?0460
012E 54DF              ANL     A,#0DFH
0130 FB                MOV     R3,A
0131 7D40              MOV     R5,#040H
0133 7F8A              MOV     R7,#08AH
0135 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 2108
                                           ; SOURCE LINE # 2110
0138         ?C0284:
                                           ; SOURCE LINE # 2112
0138 7F01              MOV     R7,#01H
013A 120000      R     LCALL   _GetHpnVpn
013D 7800        R     MOV     R0,#LOW vpn1
013F EE                MOV     A,R6
0140 F2                MOVX    @R0,A
0141 08                INC     R0
0142 EF                MOV     A,R7
0143 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 2114
0144 4E                ORL     A,R6
0145 7003              JNZ     $ + 5H
0147 020000      R     LJMP    Failure
                                           ; SOURCE LINE # 2118
                                           ; SOURCE LINE # 2119
014A         ?C0293:
                                           ; SOURCE LINE # 2122
014A 7800        R     MOV     R0,#LOW PcMode
014C E2                MOVX    A,@R0
014D B4FF1A            CJNE    A,#0FFH,?C0294
                                           ; SOURCE LINE # 2123
0150 120000      R     LCALL   StartNewDetect
                                           ; SOURCE LINE # 2124
0153 120000      R     LCALL   L?0403
0156 5406              ANL     A,#06H
0158 6010              JZ      ?C0294
                                           ; SOURCE LINE # 2125
015A 7800        R     MOV     R0,#LOW PcMode
015C 74FE              MOV     A,#0FEH
015E F2                MOVX    @R0,A
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 165 

                                           ; SOURCE LINE # 2129
015F 120000      E     LCALL   GetInputSelection
0162 EF                MOV     A,R7
0163 6407              XRL     A,#07H
0165 7003              JNZ     $ + 5H
0167 020000      R     LJMP    Failure
                                           ; SOURCE LINE # 2130
                                           ; SOURCE LINE # 2131
016A         ?C0294:
                                           ; SOURCE LINE # 2133
016A 7800        R     MOV     R0,#LOW vpn1
016C E2                MOVX    A,@R0
016D FF                MOV     R7,A
016E 08                INC     R0
016F E2                MOVX    A,@R0
0170 CF                XCH     A,R7
                                           ; SOURCE LINE # 2134
0171 120000      R     LCALL   L?0435
                                           ; SOURCE LINE # 2136
0174 7800        R     MOV     R0,#LOW i
0176 E2                MOVX    A,@R0
0177 04                INC     A
0178 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 2137
0179 7800        R     MOV     R0,#LOW PcMode
017B E2                MOVX    A,@R0
017C F4                CPL     A
017D 6003              JZ      ?C0298
017F 30000B      R     JNB     VCORangeChged,?C0280
0182         ?C0298:
0182 7800        R     MOV     R0,#LOW i
0184 E2                MOVX    A,@R0
0185 C3                CLR     C
0186 9405              SUBB    A,#05H
0188 5003              JNC     $ + 5H
018A 020000      R     LJMP    ?C0281
018D         ?C0280:
                                           ; SOURCE LINE # 2139
018D 7800        R     MOV     R0,#LOW PcMode
018F E2                MOVX    A,@R0
0190 FF                MOV     R7,A
0191 F4                CPL     A
0192 7003              JNZ     $ + 5H
0194 020000      R     LJMP    Failure
0197         ?C0299:
                                           ; SOURCE LINE # 2140
0197 EF                MOV     A,R7
0198 64FE              XRL     A,#0FEH
019A 7003              JNZ     $ + 5H
019C 020000      R     LJMP    Failure
019F         ?C0300:
                                           ; SOURCE LINE # 2153
019F 120000      R     LCALL   L?0432
01A2 900000      E     MOV     DPTR,#PCMDATA+013H
01A5 120000      R     LCALL   L?0385
01A8 120000      R     LCALL   L?0405
01AB 120000      E     LCALL   _ChangeInternPLL
                                           ; SOURCE LINE # 2165
01AE 120000      R     LCALL   L?0437
                                           ; SOURCE LINE # 2167
01B1 7800        R     MOV     R0,#LOW LastVPN
01B3 120000      R     LCALL   L?0411
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 166 

01B6 120000      R     LCALL   L?0438
01B9 C006              PUSH    AR6
01BB C007              PUSH    AR7
01BD 120000      R     LCALL   L?0401
01C0 D007              POP     AR7
01C2 D006              POP     AR6
01C4 120000      E     LCALL   ?C?ULDIV
01C7 7800        R     MOV     R0,#LOW ivf
01C9 EE                MOV     A,R6
01CA F2                MOVX    @R0,A
01CB FC                MOV     R4,A
01CC 08                INC     R0
01CD EF                MOV     A,R7
01CE F2                MOVX    @R0,A
01CF FD                MOV     R5,A
                                           ; SOURCE LINE # 2173
01D0 7800        R     MOV     R0,#LOW LastVPN
01D2 E2                MOVX    A,@R0
01D3 FE                MOV     R6,A
01D4 08                INC     R0
01D5 E2                MOVX    A,@R0
01D6 FF                MOV     R7,A
01D7 120000      R     LCALL   _DecideVGAInputSource
01DA 7800        R     MOV     R0,#LOW i
01DC EF                MOV     A,R7
01DD F2                MOVX    @R0,A
01DE FE                MOV     R6,A
                                           ; SOURCE LINE # 2177
01DF 7800        R     MOV     R0,#LOW PcMode
01E1 E2                MOVX    A,@R0
01E2 FB                MOV     R3,A
01E3 6E                XRL     A,R6
01E4 6011              JZ      ?C0301
                                           ; SOURCE LINE # 2181
                                           ; SOURCE LINE # 2182
01E6 120000      R     LCALL   L?0426
01E9 120000      E     LCALL   ?C?LSTKPDATA
01EC 00                DB      00H
01ED 00                DB      00H
01EE 00                DB      00H
01EF 00                DB      00H
                                           ; SOURCE LINE # 2183
01F0 7800        R     MOV     R0,#LOW PcMode
01F2 74FF              MOV     A,#0FFH
01F4 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 2184
01F5 8060              SJMP    Failure
                                           ; SOURCE LINE # 2188
01F7         ?C0301:
                                           ; SOURCE LINE # 2192
01F7 7800        R     MOV     R0,#LOW eflag
01F9 E2                MOVX    A,@R0
01FA FF                MOV     R7,A
01FB 6403              XRL     A,#03H
01FD 6004              JZ      ?C0303
01FF EF                MOV     A,R7
0200 B40107            CJNE    A,#01H,?C0302
0203         ?C0303:
                                           ; SOURCE LINE # 2195
0203 AF03              MOV     R7,AR3
0205 120000      E     LCALL   _GetPCDataEE
                                           ; SOURCE LINE # 2197
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 167 

0208 801C              SJMP    Success
                                           ; SOURCE LINE # 2199
020A         ?C0302:
                                           ; SOURCE LINE # 2200
                                           ; SOURCE LINE # 2201
020A 7800        R     MOV     R0,#LOW eflag
020C E2                MOVX    A,@R0
020D 14                DEC     A
020E 6007              JZ      ?C0307
0210 14                DEC     A
0211 6008              JZ      ?C0309
0213 2402              ADD     A,#02H
0215 7006              JNZ     ?C0306
                                           ; SOURCE LINE # 2202
0217         ?C0307:
0217 C200        E     CLR     Range4Coarse
0219 8002              SJMP    ?C0306
                                           ; SOURCE LINE # 2203
                                           ; SOURCE LINE # 2204
021B         ?C0309:
021B D200        E     SETB    Range4Coarse
                                           ; SOURCE LINE # 2205
021D         ?C0306:
                                           ; SOURCE LINE # 2214
021D 120000      R     LCALL   DoMeasurement
0220 7800        R     MOV     R0,#LOW i
0222 EF                MOV     A,R7
0223 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 2218
0224 6031              JZ      Failure
                                           ; SOURCE LINE # 2219
                                           ; SOURCE LINE # 2220
                                           ; SOURCE LINE # 2222
0226         Success:
                                           ; SOURCE LINE # 2225
0226 120000      R     LCALL   L?0407
0229 54F3              ANL     A,#0F3H
022B 440C              ORL     A,#0CH
022D 7D44              MOV     R5,#044H
                                           ; SOURCE LINE # 2226
022F 120000      R     LCALL   L?0394
0232 5406              ANL     A,#06H
0234 7021              JNZ     Failure
                                           ; SOURCE LINE # 2237
                                           ; SOURCE LINE # 2239
0236         ?C0312:
                                           ; SOURCE LINE # 2240
                                           ; SOURCE LINE # 2241
0236 120000      E     LCALL   ClearPCInfo
                                           ; SOURCE LINE # 2242
0239 7800        R     MOV     R0,#LOW eflag
023B E2                MOVX    A,@R0
023C 6003              JZ      ?C0315
023E B40207            CJNE    A,#02H,?C0314
0241         ?C0315:
0241 7800        R     MOV     R0,#LOW PcMode
0243 E2                MOVX    A,@R0
0244 FF                MOV     R7,A
0245 120000      E     LCALL   _SavePCDataEE
0248         ?C0314:
                                           ; SOURCE LINE # 2244
0248 120000      R     LCALL   L?0477
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 168 

024B 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 2245
024E 120000      R     LCALL   L?0479
0251 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 2247
0254 7F01              MOV     R7,#01H
0256 22                RET     
                                           ; SOURCE LINE # 2248
                                           ; SOURCE LINE # 2250
0257         Failure:
                                           ; SOURCE LINE # 2252
0257 7D44              MOV     R5,#044H
0259 120000      R     LCALL   L?0460
025C 54F3              ANL     A,#0F3H
025E 440C              ORL     A,#0CH
0260 120000      R     LCALL   L?0473
                                           ; SOURCE LINE # 2253
0263 7D06              MOV     R5,#06H
0265 7F8A              MOV     R7,#08AH
0267 120000      E     LCALL   _ReadI2C
026A EF                MOV     A,R7
026B 4480              ORL     A,#080H
026D 7D06              MOV     R5,#06H
                                           ; SOURCE LINE # 2258
026F 120000      R     LCALL   L?0394
0272 20E10B            JB      ACC.1,?C0317
0275 7DD0              MOV     R5,#0D0H
0277 7F8A              MOV     R7,#08AH
0279 120000      E     LCALL   _ReadI2C
027C EF                MOV     A,R7
027D 30E227            JNB     ACC.2,?C0316
0280         ?C0317:
                                           ; SOURCE LINE # 2260
0280 7800        R     MOV     R0,#LOW PcMode
0282 74FE              MOV     A,#0FEH
0284 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 2266
                                           ; SOURCE LINE # 2267
0285 120000      R     LCALL   L?0426
0288 120000      E     LCALL   ?C?LSTKPDATA
028B 00                DB      00H
028C 00                DB      00H
028D 00                DB      00H
028E 00                DB      00H
                                           ; SOURCE LINE # 2270
028F 120000      E     LCALL   GetOSDLang
0292 120000      R     LCALL   L?0390
0295 120000      E     LCALL   _DisplayPCInfo
                                           ; SOURCE LINE # 2271
                                           ; SOURCE LINE # 2272
0298 120000      R     LCALL   L?0440
                                           ; SOURCE LINE # 2273
029B 7BFF              MOV     R3,#0FFH
029D 7A00        R     MOV     R2,#HIGH ?SC_29
029F 7900        R     MOV     R1,#LOW ?SC_29
02A1 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 2275
02A4 7F00              MOV     R7,#00H
02A6 22                RET     
                                           ; SOURCE LINE # 2276
02A7         ?C0316:
                                           ; SOURCE LINE # 2277
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 169 

                                           ; SOURCE LINE # 2280
02A7 7800        R     MOV     R0,#LOW PcMode
02A9 74FF              MOV     A,#0FFH
02AB F2                MOVX    @R0,A
                                           ; SOURCE LINE # 2282
02AC E4                CLR     A
02AD FF                MOV     R7,A
02AE 120000      R     LCALL   _GetHpnVpn
                                           ; SOURCE LINE # 2284
02B1 120000      R     LCALL   L?0437
02B4 EF                MOV     A,R7
02B5 700D              JNZ     ?C0319
                                           ; SOURCE LINE # 2285
                                           ; SOURCE LINE # 2286
02B7 120000      R     LCALL   L?0428
02BA 120000      E     LCALL   ?C?LSTKPDATA
02BD 00                DB      00H
02BE 00                DB      00H
02BF 00                DB      00H
02C0 00                DB      00H
                                           ; SOURCE LINE # 2288
02C1 7F00              MOV     R7,#00H
02C3 22                RET     
                                           ; SOURCE LINE # 2289
02C4         ?C0319:
                                           ; SOURCE LINE # 2290
02C4 7800        R     MOV     R0,#LOW LastVPN
02C6 120000      R     LCALL   L?0411
02C9 120000      R     LCALL   L?0438
02CC C006              PUSH    AR6
02CE C007              PUSH    AR7
02D0 120000      R     LCALL   L?0401
02D3 D007              POP     AR7
02D5 D006              POP     AR6
02D7 120000      E     LCALL   ?C?ULDIV
02DA 8E00        E     MOV     IVF,R6
02DC 8F00        E     MOV     IVF+01H,R7
                                           ; SOURCE LINE # 2292
02DE 7800        R     MOV     R0,#LOW LastVPN
02E0 120000      R     LCALL   L?0454
02E3 E2                MOVX    A,@R0
02E4 6F                XRL     A,R7
02E5 600A              JZ      ?C0320
                                           ; SOURCE LINE # 2293
                                           ; SOURCE LINE # 2294
02E7 120000      R     LCALL   L?0427
02EA 120000      E     LCALL   ?C?LSTKPDATA
02ED 00                DB      00H
02EE 00                DB      00H
02EF 00                DB      00H
02F0 00                DB      00H
                                           ; SOURCE LINE # 2299
02F1         ?C0320:
                                           ; SOURCE LINE # 2301
02F1 120000      E     LCALL   GetOSDLang
02F4 900000      E     MOV     DPTR,#OutOfRangeStr
02F7 120000      R     LCALL   L?0392
02FA 120000      E     LCALL   _DisplayPCInfo
                                           ; SOURCE LINE # 2302
                                           ; SOURCE LINE # 2303
02FD 120000      R     LCALL   L?0427
0300 120000      E     LCALL   ?C?LSTKPDATA
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 170 

0303 00                DB      00H
0304 00                DB      00H
0305 00                DB      00H
0306 00                DB      00H
                                           ; SOURCE LINE # 2304
0307 7F01              MOV     R7,#01H
0309 120000      E     LCALL   _PanelFreeRun
                                           ; SOURCE LINE # 2305
030C 7F01              MOV     R7,#01H
030E 120000      E     LCALL   _PanelBlack
                                           ; SOURCE LINE # 2306
0311         ?C0318:
                                           ; SOURCE LINE # 2307
0311 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 2308
0313         ?C0274:
0313 22                RET     
0314         L?0394:
0314 FB                MOV     R3,A
0315 7F8A              MOV     R7,#08AH
0317 120000      E     LCALL   _WriteI2C
031A 7DD0              MOV     R5,#0D0H
031C 7F8A              MOV     R7,#08AH
031E 120000      E     LCALL   _ReadI2C
0321 EF                MOV     A,R7
0322 22                RET     
0323         L?0403:
0323 7DD0              MOV     R5,#0D0H
0325 7F8A              MOV     R7,#08AH
0327 120000      E     LCALL   _ReadI2C
032A EF                MOV     A,R7
032B 22                RET     
032C         L?0407:
032C 7D44              MOV     R5,#044H
032E 7F8A              MOV     R7,#08AH
0330 120000      E     LCALL   _ReadI2C
0333 EF                MOV     A,R7
0334 22                RET     
0335         L?0416:
0335 7DC1              MOV     R5,#0C1H
0337 7F8A              MOV     R7,#08AH
0339 120000      E     LCALL   _ReadI2C
033C EF                MOV     A,R7
033D 22                RET     
033E         L?0424:
033E EF                MOV     A,R7
033F 540F              ANL     A,#0FH
0341 4430              ORL     A,#030H
0343 FB                MOV     R3,A
0344 7F8A              MOV     R7,#08AH
0346 120000      E     LCALL   _WriteI2C
0349 22                RET     
034A         L?0437:
034A 7BFE              MOV     R3,#0FEH
034C 7A00        R     MOV     R2,#HIGH LastIHF
034E 7900        R     MOV     R1,#LOW LastIHF
0350 7800        R     MOV     R0,#LOW ?_Measure_VPN_IHF?BYTE+03H
0352 120000      E     LCALL   ?C?PSTPDATA
0355 7A00        R     MOV     R2,#HIGH LastVPN
0357 7900        R     MOV     R1,#LOW LastVPN
0359 120000      R     LCALL   _Measure_VPN_IHF
035C 22                RET     
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 171 

035D         L?0440:
035D 7F01              MOV     R7,#01H
035F 120000      E     LCALL   _PanelFreeRun
0362 7F01              MOV     R7,#01H
0364 120000      E     LCALL   _PanelBlack
0367 22                RET     
0368         L?0447:
0368 7DFF              MOV     R5,#0FFH
036A 7F8A              MOV     R7,#08AH
036C 120000      E     LCALL   _WriteI2C
036F 22                RET     
0370         L?0454:
0370 E2                MOVX    A,@R0
0371 FE                MOV     R6,A
0372 08                INC     R0
0373 E2                MOVX    A,@R0
0374 FF                MOV     R7,A
0375 AD00        E     MOV     R5,IVF+01H
0377 AC00        E     MOV     R4,IVF
0379 120000      R     LCALL   _DecideVGAInputSource
037C 7800        R     MOV     R0,#LOW PcMode
037E 22                RET     
037F         L?0460:
037F 7F8A              MOV     R7,#08AH
0381 120000      E     LCALL   _ReadI2C
0384 EF                MOV     A,R7
0385 22                RET     
0386         L?0473:
0386 FB                MOV     R3,A
0387 7D44              MOV     R5,#044H
0389 7F8A              MOV     R7,#08AH
038B 120000      E     LCALL   _WriteI2C
038E 22                RET     
             ; FUNCTION _DetectAndSetForVGAInput (END)

             ; FUNCTION CheckPCinput (BEGIN)
                                           ; SOURCE LINE # 2312
                                           ; SOURCE LINE # 2313
                                           ; SOURCE LINE # 2326
                                           ; SOURCE LINE # 2327
0000 120000      R     LCALL   L?0418
                                           ; SOURCE LINE # 2328
                                           ; SOURCE LINE # 2329
0003 120000      R     LCALL   L?0429
                                           ; SOURCE LINE # 2397
0006 7800        R     MOV     R0,#LOW PcMode
0008 E2                MOVX    A,@R0
0009 F4                CPL     A
000A 7019              JNZ     ?C0321
                                           ; SOURCE LINE # 2398
                                           ; SOURCE LINE # 2399
000C 08                INC     R0
000D E2                MOVX    A,@R0
000E 7015              JNZ     ?C0321
                                           ; SOURCE LINE # 2400
                                           ; SOURCE LINE # 2401
0010 120000      E     LCALL   GetOSDLang
0013 75F003            MOV     B,#03H
0016 EF                MOV     A,R7
0017 900000      E     MOV     DPTR,#OutOfRangeStr
001A 120000      R     LCALL   L?0393
                                           ; SOURCE LINE # 2402
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 172 

                                           ; SOURCE LINE # 2403
001D 120000      R     LCALL   L?0425
                                           ; SOURCE LINE # 2404
0020 7800        R     MOV     R0,#LOW cLastSyncLoss
0022 7401              MOV     A,#01H
0024 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 2405
                                           ; SOURCE LINE # 2406
0025         ?C0321:
                                           ; SOURCE LINE # 2407
0025 7800        R     MOV     R0,#LOW statusD0
0027 E2                MOVX    A,@R0
0028 FF                MOV     R7,A
0029 20E103            JB      ACC.1,?C0324
002C 30E264            JNB     ACC.2,?C0323
002F         ?C0324:
                                           ; SOURCE LINE # 2408
                                           ; SOURCE LINE # 2409
002F 7800        R     MOV     R0,#LOW PcMode
0031 E2                MOVX    A,@R0
0032 64FE              XRL     A,#0FEH
0034 7016              JNZ     ?C0325
                                           ; SOURCE LINE # 2410
                                           ; SOURCE LINE # 2411
0036 08                INC     R0
0037 E2                MOVX    A,@R0
0038 6003              JZ      $ + 5H
003A 020000      R     LJMP    ?C0327
                                           ; SOURCE LINE # 2412
                                           ; SOURCE LINE # 2413
003D 120000      E     LCALL   GetOSDLang
0040 120000      R     LCALL   L?0391
                                           ; SOURCE LINE # 2414
                                           ; SOURCE LINE # 2415
0043 120000      R     LCALL   L?0425
                                           ; SOURCE LINE # 2416
0046 7800        R     MOV     R0,#LOW cLastSyncLoss
0048 7401              MOV     A,#01H
004A F2                MOVX    @R0,A
                                           ; SOURCE LINE # 2417
004B 22                RET     
                                           ; SOURCE LINE # 2419
004C         ?C0325:
                                           ; SOURCE LINE # 2420
004C E4                CLR     A
004D 7800        R     MOV     R0,#LOW i
004F F2                MOVX    @R0,A
0050         ?C0328:
                                           ; SOURCE LINE # 2421
                                           ; SOURCE LINE # 2422
                                           ; SOURCE LINE # 2423
0050 120000      R     LCALL   L?0417
                                           ; SOURCE LINE # 2424
0053 7DD0              MOV     R5,#0D0H
0055 7F8A              MOV     R7,#08AH
0057 120000      E     LCALL   _ReadI2C
005A 7800        R     MOV     R0,#LOW statusD0
005C EF                MOV     A,R7
005D F2                MOVX    @R0,A
                                           ; SOURCE LINE # 2425
005E 20E104            JB      ACC.1,?C0332
0061 E2                MOVX    A,@R0
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 173 

0062 30E205            JNB     ACC.2,?C0330
0065         ?C0332:
                                           ; SOURCE LINE # 2426
0065 7F64              MOV     R7,#064H
0067 120000      E     LCALL   _delay
                                           ; SOURCE LINE # 2427
006A         ?C0330:
006A 7800        R     MOV     R0,#LOW i
006C E2                MOVX    A,@R0
006D 04                INC     A
006E F2                MOVX    @R0,A
006F E2                MOVX    A,@R0
0070 C3                CLR     C
0071 9403              SUBB    A,#03H
0073 40DB              JC      ?C0328
0075         ?C0329:
                                           ; SOURCE LINE # 2428
0075 7800        R     MOV     R0,#LOW PcMode
0077 74FE              MOV     A,#0FEH
0079 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 2429
                                           ; SOURCE LINE # 2430
007A 120000      R     LCALL   L?0417
                                           ; SOURCE LINE # 2431
007D 120000      E     LCALL   GetOSDLang
0080 120000      R     LCALL   L?0391
0083 120000      E     LCALL   _DisplayPCInfo
                                           ; SOURCE LINE # 2432
0086 7F01              MOV     R7,#01H
0088 120000      E     LCALL   _PanelFreeRun
                                           ; SOURCE LINE # 2433
008B 7F01              MOV     R7,#01H
008D 120000      E     LCALL   _PanelBlack
                                           ; SOURCE LINE # 2435
0090 020000      R     LJMP    ?C0376
                                           ; SOURCE LINE # 2437
0093         ?C0323:
                                           ; SOURCE LINE # 2438
0093 7800        R     MOV     R0,#LOW statusD1
0095 E2                MOVX    A,@R0
0096 20E406            JB      ACC.4,?C0335
0099 20E503            JB      ACC.5,?C0335
009C 30E02B            JNB     ACC.0,?C0333
009F         ?C0335:
                                           ; SOURCE LINE # 2439
                                           ; SOURCE LINE # 2440
009F E4                CLR     A
00A0 7800        R     MOV     R0,#LOW i
00A2 F2                MOVX    @R0,A
00A3         ?C0338:
                                           ; SOURCE LINE # 2441
                                           ; SOURCE LINE # 2442
                                           ; SOURCE LINE # 2443
                                           ; SOURCE LINE # 2444
00A3 120000      R     LCALL   L?0389
                                           ; SOURCE LINE # 2445
                                           ; SOURCE LINE # 2446
00A6 120000      R     LCALL   L?0429
                                           ; SOURCE LINE # 2447
00A9 08                INC     R0
00AA E2                MOVX    A,@R0
00AB 04                INC     A
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 174 

00AC F2                MOVX    @R0,A
                                           ; SOURCE LINE # 2448
00AD E2                MOVX    A,@R0
00AE D3                SETB    C
00AF 940A              SUBB    A,#0AH
00B1 4004              JC      ?C0336
                                           ; SOURCE LINE # 2449
                                           ; SOURCE LINE # 2450
00B3 08                INC     R0
00B4 020000      R     LJMP    ?C0378
                                           ; SOURCE LINE # 2452
                                           ; SOURCE LINE # 2453
00B7         ?C0336:
00B7 7800        R     MOV     R0,#LOW statusD1
00B9 E2                MOVX    A,@R0
00BA FF                MOV     R7,A
00BB 20E4E5            JB      ACC.4,?C0338
00BE 20E5E2            JB      ACC.5,?C0338
00C1 20E0DF            JB      ACC.0,?C0338
                                           ; SOURCE LINE # 2454
                                           ; SOURCE LINE # 2455
                                           ; SOURCE LINE # 2456
                                           ; SOURCE LINE # 2457
00C4 120000      R     LCALL   L?0430
00C7 020000      E     LJMP    _ChangeInput
                                           ; SOURCE LINE # 2459
00CA         ?C0333:
                                           ; SOURCE LINE # 2462
00CA 7F03              MOV     R7,#03H
00CC 120000      E     LCALL   _MeasureAndWait
                                           ; SOURCE LINE # 2464
00CF 120000      E     LCALL   GetPPF
00D2 C004              PUSH    AR4
00D4 C005              PUSH    AR5
00D6 C006              PUSH    AR6
00D8 C007              PUSH    AR7
00DA 120000      E     LCALL   GetHPN
00DD EE                MOV     A,R6
00DE C3                CLR     C
00DF 13                RRC     A
00E0 FE                MOV     R6,A
00E1 EF                MOV     A,R7
00E2 13                RRC     A
00E3 FF                MOV     R7,A
00E4 E4                CLR     A
00E5 FC                MOV     R4,A
00E6 FD                MOV     R5,A
00E7 D003              POP     AR3
00E9 D002              POP     AR2
00EB D001              POP     AR1
00ED D000              POP     AR0
00EF 120000      E     LCALL   ?C?LADD
00F2 C004              PUSH    AR4
00F4 C005              PUSH    AR5
00F6 C006              PUSH    AR6
00F8 C007              PUSH    AR7
00FA 120000      E     LCALL   GetHPN
00FD AB07              MOV     R3,AR7
00FF AA06              MOV     R2,AR6
0101 E4                CLR     A
0102 F9                MOV     R1,A
0103 F8                MOV     R0,A
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 175 

0104 D007              POP     AR7
0106 D006              POP     AR6
0108 D005              POP     AR5
010A D004              POP     AR4
010C 120000      E     LCALL   ?C?ULDIV
010F 7800        R     MOV     R0,#LOW dwIHF
0111 120000      E     LCALL   ?C?LSTPDATA
                                           ; SOURCE LINE # 2465
0114 7F03              MOV     R7,#03H
0116 120000      E     LCALL   _MeasureAndWait
                                           ; SOURCE LINE # 2467
0119 120000      E     LCALL   GetVPN
011C EE                MOV     A,R6
011D C3                CLR     C
011E 13                RRC     A
011F FE                MOV     R6,A
0120 EF                MOV     A,R7
0121 13                RRC     A
0122 FF                MOV     R7,A
0123 120000      R     LCALL   L?0443
0126 C004              PUSH    AR4
0128 C005              PUSH    AR5
012A C006              PUSH    AR6
012C C007              PUSH    AR7
012E 120000      E     LCALL   GetVPN
0131 AB07              MOV     R3,AR7
0133 AA06              MOV     R2,AR6
0135 E4                CLR     A
0136 F9                MOV     R1,A
0137 F8                MOV     R0,A
0138 D007              POP     AR7
013A D006              POP     AR6
013C D005              POP     AR5
013E D004              POP     AR4
0140 120000      E     LCALL   ?C?ULDIV
0143 7800        R     MOV     R0,#LOW wIVF
0145 EE                MOV     A,R6
0146 F2                MOVX    @R0,A
0147 08                INC     R0
0148 EF                MOV     A,R7
0149 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 2468
014A 7800        R     MOV     R0,#LOW dwIHF
014C 120000      E     LCALL   ?C?LLDPDATA
014F C3                CLR     C
0150 E500        E     MOV     A,IHF+03H
0152 9F                SUBB    A,R7
0153 FF                MOV     R7,A
0154 E500        E     MOV     A,IHF+02H
0156 9E                SUBB    A,R6
0157 FE                MOV     R6,A
0158 120000      E     LCALL   _abs
015B D3                SETB    C
015C EF                MOV     A,R7
015D 94F4              SUBB    A,#0F4H
015F EE                MOV     A,R6
0160 6480              XRL     A,#080H
0162 9481              SUBB    A,#081H
0164 501B              JNC     ?C0341
0166 7800        R     MOV     R0,#LOW wIVF
0168 120000      R     LCALL   L?0397
016B E500        E     MOV     A,IVF+01H
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 176 

016D 9F                SUBB    A,R7
016E FF                MOV     R7,A
016F E500        E     MOV     A,IVF
0171 9E                SUBB    A,R6
0172 FE                MOV     R6,A
0173 120000      E     LCALL   _abs
0176 C3                CLR     C
0177 EF                MOV     A,R7
0178 9402              SUBB    A,#02H
017A EE                MOV     A,R6
017B 6480              XRL     A,#080H
017D 9480              SUBB    A,#080H
017F 401E              JC      ?C0340
0181         ?C0341:
                                           ; SOURCE LINE # 2469
                                           ; SOURCE LINE # 2470
0181 7800        E     MOV     R0,#LOW InputSelection
0183 E2                MOVX    A,@R0
0184 7800        R     MOV     R0,#LOW i
0186 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 2471
0187 7800        E     MOV     R0,#LOW InputSelection
0189 E2                MOVX    A,@R0
018A 14                DEC     A
018B F2                MOVX    @R0,A
                                           ; SOURCE LINE # 2472
018C 7F64              MOV     R7,#064H
018E 120000      E     LCALL   _delay
                                           ; SOURCE LINE # 2473
0191 120000      E     LCALL   ClearPCInfo
                                           ; SOURCE LINE # 2474
0194 7800        R     MOV     R0,#LOW i
0196 E2                MOVX    A,@R0
0197 FF                MOV     R7,A
0198 120000      E     LCALL   _ChangeInput
                                           ; SOURCE LINE # 2475
019B         ?C0376:
019B 7800        R     MOV     R0,#LOW page
019D         ?C0377:
019D 8020              SJMP    ?C0378
                                           ; SOURCE LINE # 2477
019F         ?C0340:
                                           ; SOURCE LINE # 2478
019F 7F01              MOV     R7,#01H
01A1 120000      R     LCALL   _GetHpnVpn
;---- Variable 'vpn' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 2479
01A4 AD00        E     MOV     R5,IVF+01H
01A6 AC00        E     MOV     R4,IVF
01A8 120000      R     LCALL   _DecideVGAInputSource
;---- Variable 'cCurrentPCMode' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 2480
01AB 7800        R     MOV     R0,#LOW PcMode
01AD E2                MOVX    A,@R0
01AE 6F                XRL     A,R7
01AF 600C              JZ      ?C0342
                                           ; SOURCE LINE # 2481
                                           ; SOURCE LINE # 2482
                                           ; SOURCE LINE # 2483
                                           ; SOURCE LINE # 2484
                                           ; SOURCE LINE # 2485
01B1 120000      R     LCALL   L?0430
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 177 

01B4 120000      E     LCALL   _ChangeInput
                                           ; SOURCE LINE # 2486
                                           ; SOURCE LINE # 2487
01B7 120000      R     LCALL   L?0418
                                           ; SOURCE LINE # 2488
                                           ; SOURCE LINE # 2489
                                           ; SOURCE LINE # 2490
01BA 120000      R     LCALL   L?0389
                                           ; SOURCE LINE # 2491
01BD         ?C0342:
                                           ; SOURCE LINE # 2493
01BD 7800        R     MOV     R0,#LOW page
01BF         ?C0378:
01BF E2                MOVX    A,@R0
01C0 FB                MOV     R3,A
01C1 7DFF              MOV     R5,#0FFH
01C3 7F8A              MOV     R7,#08AH
01C5 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 2494
01C8         ?C0327:
01C8 22                RET     
01C9         L?0389:
01C9 7F64              MOV     R7,#064H
01CB 120000      E     LCALL   _delay
01CE 7BFF              MOV     R3,#0FFH
01D0 7DD0              MOV     R5,#0D0H
01D2 7F8A              MOV     R7,#08AH
01D4 120000      E     LCALL   _WriteI2C
01D7 7BFF              MOV     R3,#0FFH
01D9 7DD1              MOV     R5,#0D1H
01DB 7F8A              MOV     R7,#08AH
01DD 120000      E     LCALL   _WriteI2C
01E0 22                RET     
01E1         L?0417:
01E1 7BFF              MOV     R3,#0FFH
01E3 7DD0              MOV     R5,#0D0H
01E5 7F8A              MOV     R7,#08AH
01E7 120000      E     LCALL   _WriteI2C
01EA 7BFF              MOV     R3,#0FFH
01EC 7DD1              MOV     R5,#0D1H
01EE 7F8A              MOV     R7,#08AH
01F0 120000      E     LCALL   _WriteI2C
01F3 22                RET     
01F4         L?0418:
01F4 7DFF              MOV     R5,#0FFH
01F6 7F8A              MOV     R7,#08AH
01F8 120000      E     LCALL   _ReadI2C
01FB 7800        R     MOV     R0,#LOW page
01FD EF                MOV     A,R7
01FE F2                MOVX    @R0,A
01FF E4                CLR     A
0200 FB                MOV     R3,A
0201 7DFF              MOV     R5,#0FFH
0203 7F8A              MOV     R7,#08AH
0205 120000      E     LCALL   _WriteI2C
0208 22                RET     
0209         L?0425:
0209 120000      E     LCALL   _DisplayPCInfo
020C 7F01              MOV     R7,#01H
020E 120000      E     LCALL   _PanelFreeRun
0211 7F01              MOV     R7,#01H
0213 120000      E     LCALL   _PanelBlack
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 178 

0216 22                RET     
0217         L?0429:
0217 7DD0              MOV     R5,#0D0H
0219 7F8A              MOV     R7,#08AH
021B 120000      E     LCALL   _ReadI2C
021E 7800        R     MOV     R0,#LOW statusD0
0220 EF                MOV     A,R7
0221 F2                MOVX    @R0,A
0222 7DD1              MOV     R5,#0D1H
0224 7F8A              MOV     R7,#08AH
0226 120000      E     LCALL   _ReadI2C
0229 7800        R     MOV     R0,#LOW statusD1
022B EF                MOV     A,R7
022C F2                MOVX    @R0,A
022D 22                RET     
022E         L?0430:
022E 7800        E     MOV     R0,#LOW InputSelection
0230 E2                MOVX    A,@R0
0231 7800        R     MOV     R0,#LOW i
0233 F2                MOVX    @R0,A
0234 7800        E     MOV     R0,#LOW InputSelection
0236 E2                MOVX    A,@R0
0237 14                DEC     A
0238 F2                MOVX    @R0,A
0239 120000      E     LCALL   ClearPCInfo
023C 7800        R     MOV     R0,#LOW i
023E E2                MOVX    A,@R0
023F FF                MOV     R7,A
0240 22                RET     
             ; FUNCTION CheckPCinput (END)

             ; FUNCTION GetPCInputSourceName (BEGIN)
                                           ; SOURCE LINE # 2530
                                           ; SOURCE LINE # 2531
                                           ; SOURCE LINE # 2534
0000 7800        R     MOV     R0,#LOW PcMode
0002 E2                MOVX    A,@R0
0003 FF                MOV     R7,A
0004 C3                CLR     C
0005 942E              SUBB    A,#02EH
0007 5011              JNC     ?C0343
0009 EF                MOV     A,R7
000A 75F00F            MOV     B,#0FH
000D A4                MUL     AB
000E 2400        R     ADD     A,#LOW PcModeStr
0010 F9                MOV     R1,A
0011 7400        R     MOV     A,#HIGH PcModeStr
0013 35F0              ADDC    A,B
0015 FA                MOV     R2,A
0016 7BFF              MOV     R3,#0FFH
0018 8006              SJMP    ?C0379
001A         ?C0343:
                                           ; SOURCE LINE # 2535
001A 7BFF              MOV     R3,#0FFH
001C 7A00        R     MOV     R2,#HIGH ?SC_36
001E 7900        R     MOV     R1,#LOW ?SC_36
0020         ?C0379:
0020 7800        R     MOV     R0,#LOW ptr
0022 120000      E     LCALL   ?C?PSTPDATA
0025         ?C0344:
                                           ; SOURCE LINE # 2541
0025 7800        R     MOV     R0,#LOW ptr
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 179 

0027 120000      E     LCALL   ?C?PLDPDATA
                                           ; SOURCE LINE # 2542
002A         ?C0345:
002A 22                RET     
             ; FUNCTION GetPCInputSourceName (END)

             ; FUNCTION AutoAdjust (BEGIN)
                                           ; SOURCE LINE # 2544
                                           ; SOURCE LINE # 2545
                                           ; SOURCE LINE # 2546
0000 E4                CLR     A
0001 7800        R     MOV     R0,#LOW ret
0003 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 2548
0004 FB                MOV     R3,A
0005 7DFF              MOV     R5,#0FFH
0007 7F8A              MOV     R7,#08AH
0009 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 2549
000C 120000      E     LCALL   ClearOSDInfo
                                           ; SOURCE LINE # 2550
000F 120000      E     LCALL   DisplayAutoAdjust
                                           ; SOURCE LINE # 2551
0012 E4                CLR     A
0013 FF                MOV     R7,A
0014 120000      R     LCALL   _DetectAndSetForVGAInput
0017 7800        R     MOV     R0,#LOW ret
0019 EF                MOV     A,R7
001A F2                MOVX    @R0,A
                                           ; SOURCE LINE # 2552
001B 120000      E     LCALL   ClearAutoAdjust
                                           ; SOURCE LINE # 2553
001E E4                CLR     A
001F FF                MOV     R7,A
0020 120000      E     LCALL   _LCDPowerON
                                           ; SOURCE LINE # 2554
0023 120000      R     LCALL   L?0478
0026 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 2555
0029 120000      R     LCALL   L?0480
002C 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 2557
002F 7800        R     MOV     R0,#LOW ret
0031 E2                MOVX    A,@R0
0032 FF                MOV     R7,A
                                           ; SOURCE LINE # 2558
0033         ?C0346:
0033 22                RET     
             ; FUNCTION AutoAdjust (END)

C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 180 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


GetPhaseCurrent. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_GetHpnVpn . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  en . . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0000H  1
  vpn. . . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0001H  2
  hpn. . . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0003H  2
  sync . . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0005H  2
  SyncPol. . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
SetEnDet . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
RGBMin . . . . . . . . . . . . . . . .  PUBLIC   PDATA  U_LONG   0000H  4
_Mapping1. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
DWORD. . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
GetCoarse. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_LCDPowerON. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
GetCoarseValue . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_MeasureAndWait. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
GetHactiveEnd. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CAM_R. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Range4Coarse . . . . . . . . . . . . .  EXTERN   DATA   BIT      -----  1
_GetHactiveStartEE . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_SetVCORange . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CAM_BAR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ABR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
GetPPF . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_SetHactiveStart . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
GetHPN . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CAM_CAR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ACR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_CBR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_BCR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CheckPCCableStr. . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
AutoAdjust . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ret. . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0000H  1
GetVactiveStart. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
LastVPN. . . . . . . . . . . . . . . .  STATIC   PDATA  U_INT    0004H  2
ClearPCInfo. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
GetPHR . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
NumberStringType . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  11
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  width. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  BackColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  Radix. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  NumColor . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  MaxLen . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  PrePostCharLen . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  PrePostChar. . . . . . . . . . . . .  MEMBER   -----  ARRAY    0008H  3
GetOSDLang . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_SetCoarse . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_SetHactiveEnd . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_SavePhaseEE . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
UserRange. . . . . . . . . . . . . . .  EXTERN   CODE   STRUCT   -----  6
size_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
_delay . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
DTV_YPbPr_1080I_Reg. . . . . . . . . .  PUBLIC   CODE   ARRAY    0384H  56
SetHValueForPanel. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_GetVactiveStartEE . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_MoveActiveHpos. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 181 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  dir. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  add. . . . . . . . . . . . . . . . .  AUTO     PDATA  CHAR     0000H  1
  hstart . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0001H  2
  hend . . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0003H  2
_SetVactiveStart . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
GetVPN . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
StartNewDetect . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
HPosCurr . . . . . . . . . . . . . . .  PUBLIC   PDATA  U_CHAR   0006H  1
ResetPCValue . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_ConvertBasedOnInput . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  dat. . . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0000H  2
  dtmp . . . . . . . . . . . . . . . .  AUTO     PDATA  U_LONG   0002H  4
GetPVR . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
OutOfRangeStr. . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
GetHstart. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
AVMode . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
VPositionRange . . . . . . . . . . . .  PUBLIC   DATA   STRUCT   0000H  6
_SetPhase. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_SetVValueForPanel . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  VIstart. . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0000H  2
  PVR. . . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0002H  2
  VAN. . . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0004H  2
  VScale . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0006H  2
  VIsync . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0008H  2
  dtmp . . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    000AH  2
  VOsync . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   000CH  1
  VOback . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   000DH  1
SourceModeType . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
_SetPhaseValue . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  val. . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0000H  1
  phase. . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0001H  1
CAM_NUM. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
HPosMax. . . . . . . . . . . . . . . .  PUBLIC   PDATA  U_CHAR   0007H  1
_SetPCCoarseValue. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  val. . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0000H  1
  coarse . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0001H  2
_MoveActiveVpos. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  dir. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  add. . . . . . . . . . . . . . . . .  AUTO     PDATA  CHAR     0000H  1
_SetPVP. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_SetVactiveLen . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Flag4Bypass. . . . . . . . . . . . . .  PUBLIC   DATA   BIT      0001H  1
DTV_RGB_480I_Reg_Analog. . . . . . . .  PUBLIC   CODE   ARRAY    053CH  88
_ChangeInternPLL . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_XscaleD . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_RGBModeFieldDetect. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  flag . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0000H  1
  val. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
VPosCurr . . . . . . . . . . . . . . .  PUBLIC   PDATA  U_CHAR   0008H  1
CheckPCinput . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  statusD0 . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0000H  1
  statusD1 . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0001H  1
  i. . . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0002H  1
  page . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0003H  1
  dwIHF. . . . . . . . . . . . . . . .  AUTO     PDATA  U_LONG   0004H  4
  wIVF . . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0008H  2
  vpn. . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 182 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  cCurrentPCMode . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
AutoTuneClock. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  low. . . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0000H  2
  high . . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0002H  2
  i. . . . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0004H  2
  phase. . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0006H  1
  phasepeak. . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0007H  1
  j. . . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0008H  1
  phasemin . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0009H  1
  num. . . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    000AH  2
  RGBdiff. . . . . . . . . . . . . . .  AUTO     PDATA  U_LONG   000CH  4
  RGBmin . . . . . . . . . . . . . . .  AUTO     PDATA  U_LONG   0010H  4
GetVstart. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_DecideVGAInputSource. . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  vpn. . . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0000H  2
  ivf. . . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0002H  2
  _PcMode. . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0004H  1
_SavePCDataEE. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_I2CDeviceInitialize . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
DTV_RGB_480P_Reg_Analog. . . . . . . .  PUBLIC   CODE   ARRAY    0594H  88
AutoTunePhase. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0000H  1
  j. . . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0001H  1
  peak_j . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0002H  1
  min_j. . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0003H  1
  RGBmin . . . . . . . . . . . . . . .  AUTO     PDATA  U_LONG   0004H  4
_PanelFreeRun. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_SetADCandInputRegisterByVGAMode . . .  PUBLIC   CODE   PROC     0000H  -----
  mode . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0000H  1
  reg. . . . . . . . . . . . . . . . .  AUTO     PDATA  PTR      0001H  3
  fielddetect. . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0004H  1
  ret. . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0005H  1
GetHorizontalActiveArea. . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  hstart . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0000H  2
  hend . . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0002H  2
CAM_RAB_H. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
GetVend. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
VPosMax. . . . . . . . . . . . . . . .  PUBLIC   PDATA  U_CHAR   0009H  1
CAM_BA . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_AB . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
BYTE . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
TimeType . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  7
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  width. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  BackColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  Format . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  TimeColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  CursorColor. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
GetHSYNCPulse. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CAM_CA . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_AC . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_abs . . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CAM_BC . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_CB . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_XscaleU . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
DTV_YPbPr_1080I50A_Reg . . . . . . . .  PUBLIC   CODE   ARRAY    03BCH  56
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 183 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


SourceModeTypeEnum . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
DTV_YPbPr_1080I50B_Reg . . . . . . . .  PUBLIC   CODE   ARRAY    03F4H  60
PcMode . . . . . . . . . . . . . . . .  PUBLIC   PDATA  U_CHAR   000AH  1
struct_IdName. . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  17
  Id . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  Name . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0001H  16
EnumType . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  17
  Sz . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  ByLang . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  Str. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0002H  15
MenuType . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  4
  width. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  height . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  TitleColor . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  CursorColor. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
CAM_RAB_T. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_GetPCDataEE . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_ReadI2C . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_DetectAndSetForVGAInput . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  eflag. . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0000H  1
  VCORangeChged. . . . . . . . . . . .  AUTO     DATA   BIT      0000H  1
  i. . . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0001H  1
  vpn. . . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0002H  2
  vpn1 . . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0004H  2
  ivf. . . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0006H  2
  Failure. . . . . . . . . . . . . . .  LABEL    CODE   LABEL    -----  -----
  Success. . . . . . . . . . . . . . .  LABEL    CODE   LABEL    -----  -----
ClearEnDet . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
WORD . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
GetVerticalActiveArea. . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  vstart . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0000H  2
  vstart1. . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0002H  2
  vend . . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0004H  2
  off. . . . . . . . . . . . . . . . .  AUTO     PDATA  CHAR     0006H  1
cLastSyncLoss. . . . . . . . . . . . .  PUBLIC   PDATA  U_CHAR   000BH  1
GetWideModeEE. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
IsDTVInput . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
InputSelection . . . . . . . . . . . .  EXTERN   PDATA  U_CHAR   -----  1
DoMeasurement. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  coarse . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
GetPCInputSourceName . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ptr. . . . . . . . . . . . . . . . .  AUTO     PDATA  PTR      0000H  3
GetVSYNCPulse. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
GetHPosition . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
CAM_AR . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_BR . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_RB . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_CR . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_SetMeasureWindowH . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Register . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
_WriteI2C. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
DTV_YPbPr_720P50_Reg . . . . . . . . .  PUBLIC   CODE   ARRAY    0464H  52
PhaseRGB . . . . . . . . . . . . . . .  PUBLIC   PDATA  U_LONG   000CH  4
_SetHPosition. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  val. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_Set4WideScreen. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
GetVPosition . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 184 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  newv . . . . . . . . . . . . . . . .  AUTO     PDATA  INT      0000H  2
_PanelBlack. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_WriteADC_TW88 . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
NumType. . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  5
  PrePostCharLen . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  PrePostChar. . . . . . . . . . . . .  MEMBER   -----  ARRAY    0001H  4
IHF. . . . . . . . . . . . . . . . . .  EXTERN   DATA   U_LONG   -----  4
_SetMeasureWindowV . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
RegisterInfo . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  Min. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0000H  2
  Max. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0002H  2
  Default. . . . . . . . . . . . . . .  MEMBER   -----  INT      0004H  2
IsBypassmode . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_PCMDATA . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  22
  Support. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  HAN. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  VAN. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0003H  2
  IVF. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0005H  2
  CLOCK. . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0007H  2
  low. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0009H  2
  high . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000BH  2
  Hstart . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000DH  2
  Vstart . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000FH  2
  IPF. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0011H  2
  PPF. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0013H  2
  VBack. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0015H  1
_ChangeInput . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CAM_QUAD . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
RGBPeak. . . . . . . . . . . . . . . .  PUBLIC   PDATA  U_LONG   0010H  4
_SetVPosition. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  val. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  newv . . . . . . . . . . . . . . . .  AUTO     PDATA  INT      0000H  2
ClearOSDInfo . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
AutoPHPCalEnable . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
GetInputSelection. . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_Measure_VPN_IHF . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  p_vpn. . . . . . . . . . . . . . . .  AUTO     PDATA  PTR      0000H  3
  p_ihf. . . . . . . . . . . . . . . .  AUTO     PDATA  PTR      0003H  3
  ppf. . . . . . . . . . . . . . . . .  AUTO     PDATA  U_LONG   0006H  4
  hpn. . . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    000AH  2
DTV_YPbPr_480I_Reg . . . . . . . . . .  PUBLIC   CODE   ARRAY    031EH  52
DebugLevel . . . . . . . . . . . . . .  EXTERN   PDATA  U_CHAR   -----  1
IVF. . . . . . . . . . . . . . . . . .  EXTERN   DATA   U_INT    -----  2
_SaveHactiveEE . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
DefineMenu . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  16
  Icon . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0000H  2
  Desc . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0002H  3
  PreFnId. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  PostFnId . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  IconColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  DescColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
  Child. . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0009H  2
  Type . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000BH  1
  ActiveWithCursor . . . . . . . . . .  MEMBER   -----  U_CHAR   000CH  1
  Id . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000DH  1
  TypeData . . . . . . . . . . . . . .  MEMBER   -----  PTR      000EH  2
_SaveVBackPorchEE. . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 185 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


DisplayAutoAdjust. . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
VGAMode. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
DTV_YPbPr_720P_Reg . . . . . . . . . .  PUBLIC   CODE   ARRAY    0430H  52
SEQ. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
GetActiveRegion. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  vstart . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
  cDelta . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0000H  1
  pres . . . . . . . . . . . . . . . .  AUTO     PDATA  U_LONG   0001H  4
  scale. . . . . . . . . . . . . . . .  AUTO     PDATA  U_LONG   0005H  4
  ppf. . . . . . . . . . . . . . . . .  AUTO     PDATA  U_LONG   0009H  4
  period . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    000DH  2
  sync . . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    000FH  2
DTV_YPbPr_576I_Reg . . . . . . . . . .  PUBLIC   CODE   ARRAY    0352H  50
GetVBackPorch. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
DTV_YPbPr_480P_Reg . . . . . . . . . .  PUBLIC   CODE   ARRAY    0498H  50
ReadOut4 . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0000H  1
  dat. . . . . . . . . . . . . . . . .  AUTO     PDATA  U_LONG   0001H  4
wchar_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  CHAR     -----  1
InvertVSYNCPolarity. . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
LongRegisterInfo . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  Min. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  Max. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  Default. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
LastIHF. . . . . . . . . . . . . . . .  STATIC   PDATA  U_LONG   0014H  4
PictureInfo. . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  4
  Register_Addr. . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  EEPROM_Addr. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  Control_Range. . . . . . . . . . . .  MEMBER   -----  PTR      0002H  2
CAM_ABR_T3 . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ABR_T4 . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
DTV_RGB_480I_Reg . . . . . . . . . . .  PUBLIC   CODE   ARRAY    04FAH  22
DTV_YPbPr_576P_Reg . . . . . . . . . .  PUBLIC   CODE   ARRAY    04CAH  48
GetPhaseRGB. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  flag . . . . . . . . . . . . . . . .  STATIC   DATA   BIT      0000H  1
  _RGB . . . . . . . . . . . . . . . .  AUTO     PDATA  U_LONG   0000H  4
CAM_A. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_SaveVactiveEE . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
DisplayResultAndSetActiveRange . . . .  PUBLIC   CODE   PROC     0000H  -----
  Back . . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0000H  2
  Front. . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
CAM_B. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_C. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
DTV_RGB_720P_Reg . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0526H  22
ClearAutoAdjust. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_XScale2 . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CAM_D. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
DTVMode. . . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    02E6H  8
PcModeStr. . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0025H  705
_Printf. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
WideScreenMode . . . . . . . . . . . .  EXTERN   PDATA  U_CHAR   -----  1
SaveDefaultPCDataEE. . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_SetVBackPorch . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
DTV_RGB_480P_Reg . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0510H  22
PC_RGB_ADC_Reg . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    02EEH  48
CloseOSDMenu . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CAM_CAB. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
C51 COMPILER V8.16   MEASURE                                                               03/04/2011 15:51:17 PAGE 186 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


CAM_BAC. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ABC. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
PCMDATA. . . . . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
LastIVF. . . . . . . . . . . . . . . .  STATIC   PDATA  U_INT    0018H  2
GetHactiveStart. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
LastHPN. . . . . . . . . . . . . . . .  STATIC   PDATA  U_INT    001AH  2
_SaveCoarseEE. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_DisplayPCInfo . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   6440    ----
   CONSTANT SIZE    =   1516    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =     28     155
   DATA SIZE        =      6    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
