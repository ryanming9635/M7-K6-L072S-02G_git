C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 1   


C51 COMPILER V8.16, COMPILATION OF MODULE HS_DVRPROTOCOL
OBJECT MODULE PLACED IN .\Output\HS_DVRProtocol.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE HS_DVRProtocol.c COMPACT OPTIMIZE(9,SIZE) BROWSE INCDIR(.\Include\) DEBUG O
                    -BJECTEXTEND CODE LISTINCLUDE SYMBOLS PRINT(.\Source\HS_DVRProtocol.lst) OBJECT(.\Output\HS_DVRProtocol.obj)

line level    source

   1          //=====================================================================
   2          //      Work file: Hs_Protocol.c
   3          //
   4          //      This file is generating the HS protocol for DVR .
   5          //
   6          //                                                                                                                              
   7          //=====================================================================
   8          //******************************************************************************
   9          //  I N C L U D E    F I L E S
  10          //******************************************************************************
  11          #include "Config.h"
   1      =1  /*****************************************************************************/
   2      =1  /*                           System Configurations                           */
   3      =1  /*                                                      rev 0.10 include auto test                                               */
   4      =1  // 0.11 change DTV, PC input initial download data correct for Charge Pump
   5      =1  // 0.12 correct phase measurement routine '>>3'
   6      =1  // 0.13 enable function for SPI control... only EXT MCU case
   7      =1  // 0.14 corrected PC measurement......
   8      =1  // 0.0a test function only for CVBS, SVIDEO
   9      =1  // 0.15 corrected DTV scaler setting for panel resolutions
  10      =1  // 0.0b panel for AND 640x480 TICON panel
  11      =1  // 0.16 corrected COMPONENT scaler setting for panel resolutions        11/21/2007
  12      =1  // 0.0c automatic chip test
  13      =1  // 0.17 add monitor function, osd grid for writing grid
  14      =1  // 0.18 add component, dtv pc for analogpanel, 12/06/2007
  15      =1  // 0.19 correct pal input for CES, 12/20/2007
  16      =1  // 0.1a CCFL control, 12/28/2007
  17      =1  // 0.19 Multi Grid for Banking on Internal MCU  01/17/2008
  18      =1  // 0.20 CCFL contol for backlight brightness    01/21/2008
  19      =1  // 0.21 CCFL contol for backlight brightness    01/25/2008
  20      =1  // 0.22 phase setting 02/07/2008
  21      =1  // 0.221 display input correction 04/03/2008
  22      =1  // 0.23 PC, DTV mode, no signal display
  23      =1  // 0.24 PC Auto Color adjustment
  24      =1  // 0.25 revised PC Auto Clock adjustment - find divide number and phase
  25      =1  // 0.26 Digital RGB for TW8826
  26      =1  // 0.27 Correct LVDS control                                    08/22/2008
  27      =1  // 0.28 Add WSVGA resolution                                    10/23/2008
  28      =1  // 0.29 Add NEW GRID                                                    11/14/2008
  29      =1  // 0.30 Fix DTV input                                                   12/10/2008
  30      =1  // 0.31 Add 1080i23, 24, 25A, 25B                               01/20/2009
  31      =1  // 0.32 TCON setting FIX all mode                               01/22/2009
  32      =1  // 0.33 autodetect is auto on/off by dip sw1    02/02/2009
  33      =1  // 0.34 Fix autocolor function and clamp position 02/08/2009
  34      =1  /*****************************************************************************/
  35      =1  #ifndef __CONFIG_H__
  36      =1  #define __CONFIG_H__
  37      =1  
  38      =1  //#define INTERNAL_MCU -- defined by Project Compiler session
  39      =1  
  40      =1  
  41      =1  //-----------------------------------------------------------------------------
  42      =1  //              Firmware Version
  43      =1  //-----------------------------------------------------------------------------
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 2   

  44      =1  #define FWVER                   0x140                   // Rev 0.14
  45      =1  //-----------------------------------------------------------------------------
  46      =1  //              Compiler
  47      =1  //-----------------------------------------------------------------------------
  48      =1  #define KEILC                                           // Keil C 5.0
  49      =1  //-----------------------------------------------------------------------------
  50      =1  //              MPU Clock
  51      =1  //-----------------------------------------------------------------------------
  52      =1  #ifndef INTERNAL_MCU
  53      =1  //#define CLOCK_11M                                     // 11.0592MHz
  54      =1  #define CLOCK_22M                                       // 22.1184MHz
  55      =1  #else                                                           // INTERNAL_MCU
           =1 #define CLOCK_27M                                       // 27MHz
           =1 #define REG_START_ADDRESS       0xc000          // register start 0xc000, for page0, 0xc100-page1 
           =1 #endif
  59      =1  //-----------------------------------------------------------------------------
  60      =1  //              TW88 Version
  61      =1  //-----------------------------------------------------------------------------
  62      =1  #define TW8816
  63      =1  //-----------------------------------------------------------------------------
  64      =1  //              Options for Backlight control
  65      =1  //-----------------------------------------------------------------------------
  66      =1  //#define       BACKLIGHT_CCFL
  67      =1  //#define       BACKLIGHT_LED
  68      =1  #define BACKLIGHT_PWM
  69      =1  
  70      =1  //-----------------------------------------------------------------------------
  71      =1  //              Panel Resolution
  72      =1  //-----------------------------------------------------------------------------
  73      =1  // ---- Select Default Panel
  74      =1  //
  75      =1  //#define UXGA                                          // 1600 x 1200
  76      =1  //#define SXGA                                          // 1280 x 1024
  77      =1  //#define XGA  // 1024 x 768
  78      =1  #ifdef XGA
           =1         #define LVDS                                    
           =1         #define PWIDTH  1024
           =1         #define PHEIGHT 768
           =1 #endif
  83      =1  //#define SVGA                                          //  800 x 600
  84      =1  //#define VGA                                           //  640 x 480
  85      =1  #ifdef VGA
           =1         #define PWIDTH  640
           =1         #define PHEIGHT 480
           =1         //#define       HITACHI_640_B_160               //--> 640 x 160
           =1         #define AND_640_480
           =1 #endif
  91      =1  //#define WXGA                                          // 1280 x 768 (15:9) // 1366 x 768 (16:9)
  92      =1  #ifdef WXGA
           =1     //#define WX_SHARP_LQ106K1LA
           =1         #define PWIDTH  1280
           =1         #define PHEIGHT 768
           =1 #endif
  97      =1  //#define WSVGA                                         // 1024 x 600   *** only video mode
  98      =1  #ifdef WSVGA
           =1         #define PWIDTH  1024
           =1         #define PHEIGHT 600
           =1         #define UNIDEN_1024_600
           =1 #endif
 103      =1  #define WVGA                                            //  800 x 480
 104      =1  #ifdef WVGA
 105      =1          #define PWIDTH  800
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 3   

 106      =1          #define PHEIGHT 600//480
 107      =1          // If WVGA, you have to select panel.
 108      =1          //#define AU_10INCH
 109      =1          //#define WVGA_TPO
 110      =1          //#define SAMSUNG_10INCH
 111      =1          //#define SAMSUNG_TICONLESS_10INCH
 112      =1          //#define SHARP_TICONLESS_7INCH
 113      =1          #define AU_TICONLESS_7INCH
 114      =1          //#define INNOLUX_AT080TN03
 115      =1          //#define AU_TICONLESS_7INCH_CCFL
 116      =1          //#define CMO                   // CHIMEI panel
 117      =1          //#define AU_TICONLESS_10INCH
 118      =1          //#define HITACHI_T01
 119      =1          //#define HITACHI_TX23D12
 120      =1          //#define HITACHI_TX18D24
 121      =1          //#define HITACHI_TX18D16
 122      =1          //#define TMD_LTA070A320F
 123      =1          //#define TMD_LTA080B
 124      =1  #endif  //WVGA
 125      =1  //#define HVGA                                          //  480 x 320
 126      =1  //#define QVGA                                          //  320 x 240   *** only video mode
 127      =1  #ifdef QVGA
           =1         #define PWIDTH  320
           =1         #define PHEIGHT 240
           =1         //#define HITACHI_TX09D73
           =1         //#define AU_DELTARGB
           =1         //#define SHARP_LQ050Q5DR01
           =1         //#define SHARP_LQ035
           =1         //#define       TMD
           =1 #endif
 136      =1  
 137      =1  //#define WQVGA                                         //  480 x 234   *** only video mode
 138      =1  #ifdef WQVGA
           =1         #define PWIDTH  480
           =1         #define PHEIGHT 240
           =1         // If WQVGA, you have to select panel   
           =1     #define ANALOG_7INCH
           =1         //#define       PWIDTH  400
           =1         //#define PHEIGHT       240
           =1         //#define SHARP_LQ043T3DX02             //  400 x 237
           =1         //#define LG_ANALOG
           =1         //#define TMD_ANALOG                            //TMD_LTA05B352A
           =1         //#define       T_51945GD                               // Optorex Panel
           =1 #endif  // WQVGA
 150      =1  
 151      =1  //if LVDS pannel disable TICONLESS
 152      =1  
 153      =1  //-----------------------------------------------------------------------------
 154      =1  //---- Add Support One more panel with DIPSW#1
 155      =1  //---- Ex. Add Analog AU 7" Panel with Default Panel for evalution
 156      =1  //#define ADD_ANALOGPANEL               // Added Analog panel(AU7") from default set panel(expect WQVGA) with DIP #1 sw
             -itch.(DIP#1=L:ANALOG, H:DEFAULT)
 157      =1                                                          // It can't support WQVGA and ADD_ANALOGPANEL same time!!
 158      =1          //#define ADD_ANALOG_7INCH
 159      =1          //#define ADD_TMD_LTA05B352A
 160      =1                                                                          
 161      =1  //---- Support Wide panel function
 162      =1  #if (defined WXGA) || (defined WSVGA) || (defined WVGA) || (defined WQVGA)
 163      =1  #define WIDE_SCREEN                             // Can support 4 display mode, i.e. Normal, Wide, Full, Zoom
 164      =1  #endif                                                          // Tested panasonic WVGA panel.
 165      =1  
 166      =1  //-----------------------------------------------------------------------------
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 4   

 167      =1  //              Panel Vendor Specific
 168      =1  //-----------------------------------------------------------------------------
 169      =1  
 170      =1  //-----------------------------------------------------------------------------
 171      =1  //              TV Tuner
 172      =1  //-----------------------------------------------------------------------------
 173      =1  #define PHILIPS                         0
 174      =1  #define ALPS                            1               // ALPS, LG
 175      =1  #define TEMIC                           2
 176      =1  #define TVAVA                           3
 177      =1  #define LGTUNER                         4
 178      =1  #define SAMSUNGMUTITUNER        5
 179      =1  
 180      =1  #define TVTunerDevice           4
 181      =1  //-----------------------------------------------------------------------------
 182      =1  //              IR Remote Controller Type
 183      =1  //-----------------------------------------------------------------------------
 184      =1  //#define REMO_RC5                                      // RC5 style
 185      =1  #define TECHWELL_REMOCON
 186      =1  //#define REMO_NEC                                      // NEC style
 187      =1  //#define PHILIPS_REMOCON // New remocon 
 188      =1  
 189      =1  
 190      =1  //-----------------------------------------------------------------------------
 191      =1  //              I2C Device Access Address Mapping
 192      =1  //-----------------------------------------------------------------------------
 193      =1  
 194      =1  #define EEPROMI2CAddress        0xa0    // EEPROM (24C16)
 195      =1  #define TW88I2CAddress          0x8a    // TW880x
 196      =1  
 197      =1  #define MSPI2CAddress           0x80    // MSP
 198      =1  
 199      =1  //-----------------------------------------------------------------------------
 200      =1  //              Options for Possible Inputs
 201      =1  //-----------------------------------------------------------------------------
 202      =1  #define         AWT
 203      =1  //#define       E_Wintek 
 204      =1  //#define SUPPORT_SVIDEO                     //andy Awt 20090914
 205      =1  //#define SUPPORT_COMPONENT                     // support component analog to decoder//andy Awt 20090914
 206      =1  
 207      =1  //#define SUPPORT_DTV                           // support DTV input through component( to ADC ).//andy Awt 20090914
 208      =1  #define SUPPORT_PC                              // support PC function
 209      =1  //#define SUPPORT_DVI                           // support DVI input
 210      =1  #define SUPPORT_SDCARD
 211      =1  
 212      =1  //#define SUPPORT_RS485
 213      =1  
 214      =1  //-----------------------------------------------------------------------------
 215      =1  //              Options for Possible Standards
 216      =1  //              Default:NTSC
 217      =1  //-----------------------------------------------------------------------------
 218      =1  #define SUPPORT_PAL                     
 219      =1  #define SUPPORT_SECAM
 220      =1  #define SUPPORT_NTSC4           
 221      =1  #define SUPPORT_PALM    
 222      =1  #define SUPPORT_PALN            
 223      =1  #define SUPPORT_PAL60           
 224      =1  
 225      =1  
 226      =1  //#define ID_CHECK_BY_FW                        // in Video mode, check input system ID by firmware
 227      =1  
 228      =1  //-----------------------------------------------------------------------------
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 5   

 229      =1  //              Options for Debugging/Release
 230      =1  //-----------------------------------------------------------------------------
 231      =1  //#define SUPPORT_PATTERN                       // support LCD test pattern
 232      =1  
 233      =1  
 234      =1  #ifndef WQVGA
 235      =1          #ifndef QVGA
 236      =1  #define SUPPORT_OSDPOSITIONMOVE
 237      =1          #endif
 238      =1  #endif
 239      =1  
 240      =1  #define SERIAL                                  // include serial communication routines
 241      =1  
 242      =1  //#define SUPPORT_DEBUG                         // Support to use Read & Write in debug OSD Window by remocon.
 243      =1  
 244      =1  //#define DEBUG                                         // include debug information
 245      =1  #ifdef DEBUG
           =1         //#define DEBUG_MAIN
           =1         //#define DEBUG_TIME
           =1         //#define DEBUG_KEYREMO
           =1         //#define DEBUG_TW88
           =1         //#define DEBUG_DECODER
           =1         //#define DEBUG_I2C
           =1         //#define DEBUG_EEP
           =1         //#define DEBUG_OSD
           =1         //#define DEBUG_AUDIO
           =1         //#define DEBUG_SETPANEL
           =1         //#define DEBUG_DTV
           =1         #define DEBUG_PC
           =1         //#define DEBUG_PC_MEAS
           =1         #define DEBUG_PC_COLOR
           =1         //#define DEBUG_COMPONENT
           =1         //#define DEBUG_BANK
           =1         //#define DEBUG_PAUSE
           =1         //#define DEBUG_MCU
           =1 #endif
 265      =1  
 266      =1  #define AUTOCALC_PC                                     // in PC mode, Enable Auto Calcuration
 267      =1  //#define SUPPORT_USERCOLORFROMTXT      // Use color setting of text file in Color mode=USER MODE which is as B
             -rightness(Reg10), Contast(Reg11),
 268      =1                                                                          //    Sat_U(Reg13),Sat_V(Reg14),Sharpness(Reg12,Reg78)                                                                  
 269      =1  //#define SUPPORT_GAMMA
 270      =1  
 271      =1  //#define CHIP_MANUAL_TEST                      // DIPSW#1
 272      =1  
 273      =1  #ifndef INTERNAL_MCU
 274      =1  //#define NO_INITIALIZE                         // After Power switch turn on with DIP SW4 Enable(Low), or pressed MENU button 
             -for internal MCU
 275      =1                                      //     micom works to access only I2C bus by serial command.
 276      =1  #endif
 277      =1  
 278      =1  //#define SUPPORT_KRS_OSDDEMO           // For KRS Company Demo 
 279      =1  //#define SUPPORT_LINE_OSDDEMO
 280      =1  
 281      =1  //-----------------------------------------------------------------------------
 282      =1  //              Special Features
 283      =1  //-----------------------------------------------------------------------------
 284      =1  
 285      =1  #ifndef INTERNAL_MCU
 286      =1  //#define       SUPPORT_DELTA_RGB
 287      =1  #endif
 288      =1  #define SUPPORT_SELECTKEY                       // choose the keymap of using select key or left,right key.
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 6   

 289      =1  //-----------------------------------------------------------------------------
 290      =1  #endif  //__CONFIG_H__
  12          #include "typedefs.h"
   1      =1  #ifndef __TYPEDEFS__
   2      =1  #define __TYPEDEFS__
   3      =1  
   4      =1  
   5      =1  #define DATA            data
   6      =1  #define PDATA           pdata
   7      =1  #define IDATA           data
   8      =1  #define CODE            code
   9      =1  #define CODE_P
  10      =1  #define PDATA_P
  11      =1  #define IDATA_P
  12      =1  #define DATA_P
  13      =1  
  14      =1  #define INTERRUPT( num, name ) name() interrupt num
  15      =1  
  16      =1  #define _between(x, a, b)       (a<=x && x<=b)
  17      =1  #define _swap(a, b)                     { a^=b; b^=a; a^=b; }
  18      =1  
  19      =1  typedef unsigned char   Register;
  20      =1  typedef unsigned char   BYTE;
  21      =1  typedef unsigned short  WORD;
  22      =1  typedef unsigned long   DWORD;
  23      =1  
  24      =1  #define TRUE    1
  25      =1  #define FALSE   0
  26      =1  
  27      =1  //VInputStdDetectMode
  28      =1  #define AUTO    0
  29      =1  
  30      =1  //VInputStd
  31      =1  #define NTSC    1                       
  32      =1  #define PAL             2
  33      =1  #define SECAM   3
  34      =1  #define NTSC4   4
  35      =1  #define PALM    5
  36      =1  #define PALN    6
  37      =1  #define PAL60   7
  38      =1  
  39      =1  #define MAXINPUTSTD     PAL60+1 // 
  40      =1  
  41      =1  #define UNKNOWN 0xfe
  42      =1  #define NOINPUT 0       //0xff
  43      =1  
  44      =1  
  45      =1  
  46      =1  
  47      =1  #define NIL                     0xff
  48      =1  
  49      =1  enum SourceModeTypeEnum
  50      =1  {       
  51      =1          AVMode,            // 0
  52      =1          VGAMode,       // 1
  53      =1          CAM_D,         // 2
  54      =1          CAM_A,         // 3
  55      =1          CAM_B,         // 4
  56      =1          CAM_C,         // 5
  57      =1          CAM_R,         // 6
  58      =1          CAM_AB,        // 7
  59      =1          CAM_CR,        // 8
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 7   

  60      =1          CAM_AR,        // 9
  61      =1          CAM_RB,        // 10
  62      =1          CAM_AC,        // 11
  63      =1          CAM_CB,        // 12
  64      =1          CAM_RAB_T,     // 13
  65      =1          CAM_RAB_H,     // 14
  66      =1  
  67      =1          CAM_QUAD,      // 15
  68      =1          CAM_ABR_T3,    // 16
  69      =1          CAM_ABR_T4,    // 17
  70      =1          SEQ,           // 18
  71      =1          CAM_BA,                 //19
  72      =1          
  73      =1          CAM_BC,
  74      =1          CAM_BR,
  75      =1          CAM_CA,
  76      =1          CAM_ABC,
  77      =1          CAM_ABR,
  78      =1          CAM_ACR,
  79      =1          CAM_BAC,
  80      =1          CAM_BAR,
  81      =1          CAM_BCR,
  82      =1          CAM_CAB,
  83      =1          CAM_CAR,
  84      =1          CAM_CBR,        
  85      =1          CAM_NUM
  86      =1  };
  87      =1  
  88      =1  typedef unsigned char SourceModeType;
  89      =1  
  90      =1  #endif  /* __TYPEDEFS__ */
  13          #include "i2c.h"
   1      =1  #ifndef __I2C_H__
   2      =1  #define __I2C_H__
   3      =1  
   4      =1  
   5      =1  void I2CReadByte3(BYTE *);
   6      =1  void I2CRead8Byte(BYTE *);
   7      =1  #if 0
           =1 void I2CReadByteMSP(BYTE addr, BYTE index, BYTE *pd, BYTE cnt);
           =1 #endif
  10      =1  BYTE I2CWriteByte2(BYTE);
  11      =1  BYTE I2CWriteByte3(BYTE*);
  12      =1  BYTE I2CWrite8Byte(BYTE *);
  13      =1  
  14      =1  void I2CStart(void);
  15      =1  void I2CWriteData(BYTE value);
  16      =1  BYTE I2CReadData(void);
  17      =1  #if 0
           =1 BYTE I2CReadDataWithACK(void);
           =1 #endif
  20      =1  void I2CStop(void);
  21      =1  void I2Cdelay(void);
  22      =1  
  23      =1  
  24      =1  #define WriteTW88(a,b)          WriteI2C(TW88I2CAddress, a, b)
  25      =1  #define ReadTW88(a)                     ReadI2C(TW88I2CAddress, a)
  26      =1  
  27      =1  BYTE WriteTW88_Wait     (BYTE, BYTE);
  28      =1  void WriteADC           (BYTE, BYTE);
  29      =1  BYTE ReadADC            (BYTE);
  30      =1  BYTE ReadADC_TW88(BYTE index);
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 8   

  31      =1  void WriteADC_TW88(BYTE index, BYTE dat);
  32      =1  
  33      =1  void WriteEEP           (WORD, BYTE);
  34      =1  BYTE ReadEEP            (WORD);
  35      =1  
  36      =1  
  37      =1  BYTE ReadI2C            (BYTE addr, BYTE index);
  38      =1  void WriteI2C           (BYTE addr, BYTE index, BYTE val);
  39      =1  
  40      =1  void WriteI2Cn_(BYTE addr, BYTE *val, BYTE cnt);
  41      =1  void WriteI2Cn (BYTE addr, BYTE index, BYTE *val, BYTE cnt);
  42      =1  void WriteI2CnD(BYTE addr, BYTE index, BYTE val, BYTE cnt);
  43      =1  
  44      =1  void ReadI2Cmn(BYTE addr, BYTE wcnt, BYTE rcnt, BYTE *rwdata);
  45      =1  
  46      =1  #define         WriteADC(a,b)   WriteADC_TW88(a,b)
  47      =1  #define         ReadADC(a)              ReadADC_TW88(a)
  48      =1  
  49      =1  #endif  /* __I2C_H__ */
  14          #include "main.h"
   1      =1  #ifndef __MAIN__
   2      =1  #define __MAIN__
   3      =1  
   4      =1  #define ON                                      1
   5      =1  #define OFF                                     0
   6      =1  //#define Hs_debug
   7      =1  //#define       DVR
   8      =1  
   9      =1  //================= DIP SW Definition =========================================
  10      =1  ///#define PIXEL_SINGLE         P0_0
  11      =1  #define DIP_PANEL_SWITCH        P0_0    // Samsung(0) // Sharp-Noticon(1)
  12      =1  #define DIP_AUTO_DETECT         P0_1
  13      =1  #define DIP_EDGE_ENHANCE        P0_2
  14      =1  #define DIP_BW_STRETCH          P0_3
  15      =1  
  16      =1  #define Panel_Enable()          P4=P4|0x08 //andy 980908
  17      =1  #define Panel_Disable()                 P4=P4&0xf7
  18      =1  
  19      =1  #define SetBacklight()      P4=P4|0x04
  20      =1  #define clrBacklight()      P4=P4&0xfb
  21      =1  
  22      =1  
  23      =1  //InputSelection
  24      =1  struct struct_IdName {
  25      =1          BYTE    Id;
  26      =1          BYTE    Name[16];
  27      =1  };
  28      =1  
  29      =1  #define CH_TW2835              1
  30      =1  #define CH_CAMD                2
  31      =1  #define CH_AV                  3
  32      =1  #define PC                                         7
  33      =1  #define ChineseDefaultMenu   8
  34      =1  
  35      =1  #define SVIDEO                          2
  36      =1  #define COMPONENT                       3
  37      =1  //#define ANALOGDTV                     4
  38      =1  #define DTV                                     4
  39      =1  #define TV                                      5
  40      =1  #define SCART                           6
  41      =1  
  42      =1  #define DIGITALVGA                      8
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 9   

  43      =1  
  44      =1  #define AIRTV                           0 //9
  45      =1  #define CABLETV                         1 //0xa
  46      =1  
  47      =1  
  48      =1  #define TVTUNER                         0xd             //10
  49      =1  #define MUTE                            1       
  50      =1  #define MENU                            2       
  51      =1  #define TVVOL                           4       
  52      =1  #define CC                                      8       
  53      =1  #define INPUTINFO                       0x10
  54      =1  #define PCINFO                          0x20
  55      =1  #define GAUGEINFO           0x40
  56      =1  //#define RATINGINFO                    0x40
  57      =1  #define TVCHN                           0x80
  58      =1  //#define MUTE                          0x40
  59      =1  
  60      =1  #define YPBPR_480i                      0
  61      =1  #define YPBPR_576i                      1
  62      =1  #define YPBPR_480p                      2
  63      =1  #define YPBPR_576p                      3
  64      =1  #define YPBPR_1080i                     4
  65      =1  #define YPBPR_720p                      5
  66      =1  #define YPBPR_720p50            6
  67      =1  
  68      =1  
  69      =1  //--------------------------- P0 Define -----------------------------
  70      =1  #define SEL_MIX                 P0_6    // 
  71      =1  //--------------------------- P1 Define -----------------------------
  72      =1  #define SEL_DVI                 P3_5    //LJY062001             
  73      =1  
  74      =1  #define TW88HWReset                     P3_4    //LJY001010 //LJY000721
  75      =1  #define PowerUp             P1_4
  76      =1  //======================= CDS Control ================================= 
  77      =1  #define CDS_CTRL           P1_5
  78      =1  extern BYTE     SelectModeType;
  79      =1  extern BYTE InputSelection;
  80      =1  extern BYTE SEQTime;
  81      =1  extern BYTE     Priority;
  82      =1  extern BYTE AutoDayNight;
  83      =1  extern BYTE PowerFlag;
  84      =1  
  85      =1  BYTE keyIn(void);
  86      =1  void TimerForRemocon(void);
  87      =1  void TimerForTick(void);
  88      =1  void DisableRemoconInt(void);
  89      =1  BYTE SetSupport_remocon(BYTE newd);
  90      =1  
  91      =1  void delay(BYTE cnt);
  92      =1  
  93      =1  BYTE RS_ready(void);
  94      =1  BYTE RS_rx(void);
  95      =1  void RS_tx(BYTE tx_buf);
  96      =1  
  97      =1  BYTE RS2_rx(void);
  98      =1  void RS2_tx(BYTE tx_buf);
  99      =1  
 100      =1  void NewLine(void);
 101      =1  void PutsP(PDATA_P BYTE *ptr);
 102      =1  #ifdef Hs_debug
           =1 void MonWriteI2C(BYTE addr, BYTE index, BYTE val);
           =1 BYTE MonReadI2C(BYTE addr, BYTE index);
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 10  

           =1 #endif
 106      =1  BYTE Asc1Bin(BYTE asc);
 107      =1  BYTE Asc2Bin(PDATA_P BYTE *s);
 108      =1  
 109      =1  void I2CDeviceInitialize( CODE_P BYTE *RegSet);
 110      =1  
 111      =1  //void RestartSystemClock(WORD clock_hm);
 112      =1  WORD GetTime_ms(void);
 113      =1  BYTE GetTime_H(void);
 114      =1  BYTE GetTime_M(void);
 115      =1  void ChangeTime_H( char add );
 116      =1  void ChangeTime_M( char add );
 117      =1  //WORD GetWakeupTime(void);
 118      =1  //void SetWakeupTime(WORD wtime);
 119      =1  
 120      =1  
 121      =1  //WORD GetOffTime(void);
 122      =1  //void SetOffTime(WORD wtime);
 123      =1  //BYTE GetSleepTimer(void);
 124      =1  //void SetSleepTimer(BYTE stime);
 125      =1  WORD DiffTime_ms( WORD stime, WORD etime );
 126      =1  //void SetLastBlockedTime(void);
 127      =1  void SetLastCCTime(void);                               //ljy010904...CC_FIX_CLEAR_ON_TIME
 128      =1  
 129      =1  void SetOSDLastKeyInTime(void);
 130      =1  WORD GetOSDLastKeyInTime(void);
 131      =1  WORD GetIVF(void);
 132      =1  DWORD GetIHF(void);
 133      =1  BYTE ReadVInputSTD(void);
 134      =1  void SetVInputStd(BYTE newd);
 135      =1  BYTE GetVInputStd(void);
 136      =1  BYTE GetInputSelection(void);
 137      =1  #ifdef ADD_ANALOGPANEL
           =1 BYTE IsAnalogOn(void);
           =1 #endif
 140      =1  void InitVideoData(BYTE src);
 141      =1  void ChangeVInputStdDetectMode(BYTE val);
 142      =1  BYTE GetVInputStdInx(void);
 143      =1  
 144      =1  void MonWriteI2Cn_(BYTE addr, BYTE *val, BYTE cnt) ;
 145      =1  
 146      =1  ///void Usage(void);
 147      =1  #ifdef Hs_debug
           =1         void Prompt(void);
           =1 #endif
 150      =1  void DebugKeyIn(BYTE ikey);
 151      =1  void DVIPowerDown(bit flag);
 152      =1  void PowerDown_XTAL(bit flag);
 153      =1  
 154      =1  void ChangeInput(BYTE newsel);
 155      =1  
 156      =1  
 157      =1  void WaitPowerOn(void);
 158      =1  void PowerOff(void);
 159      =1  BYTE GetNextInputSelection(void);
 160      =1  
 161      =1  BYTE WantToStopTVScan(void);
 162      =1  
 163      =1  //BYTE IsTW8801(void);
 164      =1  //BYTE IsTW8803(void);
 165      =1  //BYTE ConvertVideoVSAT(BYTE reg);
 166      =1  
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 11  

 167      =1  BYTE IsNoInput(void);
 168      =1  void LoadEEPROM (void);
 169      =1  void Hs_InitVars(void);
 170      =1  void AdjustAutoDayNight(BYTE val);
 171      =1  void ACCPowerControl(void);
 172      =1  struct RegisterInfo
 173      =1  {
 174      =1     int  Min;
 175      =1     int  Max;
 176      =1     int  Default;
 177      =1  };
 178      =1  struct LongRegisterInfo
 179      =1  {
 180      =1     WORD Min;
 181      =1     WORD Max;
 182      =1     WORD Default;
 183      =1  };
 184      =1  
 185      =1  #endif  // __MAIN__
  15          #include "tw88.h"
   1      =1  #ifndef __TW88__
   2      =1  #define __TW88__
   3      =1  
   4      =1  #include "main.h"
   1      =2  #ifndef __MAIN__
           =2 #define __MAIN__
           =2 
           =2 #define ON                                      1
           =2 #define OFF                                     0
           =2 //#define Hs_debug
           =2 //#define       DVR
           =2 
           =2 //================= DIP SW Definition =========================================
           =2 ///#define PIXEL_SINGLE         P0_0
           =2 #define DIP_PANEL_SWITCH        P0_0    // Samsung(0) // Sharp-Noticon(1)
           =2 #define DIP_AUTO_DETECT         P0_1
           =2 #define DIP_EDGE_ENHANCE        P0_2
           =2 #define DIP_BW_STRETCH          P0_3
           =2 
           =2 #define Panel_Enable()          P4=P4|0x08 //andy 980908
           =2 #define Panel_Disable()                 P4=P4&0xf7
           =2 
           =2 #define SetBacklight()      P4=P4|0x04
           =2 #define clrBacklight()      P4=P4&0xfb
           =2 
           =2 
           =2 //InputSelection
           =2 struct struct_IdName {
           =2         BYTE    Id;
           =2         BYTE    Name[16];
           =2 };
           =2 
           =2 #define CH_TW2835              1
           =2 #define CH_CAMD                2
           =2 #define CH_AV                  3
           =2 #define PC                                         7
           =2 #define ChineseDefaultMenu   8
           =2 
           =2 #define SVIDEO                          2
           =2 #define COMPONENT                       3
           =2 //#define ANALOGDTV                     4
           =2 #define DTV                                     4
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 12  

           =2 #define TV                                      5
           =2 #define SCART                           6
           =2 
           =2 #define DIGITALVGA                      8
           =2 
           =2 #define AIRTV                           0 //9
           =2 #define CABLETV                         1 //0xa
           =2 
           =2 
           =2 #define TVTUNER                         0xd             //10
           =2 #define MUTE                            1       
           =2 #define MENU                            2       
           =2 #define TVVOL                           4       
           =2 #define CC                                      8       
           =2 #define INPUTINFO                       0x10
           =2 #define PCINFO                          0x20
           =2 #define GAUGEINFO           0x40
           =2 //#define RATINGINFO                    0x40
           =2 #define TVCHN                           0x80
           =2 //#define MUTE                          0x40
           =2 
           =2 #define YPBPR_480i                      0
           =2 #define YPBPR_576i                      1
           =2 #define YPBPR_480p                      2
           =2 #define YPBPR_576p                      3
           =2 #define YPBPR_1080i                     4
           =2 #define YPBPR_720p                      5
           =2 #define YPBPR_720p50            6
           =2 
           =2 
           =2 //--------------------------- P0 Define -----------------------------
           =2 #define SEL_MIX                 P0_6    // 
           =2 //--------------------------- P1 Define -----------------------------
           =2 #define SEL_DVI                 P3_5    //LJY062001             
           =2 
           =2 #define TW88HWReset                     P3_4    //LJY001010 //LJY000721
           =2 #define PowerUp             P1_4
           =2 //======================= CDS Control ================================= 
           =2 #define CDS_CTRL           P1_5
           =2 extern BYTE     SelectModeType;
           =2 extern BYTE InputSelection;
           =2 extern BYTE SEQTime;
           =2 extern BYTE     Priority;
           =2 extern BYTE AutoDayNight;
           =2 extern BYTE PowerFlag;
           =2 
           =2 BYTE keyIn(void);
           =2 void TimerForRemocon(void);
           =2 void TimerForTick(void);
           =2 void DisableRemoconInt(void);
           =2 BYTE SetSupport_remocon(BYTE newd);
           =2 
           =2 void delay(BYTE cnt);
           =2 
           =2 BYTE RS_ready(void);
           =2 BYTE RS_rx(void);
           =2 void RS_tx(BYTE tx_buf);
           =2 
           =2 BYTE RS2_rx(void);
           =2 void RS2_tx(BYTE tx_buf);
           =2 
           =2 void NewLine(void);
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 13  

           =2 void PutsP(PDATA_P BYTE *ptr);
           =2 #ifdef Hs_debug
           =2 void MonWriteI2C(BYTE addr, BYTE index, BYTE val);
           =2 BYTE MonReadI2C(BYTE addr, BYTE index);
           =2 #endif
           =2 BYTE Asc1Bin(BYTE asc);
           =2 BYTE Asc2Bin(PDATA_P BYTE *s);
           =2 
           =2 void I2CDeviceInitialize( CODE_P BYTE *RegSet);
           =2 
           =2 //void RestartSystemClock(WORD clock_hm);
           =2 WORD GetTime_ms(void);
           =2 BYTE GetTime_H(void);
           =2 BYTE GetTime_M(void);
           =2 void ChangeTime_H( char add );
           =2 void ChangeTime_M( char add );
           =2 //WORD GetWakeupTime(void);
           =2 //void SetWakeupTime(WORD wtime);
           =2 
           =2 
           =2 //WORD GetOffTime(void);
           =2 //void SetOffTime(WORD wtime);
           =2 //BYTE GetSleepTimer(void);
           =2 //void SetSleepTimer(BYTE stime);
           =2 WORD DiffTime_ms( WORD stime, WORD etime );
           =2 //void SetLastBlockedTime(void);
           =2 void SetLastCCTime(void);                               //ljy010904...CC_FIX_CLEAR_ON_TIME
           =2 
           =2 void SetOSDLastKeyInTime(void);
           =2 WORD GetOSDLastKeyInTime(void);
           =2 WORD GetIVF(void);
           =2 DWORD GetIHF(void);
           =2 BYTE ReadVInputSTD(void);
           =2 void SetVInputStd(BYTE newd);
           =2 BYTE GetVInputStd(void);
           =2 BYTE GetInputSelection(void);
           =2 #ifdef ADD_ANALOGPANEL
           =2 BYTE IsAnalogOn(void);
           =2 #endif
           =2 void InitVideoData(BYTE src);
           =2 void ChangeVInputStdDetectMode(BYTE val);
           =2 BYTE GetVInputStdInx(void);
           =2 
           =2 void MonWriteI2Cn_(BYTE addr, BYTE *val, BYTE cnt) ;
           =2 
           =2 ///void Usage(void);
           =2 #ifdef Hs_debug
           =2         void Prompt(void);
           =2 #endif
           =2 void DebugKeyIn(BYTE ikey);
           =2 void DVIPowerDown(bit flag);
           =2 void PowerDown_XTAL(bit flag);
           =2 
           =2 void ChangeInput(BYTE newsel);
           =2 
           =2 
           =2 void WaitPowerOn(void);
           =2 void PowerOff(void);
           =2 BYTE GetNextInputSelection(void);
           =2 
           =2 BYTE WantToStopTVScan(void);
           =2 
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 14  

           =2 //BYTE IsTW8801(void);
           =2 //BYTE IsTW8803(void);
           =2 //BYTE ConvertVideoVSAT(BYTE reg);
           =2 
           =2 BYTE IsNoInput(void);
           =2 void LoadEEPROM (void);
           =2 void Hs_InitVars(void);
           =2 void AdjustAutoDayNight(BYTE val);
           =2 void ACCPowerControl(void);
           =2 struct RegisterInfo
           =2 {
           =2    int  Min;
           =2    int  Max;
           =2    int  Default;
           =2 };
           =2 struct LongRegisterInfo
           =2 {
           =2    WORD Min;
           =2    WORD Max;
           =2    WORD Default;
           =2 };
           =2 
           =2 #endif  // __MAIN__
   5      =1  
   6      =1  //Value for register 0x44
   7      =1  //#define DECODER_YCbCr         0x08            //xxxx bbxx
   8      =1  //#define RGB_RGB                               0x0C
   9      =1  
  10      =1  #define TW88_FPLL0                      0xf9
  11      =1  #define TW88_FPLL1                      0xfa
  12      =1  #define TW88_FPLL2                      0xfb
  13      =1  #define TW88_FSS                        0xfc
  14      =1  #define TW88_FSS_PD                     0xfd
  15      =1  #define TW88_PLL_DIV            0xfe
  16      =1  
  17      =1  //#define TW88_XSCALE                   0x5d
  18      =1  //#define TW88_YSCALE                   0x5e
  19      =1  
  20      =1  #define TW88_XUSCALELO          0x60
  21      =1  #define TW88_XDSCALELO          0x61
  22      =1  #define TW88_YUSCALELO          0x62
  23      =1  #define TW88_XYSCALEHI          0x63
  24      =1  #define TW88_XUSCALEFINE        0x69
  25      =1  #define TW88_YUSCALEFINE        0x6a
  26      =1  
  27      =1  //Power Mgt
  28      =1  #define POWER_OFF                       0
  29      =1  #define POWER_STANDBY           1
  30      =1  #define POWER_SUSPEND           2
  31      =1  #define POWER_ON                        3
  32      =1  
  33      =1  //void TWChipsDetect(void);
  34      =1  void SetAutoDetectStd(void);
  35      =1  void ClearAutoDetectStd(BYTE);
  36      =1  void I2CDeviceInitialize( CODE_P BYTE *RegSet);
  37      =1  
  38      =1  
  39      =1  //0x63.. Register Group
  40      =1  #define GROUP_YCbCr                     0x40
  41      =1  #define GROUP_RGB                       0
  42      =1  #define SelectPanelAttrRegGroup(A)                              WriteTW88(0x70, (ReadTW88(0x70) & 0xbf) | A)
  43      =1  
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 15  

  44      =1  //#if defined TW8801 || defined TW8803
  45      =1  #define FB_MAIN         2
  46      =1  #define FB_NORMAL       1
  47      =1  #define FB_RGB          0
  48      =1  //void SetFBmode( BYTE mode );
  49      =1  //#endif // TW8801
  50      =1  
  51      =1  
  52      =1  //=============================================================================
  53      =1  //                                   LCD Functions   
  54      =1  //=============================================================================
  55      =1  BYTE GetLCDPowerState(void);
  56      =1  void SetLCDPowerState(BYTE dat);
  57      =1  
  58      =1  BYTE IsFreeRun(void);
  59      =1  void PanelFreeRun(BYTE on);
  60      =1  void PanelBlack(BYTE on);
  61      =1  
  62      =1  void PanelMute(BYTE on);
  63      =1  
  64      =1  void LCDPowerON(BYTE mute); 
  65      =1  void LCDPowerOFF(void);
  66      =1  #ifdef Hs_debug
           =1 void LCDPower(void);
           =1 #endif
  69      =1  void DPMSmodeOFF(void);
  70      =1  void DPMSmodeON(void);
  71      =1  //=============================================================================
  72      =1  //                              Get PC Parameter Functions   
  73      =1  //=============================================================================
  74      =1  void GetInitPanelAttribute1(void);
  75      =1  //void GetInitPanelAttribute2(void);
  76      =1  void DefaultPanelAttributeForVideo(void);
  77      =1  void SetPVR(WORD pvr);
  78      =1  void SetPHR(WORD phr);
  79      =1  WORD GetPVR(void);
  80      =1  WORD GetPHR(void);
  81      =1  WORD GetHPN(void);
  82      =1  WORD GetVPN(void);
  83      =1  
  84      =1  //WORD GetVactive(void);
  85      =1  
  86      =1  WORD GetHstart(void);
  87      =1  WORD GetHend(void);
  88      =1  WORD GetVstart(void);
  89      =1  WORD GetVend(void);
  90      =1  void TuneLineBuffer(BYTE field);
  91      =1  void TuneLineBuffer4Video(BYTE field);
  92      =1  
  93      =1  #if defined (SUPPORT_DTV)
           =1 void SetCoarstForDTV(BYTE en);
           =1 #endif
  96      =1  
  97      =1  WORD GetHactiveStart(void);
  98      =1  WORD GetHactiveEnd(void);
  99      =1  WORD GetVactiveStart(void);
 100      =1  //WORD GetVactiveLen(void);
 101      =1  BYTE GetVBackPorch(void);
 102      =1  void SetVBackPorch(BYTE val);
 103      =1  WORD GetPHP(void);
 104      =1  void SetPHP(WORD php);
 105      =1  void SetPVP(WORD period);
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 16  

 106      =1  WORD GetPVP(void);
 107      =1  //void SetPanelRelatedRegisters(void);
 108      =1  //BYTE ChangedHPN(void);
 109      =1  //WORD GetVSUD(void);
 110      =1  
 111      =1  void SetDefaultPLL(void);
 112      =1  //void SetDefaultFPHSperiod(void);
 113      =1  //BYTE CalcPHP(DWORD ppf, BYTE tol);
 114      =1  //void ChangeFPHSperiod4DecoderInput(WORD vsud, BYTE tol);
 115      =1  
 116      =1  //-------------------------------------------------------------------
 117      =1  //                  Set Active Region Functions
 118      =1  //-------------------------------------------------------------------
 119      =1  void SetHactiveStart(WORD hstart);
 120      =1  void SetHactiveEnd(WORD hend);
 121      =1  void SetVactiveStart(WORD vstart);
 122      =1  //void SetVactiveLen(WORD van, WORD vstart);
 123      =1  void SetVactiveLen(WORD van);
 124      =1  //=============================================================================
 125      =1  //                         Set Measurement Window Functions   
 126      =1  //=============================================================================
 127      =1  void SetMeasureWindowH(WORD start, WORD stop);
 128      =1  void SetMeasureWindowV(WORD start, WORD stop);
 129      =1  //=============================================================================
 130      =1  //                              Video Input Functions   
 131      =1  //=============================================================================
 132      =1  BYTE IsVideoInput(void);
 133      =1  BYTE DetectDecoderInput(void);
 134      =1  //=============================================================================
 135      =1  //
 136      =1  //=============================================================================
 137      =1  void AutoPHPCalEnable(void);
 138      =1  void AutoPHPCalDisable(void);
 139      =1  
 140      =1  void MakeStartInt(void);
 141      =1  void AVGAInput(void);
 142      =1  void DVIInput(void);
 143      =1  //void DVGAInput(void);
 144      =1  void DisableDVGA(void);
 145      =1  
 146      =1  void COMPOSITE1Input(void);
 147      =1  void COMPOSITE2Input(void);
 148      =1  void COMPOSITE3Input(void);
 149      =1  
 150      =1  void SVIDEOInput(void);
 151      =1  void COMPONENTInput(void);
 152      =1  void ANALOGDTVInput(void);
 153      =1  void DTVInput(void);
 154      =1  void TVInput(void);
 155      =1  void SCARTInput(void);
 156      =1  
 157      =1  //=============================================================================
 158      =1  //                          Measurement Functions
 159      =1  //=============================================================================
 160      =1  ///void SetPanelBitOrder(BYTE swap);
 161      =1  //void SetPanelSingleDouble(BYTE single);
 162      =1  
 163      =1  BYTE MeasureAndWait(BYTE flag);
 164      =1  
 165      =1  //WORD GetHCounter1(BYTE field);
 166      =1  //void SetHInitial(BYTE field, WORD counter);
 167      =1  //=============================================================================
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 17  

 168      =1  //                          Invert Polarity Functions
 169      =1  //=============================================================================
 170      =1  void InvertHSYNCPolarity(void);
 171      =1  void InvertVSYNCPolarity(void);
 172      =1  //=============================================================================
 173      =1  //            Interrupt / SW Reset Control Functions
 174      =1  //=============================================================================
 175      =1  void SetInt(void);
 176      =1  //void ClearInt(void);
 177      =1  void SetEnDet(void);
 178      =1  void ClearEnDet(void);
 179      =1  void SWReset(void);
 180      =1  //void ClearSYNCLossStatus(void);
 181      =1  //void ClearSYNCChangeStatus(void);
 182      =1  //=============================================================================
 183      =1  //
 184      =1  //=============================================================================
 185      =1  BYTE IsBypassmode(void);
 186      =1  //BYTE IsInteraced(void);
 187      =1  void Clear_bypass(void);
 188      =1  void MaskOnSYNCInt(void);
 189      =1  void MaskOffSYNCInt(void);
 190      =1  //=============================================================================
 191      =1  //                                    ZoomControl
 192      =1  //=============================================================================
 193      =1  void BypassZoom(void);
 194      =1  
 195      =1  void XscaleU(DWORD scale);
 196      =1  void XscaleD(DWORD scale);
 197      =1  void XScale2(DWORD scale);
 198      =1  void YScale2(DWORD scale);
 199      =1  WORD GetYScale(void);
 200      =1  //=============================================================================
 201      =1  //
 202      =1  //=============================================================================
 203      =1  WORD GetHSYNCPulse(void);
 204      =1  WORD GetVSYNCPulse(void);
 205      =1  //#if defined TW8801 || defined TW8803
 206      =1  WORD GetRelativePosition(void);
 207      =1  //#endif
 208      =1  //=============================================================================
 209      =1  //                                                              MISC2 for decoder
 210      =1  //=============================================================================
 211      =1  #define BLUE_DECODER            2
 212      =1  #define BLACK_DECODER           0
 213      =1  
 214      =1  BYTE ForceDecoderOutput(BYTE color);
 215      =1  BYTE ClearForcedDecoderOutput(void);
 216      =1  //=============================================================================
 217      =1  //                                                              CC and EDS
 218      =1  //=============================================================================
 219      =1  BYTE GetCCStatus(void);
 220      =1  void DisableCC(void);
 221      =1  void EnableCC(void);
 222      =1  BYTE GetCCData(void);
 223      =1  BYTE IsCCEnabled(void);
 224      =1  void EnableEDS(void);
 225      =1  void DisableEDS(void);
 226      =1  void RecoverCCOverflow(void);
 227      =1  
 228      =1  #define CCFIFOHalfFull()                        (ReadDecoder(CSTATUS) & 0x04)
 229      =1  //=============================================================================
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 18  

 230      =1  //                                                              Internal PLL
 231      =1  //=============================================================================
 232      =1  BYTE GetPOST(void);
 233      =1  void SetPLLS(BYTE plls);
 234      =1  BYTE GetREFDM(void);
 235      =1  void SetREFDM(BYTE refdm);
 236      =1  DWORD GetFBDN(void);
 237      =1  void SetFBDN(WORD fbdn, BYTE vcsel);
 238      =1  DWORD GetPPF(void);
 239      =1  void ChangeInternPLL(DWORD _PPF);
 240      =1  
 241      =1  //=============================================================================
 242      =1  //                                                              Macros for attribute
 243      =1  //=============================================================================
 244      =1  //#define       GetOSDTransReg()                                                ReadTW88(0xAE)
 245      =1  //#define SetOSDTransReg(AlphaV)                                        WriteTW88(0xAE, (BYTE)AlphaV )
 246      =1  
 247      =1  #define GetPanelContrastReg(gccolor)                    ReadTW88(0x71+gccolor)
 248      =1  #define SetPanelContrastReg(sccolor, cval)              WriteTW88(0x71+sccolor,cval)
 249      =1  
 250      =1  #define GetPanelBrightnessReg(gbcolor)                  ReadTW88(0x74+gbcolor);
 251      =1  #define SetPanelBrightnessReg(sbcolor, bval)    WriteTW88(0x74+sbcolor,bval);
 252      =1  
 253      =1  #define SetDTVBrightnessReg(bval)                               WriteTW88(0x74,bval);
 254      =1  
 255      =1  #define GetPanelSaturationReg(gbcolor)                  ReadTW88(0x72+gbcolor);
 256      =1  #define SetPanelSaturationReg(sbcolor, bval)    WriteTW88(0x72+sbcolor,bval);
 257      =1  
 258      =1  #define SetPanelSharpnessReg(bval)                              WriteTW88(0x78,((bval&0x07)|0x38) );
 259      =1  
 260      =1  #define SetPanelHueReg(bval)                                    WriteTW88(0x70, (ReadTW88(0x70) & 0xc0 | (bval)) );
 261      =1  
 262      =1  #define GetVideoContrastReg()                                   ReadDecoder(CONTRAST)
 263      =1  #define SetVideoContrastReg(vcval)                              WriteDecoder(CONTRAST, vcval)
 264      =1  
 265      =1  #define GetVideoBrightnessReg()                                 ReadDecoder(BRIGHT)
 266      =1  #define SetVideoBrightnessReg(vbval)                    WriteDecoder(BRIGHT, vbval )
 267      =1  
 268      =1  #define GetVideoSaturationReg(gvstype)                  ReadDecoder(SAT_U+gvstype)
 269      =1  #define SetVideoSaturationReg(svstype, vsval)   WriteDecoder(SAT_U+svstype,     vsval)
 270      =1  
 271      =1  #define GetVideoHueReg()                                                ReadDecoder(HUE)
 272      =1  #define SetVideoHueReg(vhval)                                   WriteDecoder(HUE,       vhval )
 273      =1  
 274      =1  #define GetVideoSharpnessRegDef                                 (ReadDecoder(SHARPNESS) & 0x0f) 
 275      =1  
 276      =1  #define GetVideoSharpnessReg()                                  GetVideoSharpnessRegDef
 277      =1  //#define       SetVideoSharpnessReg(vshval)                    WriteDecoder(SHARPNESS, vshval )
 278      =1  #define SetVideoSharpnessReg(vshval)                    WriteDecoder(SHARPNESS, ((ReadDecoder(SHARPNESS) & 0xf0) | (vshval 
             -& 0x0f) ) );
 279      =1  
 280      =1  #ifdef TW9908
           =1 #define SetVideoVPeakingReg(vshval)
           =1 #else
 283      =1  #define SetVideoVPeakingReg(vshval)                             WriteDecoder(V_PEAKING, ((ReadDecoder(V_PEAKING) & 0xf8) | (vshval 
             -& 0x07) ) );
 284      =1  #endif
 285      =1  
 286      =1  #define SetVideoHfilterReg(val)                                 WriteDecoder(HFILTER, ((ReadDecoder(HFILTER) & 0xf8) | (val & 0x07) )|
             -0x08 );
 287      =1  //----------------------------------------------------------------------------------
 288      =1  //color type
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 19  

 289      =1  #define RED             0
 290      =1  #define GREEN   1
 291      =1  #define BLUE    2
 292      =1  #define WHITE   3
 293      =1  //saturation type
 294      =1  #define U_SAT   0
 295      =1  #define V_SAT   1
 296      =1  
 297      =1  //Alpha Blending Level
 298      =1  #define _0              0
 299      =1  #define _25             0x12
 300      =1  #define _37_5   0x13
 301      =1  #define _50             0x14
 302      =1  #define _100    0x18
 303      =1  
 304      =1  
 305      =1  /*
 306      =1  BYTE Mapping( int fromValue, struct RegisterInfo fromRange,
 307      =1                                   int * toValue, struct RegisterInfo toRange );
 308      =1  */
 309      =1  BYTE Mapping1( int fromValue, CODE_P struct RegisterInfo *fromRange,
 310      =1                                   int * toValue, CODE_P struct RegisterInfo *toRange );
 311      =1  #ifdef KEILC
 312      =1  #define Mapping2( A, B, C, D )                  Mapping1( A, B, C, D )
 313      =1  #define Mapping3( A, B, C, D )                  Mapping1( A, B, C, D )
 314      =1  #else
           =1 BYTE Mapping2( int fromValue, IDATA_P struct RegisterInfo *fromRange,
           =1                                  int * toValue, CODE_P struct RegisterInfo *toRange );
           =1 BYTE Mapping3( int fromValue, CODE_P struct RegisterInfo *fromRange,
           =1                                  int * toValue, IDATA_P struct RegisterInfo *toRange );
           =1 #endif
 320      =1  
 321      =1  BYTE GetAttributesFromNTSCSettings(BYTE index);
 322      =1  
 323      =1  #endif  // __TW88__
 324      =1  
  16          #include "osdbasic.h"
   1      =1  //osd_basic.h
   2      =1  //LJY11012001
   3      =1  #ifndef __OSD_BASIC__
   4      =1  #define __OSD_BASIC__
   5      =1  
   6      =1  // osd_basic.h
   7      =1  // char code
   8      =1  //#include "apilib.h"
   9      =1  
  10      =1  //ljy052903
  11      =1  //definition for internal OSD
  12      =1  #define FONT_WIDTH_TW88                 12
  13      =1  #define FONT_HEIGHT_TW88                18
  14      =1  #define PIXS_PER_XSTEP_TW88             8
  15      =1  #define LINES_PER_YSTEP_TW88    4
  16      =1  #define MAX_OSDWINDOW_TW88              8
  17      =1  
  18      =1  // Using TW88 OSD for Menu
  19      =1  #define FONT_WIDTH                      12
  20      =1  #define FONT_HEIGHT                     18
  21      =1  #define PIXS_PER_XSTEP          8
  22      =1  #define LINES_PER_YSTEP         4
  23      =1  #define MAX_OSDWINDOW           4
  24      =1  
  25      =1  #define MAX_FONT_BYTES          27
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 20  

  26      =1  #define RAMFONT         0xFE
  27      =1  #define ROMFONT         0xFF
  28      =1  #define NO_UDFONT                       226 
  29      =1  
  30      =1  #define FONT_ROM        1
  31      =1  #define FONT_RAM        2
  32      =1  
  33      =1  
  34      =1  /////////////////////////////////
  35      =1  // Old Registers...
  36      =1  /*
  37      =1          #define TW88_WIN1ATTR           0x76
  38      =1          #define TW88_WIN1XSTART         0x77
  39      =1          #define TW88_WIN1YSTART         0x78
  40      =1          #define TW88_WIN1WIDTH          0x79
  41      =1          #define TW88_WIN1HEIGHT         0x7a
  42      =1          #define TW88_WIN1BRDATTR        0x7b
  43      =1          #define TW88_WIN1BRDWIDTH       0x7c
  44      =1          #define TW88_WIN1BRDHEIGHT      0x7d
  45      =1          #define TW88_WIN1XSPACE         0x7e            // between characters.
  46      =1          #define TW88_WIN1YSPACE         0x7f
  47      =1          #define TW88_WIN1SADDR          0x80            // starting address of OSD ram for Windows 1
  48      =1  */
  49      =1  /////////////////////////////////
  50      =1  
  51      =1  // OSD
  52      =1  #define TW88_ENABLERAM          0x94    // TW8804C
  53      =1  #define TW88_FONTRAMADDR        0x99    // TW8804C
  54      =1  #define TW88_FONTRAMDATA        0x9a    // TW8804C
  55      =1  #define TW88_OSDRAMADDRHI       0x95    // TW8804C
  56      =1  #define TW88_OSDRAMADDRLO       0x96    // TW8804C
  57      =1  #define TW88_OSDRAMDATAHI       0x97    // TW8804C
  58      =1  #define TW88_OSDRAMDATALO       0x98    // TW8804C
  59      =1  #define TW88_MULTISTART         0x9b    // TW8804C
  60      =1  #define TW88_OSDLOCKUPSEL       0x9c
  61      =1  #define TW88_WINNUM                     0x9e    // TW8804C
  62      =1  #define TW88_WINATTR            0x9f    //
  63      =1  #define TW88_WINXSTART          0xa1    //
  64      =1  #define TW88_WINYSTART          0xa2    //
  65      =1  #define TW88_WINSTART_HI        0xa0    //
  66      =1  #define TW88_WINWIDTH           0xa3    //
  67      =1  #define TW88_WINHEIGHT          0xa4    //
  68      =1  #define TW88_WINBRDATTR         0xa5    //
  69      =1  #define TW88_WINBRDWIDTH        0xa6    //
  70      =1  #define TW88_WINBRDHEIGHT       0xa7    //
  71      =1  #define TW88_WINSPACE           0xa8    // between characters.
  72      =1  #define TW88_WINZOOM            0xa9    //
  73      =1  #define TW88_WINSADDRHI         0xa9    // starting address of OSD ram for Windows 1
  74      =1  #define TW88_WINSADDRLO         0xaa    // starting address of OSD ram for Windows 1
  75      =1  
  76      =1  #define TW88_WINSHADOW          0xab    //
  77      =1  #define TW88_WINBLENDING        0xac    //
  78      =1  #define TW88_WINCHEFFECT        0xad    //
  79      =1  
  80      =1  
  81      =1  //Attributes for OSD
  82      =1  #define WINZOOMx1                       0x01
  83      =1  #define WINZOOMx2                       0x02
  84      =1  #define WINZOOMx3                       0x03
  85      =1  #define WINZOOMx4                       0x04
  86      =1  #define SHOW                            0x08    
  87      =1  
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 21  

  88      =1  #define EXTENDED_COLOR          0x80
  89      =1  #define BG_COLOR_BLACK          0x00    //For background color of window, border, and char. 
  90      =1  #define BG_COLOR_RED            0x40    
  91      =1  #define BG_COLOR_GREEN          0x20
  92      =1  #define BG_COLOR_YELLOW         0x60
  93      =1  #define BG_COLOR_BLUE           0x10
  94      =1  #define BG_COLOR_MAGENTA        0x50
  95      =1  #define BG_COLOR_CYAN           0x30
  96      =1  #define BG_COLOR_WHITE          0x70
  97      =1  #define BG_COLOR_TRANS          0x80    
  98      =1  #define BG_COLOR_MASK           0xf0    
  99      =1  
 100      =1  #define CH_COLOR_BLACK          0x00    //For color of char.
 101      =1  #define CH_COLOR_RED            0x04    
 102      =1  #define CH_COLOR_GREEN          0x02
 103      =1  #define CH_COLOR_YELLOW         0x06
 104      =1  #define CH_COLOR_BLUE           0x01
 105      =1  #define CH_COLOR_MAGENTA        0x05
 106      =1  #define CH_COLOR_CYAN           0x03
 107      =1  #define CH_COLOR_WHITE          0x07
 108      =1  #define CH_BLINK                        0x08    
 109      =1  #define CH_COLOR_MASK           0x0f    
 110      =1  
 111      =1  #define CL_BLACK                        0x00    //For color of char.
 112      =1  #define CL_BLUE                         0x01
 113      =1  #define CL_GREEN                        0x02
 114      =1  #define CL_CYAN                         0x03
 115      =1  #define CL_RED                          0x04    
 116      =1  #define CL_MAGENTA                      0x05
 117      =1  #define CL_YELLOW                       0x06
 118      =1  #define CL_WHITE                        0x07
 119      =1  #define CL_BLINK                        0x08    
 120      =1  
 121      =1  // 0x76*(WindowNo*0x0b)
 122      =1  #define WINDOW_DISABLE          0x00
 123      =1  #define WINDOW_ENABLE           0x01
 124      =1  #define WINDOW_3D_ENABLE    0x04
 125      =1  #define WINDOW_3D_BOTTOM    0x08
 126      =1  #define WINDOW_3D_TOP       0x00
 127      =1  #define WINDOW_TRANS_ENABLE 0x80
 128      =1  
 129      =1  #define WINBDCOLOR_ENABLE       0x80
 130      =1  #define WINBDCOLOR_EXTENT       0x80
 131      =1  
 132      =1  
 133      =1  #define WINBLENDING_DISABLE 0x00
 134      =1  #define WINBLENDING_BACK    0x10
 135      =1  #define WINBLENDING_FORE    0x20
 136      =1  #define WINBLENDING_ALL     0x30
 137      =1  
 138      =1  #define WINSHADOW_ENABLE        0x80
 139      =1  // 0xc8*WindowNo
 140      =1  #define WIN_MULTICOLOR_ENABLE 0x20
 141      =1  #define WIN_CH_EFFECT_ENABLE  0x10
 142      =1  #define WIN_CH_EFFECT_SHADOW  0x08
 143      =1  
 144      =1  
 145      =1  
 146      =1  ///////// TW8804C /////////////
 147      =1  // Window Number
 148      =1  #define WINNUM1                         1
 149      =1  #define WINNUM2                         2
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 22  

 150      =1  #define WINNUM3                         3
 151      =1  #define WINNUM4                         4
 152      =1  
 153      =1  // Index 0x9f Defination
 154      =1  #define WIN_BG_COLOR_EX         0x80
 155      =1  #define WIN_BG_COLOR_EX0        0x00
 156      =1  #define WIN_3D_TYPE                     0x08
 157      =1  #define WIN_3D_TYPE0            0x00
 158      =1  #define WIN_3D_EN                       0x04
 159      =1  #define WIN_3D_EN0                      0x00
 160      =1  #define WIN_3D_LEVEL            0x02
 161      =1  #define WIN_EN                          0x01
 162      =1  #define WIN_EN0                         0x00
 163      =1  
 164      =1  // Index 0xa5 Defination
 165      =1  #define WIN_BD_EN                       0x80
 166      =1  #define WIN_BD_EN0                      0x00
 167      =1  #define WIN_BD_WIDTH(a)         a
 168      =1  
 169      =1  // Index 0xa6 Defination
 170      =1  #define WIN_BD_COLOR_EX         0x80
 171      =1  #define WIN_BD_COLOR_EX0        0x00
 172      =1  #define WIN_H_BD_W(a)           a
 173      =1  
 174      =1  // Index 0xa7 Defination
 175      =1  #define WIN_V_BD_W(a)           a
 176      =1  
 177      =1  // Index 0xa8
 178      =1  #define WIN_CH_VSPACE(a)        (a<<4)
 179      =1  #define WIN_CH_HSPACE(a)        a
 180      =1  
 181      =1  // Index 0xa9 Defination
 182      =1  #define WIN_VZOOM(a)            (a-1)
 183      =1  #define WIN_HZOOM(a)            (a-1)
 184      =1  #define WIN_SADDR(a)            a
 185      =1  
 186      =1  // Index 0xab
 187      =1  #define WIN_SHADOW_EN           0x80
 188      =1  #define WIN_SHADOW_EN0          0x00
 189      =1  #define WIN_SHADOW_W(a)         a
 190      =1  
 191      =1  // ad
 192      =1  #define WIN_SHADOW_COLOR_EX             0x80
 193      =1  #define WIN_SHADOW_COLOR_EX0    0x00
 194      =1  #define WIN_MULTI_EN                    0x40
 195      =1  #define WIN_MULTI_EN0                   0x00
 196      =1  #define WIN_V_EXT_EN                    0x20
 197      =1  #define WIN_V_EXT_EN0                   0x00
 198      =1  #define WIN_CH_BDSH_SEL(a)              a
 199      =1  #define SEL_BORDER                              0
 200      =1  #define SEL_SHADOW                              1
 201      =1  #define WIN_CH_BDSH_COLOR_EX    0x08
 202      =1  #define WIN_CH_BDSH_COLOR_EX0   0x00
 203      =1  
 204      =1  #define OSD_Win_Num(a)                  0x9e, a-1
 205      =1  #define OSD_Win_Start_Addr              0xa0
 206      =1  #define OSD_Win_Attr(a)                         a
 207      =1  #define OSD_Win_Start(h,v)                       (BYTE)(((WORD)h>>8) | (((WORD)v>>8)<<4)),(BYTE)h, (BYTE)v
 208      =1  #define OSD_Win_Width(a)                        a
 209      =1  #define OSD_Win_Height(a)                       a
 210      =1  #define OSD_Win_Border(a)                       a
 211      =1  #define OSD_Win_HBorder(a)                      a
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 23  

 212      =1  #define OSD_Win_VBorder(a)                      a
 213      =1  #define OSD_Win_CH_Space(a)                     a
 214      =1  #define OSD_Win_ZM_SAddr(h,v,a)         ((h<<6)|(v<<4)|(a>>8)), (BYTE)a
 215      =1  #define OSD_Win_Shadow(a)                       a
 216      =1  #define OSD_Win_Blending(a)                     a
 217      =1  #define OSD_Win_CH_BorderShadow(a)      a
 218      =1  
 219      =1  
 220      =1  #define SetOSDWindowNum(winno)          WriteTW88(TW88_WINNUM, winno-1)
 221      =1  
 222      =1  //#define  OSD_Window_Attr(Trans_en,Color,3D_Type,3D_en,W_en)       (((( Trans_en | Color ) | 3D_Type) | 3
             -D_en) | W_en)
 223      =1  #define  OSD_Window_Attr(a,b,c,d,e)                                                                     (((( a | b ) | c) | d) | e)
 224      =1  #define  OSD_WShadow_Attr(W_Shadow_en,Color,Width)                                      W_Shadow_en | Color | Width
 225      =1  //#define  OSD_Blending(en,level)                                                                               en | (level & 0x0f)
 226      =1  //#define  OSD_Ch_Effect(Multi, Effect_En, ShadowBorder, Color)         Multi | Effect_En | ShadowBorder | Color 
             - 
 227      =1  
 228      =1  
 229      =1  struct OSDStrInfo 
 230      =1  {
 231      =1          BYTE    cnt;
 232      =1          WORD    addr;
 233      =1          BYTE    attr;
 234      =1          DWORD   str;
 235      =1  };
 236      =1  /*
 237      =1  struct BarInfo {
 238      =1          struct RegisterInfo BarCnt;
 239      =1          BYTE    winno;
 240      =1          BYTE    xoff;
 241      =1          BYTE    yoff;
 242      =1          BYTE    color;
 243      =1          int             bar_cnt;
 244      =1  };
 245      =1  */
 246      =1  struct FontData {
 247      =1          BYTE    font[27];
 248      =1  } ;
 249      =1  
 250      =1  //====================================================================
 251      =1  //  Internal OSD Function
 252      =1  void CopyCharToOSDRAM_TW88(BYTE Addr, BYTE attr, BYTE ch);
 253      =1  void CopyUDCharToOSDRAM_TW88(BYTE Addr, BYTE attr, BYTE ch);
 254      =1  //BYTE GetOSDWindowWidth_TW88(BYTE winno);
 255      =1  WORD GetOSDWindowSA_TW88(BYTE winno);
 256      =1  void SetOSDWindowX_TW88(BYTE winno, BYTE x);
 257      =1  void SetOSDWindowY_TW88(BYTE winno, BYTE y);
 258      =1  void SetOSDWindowWidth_TW88(BYTE winno, BYTE w);
 259      =1  void SetOSDWindowSA_TW88(BYTE winno, WORD sa);
 260      =1  
 261      =1  void SetOSDItalicsAndUnderline(BYTE italics, BYTE underline);
 262      =1  
 263      =1  void SetOSDHBorderWidth_TW88(BYTE winno, BYTE w);
 264      =1  //BYTE GetOSDWindowColor_TW88(BYTE winno);
 265      =1  void SetOSDWindowColor_TW88(BYTE CCWin, BYTE color);
 266      =1  void EnableOSDRAMAndChangeFont(BYTE type);
 267      =1  void WriteCharToOSDRAM(WORD addr, BYTE ch, BYTE attr);
 268      =1  
 269      =1  
 270      =1  void ShowOSDWindowAll(BYTE on);
 271      =1  void ShowOSDWindow_TW88(BYTE winno, BYTE onoff);
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 24  

 272      =1  void ClearOSD_TW88(void);
 273      =1  //void CreateOSDWindow_TW88(BYTE winno, BYTE x, BYTE y, BYTE w, BYTE h, WORD sa, BYTE attr);
 274      =1  /*not yet!!
 275      =1  //ljy012304...CC_ADJUST_POS
 276      =1  void SetOSDWindowXS_TW88(BYTE winno, BYTE xs);
 277      =1  void SetOSDWindowYS_TW88(BYTE winno, BYTE ys);
 278      =1  */
 279      =1  
 280      =1  //====================================================================
 281      =1  //      OSDMenu Functions
 282      =1  
 283      =1  //--------------------------------------------------------------------
 284      =1  //      Functions used in only Menu
 285      =1  #define         CONVERT_CODE                    0x80
 286      =1  
 287      =1  void InitOSDWindow(BYTE *ptr);
 288      =1  
 289      =1  WORD GetOSDWindowX(BYTE winno);
 290      =1  WORD GetOSDWindowY(BYTE winno);
 291      =1  BYTE CreateOSDWindowOutline(BYTE winno, BYTE w, BYTE color);
 292      =1  void CreateOSDMenuWindow(BYTE, BYTE, BYTE, BYTE, BYTE, BYTE, BYTE);
 293      =1  void ClearOSDLine(BYTE winno, BYTE sx, BYTE sy, BYTE cnt, BYTE attr);
 294      =1  void WriteStringToAddr(WORD addr, BYTE *str, BYTE cnt);
 295      =1  void DrawAttrString(WORD addr, BYTE *str, BYTE cnt);
 296      =1  void DrawAttrCnt(WORD addr, BYTE color, BYTE cnt);
 297      =1  void ClearDataCnt(WORD, BYTE);
 298      =1  #define         SetOSDWindowX(A, B)                                                     SetOSDWindowX_TW88(A, B)
 299      =1  #define     SetOSDWindowY(A, B)                                                 SetOSDWindowY_TW88(A, B)
 300      =1  
 301      =1  
 302      =1  //--------------------------------------------------------------------
 303      =1  //      Functions used in Menu and others
 304      =1  #define         ShowOSDWindow(A, B)                                                     ShowOSDWindow_TW88(A, B)
 305      =1  #define     ClearOSD()                                                                  ClearOSD_TW88()
 306      =1  
 307      =1  //================================================================
 308      =1  //      Font
 309      =1  void DownloadUDFont(void);
 310      =1  #ifdef Hs_debug
           =1 void DisplayROMFont(BYTE);
           =1 void DisplayRAMFont(BYTE);
           =1 #endif
 314      =1  void DownloadFont(BYTE cod, CODE_P BYTE *fontdata);
 315      =1  //void DisplayGrid( void );
 316      =1  //void DisplayCone( void );
 317      =1  //void DisplayJapanese( void );
 318      =1  void TestRAMFont( void );
 319      =1  #ifdef BANKING
           =1 void DisplayMGrid( BYTE );
           =1 void DisplayMessage( void );
           =1 void DisplayChinese( void );
           =1 void DisplayJapanese( void );
           =1 void DisplayKorean( void );
           =1 void DisplayGridBank0( BYTE n );
           =1 void DisplayGridBank1( BYTE n );
           =1 #endif
 328      =1  
 329      =1  //================================================================
 330      =1  //      OSD COLOR
 331      =1  void Change_OSDColorLookup(void);
 332      =1  void Reset_OSDColorLookup(void);
 333      =1  
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 25  

 334      =1  //====================================================================
 335      =1  //                              Conversion
 336      =1  //====================================================================
 337      =1  BYTE utoa(WORD value, BYTE *str, BYTE radix);
 338      =1  BYTE ltoa_K(long value, BYTE *str, BYTE);
 339      =1  BYTE strlen( BYTE *str );
 340      =1  
 341      =1  #define CStrlen(A)                              strlen(A)
 342      =1  
 343      =1  void WaitEndofDisplayArea(void);
 344      =1  
 345      =1  #endif  // __OSD_BASIC__
  17          #include "dispinfo.h"
   1      =1  #ifndef __DISPINFO__
   2      =1  #define __DISPINFO__
   3      =1  //==================================================================
   4      =1  //                              Display Information
   5      =1  //==================================================================
   6      =1  #if (defined WQVGA) && (defined ANALOG_7INCH)
           =1 #define         INPUTINFO_ZOOM          WINZOOMx1
           =1 #define         LOGO_ZOOM                       WINZOOMx3
           =1 
           =1 #else // (defined WQVGA) && (defined SHARP_LQ043T3DX02)
  11      =1  #define         INPUTINFO_ZOOM          WINZOOMx2
  12      =1  #define         LOGO_ZOOM                       WINZOOMx2
  13      =1  #endif
  14      =1  //#define               VOL_ZOOM                        WINZOOMx4
  15      =1  #define         MUTE_ZOOM                       WINZOOMx3
  16      =1  #define         TVCHN_ZOOM                      WINZOOMx4
  17      =1  #define         RATINGINFO_ZOOM         WINZOOMx3
  18      =1  #define     SCANTV_ZOOM                 WINZOOMx2               //ljy012304
  19      =1  #define         PCINFO_ZOOM                     WINZOOMx2
  20      =1  #define     BAR_ZOOM                    WINZOOMx2
  21      =1  
  22      =1  
  23      =1  #define DVRStatus_OSDWIN        4 
  24      =1  #define DVRStatus_ADDR  195 
  25      =1  
  26      =1  extern  IDATA BYTE  DisplayedOSD;
  27      =1  
  28      =1  
  29      =1  void ClearDisplayedOSD( BYTE newd );
  30      =1  void SetDisplayedOSD( BYTE newd );
  31      =1  BYTE GetDisplayedOSD(void);
  32      =1  void ClearOSDInfo(void);
  33      =1  
  34      =1  void DisplayInput(void);
  35      =1  BYTE ClearInput(void);
  36      =1  
  37      =1  
  38      =1  void DisplayLogo(void);
  39      =1  void ClearLogo(void);
  40      =1  
  41      =1  void DisplayPCInfo(BYTE CODE *ptr);
  42      =1  void ClearPCInfo(void);
  43      =1  void DisplayAutoAdjust(void);
  44      =1  void ClearAutoAdjust(void);
  45      =1  
  46      =1  
  47      =1  void DisplayVol(void);
  48      =1  #if 0
           =1 void DisplayMuteInfo(void);
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 26  

           =1 #endif
  51      =1  void ClearMuteInfo(void);
  52      =1  BYTE CheckAndClearOSD(void);
  53      =1  
  54      =1  //==================================================================
  55      =1  //                                              TV Info
  56      =1  //==================================================================
  57      =1  
  58      =1  BYTE ClearTVInfo(void);
  59      =1  
  60      =1  #endif  // __DISPINFO__
  18          #include "measure.h"
   1      =1  #ifndef __MEASURE__
   2      =1  #define __MEASURE__
   3      =1  
   4      =1  #define EE_DOS                          0
   5      =1  
   6      =1  #define EE_SP1                          1
   7      =1  #define EE_SP2                          2
   8      =1  #define EE_SP3                          3
   9      =1  
  10      =1  #define EE_VGA_60                       4
  11      =1  #define EE_VGA_66                       5
  12      =1  #define EE_VGA_70                       6
  13      =1  #define EE_VGA_72                       7
  14      =1  #define EE_VGA_75                       8
  15      =1  #define EE_VGA_85                       9
  16      =1  
  17      =1  #define EE_SVGA_56                      10
  18      =1  #define EE_SVGA_60                      11
  19      =1  #define EE_SVGA_70                      12
  20      =1  #define EE_SVGA_72                      13
  21      =1  #define EE_SVGA_75                      14
  22      =1  #define EE_SVGA_85                      15
  23      =1  
  24      =1  #define EE_832_75                       16
  25      =1  
  26      =1  #define EE_XGA_60                       17
  27      =1  #define EE_XGA_70                       18
  28      =1  #define EE_XGA_72                       19
  29      =1  #define EE_XGA_75                       20
  30      =1  #define EE_XGA_85                       21
  31      =1  
  32      =1  #define EE_1152_60                      22
  33      =1  #define EE_1152_70                      23
  34      =1  #define EE_1152_75                      24
  35      =1  
  36      =1  #define EE_SXGA_60                      25
  37      =1  #define EE_SXGA_70                      26
  38      =1  #define EE_SXGA_75                      27
  39      =1  
  40      =1  #define EE_RGB_480P                     28
  41      =1  #define EE_RGB_720P                     29
  42      =1  #define EE_RGB_720P50           30
  43      =1  #define EE_RGB_1080I            31
  44      =1  #define EE_RGB_1080I50A         32
  45      =1  #define EE_RGB_1080I50B         33
  46      =1  #define EE_RGB_480I                     34
  47      =1  #define EE_RGB_576I                     35
  48      =1  #define EE_RGB_576P                     36
  49      =1  
  50      =1  #define EE_YPbPr_480P           37
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 27  

  51      =1  #define EE_YPbPr_720P           38
  52      =1  #define EE_YPbPr_720P50         39
  53      =1  #define EE_YPbPr_1080I          40
  54      =1  #define EE_YPbPr_1080I50A       41
  55      =1  #define EE_YPbPr_1080I50B       42
  56      =1  #define EE_YPbPr_480I           43
  57      =1  #define EE_YPbPr_576I           44
  58      =1  #define EE_YPbPr_576P           45
  59      =1  
  60      =1  #define EE_PC_MAX                       46
  61      =1  
  62      =1  #define EE_PC_NO_SIGNAL         0xfe
  63      =1  #define EE_PC_UNKNOWN           0xff
  64      =1  
  65      =1  struct _PCMDATA {
  66      =1          CODE_P BYTE  Support;
  67      =1          CODE_P WORD  HAN;
  68      =1          CODE_P WORD  VAN;
  69      =1          CODE_P WORD  IVF;
  70      =1          CODE_P WORD  CLOCK;
  71      =1          CODE_P WORD  low;
  72      =1          CODE_P WORD  high;
  73      =1          CODE_P WORD  Hstart;
  74      =1          CODE_P WORD  Vstart;
  75      =1          CODE_P WORD  IPF;               // 0.1MHz
  76      =1          CODE_P WORD  PPF;               // 0.1MHz
  77      =1          CODE_P BYTE  VBack;
  78      =1  };
  79      =1  #ifndef AUTOCALC_PC
           =1 
           =1 #ifdef SUPPORT_DTV
           =1 struct _DTVMDATA {
           =1         CODE_P BYTE Reg62;
           =1         CODE_P BYTE RegBC;
           =1         CODE_P BYTE RegBD;
           =1         CODE_P BYTE RegBE;
           =1         CODE_P WORD PHP;
           =1 };
           =1 #endif
           =1 #endif
  91      =1  #if defined     XGA
           =1         #define MAX_PPF          90000000
           =1 #elif defined SXGA
           =1         #define MAX_PPF         135000000
           =1 #elif defined WXGA
           =1         #define MAX_PPF          90000000
           =1 #elif defined WVGA
  98      =1          #define MAX_PPF          90000000
  99      =1  #elif defined VGA
           =1         #define MAX_PPF          50000000
           =1 #elif defined SVGA
           =1         #define MAX_PPF          80000000
           =1 #elif defined QVGA
           =1         #define MAX_PPF          30000000
           =1 #elif defined WQVGA
           =1         #define MAX_PPF          30000000
           =1 #endif
 108      =1  
 109      =1  extern BYTE cLastSyncLoss;
 110      =1  extern BYTE PcMode;
 111      =1  
 112      =1  void CompLT170E2(void);
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 28  

 113      =1  
 114      =1  WORD gap(WORD a, WORD b);
 115      =1  
 116      =1  //===================================================================
 117      =1  WORD GetHpnVpn(BYTE);
 118      =1  
 119      =1  WORD ConvertBasedOnInput(WORD dat);
 120      =1  
 121      =1  BYTE IsDTVInput(void);
 122      =1  
 123      =1  void SetVValueForPanel(WORD vstart);
 124      =1  BYTE SetHValueForPanel(void);
 125      =1  BYTE GetActiveRegion(void);
 126      =1  
 127      =1  BYTE DetectAndSetForVGAInput(BYTE);
 128      =1  #ifdef SUPPORT_DTV
           =1 BYTE DetectAndSetForDTVInput(BYTE);
           =1 #endif
 131      =1  void CheckPCinput(void);
 132      =1  void CheckDTVinput(void);
 133      =1  
 134      =1  WORD GetCoarseValue(void);
 135      =1  BYTE GetPhaseValue(void);
 136      =1  WORD SetPCCoarseValue(BYTE val);
 137      =1  BYTE SetPhaseValue(BYTE val);
 138      =1  
 139      =1  void DisplayResultAndSetActiveRange(void);
 140      =1  
 141      =1  //=============================================================================
 142      =1  //                    PC Screen Position Move Functions
 143      =1  //=============================================================================
 144      =1  void MoveActiveVpos(BYTE val);          // Up/Down
 145      =1  void MoveActiveHpos(BYTE val);          // Left/Right
 146      =1  
 147      =1  BYTE GetVPosition(void);
 148      =1  BYTE SetVPosition(BYTE val);
 149      =1  BYTE GetHPosition(void);
 150      =1  BYTE SetHPosition(BYTE val);
 151      =1  
 152      =1  void ResetPCValue(void);
 153      =1  
 154      =1  CODE_P BYTE *GetPCInputSourceName(void);
 155      =1  BYTE AutoAdjust(void);
 156      =1  
 157      =1  #endif // __MEASURE__
  19          #include "debug.h"
   1      =1  #ifndef __DEBUG__
   2      =1  #define __DEBUG__
   3      =1  
   4      =1  #define DEBUG_ERR       1
   5      =1  #define DEBUG_WARN      2
   6      =1  #define DEBUG_INFO      3
   7      =1  #define DEBUG_BREAK     4
   8      =1  
   9      =1  #define Pause(a)        { Printf("\r\n"); Printf(a); while(!RS_ready()); RS_rx(); }
  10      =1  
  11      =1  //#define BURSTLOCK     7
  12      =1  
  13      =1  void DebugWindowControl (void) ;
  14      =1  void Draw_Debug_Char(void);
  15      =1  void DebugWindowCursor( BYTE flag ) ;
  16      =1  void DebugWindowData( BYTE flag ) ;
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 29  

  17      =1  void Debug_Write(void);
  18      =1  void Debug_Read(void);
  19      =1  
  20      =1  
  21      =1  
  22      =1  #endif  // __DEBUG__
  23      =1  
  24      =1  #ifdef CHIP_MANUAL_TEST
           =1 BYTE DelaynCheck(void);
           =1 void ChipManualTest(void);
           =1 
           =1 #endif
  20          #include "printf.h"
   1      =1  #ifndef __PRINTF__
   2      =1  #define __PRINTF__
   3      =1  
   4      =1  #define _outchar(c) while(1) { if( !RS_Xbusy ) { SBUF = c; RS_Xbusy=1; break; } }
   5      =1  #define Putch(c) _outchar(c)
   6      =1  
   7      =1  #ifdef SERIAL
   8      =1  
   9      =1   void Printf ( const char CODE_P *fmt, ... );
  10      =1   void Puts ( CODE_P char *ptr );
  11      =1  
  12      =1  #define TW2835Cmd(a)   Puts ( a )
  13      =1  
  14      =1  #else
           =1 
           =1  #undef  DEBUG
           =1  #define Printf(a,b)    //
           =1  #define Puts(a)                //
           =1 
           =1 #endif
  21      =1  
  22      =1  
  23      =1  #ifndef DEBUG
  24      =1  
  25      =1   #define dPuts(a)               //
  26      =1   #define wPuts(a)               //
  27      =1   #define ePuts(a)               //
  28      =1  
  29      =1  #else
           =1 
           =1  void dPrintf( const char CODE_P *fmt, ... );
           =1  void wPrintf( const char CODE_P *fmt, ... );
           =1  void ePrintf( const char CODE_P *fmt, ... );
           =1 
           =1  void dPuts( CODE_P char *ptr );
           =1  void wPuts( CODE_P char *ptr );
           =1  void ePuts( CODE_P char *ptr );
           =1 
           =1 #endif  // DEBUG
  40      =1  
  41      =1  BYTE Getch(void);
  42      =1  BYTE Getche(void);
  43      =1  
  44      =1  
  45      =1  #endif  //__PRINTF__
  21          #include "udfont.h"
   1      =1  //udfont.h
   2      =1  #define COLORFONT_START 0x60
   3      =1  //#define       MAX_FONT_RAM_CHARS      0xa7 //174
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 30  

   4      =1  #define MAX_FONT_RAM_CHARS      0x90 //6Kbytes for RAM
   5      =1  code unsigned char RAMFONTDATA[][27];
   6      =1  code unsigned char OSD_Color_LookUp_Data_Table[][8];
   7      =1  
   8      =1  
  22          #include "regmap.h"
   1      =1  #ifndef __REGMAP__
   2      =1  #define __REGMAP__
   3      =1  
   4      =1  //-----------------------------------------------------------------------------
   5      =1  //                              Individual Decoder Registers 
   6      =1  //-----------------------------------------------------------------------------
   7      =1  
   8      =1  #define MCU_STOP_MODE   0xc8    // bit 7 is mcu stop, bit5 is MCU debug
   9      =1  
  10      =1  #define LAD0                    0xc9    // Low speed AD channel 0
  11      =1  #define LAD1                    0xca    // Low speed AD channel 1
  12      =1  
  13      =1  #define REG_PAGE                0xff
  14      =1  #define STATUS0                 0xd0
  15      =1  #define STATUS1                 0xd1
  16      =1  #define IRQ_EN1                 0xd2
  17      =1  #define IRQ_EN0                 0xd3
  18      =1  
  19      =1  //-----------------------------------------------------------------------------
  20      =1  //                              Individual Decoder Registers 
  21      =1  //-----------------------------------------------------------------------------
  22      =1  
  23      =1  #define DECODERADDRESS  TW88I2CAddress
  24      =1  
  25      =1  #define CVFMT                   0x1e    // Component Video Format
  26      =1  #define FBSHIFT                 0x38    // RGB Anti-Alias Filter/FB Shift Level
  27      =1  #define SHUE                    0x3e    // RGB Hue
  28      =1  #define SCONTRAST               0x3b    // RGB Contrast
  29      =1  #define SBRIGHT                 0x3a    // RGB Brightness
  30      =1  #define SCbGAIN                 0x3c    // RGB Cb Gain
  31      =1  #define SCrGAIN                 0x3d    // RGB Cb Gain
  32      =1  #define RGBCONTROL              0x36    // RGB Powerdown..
  33      =1  #define RGBMISC                 0x39
  34      =1  #define FBCONTRL                0x3F
  35      =1  
  36      =1  //#define OSD_ADJ                       0xce
  37      =1  #define PNLSHARPNESS    0x78    // Sharpness Control
  38      =1  #define OSDWINSTATUS    0x95
  39      =1  //-----------------------------------------------------------------------------
  40      =1  //                              Common Registers
  41      =1  //-----------------------------------------------------------------------------
  42      =1  #define CSTATUS                 0x01    // Chip Status
  43      =1  #define INFORM                  0x02    // Input Format
  44      =1  #define ACNTL                   0x06    // Analog Control
  45      =1  #define CROP_HI                 0x07    // Cropping High
  46      =1  #define VDELAY_LO               0x08    // Vertical Delay Low
  47      =1  #define VACTIVE_LO              0x09    // Vertical Active Low
  48      =1  #define HDELAY_LO               0x0a    // Horizontal Delay Low
  49      =1  #define HACTIVE_LO              0x0b    // Horizontal Active Low
  50      =1  #define CNTRL1                  0x0c    // Control 1
  51      =1  
  52      =1  #define BRIGHT                  0x10    // Brightness Control
  53      =1  #define CONTRAST                0x11    // Contrast Control
  54      =1  #define SHARPNESS               0x12    // Sharpness Control
  55      =1  #define SAT_U                   0x13    // Chroma(U) Gain
  56      =1  #define SAT_V                   0x14    // Chroma(V) Gain
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 31  

  57      =1  #define HUE                             0x15    // Hue Conrol
  58      =1  #define V_PEAKING               0x17    // Vertical Peaking
  59      =1  
  60      =1  #define CC_STATUS               0x1a    // CC/EDS Status
  61      =1  #define CC_DATA                 0x1b    // CC/EDS Data
  62      =1  #define SDT                             0x1c    // Standard Selection
  63      =1  #define SDTR                    0x1d    // Standard Recognition
  64      =1  
  65      =1  #define V_CONTROL2              0x29    // Vertical Control II
  66      =1  #define HFILTER                 0x2c
  67      =1  #define MISC1                   0x2d    // Miscellaneous Control 1
  68      =1  #define MISC2                   0x2e    // Miscellaneous Control 2
  69      =1  #define MISC3                   0x2f    // Miscellaneous Control 2
  70      =1  
  71      =1  #define VBI_CNTL2               0x34    // VBI control 2 - WSSEN
  72      =1  #define CC_ODDLINE              0x35    // CC Odd Line
  73      =1  
  74      =1  #define LADC0                   0xc9    //LADC Channel 0 Input Value 
  75      =1  #define LADC1                   0xca    //LADC Channel 1 Input Value 
  76      =1  
  77      =1  #define WriteDecoder(index, val)                WriteTW88( index, val )
  78      =1  #define ReadDecoder(index)                              ReadTW88(  index )
  79      =1  #endif // __REGMAP__
  23          #include "externs.h"
   1      =1  //
   2      =1  //Externs.h     : Register declaration
   3      =1  //
   4      =1  #ifdef INTERNAL_MCU
           =1 extern xdata BYTE REG00, REG01, REG02, REG03, REG04, REG05, REG06, REG07, REG08, REG09, REG0a, REG0b, REG0
             -c, REG0d, REG0e, REG0f,
           =1                   REG10, REG11, REG12, REG13, REG14, REG15, REG16, REG17, REG18, REG19, REG1a, REG1b, REG1c, REG1d, REG1
             -e, REG1f,
           =1                   REG20, REG21, REG22, REG23, REG24, REG25, REG26, REG27, REG28, REG29, REG2a, REG2b, REG2c, REG2d, REG2
             -e, REG2f,
           =1                   REG30, REG31, REG32, REG33, REG34, REG35, REG36, REG37, REG38, REG39, REG3a, REG3b, REG3c, REG3d, REG3
             -e, REG3f,
           =1                   REG40, REG41, REG42, REG43, REG44, REG45, REG46, REG47, REG48, REG49, REG4a, REG4b, REG4c, REG4d, REG4
             -e, REG4f,
           =1                   REG50, REG51, REG52, REG53, REG54, REG55, REG56, REG57, REG58, REG59, REG5a, REG5b, REG5c, REG5d, REG5
             -e, REG5f,
           =1                   REG60, REG61, REG62, REG63, REG64, REG65, REG66, REG67, REG68, REG69, REG6a, REG6b, REG6c, REG6d, REG6
             -e, REG6f,
           =1                   REG70, REG71, REG72, REG73, REG74, REG75, REG76, REG77, REG78, REG79, REG7a, REG7b, REG7c, REG7d, REG7
             -e, REG7f,
           =1                   REG80, REG81, REG82, REG83, REG84, REG85, REG86, REG87, REG88, REG89, REG8a, REG8b, REG8c, REG8d, REG8
             -e, REG8f,
           =1                   REG90, REG91, REG92, REG93, REG94, REG95, REG96, REG97, REG98, REG99, REG9a, REG9b, REG9c, REG9d, REG9
             -e, REG9f,
           =1                   REGa0, REGa1, REGa2, REGa3, REGa4, REGa5, REGa6, REGa7, REGa8, REGa9, REGaa, REGab, REGac, REGad, REGa
             -e, REGaf,
           =1                   REGb0, REGb1, REGb2, REGb3, REGb4, REGb5, REGb6, REGb7, REGb8, REGb9, REGba, REGbb, REGbc, REGbd, REGb
             -e, REGbf,
           =1                   REGc0, REGc1, REGc2, REGc3, REGc4, REGc5, REGc6, REGc7, REGc8, REGc9, REGca, REGcb, REGcc, REGcd, REGc
             -e, REGcf,
           =1                   REGd0, REGd1, REGd2, REGd3, REGd4, REGd5, REGd6, REGd7, REGd8, REGd9, REGda, REGdb, REGdc, REGdd, REGd
             -e, REGdf,
           =1                   REGe0, REGe1, REGe2, REGe3, REGe4, REGe5, REGe6, REGe7, REGe8, REGe9, REGea, REGeb, REGec, REGed, REGe
             -e, REGef,
           =1                   REGf0, REGf1, REGf2, REGf3, REGf4, REGf5, REGf6, REGf7, REGf8, REGf9, REGfa, REGfb, REGfc, REGfd, REGf
             -e, REGff;
           =1 
           =1 #endif  // internal MCU only variables
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 32  

  23      =1  
  24          #include "CPU.h"
   1      =1  #ifndef __CPU__
   2      =1  #define __CPU__
   3      =1  
   4      =1  /*
   5      =1  #ifdef INTERNAL_MCU
   6      =1  #define I2C_SCL         P2_0
   7      =1  #else
   8      =1  #define I2C_SCL         P1_0
   9      =1  #endif
  10      =1  #define I2C_SDA         P1_1
  11      =1  */
  12      =1  #define I2C_SCL         P1_0
  13      =1  #define I2C_SDA         P1_1
  14      =1  #define BUF_MAX         8
  15      =1  #define DVR_BUF_MAX     30
  16      =1  
  17      =1  #ifdef REMO_RC5
           =1 #define EnableRemoconInt()      { RemoDataReady = 0;    EX0 = 1;}
           =1 #endif
  20      =1  void    InitCPU(void);
  21      =1  void    InitVars(void);
  22      =1  void    InitTechwell(void);
  23      =1  void    main_init (void);
  24      =1  void    PowerDown( void );
  25      =1  #if 0
           =1 BYTE    OKSleepTime(void);
           =1 #endif
  28      =1  #ifdef REMO_RC5
           =1 void    InitForRemo(void);
           =1 #endif
  31      =1  void    PowerLED(BYTE flag);
  32      =1  void    Wait_ms(WORD Tms);
  33      =1  BYTE    TW2835Command(char,char,char,char,char);
  34      =1  
  35      =1  #endif
  25          
  26          #include "panel.h"
   1      =1  //PanelConfig
   2      =1  
   3      =1          #if   defined SXGA
           =1                                                 #define PHR_ 1280
           =1                                                 #define PVR_ 1024
           =1         #elif defined XGA       
           =1                                                 #define PHR_ 1024
           =1                                                 #define PVR_ 768
           =1         #elif defined SVGA
           =1                                                 #define PHR_ 800
           =1                                                 #define PVR_ 600
           =1         #elif defined VGA
           =1                                                 #define PHR_ 640
           =1                                                 #define PVR_ 480
           =1         #elif defined QVGA
           =1                                                 #define PHR_ 320
           =1                                                 #define PVR_ 240
           =1         #elif defined WXGA
           =1                                                 #define PHR_ 1280 //1366
           =1                                                 #define PVR_ 768
           =1         #elif defined WSVGA
           =1                                                 #define PHR_ 1024
           =1                                                 #define PVR_ 600
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 33  

           =1         #elif defined WVGA
  25      =1                                                  #define PHR_ 800
  26      =1                                                  #define PVR_ 600
  27      =1          #elif defined WQVGA
           =1                                 //              #define PHR_ 960 //480
           =1                                 //              #define PVR_ 237
           =1                                                 #define PHR_ 480 //480
           =1                                                 #define PVR_ 240
           =1         #endif
  33      =1  
  34      =1   
  35      =1  
  36      =1  /*
  37      =1  #define ACTIVE_LOW                      0
  38      =1  #define ACTIVE_HIGH                     1
  39      =1  
  40      =1  CODE struct PanelConfig {
  41      =1          unsigned                x_res,                                  y_res;
  42      =1          unsigned char   h_sync_min_pulse_width, v_sync_min_pulse_width;
  43      =1          unsigned                h_min_back_porch;
  44      =1          unsigned char   h_sync_polarity,                v_sync_polarity;
  45      =1          unsigned                dot_clock,                              max_clock;                      // in unit Mhz*10
  46      =1          unsigned char   pixs_per_clock;
  47      =1          unsigned char   DE_only;
  48      =1  } PanelConfig=
  49      =1          {
  50      =1          //----------------------------------------------------
  51      =1          #ifdef WXGA
  52      =1          //LG  LM171W01 WXGA
  53      =1          1280,                   768,
  54      =1          8,                              1,
  55      =1          8,
  56      =1          ACTIVE_LOW,             ACTIVE_LOW,
  57      =1          #ifdef DOUBLE_PIXEL
  58      =1          320,                    470,
  59      =1          2,
  60      =1          #else
  61      =1          650,                    950,                                    //65Mhz
  62      =1          1,
  63      =1          #endif
  64      =1          0
  65      =1          //----------------------------------------------------
  66      =1          #elif defined XGA
  67      =1          //Samsung  LT150x1-151 XGA
  68      =1          1024,                   768,
  69      =1          68,                             1,
  70      =1          80,
  71      =1          ACTIVE_LOW,             ACTIVE_LOW,
  72      =1          #ifdef DOUBLE_PIXEL
  73      =1          325,                    400,                                    //32.5Mhz
  74      =1          2,
  75      =1          #else
  76      =1          650,                    800,
  77      =1          1,
  78      =1          #endif
  79      =1          0
  80      =1          //----------------------------------------------------
  81      =1          #elif defined SXGA
  82      =1          //Samsung  LT170E2-131  SXGA
  83      =1          1280,                   1024,
  84      =1          1,                              1,
  85      =1          1,
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 34  

  86      =1          ACTIVE_LOW,             ACTIVE_LOW,
  87      =1          #ifdef DOUBLE_PIXEL
  88      =1          540,                    540,                                    //54.5Mhz
  89      =1          2,
  90      =1          #else
  91      =1          1080,                   1080,
  92      =1          1,
  93      =1          #endif
  94      =1          0
  95      =1          //----------------------------------------------------
  96      =1          #elif defined WSVGA                                             // Thosiba
  97      =1          1024,                   600,
  98      =1          8,                              3,
  99      =1          1,//80,                         
 100      =1          ACTIVE_LOW,             ACTIVE_LOW,
 101      =1          #ifdef DOUBLE_PIXEL
 102      =1          325,                    450,
 103      =1          2,
 104      =1          #else
 105      =1          500,                    550,                                    //50Mhz
 106      =1          1,
 107      =1          #endif
 108      =1          0
 109      =1          //----------------------------------------------------
 110      =1  
 111      =1          #elif defined SVGA
 112      =1          //NEC NL8060AC26-11 SVGA
 113      =1          800,                    600,
 114      =1          2,                              1,
 115      =1          13,
 116      =1          ACTIVE_LOW,             ACTIVE_LOW,
 117      =1          #ifdef DOUBLE_PIXEL
 118      =1          384,                    500,                                    //38.4MHz
 119      =1          2,
 120      =1          #else
 121      =1          670,                    1000,
 122      =1          1,
 123      =1          #endif
 124      =1          0
 125      =1          //----------------------------------------------------
 126      =1          #elif defined VGA
 127      =1          //NEC NL6448AC33        VGA                                     // OK with SetPanelRegisters
 128      =1          640,                    480,
 129      =1          10,                             1,
 130      =1          4,
 131      =1          ACTIVE_LOW,             ACTIVE_LOW,
 132      =1          #ifdef DOUBLE_PIXEL
 133      =1          130,                    150,                                    //25.2MHz
 134      =1          2,
 135      =1          #else
 136      =1          250,                    300,
 137      =1          1,
 138      =1          #endif
 139      =1          0
 140      =1          //----------------------------------------------------
 141      =1  
 142      =1          #elif defined WVGA
 143      =1          // Panasonic  EDTCB27QBF WVGA
 144      =1          800,                    480,
 145      =1          4,                              1,
 146      =1          7,
 147      =1          ACTIVE_LOW,             ACTIVE_LOW,
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 35  

 148      =1          #ifdef DOUBLE_PIXEL
 149      =1          166,                    200,                                    //33.2MHz
 150      =1          2,
 151      =1          #else
 152      =1          332,                    360,                                    //33.2MHz
 153      =1          1,
 154      =1          #endif
 155      =1          0
 156      =1  
 157      =1          //----------------------------------------------------
 158      =1          #else
 159      =1          // Default : XGA panel
 160      =1          // Samsung  LT150x1-151 XGA
 161      =1          1024,                   768,
 162      =1          68,                             1,
 163      =1          80,
 164      =1          ACTIVE_LOW,             ACTIVE_LOW,
 165      =1          #ifdef DOUBLE_PIXEL
 166      =1          325,                    400,                                    //32.5Mhz
 167      =1          2,
 168      =1          #else
 169      =1          650,                    800,                                    //32.5Mhz
 170      =1          1,
 171      =1          #endif
 172      =1          0
 173      =1          #endif
 174      =1          };
 175      =1  
 176      =1  */
  27          #include "osdmenu.h"
   1      =1  //osdmenu.h
   2      =1  //LJY10292001
   3      =1  #ifndef __OSDMENU__
   4      =1  #define __OSDMENU__
   5      =1  
   6      =1  //=======================================================================
   7      =1  // 
   8      =1  //BYTE GetOSDDuration(void);
   9      =1  
  10      =1  void ResetVideoValue(void);
  11      =1  //#if defined( SUPPORT_PC ) || defined( SUPPORT_DTV )
  12      =1  //void ResetPCValue(void);
  13      =1  //#endif
  14      =1  BYTE GetOSDMenuLevel( void );
  15      =1  
  16      =1  void DrawMenulist(BYTE);
  17      =1  void Display_EnterPin(void);
  18      =1  void OSDHighMenu_sub(void);
  19      =1  void ResetOSDValue(void);
  20      =1  #ifdef E_Wintek
           =1 void ResetUESROSDValue(void);
           =1 #endif
  23      =1  //BYTE OnChangingValue(void);
  24      =1  //Not used yet *******************BYTE OnChangingTime(void);
  25      =1  
  26      =1  //WORD GetOSDclock(void);
  27      =1  
  28      =1  void InitOSDMenu(void);
  29      =1  BYTE CloseOSDMenu(void);
  30      =1  void OpenOSDMenu(void);
  31      =1  void OSDHighMenu(void);
  32      =1  void OSDSelect(void);
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 36  

  33      =1  void OSDCursorMove(BYTE flag );
  34      =1  void OSDLeftRight(BYTE flag );
  35      =1  void OSDValueUpDn(BYTE flag);
  36      =1  WORD SetItemValue( BYTE id, BYTE flag );
  37      =1  BYTE DoAction(BYTE id);
  38      =1  
  39      =1  BYTE SaveValue1(void);
  40      =1  void ClearValueWin(void);
  41      =1  
  42      =1  void OSDNumber( BYTE num );
  43      =1  
  44      =1  void Set4WideScreen(BYTE id);
  45      =1  
  46      =1  void SetRGBContrast( BYTE id, BYTE val );
  47      =1  BYTE SetPCColorTemp(BYTE flag);
  48      =1  void ResetPanelAttributeValue(void);
  49      =1  WORD GetItemValue( BYTE);
  50      =1  void DisplayViewBar( WORD,BYTE);
  51      =1  void DrawNum(WORD, CODE_P struct NumType *, WORD);
  52      =1  void DrawStringByLang( WORD, CODE_P struct EnumType *, WORD);
  53      =1  
  54      =1  void DisplayVolumebar(BYTE val);
  55      =1  BYTE GetOSDLang(void);
  56      =1  void InitOSDMenuXY(void);
  57      =1  
  58      =1  void Display_TVGuide_Window(void);
  59      =1  void Display_TVGuide_Status(void);
  60      =1  
  61      =1  void ChangeVchip_LevelCursor(BYTE);
  62      =1  void ChangeVchip_ContentCursor(BYTE);
  63      =1  void Select_VchipLevel(void);
  64      =1  void SetVideoMode(BYTE mode);
  65      =1  BYTE GetVideoDatawithOffset(BYTE offset);
  66      =1  void SetVideoContrast(BYTE newv);
  67      =1  void SetVideoBrightness(BYTE newv);
  68      =1  void SetVideoHue(BYTE newv) ;
  69      =1  void SetVideoSaturation(BYTE svtype, BYTE newv) ;
  70      =1  BYTE SetVideoSharpness(BYTE flag) ;
  71      =1  void SetVideoBacklight(BYTE newv) ;
  72      =1  //------------------------------------------------andy awt 981013
  73      =1  //void DaySelect(BYTE);
  74      =1  void CAMOutDSel(BYTE val);
  75      =1  void DVRAodioSel(BYTE  val);
  76      =1  
  77      =1  //------------------------------------------------andy awt 981013
  78      =1  
  79      =1  void DisplayLineOSD(void);      // OSD Line display Demo
  80      =1  
  81      =1  
  82      =1  struct MenuType {
  83      =1          BYTE    width,  height;
  84      =1          BYTE    TitleColor;     
  85      =1          BYTE    CursorColor;
  86      =1  };
  87      =1  
  88      =1  struct NumType {
  89      =1          BYTE    PrePostCharLen;         // high nibble(pre) / low nibble(post)
  90      =1          BYTE    PrePostChar[4];
  91      =1  };
  92      =1  
  93      =1  struct NumberStringType {
  94      =1          BYTE    x, y;
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 37  

  95      =1          BYTE    width;
  96      =1          BYTE    BackColor;
  97      =1          BYTE    Radix;
  98      =1          BYTE    NumColor;
  99      =1          BYTE    MaxLen;                         // maximum length of string
 100      =1          BYTE    PrePostCharLen;         // high nibble(pre) / low nibble(post)
 101      =1          BYTE    PrePostChar[3];
 102      =1  };
 103      =1  
 104      =1  struct TimeType {
 105      =1          BYTE    x, y;
 106      =1          BYTE    width;
 107      =1          BYTE    BackColor;
 108      =1          BYTE    Format;                         //_24H_TIME
 109      =1          BYTE    TimeColor;
 110      =1          BYTE    CursorColor;
 111      =1  };
 112      =1  
 113      =1  struct EnumType {
 114      =1          BYTE    Sz;//size
 115      =1          BYTE    ByLang;
 116      =1          BYTE    Str[15];                        // doesn't matter the size !!!
 117      =1  };
 118      =1  
 119      =1  #define ICON_CH_SZ              2
 120      =1  //#define BAR_NUM_SZ            4
 121      =1  #define ICON_BUF_SZ             2
 122      =1  struct DefineMenu {
 123      =1          //WORD                                          Icon[ICON_BUF_SZ];      
 124      =1          BYTE                            CODE    *Icon;
 125      =1          BYTE                                            **Desc;                         
 126      =1          BYTE                                            PreFnId, 
 127      =1                                                                  PostFnId;
 128      =1  //      void            (*CalltoFunction)(void);                                    // Un/Dn/Sel Function
 129      =1          BYTE                                            IconColor;                      //NIL: not to display icon
 130      =1          BYTE                                            DescColor;                      //NIL: not to display desc. (IconColor==NIL && DescColor==NIL)->Last Item
 131      =1          struct DefineMenu       CODE    *Child;
 132      =1          BYTE                                            Type;                           // MENU, CHOICEMENU, BAR, NUMBER, TIME, ACTION, ENUM_STRING
 133      =1          BYTE                                            ActiveWithCursor;
 134      =1          BYTE                                            Id;
 135      =1          BYTE                            CODE    *TypeData;      //MenuType, BarType, NumType,,,
 136      =1  } ;
 137      =1  
 138      =1  struct PictureInfo {
 139      =1  
 140      =1          BYTE Register_Addr;
 141      =1          BYTE EEPROM_Addr;
 142      =1          struct RegisterInfo     CODE    *Control_Range;
 143      =1  };
 144      =1  
 145      =1  
 146      =1  //-------------------------------------------------------------------
 147      =1  // OSD Window Information
 148      =1  //-------------------------------------------------------------------
 149      =1  // Window Number
 150      =1  #define OSDCURSORWINDOW                 1
 151      =1  #define OSDMENUWINDOW                   OSDCURSORWINDOW+1
 152      =1  #define OSDMENU_TOPWIN                  OSDCURSORWINDOW+2
 153      =1  #define OSDMENU_TITLEWIN                OSDCURSORWINDOW+3
 154      =1  #define OSDBARWINDOW                    OSDCURSORWINDOW
 155      =1  
 156      =1  #define TECHWELLOGO_OSDWIN      1       
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 38  

 157      =1  #define TVINFO_OSDWIN           2       
 158      =1  #define FONTTEST_OSDWIN         2       
 159      =1  #define INPUTINFO_OSDWIN        3  
 160      =1  #define RATINGINFO_OSDWIN       1       
 161      =1  #define PCINFO_OSDWIN           3//4/   
 162      =1  
 163      =1  //-------------OSDMENU_TITLEWIN------------------------------------------------------
 164      =1  // Window Start address
 165      =1  #define OSDMENU_MAINADDR        0
 166      =1  #define OSDMENU_SUBADDR     OSDMENU_MAINADDR+15    //25*9:196
 167      =1  #define OSDMENU_BARADDR         175 //OSDMENU_SUBADDR+225    //256   //25x2:50
 168      =1  
 169      =1  #define INPUTINFO_ADDR          160     // 9x1:9
 170      =1  #ifdef WQVGA
           =1 #define INPUTINFO1_ADDR         INPUTINFO_ADDR+17       //17x3:51
           =1 #else
 173      =1  #define INPUTINFO1_ADDR         INPUTINFO_ADDR+34       //17x2:51
 174      =1  #endif
 175      =1  
 176      =1  #define MUTEINFO_ADDR       INPUTINFO1_ADDR+51  // 4x1:4
 177      =1  #define TVCHINFO_ADDR           MUTEINFO_ADDR//324      // 3X1:3
 178      =1  #define LOGO_ADDR                       0
 179      =1  #define RATINGINFO_ADDR         0       //addr:210(8x1:8)
 180      =1  #define PCMEASUREINFO_ADDR  OSDMENU_BARADDR //10x1
 181      =1  
 182      =1  
 183      =1  //--------------------------------------------------------------------
 184      =1  // OSD Menu Position Range
 185      =1  #if ((defined WQVGA) && (defined ANALOG_7INCH)) || ((defined QVGA) && (defined SHARP_LQ050Q5DR01))
           =1         #define OSD_PHR_ PHR_/2
           =1 #else
 188      =1          #define OSD_PHR_ PHR_
 189      =1  #endif
 190      =1  
 191      =1  #define OSDHSTART_MAX (OSD_PHR_-(12+1)*25 - 56*2 -4)  //PHR - (pixelsize +Hspace)*MenuWidth - Hborder*2 - 
             -outlinewidth*2
 192      =1  #define OSDVSTART_MAX (PVR_-(18+11)*9 - 5*2 ) //  PVR - (Linesize+Vspace)*MENU_HEIGHT - Vborder*2  - outli
             -newidth*2
 193      =1  
 194      =1  #define OSDMENUX_MIN 1//0
 195      =1  #define OSDMENUX_MAX (OSDHSTART_MAX>>3)
 196      =1  #define OSDMENUX_50  (OSDHSTART_MAX>>4)
 197      =1  
 198      =1  #define OSDMENUY_MIN 2//0
 199      =1  #define OSDMENUY_MAX (OSDVSTART_MAX>>2)
 200      =1  #define OSDMENUY_50  (OSDVSTART_MAX>>3)
 201      =1  
 202      =1  //--------------------------------------------------------------------
 203      =1  // OSD Menu Width, Height 
 204      =1  #ifdef E_Wintek
           =1 #define ICON_HIGH                               0x14
           =1 #else
 207      =1  #define ICON_HIGH                               0x0a
 208      =1  #endif
 209      =1  #define TOTAL_MAX_HIGHT                 9
 210      =1  
 211      =1  #define TOPMENU_WIDTH                   2
 212      =1  #define TOTAL_TOP_HEIGHT                5       // Include blank line!
 213      =1  
 214      =1  #define TOPMENU_HEIGHT                  4       
 215      =1  
 216      =1  #if (defined QVGA) && (defined SHARP_LQ050Q5DR01)
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 39  

           =1 #define MENU_WIDTH                              17 //23//25 
           =1 #define TITLE_MAX_DESC                  17//25  //
           =1 #define BAR_LENGTH                              0
           =1 #else
 221      =1  #define MENU_WIDTH                              23//23//25 
 222      =1  #define TITLE_MAX_DESC                  23//25  //
 223      =1  #define BAR_LENGTH                              5//8
 224      =1  #endif
 225      =1  
 226      =1  #define MENU_HEIGHT                             7//6 
 227      =1  
 228      =1  #define BARNUM_LENGTH                   8       //11
 229      =1  #ifdef REFERENCE
           =1 #define BACK_COLOR                              BG_COLOR_CYAN
           =1 #define DEFAULT_COLOR                   BG_COLOR_CYAN   | CH_COLOR_WHITE
           =1 //#define ACTIVE_COLOR                  BG_COLOR_YELLOW | CH_COLOR_WHITE
           =1 #define TITLE_BACK_COLOR                BG_COLOR_MAGENTA
           =1 #define TITLE_COLOR                             TITLE_BACK_COLOR | CH_COLOR_YELLOW
           =1 #define COMMENT_COLOR                   TITLE_BACK_COLOR | CH_COLOR_WHITE
           =1 #define CURSOR_COLOR                    BG_COLOR_YELLOW | CH_COLOR_BLUE
           =1 #define OSD_INFO_COLOR                  DEFAULT_COLOR
           =1 #define BAR_COLOR                               DEFAULT_COLOR   
           =1 #define BAR_NUM_COLOR                   DEFAULT_COLOR
           =1 #define NUM_COLOR                               DEFAULT_COLOR
           =1 
           =1 #define OSDMENU_OUTLINE_COLOR   BG_COLOR_BLUE
           =1 
           =1 #else
 245      =1  #define BACK_COLOR                              BG_COLOR_CYAN
 246      =1  #define DEFAULT_COLOR                   BG_COLOR_CYAN | CH_COLOR_WHITE
 247      =1  //#define ACTIVE_COLOR                  BG_COLOR_YELLOW | CH_COLOR_WHITE
 248      =1  #define TITLE_BACK_COLOR                BG_COLOR_BLUE
 249      =1  #define TITLE_COLOR                             TITLE_BACK_COLOR | CH_COLOR_YELLOW
 250      =1  #define COMMENT_COLOR                   TITLE_BACK_COLOR | CH_COLOR_WHITE
 251      =1  #define CURSOR_COLOR                    BG_COLOR_YELLOW  | CH_COLOR_BLUE
 252      =1  #define OSD_INFO_COLOR                  BG_COLOR_CYAN    | CH_COLOR_GREEN
 253      =1  #define BAR_COLOR                               DEFAULT_COLOR   
 254      =1  #define BAR_NUM_COLOR                   DEFAULT_COLOR
 255      =1  #define NUM_COLOR                               DEFAULT_COLOR
 256      =1  
 257      =1  #define VER_COLOR               BG_COLOR_CYAN   | CH_COLOR_YELLOW   /// V1.1 03/07/07 simonsung
 258      =1  
 259      =1  
 260      =1  #define OSDMENU_OUTLINE_COLOR   BG_COLOR_CYAN
 261      =1  #endif 
 262      =1  
 263      =1  
 264      =1  //DisplayedOSD
 265      =1  //              new       |     MENU    TVINFO          CC              INPUTINFO               PCINFO          RATINGINFO
 266      =1  //      current   |
 267      =1  //============|=========================================================================
 268      =1  //      MENU      |                     TVINFO          --              INPUTINFO               PCINFO          MENU + RATINGINFO       
 269      =1  //                        |                                              
 270      =1  //------------|-------------------------------------------------------------------------
 271      =1  //      TVINFO    |     MENU    TVINFO          --              INPUTINFO               PCINFO          TVINFO+RATING
 272      =1  //------------|-------------------------------------------------------------------------
 273      =1  //      CC                |     MENU->  TVINFO->                        INPUTINFO->             PCINFO          RATINGINFO
 274      =1  //                        |      CC              CC                                      CC                                              
 275      =1  //------------|-------------------------------------------------------------------------
 276      =1  //      INPUTINFO |     MENU    TVINFO          --              INPUTINFO               PCINFO          --
 277      =1  //------------|-------------------------------------------------------------------------
 278      =1  //      PCINFO    |     MENU    x                       x               INPUTINFO               PCINFO          x
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 40  

 279      =1  //------------|-------------------------------------------------------------------------
 280      =1  //      RATINGINFO|     MENU    TVINFO     RATING   INPUTINFO           x                       RATINGINFO
 281      =1  //                                                                      
 282      =1  
 283      =1  //=======================================================================================
 284      =1  // OSD Menu Constant define.
 285      =1  //=======================================================================================
 286      =1  //Time type
 287      =1  #define _24H_TIME               1
 288      =1  
 289      =1  //for previous, next, parent or child
 290      =1  #define YES                             0xfe    
 291      =1  #define NO                              0
 292      =1  
 293      =1  
 294      =1  //#define OVERWRITE             0
 295      =1  //#define POPUP                 1
 296      =1  
 297      =1  //CursorMove
 298      =1  #define VERT                    0
 299      =1  #define HORI                    1
 300      =1  
 301      =1  //Type of MenuItem
 302      =1  #define OSDMENU                 1
 303      =1  #define CHOICEMENU              2
 304      =1  #define ACTION                  3
 305      =1  #define BAR                             4
 306      =1  #define NUMBER                  5
 307      =1  #define CHOICE                  6
 308      =1  #define ENUM_STRING             7 //YESNO                       7
 309      =1  #define CHOICE1                 8
 310      =1  #define TIME                    9
 311      =1  #define NUMBER_STRING   10
 312      =1  #define TEXT_STR              11   // V1.1 02/28/07 simonsung
 313      =1  
 314      =1  
 315      =1  //Bar type
 316      =1  #define LEFT_FILLED             1
 317      =1  #define RIGHT_FILLED    2
 318      =1  #define NO_FILLED               3
 319      =1  
 320      =1  //OSDmenu up and down key
 321      =1  #define UP                                      1
 322      =1  #define DN                                      2
 323      =1  #define RIGHT                           3
 324      =1  #define LEFT                            4
 325      =1  
 326      =1  // Action Id
 327      =1  #define DISP_INFO                       0x16
 328      =1  
 329      =1  #define INPUTSELECTION                          0x2f
 330      =1  
 331      =1  #define CHANGE_TO_COMPOSITE                     (0x20|CH_TW2835)                        // Low nibble need to start from 1 
 332      =1  #define CHANGE_TO_SVIDEO                        (0x20|SVIDEO)                           // so that it match with COMPOSITE...
 333      =1  #define CHANGE_TO_COMPONENT                     (0x20|COMPONENT)                
 334      =1  #define CHANGE_TO_DTV                           (0x20|DTV)              
 335      =1  #define CHANGE_TO_TV                            (0x20|TV)                                       
 336      =1  #define CHANGE_TO_PC                            (0x20|PC)                                       
 337      =1  #define CHANGE_TO_DIGITALVGA            (0x20|DIGITALVGA)                       
 338      =1  #define CHANGE_TO_SCART                         (0x20|SCART)                            
 339      =1  
 340      =1  
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 41  

 341      =1  #define OSDPOSITIONMODE     0x10
 342      =1  #define OSD_VPOS                        0x11
 343      =1  #define OSD_HPOS                        0x12
 344      =1  #define OSD_HALFTONE            0x13
 345      =1  #define OSD_DURATION            0x14
 346      =1  #define RESET_OSDVALUE          0x15
 347      =1  #define OSDLANG                         0x16
 348      =1  
 349      =1  #define PANEL_CONTRAST          0x58
 350      =1  #define PANEL_BRIGHTNESS        0x59
 351      =1  #define PANEL_HUE                       0x5a
 352      =1  #define PANEL_SHARPNESS         0x5b
 353      =1  #define PANEL_SATURATION        0x5c
 354      =1  
 355      =1  #define PC_VPOS                         0x43
 356      =1  #define PC_HPOS                         0x44
 357      =1  #define PC_HSIZE                        0x4d
 358      =1  
 359      =1  #define PC_CLOCK                        0x45
 360      =1  #define PC_PHASE                        0x46
 361      =1  
 362      =1  #define AUTOADJUST                      0x47
 363      =1  #define AUTOADJUST2                     0x48
 364      =1  //#define SAVE_AUTOADJUST               0x49
 365      =1  #define RESET_AUTOADJUST        0x4a
 366      =1  
 367      =1  #define PCCOLORADJUST           0x4b
 368      =1  #define SAVE_COLORADJUST        0x4c
 369      =1  //#define RESET_COLORADJUST     0x4d
 370      =1  
 371      =1  #define RESET_PCVALUE           0x4e
 372      =1  #define CameraOSD                       0x4f
 373      =1  
 374      =1  #define PC_COLOR_MODE           0x3f
 375      =1  #define PC_COLOR_TEMP           0x30
 376      =1  #define PC_COLOR_MODE1          0x31
 377      =1  #define PC_COLOR_MODE2          0x32
 378      =1  #define PC_COLOR_MODE3          0x33
 379      =1  #define PC_COLOR_USER           0x34
 380      =1  #define PC_COLOR_R                      0x35
 381      =1  #define PC_COLOR_G                      0x36
 382      =1  #define PC_COLOR_B                      0x37
 383      =1  
 384      =1  #define VIDEO_MODE                      0x90
 385      =1  #define VIDEO_MODE1                     0x91
 386      =1  #define VIDEO_MODE2                     0x92
 387      =1  #define VIDEO_MODE3                     0x93
 388      =1  #define VIDEO_USER                      0x94
 389      =1  #define VIDEO_CONTRAST          0x95
 390      =1  #define VIDEO_BRIGHTNESS        0x96
 391      =1  #define VIDEO_SATURATION        0x97
 392      =1  #define VIDEO_HUE                       0x99
 393      =1  #define VIDEO_SHARPNESS         0x9a
 394      =1  #define VIDEO_BACKLIGHT         0x9c            // add new value 
 395      =1  #define RESET_VIDEOVALUE        0x9b
 396      =1  #ifdef E_Wintek
           =1 #define RESET_USERVALUE 0x9d
           =1 #endif
 399      =1  #define VIDEOPICTURE            0x9f
 400      =1  
 401      =1  #define INPUTSTD                        0x6f
 402      =1  #define CHANGE_TO_AUTO          0x60
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 42  

 403      =1  #define CHANGE_TO_NTSC          (0x60 | NTSC)
 404      =1  #define CHANGE_TO_PAL           (0x60 | PAL)
 405      =1  #define CHANGE_TO_SECAM         (0x60 | SECAM)
 406      =1  #define CHANGE_TO_NTSC4         (0x60 | NTSC4)
 407      =1  #define CHANGE_TO_PALM          (0x60 | PALM)
 408      =1  #define CHANGE_TO_PALN          (0x60 | PALN)
 409      =1  #define CHANGE_TO_PAL60         (0x60 | PAL60)
 410      =1  
 411      =1  
 412      =1  
 413      =1  
 414      =1  #define CLOSED_CAPTION          0x7f
 415      =1  #define CLOSEDCAP_OFF           0x70
 416      =1  #define CLOSEDCAP_CC1           0x71
 417      =1  #define CLOSEDCAP_CC2           0x72
 418      =1  #define CLOSEDCAP_CC3           0x73
 419      =1  #define CLOSEDCAP_CC4           0x74
 420      =1  #define CLOSEDCAP_T1            0x75
 421      =1  #define CLOSEDCAP_T2            0x76
 422      =1  #define CLOSEDCAP_T3            0x77
 423      =1  #define CLOSEDCAP_T4            0x78
 424      =1  
 425      =1  #define TV_GUIDE                        0x8f
 426      =1  #define NO_VCHIP_LOCK           0
 427      =1  #define VCHIP_TV_Y                      1
 428      =1  #define VCHIP_TV_Y7                     2
 429      =1  #define VCHIP_TV_G                      3
 430      =1  #define VCHIP_TV_PG                     4
 431      =1  #define VCHIP_TV_14                     5
 432      =1  #define VCHIP_TV_MA                     6
 433      =1  #define PASSWORD                        0x87
 434      =1  #define NEW_PASSWORD            0x88
 435      =1  #define CHK_PASSWORD            0x89
 436      =1  #define RET_CHK_PASSWORD        0x8a
 437      =1  
 438      =1  #define MPAA_RATING                     0x9f
 439      =1  #define NO_MPAA_RATING          0
 440      =1  #define MPAA_G                          1
 441      =1  #define MPAA_PG                         2
 442      =1  #define MPAA_PG_13                      3
 443      =1  #define MPAA_R                          4
 444      =1  #define MPAA_NC_17                      5
 445      =1  #define MPAA_X                          6
 446      =1  
 447      =1  #define TVINSTALL                       0xa0
 448      =1  #define SCAN_CHANNEL            0xa1
 449      =1  #define AIR_CABLE_TV            0xa3
 450      =1  #define STORE_CLEAR_TVCHN       0xa4
 451      =1  #define MTS                                     0xa5
 452      =1  #define EDIT_CHANNEL            0xa6
 453      =1          #define         MTS_STEREO                      0//0x10
 454      =1          #define         MTS_MONO                        1//0x11
 455      =1  
 456      =1  #define AUDIO_VOLUME            0xb7
 457      =1  
 458      =1  #if 0 //andy AWT8.4 20090811
           =1 
           =1 #define AUDIO_BALANCE           0xb9
           =1 #define AUDIO_BASS                      0xba
           =1 #define AUDIO_TREBLE            0xbb
           =1 
           =1 #define AUDIO_LOUDNESS          0xbc
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 43  

           =1 #define AUDIO_EFFECT            0xbd
           =1 #define AUDIO_MUTE                      0xbe
           =1 #endif
 468      =1  
 469      =1  #define DayChoice           0xb8
 470      =1  #define CAMOSDONOFF         0xb9
 471      =1  #define GAUGEChoice         0xba
 472      =1  #define OsdLockChoice       0xbb
 473      =1  #define PRIORITYChoice      0xcA
 474      =1  #define DVRDisplay              0xcc
 475      =1  
 476      =1  #define CAMAONOFF                   0xc1
 477      =1  #define CAMBONOFF               0xc2
 478      =1  #define CAMCONOFF                   0xc3
 479      =1  #define CAMRONOFF                       0xc4
 480      =1  
 481      =1  #define IMAGEChoice         0xc5 
 482      =1  #define REARChoice          0xc6
 483      =1  #define JUMPChoice          0xc7
 484      =1  #define CAMOUTChoice        0xc8 
 485      =1  #define STIME_STEP                  0xc9
 486      =1  #define TriggerVGA                  0xcb
 487      =1  #define IMAGE_A_Choice         0xcd
 488      =1  #define IMAGE_B_Choice         0xce
 489      =1  #define IMAGE_C_Choice         0xcf
 490      =1  
 491      =1  
 492      =1  #define MANUAL_TUNE_CHANNEL     0xab
 493      =1  #define FINE_TUNE_CHANNEL       0xac
 494      =1  #define STORE_PALCHANNEL        0xad
 495      =1  
 496      =1  //#define CLEAR_TVCHN                   0xb0
 497      =1  //#define STORE_TVCHN                   0xb1
 498      =1  
 499      =1  #define WIDESCREEN                      0xc0
 500      =1  #define WIDESCREEN_NORMAL       0 
 501      =1  #define WIDESCREEN_WIDE         1 
 502      =1  #define WIDESCREEN_PANO         2
 503      =1  #define WIDESCREEN_FULL         3 
 504      =1  #define WIDESCREEN_ZOOM         4 
 505      =1  
 506      =1  #define SYSTEM_CLOCK            0xd1
 507      =1  #define SYSTEM_CLOCK_H          0xd2
 508      =1  #define WAKEUP_TIME                     0xd3
 509      =1  #define WAKEUP_TIME_H           0xd4
 510      =1  #define WAKEUP_PR                       0xd5
 511      =1  #define OFF_TIME                        0xd6
 512      =1  #define OFF_TIME_H                      0xd7
 513      =1  #define SLEEP_TIMER                     0xd8
 514      =1  
 515      =1  #define Resolution                      0xe0
 516      =1  #define FPS                                     0xe1
 517      =1  #define Quality                         0xe2
 518      =1  #define RecordMode                      0xe3
 519      =1  #define RecordLength            0xe4
 520      =1  #define PreAlarmLength          0xe5
 521      =1  #define PostAlarmLength         0xe6
 522      =1  #define Apply                           0xe7
 523      =1  #define ManualRecordStart       0xe8
 524      =1  #define ManualRecordStop        0xe9
 525      =1  #define Snapshot                        0xea
 526      =1  #define FormatSD                        0xeb
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 44  

 527      =1  #define AudioRecord                     0xec
 528      =1  #define FirmwareUpdate          0xed
 529      =1  #define ChangePassword          0xee
 530      =1  #define OverWrite                       0xef
 531      =1  
 532      =1  
 533      =1  
 534      =1  
 535      =1  #define Year                            0x20
 536      =1  #define Month                           0x21
 537      =1  #define Day                                     0x22
 538      =1  #define Hour                            0x23
 539      =1  #define Minute                          0x24
 540      =1  
 541      =1  #define DaylightSaving                          0x25
 542      =1  #define TimeBeginesMonth                        0x26
 543      =1  #define TimeBeginesWeek                         0x27
 544      =1  #define TimeBeginesTime                         0x28
 545      =1  #define StandardTimeBeginesMonth        0x29
 546      =1  #define StandardTimeBeginesWeek         0x2a
 547      =1  #define StandardTimeBeginesTime         0x2b
 548      =1  #define TimeZone                                        0x2c
 549      =1  #define FirstNumber                                     0x2d
 550      =1  #define SecondNumber                            0x2e
 551      =1  #define ThridNumber                                     0x2f
 552      =1  #define FourthNumber                            0x38
 553      =1  
 554      =1  
 555      =1  
 556      =1  #define OSDLANGI                        0xd9
 557      =1  #define OSDLANGII                       OSDLANGI+1
 558      =1  #define OSDLANGIII                      OSDLANGI+2
 559      =1  #define OSDLANGIV                       OSDLANGI+3
 560      =1  
 561      =1  
 562      =1  #define TOHIGHMENU                      0xf1
 563      =1  #define MOVECURSOR2FIRST        0xf2
 564      =1  #define RESET_ALL                       0xf3
 565      =1  #define EXITMENU                        0xf4
 566      =1  #define DVRParamApply           0xf5
 567      =1  #define DATETIMEApply           0xf6
 568      =1  
 569      =1  
 570      =1  #define CHOICE1_VAL                     0xfc
 571      =1  #define CHOICE_VAL                      0xfd
 572      =1  #define BAR_VAL                         0xfe
 573      =1  #define NUM_VAL                         0xff
 574      =1  
 575      =1  #define CAMNumberChoice     0xa3 
 576      =1  #define PelcoChoice         0xa4
 577      =1  #define Baud_rateChoice         0xa5
 578      =1  
 579      =1  #endif  // __OSDMENU__
  28          #include "HS_DVRProtocol.h"
   1      =1  
   2      =1  
   3      =1  
   4      =1  #ifndef _HS_DVRProtocol_
   5      =1  #define _HS_DVRProtocol_
   6      =1  
   7      =1  //==================================================
   8      =1  //
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 45  

   9      =1  //
  10      =1  //
  11      =1  //==================================================
  12      =1  
  13      =1  
  14      =1  enum HS_DvrCommand
  15      =1  {
  16      =1          CMD_NULL,
  17      =1          SetDVRParam,    // 1
  18      =1          SetDVRDefault,
  19      =1          SetDATETIME,
  20      =1          GetDVRParam,
  21      =1          GetDVRStatus,
  22      =1          GetDATETIME, 
  23      =1          SetFormatSD, 
  24      =1          SendAlarm, 
  25      =1          GetDVRVersion=0x09, 
  26      =1          SendDVRStatus=0x14,
  27      =1          GetLCDMode=0x15,
  28      =1          SendDVRParam=0x16,
  29      =1          SendDVRParamDT=0x17,
  30      =1          SetFormatSDDone=0x18,
  31      =1          Halt_Start=0xc8,
  32      =1          Halt_OK=0xc9,
  33      =1          FW_Update_Start=0xca,
  34      =1          FW_Update_OK=0xcb,
  35      =1          MANUALRECSTART=0xdc,
  36      =1          MANUALRECSTOP=0xdd,
  37      =1          SNAPSHOT=0xde,
  38      =1          CMD_UNKNOWN=0xff,
  39      =1          CMD_NUM
  40      =1  };
  41      =1  
  42      =1  
  43      =1  //RS485 TX or RX define
  44      =1  enum
  45      =1  {
  46      =1          RS485_TX,               //RS485 Transmit        
  47      =1          RS485_RX                //Rs485 Receive
  48      =1  };
  49      =1  
  50      =1  enum
  51      =1  {
  52      =1          Baud_rate2400,          
  53      =1          Baud_rate4800,  
  54      =1          Baud_rate9600
  55      =1  };
  56      =1  
  57      =1  
  58      =1  //Camera Command ID define
  59      =1  enum
  60      =1  {
  61      =1  //      CAM_CLEAR,                              //Clear 
  62      =1          CAM_ZOOM_OUT_START,                     //Zoom Out  Start
  63      =1  //      CAM_ZOOM_OUT_END,                       //Zoom Out  End
  64      =1          CAM_ZOOM_IN_START,                      //Zoom In Start
  65      =1  //      CAM_ZOOM_IN_END,                        //Zoom In End
  66      =1  //      CAM_IRIS_CLOSE_START,           //IRIS Close Start
  67      =1  //      CAM_IRIS_CLOSE_END,             //IRIS Close End
  68      =1  //      CAM_IRIS_OPEN_START,                    //IRIS Open Start
  69      =1  //      CAM_IRIS_OPEN_END,                      //IRIS Open End
  70      =1  //      CAM_FOCUS_FAR_START,            //Focus Far Start
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 46  

  71      =1  //      CAM_FOCUS_FAR_END,              //Focus Far End
  72      =1  //      CAM_FOCUS_NEAR_START,           //Focus Near Start
  73      =1  //      CAM_FOCUS_NEAR_END,             //Focus Near End
  74      =1          CAM_SET,                                //Set 
  75      =1          CAM_CALL,                               //Call 
  76      =1  //      CAM_FOCUS_SPEED,                //Focus Speed
  77      =1  //      CAM_ZOOM_SPEED,         //Zoom Speed
  78      =1          CAM_PTZ_RIGHT,                  //PTZ Right 
  79      =1          CAM_PTZ_LEFT,                   //PTZ Left
  80      =1          CAM_PTZ_UP,                     //PTZ Up
  81      =1          CAM_PTZ_DOWN,                   //PTZ Down
  82      =1          CAM_MENU_ENTER,                 //PTZ Down
  83      =1          CAM_Iris_Open,
  84      =1  
  85      =1  //      CAM_PTZ_RIGHT_UP,               //PTZ Right with Up
  86      =1  //      CAM_PTZ_RIGHT_DOWN,     //PTZ Right with Down
  87      =1  //      CAM_PTZ_LEFT_UP,                //PTZ Left with Up
  88      =1  //      CAM_PTZ_LEFT_DOWN,      //PTZ Left with Down
  89      =1          CAM_PTZ_STOP                    //PTZ Control Stop
  90      =1  };
  91      =1  
  92      =1  void Hs_DvrTxCmdPaser(BYTE Cmd_Id );
  93      =1  void Hs_Protocol_Init(void);
  94      =1  BYTE DvrReceivePaser(void);
  95      =1  extern bit       DVR_Ready;
  96      =1  void CAM_TxCommand_toRS485(BYTE Com_ID);
  97      =1  void Send_PelcoP_Command(void);
  98      =1  void Send_PelcoD_Command(void);
  99      =1  void Send_GE_Command(void);
 100      =1  #endif
 101      =1  
  29          #include "HS_IOdef.h"
   1      =1  #ifndef _HS_IOdef_
   2      =1  #define _HS_IOdef_
   3      =1  
   4      =1  
   5      =1  
   6      =1  #include "Reg.h"
   1      =2  //
   2      =2  //Registers.h   : Register declaration
   3      =2  //
   4      =2  
   5      =2  #ifndef __REGISTERS__
   6      =2  #define __REGISTERS__
   7      =2  
   8      =2  #ifdef INTERNAL_MCU
           =2 /*  BYTE Registers  */
           =2 sfr P0    = 0x80;
           =2 sfr P1    = 0x90;
           =2 sfr P2    = 0xA0;
           =2 sfr P3    = 0xB0;
           =2 sfr PSW   = 0xD0;
           =2 sfr ACC   = 0xE0;
           =2 sfr B     = 0xF0;
           =2 sfr SP    = 0x81;
           =2 sfr DPL   = 0x82;
           =2 sfr DPH   = 0x83;
           =2 sfr PCON  = 0x87;
           =2 sfr TCON  = 0x88;
           =2 sfr TMOD  = 0x89;
           =2 sfr TL0   = 0x8A;
           =2 sfr TL1   = 0x8B;
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 47  

           =2 sfr TH0   = 0x8C;
           =2 sfr TH1   = 0x8D;
           =2 sfr IE    = 0xA8;
           =2 sfr IP    = 0xB8;
           =2 sfr SCON  = 0x98;
           =2 sfr SBUF  = 0x99;
           =2 
           =2 //sfr P4    = 0xd8;
           =2 
           =2 /*  8052 Extensions  */
           =2 sfr EXIF  = 0x91;               // external interrupt 2,3,4,5 flags should be cleared by software
           =2 sfr T2CON = 0xC8;
           =2 sfr RCAP2L = 0xCA;
           =2 sfr RCAP2H = 0xCB;
           =2 sfr TL2   = 0xCC;
           =2 sfr TH2   = 0xCD;
           =2 sfr EICON = 0xD8;
           =2 sfr EIE   = 0xE8;
           =2 sfr EIP   = 0xF8;
           =2 
           =2 /*      TW88 Core Extension */
           =2 sfr     BANKREG         = 0x9A;
           =2 sfr     SPICONTROL      = 0x9B;
           =2 sfr     T0HIGH          = 0x9C;
           =2 sfr     T0LOW           = 0x9D;
           =2 sfr     T1HIGH          = 0x9E;
           =2 sfr     T1LOW           = 0x9F;
           =2 sfr     T2HIGH          = 0x93;
           =2 sfr     T2LOW           = 0x94;
           =2 
           =2 /*  BIT Registers  */
           =2 /*  PSW  */
           =2 sbit CY    = 0xD7;
           =2 sbit AC    = 0xD6;
           =2 sbit F0    = 0xD5;
           =2 sbit RS1   = 0xD4;
           =2 sbit RS0   = 0xD3;
           =2 sbit OV    = 0xD2;
           =2 sbit P     = 0xD0;
           =2 
           =2 /*  TCON  */
           =2 sbit TF1   = 0x8F;
           =2 sbit TR1   = 0x8E;
           =2 sbit TF0   = 0x8D;
           =2 sbit TR0   = 0x8C;
           =2 sbit IE1   = 0x8B;
           =2 sbit IT1   = 0x8A;
           =2 sbit IE0   = 0x89;
           =2 sbit IT0   = 0x88;
           =2 
           =2 /*  IE  */
           =2 sbit EA    = 0xAF;
           =2 sbit ES    = 0xAC;
           =2 sbit ET1   = 0xAB;
           =2 sbit EX1   = 0xAA;
           =2 sbit ET0   = 0xA9;
           =2 sbit EX0   = 0xA8;
           =2 
           =2 /*  EIE  */
           =2 sbit EWDI  = 0xEC;              // Watch dog timer interrupt enable
           =2 sbit EX5   = 0xEB;              // external interrupt 5 enable
           =2 sbit EX4   = 0xEA;              // external interrupt 4 enable
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 48  

           =2 sbit EX3   = 0xE9;              // external interrupt 3 enable
           =2 sbit EX2   = 0xE8;              // external interrupt 2 enable
           =2 
           =2 /*  IP  */
           =2 sbit PS    = 0xBC;
           =2 sbit PT1   = 0xBB;
           =2 sbit PX1   = 0xBA;
           =2 sbit PT0   = 0xB9;
           =2 sbit PX0   = 0xB8;
           =2 
           =2 /*  EIP  */
           =2 sbit PWDI  = 0xFC;              // Watch dog timer interrupt priority
           =2 sbit PX5   = 0xFB;              // external interrupt5 priority
           =2 sbit PX4   = 0xFA;              // external interrupt4 priority
           =2 sbit PX3   = 0xF9;              // external interrupt3 priority
           =2 sbit PX2   = 0xF8;              // external interrupt2 priority
           =2 
           =2 /*  P3  */
           =2 sbit RD    = 0xB7;
           =2 sbit WR    = 0xB6;
           =2 sbit T1    = 0xB5;
           =2 sbit T0    = 0xB4;
           =2 sbit INT1  = 0xB3;
           =2 sbit INT0  = 0xB2;
           =2 sbit TXD   = 0xB1;
           =2 sbit RXD   = 0xB0;
           =2 
           =2 /*  SCON  */
           =2 sbit SM0   = 0x9F;
           =2 sbit SM1   = 0x9E;
           =2 sbit SM2   = 0x9D;
           =2 sbit REN   = 0x9C;
           =2 sbit TB8   = 0x9B;
           =2 sbit RB8   = 0x9A;
           =2 sbit TI    = 0x99;
           =2 sbit RI    = 0x98;
           =2 
           =2 /*  8052 Extensions  */
           =2 /*  IE  */
           =2 sbit ET2   = 0xAD;
           =2 
           =2 /*  IP  */
           =2 sbit PT2   = 0xBD;
           =2 
           =2 /*  P1  */
           =2 sbit T2EX  = 0x91;
           =2 sbit T2    = 0x90;
           =2              
           =2 /*  T2CON  */
           =2 sbit TF2   = 0xCF;
           =2 sbit EXF2  = 0xCE;
           =2 sbit RCLK  = 0xCD;
           =2 sbit TCLK  = 0xCC;
           =2 sbit EXEN2 = 0xCB;
           =2 sbit TR2   = 0xCA;
           =2 sbit C_T2  = 0xC9;
           =2 sbit CP_RL2= 0xC8;
           =2 
           =2 sfr     CHPENR = 0xF6;
           =2 sfr     CHPCON = 0xBF;
           =2 sfr     SFRAL  = 0xC4;
           =2 sfr     SFRAH  = 0xC5;
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 49  

           =2 sfr     SFRFD  = 0xC6;
           =2 sfr     SFRCN  = 0xC7;
           =2 
           =2 sbit P0_0  = 0x80;
           =2 sbit P0_1  = 0x81;
           =2 sbit P0_2  = 0x82;
           =2 sbit P0_3  = 0x83;
           =2 sbit P0_4  = 0x84;
           =2 sbit P0_5  = 0x85;
           =2 sbit P0_6  = 0x86;
           =2 sbit P0_7  = 0x87;
           =2 
           =2 sbit P1_0  = 0x90;
           =2 sbit P1_1  = 0x91;
           =2 sbit P1_2  = 0x92;
           =2 sbit P1_3  = 0x93;
           =2 sbit P1_4  = 0x94;
           =2 sbit P1_5  = 0x95;
           =2 sbit P1_6  = 0x96;
           =2 sbit P1_7  = 0x97;
           =2 
           =2 sbit P2_0  = 0xa0;
           =2 sbit P2_1  = 0xa1;
           =2 sbit P2_2  = 0xa2;
           =2 sbit P2_3  = 0xa3;
           =2 sbit P2_4  = 0xa4;
           =2 sbit P2_5  = 0xa5;
           =2 sbit P2_6  = 0xa6;
           =2 sbit P2_7  = 0xa7;
           =2 
           =2 sbit P3_0  = 0xb0;
           =2 sbit P3_1  = 0xb1;
           =2 sbit P3_2  = 0xb2;
           =2 sbit P3_3  = 0xb3;
           =2 sbit P3_4  = 0xb4;
           =2 sbit P3_5  = 0xb5;
           =2 sbit P3_6  = 0xb6;
           =2 sbit P3_7  = 0xb7;
           =2 
           =2 #else   // external MCU=WINBOND
 189      =2  /*  BYTE Registers  */
 190      =2  sfr P0    = 0x80;
 191      =2  sfr P1    = 0x90;
 192      =2  sfr P2    = 0xA0;
 193      =2  sfr P3    = 0xB0;
 194      =2  sfr PSW   = 0xD0;
 195      =2  sfr ACC   = 0xE0;
 196      =2  sfr B     = 0xF0;
 197      =2  sfr SP    = 0x81;
 198      =2  sfr DPL   = 0x82;
 199      =2  sfr DPH   = 0x83;
 200      =2  sfr PCON  = 0x87;
 201      =2  sfr TCON  = 0x88;
 202      =2  sfr TMOD  = 0x89;
 203      =2  sfr TL0   = 0x8A;
 204      =2  sfr TL1   = 0x8B;
 205      =2  sfr TH0   = 0x8C;
 206      =2  sfr TH1   = 0x8D;
 207      =2  sfr CKCON = 0x8E;               //clock control register, default =0x01
 208      =2  sfr IE    = 0xA8;
 209      =2  sfr IP    = 0xB8;
 210      =2  sfr SCON  = 0x98;
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 50  

 211      =2  sfr SBUF  = 0x99;
 212      =2  sfr P4 = 0xE8; //Megawin Ryan@970716
 213      =2  //sfr P4    = 0xa5;      //SST MCU
 214      =2  //sfr P4    = 0xd8;             //winbond<960820>
 215      =2  
 216      =2  
 217      =2  /*  8052 Extensions  */
 218      =2  sfr T2CON = 0xC8;
 219      =2  sfr RCAP2L = 0xCA;
 220      =2  sfr RCAP2H = 0xCB;
 221      =2  sfr TL2   = 0xCC;
 222      =2  sfr TH2   = 0xCD;
 223      =2  
 224      =2  // for UART2
 225      =2  sfr S2CON  = 0xAA;
 226      =2  sfr S2BRT  = 0xBA;
 227      =2  sfr S2BUF  = 0x9A;
 228      =2  sfr AUXR2  = 0xA6;
 229      =2  sfr AUXIE  = 0xAD;
 230      =2  
 231      =2  
 232      =2  sfr P1M0  = 0x91;
 233      =2  sfr P1M1  = 0x92;
 234      =2  sfr P0M0  = 0x93;
 235      =2  sfr P0M1  = 0x94;
 236      =2  
 237      =2  
 238      =2  
 239      =2  // for PCA
 240      =2  sfr CCON   = 0xD8;
 241      =2  sfr CMOD   = 0xD9;
 242      =2  sfr CCAPM0 = 0xDA;
 243      =2  sfr CCAPM1 = 0xDB;
 244      =2  sfr CCAPM2 = 0xDC;
 245      =2  sfr CCAPM3 = 0xDD;
 246      =2  sfr CCAPM4 = 0xDE;
 247      =2  sfr CCAPM5 = 0xDF;
 248      =2  sfr CL     = 0xE9;
 249      =2  sfr CH     = 0xF9;
 250      =2  sfr CCAP0L = 0xEA;
 251      =2  sfr CCAP0H = 0xFA;
 252      =2  sfr CCAP1L = 0xEB;
 253      =2  sfr CCAP1H = 0xFB;
 254      =2  sfr CCAP2L = 0xEC;
 255      =2  sfr CCAP2H = 0xFC;
 256      =2  sfr CCAP3L = 0xED;
 257      =2  sfr CCAP3H = 0xFD;
 258      =2  sfr CCAP4L = 0xEE;
 259      =2  sfr CCAP4H = 0xFE;
 260      =2  sfr CCAP5L = 0xEF;
 261      =2  sfr CCAP5H = 0xFF;
 262      =2  sfr PCAPWM0= 0xF2;
 263      =2  sfr PCAPWM1= 0xF3;
 264      =2  sfr PCAPWM2= 0xF4;
 265      =2  sfr PCAPWM3= 0xF5;
 266      =2  sfr PCAPWM4= 0xF6;
 267      =2  sfr PCAPWM5= 0xF7;
 268      =2  
 269      =2  /*  BIT Registers  */
 270      =2  /*  PSW  */
 271      =2  sbit CY    = 0xD7;
 272      =2  sbit AC    = 0xD6;
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 51  

 273      =2  sbit F0    = 0xD5;
 274      =2  sbit RS1   = 0xD4;
 275      =2  sbit RS0   = 0xD3;
 276      =2  sbit OV    = 0xD2;
 277      =2  sbit P     = 0xD0;
 278      =2  
 279      =2  /*  TCON  */
 280      =2  sbit TF1   = 0x8F;
 281      =2  sbit TR1   = 0x8E;
 282      =2  sbit TF0   = 0x8D;
 283      =2  sbit TR0   = 0x8C;
 284      =2  sbit IE1   = 0x8B;
 285      =2  sbit IT1   = 0x8A;
 286      =2  sbit IE0   = 0x89;
 287      =2  sbit IT0   = 0x88;
 288      =2  
 289      =2  /*  IE  */
 290      =2  sbit EA    = 0xAF;
 291      =2  sbit ES    = 0xAC;
 292      =2  sbit ET1   = 0xAB;
 293      =2  sbit EX1   = 0xAA;
 294      =2  sbit ET0   = 0xA9;
 295      =2  sbit EX0   = 0xA8;
 296      =2  
 297      =2  /*  IP  */
 298      =2  sbit PS    = 0xBC;
 299      =2  sbit PT1   = 0xBB;
 300      =2  sbit PX1   = 0xBA;
 301      =2  sbit PT0   = 0xB9;
 302      =2  sbit PX0   = 0xB8;
 303      =2  
 304      =2  /*  P3  */
 305      =2  sbit RD    = 0xB7;
 306      =2  sbit WR    = 0xB6;
 307      =2  sbit T1    = 0xB5;
 308      =2  sbit T0    = 0xB4;
 309      =2  sbit INT1  = 0xB3;
 310      =2  sbit INT0  = 0xB2;
 311      =2  sbit TXD   = 0xB1;
 312      =2  sbit RXD   = 0xB0;
 313      =2  
 314      =2  /*  SCON  */
 315      =2  sbit SM0   = 0x9F;
 316      =2  sbit SM1   = 0x9E;
 317      =2  sbit SM2   = 0x9D;
 318      =2  sbit REN   = 0x9C;
 319      =2  sbit TB8   = 0x9B;
 320      =2  sbit RB8   = 0x9A;
 321      =2  sbit TI    = 0x99;
 322      =2  sbit RI    = 0x98;
 323      =2  
 324      =2  /*  8052 Extensions  */
 325      =2  /*  IE  */
 326      =2  sbit ET2   = 0xAD;
 327      =2  
 328      =2  /*  IP  */
 329      =2  sbit PT2   = 0xBD;
 330      =2  
 331      =2  /*  P1  */
 332      =2  sbit T2EX  = 0x91;
 333      =2  sbit T2    = 0x90;
 334      =2               
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 52  

 335      =2  /*  T2CON  */
 336      =2  sbit TF2   = 0xCF;
 337      =2  sbit EXF2  = 0xCE;
 338      =2  sbit RCLK  = 0xCD;
 339      =2  sbit TCLK  = 0xCC;
 340      =2  sbit EXEN2 = 0xCB;
 341      =2  sbit TR2   = 0xCA;
 342      =2  sbit C_T2  = 0xC9;
 343      =2  sbit CP_RL2= 0xC8;
 344      =2  
 345      =2  sfr     CHPENR = 0xF6;
 346      =2  sfr     CHPCON = 0xBF;
 347      =2  sfr     SFRAL  = 0xC4;
 348      =2  sfr     SFRAH  = 0xC5;
 349      =2  sfr     SFRFD  = 0xC6;
 350      =2  sfr     SFRCN  = 0xC7;
 351      =2  
 352      =2  sbit P0_0  = 0x80;
 353      =2  sbit P0_1  = 0x81;
 354      =2  sbit P0_2  = 0x82;
 355      =2  sbit P0_3  = 0x83;
 356      =2  sbit P0_4  = 0x84;
 357      =2  sbit P0_5  = 0x85;
 358      =2  sbit P0_6  = 0x86;
 359      =2  sbit P0_7  = 0x87;
 360      =2  
 361      =2  sbit P1_0  = 0x90;
 362      =2  sbit P1_1  = 0x91;
 363      =2  sbit P1_2  = 0x92;
 364      =2  sbit P1_3  = 0x93;
 365      =2  sbit P1_4  = 0x94;
 366      =2  sbit P1_5  = 0x95;
 367      =2  sbit P1_6  = 0x96;
 368      =2  sbit P1_7  = 0x97;
 369      =2  
 370      =2  sbit P2_0  = 0xa0;
 371      =2  sbit P2_1  = 0xa1;
 372      =2  sbit P2_2  = 0xa2;
 373      =2  sbit P2_3  = 0xa3;
 374      =2  sbit P2_4  = 0xa4;
 375      =2  sbit P2_5  = 0xa5;
 376      =2  sbit P2_6  = 0xa6;
 377      =2  sbit P2_7  = 0xa7;
 378      =2  
 379      =2  sbit P3_0  = 0xb0;
 380      =2  sbit P3_1  = 0xb1;
 381      =2  sbit P3_2  = 0xb2;
 382      =2  sbit P3_3  = 0xb3;
 383      =2  sbit P3_4  = 0xb4;
 384      =2  sbit P3_5  = 0xb5;
 385      =2  sbit P3_6  = 0xb6;
 386      =2  sbit P3_7  = 0xb7;
 387      =2  
 388      =2  sbit P4_0  = P4^0;
 389      =2  sbit P4_1  = P4^1;
 390      =2  sbit INT3  = P4^2;
 391      =2  sbit INT2  = P4^3;
 392      =2  #endif  // INTERNAL_MCU
 393      =2  
 394      =2  #endif  //__REGISTERS__
   7      =1  
   8      =1  #define LEFT_T     P0_0
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 53  

   9      =1  #define Right_T    P0_1
  10      =1  #define REVERSE_T  P0_2
  11      =1  #define PARK_T     P0_3
  12      =1  #define VGA_T      P0_4
  13      =1  #define CAMC_T     P0_5
  14      =1  #define CAMD_T     P0_6
  15      =1  //#define Audio_Select1     P2_0
  16      =1  //#define Audio_Select2     P2_1
  17      =1  //#define Audio_Mute        P0_7
  18      =1  //#define AVOutPutSelect    P1_7
  19      =1  #define RS232Select     P4_0
  20      =1  #define ACC_B           P1_6
  21      =1  
  22      =1  #define PPWR            P3_6
  23      =1  
  24      =1  
  25      =1  #endif
  30          #include "HS_DisplayOSD.h"
   1      =1  #ifndef _HS_DisplayOSD_
   2      =1  #define _HS_DisplayOSD_
   3      =1  
   4      =1  
   5      =1  
   6      =1  
   7      =1  
   8      =1  #define         NORMAL_Record   0x01
   9      =1  #define         Manual_Record   0x02
  10      =1  #define         ALARM_Record    0x04
  11      =1  #define         OverWrite_Record        0x80
  12      =1  
  13      =1  void DisplayGaugeOSD(void);
  14      =1  void ClearGAUGEINFO(void);
  15      =1  void DisplaylockOSD(void); 
  16      =1  void DisplayactvOSD(void); 
  17      =1  
  18      =1  
  19      =1  void DisplayNumber(BYTE addr,WORD val,BYTE type);
  20      =1  
  21      =1  //#ifdef SUPPORT_SDCARD
  22      =1  void DisplayDVRStatus(void);
  23      =1  void DisplayFormatOSD(void);
  24      =1  void DisplayFormatOkOSD(void);
  25      =1  void DisplayFormatFailOSD(void);
  26      =1  void DisplayFWUpDate(void);
  27      =1  void DisplayFWUpDateOK(void);
  28      =1  void DisplayFWUpDateFail(void);
  29      =1  void DisplayFWVersion(void) ;
  30      =1  void DisplayDVRnotReady(void);
  31      =1  //#endif                //#ifdef SUPPORT_SDCARD
  32      =1  #endif
  31          
  32          
  33          
  34          //********************************************************************
  35          //      LOCAL DEFINE
  36          //********************************************************************
  37          
  38          //#define DEBUG_HS_PROTOCOL
  39          
  40          #define LCDMode 4
  41          
  42          //********************************************************************
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 54  

  43          //      GLOBAL VARIABLES
  44          //********************************************************************
  45          //#ifdef SUPPORT_SDCARD
  46          BYTE    year1,year2,month,day,hour,minute,second;
  47          BYTE    DVR_daylightsaving;
  48          BYTE    DVR_timebeginesmonth;
  49          BYTE    DVR_timebeginesweek;
  50          BYTE    DVR_timebeginesTime;
  51          BYTE    DVR_sandardtimebeginesMonth;
  52          BYTE    DVR_standardtimebeginesWeek;
  53          BYTE    DVR_standardtimebeginesTime;
  54          BYTE    DVR_Resolution                  ;
  55          BYTE    DVR_FPS                                 ;
  56          BYTE    DVR_Quality                             ;
  57          BYTE    DVR_RecordMode                  ;
  58          BYTE    DVR_RecordLength                ;
  59          BYTE    DVR_PreAlarmLength              ;
  60          BYTE    DVR_PostAlarmLength             ;
  61          BYTE    DVR_TimeZone;
  62          BYTE    DVR_SDCardAvailable             ;
  63          BYTE    DVR_RecordStatus                ;
  64          BYTE    DVR_Busy                                ;
  65          BYTE    DVR_OverWrite;
  66          BYTE    FormatStatus                    ;
  67          bit     FormatStart                             ;
  68          BYTE    TriggerStatus                   ;
  69          
  70          bit             DVR_Ready                               ;
  71          bit     GetDVRStatusflag                ;
  72          //bit   GetDVRVersionOK=0               ;
  73          BYTE DVRVersion[17]=0;
  74          BYTE DVRVersionLen=17;
  75          //#endif                //#ifdef SUPPORT_SDCARD
  76          
  77          extern  bit PowerDownStart              ;
  78          extern  BYTE PowerDownWait              ;
  79          extern  bit AccPowerDown                ;
  80          extern DATA BYTE        DVR_buf[DVR_BUF_MAX];
  81          extern DATA BYTE        RS2_in;
  82          extern  bit PowerDownStart              ;
  83          extern  BYTE PowerDownWait              ;
  84          extern  bit AccPowerDown                ;
  85          extern DATA BYTE        DVR_buf[DVR_BUF_MAX];
  86          extern DATA BYTE        RS2_in;
  87          
  88          
  89          BYTE gb_P_Com[8];       //Pelco P Command Buffer
  90          //BYTE gb_P_Com[7];     //Pelco D Command Buffer
  91          //BYTE GE_Com[9];       //GE Command Buffer
  92          BYTE gb_PTZ_Speed;
  93          bit SpeedDomeMode=0;
  94          BYTE PresetMode=0;
  95          BYTE PresetNumber=1;
  96          extern BYTE  CAMNumber;
  97          extern BYTE  PelcoChoiceFLAG;
  98          extern BYTE  Baud_rate;
  99          
 100          //********************************************************************
 101          //      LOCAL VARIABLES
 102          //********************************************************************
 103          BYTE    SerialNumber; 
 104          
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 55  

 105          
 106          //********************************************************************
 107          //      LOCAL FUNCTIONS
 108          //********************************************************************
 109          
 110          void Hs_Send_DVR_Command(BYTE * DVR_Com, BYTE len );
 111          BYTE DvrReceivePaser();
 112          
 113          //#ifdef SUPPORT_SDCARD
 114          void Hs_Protocol_Init(void)
 115          {
 116   1      
 117   1      SerialNumber=0;
 118   1      year1=0;
 119   1      year2=0;
 120   1      month=0;
 121   1      day=0;
 122   1      hour=0;
 123   1      minute=0;
 124   1      second=0;
 125   1      
 126   1      DVR_Resolution=0x01;
 127   1      DVR_FPS=0x01;
 128   1      DVR_Quality=0x01;
 129   1      DVR_RecordMode=0x01;
 130   1      DVR_RecordLength=0x01;
 131   1      DVR_PreAlarmLength=0x01;
 132   1      DVR_PostAlarmLength=0x01;
 133   1      DVR_TimeZone=0x01;      
 134   1      DVR_daylightsaving=0x01;                                
 135   1      DVR_timebeginesmonth=0x01;              
 136   1      DVR_timebeginesweek=0x01;               
 137   1      DVR_timebeginesTime=0x01;               
 138   1      DVR_sandardtimebeginesMonth=0x01;       
 139   1      DVR_standardtimebeginesWeek=0x01;       
 140   1      DVR_standardtimebeginesTime=0x01;               
 141   1      DVR_SDCardAvailable=0;
 142   1      DVR_RecordStatus=0x01;
 143   1      DVR_Busy=0;
 144   1      DVR_Ready=0;
 145   1      FormatStatus=0;
 146   1      FormatStart=0;
 147   1      DVR_OverWrite=1;
 148   1      }
 149          
 150          
 151          void Hs_DvrTxCmdPaser(BYTE Cmd_Id )
 152          {
 153   1      BYTE j;
 154   1      BYTE DVR_Com[30];       //DVR Protocol Command Buffer
 155   1      for(j=0;j<30;j++)
 156   1                      DVR_Com[j] = 0 ;
 157   1      
 158   1      DVR_Com[0] ='H';        //
 159   1      DVR_Com[1] ='S';        //      
 160   1      DVR_Com[2] = 0x01;              
 161   1      DVR_Com[3] = SerialNumber;
 162   1      
 163   1      
 164   1      switch(Cmd_Id)
 165   1              {
 166   2              case SetDVRParam:
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 56  

 167   2                      DVR_Com[4] = SetDVRParam;                       //Command Data
 168   2                      DVR_Com[5] = 8;                                 //Data len              
 169   2                      DVR_Com[6] = DVR_Resolution;            //Data 1
 170   2                      DVR_Com[7] = DVR_FPS;                           //Data 2
 171   2                      DVR_Com[8] = DVR_Quality;                       //Data 3
 172   2                      DVR_Com[9] = DVR_RecordMode;            //Data 4
 173   2                      DVR_Com[10] = DVR_RecordLength;         //Data 5
 174   2                      DVR_Com[11] = DVR_PreAlarmLength;       //Data 6
 175   2                      DVR_Com[12] = DVR_PostAlarmLength;      //Data 7
 176   2                      DVR_Com[13] = DVR_OverWrite;    //Data 7
 177   2                      break;
 178   2      
 179   2              case SetDVRDefault:
 180   2                      DVR_Com[4] = SetDVRDefault;                     //Command Data
 181   2                      DVR_Com[5] = 0;                                 //Data len              
 182   2                      break;  
 183   2                      
 184   2              case SetDATETIME:
 185   2                      DVR_Com[4] = SetDATETIME;                       //Command Data
 186   2                      DVR_Com[5] = 15;                                        //Data len              
 187   2                      DVR_Com[6] = year1;             //Data 1
 188   2                      DVR_Com[7] = year2;                             //Data 2
 189   2                      DVR_Com[8] = month;                     //Data 3
 190   2                      DVR_Com[9] = day;               //Data 4
 191   2                      DVR_Com[10] = hour;             //Data 5
 192   2                      DVR_Com[11] = minute;   //Data 6
 193   2                      DVR_Com[12] = second;   //Data 7
 194   2                      DVR_Com[13] = DVR_TimeZone;             //Data 8
 195   2                      DVR_Com[14] = DVR_daylightsaving;                               //Data 9
 196   2                      DVR_Com[15] = DVR_timebeginesmonth;                     //Data 10
 197   2                      DVR_Com[16] = DVR_timebeginesweek;              //Data 11
 198   2                      DVR_Com[17] = DVR_timebeginesTime;              //Data 12
 199   2                      DVR_Com[18] = DVR_sandardtimebeginesMonth;      //Data 13
 200   2                      DVR_Com[19] = DVR_standardtimebeginesWeek;      //Data 14
 201   2                      DVR_Com[20] = DVR_standardtimebeginesTime;              //Data 15
 202   2                      break;          
 203   2      
 204   2              
 205   2              case GetDVRParam:
 206   2                      DVR_Com[4] = GetDVRParam;                       //Command Data
 207   2                      DVR_Com[5] = 0;                                 //Data len              
 208   2                      break;  
 209   2      
 210   2              case GetDVRStatus:
 211   2                      DVR_Com[4] = GetDVRStatus;              //Command Data
 212   2                      DVR_Com[5] = 1;                                 //Data len      
 213   2                      DVR_Com[6] = 0;                                 //Param1
 214   2                      break;  
 215   2      
 216   2              case GetDATETIME:
 217   2                      DVR_Com[4] = GetDATETIME;               //Command Data
 218   2                      DVR_Com[5] = 0;                                 //Data len      
 219   2                      break;  
 220   2      
 221   2              case MANUALRECSTART:
 222   2                      DVR_Com[4] = MANUALRECSTART;            //Command Data
 223   2                      DVR_Com[5] = 0;                                 //Data len      
 224   2                      break;  
 225   2      
 226   2              case MANUALRECSTOP:
 227   2                      DVR_Com[4] = MANUALRECSTOP;             //Command Data
 228   2                      DVR_Com[5] = 0;                                 //Data len      
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 57  

 229   2                      break;  
 230   2      
 231   2              case SNAPSHOT:
 232   2                      DVR_Com[4] = SNAPSHOT;          //Command Data
 233   2                      DVR_Com[5] = 0;                                 //Data len      
 234   2                      break;
 235   2      
 236   2              case Halt_Start:
 237   2                      DVR_Com[4] = Halt_Start;                //Command Data
 238   2                      DVR_Com[5] = 0;                                 //Data len      
 239   2                      break;  
 240   2      
 241   2              case SetFormatSD :
 242   2                      DVR_Com[4] = SetFormatSD ;              //Command Data
 243   2                      DVR_Com[5] = 0;                                 //Data len      
 244   2                      FormatStart=1;
 245   2                      break;
 246   2      
 247   2              case SendAlarm :
 248   2                      DVR_Com[4] = SendAlarm;         //Command Data
 249   2                      DVR_Com[5] = 1;                                 //Data len      
 250   2                      DVR_Com[6] = 0;                                 //Param1
 251   2                      break;  
 252   2                      
 253   2              case GetDVRVersion :
 254   2                      DVR_Com[4] = GetDVRVersion;             //Command Data
 255   2                      DVR_Com[5] = 0;                                 //Data len      
 256   2      
 257   2                      break;  
 258   2                      
 259   2              case FW_Update_Start:
 260   2                      DVR_Com[4] = FW_Update_Start ;          //Command Data
 261   2                      DVR_Com[5] = 0;                                 //Data len      
 262   2                      FormatStart=1;
 263   2                      break;  
 264   2              }
 265   1      
 266   1      //for(j=0;j<5;j++)
 267   1      //{
 268   1              RS2_in=0;
 269   1              Hs_Send_DVR_Command((BYTE *)DVR_Com,DVR_Com[5]);
 270   1              //Wait_ms(400);
 271   1      
 272   1              //if(DvrReceivePaser()==TRUE)
 273   1              //      break;
 274   1      //}
 275   1      
 276   1      }
 277          
 278          
 279          void Hs_Send_DVR_Command(BYTE * DVR_Com, BYTE len )
 280          {
 281   1              BYTE ii,j;
 282   1      
 283   1              //Generate DVR Mode  Check Sum
 284   1              DVR_Com[len+6] = DVR_Com[0];
 285   1      
 286   1              
 287   1              for(j=1;j<(len+6);j++)
 288   1                      DVR_Com[len+6] = DVR_Com[len+6]^DVR_Com[j];
 289   1              //CheckSum = Byte1 XOR Byte2 XOR Byte3 XOR......
 290   1      
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 58  

 291   1              
 292   1              //Change_RS485_TxRx(1,RS485_TX);
 293   1              //Start Send DVR Command
 294   1              for(ii=0;ii<(len+7);ii++)
 295   1              {
 296   2                      RS2_tx(DVR_Com[ii]);    
 297   2              }
 298   1      
 299   1      
 300   1      
 301   1      #ifdef DEBUG_HS_PROTOCOL
              for(ii=0;ii<len+7;ii++)
              {
                      Printf("\r\nSend DVR Command[%d] = 0x%02x",(WORD)ii,(WORD)DVR_Com[ii]); 
              }
              #endif
 307   1      
 308   1      }
 309          
 310          BYTE DvrReceivePaser(void)
 311          {
 312   1              BYTE i,j,CheckSum;
 313   1              BYTE DVR_Com[30];       //DVR Protocol Command Buffer
 314   1      
 315   1              Wait_ms(300);
 316   1              //for(i=0;i<DVR_BUF_MAX;i++) 
 317   1              //{  
 318   1                      //Printf("\r\nDVR_buf[%d]=0x%02x",(WORD)i,(WORD)DVR_buf[i]);
 319   1              //}
 320   1      
 321   1              //DisplayNumber(DVRStatus_ADDR,year1,4);
 322   1              for(i=0;i<DVR_BUF_MAX;i++) 
 323   1              {  
 324   2                      if(DVR_buf[i]=='H' /*&& DVR_buf[(i+1)]=='S'*/)
 325   2                      {
 326   3                       if( DVR_buf[i+1]=='S'  ) 
 327   3                        break;
 328   3                      }
 329   2              }
 330   1      
 331   1      
 332   1              
 333   1      if(DVR_buf[(i+2)]==0x02)
 334   1              {
 335   2                      if(!(DVR_buf[(i+3)]==SerialNumber))
 336   2                              return FALSE;
 337   2              }
 338   1      
 339   1              
 340   1              //Generate DVR Mode  Check Sum
 341   1      
 342   1              CheckSum=DVR_buf[i];
 343   1      
 344   1              for(j=1;j<(DVR_buf[i+5]+6);j++)
 345   1                      CheckSum = CheckSum^DVR_buf[i+j];
 346   1      
 347   1              if(!(CheckSum==(DVR_buf[i+DVR_buf[i+5]+6])))
 348   1                      return FALSE;   
 349   1      
 350   1      switch(DVR_buf[i+4])
 351   1              {
 352   2              case SetDVRParam:
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 59  

 353   2                      break;
 354   2      
 355   2              case SetDVRDefault:
 356   2                      break;  
 357   2                      
 358   2              case SetDATETIME:
 359   2                      break;          
 360   2      
 361   2              
 362   2              case GetDVRParam:
 363   2                      DVR_Resolution=DVR_buf[i+6];                                                            //Data 1
 364   2                      DVR_FPS=DVR_buf[i+7];                                                                           //Data 2
 365   2                      DVR_Quality=DVR_buf[i+8];                                                                       //Data 3
 366   2                      DVR_RecordMode=DVR_buf[i+9];                                                            //Data 4
 367   2                      DVR_RecordLength=DVR_buf[i+10];                                                         //Data 5
 368   2                      DVR_PreAlarmLength=DVR_buf[i+11];                                                       //Data 6
 369   2                      DVR_PostAlarmLength=DVR_buf[i+12];                                                      //Data 7
 370   2                      DVR_OverWrite=DVR_buf[i+13];                                                    //Data 7
 371   2                      break;  
 372   2      
 373   2      
 374   2              case GetDVRStatus:
 375   2                      year1=DVR_buf[i+6];                                                             //Data 1
 376   2                      year2=DVR_buf[i+7];                                                             //Data 2
 377   2                      month=DVR_buf[i+8];                                                             //Data 3
 378   2                      day=DVR_buf[i+9];                                                               //Data 4
 379   2                      hour=DVR_buf[i+10];                                                             //Data 5
 380   2                      minute=DVR_buf[i+11];                                                   //Data 6
 381   2                      second=DVR_buf[i+12];                                                   //Data 7
 382   2                      DVR_RecordStatus=DVR_buf[i+13];                                 //Data 8
 383   2                      DVR_SDCardAvailable=DVR_buf[i+14];                              //Data 9
 384   2                      DVR_Busy=DVR_buf[i+15];                                                 //Data 10
 385   2                      break;  
 386   2      
 387   2              case GetDATETIME:
 388   2                      year1=DVR_buf[i+6];                                                             //Data 1
 389   2                      year2=DVR_buf[i+7];                                                             //Data 2
 390   2                      month=DVR_buf[i+8];                                                             //Data 3
 391   2                      day=DVR_buf[i+9];                                                               //Data 4
 392   2                      hour=DVR_buf[i+10];                                                             //Data 5
 393   2                      minute=DVR_buf[i+11];                                                   //Data 6
 394   2                      second=DVR_buf[i+12];                                                   //Data 7
 395   2                      DVR_TimeZone=DVR_buf[i+13];                                             //Data 8
 396   2                      DVR_daylightsaving=DVR_buf[i+14];                               //Data 9
 397   2                      DVR_timebeginesmonth=DVR_buf[i+15];                             //Data 10
 398   2                      DVR_timebeginesweek=DVR_buf[i+16];                              //Data 11
 399   2                      DVR_timebeginesTime=DVR_buf[i+17];                              //Data 12
 400   2                      DVR_sandardtimebeginesMonth=DVR_buf[i+18];              //Data 13
 401   2                      DVR_standardtimebeginesWeek=DVR_buf[i+19];              //Data 14
 402   2                      DVR_standardtimebeginesTime=DVR_buf[i+20];              //Data 15                                       //Data len      
 403   2                      break;  
 404   2                      
 405   2              case SendDVRStatus:
 406   2                      year1=DVR_buf[i+6];                                                             //Data 1
 407   2                      year2=DVR_buf[i+7];                                                             //Data 2
 408   2                      month=DVR_buf[i+8];                                                             //Data 3
 409   2                      day=DVR_buf[i+9];                                                               //Data 4
 410   2                      hour=DVR_buf[i+10];                                                             //Data 5
 411   2                      minute=DVR_buf[i+11];                                                   //Data 6
 412   2                      second=DVR_buf[i+12];                                                   //Data 7
 413   2                      DVR_RecordStatus=DVR_buf[i+13];                                         //Data 8
 414   2                      DVR_SDCardAvailable=DVR_buf[i+14];                              //Data 9
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 60  

 415   2                      DVR_Busy=DVR_buf[i+15];                                                 //Data 10
 416   2      
 417   2                      for(j=0;j<30;j++)
 418   2                              DVR_Com[j] = 0 ;
 419   2              
 420   2                      DVR_Com[0] ='H';        //
 421   2                      DVR_Com[1] ='S';        //      
 422   2                      DVR_Com[2] = 0x02;              
 423   2                      DVR_Com[3] = DVR_buf[i+3];
 424   2                      DVR_Com[4] = SendDVRStatus;             //Command Data
 425   2                      DVR_Com[5] = 0;                                 //Data len              
 426   2                      Hs_Send_DVR_Command((BYTE *)DVR_Com,DVR_Com[5]);
 427   2                      break;  
 428   2      
 429   2              case SendDVRParam:
 430   2                      DVR_Resolution=DVR_buf[i+6];                                                            //Data 1
 431   2                      DVR_FPS=DVR_buf[i+7];                                                                           //Data 2
 432   2                      DVR_Quality=DVR_buf[i+8];                                                                       //Data 3
 433   2                      DVR_RecordMode=DVR_buf[i+9];                                                            //Data 4
 434   2                      DVR_RecordLength=DVR_buf[i+10];                                                         //Data 5
 435   2                      DVR_PreAlarmLength=DVR_buf[i+11];                                                       //Data 6
 436   2                      DVR_PostAlarmLength=DVR_buf[i+12];                                                      //Data 7
 437   2                      DVR_OverWrite=DVR_buf[i+13];                                                    //Data 7
 438   2                      
 439   2      
 440   2                      for(j=0;j<30;j++)
 441   2                              DVR_Com[j] = 0 ;
 442   2              
 443   2                      DVR_Com[0] ='H';        //
 444   2                      DVR_Com[1] ='S';        //      
 445   2                      DVR_Com[2] = 0x02;              
 446   2                      DVR_Com[3] = DVR_buf[i+3];
 447   2                      DVR_Com[4] = SendDVRParam;              //Command Data
 448   2                      DVR_Com[5] = 0;                                 //Data len              
 449   2                      Hs_Send_DVR_Command((BYTE *)DVR_Com,DVR_Com[5]);
 450   2      
 451   2                      
 452   2                      break;  
 453   2      
 454   2              case SendDVRParamDT:
 455   2      
 456   2                      year1=DVR_buf[i+6];                                                             //Data 1
 457   2                      year2=DVR_buf[i+7];                                                             //Data 2
 458   2                      month=DVR_buf[i+8];                                                             //Data 3
 459   2                      day=DVR_buf[i+9];                                                               //Data 4
 460   2                      hour=DVR_buf[i+10];                                                             //Data 5
 461   2                      minute=DVR_buf[i+11];                                                   //Data 6
 462   2                      second=DVR_buf[i+12];                                                   //Data 7
 463   2                      DVR_TimeZone=DVR_buf[i+13];                                             //Data 8
 464   2                      DVR_daylightsaving=DVR_buf[i+14];                               //Data 9
 465   2                      DVR_timebeginesmonth=DVR_buf[i+15];                             //Data 10
 466   2                      DVR_timebeginesweek=DVR_buf[i+16];                              //Data 11
 467   2                      DVR_timebeginesTime=DVR_buf[i+17];                              //Data 12
 468   2                      DVR_sandardtimebeginesMonth=DVR_buf[i+18];              //Data 13
 469   2                      DVR_standardtimebeginesWeek=DVR_buf[i+19];              //Data 14
 470   2                      DVR_standardtimebeginesTime=DVR_buf[i+20];              //Data 15                                       //Data len              
 471   2      
 472   2                      for(j=0;j<30;j++)
 473   2                              DVR_Com[j] = 0 ;
 474   2              
 475   2                      DVR_Com[0] ='H';        //
 476   2                      DVR_Com[1] ='S';        //      
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 61  

 477   2                      DVR_Com[2] = 0x02;              
 478   2                      DVR_Com[3] = DVR_buf[i+3];
 479   2                      DVR_Com[4] = SendDVRParamDT;            //Command Data
 480   2                      DVR_Com[5] = 0;                                 //Data len              
 481   2                      Hs_Send_DVR_Command((BYTE *)DVR_Com,DVR_Com[5]);
 482   2                      
 483   2                      break;  
 484   2                      
 485   2              case GetLCDMode:        
 486   2                      for(j=0;j<30;j++)
 487   2                              DVR_Com[j] = 0 ;
 488   2              
 489   2                      DVR_Com[0] ='H';        //
 490   2                      DVR_Com[1] ='S';        //      
 491   2                      DVR_Com[2] = 0x02;              
 492   2                      DVR_Com[3] = DVR_buf[i+3];
 493   2                      DVR_Com[4] = GetLCDMode;                //Command Data
 494   2                      DVR_Com[5] = 0x01;                                      //Data len              
 495   2                      DVR_Com[6] = LCDMode;                                   //Data 1
 496   2                      Hs_Send_DVR_Command((BYTE *)DVR_Com,DVR_Com[5]);
 497   2                      
 498   2      
 499   2                      break;  
 500   2      
 501   2              case MANUALRECSTART:                    
 502   2                      break;  
 503   2      
 504   2              case MANUALRECSTOP:                     
 505   2                      break;  
 506   2      
 507   2              case SNAPSHOT:                  
 508   2                      break;
 509   2      
 510   2              case Halt_OK:
 511   2                      for(j=0;j<30;j++)
 512   2                      DVR_Com[j] = 0 ;
 513   2                      
 514   2                      if(ACC_B==1)
 515   2                              {       
 516   3                              //DVR_Com[6] = 1;                                       //Data 1
 517   3                              //Hs_Send_DVR_Command((BYTE *)DVR_Com,DVR_Com[5]);
 518   3                              //Wait_ms(300);
 519   3                      #ifdef BJTSwitch        
                                      PPWR=0;
                              #else
 522   3                              PPWR=1;
 523   3                      #endif
 524   3                              }
 525   2                      else
 526   2                              {
 527   3                              DVR_Com[0] ='H';        //
 528   3                              DVR_Com[1] ='S';        //      
 529   3                              DVR_Com[2] = 0x02;              
 530   3                              DVR_Com[3] = DVR_buf[i+3];
 531   3                              DVR_Com[4] = Halt_OK;           //Command Data
 532   3                              DVR_Com[5] = 1;                                 //Data len              
 533   3                              DVR_Com[6] = 0;                                 //Data 1
 534   3                              Hs_Send_DVR_Command((BYTE *)DVR_Com,DVR_Com[5]);
 535   3                              PowerDownStart=0;
 536   3                              PowerDownWait=0;
 537   3                              AccPowerDown=1;
 538   3                              }
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 62  

 539   2                      
 540   2                      break;  
 541   2      
 542   2      
 543   2                      
 544   2              case SetFormatSDDone:
 545   2      
 546   2                      for(j=0;j<30;j++)
 547   2                      DVR_Com[j] = 0 ;
 548   2                      
 549   2                      DVR_Com[0] ='H';        //
 550   2                      DVR_Com[1] ='S';        //      
 551   2                      DVR_Com[2] = 0x02;              
 552   2                      DVR_Com[3] = DVR_buf[i+3];
 553   2                      DVR_Com[4] = SetFormatSDDone;           //Command Data
 554   2                      DVR_Com[5] = 0;                                 //Data len              
 555   2                      Hs_Send_DVR_Command((BYTE *)DVR_Com,DVR_Com[5]);
 556   2                      FormatStatus=1;
 557   2      
 558   2                      
 559   2                      break;
 560   2      
 561   2              case FW_Update_OK:
 562   2      
 563   2                      //FormatStatus=DVR_buf[i+6];                                                    //Data 1
 564   2      
 565   2      
 566   2                      for(j=0;j<30;j++)
 567   2                      DVR_Com[j] = 0 ;
 568   2                      
 569   2                      DVR_Com[0] ='H';        //
 570   2                      DVR_Com[1] ='S';        //      
 571   2                      DVR_Com[2] = 0x02;              
 572   2                      DVR_Com[3] = DVR_buf[i+3];
 573   2                      DVR_Com[4] = FW_Update_OK;              //Command Data
 574   2                      DVR_Com[5] = 0;                                 //Data len              
 575   2                      Hs_Send_DVR_Command((BYTE *)DVR_Com,DVR_Com[5]);
 576   2                      FormatStatus=1;
 577   2      
 578   2      
 579   2                      
 580   2                      break;
 581   2      
 582   2      
 583   2              case GetDVRVersion:
 584   2                              
 585   2                      DVRVersionLen = DVR_buf[i+5];
 586   2                      for(j=0;j<=DVRVersionLen;j++)
 587   2                      {
 588   3                              DVRVersion[j]=DVR_buf[i+6+j];                                                           //Data 1        
 589   3                      }       
 590   2                      //GetDVRVersionOK=1;
 591   2                      DisplayFWVersion();
 592   2                      break;          
 593   2                      
 594   2              }
 595   1      
 596   1      
 597   1      
 598   1              for(j=0;j<29;j++)
 599   1                              DVR_buf[j] = 0 ;
 600   1      
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 63  

 601   1              
 602   1              SerialNumber++;
 603   1              
 604   1              RS2_in=0;
 605   1      
 606   1      if(DVR_Ready==0)
 607   1              {
 608   2                      DVR_Ready=1;
 609   2                      GetDVRStatusflag=1;
 610   2              }
 611   1              return TRUE;
 612   1      
 613   1      }
 614          
 615          //#endif        //#ifdef SUPPORT_SDCARD
 616          
 617          
 618          /////////////////////////////////////////////////////////////////////////
 619          //
 620          //      Camera Mode Send Command to RS485 Poart A 
 621          //      Note: Com_ID: Camera Command ID Number 
 622          //                Dev_ID: Camera Device ID Number 1~256 
 623          //                *Device ID Show with Input 1~256 Send Command then 0~255
 624          //                Protocol : 0:Pelco-P   1:Pelco-D
 625          /////////////////////////////////////////////////////////////////////////
 626          void CAM_TxCommand_toRS485(BYTE Com_ID)
 627          {
 628   1              BYTE j;
 629   1              //Printf("\r\nPelcoChoiceFLAG=%02x",(WORD)PelcoChoiceFLAG);
 630   1              //Printf("\r\nCAMNumber=%02x",(WORD)CAMNumber);
 631   1              //Printf("\r\nCom_ID=%02x",(WORD)Com_ID);
 632   1              //Select Speed Dome Protocol
 633   1              switch(PelcoChoiceFLAG)
 634   1              {
 635   2                      case 0: //Pelco P
 636   2                              //Clear Pelco P Command Buffer
 637   2                              for(j=0;j<8;j++)
 638   2                                      gb_P_Com[j] = 0 ;
 639   2                              gb_P_Com[0] = 0xA0;             //STX-Start Transmission
 640   2                              //Check Input Source with Camera Address
 641   2                                      gb_P_Com[1] = CAMNumber-1;  // 0~255
 642   2                              gb_P_Com[6] = 0xAF;             //ETX End Transmission
 643   2                              //Select Command ID
 644   2                              switch(Com_ID)
 645   2                              {
 646   3                              #if 0
                                              case CAM_CLEAR:
                                                      gb_P_Com[2] = 0;        //Data 1
                                                      gb_P_Com[3] = 0x05;     //Data 2
                                                      gb_P_Com[4] = 0;        //Data 3
                                                      if(gb_Show_Number_Nor_HL_Status == 0)
                                                              gb_P_Com[5] = UserPrefNumberID; //Data 4
                                                      else
                                                              gb_P_Com[5] = 0xFF;
                                                      Send_PelcoP_Command();
                                                      break;
                                      #endif                  
 658   3                                      case CAM_ZOOM_OUT_START:
 659   3                                              gb_P_Com[2] = 0;        //Data 1
 660   3                                              gb_P_Com[3] = 0x40;     //Data 2
 661   3                                              gb_P_Com[4] = 0;        //Data 3
 662   3                                              gb_P_Com[5] = 0;        //Data 4
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 64  

 663   3                                              Send_PelcoP_Command();
 664   3                                              break;
 665   3                                              
 666   3                              //      case CAM_ZOOM_OUT_END:
 667   3                              //      case CAM_ZOOM_IN_END:
 668   3                              //      case CAM_IRIS_CLOSE_END:
 669   3                              //      case CAM_IRIS_OPEN_END:
 670   3                              //      case CAM_FOCUS_FAR_END:
 671   3                              //      case CAM_FOCUS_NEAR_END:
 672   3                                      case CAM_PTZ_STOP:
 673   3                                              gb_P_Com[2] = 0;        //Data 1
 674   3                                              gb_P_Com[3] = 0;        //Data 2
 675   3                                              gb_P_Com[4] = 0;        //Data 3
 676   3                                              gb_P_Com[5] = 0;        //Data 4
 677   3                                              Send_PelcoP_Command();
 678   3                                              break;
 679   3                                      
 680   3                                      case CAM_ZOOM_IN_START:
 681   3                                              gb_P_Com[2] = 0;        //Data 1
 682   3                                              gb_P_Com[3] = 0x20;     //Data 2
 683   3                                              gb_P_Com[4] = 0;        //Data 3
 684   3                                              gb_P_Com[5] = 0;        //Data 4
 685   3                                              Send_PelcoP_Command();
 686   3                                              break;
 687   3                              #if 0                   
                                              case CAM_IRIS_CLOSE_START:
                                                      gb_P_Com[2] = 0x08;     //Data 1
                                                      gb_P_Com[3] = 0;        //Data 2
                                                      gb_P_Com[4] = 0;        //Data 3
                                                      gb_P_Com[5] = 0;        //Data 4
                                                      Send_PelcoP_Command();
                                                      break;
                                              case CAM_IRIS_OPEN_START:
                                                      gb_P_Com[2] = 0x04;     //Data 1
                                                      gb_P_Com[3] = 0;        //Data 2
                                                      gb_P_Com[4] = 0;        //Data 3
                                                      gb_P_Com[5] = 0;        //Data 4
                                                      Send_PelcoP_Command();
                                                      break;
                                              case CAM_FOCUS_FAR_START:
                                                      gb_P_Com[2] = 0x01;     //Data 1
                                                      gb_P_Com[3] = 0;        //Data 2
                                                      gb_P_Com[4] = 0;        //Data 3
                                                      gb_P_Com[5] = 0;        //Data 4
                                                      Send_PelcoP_Command();
                                                      break;
                                              case CAM_FOCUS_NEAR_START:
                                                      gb_P_Com[2] = 0x02;     //Data 1
                                                      gb_P_Com[3] = 0;        //Data 2
                                                      gb_P_Com[4] = 0;        //Data 3
                                                      gb_P_Com[5] = 0;        //Data 4
                                                      Send_PelcoP_Command();
                                                      break;
              
                                              case CAM_FOCUS_SPEED:
                                                      gb_P_Com[2] = 0;        //Data 1
                                                      gb_P_Com[3] = 0x27;     //Data 2
                                                      gb_P_Com[4] = 0;        //Data 3
                                                      if(gb_Show_Number_Nor_HL_Status == 0)
                                                              gb_P_Com[5] = UserPrefNumberID - 1;     //Data 4
                                                      else
                                                              gb_P_Com[5] = 0xFF;
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 65  

                                                      //Check Max Value
                                                      if(gb_P_Com[5] >= 0x03)
                                                              gb_P_Com[5] = 0x03;
                                                      Send_PelcoP_Command();
                                                      break;
                                              case CAM_ZOOM_SPEED:
                                                      gb_P_Com[2] = 0;        //Data 1
                                                      gb_P_Com[3] = 0x25;     //Data 2
                                                      gb_P_Com[4] = 0;        //Data 3
                                                      if(gb_Show_Number_Nor_HL_Status == 0)
                                                              gb_P_Com[5] = UserPrefNumberID - 1;     //Data 4
                                                      else
                                                              gb_P_Com[5] = 0xFF;
                                                      //Check Max Value
                                                      if(gb_P_Com[5] >= 0x03)
                                                              gb_P_Com[5] = 0x03;
                                                      Send_PelcoP_Command();
                                                      break;
                                              #endif  
 744   3                                      case CAM_SET:
 745   3                                              gb_P_Com[2] = 0;        //Data 1
 746   3                                              gb_P_Com[3] = 0x03;     //Data 2
 747   3                                              gb_P_Com[4] = 0;        //Data 3
 748   3                                              //if(gb_Show_Number_Nor_HL_Status == 0)
 749   3                                              //      gb_P_Com[5] = UserPrefNumberID; //Data 4
 750   3                                              //else
 751   3                                                      gb_P_Com[5] = PresetNumber;
 752   3                                              Send_PelcoP_Command();
 753   3                                              break;
 754   3                                      case CAM_CALL:
 755   3                                              gb_P_Com[2] = 0;        //Data 1
 756   3                                              gb_P_Com[3] = 0x07;     //Data 2
 757   3                                              gb_P_Com[4] = 0;        //Data 3
 758   3                                              //if(gb_Show_Number_Nor_HL_Status == 0)
 759   3                                              //      gb_P_Com[5] = UserPrefNumberID; //Data 4
 760   3                                              //else
 761   3                                                      gb_P_Com[5] = PresetNumber;
 762   3                                              Send_PelcoP_Command();
 763   3                                              break;
 764   3                                      case CAM_PTZ_RIGHT:     
 765   3                                              gb_P_Com[2] = 0;        //Data 1
 766   3                                              gb_P_Com[3] = 0x02;     //Data 2
 767   3                                              if(SpeedDomeMode==1)
 768   3                                                      gb_P_Com[4] = 0xff;     //Data 3        
 769   3                                              else
 770   3                                                      gb_P_Com[4] = gb_PTZ_Speed;     //Data 3
 771   3                                              gb_P_Com[5] = 0;        //Data 4
 772   3                                              Send_PelcoP_Command();
 773   3                                              break;
 774   3                                      case CAM_PTZ_LEFT:      
 775   3                                              gb_P_Com[2] = 0;        //Data 1
 776   3                                              gb_P_Com[3] = 0x04;     //Data 2
 777   3                                              if(SpeedDomeMode==1)
 778   3                                                      gb_P_Com[4] = 0xff; //Data 3    
 779   3                                              else
 780   3                                                      gb_P_Com[4] = gb_PTZ_Speed;     //Data 3
 781   3                                              gb_P_Com[5] = 0;        //Data 4
 782   3                                              Send_PelcoP_Command();
 783   3                                              break;
 784   3                                      case CAM_PTZ_UP:        
 785   3                                              gb_P_Com[2] = 0;        //Data 1
 786   3                                              gb_P_Com[3] = 0x08;     //Data 2                
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 66  

 787   3                                              gb_P_Com[4] = 0;        //Data 3
 788   3                                              if(SpeedDomeMode==1)
 789   3                                                      gb_P_Com[5] = 0xff; //Data 3    
 790   3                                              else    
 791   3                                                      gb_P_Com[5] = gb_PTZ_Speed;     //Data 4
 792   3                                              Send_PelcoP_Command();
 793   3                                              break;
 794   3                                      case CAM_PTZ_DOWN:      
 795   3                                              gb_P_Com[2] = 0;        //Data 1
 796   3                                              gb_P_Com[3] = 0x10;     //Data 2                                        
 797   3                                              gb_P_Com[4] = 0;        //Data 3
 798   3                                              if(SpeedDomeMode==1)
 799   3                                                      gb_P_Com[5] = 0xff; //Data 3    
 800   3                                              else    
 801   3                                                      gb_P_Com[5] = gb_PTZ_Speed;     //Data 4
 802   3                                              Send_PelcoP_Command();
 803   3                                              break;
 804   3                                      case CAM_MENU_ENTER:    
 805   3                                              gb_P_Com[2] = 0;        //Data 1
 806   3                                              gb_P_Com[3] = 0x03; //Data 2
 807   3                                              gb_P_Com[4] = 0;        //Data 3
 808   3                                              gb_P_Com[5] = 0x5F;     //Data 4
 809   3                                              Send_PelcoP_Command();
 810   3                                              break;  
 811   3                                      case CAM_Iris_Open:     
 812   3                                              gb_P_Com[2] = 0x04;     //Data 1
 813   3                                              gb_P_Com[3] = 0; //Data 2
 814   3                                              gb_P_Com[4] = 0;        //Data 3
 815   3                                              gb_P_Com[5] = 0;        //Data 4
 816   3                                              Send_PelcoP_Command();
 817   3                                              break;  
 818   3                                      #if 0   
                                              case CAM_PTZ_RIGHT_UP:  
                                                      gb_P_Com[2] = 0;        //Data 1
                                                      gb_P_Com[3] = 0x0A;     //Data 2
                                                      gb_P_Com[4] = gb_PTZ_Right_Speed;       //Data 3
                                                      gb_P_Com[5] = gb_PTZ_Up_Speed;  //Data 4
                                                      Send_PelcoP_Command();
                                                      break;
                                              case CAM_PTZ_RIGHT_DOWN:        
                                                      gb_P_Com[2] = 0;        //Data 1
                                                      gb_P_Com[3] = 0x12;     //Data 2
                                                      gb_P_Com[4] = gb_PTZ_Right_Speed;       //Data 3
                                                      gb_P_Com[5] = gb_PTZ_Down_Speed;        //Data 4
                                                      Send_PelcoP_Command();
                                                      break;
                                              case CAM_PTZ_LEFT_UP:   
                                                      gb_P_Com[2] = 0;        //Data 1
                                                      gb_P_Com[3] = 0x0C;     //Data 2
                                                      gb_P_Com[4] = gb_PTZ_Left_Speed;        //Data 3
                                                      gb_P_Com[5] = gb_PTZ_Up_Speed;  //Data 4
                                                      Send_PelcoP_Command();
                                                      break;
                                              case CAM_PTZ_LEFT_DOWN: 
                                                      gb_P_Com[2] = 0;        //Data 1
                                                      gb_P_Com[3] = 0x14;     //Data 2
                                                      gb_P_Com[4] = gb_PTZ_Left_Speed;        //Data 3
                                                      gb_P_Com[5] = gb_PTZ_Down_Speed;        //Data 4
                                                      Send_PelcoP_Command();
                                                      break;
                                              #endif  
 848   3                              }
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 67  

 849   2                              break;
 850   2                      case 1: //Pelco D
 851   2                              //Clear Pelco D Command Buffer
 852   2                              for(j=0;j<7;j++)
 853   2                                      gb_P_Com[j] = 0 ;
 854   2                              gb_P_Com[0] = 0xFF;             //Synchronization Byte
 855   2                              //Check Input Source with Camera Address
 856   2                                      gb_P_Com[1] = CAMNumber; // 1~256
 857   2                              //Select Command ID
 858   2                              switch(Com_ID)
 859   2                              {
 860   3                              #if 0
                                              case CAM_CLEAR:
                                                      gb_P_Com[2] = 0;        //Command 1
                                                      gb_P_Com[3] = 0x05;     //Command 2
                                                      gb_P_Com[4] = 0;        //Data 1
                                                      if(gb_Show_Number_Nor_HL_Status == 0)
                                                              gb_P_Com[5] = UserPrefNumberID; //Data 2
                                                      else
                                                              gb_P_Com[5] = 0xFF;
                                                      Send_PelcoD_Command();
                                                      break;
                                      #endif                  
 872   3                                      case CAM_ZOOM_OUT_START:
 873   3                                              gb_P_Com[2] = 0;        //Command 1
 874   3                                              gb_P_Com[3] = 0x40;     //Command 2
 875   3                                              gb_P_Com[4] = 0;        //Data 1
 876   3                                              gb_P_Com[5] = 0;        //Data 2
 877   3                                              Send_PelcoD_Command();
 878   3                                              break;
 879   3                                      
 880   3                              //      case CAM_ZOOM_OUT_END:
 881   3                              //      case CAM_ZOOM_IN_END:
 882   3                              //      case CAM_IRIS_CLOSE_END:
 883   3                              //      case CAM_IRIS_OPEN_END:
 884   3                              //      case CAM_FOCUS_FAR_END:
 885   3                              //      case CAM_FOCUS_NEAR_END:
 886   3                                      case CAM_PTZ_STOP:
 887   3                                              gb_P_Com[2] = 0;        //Command 1
 888   3                                              gb_P_Com[3] = 0;        //Command 2
 889   3                                              gb_P_Com[4] = 0;        //Data 1
 890   3                                              gb_P_Com[5] = 0;        //Data 2
 891   3                                              Send_PelcoD_Command();
 892   3                                              break;
 893   3                                      
 894   3                                      case CAM_ZOOM_IN_START:
 895   3                                              gb_P_Com[2] = 0;        //Command 1
 896   3                                              gb_P_Com[3] = 0x20;     //Command 2
 897   3                                              gb_P_Com[4] = 0;        //Data 1
 898   3                                              gb_P_Com[5] = 0;        //Data 2
 899   3                                              Send_PelcoD_Command();
 900   3                                              break;
 901   3                              #if 0           
                                              case CAM_IRIS_CLOSE_START:
                                                      gb_P_Com[2] = 0x04;     //Command 1
                                                      gb_P_Com[3] = 0;        //Command 2
                                                      gb_P_Com[4] = 0;        //Data 1
                                                      gb_P_Com[5] = 0;        //Data 2
                                                      Send_PelcoD_Command();
                                                      break;
              
                                              case CAM_FOCUS_FAR_START:
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 68  

                                                      gb_P_Com[2] = 0;        //Command 1
                                                      gb_P_Com[3] = 0x80;     //Command 2
                                                      gb_P_Com[4] = 0;        //Data 1
                                                      gb_P_Com[5] = 0;        //Data 2
                                                      Send_PelcoD_Command();
                                                      break;
                                              case CAM_FOCUS_NEAR_START:
                                                      gb_P_Com[2] = 0x01;     //Command 1
                                                      gb_P_Com[3] = 0;        //Command 2
                                                      gb_P_Com[4] = 0;        //Data 1
                                                      gb_P_Com[5] = 0;        //Data 2
                                                      Send_PelcoD_Command();
                                                      break;
              
                                              case CAM_FOCUS_SPEED:
                                                      gb_P_Com[2] = 0;        //Command 1
                                                      gb_P_Com[3] = 0x27;     //Command 2
                                                      gb_P_Com[4] = 0;        //Data 1
                                                      if(gb_Show_Number_Nor_HL_Status == 0)
                                                              gb_P_Com[5] = UserPrefNumberID - 1;     //Data 2
                                                      else
                                                              gb_P_Com[5] = 0xFF;
                                                      //Check Max Value
                                                      if(gb_P_Com[5] >= 0x03)
                                                              gb_P_Com[5] = 0x03;
                                                      Send_PelcoD_Command();
                                                      break;
                                              case CAM_ZOOM_SPEED:
                                                      gb_P_Com[2] = 0;        //Command 1
                                                      gb_P_Com[3] = 0x25;     //Command 2
                                                      gb_P_Com[4] = 0;        //Data 1
                                                      if(gb_Show_Number_Nor_HL_Status == 0)
                                                              gb_P_Com[5] = UserPrefNumberID - 1;     //Data 2
                                                      else
                                                              gb_P_Com[5] = 0xFF;
                                                      //Check Max Value
                                                      if(gb_P_Com[5] >= 0x03)
                                                              gb_P_Com[5] = 0x03;
                                                      Send_PelcoD_Command();
                                                      break;
                                      #endif          
 952   3                                      case CAM_PTZ_RIGHT:     
 953   3                                              gb_P_Com[2] = 0;        //Command 1
 954   3                                              gb_P_Com[3] = 0x02;     //Command 2
 955   3                                              if(SpeedDomeMode==1)
 956   3                                                      gb_P_Com[4] = 0xff; //Data 3    
 957   3                                              else
 958   3                                                      gb_P_Com[4] = gb_PTZ_Speed;     //Data 1
 959   3                                              gb_P_Com[5] = 0;        //Data 2
 960   3                                              Send_PelcoD_Command();
 961   3                                              break;
 962   3                                      case CAM_PTZ_LEFT:      
 963   3                                              gb_P_Com[2] = 0;        //Command 1
 964   3                                              gb_P_Com[3] = 0x04;     //Command 2
 965   3                                              if(SpeedDomeMode==1)
 966   3                                                      gb_P_Com[4] = 0xff; //Data 3    
 967   3                                              else
 968   3                                                      gb_P_Com[4] = gb_PTZ_Speed;     //Data 1
 969   3                                              gb_P_Com[5] = 0;        //Data 2
 970   3                                              Send_PelcoD_Command();
 971   3                                              break;
 972   3                                      case CAM_PTZ_UP:        
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 69  

 973   3                                              gb_P_Com[2] = 0;        //Command 1
 974   3                                              gb_P_Com[3] = 0x08;     //Command 2
 975   3                                              gb_P_Com[4] = 0;        //Data 1
 976   3                                              if(SpeedDomeMode==1)
 977   3                                                      gb_P_Com[5] = 0xff; //Data 3    
 978   3                                              else
 979   3                                                      gb_P_Com[5] = gb_PTZ_Speed;     //Data 2
 980   3                                              Send_PelcoD_Command();
 981   3                                              break;
 982   3                                      case CAM_PTZ_DOWN:      
 983   3                                              gb_P_Com[2] = 0;        //Command 1
 984   3                                              gb_P_Com[3] = 0x10;     //Command 2
 985   3                                              gb_P_Com[4] = 0;        //Data 1
 986   3                                              if(SpeedDomeMode==1)
 987   3                                                      gb_P_Com[5] = 0xff; //Data 3    
 988   3                                              else
 989   3                                                      gb_P_Com[5] = gb_PTZ_Speed;     //Data 2
 990   3                                              Send_PelcoD_Command();
 991   3                                              break;
 992   3                                      case CAM_SET:
 993   3                                              gb_P_Com[2] = 0;        //Command 1
 994   3                                              gb_P_Com[3] = 0x03;     //Command 2
 995   3                                              gb_P_Com[4] = 0;        //Data 1
 996   3                                              //if(gb_Show_Number_Nor_HL_Status == 0)
 997   3                                              //      gb_P_Com[5] = UserPrefNumberID; //Data 2
 998   3                                              //else
 999   3                                                      gb_P_Com[5] = PresetNumber;
1000   3                                              Send_PelcoD_Command();
1001   3                                              break;
1002   3                                      case CAM_CALL:
1003   3                                              gb_P_Com[2] = 0;        //Command 1
1004   3                                              gb_P_Com[3] = 0x07;     //Command 2
1005   3                                              gb_P_Com[4] = 0;        //Data 1
1006   3                                              //if(gb_Show_Number_Nor_HL_Status == 0)
1007   3                                              //      gb_P_Com[5] = UserPrefNumberID; //Data 2
1008   3                                              //else
1009   3                                                      gb_P_Com[5] = PresetNumber;
1010   3                                              Send_PelcoD_Command();
1011   3                                              break;
1012   3                                      case CAM_MENU_ENTER:    
1013   3                                              gb_P_Com[2] = 0;        //Command 1
1014   3                                              gb_P_Com[3] = 0x03;     //Command 2
1015   3                                              gb_P_Com[4] = 0;        //Data 1
1016   3                                              gb_P_Com[5] = 0x5F;     //Data 2
1017   3                                              Send_PelcoD_Command();
1018   3                                              break;
1019   3                                      case CAM_Iris_Open:     
1020   3                                              gb_P_Com[2] = 0x02;     //Command 1
1021   3                                              gb_P_Com[3] = 0;        //Command 2
1022   3                                              gb_P_Com[4] = 0;        //Data 1
1023   3                                              gb_P_Com[5] = 0;        //Data 2
1024   3                                              Send_PelcoD_Command();
1025   3                                              break;  
1026   3                              #if 0           
                                              case CAM_PTZ_RIGHT_UP:  
                                                      gb_P_Com[2] = 0;        //Command 1
                                                      gb_P_Com[3] = 0x0A;     //Command 2
                                                      gb_P_Com[4] = gb_PTZ_Right_Speed;       //Data 1
                                                      gb_P_Com[5] = gb_PTZ_Up_Speed;  //Data 2
                                                      Send_PelcoD_Command();
                                                      break;
                                              case CAM_PTZ_RIGHT_DOWN:        
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 70  

                                                      gb_P_Com[2] = 0;        //Command 1
                                                      gb_P_Com[3] = 0x12;     //Command 2
                                                      gb_P_Com[4] = gb_PTZ_Right_Speed;       //Data 1
                                                      gb_P_Com[5] = gb_PTZ_Down_Speed;        //Data 2
                                                      Send_PelcoD_Command();
                                                      break;
                                              case CAM_PTZ_LEFT_UP:   
                                                      gb_P_Com[2] = 0;        //Command 1
                                                      gb_P_Com[3] = 0x0C;     //Command 2
                                                      gb_P_Com[4] = gb_PTZ_Left_Speed;        //Data 1
                                                      gb_P_Com[5] = gb_PTZ_Up_Speed;  //Data 2
                                                      Send_PelcoD_Command();
                                                      break;
                                              case CAM_PTZ_LEFT_DOWN: 
                                                      gb_P_Com[2] = 0;        //Command 1
                                                      gb_P_Com[3] = 0x14;     //Command 2
                                                      gb_P_Com[4] = gb_PTZ_Left_Speed;        //Data 1
                                                      gb_P_Com[5] = gb_PTZ_Down_Speed;        //Data 2
                                                      Send_PelcoD_Command();
                                                      break;
                                      #endif          
1056   3                              }
1057   2                              break;
1058   2      #ifdef GE_PROTOCOL
                              case 2:
                                      //Clear GE Command Buffer
                                      for(j=0;j<9;j++)
                                              GE_Com[j] = 0 ;
                                      
                                      GE_Com[0] = 0xFF;               //STX-Start Transmission
                                      //Check Input Source with Camera Address
                                              GE_Com[6] = CAMNumber;  // 0~255
                                      //Select Command ID
                                      switch(Com_ID)
                                      {
                                              case CAM_PTZ_RIGHT: 
                                                      GE_Com[1] = 0x07;       //Length 
                                                      GE_Com[2] = 0x09;       //Message type 1 
                                                      GE_Com[3] = 0x05; //Message type 2
                                                      GE_Com[4] = 0;  //Destination
                                                      GE_Com[5] = 0;  //Source
                                                      GE_Com[7] = 0xc0;       //Motor command 
                                                      Send_GE_Command();
                                                      break;
                                              case CAM_PTZ_LEFT:      
                                                      GE_Com[1] = 0x07;       //Length 
                                                      GE_Com[2] = 0x09;       //Message type 1 
                                                      GE_Com[3] = 0x05; //Message type 2
                                                      GE_Com[4] = 0;  //Destination
                                                      GE_Com[5] = 0;  //Source
                                                      GE_Com[7] = 0x80;       //Motor command 
                                                      Send_GE_Command();
                                                      break;
                                              case CAM_PTZ_UP:        
                                                      GE_Com[1] = 0x07;       //Length 
                                                      GE_Com[2] = 0x09;       //Message type 1 
                                                      GE_Com[3] = 0x05; //Message type 2
                                                      GE_Com[4] = 0;  //Destination
                                                      GE_Com[5] = 0;  //Source
                                                      GE_Com[7] = 0x81;       //Motor command 
                                                      Send_GE_Command();
                                                      break;
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 71  

                                              case CAM_PTZ_DOWN:      
                                                      GE_Com[1] = 0x07;       //Length 
                                                      GE_Com[2] = 0x09;       //Message type 1 
                                                      GE_Com[3] = 0x05; //Message type 2
                                                      GE_Com[4] = 0;  //Destination
                                                      GE_Com[5] = 0;  //Source
                                                      GE_Com[7] = 0xc1;       //Motor command 
                                                      Send_GE_Command();
                                                      break;
                                              case CAM_ZOOM_IN_START: 
                                                      GE_Com[1] = 0x07; //Length 
                                                      GE_Com[2] = 0x09; //Message type 1 
                                                      GE_Com[3] = 0x05; //Message type 2
                                                      GE_Com[4] = 0;  //Destination
                                                      GE_Com[5] = 0;  //Source
                                                      GE_Com[7] = 0xc1; //Motor command 
                                                      Send_GE_Command();      
                                                      break;
                                              case CAM_ZOOM_OUT_START:        
                                                      GE_Com[1] = 0x07;       //Length 
                                                      GE_Com[2] = 0x09;       //Message type 1 
                                                      GE_Com[3] = 0x05; //Message type 2
                                                      GE_Com[4] = 0;  //Destination
                                                      GE_Com[5] = 0;  //Source
                                                      GE_Com[7] = 0xc1;       //Motor command 
                                                      Send_GE_Command();
                                                      break;
              
              
                                      }
                                      
                              break;
              #endif          
1130   2              }
1131   1              
1132   1      }
1133          
1134          
1135          ////////////////////////////////////////////////////////////////
1136          //
1137          //      Send Pelco P Command Using RS485 Port A Function
1138          //
1139          ////////////////////////////////////////////////////////////////
1140          void Send_PelcoP_Command(void)
1141          {
1142   1              BYTE ii,j;
1143   1      
1144   1              //Generate Camera Mode Pelco P Check Sum
1145   1              gb_P_Com[7] = gb_P_Com[0];      
1146   1              for(j=1;j<7;j++)
1147   1                      gb_P_Com[7] = gb_P_Com[7]^gb_P_Com[j];
1148   1      
1149   1              //Change_RS485_TxRx(0,RS485_TX);
1150   1              //Start Send Pelco P Command
1151   1              //Printf("\r\nTH1=%02x",(WORD)TH1);
1152   1              //Printf("\r\nBaud_rate=%d",(WORD)Baud_rate);
1153   1              switch(Baud_rate)
1154   1              {
1155   2              case Baud_rate2400:
1156   2                      S2BRT=0xd0;//0xd0;
1157   2                      break;
1158   2              case Baud_rate4800:
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 72  

1159   2                      S2BRT=0xe8;//0xe8;
1160   2                      break;
1161   2              case Baud_rate9600:
1162   2                      S2BRT=0xf4;//0xf4;
1163   2                      break;
1164   2              }
1165   1              
1166   1              Printf("\r\nTH111111111111111=%02x",(WORD)TH1);
1167   1              Wait_ms(100);
1168   1              for(ii=0;ii<8;ii++)
1169   1              {
1170   2                      RS2_tx(gb_P_Com[ii]);   
1171   2              }
1172   1              Wait_ms(100);
1173   1              S2BRT=0xf4;     //Baud_rate960
1174   1              //TH1=0xf4;     //Baud_rate9600
1175   1              //while(!(READ_PCB_REG(SP0STS) & TEMT));
1176   1              //Change_RS485_TxRx(0,RS485_RX);
1177   1      
1178   1      }
1179          
1180          
1181          ////////////////////////////////////////////////////////////////
1182          //
1183          //      Send Pelco D Command Using RS485 Port A Function
1184          //
1185          ////////////////////////////////////////////////////////////////
1186          void Send_PelcoD_Command(void)
1187          {
1188   1              BYTE ii,j;
1189   1      
1190   1              //Generate Camera Mode Pelco D Check Sum
1191   1              gb_P_Com[6] = gb_P_Com[1];      
1192   1              for(j=2;j<6;j++)
1193   1                      gb_P_Com[6] = gb_P_Com[6]+gb_P_Com[j];
1194   1      
1195   1              switch(Baud_rate)
1196   1              {
1197   2              case Baud_rate2400:
1198   2                      S2BRT=0xd0;//0xd0;
1199   2                      break;
1200   2              case Baud_rate4800:
1201   2                      S2BRT=0xe8;//0xe8;
1202   2                      break;
1203   2              case Baud_rate9600:
1204   2                      S2BRT=0xf4;//0xf4;
1205   2                      break;
1206   2              }
1207   1      
1208   1              Printf("\r\ngb_p_Com[0]=%02x",(WORD)gb_P_Com[0]);
1209   1              Wait_ms(100);
1210   1              //Change_RS485_TxRx(0,RS485_TX);
1211   1              //Start Send Pelco D Command
1212   1              for(ii=0;ii<7;ii++)
1213   1              {
1214   2                      RS2_tx(gb_P_Com[ii]);   
1215   2              }
1216   1      
1217   1              Wait_ms(100);
1218   1              S2BRT=0xf4;     //Baud_rate960
1219   1              //while(!(READ_PCB_REG(SP0STS) & TEMT));
1220   1              //Change_RS485_TxRx(0,RS485_RX);
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 73  

1221   1      }
1222          
1223          #ifdef GE_PROTOCOL
              ////////////////////////////////////////////////////////////////
              //
              //      Send GE Command Using RS485 Port A Function
              //
              ////////////////////////////////////////////////////////////////
              void Send_GE_Command(void)
              {
                      BYTE ii,j;
              
                      //Generate Camera Mode Pelco D Check Sum
                      GE_Com[8] = 0;  
                      for(j=1;j<=GE_Com[1];j++)
                              {GE_Com[8] = GE_Com[8]+GE_Com[j];}
              
                      GE_Com[8]=~GE_Com[8]+1;
              
                      switch(Baud_rate)
                      {
                      case Baud_rate2400:
                              S2BRT=0xd0;//0xd0;
                              break;
                      case Baud_rate4800:
                              S2BRT=0xe8;//0xe8;
                              break;
                      case Baud_rate9600:
                              S2BRT=0xf4;//0xf4;
                              break;
                      }
              
                      Printf("\r\n",0);
                      
                      Wait_ms(1000);
                      //Change_RS485_TxRx(0,RS485_TX);
                      //Start Send Pelco D Command
                      for(ii=0;ii<=GE_Com[1];ii++)
                      {
                              RS2_tx(GE_Com[ii]);     
                      }
              
                      Wait_ms(400);
                      S2BRT=0xf4;     //Baud_rate960
                      //while(!(READ_PCB_REG(SP0STS) & TEMT));
                      //Change_RS485_TxRx(0,RS485_RX);
              }
              #endif
1269          
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 74  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com00C7 (BEGIN)
0000         L?0200:
0000         L?0201:
0000 7800        R     MOV     R0,#LOW DVR_Com
0002 7448              MOV     A,#048H
0004 F2                MOVX    @R0,A
0005 08                INC     R0
0006 7453              MOV     A,#053H
0008 F2                MOVX    @R0,A
0009 08                INC     R0
000A 7402              MOV     A,#02H
000C F2                MOVX    @R0,A
000D 7800        R     MOV     R0,#LOW i
000F E2                MOVX    A,@R0
0010 2400        E     ADD     A,#LOW DVR_buf+03H
0012 F8                MOV     R0,A
0013 E6                MOV     A,@R0
0014 7800        R     MOV     R0,#LOW DVR_Com+03H
0016 F2                MOVX    @R0,A
0017 08                INC     R0
0018 22                RET     
0019         L?0202:
0019 7800        R     MOV     R0,#LOW i
001B E2                MOVX    A,@R0
001C FE                MOV     R6,A
001D 2400        E     ADD     A,#LOW DVR_buf+06H
001F F8                MOV     R0,A
0020 E6                MOV     A,@R0
0021 7800        R     MOV     R0,#LOW year1
0023 F2                MOVX    @R0,A
0024 7400        E     MOV     A,#LOW DVR_buf+07H
0026 2E                ADD     A,R6
0027 F8                MOV     R0,A
0028 E6                MOV     A,@R0
0029 7800        R     MOV     R0,#LOW year2
002B F2                MOVX    @R0,A
002C 7800        R     MOV     R0,#LOW i
002E E2                MOVX    A,@R0
002F FE                MOV     R6,A
0030 2400        E     ADD     A,#LOW DVR_buf+08H
0032 F8                MOV     R0,A
0033 E6                MOV     A,@R0
0034 7800        R     MOV     R0,#LOW month
0036 F2                MOVX    @R0,A
0037 7400        E     MOV     A,#LOW DVR_buf+09H
0039 2E                ADD     A,R6
003A F8                MOV     R0,A
003B E6                MOV     A,@R0
003C 7800        R     MOV     R0,#LOW day
003E F2                MOVX    @R0,A
003F 7800        R     MOV     R0,#LOW i
0041 E2                MOVX    A,@R0
0042 FE                MOV     R6,A
0043 2400        E     ADD     A,#LOW DVR_buf+0AH
0045 F8                MOV     R0,A
0046 E6                MOV     A,@R0
0047 7800        R     MOV     R0,#LOW hour
0049 F2                MOVX    @R0,A
004A 7400        E     MOV     A,#LOW DVR_buf+0BH
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 75  

004C 2E                ADD     A,R6
004D F8                MOV     R0,A
004E E6                MOV     A,@R0
004F 7800        R     MOV     R0,#LOW minute
0051 F2                MOVX    @R0,A
0052 7800        R     MOV     R0,#LOW i
0054 E2                MOVX    A,@R0
0055 FE                MOV     R6,A
0056         L?0203:
0056 2400        E     ADD     A,#LOW DVR_buf+0CH
0058 F8                MOV     R0,A
0059 E6                MOV     A,@R0
005A 7800        R     MOV     R0,#LOW second
005C F2                MOVX    @R0,A
005D 7400        E     MOV     A,#LOW DVR_buf+0DH
005F 22                RET     
0060         L?0204:
0060 7800        R     MOV     R0,#LOW i
0062 E2                MOVX    A,@R0
0063 FF                MOV     R7,A
0064 2400        E     ADD     A,#LOW DVR_buf+06H
0066 F8                MOV     R0,A
0067 E6                MOV     A,@R0
0068 7800        R     MOV     R0,#LOW year1
006A F2                MOVX    @R0,A
006B 7400        E     MOV     A,#LOW DVR_buf+07H
006D 2F                ADD     A,R7
006E F8                MOV     R0,A
006F E6                MOV     A,@R0
0070 7800        R     MOV     R0,#LOW year2
0072 F2                MOVX    @R0,A
0073 7800        R     MOV     R0,#LOW i
0075 E2                MOVX    A,@R0
0076 FF                MOV     R7,A
0077 2400        E     ADD     A,#LOW DVR_buf+08H
0079 F8                MOV     R0,A
007A E6                MOV     A,@R0
007B 7800        R     MOV     R0,#LOW month
007D F2                MOVX    @R0,A
007E 7400        E     MOV     A,#LOW DVR_buf+09H
0080 2F                ADD     A,R7
0081 F8                MOV     R0,A
0082 E6                MOV     A,@R0
0083 7800        R     MOV     R0,#LOW day
0085 F2                MOVX    @R0,A
0086 7800        R     MOV     R0,#LOW i
0088 E2                MOVX    A,@R0
0089 FF                MOV     R7,A
008A 2400        E     ADD     A,#LOW DVR_buf+0AH
008C F8                MOV     R0,A
008D E6                MOV     A,@R0
008E 7800        R     MOV     R0,#LOW hour
0090 F2                MOVX    @R0,A
0091 7400        E     MOV     A,#LOW DVR_buf+0BH
0093 2F                ADD     A,R7
0094 F8                MOV     R0,A
0095 E6                MOV     A,@R0
0096 7800        R     MOV     R0,#LOW minute
0098 F2                MOVX    @R0,A
0099 7800        R     MOV     R0,#LOW i
009B E2                MOVX    A,@R0
009C FF                MOV     R7,A
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 76  

009D 22                RET     
009E         L?0205:
009E         L?0206:
009E 7400        R     MOV     A,#LOW DVR_Com
00A0 2F                ADD     A,R7
00A1 F8                MOV     R0,A
00A2 E4                CLR     A
00A3         L?0207:
00A3 F2                MOVX    @R0,A
00A4 7800        R     MOV     R0,#LOW j
00A6 E2                MOVX    A,@R0
00A7 04                INC     A
00A8 F2                MOVX    @R0,A
00A9 22                RET     
00AA         L?0208:
00AA         L?0209:
00AA 7800        R     MOV     R0,#LOW j
00AC E2                MOVX    A,@R0
00AD FF                MOV     R7,A
00AE C3                CLR     C
00AF 941E              SUBB    A,#01EH
00B1 22                RET     
00B2         L?0210:
00B2         L?0211:
00B2 F2                MOVX    @R0,A
00B3 E4                CLR     A
00B4 08                INC     R0
00B5         L?0212:
00B5 F2                MOVX    @R0,A
00B6 7BFE              MOV     R3,#0FEH
00B8 7A00        R     MOV     R2,#HIGH DVR_Com
00BA 7900        R     MOV     R1,#LOW DVR_Com
00BC 22                RET     
00BD         L?0213:
00BD         L?0214:
00BD E4                CLR     A
00BE 7800        R     MOV     R0,#LOW gb_P_Com+02H
00C0 F2                MOVX    @R0,A
00C1 08                INC     R0
00C2 7403              MOV     A,#03H
00C4 F2                MOVX    @R0,A
00C5 E4                CLR     A
00C6 08                INC     R0
00C7 F2                MOVX    @R0,A
00C8 22                RET     
00C9         L?0215:
00C9 FE                MOV     R6,A
00CA E2                MOVX    A,@R0
00CB C3                CLR     C
00CC 9F                SUBB    A,R7
00CD EE                MOV     A,R6
00CE         L?0216:
00CE 6480              XRL     A,#080H
00D0 F8                MOV     R0,A
00D1 7480              MOV     A,#080H
00D3 98                SUBB    A,R0
00D4 22                RET     
00D5         L?0217:
00D5         L?0218:
00D5 7800        R     MOV     R0,#LOW gb_PTZ_Speed
00D7 E2                MOVX    A,@R0
00D8 7800        R     MOV     R0,#LOW gb_P_Com+04H
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 77  

00DA F2                MOVX    @R0,A
00DB 22                RET     
00DC         L?0219:
00DC         L?0220:
00DC 7800        R     MOV     R0,#LOW gb_PTZ_Speed
00DE E2                MOVX    A,@R0
00DF 7800        R     MOV     R0,#LOW gb_P_Com+05H
00E1 F2                MOVX    @R0,A
00E2 22                RET     
00E3         L?0221:
00E3 7400        R     MOV     A,#LOW gb_P_Com
00E5 2F                ADD     A,R7
00E6 F8                MOV     R0,A
00E7 E4                CLR     A
00E8 F2                MOVX    @R0,A
00E9 7800        R     MOV     R0,#LOW j
00EB E2                MOVX    A,@R0
00EC 04                INC     A
00ED F2                MOVX    @R0,A
00EE 22                RET     
00EF         L?0222:
00EF E4                CLR     A
00F0 7800        R     MOV     R0,#LOW gb_P_Com+02H
00F2 F2                MOVX    @R0,A
00F3 08                INC     R0
00F4 7408              MOV     A,#08H
00F6 F2                MOVX    @R0,A
00F7 E4                CLR     A
00F8 08                INC     R0
00F9 F2                MOVX    @R0,A
00FA 22                RET     
00FB         L?0223:
00FB E4                CLR     A
00FC 7800        R     MOV     R0,#LOW gb_P_Com+02H
00FE F2                MOVX    @R0,A
00FF 08                INC     R0
0100 7410              MOV     A,#010H
0102 F2                MOVX    @R0,A
0103 E4                CLR     A
0104 08                INC     R0
0105 F2                MOVX    @R0,A
0106 22                RET     
0107         L?0224:
0107 E2                MOVX    A,@R0
0108 F582              MOV     DPL,A
010A 758300            MOV     DPH,#00H
010D 020000      E     LJMP    ?C?CLDOPTR
0110         L?0225:
0110 2400        E     ADD     A,#LOW DVR_buf+06H
0112 F8                MOV     R0,A
0113 E6                MOV     A,@R0
0114 7800        R     MOV     R0,#LOW DVR_Resolution
0116 F2                MOVX    @R0,A
0117 7400        E     MOV     A,#LOW DVR_buf+07H
0119 22                RET     
011A         L?0226:
011A 2400        E     ADD     A,#LOW DVR_buf+08H
011C F8                MOV     R0,A
011D E6                MOV     A,@R0
011E 7800        R     MOV     R0,#LOW DVR_Quality
0120 F2                MOVX    @R0,A
0121 7400        E     MOV     A,#LOW DVR_buf+09H
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 78  

0123 22                RET     
0124         L?0227:
0124 2400        E     ADD     A,#LOW DVR_buf+0AH
0126 F8                MOV     R0,A
0127 E6                MOV     A,@R0
0128 7800        R     MOV     R0,#LOW DVR_RecordLength
012A F2                MOVX    @R0,A
012B 7400        E     MOV     A,#LOW DVR_buf+0BH
012D 22                RET     
012E         L?0228:
012E 2400        E     ADD     A,#LOW DVR_buf+0CH
0130 F8                MOV     R0,A
0131 E6                MOV     A,@R0
0132 7800        R     MOV     R0,#LOW DVR_PostAlarmLength
0134 F2                MOVX    @R0,A
0135 7400        E     MOV     A,#LOW DVR_buf+0DH
0137 22                RET     
0138         L?0229:
0138 F2                MOVX    @R0,A
0139 7800        R     MOV     R0,#LOW i
013B E2                MOVX    A,@R0
013C FE                MOV     R6,A
013D 2400        E     ADD     A,#LOW DVR_buf+0EH
013F F8                MOV     R0,A
0140 E6                MOV     A,@R0
0141 22                RET     
0142         L?0230:
0142 2400        E     ADD     A,#LOW DVR_buf+010H
0144 F8                MOV     R0,A
0145 E6                MOV     A,@R0
0146 7800        R     MOV     R0,#LOW DVR_timebeginesweek
0148 F2                MOVX    @R0,A
0149 7400        E     MOV     A,#LOW DVR_buf+011H
014B 22                RET     
014C         L?0231:
014C 2400        E     ADD     A,#LOW DVR_buf+012H
014E F8                MOV     R0,A
014F E6                MOV     A,@R0
0150 7800        R     MOV     R0,#LOW DVR_sandardtimebeginesMonth
0152 F2                MOVX    @R0,A
0153 7400        E     MOV     A,#LOW DVR_buf+013H
0155 22                RET     
0156         L?0232:
0156 F2                MOVX    @R0,A
0157 7800        R     MOV     R0,#LOW i
0159 E2                MOVX    A,@R0
015A FF                MOV     R7,A
015B 2400        E     ADD     A,#LOW DVR_buf+0EH
015D F8                MOV     R0,A
015E E6                MOV     A,@R0
015F 22                RET     
             ; FUNCTION Com00C7 (END)

             ; FUNCTION Hs_Protocol_Init (BEGIN)
                                           ; SOURCE LINE # 114
                                           ; SOURCE LINE # 115
                                           ; SOURCE LINE # 117
0000 E4                CLR     A
0001 7800        R     MOV     R0,#LOW SerialNumber
0003 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 118
0004 7800        R     MOV     R0,#LOW year1
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 79  

0006 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 119
0007 08                INC     R0
0008 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 120
0009 7800        R     MOV     R0,#LOW month
000B F2                MOVX    @R0,A
                                           ; SOURCE LINE # 121
000C 7800        R     MOV     R0,#LOW day
000E F2                MOVX    @R0,A
                                           ; SOURCE LINE # 122
000F 08                INC     R0
0010 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 123
0011 7800        R     MOV     R0,#LOW minute
0013 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 124
0014 7800        R     MOV     R0,#LOW second
0016 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 126
0017 08                INC     R0
0018 04                INC     A
0019 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 127
001A 7800        R     MOV     R0,#LOW DVR_FPS
001C F2                MOVX    @R0,A
                                           ; SOURCE LINE # 128
001D 7800        R     MOV     R0,#LOW DVR_Quality
001F F2                MOVX    @R0,A
                                           ; SOURCE LINE # 129
0020 7800        R     MOV     R0,#LOW DVR_RecordMode
0022 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 130
0023 7800        R     MOV     R0,#LOW DVR_RecordLength
0025 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 131
0026 7800        R     MOV     R0,#LOW DVR_PreAlarmLength
0028 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 132
0029 18                DEC     R0
002A F2                MOVX    @R0,A
                                           ; SOURCE LINE # 133
002B 7800        R     MOV     R0,#LOW DVR_TimeZone
002D F2                MOVX    @R0,A
                                           ; SOURCE LINE # 134
002E 7800        R     MOV     R0,#LOW DVR_daylightsaving
0030 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 135
0031 7800        R     MOV     R0,#LOW DVR_timebeginesmonth
0033 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 136
0034 08                INC     R0
0035 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 137
0036 7800        R     MOV     R0,#LOW DVR_timebeginesTime
0038 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 138
0039 7800        R     MOV     R0,#LOW DVR_sandardtimebeginesMonth
003B F2                MOVX    @R0,A
                                           ; SOURCE LINE # 139
003C 7800        R     MOV     R0,#LOW DVR_standardtimebeginesWeek
003E F2                MOVX    @R0,A
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 80  

                                           ; SOURCE LINE # 140
003F 08                INC     R0
0040 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 141
0041 E4                CLR     A
0042 7800        R     MOV     R0,#LOW DVR_SDCardAvailable
0044 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 142
0045 7800        R     MOV     R0,#LOW DVR_RecordStatus
0047 04                INC     A
0048 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 143
0049 E4                CLR     A
004A 7800        R     MOV     R0,#LOW DVR_Busy
004C F2                MOVX    @R0,A
                                           ; SOURCE LINE # 144
004D C200        R     CLR     DVR_Ready
                                           ; SOURCE LINE # 145
004F 7800        R     MOV     R0,#LOW FormatStatus
0051 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 146
0052 C200        R     CLR     FormatStart
                                           ; SOURCE LINE # 147
0054 7800        R     MOV     R0,#LOW DVR_OverWrite
0056 04                INC     A
0057 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 148
0058 22                RET     
             ; FUNCTION Hs_Protocol_Init (END)

             ; FUNCTION _Hs_DvrTxCmdPaser (BEGIN)
                                           ; SOURCE LINE # 151
;---- Variable 'Cmd_Id' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 152
                                           ; SOURCE LINE # 155
;---- Variable 'j' assigned to Register 'R6' ----
0000         ?C0002:
                                           ; SOURCE LINE # 156
0000 7E1E              MOV     R6,#01EH
0002 7800        R     MOV     R0,#LOW DVR_Com
0004 E4                CLR     A
0005         ?C0164:
0005 F2                MOVX    @R0,A
0006 08                INC     R0
0007 DEFC              DJNZ    R6,?C0164
0009 7E1E              MOV     R6,#01EH
000B         ?C0003:
                                           ; SOURCE LINE # 158
000B 7800        R     MOV     R0,#LOW DVR_Com
000D 7448              MOV     A,#048H
000F F2                MOVX    @R0,A
                                           ; SOURCE LINE # 159
0010 08                INC     R0
0011 7453              MOV     A,#053H
0013 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 160
0014 08                INC     R0
0015 7401              MOV     A,#01H
0017 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 161
0018 7800        R     MOV     R0,#LOW SerialNumber
001A E2                MOVX    A,@R0
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 81  

001B 7800        R     MOV     R0,#LOW DVR_Com+03H
001D F2                MOVX    @R0,A
                                           ; SOURCE LINE # 164
001E EF                MOV     A,R7
001F 120000      E     LCALL   ?C?CCASE
0022 0000        R     DW      ?C0006
0024 01                DB      01H
0025 0000        R     DW      ?C0007
0027 02                DB      02H
0028 0000        R     DW      ?C0008
002A 03                DB      03H
002B 0000        R     DW      ?C0009
002D 04                DB      04H
002E 0000        R     DW      ?C0010
0030 05                DB      05H
0031 0000        R     DW      ?C0011
0033 06                DB      06H
0034 0000        R     DW      ?C0016
0036 07                DB      07H
0037 0000        R     DW      ?C0017
0039 08                DB      08H
003A 0000        R     DW      ?C0018
003C 09                DB      09H
003D 0000        R     DW      ?C0015
003F C8                DB      0C8H
0040 0000        R     DW      ?C0019
0042 CA                DB      0CAH
0043 0000        R     DW      ?C0012
0045 DC                DB      0DCH
0046 0000        R     DW      ?C0013
0048 DD                DB      0DDH
0049 0000        R     DW      ?C0014
004B DE                DB      0DEH
004C 0000              DW      00H
004E 0000        R     DW      ?C0005
                                           ; SOURCE LINE # 165
                                           ; SOURCE LINE # 166
0050         ?C0006:
                                           ; SOURCE LINE # 167
0050 7800        R     MOV     R0,#LOW DVR_Com+04H
0052 7401              MOV     A,#01H
0054 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 168
0055 08                INC     R0
0056 7408              MOV     A,#08H
0058 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 169
0059 7800        R     MOV     R0,#LOW DVR_Resolution
005B E2                MOVX    A,@R0
005C 7800        R     MOV     R0,#LOW DVR_Com+06H
005E F2                MOVX    @R0,A
                                           ; SOURCE LINE # 170
005F 7800        R     MOV     R0,#LOW DVR_FPS
0061 E2                MOVX    A,@R0
0062 7800        R     MOV     R0,#LOW DVR_Com+07H
0064 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 171
0065 7800        R     MOV     R0,#LOW DVR_Quality
0067 E2                MOVX    A,@R0
0068 7800        R     MOV     R0,#LOW DVR_Com+08H
006A F2                MOVX    @R0,A
                                           ; SOURCE LINE # 172
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 82  

006B 7800        R     MOV     R0,#LOW DVR_RecordMode
006D E2                MOVX    A,@R0
006E 7800        R     MOV     R0,#LOW DVR_Com+09H
0070 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 173
0071 7800        R     MOV     R0,#LOW DVR_RecordLength
0073 E2                MOVX    A,@R0
0074 7800        R     MOV     R0,#LOW DVR_Com+0AH
0076 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 174
0077 7800        R     MOV     R0,#LOW DVR_PreAlarmLength
0079 E2                MOVX    A,@R0
007A 7800        R     MOV     R0,#LOW DVR_Com+0BH
007C F2                MOVX    @R0,A
                                           ; SOURCE LINE # 175
007D 7800        R     MOV     R0,#LOW DVR_PostAlarmLength
007F E2                MOVX    A,@R0
0080 7800        R     MOV     R0,#LOW DVR_Com+0CH
0082 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 176
0083 7800        R     MOV     R0,#LOW DVR_OverWrite
0085 E2                MOVX    A,@R0
0086 7800        R     MOV     R0,#LOW DVR_Com+0DH
0088 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 177
0089 020000      R     LJMP    ?C0005
                                           ; SOURCE LINE # 179
008C         ?C0007:
                                           ; SOURCE LINE # 180
008C 7800        R     MOV     R0,#LOW DVR_Com+04H
008E 7402              MOV     A,#02H
                                           ; SOURCE LINE # 181
                                           ; SOURCE LINE # 182
0090 020000      R     LJMP    ?C0174
                                           ; SOURCE LINE # 184
0093         ?C0008:
                                           ; SOURCE LINE # 185
0093 7800        R     MOV     R0,#LOW DVR_Com+04H
0095 7403              MOV     A,#03H
0097 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 186
0098 08                INC     R0
0099 740F              MOV     A,#0FH
009B F2                MOVX    @R0,A
                                           ; SOURCE LINE # 187
009C 7800        R     MOV     R0,#LOW year1
009E E2                MOVX    A,@R0
009F 7800        R     MOV     R0,#LOW DVR_Com+06H
00A1 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 188
00A2 7800        R     MOV     R0,#LOW year2
00A4 E2                MOVX    A,@R0
00A5 7800        R     MOV     R0,#LOW DVR_Com+07H
00A7 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 189
00A8 7800        R     MOV     R0,#LOW month
00AA E2                MOVX    A,@R0
00AB 7800        R     MOV     R0,#LOW DVR_Com+08H
00AD F2                MOVX    @R0,A
                                           ; SOURCE LINE # 190
00AE 7800        R     MOV     R0,#LOW day
00B0 E2                MOVX    A,@R0
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 83  

00B1 7800        R     MOV     R0,#LOW DVR_Com+09H
00B3 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 191
00B4 7800        R     MOV     R0,#LOW hour
00B6 E2                MOVX    A,@R0
00B7 7800        R     MOV     R0,#LOW DVR_Com+0AH
00B9 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 192
00BA 7800        R     MOV     R0,#LOW minute
00BC E2                MOVX    A,@R0
00BD 7800        R     MOV     R0,#LOW DVR_Com+0BH
00BF F2                MOVX    @R0,A
                                           ; SOURCE LINE # 193
00C0 7800        R     MOV     R0,#LOW second
00C2 E2                MOVX    A,@R0
00C3 7800        R     MOV     R0,#LOW DVR_Com+0CH
00C5 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 194
00C6 7800        R     MOV     R0,#LOW DVR_TimeZone
00C8 E2                MOVX    A,@R0
00C9 7800        R     MOV     R0,#LOW DVR_Com+0DH
00CB F2                MOVX    @R0,A
                                           ; SOURCE LINE # 195
00CC 7800        R     MOV     R0,#LOW DVR_daylightsaving
00CE E2                MOVX    A,@R0
00CF 7800        R     MOV     R0,#LOW DVR_Com+0EH
00D1 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 196
00D2 7800        R     MOV     R0,#LOW DVR_timebeginesmonth
00D4 E2                MOVX    A,@R0
00D5 7800        R     MOV     R0,#LOW DVR_Com+0FH
00D7 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 197
00D8 7800        R     MOV     R0,#LOW DVR_timebeginesweek
00DA E2                MOVX    A,@R0
00DB 7800        R     MOV     R0,#LOW DVR_Com+010H
00DD F2                MOVX    @R0,A
                                           ; SOURCE LINE # 198
00DE 7800        R     MOV     R0,#LOW DVR_timebeginesTime
00E0 E2                MOVX    A,@R0
00E1 7800        R     MOV     R0,#LOW DVR_Com+011H
00E3 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 199
00E4 7800        R     MOV     R0,#LOW DVR_sandardtimebeginesMonth
00E6 E2                MOVX    A,@R0
00E7 7800        R     MOV     R0,#LOW DVR_Com+012H
00E9 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 200
00EA 7800        R     MOV     R0,#LOW DVR_standardtimebeginesWeek
00EC E2                MOVX    A,@R0
00ED 7800        R     MOV     R0,#LOW DVR_Com+013H
00EF F2                MOVX    @R0,A
                                           ; SOURCE LINE # 201
00F0 7800        R     MOV     R0,#LOW DVR_standardtimebeginesTime
00F2 E2                MOVX    A,@R0
00F3 7800        R     MOV     R0,#LOW DVR_Com+014H
00F5 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 202
00F6 8052              SJMP    ?C0005
                                           ; SOURCE LINE # 205
00F8         ?C0009:
                                           ; SOURCE LINE # 206
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 84  

00F8 7800        R     MOV     R0,#LOW DVR_Com+04H
00FA 7404              MOV     A,#04H
00FC         ?C0165:
                                           ; SOURCE LINE # 207
                                           ; SOURCE LINE # 208
00FC 803C              SJMP    ?C0174
                                           ; SOURCE LINE # 210
00FE         ?C0010:
                                           ; SOURCE LINE # 211
00FE 7800        R     MOV     R0,#LOW DVR_Com+04H
0100 7405              MOV     A,#05H
0102 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 212
0103 08                INC     R0
0104 7401              MOV     A,#01H
0106         ?C0166:
                                           ; SOURCE LINE # 213
                                           ; SOURCE LINE # 214
0106 8032              SJMP    ?C0174
                                           ; SOURCE LINE # 216
0108         ?C0011:
                                           ; SOURCE LINE # 217
0108 7800        R     MOV     R0,#LOW DVR_Com+04H
010A 7406              MOV     A,#06H
010C         ?C0167:
                                           ; SOURCE LINE # 218
                                           ; SOURCE LINE # 219
010C 802C              SJMP    ?C0174
                                           ; SOURCE LINE # 221
010E         ?C0012:
                                           ; SOURCE LINE # 222
010E 7800        R     MOV     R0,#LOW DVR_Com+04H
0110 74DC              MOV     A,#0DCH
0112         ?C0168:
                                           ; SOURCE LINE # 223
                                           ; SOURCE LINE # 224
0112 8026              SJMP    ?C0174
                                           ; SOURCE LINE # 226
0114         ?C0013:
                                           ; SOURCE LINE # 227
0114 7800        R     MOV     R0,#LOW DVR_Com+04H
0116 74DD              MOV     A,#0DDH
0118         ?C0169:
                                           ; SOURCE LINE # 228
                                           ; SOURCE LINE # 229
0118 8020              SJMP    ?C0174
                                           ; SOURCE LINE # 231
011A         ?C0014:
                                           ; SOURCE LINE # 232
011A 7800        R     MOV     R0,#LOW DVR_Com+04H
011C 74DE              MOV     A,#0DEH
011E         ?C0170:
                                           ; SOURCE LINE # 233
                                           ; SOURCE LINE # 234
011E 801A              SJMP    ?C0174
                                           ; SOURCE LINE # 236
0120         ?C0015:
                                           ; SOURCE LINE # 237
0120 7800        R     MOV     R0,#LOW DVR_Com+04H
0122 74C8              MOV     A,#0C8H
0124         ?C0171:
                                           ; SOURCE LINE # 238
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 85  

                                           ; SOURCE LINE # 239
0124 8014              SJMP    ?C0174
                                           ; SOURCE LINE # 241
0126         ?C0016:
                                           ; SOURCE LINE # 242
0126 7800        R     MOV     R0,#LOW DVR_Com+04H
0128 7407              MOV     A,#07H
                                           ; SOURCE LINE # 243
                                           ; SOURCE LINE # 244
                                           ; SOURCE LINE # 245
012A 8018              SJMP    ?C0173
                                           ; SOURCE LINE # 247
012C         ?C0017:
                                           ; SOURCE LINE # 248
012C 7800        R     MOV     R0,#LOW DVR_Com+04H
012E 7408              MOV     A,#08H
0130 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 249
0131 08                INC     R0
0132 7401              MOV     A,#01H
0134         ?C0172:
                                           ; SOURCE LINE # 250
                                           ; SOURCE LINE # 251
0134 8004              SJMP    ?C0174
                                           ; SOURCE LINE # 253
0136         ?C0018:
                                           ; SOURCE LINE # 254
0136 7800        R     MOV     R0,#LOW DVR_Com+04H
0138 7409              MOV     A,#09H
013A         ?C0174:
013A F2                MOVX    @R0,A
                                           ; SOURCE LINE # 255
013B E4                CLR     A
013C 08                INC     R0
013D F2                MOVX    @R0,A
                                           ; SOURCE LINE # 257
013E 800A              SJMP    ?C0005
                                           ; SOURCE LINE # 259
0140         ?C0019:
                                           ; SOURCE LINE # 260
0140 7800        R     MOV     R0,#LOW DVR_Com+04H
0142 74CA              MOV     A,#0CAH
0144         ?C0173:
0144 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 261
0145 E4                CLR     A
0146 08                INC     R0
0147 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 262
0148 D200        R     SETB    FormatStart
                                           ; SOURCE LINE # 263
                                           ; SOURCE LINE # 264
014A         ?C0005:
                                           ; SOURCE LINE # 268
014A E4                CLR     A
014B F500        E     MOV     RS2_in,A
                                           ; SOURCE LINE # 269
014D 7BFE              MOV     R3,#0FEH
014F 7A00        R     MOV     R2,#HIGH DVR_Com
0151 7900        R     MOV     R1,#LOW DVR_Com
0153 7800        R     MOV     R0,#LOW DVR_Com+05H
0155 E2                MOVX    A,@R0
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 86  

0156 FD                MOV     R5,A
0157 020000      R     LJMP    _Hs_Send_DVR_Command
             ; FUNCTION _Hs_DvrTxCmdPaser (END)

             ; FUNCTION _Hs_Send_DVR_Command (BEGIN)
                                           ; SOURCE LINE # 279
0000 7800        R     MOV     R0,#LOW DVR_Com
0002 120000      E     LCALL   ?C?PSTPDATA
0005 7800        R     MOV     R0,#LOW len
0007 ED                MOV     A,R5
0008 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 280
                                           ; SOURCE LINE # 284
0009 120000      E     LCALL   ?C?CLDPTR
000C FF                MOV     R7,A
000D 7406              MOV     A,#06H
000F 2D                ADD     A,R5
0010 F582              MOV     DPL,A
0012 E4                CLR     A
0013 33                RLC     A
0014 F583              MOV     DPH,A
0016 EF                MOV     A,R7
0017 120000      E     LCALL   ?C?CSTOPTR
                                           ; SOURCE LINE # 287
001A 7800        R     MOV     R0,#LOW j
001C 7401              MOV     A,#01H
001E F2                MOVX    @R0,A
001F         ?C0021:
001F 7800        R     MOV     R0,#LOW len
0021 E2                MOVX    A,@R0
0022 2406              ADD     A,#06H
0024 FF                MOV     R7,A
0025 E4                CLR     A
0026 33                RLC     A
0027 7800        R     MOV     R0,#LOW j
0029 120000      R     LCALL   L?0215
002C 5030              JNC     ?C0022
                                           ; SOURCE LINE # 288
002E 7800        R     MOV     R0,#LOW DVR_Com
0030 120000      E     LCALL   ?C?PLDPDATA
0033 E9                MOV     A,R1
0034 2F                ADD     A,R7
0035 F9                MOV     R1,A
0036 EA                MOV     A,R2
0037 3E                ADDC    A,R6
0038 FA                MOV     R2,A
0039 C003              PUSH    AR3
003B C002              PUSH    AR2
003D C001              PUSH    AR1
003F 120000      E     LCALL   ?C?CLDPTR
0042 FF                MOV     R7,A
0043 7800        R     MOV     R0,#LOW DVR_Com
0045 120000      E     LCALL   ?C?PLDPDATA
0048 7800        R     MOV     R0,#LOW j
004A 120000      R     LCALL   L?0224
004D 6F                XRL     A,R7
004E D001              POP     AR1
0050 D002              POP     AR2
0052 D003              POP     AR3
0054 120000      E     LCALL   ?C?CSTPTR
0057 7800        R     MOV     R0,#LOW j
0059 E2                MOVX    A,@R0
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 87  

005A 04                INC     A
005B F2                MOVX    @R0,A
005C 80C1              SJMP    ?C0021
005E         ?C0022:
                                           ; SOURCE LINE # 294
005E E4                CLR     A
005F 7800        R     MOV     R0,#LOW ii
0061 F2                MOVX    @R0,A
0062         ?C0024:
0062 7800        R     MOV     R0,#LOW len
0064 E2                MOVX    A,@R0
0065 2407              ADD     A,#07H
0067 FF                MOV     R7,A
0068 E4                CLR     A
0069 33                RLC     A
006A 08                INC     R0
006B 120000      R     LCALL   L?0215
006E 5015              JNC     ?C0027
                                           ; SOURCE LINE # 295
                                           ; SOURCE LINE # 296
0070 7800        R     MOV     R0,#LOW DVR_Com
0072 120000      E     LCALL   ?C?PLDPDATA
0075 7800        R     MOV     R0,#LOW ii
0077 120000      R     LCALL   L?0224
007A FF                MOV     R7,A
007B 120000      E     LCALL   _RS2_tx
                                           ; SOURCE LINE # 297
007E 7800        R     MOV     R0,#LOW ii
0080 E2                MOVX    A,@R0
0081 04                INC     A
0082 F2                MOVX    @R0,A
0083 80DD              SJMP    ?C0024
                                           ; SOURCE LINE # 308
0085         ?C0027:
0085 22                RET     
             ; FUNCTION _Hs_Send_DVR_Command (END)

             ; FUNCTION DvrReceivePaser (BEGIN)
                                           ; SOURCE LINE # 310
                                           ; SOURCE LINE # 311
                                           ; SOURCE LINE # 315
0000 7F2C              MOV     R7,#02CH
0002 7E01              MOV     R6,#01H
0004 120000      E     LCALL   _Wait_ms
                                           ; SOURCE LINE # 322
0007 E4                CLR     A
0008 7800        R     MOV     R0,#LOW i
000A F2                MOVX    @R0,A
000B         ?C0028:
000B 7800        R     MOV     R0,#LOW i
000D E2                MOVX    A,@R0
000E FF                MOV     R7,A
000F C3                CLR     C
0010 941E              SUBB    A,#01EH
0012 501A              JNC     ?C0029
                                           ; SOURCE LINE # 323
                                           ; SOURCE LINE # 324
0014 7400        E     MOV     A,#LOW DVR_buf
0016 2F                ADD     A,R7
0017 F8                MOV     R0,A
0018 E6                MOV     A,@R0
0019 B4480B            CJNE    A,#048H,?C0030
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 88  

                                           ; SOURCE LINE # 325
                                           ; SOURCE LINE # 326
001C 7800        R     MOV     R0,#LOW i
001E E2                MOVX    A,@R0
001F 2400        E     ADD     A,#LOW DVR_buf+01H
0021 F8                MOV     R0,A
0022 E6                MOV     A,@R0
0023 6453              XRL     A,#053H
0025 6007              JZ      ?C0029
                                           ; SOURCE LINE # 327
                                           ; SOURCE LINE # 328
                                           ; SOURCE LINE # 329
0027         ?C0030:
0027 7800        R     MOV     R0,#LOW i
0029 E2                MOVX    A,@R0
002A 04                INC     A
002B F2                MOVX    @R0,A
002C 80DD              SJMP    ?C0028
002E         ?C0029:
                                           ; SOURCE LINE # 333
002E 7800        R     MOV     R0,#LOW i
0030 E2                MOVX    A,@R0
0031 FF                MOV     R7,A
0032 2400        E     ADD     A,#LOW DVR_buf+02H
0034 F8                MOV     R0,A
0035 E6                MOV     A,@R0
0036 B40217            CJNE    A,#02H,?C0033
                                           ; SOURCE LINE # 334
                                           ; SOURCE LINE # 335
0039 7400        E     MOV     A,#LOW DVR_buf+03H
003B 2F                ADD     A,R7
003C F8                MOV     R0,A
003D E6                MOV     A,@R0
003E FF                MOV     R7,A
003F 7800        R     MOV     R0,#LOW SerialNumber
0041 E2                MOVX    A,@R0
0042 FE                MOV     R6,A
0043 EF                MOV     A,R7
0044 B50603            CJNE    A,AR6,?C0035
0047 D3                SETB    C
0048 8001              SJMP    ?C0036
004A         ?C0035:
004A C3                CLR     C
004B         ?C0036:
004B 4003              JC      ?C0033
                                           ; SOURCE LINE # 336
004D 7F00              MOV     R7,#00H
004F 22                RET     
                                           ; SOURCE LINE # 337
0050         ?C0033:
                                           ; SOURCE LINE # 342
0050 7800        R     MOV     R0,#LOW i
0052 E2                MOVX    A,@R0
0053 2400        E     ADD     A,#LOW DVR_buf
0055 F8                MOV     R0,A
0056 E6                MOV     A,@R0
0057 FF                MOV     R7,A
;---- Variable 'CheckSum' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 344
0058 7800        R     MOV     R0,#LOW j
005A 7401              MOV     A,#01H
005C F2                MOVX    @R0,A
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 89  

005D         ?C0038:
005D 7800        R     MOV     R0,#LOW i
005F E2                MOVX    A,@R0
0060 F9                MOV     R1,A
0061 2400        E     ADD     A,#LOW DVR_buf+05H
0063 F8                MOV     R0,A
0064 E6                MOV     A,@R0
0065 2406              ADD     A,#06H
0067 FD                MOV     R5,A
0068 E4                CLR     A
0069 33                RLC     A
006A FC                MOV     R4,A
006B 7800        R     MOV     R0,#LOW j
006D E2                MOVX    A,@R0
006E FE                MOV     R6,A
006F C3                CLR     C
0070 9D                SUBB    A,R5
0071 EC                MOV     A,R4
0072 120000      R     LCALL   L?0216
0075 500F              JNC     ?C0039
                                           ; SOURCE LINE # 345
0077 E9                MOV     A,R1
0078 2E                ADD     A,R6
0079 2400        E     ADD     A,#LOW DVR_buf
007B F8                MOV     R0,A
007C E6                MOV     A,@R0
007D 6F                XRL     A,R7
007E FF                MOV     R7,A
007F 7800        R     MOV     R0,#LOW j
0081 E2                MOVX    A,@R0
0082 04                INC     A
0083 F2                MOVX    @R0,A
0084 80D7              SJMP    ?C0038
0086         ?C0039:
                                           ; SOURCE LINE # 347
0086 7800        R     MOV     R0,#LOW i
0088 E2                MOVX    A,@R0
0089 FE                MOV     R6,A
008A 2400        E     ADD     A,#LOW DVR_buf+05H
008C F8                MOV     R0,A
008D E6                MOV     A,@R0
008E FD                MOV     R5,A
008F EE                MOV     A,R6
0090 2D                ADD     A,R5
0091 2400        E     ADD     A,#LOW DVR_buf+06H
0093 F8                MOV     R0,A
0094 E6                MOV     A,@R0
0095 B50703            CJNE    A,AR7,?C0042
0098 D3                SETB    C
0099 8001              SJMP    ?C0043
009B         ?C0042:
009B C3                CLR     C
009C         ?C0043:
009C 4003              JC      ?C0041
                                           ; SOURCE LINE # 348
009E 7F00              MOV     R7,#00H
00A0 22                RET     
00A1         ?C0041:
                                           ; SOURCE LINE # 350
00A1 7800        R     MOV     R0,#LOW i
00A3 E2                MOVX    A,@R0
00A4 FF                MOV     R7,A
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 90  

00A5 2400        E     ADD     A,#LOW DVR_buf+04H
00A7 F8                MOV     R0,A
00A8 E6                MOV     A,@R0
00A9 120000      E     LCALL   ?C?CCASE
00AC 0000        R     DW      ?C0048
00AE 04                DB      04H
00AF 0000        R     DW      ?C0049
00B1 05                DB      05H
00B2 0000        R     DW      ?C0050
00B4 06                DB      06H
00B5 0000        R     DW      ?C0084
00B7 09                DB      09H
00B8 0000        R     DW      ?C0051
00BA 14                DB      014H
00BB 0000        R     DW      ?C0063
00BD 15                DB      015H
00BE 0000        R     DW      ?C0055
00C0 16                DB      016H
00C1 0000        R     DW      ?C0059
00C3 17                DB      017H
00C4 0000        R     DW      ?C0076
00C6 18                DB      018H
00C7 0000        R     DW      ?C0070
00C9 C9                DB      0C9H
00CA 0000        R     DW      ?C0080
00CC CB                DB      0CBH
00CD 0000              DW      00H
00CF 0000        R     DW      ?C0044
                                           ; SOURCE LINE # 351
                                           ; SOURCE LINE # 352
                                           ; SOURCE LINE # 353
                                           ; SOURCE LINE # 355
                                           ; SOURCE LINE # 356
                                           ; SOURCE LINE # 358
                                           ; SOURCE LINE # 359
                                           ; SOURCE LINE # 362
00D1         ?C0048:
                                           ; SOURCE LINE # 363
00D1 7800        R     MOV     R0,#LOW i
00D3 E2                MOVX    A,@R0
00D4 FE                MOV     R6,A
                                           ; SOURCE LINE # 364
00D5 120000      R     LCALL   L?0225
00D8 2E                ADD     A,R6
00D9 F8                MOV     R0,A
00DA E6                MOV     A,@R0
00DB 7800        R     MOV     R0,#LOW DVR_FPS
00DD F2                MOVX    @R0,A
                                           ; SOURCE LINE # 365
00DE 7800        R     MOV     R0,#LOW i
00E0 E2                MOVX    A,@R0
00E1 FE                MOV     R6,A
                                           ; SOURCE LINE # 366
00E2 120000      R     LCALL   L?0226
00E5 2E                ADD     A,R6
00E6 F8                MOV     R0,A
00E7 E6                MOV     A,@R0
00E8 7800        R     MOV     R0,#LOW DVR_RecordMode
00EA F2                MOVX    @R0,A
                                           ; SOURCE LINE # 367
00EB 7800        R     MOV     R0,#LOW i
00ED E2                MOVX    A,@R0
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 91  

00EE FE                MOV     R6,A
                                           ; SOURCE LINE # 368
00EF 120000      R     LCALL   L?0227
00F2 2E                ADD     A,R6
00F3 F8                MOV     R0,A
00F4 E6                MOV     A,@R0
00F5 7800        R     MOV     R0,#LOW DVR_PreAlarmLength
00F7 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 369
00F8 7800        R     MOV     R0,#LOW i
00FA E2                MOVX    A,@R0
00FB FE                MOV     R6,A
                                           ; SOURCE LINE # 370
00FC 120000      R     LCALL   L?0228
00FF 2E                ADD     A,R6
0100 F8                MOV     R0,A
0101 E6                MOV     A,@R0
0102 7800        R     MOV     R0,#LOW DVR_OverWrite
0104 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 371
0105 020000      R     LJMP    ?C0044
                                           ; SOURCE LINE # 374
0108         ?C0049:
                                           ; SOURCE LINE # 375
                                           ; SOURCE LINE # 376
                                           ; SOURCE LINE # 377
                                           ; SOURCE LINE # 378
                                           ; SOURCE LINE # 379
                                           ; SOURCE LINE # 380
                                           ; SOURCE LINE # 381
                                           ; SOURCE LINE # 382
0108 120000      R     LCALL   L?0202
010B 2E                ADD     A,R6
010C F8                MOV     R0,A
010D E6                MOV     A,@R0
010E 7800        R     MOV     R0,#LOW DVR_RecordStatus
                                           ; SOURCE LINE # 383
0110 120000      R     LCALL   L?0229
0113 7800        R     MOV     R0,#LOW DVR_SDCardAvailable
0115 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 384
0116 7400        E     MOV     A,#LOW DVR_buf+0FH
0118 2E                ADD     A,R6
0119 F8                MOV     R0,A
011A E6                MOV     A,@R0
011B 7800        R     MOV     R0,#LOW DVR_Busy
011D F2                MOVX    @R0,A
                                           ; SOURCE LINE # 385
011E 020000      R     LJMP    ?C0044
                                           ; SOURCE LINE # 387
0121         ?C0050:
                                           ; SOURCE LINE # 388
                                           ; SOURCE LINE # 389
                                           ; SOURCE LINE # 390
                                           ; SOURCE LINE # 391
                                           ; SOURCE LINE # 392
                                           ; SOURCE LINE # 393
                                           ; SOURCE LINE # 394
                                           ; SOURCE LINE # 395
0121 120000      R     LCALL   L?0202
0124 2E                ADD     A,R6
0125 F8                MOV     R0,A
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 92  

0126 E6                MOV     A,@R0
0127 7800        R     MOV     R0,#LOW DVR_TimeZone
                                           ; SOURCE LINE # 396
0129 120000      R     LCALL   L?0229
012C 7800        R     MOV     R0,#LOW DVR_daylightsaving
012E F2                MOVX    @R0,A
                                           ; SOURCE LINE # 397
012F 7400        E     MOV     A,#LOW DVR_buf+0FH
0131 2E                ADD     A,R6
0132 F8                MOV     R0,A
0133 E6                MOV     A,@R0
0134 7800        R     MOV     R0,#LOW DVR_timebeginesmonth
0136 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 398
0137 7800        R     MOV     R0,#LOW i
0139 E2                MOVX    A,@R0
013A FE                MOV     R6,A
                                           ; SOURCE LINE # 399
013B 120000      R     LCALL   L?0230
013E 2E                ADD     A,R6
013F F8                MOV     R0,A
0140 E6                MOV     A,@R0
0141 7800        R     MOV     R0,#LOW DVR_timebeginesTime
0143 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 400
0144 7800        R     MOV     R0,#LOW i
0146 E2                MOVX    A,@R0
0147 FE                MOV     R6,A
                                           ; SOURCE LINE # 401
0148 120000      R     LCALL   L?0231
014B 2E                ADD     A,R6
014C F8                MOV     R0,A
014D E6                MOV     A,@R0
014E 7800        R     MOV     R0,#LOW DVR_standardtimebeginesWeek
0150 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 402
0151 7400        E     MOV     A,#LOW DVR_buf+014H
0153 2F                ADD     A,R7
0154 F8                MOV     R0,A
0155 E6                MOV     A,@R0
0156 7800        R     MOV     R0,#LOW DVR_standardtimebeginesTime
0158 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 403
0159 020000      R     LJMP    ?C0044
                                           ; SOURCE LINE # 405
015C         ?C0051:
                                           ; SOURCE LINE # 406
                                           ; SOURCE LINE # 407
                                           ; SOURCE LINE # 408
                                           ; SOURCE LINE # 409
                                           ; SOURCE LINE # 410
                                           ; SOURCE LINE # 411
                                           ; SOURCE LINE # 412
015C 120000      R     LCALL   L?0204
                                           ; SOURCE LINE # 413
015F 120000      R     LCALL   L?0203
0162 2F                ADD     A,R7
0163 F8                MOV     R0,A
0164 E6                MOV     A,@R0
0165 7800        R     MOV     R0,#LOW DVR_RecordStatus
                                           ; SOURCE LINE # 414
0167 120000      R     LCALL   L?0232
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 93  

016A 7800        R     MOV     R0,#LOW DVR_SDCardAvailable
016C F2                MOVX    @R0,A
                                           ; SOURCE LINE # 415
016D 7400        E     MOV     A,#LOW DVR_buf+0FH
016F 2F                ADD     A,R7
0170 F8                MOV     R0,A
0171 E6                MOV     A,@R0
0172 7800        R     MOV     R0,#LOW DVR_Busy
0174 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 417
0175 E4                CLR     A
0176 7800        R     MOV     R0,#LOW j
0178 F2                MOVX    @R0,A
0179         ?C0052:
0179 120000      R     LCALL   L?0208
017C 5005              JNC     ?C0053
                                           ; SOURCE LINE # 418
017E 120000      R     LCALL   L?0205
0181 80F6              SJMP    ?C0052
0183         ?C0053:
                                           ; SOURCE LINE # 420
                                           ; SOURCE LINE # 421
                                           ; SOURCE LINE # 422
                                           ; SOURCE LINE # 423
                                           ; SOURCE LINE # 424
0183 120000      R     LCALL   L?0200
0186 7414              MOV     A,#014H
                                           ; SOURCE LINE # 425
                                           ; SOURCE LINE # 426
                                           ; SOURCE LINE # 427
0188 020000      R     LJMP    ?C0176
                                           ; SOURCE LINE # 429
018B         ?C0055:
                                           ; SOURCE LINE # 430
018B 7800        R     MOV     R0,#LOW i
018D E2                MOVX    A,@R0
018E FF                MOV     R7,A
                                           ; SOURCE LINE # 431
018F 120000      R     LCALL   L?0225
0192 2F                ADD     A,R7
0193 F8                MOV     R0,A
0194 E6                MOV     A,@R0
0195 7800        R     MOV     R0,#LOW DVR_FPS
0197 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 432
0198 7800        R     MOV     R0,#LOW i
019A E2                MOVX    A,@R0
019B FF                MOV     R7,A
                                           ; SOURCE LINE # 433
019C 120000      R     LCALL   L?0226
019F 2F                ADD     A,R7
01A0 F8                MOV     R0,A
01A1 E6                MOV     A,@R0
01A2 7800        R     MOV     R0,#LOW DVR_RecordMode
01A4 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 434
01A5 7800        R     MOV     R0,#LOW i
01A7 E2                MOVX    A,@R0
01A8 FF                MOV     R7,A
                                           ; SOURCE LINE # 435
01A9 120000      R     LCALL   L?0227
01AC 2F                ADD     A,R7
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 94  

01AD F8                MOV     R0,A
01AE E6                MOV     A,@R0
01AF 7800        R     MOV     R0,#LOW DVR_PreAlarmLength
01B1 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 436
01B2 7800        R     MOV     R0,#LOW i
01B4 E2                MOVX    A,@R0
01B5 FF                MOV     R7,A
                                           ; SOURCE LINE # 437
01B6 120000      R     LCALL   L?0228
01B9 2F                ADD     A,R7
01BA F8                MOV     R0,A
01BB E6                MOV     A,@R0
01BC 7800        R     MOV     R0,#LOW DVR_OverWrite
01BE F2                MOVX    @R0,A
                                           ; SOURCE LINE # 440
01BF E4                CLR     A
01C0 7800        R     MOV     R0,#LOW j
01C2 F2                MOVX    @R0,A
01C3         ?C0056:
01C3 120000      R     LCALL   L?0208
01C6 5005              JNC     ?C0057
                                           ; SOURCE LINE # 441
01C8 120000      R     LCALL   L?0205
01CB 80F6              SJMP    ?C0056
01CD         ?C0057:
                                           ; SOURCE LINE # 443
                                           ; SOURCE LINE # 444
                                           ; SOURCE LINE # 445
                                           ; SOURCE LINE # 446
                                           ; SOURCE LINE # 447
01CD 120000      R     LCALL   L?0200
01D0 7416              MOV     A,#016H
01D2         ?C0175:
                                           ; SOURCE LINE # 448
                                           ; SOURCE LINE # 449
                                           ; SOURCE LINE # 452
01D2 020000      R     LJMP    ?C0176
                                           ; SOURCE LINE # 454
01D5         ?C0059:
                                           ; SOURCE LINE # 456
                                           ; SOURCE LINE # 457
                                           ; SOURCE LINE # 458
                                           ; SOURCE LINE # 459
                                           ; SOURCE LINE # 460
                                           ; SOURCE LINE # 461
                                           ; SOURCE LINE # 462
01D5 120000      R     LCALL   L?0204
                                           ; SOURCE LINE # 463
01D8 120000      R     LCALL   L?0203
01DB 2F                ADD     A,R7
01DC F8                MOV     R0,A
01DD E6                MOV     A,@R0
01DE 7800        R     MOV     R0,#LOW DVR_TimeZone
                                           ; SOURCE LINE # 464
01E0 120000      R     LCALL   L?0232
01E3 7800        R     MOV     R0,#LOW DVR_daylightsaving
01E5 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 465
01E6 7400        E     MOV     A,#LOW DVR_buf+0FH
01E8 2F                ADD     A,R7
01E9 F8                MOV     R0,A
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 95  

01EA E6                MOV     A,@R0
01EB 7800        R     MOV     R0,#LOW DVR_timebeginesmonth
01ED F2                MOVX    @R0,A
                                           ; SOURCE LINE # 466
01EE 7800        R     MOV     R0,#LOW i
01F0 E2                MOVX    A,@R0
01F1 FF                MOV     R7,A
                                           ; SOURCE LINE # 467
01F2 120000      R     LCALL   L?0230
01F5 2F                ADD     A,R7
01F6 F8                MOV     R0,A
01F7 E6                MOV     A,@R0
01F8 7800        R     MOV     R0,#LOW DVR_timebeginesTime
01FA F2                MOVX    @R0,A
                                           ; SOURCE LINE # 468
01FB 7800        R     MOV     R0,#LOW i
01FD E2                MOVX    A,@R0
01FE FF                MOV     R7,A
                                           ; SOURCE LINE # 469
01FF 120000      R     LCALL   L?0231
0202 2F                ADD     A,R7
0203 F8                MOV     R0,A
0204 E6                MOV     A,@R0
0205 7800        R     MOV     R0,#LOW DVR_standardtimebeginesWeek
0207 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 470
0208 7800        R     MOV     R0,#LOW i
020A E2                MOVX    A,@R0
020B 2400        E     ADD     A,#LOW DVR_buf+014H
020D F8                MOV     R0,A
020E E6                MOV     A,@R0
020F 7800        R     MOV     R0,#LOW DVR_standardtimebeginesTime
0211 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 472
0212 E4                CLR     A
0213 7800        R     MOV     R0,#LOW j
0215 F2                MOVX    @R0,A
0216         ?C0060:
0216 120000      R     LCALL   L?0209
0219 5005              JNC     ?C0061
                                           ; SOURCE LINE # 473
021B 120000      R     LCALL   L?0206
021E 80F6              SJMP    ?C0060
0220         ?C0061:
                                           ; SOURCE LINE # 475
                                           ; SOURCE LINE # 476
                                           ; SOURCE LINE # 477
                                           ; SOURCE LINE # 478
                                           ; SOURCE LINE # 479
0220 120000      R     LCALL   L?0201
0223 7417              MOV     A,#017H
0225         ?C0176:
                                           ; SOURCE LINE # 480
                                           ; SOURCE LINE # 481
0225 120000      R     LCALL   L?0210
                                           ; SOURCE LINE # 483
0228 801F              SJMP    ?C0177
                                           ; SOURCE LINE # 485
022A         ?C0063:
                                           ; SOURCE LINE # 486
022A E4                CLR     A
022B 7800        R     MOV     R0,#LOW j
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 96  

022D F2                MOVX    @R0,A
022E         ?C0064:
022E 120000      R     LCALL   L?0209
0231 5005              JNC     ?C0065
                                           ; SOURCE LINE # 487
0233 120000      R     LCALL   L?0206
0236 80F6              SJMP    ?C0064
0238         ?C0065:
                                           ; SOURCE LINE # 489
                                           ; SOURCE LINE # 490
                                           ; SOURCE LINE # 491
                                           ; SOURCE LINE # 492
                                           ; SOURCE LINE # 493
0238 120000      R     LCALL   L?0201
023B 7415              MOV     A,#015H
023D F2                MOVX    @R0,A
                                           ; SOURCE LINE # 494
023E 08                INC     R0
023F 7401              MOV     A,#01H
0241 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 495
0242 08                INC     R0
0243 7404              MOV     A,#04H
                                           ; SOURCE LINE # 496
0245 120000      R     LCALL   L?0212
0248 18                DEC     R0
0249         ?C0177:
0249 E2                MOVX    A,@R0
024A FD                MOV     R5,A
024B 120000      R     LCALL   _Hs_Send_DVR_Command
                                           ; SOURCE LINE # 499
024E 020000      R     LJMP    ?C0044
                                           ; SOURCE LINE # 501
                                           ; SOURCE LINE # 502
                                           ; SOURCE LINE # 504
                                           ; SOURCE LINE # 505
                                           ; SOURCE LINE # 507
                                           ; SOURCE LINE # 508
                                           ; SOURCE LINE # 510
0251         ?C0070:
                                           ; SOURCE LINE # 511
0251 E4                CLR     A
0252 7800        R     MOV     R0,#LOW j
0254 F2                MOVX    @R0,A
0255         ?C0071:
0255 120000      R     LCALL   L?0209
0258 5005              JNC     ?C0072
                                           ; SOURCE LINE # 512
025A 120000      R     LCALL   L?0206
025D 80F6              SJMP    ?C0071
025F         ?C0072:
                                           ; SOURCE LINE # 514
025F 309605            JNB     P1_6,?C0074
                                           ; SOURCE LINE # 515
                                           ; SOURCE LINE # 522
0262 D2B6              SETB    P3_6
                                           ; SOURCE LINE # 524
0264 020000      R     LJMP    ?C0044
0267         ?C0074:
                                           ; SOURCE LINE # 526
                                           ; SOURCE LINE # 527
                                           ; SOURCE LINE # 528
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 97  

                                           ; SOURCE LINE # 529
                                           ; SOURCE LINE # 530
                                           ; SOURCE LINE # 531
0267 120000      R     LCALL   L?0201
026A 74C9              MOV     A,#0C9H
026C F2                MOVX    @R0,A
                                           ; SOURCE LINE # 532
026D 08                INC     R0
026E 7401              MOV     A,#01H
                                           ; SOURCE LINE # 533
                                           ; SOURCE LINE # 534
0270 120000      R     LCALL   L?0210
0273 18                DEC     R0
0274 E2                MOVX    A,@R0
0275 FD                MOV     R5,A
0276 120000      R     LCALL   _Hs_Send_DVR_Command
                                           ; SOURCE LINE # 535
0279 C200        E     CLR     PowerDownStart
                                           ; SOURCE LINE # 536
027B E4                CLR     A
027C 7800        E     MOV     R0,#LOW PowerDownWait
027E F2                MOVX    @R0,A
                                           ; SOURCE LINE # 537
027F D200        E     SETB    AccPowerDown
                                           ; SOURCE LINE # 538
                                           ; SOURCE LINE # 540
0281 020000      R     LJMP    ?C0044
                                           ; SOURCE LINE # 544
0284         ?C0076:
                                           ; SOURCE LINE # 546
0284 E4                CLR     A
0285 7800        R     MOV     R0,#LOW j
0287 F2                MOVX    @R0,A
0288         ?C0077:
0288 120000      R     LCALL   L?0209
028B 5005              JNC     ?C0078
                                           ; SOURCE LINE # 547
028D 120000      R     LCALL   L?0206
0290 80F6              SJMP    ?C0077
0292         ?C0078:
                                           ; SOURCE LINE # 549
                                           ; SOURCE LINE # 550
                                           ; SOURCE LINE # 551
                                           ; SOURCE LINE # 552
                                           ; SOURCE LINE # 553
0292 120000      R     LCALL   L?0201
0295 7418              MOV     A,#018H
                                           ; SOURCE LINE # 554
                                           ; SOURCE LINE # 555
                                           ; SOURCE LINE # 556
                                           ; SOURCE LINE # 559
0297 8013              SJMP    ?C0178
                                           ; SOURCE LINE # 561
0299         ?C0080:
                                           ; SOURCE LINE # 566
0299 E4                CLR     A
029A 7800        R     MOV     R0,#LOW j
029C F2                MOVX    @R0,A
029D         ?C0081:
029D 120000      R     LCALL   L?0209
02A0 5005              JNC     ?C0082
                                           ; SOURCE LINE # 567
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 98  

02A2 120000      R     LCALL   L?0206
02A5 80F6              SJMP    ?C0081
02A7         ?C0082:
                                           ; SOURCE LINE # 569
                                           ; SOURCE LINE # 570
                                           ; SOURCE LINE # 571
                                           ; SOURCE LINE # 572
                                           ; SOURCE LINE # 573
02A7 120000      R     LCALL   L?0201
02AA 74CB              MOV     A,#0CBH
02AC         ?C0178:
                                           ; SOURCE LINE # 574
                                           ; SOURCE LINE # 575
02AC 120000      R     LCALL   L?0211
02AF E2                MOVX    A,@R0
02B0 FD                MOV     R5,A
02B1 120000      R     LCALL   _Hs_Send_DVR_Command
                                           ; SOURCE LINE # 576
02B4 7800        R     MOV     R0,#LOW FormatStatus
02B6 7401              MOV     A,#01H
02B8 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 580
02B9 8030              SJMP    ?C0044
                                           ; SOURCE LINE # 583
02BB         ?C0084:
                                           ; SOURCE LINE # 585
02BB 7800        R     MOV     R0,#LOW i
02BD E2                MOVX    A,@R0
02BE 2400        E     ADD     A,#LOW DVR_buf+05H
02C0 F8                MOV     R0,A
02C1 E6                MOV     A,@R0
02C2 7800        R     MOV     R0,#LOW DVRVersionLen
02C4 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 586
02C5 E4                CLR     A
02C6 7800        R     MOV     R0,#LOW j
02C8 F2                MOVX    @R0,A
02C9         ?C0085:
02C9 7800        R     MOV     R0,#LOW DVRVersionLen
02CB E2                MOVX    A,@R0
02CC FF                MOV     R7,A
02CD 7800        R     MOV     R0,#LOW j
02CF E2                MOVX    A,@R0
02D0 D3                SETB    C
02D1 9F                SUBB    A,R7
02D2 5014              JNC     ?C0086
                                           ; SOURCE LINE # 587
                                           ; SOURCE LINE # 588
02D4 E2                MOVX    A,@R0
02D5 FF                MOV     R7,A
02D6 18                DEC     R0
02D7 E2                MOVX    A,@R0
02D8 2F                ADD     A,R7
02D9 2400        E     ADD     A,#LOW DVR_buf+06H
02DB F8                MOV     R0,A
02DC E6                MOV     A,@R0
02DD FE                MOV     R6,A
02DE 7400        R     MOV     A,#LOW DVRVersion
02E0 2F                ADD     A,R7
02E1 F8                MOV     R0,A
02E2 EE                MOV     A,R6
                                           ; SOURCE LINE # 589
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 99  

02E3 120000      R     LCALL   L?0207
02E6 80E1              SJMP    ?C0085
02E8         ?C0086:
                                           ; SOURCE LINE # 591
02E8 120000      E     LCALL   DisplayFWVersion
                                           ; SOURCE LINE # 592
                                           ; SOURCE LINE # 594
02EB         ?C0044:
                                           ; SOURCE LINE # 598
02EB E4                CLR     A
02EC 7800        R     MOV     R0,#LOW j
02EE F2                MOVX    @R0,A
02EF         ?C0088:
02EF 7800        R     MOV     R0,#LOW j
02F1 E2                MOVX    A,@R0
02F2 FF                MOV     R7,A
02F3 C3                CLR     C
02F4 941D              SUBB    A,#01DH
02F6 500D              JNC     ?C0089
                                           ; SOURCE LINE # 599
02F8 7400        E     MOV     A,#LOW DVR_buf
02FA 2F                ADD     A,R7
02FB F8                MOV     R0,A
02FC E4                CLR     A
02FD F6                MOV     @R0,A
02FE 7800        R     MOV     R0,#LOW j
0300 E2                MOVX    A,@R0
0301 04                INC     A
0302 F2                MOVX    @R0,A
0303 80EA              SJMP    ?C0088
0305         ?C0089:
                                           ; SOURCE LINE # 602
0305 7800        R     MOV     R0,#LOW SerialNumber
0307 E2                MOVX    A,@R0
0308 04                INC     A
0309 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 604
030A E4                CLR     A
030B F500        E     MOV     RS2_in,A
                                           ; SOURCE LINE # 606
030D 200004      R     JB      DVR_Ready,?C0091
                                           ; SOURCE LINE # 607
                                           ; SOURCE LINE # 608
0310 D200        R     SETB    DVR_Ready
                                           ; SOURCE LINE # 609
0312 D200        R     SETB    GetDVRStatusflag
                                           ; SOURCE LINE # 610
0314         ?C0091:
                                           ; SOURCE LINE # 611
0314 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 613
0316         ?C0037:
0316 22                RET     
             ; FUNCTION DvrReceivePaser (END)

             ; FUNCTION _CAM_TxCommand_toRS485 (BEGIN)
                                           ; SOURCE LINE # 626
0000 7800        R     MOV     R0,#LOW Com_ID
0002 EF                MOV     A,R7
0003 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 627
                                           ; SOURCE LINE # 633
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 100 

0004 7800        E     MOV     R0,#LOW PelcoChoiceFLAG
0006 E2                MOVX    A,@R0
0007 14                DEC     A
0008 7003              JNZ     $ + 5H
000A 020000      R     LJMP    ?C0117
000D 04                INC     A
000E 6003              JZ      $ + 5H
0010 020000      R     LJMP    ?C0141
                                           ; SOURCE LINE # 634
                                           ; SOURCE LINE # 635
0013         ?C0093:
                                           ; SOURCE LINE # 637
0013 E4                CLR     A
0014 7800        R     MOV     R0,#LOW j
0016 F2                MOVX    @R0,A
0017         ?C0094:
0017 7800        R     MOV     R0,#LOW j
0019 E2                MOVX    A,@R0
001A FF                MOV     R7,A
001B C3                CLR     C
001C 9408              SUBB    A,#08H
001E 5005              JNC     ?C0095
                                           ; SOURCE LINE # 638
0020 120000      R     LCALL   L?0221
0023 80F2              SJMP    ?C0094
0025         ?C0095:
                                           ; SOURCE LINE # 639
0025 7800        R     MOV     R0,#LOW gb_P_Com
0027 74A0              MOV     A,#0A0H
0029 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 641
002A 7800        E     MOV     R0,#LOW CAMNumber
002C E2                MOVX    A,@R0
002D 14                DEC     A
002E 7800        R     MOV     R0,#LOW gb_P_Com+01H
0030 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 642
0031 7800        R     MOV     R0,#LOW gb_P_Com+06H
0033 74AF              MOV     A,#0AFH
0035 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 644
0036 7800        R     MOV     R0,#LOW Com_ID
0038 E2                MOVX    A,@R0
0039 120000      E     LCALL   ?C?CCASE
003C 0000        R     DW      ?C0098
003E 00                DB      00H
003F 0000        R     DW      ?C0100
0041 01                DB      01H
0042 0000        R     DW      ?C0101
0044 02                DB      02H
0045 0000        R     DW      ?C0102
0047 03                DB      03H
0048 0000        R     DW      ?C0103
004A 04                DB      04H
004B 0000        R     DW      ?C0106
004D 05                DB      05H
004E 0000        R     DW      ?C0109
0050 06                DB      06H
0051 0000        R     DW      ?C0112
0053 07                DB      07H
0054 0000        R     DW      ?C0115
0056 08                DB      08H
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 101 

0057 0000        R     DW      ?C0116
0059 09                DB      09H
005A 0000        R     DW      ?C0099
005C 0A                DB      0AH
005D 0000              DW      00H
005F 0000        R     DW      ?C0141
                                           ; SOURCE LINE # 645
                                           ; SOURCE LINE # 658
0061         ?C0098:
                                           ; SOURCE LINE # 659
0061 E4                CLR     A
0062 7800        R     MOV     R0,#LOW gb_P_Com+02H
0064 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 660
0065 08                INC     R0
0066 7440              MOV     A,#040H
                                           ; SOURCE LINE # 661
                                           ; SOURCE LINE # 662
                                           ; SOURCE LINE # 663
                                           ; SOURCE LINE # 664
0068 800E              SJMP    ?C0179
                                           ; SOURCE LINE # 672
006A         ?C0099:
                                           ; SOURCE LINE # 673
006A E4                CLR     A
006B 7800        R     MOV     R0,#LOW gb_P_Com+02H
006D F2                MOVX    @R0,A
                                           ; SOURCE LINE # 674
                                           ; SOURCE LINE # 675
                                           ; SOURCE LINE # 676
                                           ; SOURCE LINE # 677
                                           ; SOURCE LINE # 678
006E 020000      R     LJMP    ?C0180
                                           ; SOURCE LINE # 680
0071         ?C0100:
                                           ; SOURCE LINE # 681
0071 E4                CLR     A
0072 7800        R     MOV     R0,#LOW gb_P_Com+02H
0074 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 682
0075 08                INC     R0
0076 7420              MOV     A,#020H
0078         ?C0179:
0078 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 683
0079 E4                CLR     A
                                           ; SOURCE LINE # 684
                                           ; SOURCE LINE # 685
                                           ; SOURCE LINE # 686
007A 020000      R     LJMP    ?C0181
                                           ; SOURCE LINE # 744
007D         ?C0101:
                                           ; SOURCE LINE # 745
007D E4                CLR     A
007E 7800        R     MOV     R0,#LOW gb_P_Com+02H
0080 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 746
0081 08                INC     R0
0082 7403              MOV     A,#03H
                                           ; SOURCE LINE # 747
                                           ; SOURCE LINE # 751
                                           ; SOURCE LINE # 752
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 102 

                                           ; SOURCE LINE # 753
0084 8007              SJMP    ?C0182
                                           ; SOURCE LINE # 754
0086         ?C0102:
                                           ; SOURCE LINE # 755
0086 E4                CLR     A
0087 7800        R     MOV     R0,#LOW gb_P_Com+02H
0089 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 756
008A 08                INC     R0
008B 7407              MOV     A,#07H
008D         ?C0182:
008D F2                MOVX    @R0,A
                                           ; SOURCE LINE # 757
008E E4                CLR     A
008F 08                INC     R0
0090 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 761
0091 7800        R     MOV     R0,#LOW PresetNumber
0093 E2                MOVX    A,@R0
                                           ; SOURCE LINE # 762
                                           ; SOURCE LINE # 763
0094 802C              SJMP    ?C0184
                                           ; SOURCE LINE # 764
0096         ?C0103:
                                           ; SOURCE LINE # 765
0096 E4                CLR     A
0097 7800        R     MOV     R0,#LOW gb_P_Com+02H
0099 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 766
009A 08                INC     R0
009B 7402              MOV     A,#02H
009D F2                MOVX    @R0,A
                                           ; SOURCE LINE # 767
009E 300006      R     JNB     SpeedDomeMode,?C0104
                                           ; SOURCE LINE # 768
00A1 08                INC     R0
00A2 74FF              MOV     A,#0FFH
00A4 F2                MOVX    @R0,A
00A5 8003              SJMP    ?C0105
00A7         ?C0104:
                                           ; SOURCE LINE # 770
00A7 120000      R     LCALL   L?0217
00AA         ?C0105:
                                           ; SOURCE LINE # 771
00AA E4                CLR     A
00AB         ?C0183:
                                           ; SOURCE LINE # 772
                                           ; SOURCE LINE # 773
00AB 8015              SJMP    ?C0184
                                           ; SOURCE LINE # 774
00AD         ?C0106:
                                           ; SOURCE LINE # 775
00AD E4                CLR     A
00AE 7800        R     MOV     R0,#LOW gb_P_Com+02H
00B0 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 776
00B1 08                INC     R0
00B2 7404              MOV     A,#04H
00B4 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 777
00B5 300006      R     JNB     SpeedDomeMode,?C0107
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 103 

                                           ; SOURCE LINE # 778
00B8 08                INC     R0
00B9 74FF              MOV     A,#0FFH
00BB F2                MOVX    @R0,A
00BC 8003              SJMP    ?C0108
00BE         ?C0107:
                                           ; SOURCE LINE # 780
00BE 120000      R     LCALL   L?0217
00C1         ?C0108:
                                           ; SOURCE LINE # 781
00C1 E4                CLR     A
00C2         ?C0184:
00C2 7800        R     MOV     R0,#LOW gb_P_Com+05H
                                           ; SOURCE LINE # 782
                                           ; SOURCE LINE # 783
00C4 8028              SJMP    ?C0185
                                           ; SOURCE LINE # 784
00C6         ?C0109:
                                           ; SOURCE LINE # 785
                                           ; SOURCE LINE # 786
                                           ; SOURCE LINE # 787
00C6 120000      R     LCALL   L?0222
                                           ; SOURCE LINE # 788
00C9 300006      R     JNB     SpeedDomeMode,?C0110
                                           ; SOURCE LINE # 789
00CC 08                INC     R0
00CD 74FF              MOV     A,#0FFH
00CF F2                MOVX    @R0,A
00D0 802B              SJMP    ?C0188
00D2         ?C0110:
                                           ; SOURCE LINE # 791
00D2 120000      R     LCALL   L?0219
00D5         ?C0111:
                                           ; SOURCE LINE # 792
                                           ; SOURCE LINE # 793
00D5 8026              SJMP    ?C0188
                                           ; SOURCE LINE # 794
00D7         ?C0112:
                                           ; SOURCE LINE # 795
                                           ; SOURCE LINE # 796
                                           ; SOURCE LINE # 797
00D7 120000      R     LCALL   L?0223
                                           ; SOURCE LINE # 798
00DA 300006      R     JNB     SpeedDomeMode,?C0113
                                           ; SOURCE LINE # 799
00DD 08                INC     R0
00DE 74FF              MOV     A,#0FFH
00E0 F2                MOVX    @R0,A
00E1 8003              SJMP    ?C0114
00E3         ?C0113:
                                           ; SOURCE LINE # 801
00E3 120000      R     LCALL   L?0219
00E6         ?C0114:
                                           ; SOURCE LINE # 802
00E6         ?C0186:
                                           ; SOURCE LINE # 803
00E6 8015              SJMP    ?C0188
                                           ; SOURCE LINE # 804
00E8         ?C0115:
                                           ; SOURCE LINE # 805
                                           ; SOURCE LINE # 806
                                           ; SOURCE LINE # 807
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 104 

00E8 120000      R     LCALL   L?0213
                                           ; SOURCE LINE # 808
00EB 08                INC     R0
00EC 745F              MOV     A,#05FH
00EE         ?C0185:
00EE F2                MOVX    @R0,A
                                           ; SOURCE LINE # 809
00EF         ?C0187:
                                           ; SOURCE LINE # 810
00EF 800C              SJMP    ?C0188
                                           ; SOURCE LINE # 811
00F1         ?C0116:
                                           ; SOURCE LINE # 812
00F1 7800        R     MOV     R0,#LOW gb_P_Com+02H
00F3 7404              MOV     A,#04H
00F5 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 813
00F6 E4                CLR     A
00F7         ?C0180:
00F7 08                INC     R0
00F8 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 814
00F9         ?C0181:
00F9 08                INC     R0
00FA F2                MOVX    @R0,A
                                           ; SOURCE LINE # 815
00FB 08                INC     R0
00FC F2                MOVX    @R0,A
                                           ; SOURCE LINE # 816
00FD         ?C0188:
00FD 020000      R     LJMP    Send_PelcoP_Command
                                           ; SOURCE LINE # 817
                                           ; SOURCE LINE # 848
                                           ; SOURCE LINE # 849
                                           ; SOURCE LINE # 850
0100         ?C0117:
                                           ; SOURCE LINE # 852
0100 E4                CLR     A
0101 7800        R     MOV     R0,#LOW j
0103 F2                MOVX    @R0,A
0104         ?C0118:
0104 7800        R     MOV     R0,#LOW j
0106 E2                MOVX    A,@R0
0107 FF                MOV     R7,A
0108 C3                CLR     C
0109 9407              SUBB    A,#07H
010B 5005              JNC     ?C0119
                                           ; SOURCE LINE # 853
010D 120000      R     LCALL   L?0221
0110 80F2              SJMP    ?C0118
0112         ?C0119:
                                           ; SOURCE LINE # 854
0112 7800        R     MOV     R0,#LOW gb_P_Com
0114 74FF              MOV     A,#0FFH
0116 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 856
0117 7800        E     MOV     R0,#LOW CAMNumber
0119 E2                MOVX    A,@R0
011A 7800        R     MOV     R0,#LOW gb_P_Com+01H
011C F2                MOVX    @R0,A
                                           ; SOURCE LINE # 858
011D 7800        R     MOV     R0,#LOW Com_ID
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 105 

011F E2                MOVX    A,@R0
0120 120000      E     LCALL   ?C?CCASE
0123 0000        R     DW      ?C0122
0125 00                DB      00H
0126 0000        R     DW      ?C0124
0128 01                DB      01H
0129 0000        R     DW      ?C0137
012B 02                DB      02H
012C 0000        R     DW      ?C0138
012E 03                DB      03H
012F 0000        R     DW      ?C0125
0131 04                DB      04H
0132 0000        R     DW      ?C0128
0134 05                DB      05H
0135 0000        R     DW      ?C0131
0137 06                DB      06H
0138 0000        R     DW      ?C0134
013A 07                DB      07H
013B 0000        R     DW      ?C0139
013D 08                DB      08H
013E 0000        R     DW      ?C0140
0140 09                DB      09H
0141 0000        R     DW      ?C0123
0143 0A                DB      0AH
0144 0000              DW      00H
0146 0000        R     DW      ?C0141
                                           ; SOURCE LINE # 859
                                           ; SOURCE LINE # 872
0148         ?C0122:
                                           ; SOURCE LINE # 873
0148 E4                CLR     A
0149 7800        R     MOV     R0,#LOW gb_P_Com+02H
014B F2                MOVX    @R0,A
                                           ; SOURCE LINE # 874
014C 08                INC     R0
014D 7440              MOV     A,#040H
                                           ; SOURCE LINE # 875
                                           ; SOURCE LINE # 876
                                           ; SOURCE LINE # 877
                                           ; SOURCE LINE # 878
014F 800E              SJMP    ?C0189
                                           ; SOURCE LINE # 886
0151         ?C0123:
                                           ; SOURCE LINE # 887
0151 E4                CLR     A
0152 7800        R     MOV     R0,#LOW gb_P_Com+02H
0154 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 888
                                           ; SOURCE LINE # 889
                                           ; SOURCE LINE # 890
                                           ; SOURCE LINE # 891
                                           ; SOURCE LINE # 892
0155 020000      R     LJMP    ?C0190
                                           ; SOURCE LINE # 894
0158         ?C0124:
                                           ; SOURCE LINE # 895
0158 E4                CLR     A
0159 7800        R     MOV     R0,#LOW gb_P_Com+02H
015B F2                MOVX    @R0,A
                                           ; SOURCE LINE # 896
015C 08                INC     R0
015D 7420              MOV     A,#020H
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 106 

015F         ?C0189:
015F F2                MOVX    @R0,A
                                           ; SOURCE LINE # 897
0160 E4                CLR     A
                                           ; SOURCE LINE # 898
                                           ; SOURCE LINE # 899
                                           ; SOURCE LINE # 900
0161 020000      R     LJMP    ?C0191
                                           ; SOURCE LINE # 952
0164         ?C0125:
                                           ; SOURCE LINE # 953
0164 E4                CLR     A
0165 7800        R     MOV     R0,#LOW gb_P_Com+02H
0167 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 954
0168 08                INC     R0
0169 7402              MOV     A,#02H
016B F2                MOVX    @R0,A
                                           ; SOURCE LINE # 955
016C 300006      R     JNB     SpeedDomeMode,?C0126
                                           ; SOURCE LINE # 956
016F 08                INC     R0
0170 74FF              MOV     A,#0FFH
0172 F2                MOVX    @R0,A
0173 8019              SJMP    ?C0192
0175         ?C0126:
                                           ; SOURCE LINE # 958
0175 120000      R     LCALL   L?0218
0178         ?C0127:
                                           ; SOURCE LINE # 959
                                           ; SOURCE LINE # 960
                                           ; SOURCE LINE # 961
0178 8014              SJMP    ?C0192
                                           ; SOURCE LINE # 962
017A         ?C0128:
                                           ; SOURCE LINE # 963
017A E4                CLR     A
017B 7800        R     MOV     R0,#LOW gb_P_Com+02H
017D F2                MOVX    @R0,A
                                           ; SOURCE LINE # 964
017E 08                INC     R0
017F 7404              MOV     A,#04H
0181 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 965
0182 300006      R     JNB     SpeedDomeMode,?C0129
                                           ; SOURCE LINE # 966
0185 08                INC     R0
0186 74FF              MOV     A,#0FFH
0188 F2                MOVX    @R0,A
0189 8003              SJMP    ?C0130
018B         ?C0129:
                                           ; SOURCE LINE # 968
018B 120000      R     LCALL   L?0218
018E         ?C0130:
                                           ; SOURCE LINE # 969
018E         ?C0192:
018E E4                CLR     A
                                           ; SOURCE LINE # 970
                                           ; SOURCE LINE # 971
018F 8028              SJMP    ?C0193
                                           ; SOURCE LINE # 972
0191         ?C0131:
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 107 

                                           ; SOURCE LINE # 973
                                           ; SOURCE LINE # 974
                                           ; SOURCE LINE # 975
0191 120000      R     LCALL   L?0222
                                           ; SOURCE LINE # 976
0194 300006      R     JNB     SpeedDomeMode,?C0132
                                           ; SOURCE LINE # 977
0197 08                INC     R0
0198 74FF              MOV     A,#0FFH
019A F2                MOVX    @R0,A
019B 8049              SJMP    ?C0198
019D         ?C0132:
                                           ; SOURCE LINE # 979
019D 120000      R     LCALL   L?0220
01A0         ?C0133:
                                           ; SOURCE LINE # 980
                                           ; SOURCE LINE # 981
01A0 8044              SJMP    ?C0198
                                           ; SOURCE LINE # 982
01A2         ?C0134:
                                           ; SOURCE LINE # 983
                                           ; SOURCE LINE # 984
                                           ; SOURCE LINE # 985
01A2 120000      R     LCALL   L?0223
                                           ; SOURCE LINE # 986
01A5 300006      R     JNB     SpeedDomeMode,?C0135
                                           ; SOURCE LINE # 987
01A8 08                INC     R0
01A9 74FF              MOV     A,#0FFH
01AB F2                MOVX    @R0,A
01AC 8003              SJMP    ?C0136
01AE         ?C0135:
                                           ; SOURCE LINE # 989
01AE 120000      R     LCALL   L?0220
01B1         ?C0136:
                                           ; SOURCE LINE # 990
01B1         ?C0194:
                                           ; SOURCE LINE # 991
01B1 8033              SJMP    ?C0198
                                           ; SOURCE LINE # 992
01B3         ?C0137:
                                           ; SOURCE LINE # 993
                                           ; SOURCE LINE # 994
                                           ; SOURCE LINE # 995
01B3 120000      R     LCALL   L?0213
                                           ; SOURCE LINE # 999
01B6 7800        R     MOV     R0,#LOW PresetNumber
01B8 E2                MOVX    A,@R0
01B9         ?C0193:
01B9 7800        R     MOV     R0,#LOW gb_P_Com+05H
01BB F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1000
01BC         ?C0195:
                                           ; SOURCE LINE # 1001
01BC 8028              SJMP    ?C0198
                                           ; SOURCE LINE # 1002
01BE         ?C0138:
                                           ; SOURCE LINE # 1003
01BE E4                CLR     A
01BF 7800        R     MOV     R0,#LOW gb_P_Com+02H
01C1 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1004
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 108 

01C2 08                INC     R0
01C3 7407              MOV     A,#07H
01C5 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1005
01C6 E4                CLR     A
01C7 08                INC     R0
01C8 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1009
01C9 7800        R     MOV     R0,#LOW PresetNumber
01CB E2                MOVX    A,@R0
01CC 7800        R     MOV     R0,#LOW gb_P_Com+05H
01CE F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1010
01CF         ?C0196:
                                           ; SOURCE LINE # 1011
01CF 8015              SJMP    ?C0198
                                           ; SOURCE LINE # 1012
01D1         ?C0139:
                                           ; SOURCE LINE # 1013
                                           ; SOURCE LINE # 1014
                                           ; SOURCE LINE # 1015
01D1 120000      R     LCALL   L?0214
                                           ; SOURCE LINE # 1016
01D4 08                INC     R0
01D5 745F              MOV     A,#05FH
01D7 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1017
01D8         ?C0197:
                                           ; SOURCE LINE # 1018
01D8 800C              SJMP    ?C0198
                                           ; SOURCE LINE # 1019
01DA         ?C0140:
                                           ; SOURCE LINE # 1020
01DA 7800        R     MOV     R0,#LOW gb_P_Com+02H
01DC 7402              MOV     A,#02H
01DE F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1021
01DF E4                CLR     A
01E0         ?C0190:
01E0 08                INC     R0
01E1 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1022
01E2         ?C0191:
01E2 08                INC     R0
01E3 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1023
01E4 08                INC     R0
01E5 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1024
01E6         ?C0198:
01E6 120000      R     LCALL   Send_PelcoD_Command
                                           ; SOURCE LINE # 1025
                                           ; SOURCE LINE # 1056
                                           ; SOURCE LINE # 1057
                                           ; SOURCE LINE # 1130
                                           ; SOURCE LINE # 1132
01E9         ?C0141:
01E9 22                RET     
             ; FUNCTION _CAM_TxCommand_toRS485 (END)

             ; FUNCTION Send_PelcoP_Command (BEGIN)
                                           ; SOURCE LINE # 1140
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 109 

                                           ; SOURCE LINE # 1141
                                           ; SOURCE LINE # 1145
0000 7800        R     MOV     R0,#LOW gb_P_Com
0002 E2                MOVX    A,@R0
0003 7800        R     MOV     R0,#LOW gb_P_Com+07H
0005 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1146
;---- Variable 'j' assigned to Register 'R7' ----
0006 7F01              MOV     R7,#01H
0008         ?C0142:
                                           ; SOURCE LINE # 1147
0008 7800        R     MOV     R0,#LOW gb_P_Com+07H
000A E2                MOVX    A,@R0
000B FE                MOV     R6,A
000C 7400        R     MOV     A,#LOW gb_P_Com
000E 2F                ADD     A,R7
000F F8                MOV     R0,A
0010 E2                MOVX    A,@R0
0011 FD                MOV     R5,A
0012 EE                MOV     A,R6
0013 6D                XRL     A,R5
0014 7800        R     MOV     R0,#LOW gb_P_Com+07H
0016 F2                MOVX    @R0,A
0017 0F                INC     R7
0018 EF                MOV     A,R7
0019 B407EC            CJNE    A,#07H,?C0142
001C         ?C0143:
                                           ; SOURCE LINE # 1153
001C 7800        E     MOV     R0,#LOW Baud_rate
001E E2                MOVX    A,@R0
001F 14                DEC     A
0020 600C              JZ      ?C0147
0022 14                DEC     A
0023 600E              JZ      ?C0148
0025 2402              ADD     A,#02H
0027 700D              JNZ     ?C0145
                                           ; SOURCE LINE # 1154
                                           ; SOURCE LINE # 1155
0029         ?C0146:
                                           ; SOURCE LINE # 1156
0029 75BAD0            MOV     S2BRT,#0D0H
                                           ; SOURCE LINE # 1157
002C 8008              SJMP    ?C0145
                                           ; SOURCE LINE # 1158
002E         ?C0147:
                                           ; SOURCE LINE # 1159
002E 75BAE8            MOV     S2BRT,#0E8H
                                           ; SOURCE LINE # 1160
0031 8003              SJMP    ?C0145
                                           ; SOURCE LINE # 1161
0033         ?C0148:
                                           ; SOURCE LINE # 1162
0033 75BAF4            MOV     S2BRT,#0F4H
                                           ; SOURCE LINE # 1163
                                           ; SOURCE LINE # 1164
0036         ?C0145:
                                           ; SOURCE LINE # 1166
0036 7BFF              MOV     R3,#0FFH
0038 7A00        R     MOV     R2,#HIGH ?SC_0
003A 7900        R     MOV     R1,#LOW ?SC_0
003C AF8D              MOV     R7,TH1
003E 7800        E     MOV     R0,#LOW ?_Printf?BYTE+03H
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 110 

0040 E4                CLR     A
0041 F2                MOVX    @R0,A
0042 08                INC     R0
0043 EF                MOV     A,R7
0044 F2                MOVX    @R0,A
0045 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 1167
0048 7F64              MOV     R7,#064H
004A 7E00              MOV     R6,#00H
004C 120000      E     LCALL   _Wait_ms
                                           ; SOURCE LINE # 1168
004F E4                CLR     A
0050 7800        R     MOV     R0,#LOW ii
0052 F2                MOVX    @R0,A
0053         ?C0149:
0053 7800        R     MOV     R0,#LOW ii
0055 E2                MOVX    A,@R0
0056 FF                MOV     R7,A
0057 C3                CLR     C
0058 9408              SUBB    A,#08H
005A 5010              JNC     ?C0150
                                           ; SOURCE LINE # 1169
                                           ; SOURCE LINE # 1170
005C 7400        R     MOV     A,#LOW gb_P_Com
005E 2F                ADD     A,R7
005F F8                MOV     R0,A
0060 E2                MOVX    A,@R0
0061 FF                MOV     R7,A
0062 120000      E     LCALL   _RS2_tx
                                           ; SOURCE LINE # 1171
0065 7800        R     MOV     R0,#LOW ii
0067 E2                MOVX    A,@R0
0068 04                INC     A
0069 F2                MOVX    @R0,A
006A 80E7              SJMP    ?C0149
006C         ?C0150:
                                           ; SOURCE LINE # 1172
006C 7F64              MOV     R7,#064H
006E 7E00              MOV     R6,#00H
0070 120000      E     LCALL   _Wait_ms
                                           ; SOURCE LINE # 1173
0073 75BAF4            MOV     S2BRT,#0F4H
                                           ; SOURCE LINE # 1178
0076 22                RET     
             ; FUNCTION Send_PelcoP_Command (END)

             ; FUNCTION Send_PelcoD_Command (BEGIN)
                                           ; SOURCE LINE # 1186
                                           ; SOURCE LINE # 1187
                                           ; SOURCE LINE # 1191
0000 7800        R     MOV     R0,#LOW gb_P_Com+01H
0002 E2                MOVX    A,@R0
0003 7800        R     MOV     R0,#LOW gb_P_Com+06H
0005 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1192
;---- Variable 'j' assigned to Register 'R7' ----
0006 7F02              MOV     R7,#02H
0008         ?C0153:
                                           ; SOURCE LINE # 1193
0008 7400        R     MOV     A,#LOW gb_P_Com
000A 2F                ADD     A,R7
000B F8                MOV     R0,A
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 111 

000C E2                MOVX    A,@R0
000D FE                MOV     R6,A
000E 7800        R     MOV     R0,#LOW gb_P_Com+06H
0010 E2                MOVX    A,@R0
0011 2E                ADD     A,R6
0012 F2                MOVX    @R0,A
0013 0F                INC     R7
0014 EF                MOV     A,R7
0015 B406F0            CJNE    A,#06H,?C0153
0018         ?C0154:
                                           ; SOURCE LINE # 1195
0018 7800        E     MOV     R0,#LOW Baud_rate
001A E2                MOVX    A,@R0
001B 14                DEC     A
001C 600C              JZ      ?C0158
001E 14                DEC     A
001F 600E              JZ      ?C0159
0021 2402              ADD     A,#02H
0023 700D              JNZ     ?C0156
                                           ; SOURCE LINE # 1196
                                           ; SOURCE LINE # 1197
0025         ?C0157:
                                           ; SOURCE LINE # 1198
0025 75BAD0            MOV     S2BRT,#0D0H
                                           ; SOURCE LINE # 1199
0028 8008              SJMP    ?C0156
                                           ; SOURCE LINE # 1200
002A         ?C0158:
                                           ; SOURCE LINE # 1201
002A 75BAE8            MOV     S2BRT,#0E8H
                                           ; SOURCE LINE # 1202
002D 8003              SJMP    ?C0156
                                           ; SOURCE LINE # 1203
002F         ?C0159:
                                           ; SOURCE LINE # 1204
002F 75BAF4            MOV     S2BRT,#0F4H
                                           ; SOURCE LINE # 1205
                                           ; SOURCE LINE # 1206
0032         ?C0156:
                                           ; SOURCE LINE # 1208
0032 7BFF              MOV     R3,#0FFH
0034 7A00        R     MOV     R2,#HIGH ?SC_25
0036 7900        R     MOV     R1,#LOW ?SC_25
0038 7800        R     MOV     R0,#LOW gb_P_Com
003A E2                MOVX    A,@R0
003B FF                MOV     R7,A
003C 7800        E     MOV     R0,#LOW ?_Printf?BYTE+03H
003E E4                CLR     A
003F F2                MOVX    @R0,A
0040 08                INC     R0
0041 EF                MOV     A,R7
0042 F2                MOVX    @R0,A
0043 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 1209
0046 7F64              MOV     R7,#064H
0048 7E00              MOV     R6,#00H
004A 120000      E     LCALL   _Wait_ms
                                           ; SOURCE LINE # 1212
004D E4                CLR     A
004E 7800        R     MOV     R0,#LOW ii
0050 F2                MOVX    @R0,A
0051         ?C0160:
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 112 

0051 7800        R     MOV     R0,#LOW ii
0053 E2                MOVX    A,@R0
0054 FF                MOV     R7,A
0055 C3                CLR     C
0056 9407              SUBB    A,#07H
0058 5010              JNC     ?C0161
                                           ; SOURCE LINE # 1213
                                           ; SOURCE LINE # 1214
005A 7400        R     MOV     A,#LOW gb_P_Com
005C 2F                ADD     A,R7
005D F8                MOV     R0,A
005E E2                MOVX    A,@R0
005F FF                MOV     R7,A
0060 120000      E     LCALL   _RS2_tx
                                           ; SOURCE LINE # 1215
0063 7800        R     MOV     R0,#LOW ii
0065 E2                MOVX    A,@R0
0066 04                INC     A
0067 F2                MOVX    @R0,A
0068 80E7              SJMP    ?C0160
006A         ?C0161:
                                           ; SOURCE LINE # 1217
006A 7F64              MOV     R7,#064H
006C 7E00              MOV     R6,#00H
006E 120000      E     LCALL   _Wait_ms
                                           ; SOURCE LINE # 1218
0071 75BAF4            MOV     S2BRT,#0F4H
                                           ; SOURCE LINE # 1221
0074 22                RET     
             ; FUNCTION Send_PelcoD_Command (END)

C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 113 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


PresetMode . . . . . . . . . . . . . .  PUBLIC   PDATA  U_CHAR   0000H  1
FormatStart. . . . . . . . . . . . . .  PUBLIC   DATA   BIT      0000H  1
SetDATETIME. . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
second . . . . . . . . . . . . . . . .  PUBLIC   PDATA  U_CHAR   0001H  1
DWORD. . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
SendDVRStatus. . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
SpeedDomeMode. . . . . . . . . . . . .  PUBLIC   DATA   BIT      0001H  1
P4 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E8H  1
GetDVRParam. . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
CAM_R. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Halt_OK. . . . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
SendDVRParamDT . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
CAM_BAR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ABR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
DVR_Resolution . . . . . . . . . . . .  PUBLIC   PDATA  U_CHAR   0002H  1
CAM_CAR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ACR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_CBR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_BCR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
DVR_buf. . . . . . . . . . . . . . . .  EXTERN   DATA   ARRAY    -----  30
DVR_timebeginesmonth . . . . . . . . .  PUBLIC   PDATA  U_CHAR   0003H  1
Baud_rate. . . . . . . . . . . . . . .  EXTERN   PDATA  U_CHAR   -----  1
NumberStringType . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  11
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  width. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  BackColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  Radix. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  NumColor . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  MaxLen . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  PrePostCharLen . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  PrePostChar. . . . . . . . . . . . .  MEMBER   -----  ARRAY    0008H  3
RS2_in . . . . . . . . . . . . . . . .  EXTERN   DATA   U_CHAR   -----  1
SetDVRParam. . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
DVR_timebeginesweek. . . . . . . . . .  PUBLIC   PDATA  U_CHAR   0004H  1
CAM_PTZ_RIGHT. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
minute . . . . . . . . . . . . . . . .  PUBLIC   PDATA  U_CHAR   0005H  1
FontData . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  27
  font . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  27
DVR_RecordLength . . . . . . . . . . .  PUBLIC   PDATA  U_CHAR   0006H  1
P1_6 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0096H  1
GetDVRStatus . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
P3_6 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B6H  1
_Hs_Send_DVR_Command . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  DVR_Com. . . . . . . . . . . . . . .  AUTO     PDATA  PTR      0000H  3
  len. . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0003H  1
  ii . . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0004H  1
  j. . . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0005H  1
CAM_SET. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
AVMode . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
SourceModeType . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
CAM_NUM. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_RS2_tx. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CMD_NUM. . . . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
month. . . . . . . . . . . . . . . . .  PUBLIC   PDATA  U_CHAR   0007H  1
_Hs_DvrTxCmdPaser. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  Cmd_Id . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 114 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  j. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
  DVR_Com. . . . . . . . . . . . . . .  AUTO     PDATA  ARRAY    0000H  30
MANUALRECSTART . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
CAM_RAB_H. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
OSDStrInfo . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  8
  cnt. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  addr . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  attr . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  str. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0004H  4
SetFormatSD. . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
AccPowerDown . . . . . . . . . . . . .  EXTERN   DATA   BIT      -----  1
GetDVRStatusflag . . . . . . . . . . .  PUBLIC   DATA   BIT      0002H  1
CAM_BA . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_AB . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
BYTE . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
DVR_daylightsaving . . . . . . . . . .  PUBLIC   PDATA  U_CHAR   0008H  1
TimeType . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  7
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  width. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  BackColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  Format . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  TimeColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  CursorColor. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
CAM_CA . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_AC . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
DVR_FPS. . . . . . . . . . . . . . . .  PUBLIC   PDATA  U_CHAR   0009H  1
CAM_PTZ_UP . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_BC . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_CB . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
DVR_RecordMode . . . . . . . . . . . .  PUBLIC   PDATA  U_CHAR   000AH  1
DVR_RecordStatus . . . . . . . . . . .  PUBLIC   PDATA  U_CHAR   000BH  1
SourceModeTypeEnum . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
DVR_Quality. . . . . . . . . . . . . .  PUBLIC   PDATA  U_CHAR   000CH  1
struct_IdName. . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  17
  Id . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  Name . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0001H  16
SetFormatSDDone. . . . . . . . . . . .  E_CONST  -----  INT      -----  2
EnumType . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  17
  Sz . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  ByLang . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  Str. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0002H  15
MenuType . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  4
  width. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  height . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  TitleColor . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  CursorColor. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
CAM_RAB_T. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
PowerDownStart . . . . . . . . . . . .  EXTERN   DATA   BIT      -----  1
WORD . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
CAM_PTZ_LEFT . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAMNumber. . . . . . . . . . . . . . .  EXTERN   PDATA  U_CHAR   -----  1
day. . . . . . . . . . . . . . . . . .  PUBLIC   PDATA  U_CHAR   000DH  1
hour . . . . . . . . . . . . . . . . .  PUBLIC   PDATA  U_CHAR   000EH  1
CAM_Iris_Open. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
PowerDownWait. . . . . . . . . . . . .  EXTERN   PDATA  U_CHAR   -----  1
CAM_ZOOM_OUT_START . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 115 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


DVR_Ready. . . . . . . . . . . . . . .  PUBLIC   DATA   BIT      0003H  1
CAM_AR . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_BR . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_RB . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_CR . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
DVR_standardtimebeginesWeek. . . . . .  PUBLIC   PDATA  U_CHAR   000FH  1
CAM_MENU_ENTER . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Register . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
DVR_standardtimebeginesTime. . . . . .  PUBLIC   PDATA  U_CHAR   0010H  1
Send_PelcoD_Command. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ii . . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0000H  1
  j. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
CAM_PTZ_DOWN . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
DVR_PostAlarmLength. . . . . . . . . .  PUBLIC   PDATA  U_CHAR   0011H  1
DVR_PreAlarmLength . . . . . . . . . .  PUBLIC   PDATA  U_CHAR   0012H  1
TH1. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008DH  1
DVR_sandardtimebeginesMonth. . . . . .  PUBLIC   PDATA  U_CHAR   0013H  1
CAM_CALL . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_CAM_TxCommand_toRS485 . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  Com_ID . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0000H  1
  j. . . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0001H  1
SerialNumber . . . . . . . . . . . . .  PUBLIC   PDATA  U_CHAR   0014H  1
RS485_RX . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Baud_rate2400. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
RS485_TX . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
FW_Update_Start. . . . . . . . . . . .  E_CONST  -----  INT      -----  2
NumType. . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  5
  PrePostCharLen . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  PrePostChar. . . . . . . . . . . . .  MEMBER   -----  ARRAY    0001H  4
Send_PelcoP_Command. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ii . . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0000H  1
  j. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
DVRVersion . . . . . . . . . . . . . .  PUBLIC   PDATA  ARRAY    0015H  17
_Wait_ms . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CAM_PTZ_STOP . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
RegisterInfo . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  Min. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0000H  2
  Max. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0002H  2
  Default. . . . . . . . . . . . . . .  MEMBER   -----  INT      0004H  2
Baud_rate4800. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_PCMDATA . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  22
  Support. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  HAN. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  VAN. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0003H  2
  IVF. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0005H  2
  CLOCK. . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0007H  2
  low. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0009H  2
  high . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000BH  2
  Hstart . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000DH  2
  Vstart . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000FH  2
  IPF. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0011H  2
  PPF. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0013H  2
  VBack. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0015H  1
Baud_rate9600. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_QUAD . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
FW_Update_OK . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
PelcoChoiceFLAG. . . . . . . . . . . .  EXTERN   PDATA  U_CHAR   -----  1
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 116 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


TriggerStatus. . . . . . . . . . . . .  PUBLIC   PDATA  U_CHAR   0026H  1
CAM_ZOOM_IN_START. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
PresetNumber . . . . . . . . . . . . .  PUBLIC   PDATA  U_CHAR   0027H  1
year1. . . . . . . . . . . . . . . . .  PUBLIC   PDATA  U_CHAR   0028H  1
DisplayFWVersion . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
MANUALRECSTOP. . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
year2. . . . . . . . . . . . . . . . .  PUBLIC   PDATA  U_CHAR   0029H  1
SetDVRDefault. . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
DefineMenu . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  16
  Icon . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0000H  2
  Desc . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0002H  3
  PreFnId. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  PostFnId . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  IconColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  DescColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
  Child. . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0009H  2
  Type . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000BH  1
  ActiveWithCursor . . . . . . . . . .  MEMBER   -----  U_CHAR   000CH  1
  Id . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000DH  1
  TypeData . . . . . . . . . . . . . .  MEMBER   -----  PTR      000EH  2
VGAMode. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CMD_UNKNOWN. . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
DVR_SDCardAvailable. . . . . . . . . .  PUBLIC   PDATA  U_CHAR   002AH  1
SEQ. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Hs_Protocol_Init . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
LongRegisterInfo . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  Min. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  Max. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  Default. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
HS_DvrCommand. . . . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
S2BRT. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BAH  1
SendDVRParam . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
PictureInfo. . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  4
  Register_Addr. . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  EEPROM_Addr. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  Control_Range. . . . . . . . . . . .  MEMBER   -----  PTR      0002H  2
CAM_ABR_T3 . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ABR_T4 . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CMD_NULL . . . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
DVR_Busy . . . . . . . . . . . . . . .  PUBLIC   PDATA  U_CHAR   002BH  1
GetDATETIME. . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
CAM_A. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
DVR_timebeginesTime. . . . . . . . . .  PUBLIC   PDATA  U_CHAR   002CH  1
SNAPSHOT . . . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
CAM_B. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
DvrReceivePaser. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0000H  1
  j. . . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0001H  1
  CheckSum . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  DVR_Com. . . . . . . . . . . . . . .  AUTO     PDATA  ARRAY    0002H  30
CAM_C. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
FormatStatus . . . . . . . . . . . . .  PUBLIC   PDATA  U_CHAR   002DH  1
CAM_D. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_Printf. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CAM_CAB. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_BAC. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ABC. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
C51 COMPILER V8.16   HS_DVRPROTOCOL                                                        03/04/2011 15:51:19 PAGE 117 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


DVRVersionLen. . . . . . . . . . . . .  PUBLIC   PDATA  U_CHAR   002EH  1
gb_P_Com . . . . . . . . . . . . . . .  PUBLIC   PDATA  ARRAY    002FH  8
DVR_OverWrite. . . . . . . . . . . . .  PUBLIC   PDATA  U_CHAR   0037H  1
GetDVRVersion. . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
Halt_Start . . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
SendAlarm. . . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
gb_PTZ_Speed . . . . . . . . . . . . .  PUBLIC   PDATA  U_CHAR   0038H  1
DVR_TimeZone . . . . . . . . . . . . .  PUBLIC   PDATA  U_CHAR   0039H  1
GetLCDMode . . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2438    ----
   CONSTANT SIZE    =     44    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =     58      72
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      4    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
