C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 1   


C51 COMPILER V8.16, COMPILATION OF MODULE CPU
OBJECT MODULE PLACED IN .\Output\cpu.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE cpu.c COMPACT OPTIMIZE(9,SIZE) BROWSE INCDIR(.\Include\) DEBUG OBJECTEXTEND
                    - CODE LISTINCLUDE SYMBOLS PRINT(.\Source\cpu.lst) OBJECT(.\Output\cpu.obj)

line level    source

   1          /* CPU.c */
   2          
   3          #include "config.h"
   1      =1  /*****************************************************************************/
   2      =1  /*                           System Configurations                           */
   3      =1  /*                                                      rev 0.10 include auto test                                               */
   4      =1  // 0.11 change DTV, PC input initial download data correct for Charge Pump
   5      =1  // 0.12 correct phase measurement routine '>>3'
   6      =1  // 0.13 enable function for SPI control... only EXT MCU case
   7      =1  // 0.14 corrected PC measurement......
   8      =1  // 0.0a test function only for CVBS, SVIDEO
   9      =1  // 0.15 corrected DTV scaler setting for panel resolutions
  10      =1  // 0.0b panel for AND 640x480 TICON panel
  11      =1  // 0.16 corrected COMPONENT scaler setting for panel resolutions        11/21/2007
  12      =1  // 0.0c automatic chip test
  13      =1  // 0.17 add monitor function, osd grid for writing grid
  14      =1  // 0.18 add component, dtv pc for analogpanel, 12/06/2007
  15      =1  // 0.19 correct pal input for CES, 12/20/2007
  16      =1  // 0.1a CCFL control, 12/28/2007
  17      =1  // 0.19 Multi Grid for Banking on Internal MCU  01/17/2008
  18      =1  // 0.20 CCFL contol for backlight brightness    01/21/2008
  19      =1  // 0.21 CCFL contol for backlight brightness    01/25/2008
  20      =1  // 0.22 phase setting 02/07/2008
  21      =1  // 0.221 display input correction 04/03/2008
  22      =1  // 0.23 PC, DTV mode, no signal display
  23      =1  // 0.24 PC Auto Color adjustment
  24      =1  // 0.25 revised PC Auto Clock adjustment - find divide number and phase
  25      =1  // 0.26 Digital RGB for TW8826
  26      =1  // 0.27 Correct LVDS control                                    08/22/2008
  27      =1  // 0.28 Add WSVGA resolution                                    10/23/2008
  28      =1  // 0.29 Add NEW GRID                                                    11/14/2008
  29      =1  // 0.30 Fix DTV input                                                   12/10/2008
  30      =1  // 0.31 Add 1080i23, 24, 25A, 25B                               01/20/2009
  31      =1  // 0.32 TCON setting FIX all mode                               01/22/2009
  32      =1  // 0.33 autodetect is auto on/off by dip sw1    02/02/2009
  33      =1  // 0.34 Fix autocolor function and clamp position 02/08/2009
  34      =1  /*****************************************************************************/
  35      =1  #ifndef __CONFIG_H__
  36      =1  #define __CONFIG_H__
  37      =1  
  38      =1  //#define INTERNAL_MCU -- defined by Project Compiler session
  39      =1  
  40      =1  
  41      =1  //-----------------------------------------------------------------------------
  42      =1  //              Firmware Version
  43      =1  //-----------------------------------------------------------------------------
  44      =1  #define FWVER                   0x140                   // Rev 0.14
  45      =1  //-----------------------------------------------------------------------------
  46      =1  //              Compiler
  47      =1  //-----------------------------------------------------------------------------
  48      =1  #define KEILC                                           // Keil C 5.0
  49      =1  //-----------------------------------------------------------------------------
  50      =1  //              MPU Clock
  51      =1  //-----------------------------------------------------------------------------
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 2   

  52      =1  #ifndef INTERNAL_MCU
  53      =1  //#define CLOCK_11M                                     // 11.0592MHz
  54      =1  #define CLOCK_22M                                       // 22.1184MHz
  55      =1  #else                                                           // INTERNAL_MCU
           =1 #define CLOCK_27M                                       // 27MHz
           =1 #define REG_START_ADDRESS       0xc000          // register start 0xc000, for page0, 0xc100-page1 
           =1 #endif
  59      =1  //-----------------------------------------------------------------------------
  60      =1  //              TW88 Version
  61      =1  //-----------------------------------------------------------------------------
  62      =1  #define TW8816
  63      =1  //-----------------------------------------------------------------------------
  64      =1  //              Options for Backlight control
  65      =1  //-----------------------------------------------------------------------------
  66      =1  //#define       BACKLIGHT_CCFL
  67      =1  //#define       BACKLIGHT_LED
  68      =1  #define BACKLIGHT_PWM
  69      =1  
  70      =1  //-----------------------------------------------------------------------------
  71      =1  //              Panel Resolution
  72      =1  //-----------------------------------------------------------------------------
  73      =1  // ---- Select Default Panel
  74      =1  //
  75      =1  //#define UXGA                                          // 1600 x 1200
  76      =1  //#define SXGA                                          // 1280 x 1024
  77      =1  //#define XGA  // 1024 x 768
  78      =1  #ifdef XGA
           =1         #define LVDS                                    
           =1         #define PWIDTH  1024
           =1         #define PHEIGHT 768
           =1 #endif
  83      =1  //#define SVGA                                          //  800 x 600
  84      =1  //#define VGA                                           //  640 x 480
  85      =1  #ifdef VGA
           =1         #define PWIDTH  640
           =1         #define PHEIGHT 480
           =1         //#define       HITACHI_640_B_160               //--> 640 x 160
           =1         #define AND_640_480
           =1 #endif
  91      =1  //#define WXGA                                          // 1280 x 768 (15:9) // 1366 x 768 (16:9)
  92      =1  #ifdef WXGA
           =1     //#define WX_SHARP_LQ106K1LA
           =1         #define PWIDTH  1280
           =1         #define PHEIGHT 768
           =1 #endif
  97      =1  //#define WSVGA                                         // 1024 x 600   *** only video mode
  98      =1  #ifdef WSVGA
           =1         #define PWIDTH  1024
           =1         #define PHEIGHT 600
           =1         #define UNIDEN_1024_600
           =1 #endif
 103      =1  #define WVGA                                            //  800 x 480
 104      =1  #ifdef WVGA
 105      =1          #define PWIDTH  800
 106      =1          #define PHEIGHT 600//480
 107      =1          // If WVGA, you have to select panel.
 108      =1          //#define AU_10INCH
 109      =1          //#define WVGA_TPO
 110      =1          //#define SAMSUNG_10INCH
 111      =1          //#define SAMSUNG_TICONLESS_10INCH
 112      =1          //#define SHARP_TICONLESS_7INCH
 113      =1          #define AU_TICONLESS_7INCH
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 3   

 114      =1          //#define INNOLUX_AT080TN03
 115      =1          //#define AU_TICONLESS_7INCH_CCFL
 116      =1          //#define CMO                   // CHIMEI panel
 117      =1          //#define AU_TICONLESS_10INCH
 118      =1          //#define HITACHI_T01
 119      =1          //#define HITACHI_TX23D12
 120      =1          //#define HITACHI_TX18D24
 121      =1          //#define HITACHI_TX18D16
 122      =1          //#define TMD_LTA070A320F
 123      =1          //#define TMD_LTA080B
 124      =1  #endif  //WVGA
 125      =1  //#define HVGA                                          //  480 x 320
 126      =1  //#define QVGA                                          //  320 x 240   *** only video mode
 127      =1  #ifdef QVGA
           =1         #define PWIDTH  320
           =1         #define PHEIGHT 240
           =1         //#define HITACHI_TX09D73
           =1         //#define AU_DELTARGB
           =1         //#define SHARP_LQ050Q5DR01
           =1         //#define SHARP_LQ035
           =1         //#define       TMD
           =1 #endif
 136      =1  
 137      =1  //#define WQVGA                                         //  480 x 234   *** only video mode
 138      =1  #ifdef WQVGA
           =1         #define PWIDTH  480
           =1         #define PHEIGHT 240
           =1         // If WQVGA, you have to select panel   
           =1     #define ANALOG_7INCH
           =1         //#define       PWIDTH  400
           =1         //#define PHEIGHT       240
           =1         //#define SHARP_LQ043T3DX02             //  400 x 237
           =1         //#define LG_ANALOG
           =1         //#define TMD_ANALOG                            //TMD_LTA05B352A
           =1         //#define       T_51945GD                               // Optorex Panel
           =1 #endif  // WQVGA
 150      =1  
 151      =1  //if LVDS pannel disable TICONLESS
 152      =1  
 153      =1  //-----------------------------------------------------------------------------
 154      =1  //---- Add Support One more panel with DIPSW#1
 155      =1  //---- Ex. Add Analog AU 7" Panel with Default Panel for evalution
 156      =1  //#define ADD_ANALOGPANEL               // Added Analog panel(AU7") from default set panel(expect WQVGA) with DIP #1 sw
             -itch.(DIP#1=L:ANALOG, H:DEFAULT)
 157      =1                                                          // It can't support WQVGA and ADD_ANALOGPANEL same time!!
 158      =1          //#define ADD_ANALOG_7INCH
 159      =1          //#define ADD_TMD_LTA05B352A
 160      =1                                                                          
 161      =1  //---- Support Wide panel function
 162      =1  #if (defined WXGA) || (defined WSVGA) || (defined WVGA) || (defined WQVGA)
 163      =1  #define WIDE_SCREEN                             // Can support 4 display mode, i.e. Normal, Wide, Full, Zoom
 164      =1  #endif                                                          // Tested panasonic WVGA panel.
 165      =1  
 166      =1  //-----------------------------------------------------------------------------
 167      =1  //              Panel Vendor Specific
 168      =1  //-----------------------------------------------------------------------------
 169      =1  
 170      =1  //-----------------------------------------------------------------------------
 171      =1  //              TV Tuner
 172      =1  //-----------------------------------------------------------------------------
 173      =1  #define PHILIPS                         0
 174      =1  #define ALPS                            1               // ALPS, LG
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 4   

 175      =1  #define TEMIC                           2
 176      =1  #define TVAVA                           3
 177      =1  #define LGTUNER                         4
 178      =1  #define SAMSUNGMUTITUNER        5
 179      =1  
 180      =1  #define TVTunerDevice           4
 181      =1  //-----------------------------------------------------------------------------
 182      =1  //              IR Remote Controller Type
 183      =1  //-----------------------------------------------------------------------------
 184      =1  //#define REMO_RC5                                      // RC5 style
 185      =1  #define TECHWELL_REMOCON
 186      =1  //#define REMO_NEC                                      // NEC style
 187      =1  //#define PHILIPS_REMOCON // New remocon 
 188      =1  
 189      =1  
 190      =1  //-----------------------------------------------------------------------------
 191      =1  //              I2C Device Access Address Mapping
 192      =1  //-----------------------------------------------------------------------------
 193      =1  
 194      =1  #define EEPROMI2CAddress        0xa0    // EEPROM (24C16)
 195      =1  #define TW88I2CAddress          0x8a    // TW880x
 196      =1  
 197      =1  #define MSPI2CAddress           0x80    // MSP
 198      =1  
 199      =1  //-----------------------------------------------------------------------------
 200      =1  //              Options for Possible Inputs
 201      =1  //-----------------------------------------------------------------------------
 202      =1  #define         AWT
 203      =1  //#define       E_Wintek 
 204      =1  //#define SUPPORT_SVIDEO                     //andy Awt 20090914
 205      =1  //#define SUPPORT_COMPONENT                     // support component analog to decoder//andy Awt 20090914
 206      =1  
 207      =1  //#define SUPPORT_DTV                           // support DTV input through component( to ADC ).//andy Awt 20090914
 208      =1  #define SUPPORT_PC                              // support PC function
 209      =1  //#define SUPPORT_DVI                           // support DVI input
 210      =1  #define SUPPORT_SDCARD
 211      =1  
 212      =1  //#define SUPPORT_RS485
 213      =1  
 214      =1  //-----------------------------------------------------------------------------
 215      =1  //              Options for Possible Standards
 216      =1  //              Default:NTSC
 217      =1  //-----------------------------------------------------------------------------
 218      =1  #define SUPPORT_PAL                     
 219      =1  #define SUPPORT_SECAM
 220      =1  #define SUPPORT_NTSC4           
 221      =1  #define SUPPORT_PALM    
 222      =1  #define SUPPORT_PALN            
 223      =1  #define SUPPORT_PAL60           
 224      =1  
 225      =1  
 226      =1  //#define ID_CHECK_BY_FW                        // in Video mode, check input system ID by firmware
 227      =1  
 228      =1  //-----------------------------------------------------------------------------
 229      =1  //              Options for Debugging/Release
 230      =1  //-----------------------------------------------------------------------------
 231      =1  //#define SUPPORT_PATTERN                       // support LCD test pattern
 232      =1  
 233      =1  
 234      =1  #ifndef WQVGA
 235      =1          #ifndef QVGA
 236      =1  #define SUPPORT_OSDPOSITIONMOVE
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 5   

 237      =1          #endif
 238      =1  #endif
 239      =1  
 240      =1  #define SERIAL                                  // include serial communication routines
 241      =1  
 242      =1  //#define SUPPORT_DEBUG                         // Support to use Read & Write in debug OSD Window by remocon.
 243      =1  
 244      =1  //#define DEBUG                                         // include debug information
 245      =1  #ifdef DEBUG
           =1         //#define DEBUG_MAIN
           =1         //#define DEBUG_TIME
           =1         //#define DEBUG_KEYREMO
           =1         //#define DEBUG_TW88
           =1         //#define DEBUG_DECODER
           =1         //#define DEBUG_I2C
           =1         //#define DEBUG_EEP
           =1         //#define DEBUG_OSD
           =1         //#define DEBUG_AUDIO
           =1         //#define DEBUG_SETPANEL
           =1         //#define DEBUG_DTV
           =1         #define DEBUG_PC
           =1         //#define DEBUG_PC_MEAS
           =1         #define DEBUG_PC_COLOR
           =1         //#define DEBUG_COMPONENT
           =1         //#define DEBUG_BANK
           =1         //#define DEBUG_PAUSE
           =1         //#define DEBUG_MCU
           =1 #endif
 265      =1  
 266      =1  #define AUTOCALC_PC                                     // in PC mode, Enable Auto Calcuration
 267      =1  //#define SUPPORT_USERCOLORFROMTXT      // Use color setting of text file in Color mode=USER MODE which is as B
             -rightness(Reg10), Contast(Reg11),
 268      =1                                                                          //    Sat_U(Reg13),Sat_V(Reg14),Sharpness(Reg12,Reg78)                                                                  
 269      =1  //#define SUPPORT_GAMMA
 270      =1  
 271      =1  //#define CHIP_MANUAL_TEST                      // DIPSW#1
 272      =1  
 273      =1  #ifndef INTERNAL_MCU
 274      =1  //#define NO_INITIALIZE                         // After Power switch turn on with DIP SW4 Enable(Low), or pressed MENU button 
             -for internal MCU
 275      =1                                      //     micom works to access only I2C bus by serial command.
 276      =1  #endif
 277      =1  
 278      =1  //#define SUPPORT_KRS_OSDDEMO           // For KRS Company Demo 
 279      =1  //#define SUPPORT_LINE_OSDDEMO
 280      =1  
 281      =1  //-----------------------------------------------------------------------------
 282      =1  //              Special Features
 283      =1  //-----------------------------------------------------------------------------
 284      =1  
 285      =1  #ifndef INTERNAL_MCU
 286      =1  //#define       SUPPORT_DELTA_RGB
 287      =1  #endif
 288      =1  #define SUPPORT_SELECTKEY                       // choose the keymap of using select key or left,right key.
 289      =1  //-----------------------------------------------------------------------------
 290      =1  #endif  //__CONFIG_H__
   4          
   5          #include "typedefs.h"
   1      =1  #ifndef __TYPEDEFS__
   2      =1  #define __TYPEDEFS__
   3      =1  
   4      =1  
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 6   

   5      =1  #define DATA            data
   6      =1  #define PDATA           pdata
   7      =1  #define IDATA           data
   8      =1  #define CODE            code
   9      =1  #define CODE_P
  10      =1  #define PDATA_P
  11      =1  #define IDATA_P
  12      =1  #define DATA_P
  13      =1  
  14      =1  #define INTERRUPT( num, name ) name() interrupt num
  15      =1  
  16      =1  #define _between(x, a, b)       (a<=x && x<=b)
  17      =1  #define _swap(a, b)                     { a^=b; b^=a; a^=b; }
  18      =1  
  19      =1  typedef unsigned char   Register;
  20      =1  typedef unsigned char   BYTE;
  21      =1  typedef unsigned short  WORD;
  22      =1  typedef unsigned long   DWORD;
  23      =1  
  24      =1  #define TRUE    1
  25      =1  #define FALSE   0
  26      =1  
  27      =1  //VInputStdDetectMode
  28      =1  #define AUTO    0
  29      =1  
  30      =1  //VInputStd
  31      =1  #define NTSC    1                       
  32      =1  #define PAL             2
  33      =1  #define SECAM   3
  34      =1  #define NTSC4   4
  35      =1  #define PALM    5
  36      =1  #define PALN    6
  37      =1  #define PAL60   7
  38      =1  
  39      =1  #define MAXINPUTSTD     PAL60+1 // 
  40      =1  
  41      =1  #define UNKNOWN 0xfe
  42      =1  #define NOINPUT 0       //0xff
  43      =1  
  44      =1  
  45      =1  
  46      =1  
  47      =1  #define NIL                     0xff
  48      =1  
  49      =1  enum SourceModeTypeEnum
  50      =1  {       
  51      =1          AVMode,            // 0
  52      =1          VGAMode,       // 1
  53      =1          CAM_D,         // 2
  54      =1          CAM_A,         // 3
  55      =1          CAM_B,         // 4
  56      =1          CAM_C,         // 5
  57      =1          CAM_R,         // 6
  58      =1          CAM_AB,        // 7
  59      =1          CAM_CR,        // 8
  60      =1          CAM_AR,        // 9
  61      =1          CAM_RB,        // 10
  62      =1          CAM_AC,        // 11
  63      =1          CAM_CB,        // 12
  64      =1          CAM_RAB_T,     // 13
  65      =1          CAM_RAB_H,     // 14
  66      =1  
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 7   

  67      =1          CAM_QUAD,      // 15
  68      =1          CAM_ABR_T3,    // 16
  69      =1          CAM_ABR_T4,    // 17
  70      =1          SEQ,           // 18
  71      =1          CAM_BA,                 //19
  72      =1          
  73      =1          CAM_BC,
  74      =1          CAM_BR,
  75      =1          CAM_CA,
  76      =1          CAM_ABC,
  77      =1          CAM_ABR,
  78      =1          CAM_ACR,
  79      =1          CAM_BAC,
  80      =1          CAM_BAR,
  81      =1          CAM_BCR,
  82      =1          CAM_CAB,
  83      =1          CAM_CAR,
  84      =1          CAM_CBR,        
  85      =1          CAM_NUM
  86      =1  };
  87      =1  
  88      =1  typedef unsigned char SourceModeType;
  89      =1  
  90      =1  #endif  /* __TYPEDEFS__ */
   6          #include "reg.h"
   1      =1  //
   2      =1  //Registers.h   : Register declaration
   3      =1  //
   4      =1  
   5      =1  #ifndef __REGISTERS__
   6      =1  #define __REGISTERS__
   7      =1  
   8      =1  #ifdef INTERNAL_MCU
           =1 /*  BYTE Registers  */
           =1 sfr P0    = 0x80;
           =1 sfr P1    = 0x90;
           =1 sfr P2    = 0xA0;
           =1 sfr P3    = 0xB0;
           =1 sfr PSW   = 0xD0;
           =1 sfr ACC   = 0xE0;
           =1 sfr B     = 0xF0;
           =1 sfr SP    = 0x81;
           =1 sfr DPL   = 0x82;
           =1 sfr DPH   = 0x83;
           =1 sfr PCON  = 0x87;
           =1 sfr TCON  = 0x88;
           =1 sfr TMOD  = 0x89;
           =1 sfr TL0   = 0x8A;
           =1 sfr TL1   = 0x8B;
           =1 sfr TH0   = 0x8C;
           =1 sfr TH1   = 0x8D;
           =1 sfr IE    = 0xA8;
           =1 sfr IP    = 0xB8;
           =1 sfr SCON  = 0x98;
           =1 sfr SBUF  = 0x99;
           =1 
           =1 //sfr P4    = 0xd8;
           =1 
           =1 /*  8052 Extensions  */
           =1 sfr EXIF  = 0x91;               // external interrupt 2,3,4,5 flags should be cleared by software
           =1 sfr T2CON = 0xC8;
           =1 sfr RCAP2L = 0xCA;
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 8   

           =1 sfr RCAP2H = 0xCB;
           =1 sfr TL2   = 0xCC;
           =1 sfr TH2   = 0xCD;
           =1 sfr EICON = 0xD8;
           =1 sfr EIE   = 0xE8;
           =1 sfr EIP   = 0xF8;
           =1 
           =1 /*      TW88 Core Extension */
           =1 sfr     BANKREG         = 0x9A;
           =1 sfr     SPICONTROL      = 0x9B;
           =1 sfr     T0HIGH          = 0x9C;
           =1 sfr     T0LOW           = 0x9D;
           =1 sfr     T1HIGH          = 0x9E;
           =1 sfr     T1LOW           = 0x9F;
           =1 sfr     T2HIGH          = 0x93;
           =1 sfr     T2LOW           = 0x94;
           =1 
           =1 /*  BIT Registers  */
           =1 /*  PSW  */
           =1 sbit CY    = 0xD7;
           =1 sbit AC    = 0xD6;
           =1 sbit F0    = 0xD5;
           =1 sbit RS1   = 0xD4;
           =1 sbit RS0   = 0xD3;
           =1 sbit OV    = 0xD2;
           =1 sbit P     = 0xD0;
           =1 
           =1 /*  TCON  */
           =1 sbit TF1   = 0x8F;
           =1 sbit TR1   = 0x8E;
           =1 sbit TF0   = 0x8D;
           =1 sbit TR0   = 0x8C;
           =1 sbit IE1   = 0x8B;
           =1 sbit IT1   = 0x8A;
           =1 sbit IE0   = 0x89;
           =1 sbit IT0   = 0x88;
           =1 
           =1 /*  IE  */
           =1 sbit EA    = 0xAF;
           =1 sbit ES    = 0xAC;
           =1 sbit ET1   = 0xAB;
           =1 sbit EX1   = 0xAA;
           =1 sbit ET0   = 0xA9;
           =1 sbit EX0   = 0xA8;
           =1 
           =1 /*  EIE  */
           =1 sbit EWDI  = 0xEC;              // Watch dog timer interrupt enable
           =1 sbit EX5   = 0xEB;              // external interrupt 5 enable
           =1 sbit EX4   = 0xEA;              // external interrupt 4 enable
           =1 sbit EX3   = 0xE9;              // external interrupt 3 enable
           =1 sbit EX2   = 0xE8;              // external interrupt 2 enable
           =1 
           =1 /*  IP  */
           =1 sbit PS    = 0xBC;
           =1 sbit PT1   = 0xBB;
           =1 sbit PX1   = 0xBA;
           =1 sbit PT0   = 0xB9;
           =1 sbit PX0   = 0xB8;
           =1 
           =1 /*  EIP  */
           =1 sbit PWDI  = 0xFC;              // Watch dog timer interrupt priority
           =1 sbit PX5   = 0xFB;              // external interrupt5 priority
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 9   

           =1 sbit PX4   = 0xFA;              // external interrupt4 priority
           =1 sbit PX3   = 0xF9;              // external interrupt3 priority
           =1 sbit PX2   = 0xF8;              // external interrupt2 priority
           =1 
           =1 /*  P3  */
           =1 sbit RD    = 0xB7;
           =1 sbit WR    = 0xB6;
           =1 sbit T1    = 0xB5;
           =1 sbit T0    = 0xB4;
           =1 sbit INT1  = 0xB3;
           =1 sbit INT0  = 0xB2;
           =1 sbit TXD   = 0xB1;
           =1 sbit RXD   = 0xB0;
           =1 
           =1 /*  SCON  */
           =1 sbit SM0   = 0x9F;
           =1 sbit SM1   = 0x9E;
           =1 sbit SM2   = 0x9D;
           =1 sbit REN   = 0x9C;
           =1 sbit TB8   = 0x9B;
           =1 sbit RB8   = 0x9A;
           =1 sbit TI    = 0x99;
           =1 sbit RI    = 0x98;
           =1 
           =1 /*  8052 Extensions  */
           =1 /*  IE  */
           =1 sbit ET2   = 0xAD;
           =1 
           =1 /*  IP  */
           =1 sbit PT2   = 0xBD;
           =1 
           =1 /*  P1  */
           =1 sbit T2EX  = 0x91;
           =1 sbit T2    = 0x90;
           =1              
           =1 /*  T2CON  */
           =1 sbit TF2   = 0xCF;
           =1 sbit EXF2  = 0xCE;
           =1 sbit RCLK  = 0xCD;
           =1 sbit TCLK  = 0xCC;
           =1 sbit EXEN2 = 0xCB;
           =1 sbit TR2   = 0xCA;
           =1 sbit C_T2  = 0xC9;
           =1 sbit CP_RL2= 0xC8;
           =1 
           =1 sfr     CHPENR = 0xF6;
           =1 sfr     CHPCON = 0xBF;
           =1 sfr     SFRAL  = 0xC4;
           =1 sfr     SFRAH  = 0xC5;
           =1 sfr     SFRFD  = 0xC6;
           =1 sfr     SFRCN  = 0xC7;
           =1 
           =1 sbit P0_0  = 0x80;
           =1 sbit P0_1  = 0x81;
           =1 sbit P0_2  = 0x82;
           =1 sbit P0_3  = 0x83;
           =1 sbit P0_4  = 0x84;
           =1 sbit P0_5  = 0x85;
           =1 sbit P0_6  = 0x86;
           =1 sbit P0_7  = 0x87;
           =1 
           =1 sbit P1_0  = 0x90;
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 10  

           =1 sbit P1_1  = 0x91;
           =1 sbit P1_2  = 0x92;
           =1 sbit P1_3  = 0x93;
           =1 sbit P1_4  = 0x94;
           =1 sbit P1_5  = 0x95;
           =1 sbit P1_6  = 0x96;
           =1 sbit P1_7  = 0x97;
           =1 
           =1 sbit P2_0  = 0xa0;
           =1 sbit P2_1  = 0xa1;
           =1 sbit P2_2  = 0xa2;
           =1 sbit P2_3  = 0xa3;
           =1 sbit P2_4  = 0xa4;
           =1 sbit P2_5  = 0xa5;
           =1 sbit P2_6  = 0xa6;
           =1 sbit P2_7  = 0xa7;
           =1 
           =1 sbit P3_0  = 0xb0;
           =1 sbit P3_1  = 0xb1;
           =1 sbit P3_2  = 0xb2;
           =1 sbit P3_3  = 0xb3;
           =1 sbit P3_4  = 0xb4;
           =1 sbit P3_5  = 0xb5;
           =1 sbit P3_6  = 0xb6;
           =1 sbit P3_7  = 0xb7;
           =1 
           =1 #else   // external MCU=WINBOND
 189      =1  /*  BYTE Registers  */
 190      =1  sfr P0    = 0x80;
 191      =1  sfr P1    = 0x90;
 192      =1  sfr P2    = 0xA0;
 193      =1  sfr P3    = 0xB0;
 194      =1  sfr PSW   = 0xD0;
 195      =1  sfr ACC   = 0xE0;
 196      =1  sfr B     = 0xF0;
 197      =1  sfr SP    = 0x81;
 198      =1  sfr DPL   = 0x82;
 199      =1  sfr DPH   = 0x83;
 200      =1  sfr PCON  = 0x87;
 201      =1  sfr TCON  = 0x88;
 202      =1  sfr TMOD  = 0x89;
 203      =1  sfr TL0   = 0x8A;
 204      =1  sfr TL1   = 0x8B;
 205      =1  sfr TH0   = 0x8C;
 206      =1  sfr TH1   = 0x8D;
 207      =1  sfr CKCON = 0x8E;               //clock control register, default =0x01
 208      =1  sfr IE    = 0xA8;
 209      =1  sfr IP    = 0xB8;
 210      =1  sfr SCON  = 0x98;
 211      =1  sfr SBUF  = 0x99;
 212      =1  sfr P4 = 0xE8; //Megawin Ryan@970716
 213      =1  //sfr P4    = 0xa5;      //SST MCU
 214      =1  //sfr P4    = 0xd8;             //winbond<960820>
 215      =1  
 216      =1  
 217      =1  /*  8052 Extensions  */
 218      =1  sfr T2CON = 0xC8;
 219      =1  sfr RCAP2L = 0xCA;
 220      =1  sfr RCAP2H = 0xCB;
 221      =1  sfr TL2   = 0xCC;
 222      =1  sfr TH2   = 0xCD;
 223      =1  
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 11  

 224      =1  // for UART2
 225      =1  sfr S2CON  = 0xAA;
 226      =1  sfr S2BRT  = 0xBA;
 227      =1  sfr S2BUF  = 0x9A;
 228      =1  sfr AUXR2  = 0xA6;
 229      =1  sfr AUXIE  = 0xAD;
 230      =1  
 231      =1  
 232      =1  sfr P1M0  = 0x91;
 233      =1  sfr P1M1  = 0x92;
 234      =1  sfr P0M0  = 0x93;
 235      =1  sfr P0M1  = 0x94;
 236      =1  
 237      =1  
 238      =1  
 239      =1  // for PCA
 240      =1  sfr CCON   = 0xD8;
 241      =1  sfr CMOD   = 0xD9;
 242      =1  sfr CCAPM0 = 0xDA;
 243      =1  sfr CCAPM1 = 0xDB;
 244      =1  sfr CCAPM2 = 0xDC;
 245      =1  sfr CCAPM3 = 0xDD;
 246      =1  sfr CCAPM4 = 0xDE;
 247      =1  sfr CCAPM5 = 0xDF;
 248      =1  sfr CL     = 0xE9;
 249      =1  sfr CH     = 0xF9;
 250      =1  sfr CCAP0L = 0xEA;
 251      =1  sfr CCAP0H = 0xFA;
 252      =1  sfr CCAP1L = 0xEB;
 253      =1  sfr CCAP1H = 0xFB;
 254      =1  sfr CCAP2L = 0xEC;
 255      =1  sfr CCAP2H = 0xFC;
 256      =1  sfr CCAP3L = 0xED;
 257      =1  sfr CCAP3H = 0xFD;
 258      =1  sfr CCAP4L = 0xEE;
 259      =1  sfr CCAP4H = 0xFE;
 260      =1  sfr CCAP5L = 0xEF;
 261      =1  sfr CCAP5H = 0xFF;
 262      =1  sfr PCAPWM0= 0xF2;
 263      =1  sfr PCAPWM1= 0xF3;
 264      =1  sfr PCAPWM2= 0xF4;
 265      =1  sfr PCAPWM3= 0xF5;
 266      =1  sfr PCAPWM4= 0xF6;
 267      =1  sfr PCAPWM5= 0xF7;
 268      =1  
 269      =1  /*  BIT Registers  */
 270      =1  /*  PSW  */
 271      =1  sbit CY    = 0xD7;
 272      =1  sbit AC    = 0xD6;
 273      =1  sbit F0    = 0xD5;
 274      =1  sbit RS1   = 0xD4;
 275      =1  sbit RS0   = 0xD3;
 276      =1  sbit OV    = 0xD2;
 277      =1  sbit P     = 0xD0;
 278      =1  
 279      =1  /*  TCON  */
 280      =1  sbit TF1   = 0x8F;
 281      =1  sbit TR1   = 0x8E;
 282      =1  sbit TF0   = 0x8D;
 283      =1  sbit TR0   = 0x8C;
 284      =1  sbit IE1   = 0x8B;
 285      =1  sbit IT1   = 0x8A;
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 12  

 286      =1  sbit IE0   = 0x89;
 287      =1  sbit IT0   = 0x88;
 288      =1  
 289      =1  /*  IE  */
 290      =1  sbit EA    = 0xAF;
 291      =1  sbit ES    = 0xAC;
 292      =1  sbit ET1   = 0xAB;
 293      =1  sbit EX1   = 0xAA;
 294      =1  sbit ET0   = 0xA9;
 295      =1  sbit EX0   = 0xA8;
 296      =1  
 297      =1  /*  IP  */
 298      =1  sbit PS    = 0xBC;
 299      =1  sbit PT1   = 0xBB;
 300      =1  sbit PX1   = 0xBA;
 301      =1  sbit PT0   = 0xB9;
 302      =1  sbit PX0   = 0xB8;
 303      =1  
 304      =1  /*  P3  */
 305      =1  sbit RD    = 0xB7;
 306      =1  sbit WR    = 0xB6;
 307      =1  sbit T1    = 0xB5;
 308      =1  sbit T0    = 0xB4;
 309      =1  sbit INT1  = 0xB3;
 310      =1  sbit INT0  = 0xB2;
 311      =1  sbit TXD   = 0xB1;
 312      =1  sbit RXD   = 0xB0;
 313      =1  
 314      =1  /*  SCON  */
 315      =1  sbit SM0   = 0x9F;
 316      =1  sbit SM1   = 0x9E;
 317      =1  sbit SM2   = 0x9D;
 318      =1  sbit REN   = 0x9C;
 319      =1  sbit TB8   = 0x9B;
 320      =1  sbit RB8   = 0x9A;
 321      =1  sbit TI    = 0x99;
 322      =1  sbit RI    = 0x98;
 323      =1  
 324      =1  /*  8052 Extensions  */
 325      =1  /*  IE  */
 326      =1  sbit ET2   = 0xAD;
 327      =1  
 328      =1  /*  IP  */
 329      =1  sbit PT2   = 0xBD;
 330      =1  
 331      =1  /*  P1  */
 332      =1  sbit T2EX  = 0x91;
 333      =1  sbit T2    = 0x90;
 334      =1               
 335      =1  /*  T2CON  */
 336      =1  sbit TF2   = 0xCF;
 337      =1  sbit EXF2  = 0xCE;
 338      =1  sbit RCLK  = 0xCD;
 339      =1  sbit TCLK  = 0xCC;
 340      =1  sbit EXEN2 = 0xCB;
 341      =1  sbit TR2   = 0xCA;
 342      =1  sbit C_T2  = 0xC9;
 343      =1  sbit CP_RL2= 0xC8;
 344      =1  
 345      =1  sfr     CHPENR = 0xF6;
 346      =1  sfr     CHPCON = 0xBF;
 347      =1  sfr     SFRAL  = 0xC4;
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 13  

 348      =1  sfr     SFRAH  = 0xC5;
 349      =1  sfr     SFRFD  = 0xC6;
 350      =1  sfr     SFRCN  = 0xC7;
 351      =1  
 352      =1  sbit P0_0  = 0x80;
 353      =1  sbit P0_1  = 0x81;
 354      =1  sbit P0_2  = 0x82;
 355      =1  sbit P0_3  = 0x83;
 356      =1  sbit P0_4  = 0x84;
 357      =1  sbit P0_5  = 0x85;
 358      =1  sbit P0_6  = 0x86;
 359      =1  sbit P0_7  = 0x87;
 360      =1  
 361      =1  sbit P1_0  = 0x90;
 362      =1  sbit P1_1  = 0x91;
 363      =1  sbit P1_2  = 0x92;
 364      =1  sbit P1_3  = 0x93;
 365      =1  sbit P1_4  = 0x94;
 366      =1  sbit P1_5  = 0x95;
 367      =1  sbit P1_6  = 0x96;
 368      =1  sbit P1_7  = 0x97;
 369      =1  
 370      =1  sbit P2_0  = 0xa0;
 371      =1  sbit P2_1  = 0xa1;
 372      =1  sbit P2_2  = 0xa2;
 373      =1  sbit P2_3  = 0xa3;
 374      =1  sbit P2_4  = 0xa4;
 375      =1  sbit P2_5  = 0xa5;
 376      =1  sbit P2_6  = 0xa6;
 377      =1  sbit P2_7  = 0xa7;
 378      =1  
 379      =1  sbit P3_0  = 0xb0;
 380      =1  sbit P3_1  = 0xb1;
 381      =1  sbit P3_2  = 0xb2;
 382      =1  sbit P3_3  = 0xb3;
 383      =1  sbit P3_4  = 0xb4;
 384      =1  sbit P3_5  = 0xb5;
 385      =1  sbit P3_6  = 0xb6;
 386      =1  sbit P3_7  = 0xb7;
 387      =1  
 388      =1  sbit P4_0  = P4^0;
 389      =1  sbit P4_1  = P4^1;
 390      =1  sbit INT3  = P4^2;
 391      =1  sbit INT2  = P4^3;
 392      =1  #endif  // INTERNAL_MCU
 393      =1  
 394      =1  #endif  //__REGISTERS__
   7          #include "regmap.h"
   1      =1  #ifndef __REGMAP__
   2      =1  #define __REGMAP__
   3      =1  
   4      =1  //-----------------------------------------------------------------------------
   5      =1  //                              Individual Decoder Registers 
   6      =1  //-----------------------------------------------------------------------------
   7      =1  
   8      =1  #define MCU_STOP_MODE   0xc8    // bit 7 is mcu stop, bit5 is MCU debug
   9      =1  
  10      =1  #define LAD0                    0xc9    // Low speed AD channel 0
  11      =1  #define LAD1                    0xca    // Low speed AD channel 1
  12      =1  
  13      =1  #define REG_PAGE                0xff
  14      =1  #define STATUS0                 0xd0
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 14  

  15      =1  #define STATUS1                 0xd1
  16      =1  #define IRQ_EN1                 0xd2
  17      =1  #define IRQ_EN0                 0xd3
  18      =1  
  19      =1  //-----------------------------------------------------------------------------
  20      =1  //                              Individual Decoder Registers 
  21      =1  //-----------------------------------------------------------------------------
  22      =1  
  23      =1  #define DECODERADDRESS  TW88I2CAddress
  24      =1  
  25      =1  #define CVFMT                   0x1e    // Component Video Format
  26      =1  #define FBSHIFT                 0x38    // RGB Anti-Alias Filter/FB Shift Level
  27      =1  #define SHUE                    0x3e    // RGB Hue
  28      =1  #define SCONTRAST               0x3b    // RGB Contrast
  29      =1  #define SBRIGHT                 0x3a    // RGB Brightness
  30      =1  #define SCbGAIN                 0x3c    // RGB Cb Gain
  31      =1  #define SCrGAIN                 0x3d    // RGB Cb Gain
  32      =1  #define RGBCONTROL              0x36    // RGB Powerdown..
  33      =1  #define RGBMISC                 0x39
  34      =1  #define FBCONTRL                0x3F
  35      =1  
  36      =1  //#define OSD_ADJ                       0xce
  37      =1  #define PNLSHARPNESS    0x78    // Sharpness Control
  38      =1  #define OSDWINSTATUS    0x95
  39      =1  //-----------------------------------------------------------------------------
  40      =1  //                              Common Registers
  41      =1  //-----------------------------------------------------------------------------
  42      =1  #define CSTATUS                 0x01    // Chip Status
  43      =1  #define INFORM                  0x02    // Input Format
  44      =1  #define ACNTL                   0x06    // Analog Control
  45      =1  #define CROP_HI                 0x07    // Cropping High
  46      =1  #define VDELAY_LO               0x08    // Vertical Delay Low
  47      =1  #define VACTIVE_LO              0x09    // Vertical Active Low
  48      =1  #define HDELAY_LO               0x0a    // Horizontal Delay Low
  49      =1  #define HACTIVE_LO              0x0b    // Horizontal Active Low
  50      =1  #define CNTRL1                  0x0c    // Control 1
  51      =1  
  52      =1  #define BRIGHT                  0x10    // Brightness Control
  53      =1  #define CONTRAST                0x11    // Contrast Control
  54      =1  #define SHARPNESS               0x12    // Sharpness Control
  55      =1  #define SAT_U                   0x13    // Chroma(U) Gain
  56      =1  #define SAT_V                   0x14    // Chroma(V) Gain
  57      =1  #define HUE                             0x15    // Hue Conrol
  58      =1  #define V_PEAKING               0x17    // Vertical Peaking
  59      =1  
  60      =1  #define CC_STATUS               0x1a    // CC/EDS Status
  61      =1  #define CC_DATA                 0x1b    // CC/EDS Data
  62      =1  #define SDT                             0x1c    // Standard Selection
  63      =1  #define SDTR                    0x1d    // Standard Recognition
  64      =1  
  65      =1  #define V_CONTROL2              0x29    // Vertical Control II
  66      =1  #define HFILTER                 0x2c
  67      =1  #define MISC1                   0x2d    // Miscellaneous Control 1
  68      =1  #define MISC2                   0x2e    // Miscellaneous Control 2
  69      =1  #define MISC3                   0x2f    // Miscellaneous Control 2
  70      =1  
  71      =1  #define VBI_CNTL2               0x34    // VBI control 2 - WSSEN
  72      =1  #define CC_ODDLINE              0x35    // CC Odd Line
  73      =1  
  74      =1  #define LADC0                   0xc9    //LADC Channel 0 Input Value 
  75      =1  #define LADC1                   0xca    //LADC Channel 1 Input Value 
  76      =1  
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 15  

  77      =1  #define WriteDecoder(index, val)                WriteTW88( index, val )
  78      =1  #define ReadDecoder(index)                              ReadTW88(  index )
  79      =1  #endif // __REGMAP__
   8          #include "cpu.h"
   1      =1  #ifndef __CPU__
   2      =1  #define __CPU__
   3      =1  
   4      =1  /*
   5      =1  #ifdef INTERNAL_MCU
   6      =1  #define I2C_SCL         P2_0
   7      =1  #else
   8      =1  #define I2C_SCL         P1_0
   9      =1  #endif
  10      =1  #define I2C_SDA         P1_1
  11      =1  */
  12      =1  #define I2C_SCL         P1_0
  13      =1  #define I2C_SDA         P1_1
  14      =1  #define BUF_MAX         8
  15      =1  #define DVR_BUF_MAX     30
  16      =1  
  17      =1  #ifdef REMO_RC5
           =1 #define EnableRemoconInt()      { RemoDataReady = 0;    EX0 = 1;}
           =1 #endif
  20      =1  void    InitCPU(void);
  21      =1  void    InitVars(void);
  22      =1  void    InitTechwell(void);
  23      =1  void    main_init (void);
  24      =1  void    PowerDown( void );
  25      =1  #if 0
           =1 BYTE    OKSleepTime(void);
           =1 #endif
  28      =1  #ifdef REMO_RC5
           =1 void    InitForRemo(void);
           =1 #endif
  31      =1  void    PowerLED(BYTE flag);
  32      =1  void    Wait_ms(WORD Tms);
  33      =1  BYTE    TW2835Command(char,char,char,char,char);
  34      =1  
  35      =1  #endif
   9          #include "main.h"
   1      =1  #ifndef __MAIN__
   2      =1  #define __MAIN__
   3      =1  
   4      =1  #define ON                                      1
   5      =1  #define OFF                                     0
   6      =1  //#define Hs_debug
   7      =1  //#define       DVR
   8      =1  
   9      =1  //================= DIP SW Definition =========================================
  10      =1  ///#define PIXEL_SINGLE         P0_0
  11      =1  #define DIP_PANEL_SWITCH        P0_0    // Samsung(0) // Sharp-Noticon(1)
  12      =1  #define DIP_AUTO_DETECT         P0_1
  13      =1  #define DIP_EDGE_ENHANCE        P0_2
  14      =1  #define DIP_BW_STRETCH          P0_3
  15      =1  
  16      =1  #define Panel_Enable()          P4=P4|0x08 //andy 980908
  17      =1  #define Panel_Disable()                 P4=P4&0xf7
  18      =1  
  19      =1  #define SetBacklight()      P4=P4|0x04
  20      =1  #define clrBacklight()      P4=P4&0xfb
  21      =1  
  22      =1  
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 16  

  23      =1  //InputSelection
  24      =1  struct struct_IdName {
  25      =1          BYTE    Id;
  26      =1          BYTE    Name[16];
  27      =1  };
  28      =1  
  29      =1  #define CH_TW2835              1
  30      =1  #define CH_CAMD                2
  31      =1  #define CH_AV                  3
  32      =1  #define PC                                         7
  33      =1  #define ChineseDefaultMenu   8
  34      =1  
  35      =1  #define SVIDEO                          2
  36      =1  #define COMPONENT                       3
  37      =1  //#define ANALOGDTV                     4
  38      =1  #define DTV                                     4
  39      =1  #define TV                                      5
  40      =1  #define SCART                           6
  41      =1  
  42      =1  #define DIGITALVGA                      8
  43      =1  
  44      =1  #define AIRTV                           0 //9
  45      =1  #define CABLETV                         1 //0xa
  46      =1  
  47      =1  
  48      =1  #define TVTUNER                         0xd             //10
  49      =1  #define MUTE                            1       
  50      =1  #define MENU                            2       
  51      =1  #define TVVOL                           4       
  52      =1  #define CC                                      8       
  53      =1  #define INPUTINFO                       0x10
  54      =1  #define PCINFO                          0x20
  55      =1  #define GAUGEINFO           0x40
  56      =1  //#define RATINGINFO                    0x40
  57      =1  #define TVCHN                           0x80
  58      =1  //#define MUTE                          0x40
  59      =1  
  60      =1  #define YPBPR_480i                      0
  61      =1  #define YPBPR_576i                      1
  62      =1  #define YPBPR_480p                      2
  63      =1  #define YPBPR_576p                      3
  64      =1  #define YPBPR_1080i                     4
  65      =1  #define YPBPR_720p                      5
  66      =1  #define YPBPR_720p50            6
  67      =1  
  68      =1  
  69      =1  //--------------------------- P0 Define -----------------------------
  70      =1  #define SEL_MIX                 P0_6    // 
  71      =1  //--------------------------- P1 Define -----------------------------
  72      =1  #define SEL_DVI                 P3_5    //LJY062001             
  73      =1  
  74      =1  #define TW88HWReset                     P3_4    //LJY001010 //LJY000721
  75      =1  #define PowerUp             P1_4
  76      =1  //======================= CDS Control ================================= 
  77      =1  #define CDS_CTRL           P1_5
  78      =1  extern BYTE     SelectModeType;
  79      =1  extern BYTE InputSelection;
  80      =1  extern BYTE SEQTime;
  81      =1  extern BYTE     Priority;
  82      =1  extern BYTE AutoDayNight;
  83      =1  extern BYTE PowerFlag;
  84      =1  
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 17  

  85      =1  BYTE keyIn(void);
  86      =1  void TimerForRemocon(void);
  87      =1  void TimerForTick(void);
  88      =1  void DisableRemoconInt(void);
  89      =1  BYTE SetSupport_remocon(BYTE newd);
  90      =1  
  91      =1  void delay(BYTE cnt);
  92      =1  
  93      =1  BYTE RS_ready(void);
  94      =1  BYTE RS_rx(void);
  95      =1  void RS_tx(BYTE tx_buf);
  96      =1  
  97      =1  BYTE RS2_rx(void);
  98      =1  void RS2_tx(BYTE tx_buf);
  99      =1  
 100      =1  void NewLine(void);
 101      =1  void PutsP(PDATA_P BYTE *ptr);
 102      =1  #ifdef Hs_debug
           =1 void MonWriteI2C(BYTE addr, BYTE index, BYTE val);
           =1 BYTE MonReadI2C(BYTE addr, BYTE index);
           =1 #endif
 106      =1  BYTE Asc1Bin(BYTE asc);
 107      =1  BYTE Asc2Bin(PDATA_P BYTE *s);
 108      =1  
 109      =1  void I2CDeviceInitialize( CODE_P BYTE *RegSet);
 110      =1  
 111      =1  //void RestartSystemClock(WORD clock_hm);
 112      =1  WORD GetTime_ms(void);
 113      =1  BYTE GetTime_H(void);
 114      =1  BYTE GetTime_M(void);
 115      =1  void ChangeTime_H( char add );
 116      =1  void ChangeTime_M( char add );
 117      =1  //WORD GetWakeupTime(void);
 118      =1  //void SetWakeupTime(WORD wtime);
 119      =1  
 120      =1  
 121      =1  //WORD GetOffTime(void);
 122      =1  //void SetOffTime(WORD wtime);
 123      =1  //BYTE GetSleepTimer(void);
 124      =1  //void SetSleepTimer(BYTE stime);
 125      =1  WORD DiffTime_ms( WORD stime, WORD etime );
 126      =1  //void SetLastBlockedTime(void);
 127      =1  void SetLastCCTime(void);                               //ljy010904...CC_FIX_CLEAR_ON_TIME
 128      =1  
 129      =1  void SetOSDLastKeyInTime(void);
 130      =1  WORD GetOSDLastKeyInTime(void);
 131      =1  WORD GetIVF(void);
 132      =1  DWORD GetIHF(void);
 133      =1  BYTE ReadVInputSTD(void);
 134      =1  void SetVInputStd(BYTE newd);
 135      =1  BYTE GetVInputStd(void);
 136      =1  BYTE GetInputSelection(void);
 137      =1  #ifdef ADD_ANALOGPANEL
           =1 BYTE IsAnalogOn(void);
           =1 #endif
 140      =1  void InitVideoData(BYTE src);
 141      =1  void ChangeVInputStdDetectMode(BYTE val);
 142      =1  BYTE GetVInputStdInx(void);
 143      =1  
 144      =1  void MonWriteI2Cn_(BYTE addr, BYTE *val, BYTE cnt) ;
 145      =1  
 146      =1  ///void Usage(void);
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 18  

 147      =1  #ifdef Hs_debug
           =1         void Prompt(void);
           =1 #endif
 150      =1  void DebugKeyIn(BYTE ikey);
 151      =1  void DVIPowerDown(bit flag);
 152      =1  void PowerDown_XTAL(bit flag);
 153      =1  
 154      =1  void ChangeInput(BYTE newsel);
 155      =1  
 156      =1  
 157      =1  void WaitPowerOn(void);
 158      =1  void PowerOff(void);
 159      =1  BYTE GetNextInputSelection(void);
 160      =1  
 161      =1  BYTE WantToStopTVScan(void);
 162      =1  
 163      =1  //BYTE IsTW8801(void);
 164      =1  //BYTE IsTW8803(void);
 165      =1  //BYTE ConvertVideoVSAT(BYTE reg);
 166      =1  
 167      =1  BYTE IsNoInput(void);
 168      =1  void LoadEEPROM (void);
 169      =1  void Hs_InitVars(void);
 170      =1  void AdjustAutoDayNight(BYTE val);
 171      =1  void ACCPowerControl(void);
 172      =1  struct RegisterInfo
 173      =1  {
 174      =1     int  Min;
 175      =1     int  Max;
 176      =1     int  Default;
 177      =1  };
 178      =1  struct LongRegisterInfo
 179      =1  {
 180      =1     WORD Min;
 181      =1     WORD Max;
 182      =1     WORD Default;
 183      =1  };
 184      =1  
 185      =1  #endif  // __MAIN__
  10          #include "I2C.h"
   1      =1  #ifndef __I2C_H__
   2      =1  #define __I2C_H__
   3      =1  
   4      =1  
   5      =1  void I2CReadByte3(BYTE *);
   6      =1  void I2CRead8Byte(BYTE *);
   7      =1  #if 0
           =1 void I2CReadByteMSP(BYTE addr, BYTE index, BYTE *pd, BYTE cnt);
           =1 #endif
  10      =1  BYTE I2CWriteByte2(BYTE);
  11      =1  BYTE I2CWriteByte3(BYTE*);
  12      =1  BYTE I2CWrite8Byte(BYTE *);
  13      =1  
  14      =1  void I2CStart(void);
  15      =1  void I2CWriteData(BYTE value);
  16      =1  BYTE I2CReadData(void);
  17      =1  #if 0
           =1 BYTE I2CReadDataWithACK(void);
           =1 #endif
  20      =1  void I2CStop(void);
  21      =1  void I2Cdelay(void);
  22      =1  
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 19  

  23      =1  
  24      =1  #define WriteTW88(a,b)          WriteI2C(TW88I2CAddress, a, b)
  25      =1  #define ReadTW88(a)                     ReadI2C(TW88I2CAddress, a)
  26      =1  
  27      =1  BYTE WriteTW88_Wait     (BYTE, BYTE);
  28      =1  void WriteADC           (BYTE, BYTE);
  29      =1  BYTE ReadADC            (BYTE);
  30      =1  BYTE ReadADC_TW88(BYTE index);
  31      =1  void WriteADC_TW88(BYTE index, BYTE dat);
  32      =1  
  33      =1  void WriteEEP           (WORD, BYTE);
  34      =1  BYTE ReadEEP            (WORD);
  35      =1  
  36      =1  
  37      =1  BYTE ReadI2C            (BYTE addr, BYTE index);
  38      =1  void WriteI2C           (BYTE addr, BYTE index, BYTE val);
  39      =1  
  40      =1  void WriteI2Cn_(BYTE addr, BYTE *val, BYTE cnt);
  41      =1  void WriteI2Cn (BYTE addr, BYTE index, BYTE *val, BYTE cnt);
  42      =1  void WriteI2CnD(BYTE addr, BYTE index, BYTE val, BYTE cnt);
  43      =1  
  44      =1  void ReadI2Cmn(BYTE addr, BYTE wcnt, BYTE rcnt, BYTE *rwdata);
  45      =1  
  46      =1  #define         WriteADC(a,b)   WriteADC_TW88(a,b)
  47      =1  #define         ReadADC(a)              ReadADC_TW88(a)
  48      =1  
  49      =1  #endif  /* __I2C_H__ */
  11          #include "TW88.h"
   1      =1  #ifndef __TW88__
   2      =1  #define __TW88__
   3      =1  
   4      =1  #include "main.h"
   1      =2  #ifndef __MAIN__
           =2 #define __MAIN__
           =2 
           =2 #define ON                                      1
           =2 #define OFF                                     0
           =2 //#define Hs_debug
           =2 //#define       DVR
           =2 
           =2 //================= DIP SW Definition =========================================
           =2 ///#define PIXEL_SINGLE         P0_0
           =2 #define DIP_PANEL_SWITCH        P0_0    // Samsung(0) // Sharp-Noticon(1)
           =2 #define DIP_AUTO_DETECT         P0_1
           =2 #define DIP_EDGE_ENHANCE        P0_2
           =2 #define DIP_BW_STRETCH          P0_3
           =2 
           =2 #define Panel_Enable()          P4=P4|0x08 //andy 980908
           =2 #define Panel_Disable()                 P4=P4&0xf7
           =2 
           =2 #define SetBacklight()      P4=P4|0x04
           =2 #define clrBacklight()      P4=P4&0xfb
           =2 
           =2 
           =2 //InputSelection
           =2 struct struct_IdName {
           =2         BYTE    Id;
           =2         BYTE    Name[16];
           =2 };
           =2 
           =2 #define CH_TW2835              1
           =2 #define CH_CAMD                2
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 20  

           =2 #define CH_AV                  3
           =2 #define PC                                         7
           =2 #define ChineseDefaultMenu   8
           =2 
           =2 #define SVIDEO                          2
           =2 #define COMPONENT                       3
           =2 //#define ANALOGDTV                     4
           =2 #define DTV                                     4
           =2 #define TV                                      5
           =2 #define SCART                           6
           =2 
           =2 #define DIGITALVGA                      8
           =2 
           =2 #define AIRTV                           0 //9
           =2 #define CABLETV                         1 //0xa
           =2 
           =2 
           =2 #define TVTUNER                         0xd             //10
           =2 #define MUTE                            1       
           =2 #define MENU                            2       
           =2 #define TVVOL                           4       
           =2 #define CC                                      8       
           =2 #define INPUTINFO                       0x10
           =2 #define PCINFO                          0x20
           =2 #define GAUGEINFO           0x40
           =2 //#define RATINGINFO                    0x40
           =2 #define TVCHN                           0x80
           =2 //#define MUTE                          0x40
           =2 
           =2 #define YPBPR_480i                      0
           =2 #define YPBPR_576i                      1
           =2 #define YPBPR_480p                      2
           =2 #define YPBPR_576p                      3
           =2 #define YPBPR_1080i                     4
           =2 #define YPBPR_720p                      5
           =2 #define YPBPR_720p50            6
           =2 
           =2 
           =2 //--------------------------- P0 Define -----------------------------
           =2 #define SEL_MIX                 P0_6    // 
           =2 //--------------------------- P1 Define -----------------------------
           =2 #define SEL_DVI                 P3_5    //LJY062001             
           =2 
           =2 #define TW88HWReset                     P3_4    //LJY001010 //LJY000721
           =2 #define PowerUp             P1_4
           =2 //======================= CDS Control ================================= 
           =2 #define CDS_CTRL           P1_5
           =2 extern BYTE     SelectModeType;
           =2 extern BYTE InputSelection;
           =2 extern BYTE SEQTime;
           =2 extern BYTE     Priority;
           =2 extern BYTE AutoDayNight;
           =2 extern BYTE PowerFlag;
           =2 
           =2 BYTE keyIn(void);
           =2 void TimerForRemocon(void);
           =2 void TimerForTick(void);
           =2 void DisableRemoconInt(void);
           =2 BYTE SetSupport_remocon(BYTE newd);
           =2 
           =2 void delay(BYTE cnt);
           =2 
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 21  

           =2 BYTE RS_ready(void);
           =2 BYTE RS_rx(void);
           =2 void RS_tx(BYTE tx_buf);
           =2 
           =2 BYTE RS2_rx(void);
           =2 void RS2_tx(BYTE tx_buf);
           =2 
           =2 void NewLine(void);
           =2 void PutsP(PDATA_P BYTE *ptr);
           =2 #ifdef Hs_debug
           =2 void MonWriteI2C(BYTE addr, BYTE index, BYTE val);
           =2 BYTE MonReadI2C(BYTE addr, BYTE index);
           =2 #endif
           =2 BYTE Asc1Bin(BYTE asc);
           =2 BYTE Asc2Bin(PDATA_P BYTE *s);
           =2 
           =2 void I2CDeviceInitialize( CODE_P BYTE *RegSet);
           =2 
           =2 //void RestartSystemClock(WORD clock_hm);
           =2 WORD GetTime_ms(void);
           =2 BYTE GetTime_H(void);
           =2 BYTE GetTime_M(void);
           =2 void ChangeTime_H( char add );
           =2 void ChangeTime_M( char add );
           =2 //WORD GetWakeupTime(void);
           =2 //void SetWakeupTime(WORD wtime);
           =2 
           =2 
           =2 //WORD GetOffTime(void);
           =2 //void SetOffTime(WORD wtime);
           =2 //BYTE GetSleepTimer(void);
           =2 //void SetSleepTimer(BYTE stime);
           =2 WORD DiffTime_ms( WORD stime, WORD etime );
           =2 //void SetLastBlockedTime(void);
           =2 void SetLastCCTime(void);                               //ljy010904...CC_FIX_CLEAR_ON_TIME
           =2 
           =2 void SetOSDLastKeyInTime(void);
           =2 WORD GetOSDLastKeyInTime(void);
           =2 WORD GetIVF(void);
           =2 DWORD GetIHF(void);
           =2 BYTE ReadVInputSTD(void);
           =2 void SetVInputStd(BYTE newd);
           =2 BYTE GetVInputStd(void);
           =2 BYTE GetInputSelection(void);
           =2 #ifdef ADD_ANALOGPANEL
           =2 BYTE IsAnalogOn(void);
           =2 #endif
           =2 void InitVideoData(BYTE src);
           =2 void ChangeVInputStdDetectMode(BYTE val);
           =2 BYTE GetVInputStdInx(void);
           =2 
           =2 void MonWriteI2Cn_(BYTE addr, BYTE *val, BYTE cnt) ;
           =2 
           =2 ///void Usage(void);
           =2 #ifdef Hs_debug
           =2         void Prompt(void);
           =2 #endif
           =2 void DebugKeyIn(BYTE ikey);
           =2 void DVIPowerDown(bit flag);
           =2 void PowerDown_XTAL(bit flag);
           =2 
           =2 void ChangeInput(BYTE newsel);
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 22  

           =2 
           =2 
           =2 void WaitPowerOn(void);
           =2 void PowerOff(void);
           =2 BYTE GetNextInputSelection(void);
           =2 
           =2 BYTE WantToStopTVScan(void);
           =2 
           =2 //BYTE IsTW8801(void);
           =2 //BYTE IsTW8803(void);
           =2 //BYTE ConvertVideoVSAT(BYTE reg);
           =2 
           =2 BYTE IsNoInput(void);
           =2 void LoadEEPROM (void);
           =2 void Hs_InitVars(void);
           =2 void AdjustAutoDayNight(BYTE val);
           =2 void ACCPowerControl(void);
           =2 struct RegisterInfo
           =2 {
           =2    int  Min;
           =2    int  Max;
           =2    int  Default;
           =2 };
           =2 struct LongRegisterInfo
           =2 {
           =2    WORD Min;
           =2    WORD Max;
           =2    WORD Default;
           =2 };
           =2 
           =2 #endif  // __MAIN__
   5      =1  
   6      =1  //Value for register 0x44
   7      =1  //#define DECODER_YCbCr         0x08            //xxxx bbxx
   8      =1  //#define RGB_RGB                               0x0C
   9      =1  
  10      =1  #define TW88_FPLL0                      0xf9
  11      =1  #define TW88_FPLL1                      0xfa
  12      =1  #define TW88_FPLL2                      0xfb
  13      =1  #define TW88_FSS                        0xfc
  14      =1  #define TW88_FSS_PD                     0xfd
  15      =1  #define TW88_PLL_DIV            0xfe
  16      =1  
  17      =1  //#define TW88_XSCALE                   0x5d
  18      =1  //#define TW88_YSCALE                   0x5e
  19      =1  
  20      =1  #define TW88_XUSCALELO          0x60
  21      =1  #define TW88_XDSCALELO          0x61
  22      =1  #define TW88_YUSCALELO          0x62
  23      =1  #define TW88_XYSCALEHI          0x63
  24      =1  #define TW88_XUSCALEFINE        0x69
  25      =1  #define TW88_YUSCALEFINE        0x6a
  26      =1  
  27      =1  //Power Mgt
  28      =1  #define POWER_OFF                       0
  29      =1  #define POWER_STANDBY           1
  30      =1  #define POWER_SUSPEND           2
  31      =1  #define POWER_ON                        3
  32      =1  
  33      =1  //void TWChipsDetect(void);
  34      =1  void SetAutoDetectStd(void);
  35      =1  void ClearAutoDetectStd(BYTE);
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 23  

  36      =1  void I2CDeviceInitialize( CODE_P BYTE *RegSet);
  37      =1  
  38      =1  
  39      =1  //0x63.. Register Group
  40      =1  #define GROUP_YCbCr                     0x40
  41      =1  #define GROUP_RGB                       0
  42      =1  #define SelectPanelAttrRegGroup(A)                              WriteTW88(0x70, (ReadTW88(0x70) & 0xbf) | A)
  43      =1  
  44      =1  //#if defined TW8801 || defined TW8803
  45      =1  #define FB_MAIN         2
  46      =1  #define FB_NORMAL       1
  47      =1  #define FB_RGB          0
  48      =1  //void SetFBmode( BYTE mode );
  49      =1  //#endif // TW8801
  50      =1  
  51      =1  
  52      =1  //=============================================================================
  53      =1  //                                   LCD Functions   
  54      =1  //=============================================================================
  55      =1  BYTE GetLCDPowerState(void);
  56      =1  void SetLCDPowerState(BYTE dat);
  57      =1  
  58      =1  BYTE IsFreeRun(void);
  59      =1  void PanelFreeRun(BYTE on);
  60      =1  void PanelBlack(BYTE on);
  61      =1  
  62      =1  void PanelMute(BYTE on);
  63      =1  
  64      =1  void LCDPowerON(BYTE mute); 
  65      =1  void LCDPowerOFF(void);
  66      =1  #ifdef Hs_debug
           =1 void LCDPower(void);
           =1 #endif
  69      =1  void DPMSmodeOFF(void);
  70      =1  void DPMSmodeON(void);
  71      =1  //=============================================================================
  72      =1  //                              Get PC Parameter Functions   
  73      =1  //=============================================================================
  74      =1  void GetInitPanelAttribute1(void);
  75      =1  //void GetInitPanelAttribute2(void);
  76      =1  void DefaultPanelAttributeForVideo(void);
  77      =1  void SetPVR(WORD pvr);
  78      =1  void SetPHR(WORD phr);
  79      =1  WORD GetPVR(void);
  80      =1  WORD GetPHR(void);
  81      =1  WORD GetHPN(void);
  82      =1  WORD GetVPN(void);
  83      =1  
  84      =1  //WORD GetVactive(void);
  85      =1  
  86      =1  WORD GetHstart(void);
  87      =1  WORD GetHend(void);
  88      =1  WORD GetVstart(void);
  89      =1  WORD GetVend(void);
  90      =1  void TuneLineBuffer(BYTE field);
  91      =1  void TuneLineBuffer4Video(BYTE field);
  92      =1  
  93      =1  #if defined (SUPPORT_DTV)
           =1 void SetCoarstForDTV(BYTE en);
           =1 #endif
  96      =1  
  97      =1  WORD GetHactiveStart(void);
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 24  

  98      =1  WORD GetHactiveEnd(void);
  99      =1  WORD GetVactiveStart(void);
 100      =1  //WORD GetVactiveLen(void);
 101      =1  BYTE GetVBackPorch(void);
 102      =1  void SetVBackPorch(BYTE val);
 103      =1  WORD GetPHP(void);
 104      =1  void SetPHP(WORD php);
 105      =1  void SetPVP(WORD period);
 106      =1  WORD GetPVP(void);
 107      =1  //void SetPanelRelatedRegisters(void);
 108      =1  //BYTE ChangedHPN(void);
 109      =1  //WORD GetVSUD(void);
 110      =1  
 111      =1  void SetDefaultPLL(void);
 112      =1  //void SetDefaultFPHSperiod(void);
 113      =1  //BYTE CalcPHP(DWORD ppf, BYTE tol);
 114      =1  //void ChangeFPHSperiod4DecoderInput(WORD vsud, BYTE tol);
 115      =1  
 116      =1  //-------------------------------------------------------------------
 117      =1  //                  Set Active Region Functions
 118      =1  //-------------------------------------------------------------------
 119      =1  void SetHactiveStart(WORD hstart);
 120      =1  void SetHactiveEnd(WORD hend);
 121      =1  void SetVactiveStart(WORD vstart);
 122      =1  //void SetVactiveLen(WORD van, WORD vstart);
 123      =1  void SetVactiveLen(WORD van);
 124      =1  //=============================================================================
 125      =1  //                         Set Measurement Window Functions   
 126      =1  //=============================================================================
 127      =1  void SetMeasureWindowH(WORD start, WORD stop);
 128      =1  void SetMeasureWindowV(WORD start, WORD stop);
 129      =1  //=============================================================================
 130      =1  //                              Video Input Functions   
 131      =1  //=============================================================================
 132      =1  BYTE IsVideoInput(void);
 133      =1  BYTE DetectDecoderInput(void);
 134      =1  //=============================================================================
 135      =1  //
 136      =1  //=============================================================================
 137      =1  void AutoPHPCalEnable(void);
 138      =1  void AutoPHPCalDisable(void);
 139      =1  
 140      =1  void MakeStartInt(void);
 141      =1  void AVGAInput(void);
 142      =1  void DVIInput(void);
 143      =1  //void DVGAInput(void);
 144      =1  void DisableDVGA(void);
 145      =1  
 146      =1  void COMPOSITE1Input(void);
 147      =1  void COMPOSITE2Input(void);
 148      =1  void COMPOSITE3Input(void);
 149      =1  
 150      =1  void SVIDEOInput(void);
 151      =1  void COMPONENTInput(void);
 152      =1  void ANALOGDTVInput(void);
 153      =1  void DTVInput(void);
 154      =1  void TVInput(void);
 155      =1  void SCARTInput(void);
 156      =1  
 157      =1  //=============================================================================
 158      =1  //                          Measurement Functions
 159      =1  //=============================================================================
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 25  

 160      =1  ///void SetPanelBitOrder(BYTE swap);
 161      =1  //void SetPanelSingleDouble(BYTE single);
 162      =1  
 163      =1  BYTE MeasureAndWait(BYTE flag);
 164      =1  
 165      =1  //WORD GetHCounter1(BYTE field);
 166      =1  //void SetHInitial(BYTE field, WORD counter);
 167      =1  //=============================================================================
 168      =1  //                          Invert Polarity Functions
 169      =1  //=============================================================================
 170      =1  void InvertHSYNCPolarity(void);
 171      =1  void InvertVSYNCPolarity(void);
 172      =1  //=============================================================================
 173      =1  //            Interrupt / SW Reset Control Functions
 174      =1  //=============================================================================
 175      =1  void SetInt(void);
 176      =1  //void ClearInt(void);
 177      =1  void SetEnDet(void);
 178      =1  void ClearEnDet(void);
 179      =1  void SWReset(void);
 180      =1  //void ClearSYNCLossStatus(void);
 181      =1  //void ClearSYNCChangeStatus(void);
 182      =1  //=============================================================================
 183      =1  //
 184      =1  //=============================================================================
 185      =1  BYTE IsBypassmode(void);
 186      =1  //BYTE IsInteraced(void);
 187      =1  void Clear_bypass(void);
 188      =1  void MaskOnSYNCInt(void);
 189      =1  void MaskOffSYNCInt(void);
 190      =1  //=============================================================================
 191      =1  //                                    ZoomControl
 192      =1  //=============================================================================
 193      =1  void BypassZoom(void);
 194      =1  
 195      =1  void XscaleU(DWORD scale);
 196      =1  void XscaleD(DWORD scale);
 197      =1  void XScale2(DWORD scale);
 198      =1  void YScale2(DWORD scale);
 199      =1  WORD GetYScale(void);
 200      =1  //=============================================================================
 201      =1  //
 202      =1  //=============================================================================
 203      =1  WORD GetHSYNCPulse(void);
 204      =1  WORD GetVSYNCPulse(void);
 205      =1  //#if defined TW8801 || defined TW8803
 206      =1  WORD GetRelativePosition(void);
 207      =1  //#endif
 208      =1  //=============================================================================
 209      =1  //                                                              MISC2 for decoder
 210      =1  //=============================================================================
 211      =1  #define BLUE_DECODER            2
 212      =1  #define BLACK_DECODER           0
 213      =1  
 214      =1  BYTE ForceDecoderOutput(BYTE color);
 215      =1  BYTE ClearForcedDecoderOutput(void);
 216      =1  //=============================================================================
 217      =1  //                                                              CC and EDS
 218      =1  //=============================================================================
 219      =1  BYTE GetCCStatus(void);
 220      =1  void DisableCC(void);
 221      =1  void EnableCC(void);
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 26  

 222      =1  BYTE GetCCData(void);
 223      =1  BYTE IsCCEnabled(void);
 224      =1  void EnableEDS(void);
 225      =1  void DisableEDS(void);
 226      =1  void RecoverCCOverflow(void);
 227      =1  
 228      =1  #define CCFIFOHalfFull()                        (ReadDecoder(CSTATUS) & 0x04)
 229      =1  //=============================================================================
 230      =1  //                                                              Internal PLL
 231      =1  //=============================================================================
 232      =1  BYTE GetPOST(void);
 233      =1  void SetPLLS(BYTE plls);
 234      =1  BYTE GetREFDM(void);
 235      =1  void SetREFDM(BYTE refdm);
 236      =1  DWORD GetFBDN(void);
 237      =1  void SetFBDN(WORD fbdn, BYTE vcsel);
 238      =1  DWORD GetPPF(void);
 239      =1  void ChangeInternPLL(DWORD _PPF);
 240      =1  
 241      =1  //=============================================================================
 242      =1  //                                                              Macros for attribute
 243      =1  //=============================================================================
 244      =1  //#define       GetOSDTransReg()                                                ReadTW88(0xAE)
 245      =1  //#define SetOSDTransReg(AlphaV)                                        WriteTW88(0xAE, (BYTE)AlphaV )
 246      =1  
 247      =1  #define GetPanelContrastReg(gccolor)                    ReadTW88(0x71+gccolor)
 248      =1  #define SetPanelContrastReg(sccolor, cval)              WriteTW88(0x71+sccolor,cval)
 249      =1  
 250      =1  #define GetPanelBrightnessReg(gbcolor)                  ReadTW88(0x74+gbcolor);
 251      =1  #define SetPanelBrightnessReg(sbcolor, bval)    WriteTW88(0x74+sbcolor,bval);
 252      =1  
 253      =1  #define SetDTVBrightnessReg(bval)                               WriteTW88(0x74,bval);
 254      =1  
 255      =1  #define GetPanelSaturationReg(gbcolor)                  ReadTW88(0x72+gbcolor);
 256      =1  #define SetPanelSaturationReg(sbcolor, bval)    WriteTW88(0x72+sbcolor,bval);
 257      =1  
 258      =1  #define SetPanelSharpnessReg(bval)                              WriteTW88(0x78,((bval&0x07)|0x38) );
 259      =1  
 260      =1  #define SetPanelHueReg(bval)                                    WriteTW88(0x70, (ReadTW88(0x70) & 0xc0 | (bval)) );
 261      =1  
 262      =1  #define GetVideoContrastReg()                                   ReadDecoder(CONTRAST)
 263      =1  #define SetVideoContrastReg(vcval)                              WriteDecoder(CONTRAST, vcval)
 264      =1  
 265      =1  #define GetVideoBrightnessReg()                                 ReadDecoder(BRIGHT)
 266      =1  #define SetVideoBrightnessReg(vbval)                    WriteDecoder(BRIGHT, vbval )
 267      =1  
 268      =1  #define GetVideoSaturationReg(gvstype)                  ReadDecoder(SAT_U+gvstype)
 269      =1  #define SetVideoSaturationReg(svstype, vsval)   WriteDecoder(SAT_U+svstype,     vsval)
 270      =1  
 271      =1  #define GetVideoHueReg()                                                ReadDecoder(HUE)
 272      =1  #define SetVideoHueReg(vhval)                                   WriteDecoder(HUE,       vhval )
 273      =1  
 274      =1  #define GetVideoSharpnessRegDef                                 (ReadDecoder(SHARPNESS) & 0x0f) 
 275      =1  
 276      =1  #define GetVideoSharpnessReg()                                  GetVideoSharpnessRegDef
 277      =1  //#define       SetVideoSharpnessReg(vshval)                    WriteDecoder(SHARPNESS, vshval )
 278      =1  #define SetVideoSharpnessReg(vshval)                    WriteDecoder(SHARPNESS, ((ReadDecoder(SHARPNESS) & 0xf0) | (vshval 
             -& 0x0f) ) );
 279      =1  
 280      =1  #ifdef TW9908
           =1 #define SetVideoVPeakingReg(vshval)
           =1 #else
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 27  

 283      =1  #define SetVideoVPeakingReg(vshval)                             WriteDecoder(V_PEAKING, ((ReadDecoder(V_PEAKING) & 0xf8) | (vshval 
             -& 0x07) ) );
 284      =1  #endif
 285      =1  
 286      =1  #define SetVideoHfilterReg(val)                                 WriteDecoder(HFILTER, ((ReadDecoder(HFILTER) & 0xf8) | (val & 0x07) )|
             -0x08 );
 287      =1  //----------------------------------------------------------------------------------
 288      =1  //color type
 289      =1  #define RED             0
 290      =1  #define GREEN   1
 291      =1  #define BLUE    2
 292      =1  #define WHITE   3
 293      =1  //saturation type
 294      =1  #define U_SAT   0
 295      =1  #define V_SAT   1
 296      =1  
 297      =1  //Alpha Blending Level
 298      =1  #define _0              0
 299      =1  #define _25             0x12
 300      =1  #define _37_5   0x13
 301      =1  #define _50             0x14
 302      =1  #define _100    0x18
 303      =1  
 304      =1  
 305      =1  /*
 306      =1  BYTE Mapping( int fromValue, struct RegisterInfo fromRange,
 307      =1                                   int * toValue, struct RegisterInfo toRange );
 308      =1  */
 309      =1  BYTE Mapping1( int fromValue, CODE_P struct RegisterInfo *fromRange,
 310      =1                                   int * toValue, CODE_P struct RegisterInfo *toRange );
 311      =1  #ifdef KEILC
 312      =1  #define Mapping2( A, B, C, D )                  Mapping1( A, B, C, D )
 313      =1  #define Mapping3( A, B, C, D )                  Mapping1( A, B, C, D )
 314      =1  #else
           =1 BYTE Mapping2( int fromValue, IDATA_P struct RegisterInfo *fromRange,
           =1                                  int * toValue, CODE_P struct RegisterInfo *toRange );
           =1 BYTE Mapping3( int fromValue, CODE_P struct RegisterInfo *fromRange,
           =1                                  int * toValue, IDATA_P struct RegisterInfo *toRange );
           =1 #endif
 320      =1  
 321      =1  BYTE GetAttributesFromNTSCSettings(BYTE index);
 322      =1  
 323      =1  #endif  // __TW88__
 324      =1  
  12          #include "Printf.h"
   1      =1  #ifndef __PRINTF__
   2      =1  #define __PRINTF__
   3      =1  
   4      =1  #define _outchar(c) while(1) { if( !RS_Xbusy ) { SBUF = c; RS_Xbusy=1; break; } }
   5      =1  #define Putch(c) _outchar(c)
   6      =1  
   7      =1  #ifdef SERIAL
   8      =1  
   9      =1   void Printf ( const char CODE_P *fmt, ... );
  10      =1   void Puts ( CODE_P char *ptr );
  11      =1  
  12      =1  #define TW2835Cmd(a)   Puts ( a )
  13      =1  
  14      =1  #else
           =1 
           =1  #undef  DEBUG
           =1  #define Printf(a,b)    //
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 28  

           =1  #define Puts(a)                //
           =1 
           =1 #endif
  21      =1  
  22      =1  
  23      =1  #ifndef DEBUG
  24      =1  
  25      =1   #define dPuts(a)               //
  26      =1   #define wPuts(a)               //
  27      =1   #define ePuts(a)               //
  28      =1  
  29      =1  #else
           =1 
           =1  void dPrintf( const char CODE_P *fmt, ... );
           =1  void wPrintf( const char CODE_P *fmt, ... );
           =1  void ePrintf( const char CODE_P *fmt, ... );
           =1 
           =1  void dPuts( CODE_P char *ptr );
           =1  void wPuts( CODE_P char *ptr );
           =1  void ePuts( CODE_P char *ptr );
           =1 
           =1 #endif  // DEBUG
  40      =1  
  41      =1  BYTE Getch(void);
  42      =1  BYTE Getche(void);
  43      =1  
  44      =1  
  45      =1  #endif  //__PRINTF__
  13          #include "KeyRemo.h"
   1      =1  //
   2      =1  // KeyRemo.h
   3      =1  // Default function for Key Input and Remocon Input
   4      =1  //
   5      =1  //=============================================================================
   6      =1  //                                  Operation Key Mapping
   7      =1  //=============================================================================
   8      =1  
   9      =1  
  10      =1  
  11      =1  
  12      =1  #define ResetKey()              { P2 = 0xff;}
  13      =1  //#define ReadKey()             (~P1 & 0xfc);
  14      =1  
  15      =1  #define POWERKEY                0x04 //andy AWT 980907
  16      =1  #define MENUKEY                 0x08
  17      =1  #define INPUTSOURCEKEY  0x10
  18      =1  #define UPKEY               0x20
  19      =1  #define DOWNKEY             0x40
  20      =1  #define SELECTKEY           0x80
  21      =1  #define VersionKEY          0x90
  22      =1  
  23      =1  #define REMO_CUSTOM             0
  24      =1  
  25      =1  #define REMO_NUM0               0
  26      =1  #define REMO_NUM1               1
  27      =1  #define REMO_NUM2               2
  28      =1  #define REMO_NUM3               3
  29      =1  #define REMO_NUM4               4
  30      =1  #define REMO_NUM5               5
  31      =1  #define REMO_NUM6               6
  32      =1  #define REMO_NUM7               7
  33      =1  #define REMO_NUM8               8
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 29  

  34      =1  #define REMO_NUM9               9
  35      =1  
  36      =1  #define REMO_STANDBY    12
  37      =1  #define REMO_CHNUP              32
  38      =1  #define REMO_CHNDN              33
  39      =1  #define REMO_VOLUP              16
  40      =1  #define REMO_VOLDN              17
  41      =1  #define REMO_SELECT             21
  42      =1  #define REMO_MENU               63
  43      =1  #define REMO_MUTE               13
  44      =1  #define REMO_INPUT              56
  45      =1  
  46      =1  #define REMO_AUTO               10
  47      =1  #define REMO_INFO               58
  48      =1  #define REMO_AUDIO              38
  49      =1  #define REMO_ASPECT             62
  50      =1  #define REMO_CC                 15
  51      =1  #define REMO_EXIT               0x16
  52      =1  
  53      =1  #define REMO_TTXRED                     0x37
  54      =1  #define REMO_TTXGREEN           0x36
  55      =1  #define REMO_TTXYELLOW          0x32
  56      =1  #define REMO_TTXCYAN            0x34
  57      =1  
  58      =1  
  59      =1  
  60      =1  //=============================================================================
  61      =1  //                                 RC5 type
  62      =1  //=============================================================================
  63      =1  #ifdef REMO_RC5
           =1 
           =1 #ifdef TECHWELL_REMOCON
           =1 #define REMO_CUSTOM             0
           =1 
           =1 #define REMO_NUM0               0
           =1 #define REMO_NUM1               1
           =1 #define REMO_NUM2               2
           =1 #define REMO_NUM3               3
           =1 #define REMO_NUM4               4
           =1 #define REMO_NUM5               5
           =1 #define REMO_NUM6               6
           =1 #define REMO_NUM7               7
           =1 #define REMO_NUM8               8
           =1 #define REMO_NUM9               9
           =1 
           =1 #define REMO_STANDBY    12
           =1 #define REMO_CHNUP              32
           =1 #define REMO_CHNDN              33
           =1 #define REMO_VOLUP              16
           =1 #define REMO_VOLDN              17
           =1 #define REMO_SELECT             21
           =1 #define REMO_MENU               63
           =1 //#define REMO_TV                       63
           =1 //#define REMO_VCR              60
           =1 //#define REMO_SVIDEO           56
           =1 #define REMO_MUTE               13
           =1 #define REMO_INPUT              56
           =1 
           =1 #define REMO_AUTO               10
           =1 #define REMO_INFO               58
           =1 #define REMO_AUDIO              38
           =1 #define REMO_ASPECT             62
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 30  

           =1 #define REMO_CC                 15
           =1 #define REMO_EXIT               0x16
           =1 
           =1 #define REMO_TTXRED                     0x37
           =1 #define REMO_TTXGREEN           0x36
           =1 #define REMO_TTXYELLOW          0x32
           =1 #define REMO_TTXCYAN            0x34
           =1 
           =1 #ifdef SUPPORT_DEBUG
           =1 #define REMO_DEBUG              0x2b
           =1 #define REMO_READ               0x29
           =1 #define REMO_WRITE              0x2a
           =1 #define REMO_RESERVED   0x30
           =1 #endif
           =1 
           =1 #else 
           =1 #define REMO_CUSTOM             0
           =1 
           =1 #define REMO_NUM0               0
           =1 #define REMO_NUM1               1
           =1 #define REMO_NUM2               2
           =1 #define REMO_NUM3               3
           =1 #define REMO_NUM4               4
           =1 #define REMO_NUM5               5
           =1 #define REMO_NUM6               6
           =1 #define REMO_NUM7               7
           =1 #define REMO_NUM8               8
           =1 #define REMO_NUM9               9
           =1 
           =1 #define REMO_STANDBY    12
           =1 #define REMO_CHNUP              32
           =1 #define REMO_CHNDN              33
           =1 #define REMO_VOLUP              16
           =1 #define REMO_VOLDN              17
           =1 #define REMO_SELECT             18
           =1 #define REMO_MENU               48
           =1 #define REMO_TV                 63
           =1 #define REMO_VCR                60
           =1 #define REMO_SVIDEO             56
           =1 #define REMO_MUTE               13
           =1 #define REMO_INPUT              0xff
           =1 
           =1 #define REMO_INFO               0x0a //??
           =1 #endif
           =1 
           =1 //=============================================================================
           =1 //                                 NEC type
           =1 //=============================================================================
           =1 #elif defined REMO_NEC
           =1 /*
           =1 // Techwell Origin
           =1 #define REMO_CUSTOM1    0x20
           =1 #define REMO_CUSTOM2    0xdf
           =1 
           =1 
           =1 #define REMO_NUM0               0x08
           =1 #define REMO_NUM1               0x88
           =1 #define REMO_NUM2               0x48
           =1 #define REMO_NUM3               0xc8
           =1 #define REMO_NUM4               0x28
           =1 #define REMO_NUM5               0xa8
           =1 #define REMO_NUM6               0x68
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 31  

           =1 #define REMO_NUM7               0xe8
           =1 #define REMO_NUM8               0x18
           =1 #define REMO_NUM9               0x98
           =1 
           =1 #define REMO_STANDBY    0x10
           =1 #define REMO_CHNUP              0x00
           =1 #define REMO_CHNDN              0x80
           =1 #define REMO_VOLUP              0x40
           =1 #define REMO_VOLDN              0xc0
           =1 #define REMO_SELECT             0x70
           =1 #define REMO_MENU               0x9c
           =1 #define REMO_MUTE               0x90
           =1 #define REMO_INPUT              0xd0
           =1 */
           =1 
           =1 // Techwell New Remocon after 4/7/2005
           =1 #ifdef PHILIPS_REMOCON
           =1 #define REMO_CUSTOM1    0x02
           =1 #define REMO_CUSTOM2    0xfd
           =1 
           =1 #define REMO_NUM0               0x00
           =1 #define REMO_NUM1               0x80
           =1 #define REMO_NUM2               0x40
           =1 #define REMO_NUM3               0xc0
           =1 #define REMO_NUM4               0x20
           =1 #define REMO_NUM5               0xa0
           =1 #define REMO_NUM6               0x60
           =1 #define REMO_NUM7               0xe0
           =1 #define REMO_NUM8               0x10
           =1 #define REMO_NUM9               0x90
           =1 
           =1 #define REMO_STANDBY    0x48
           =1 #define REMO_CHNUP              0xd8
           =1 #define REMO_CHNDN              0xf8
           =1 #define REMO_VOLUP              0x58
           =1 #define REMO_VOLDN              0x78
           =1 #define REMO_SELECT             0xe8
           =1 #define REMO_MENU               0x01
           =1 #define REMO_MUTE               0x08
           =1 #define REMO_INPUT              0xf0
           =1 
           =1 #define REMO_INFO               0x38
           =1 
           =1 
           =1 
           =1 #define REMO_TTXRED                     0x4E
           =1 #define REMO_TTXGREEN           0x8E
           =1 #define REMO_TTXYELLOW          0xC6
           =1 #define REMO_TTXCYAN            0x86
           =1 
           =1 #else
           =1 // RYU For Test
           =1 #define REMO_CUSTOM1            0x04
           =1 #define REMO_CUSTOM2            0xfb
           =1 
           =1 #define REMO_NUM0               0xf8
           =1 #define REMO_NUM1               0x48
           =1 #define REMO_NUM2               0xc8
           =1 #define REMO_NUM3               0x28
           =1 #define REMO_NUM4               0xa8
           =1 #define REMO_NUM5               0x18
           =1 #define REMO_NUM6               0x98
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 32  

           =1 #define REMO_NUM7               0x58
           =1 #define REMO_NUM8               0xd8
           =1 #define REMO_NUM9               0x78
           =1 
           =1 #define REMO_STANDBY    0x00
           =1 #define REMO_CHNUP              0x40    //
           =1 #define REMO_CHNDN              0x70    //
           =1 #define REMO_VOLUP              0x90    //
           =1 #define REMO_VOLDN              0xe0    //
           =1 #define REMO_SELECT             0x11//??
           =1 #define REMO_MENU               0x10
           =1 
           =1 #define REMO_MUTE               0x60
           =1 #define REMO_INPUT              0xc0
           =1 #define REMO_AUTO               0x30
           =1 #define REMO_AUTOSCAN   0x80
           =1 #define REMO_TV                 0x20
           =1 #define REMO_EXIT               0xa0
           =1 #define REMO_INFO               0x08
           =1 #define REMO_ASPECT             0x62
           =1 
           =1 #define REMO_TTXRED             0xb8
           =1 #define REMO_TTXGREEN   0x02
           =1 #define REMO_TTXYELLOW  0x82
           =1 #define REMO_TTXCYAN    0x42
           =1 
           =1 #ifdef SUPPORT_DEBUG
           =1 #define REMO_DEBUG              0xb8
           =1 #define REMO_READ               0x02
           =1 #define REMO_WRITE              0x82
           =1 #endif
           =1 
           =1 #endif //PHILIPS_REMOCON
           =1 
           =1 #endif // REMO_NEC
 255      =1  
 256      =1  
 257      =1  
 258      =1  BYTE ActionRemo(BYTE, BYTE);
 259      =1  BYTE CheckKeyIn(void);
 260      =1  BYTE GetKey(BYTE repeat);
 261      =1  BYTE IsRemoDataReady(BYTE *, BYTE *);
 262      =1  
 263      =1  
  14          #include "etc_eep.h"
   1      =1  #ifndef __ETC_EEP__
   2      =1  #define __ETC_EEP__
   3      =1  
   4      =1  
   5      =1  ////eeprom.h
   6      =1  
   7      =1  //=========================================================================
   8      =1  //      EEPROM structure
   9      =1  //      0x00    BYTE    4       'TW88'
  10      =1  #define EEP_FWREV_MAJOR                 0x04    //BYTE  1       F/W Rev.-major(Hex)     
  11      =1  #define EEP_FWREV_MINOR                 0x05    //BYTE  1       F/W Rev.-minor(Hex)
  12      =1  #define EEP_DEBUGLEVEL                  0x06    //BYTE  1       DebugLevel
  13      =1  //
  14      =1  #define EEP_AUTODETECT                  0x07    //BYTE  1       Flag for Input Auto Detect      -0:Auto, 1:NTSC,....
  15      =1  #define EEP_AUTODETECTTYTE              0x08    //BYTE  1       Type of Auto-detect(will be value of register 0x1d)
  16      =1  //                      ---------------------------------------------------------------
  17      =1  #define EEP_WIDEMODE                    0x09    //BYTE  1   Wide Mode
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 33  

  18      =1  
  19      =1  #define EEP_AUTORECOGNITION             0x0a    //BYTE  1       Auto Recognition
  20      =1  #define EEP_VIDEOMODE                   0x0b    //BYTE  1   Video Mode
  21      =1  
  22      =1  #define EEP_OSDLANG                             0x0c    //BYTE  1   OSDLang                                             // 0
  23      =1  
  24      =1  #define EEP_OSDPOSITIONMODE     0x0d    //BYTE  1       OSD Position Mode
  25      =1  #define EEP_CCD                                 0x0e    //BYTE  1       Closed Caption- 0: off, 1:on
  26      =1  
  27      =1  #define EEP_INPUTSELECTION              0x0f    //BYTE  1       InputSelection
  28      =1  
  29      =1  //
  30      =1  #define EEP_PC_CONTRAST                 0x10
  31      =1  #define EEP_PC_BRIGHT                   0x11
  32      =1  
  33      =1  #define EEP_CONTRAST                    0x12    //BYTE  1       Contrast 
  34      =1  #define EEP_BRIGHTNESS                  0x13    //BYTE  1       Brightness
  35      =1  #define EEP_SATURATION_U                0x14    //BYTE  1       Saturation :U
  36      =1  #define EEP_SATURATION_V                0x15    //BYTE  1       Saturation :V
  37      =1  #define EEP_SHARPNESS                   0x16    //BYTE  1       Sharpness 
  38      =1  #define EEP_HUE                                 0x17    //BYTE  1       Hue                    
  39      =1  
  40      =1  //====================================HS AWT 981001
  41      =1  #define  EEP_AutoMode           0xa0
  42      =1  #define  EEP_IMAGEMode          0xa1
  43      =1  #define  EEP_RearMode           0xa2
  44      =1  #define  EEP_COSDMode           0xa3
  45      =1  #define  EEP_GAUGEMode          0xa4
  46      =1  #define  EEP_CAMAMode           0xa5 
  47      =1  #define  EEP_CAMBMode           0xa6
  48      =1  #define  EEP_CAMCMode           0xa7
  49      =1  #define  EEP_CAMRMode           0xa8
  50      =1  #define  EEP_CAMOutMode         0xa9    
  51      =1  #define  EEP_TimeStep           0xaa
  52      =1  #define  EEP_Powerflag          0xab   
  53      =1  #define  EEP_ONOFFChoice        0xac 
  54      =1  
  55      =1  #define  EEP_PRIORITY           0xad
  56      =1  #define  EEP_JUMPMode           0xae
  57      =1  #define  EEP_NowModeState       0xaf
  58      =1  #define  EEP_SelectMode         0xb0
  59      =1  #define  EEP_PriorityOffSelectMode      0xb1
  60      =1  #define  EEP_AudioRecord                0xb2
  61      =1  
  62      =1  #define  EEP_FirstNumber                0xb3
  63      =1  #define  EEP_SecondNumber               0xb4
  64      =1  #define  EEP_ThridNumber                0xb5
  65      =1  #define  EEP_FourthNumber               0xb6
  66      =1  
  67      =1  #define  EEP_CAMNUMBER     0xb7
  68      =1  #define  EEP_PELCO                 0xb8
  69      =1  #define  EEP_Baud_rate     0xb9
  70      =1  #define  EEP_TriggerVGA    0xba
  71      =1  #define  EEP_DVRDisplay    0xbb
  72      =1  #define  EEP_IMAGE_A_Mode    0xbc//andy A1.4 20100113
  73      =1  #define  EEP_IMAGE_B_Mode    0xbd//andy A1.4 20100113
  74      =1  #define  EEP_IMAGE_C_Mode    0xbe//andy A1.4 20100113
  75      =1  
  76      =1  //#define  EEP_SelectModeBuf         0xb2
  77      =1  
  78      =1  #if 0
           =1 #define  EEP_Resolution                 0xc0
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 34  

           =1 #define  EEP_FPS                                0xc1
           =1 #define  EEP_Quality                    0xc2
           =1 #define  EEP_RecordMode                 0xc3
           =1 #define  EEP_RecordLength               0xc4
           =1 #define  EEP_PreAlarmLength             0xc5
           =1 #define  EEP_PostAlarmLength    0xc6
           =1 #endif
  87      =1  //====================================HS AWT 981001
  88      =1  
  89      =1  //
  90      =1  //              ---------------------------------------------------------------
  91      =1  #define EEP_PCAUDIOPVOL         0x37    //BYTE  1   AudioVol
  92      =1  #define EEP_AUDIOPVOL                   0x38    //BYTE  1   AudioVol
  93      =1  #define EEP_AUDIOBALANCE                0x39    //BYTE  1   AudioBalance
  94      =1  //
  95      =1  //              ---------------------------------------------------------------
  96      =1  
  97      =1  #define EEP_BLOCKMOVIE                  0x40    //BYTE  1       BlockedMovie:Blocked rating for Movie   
  98      =1  #define EEP_BLOCKTV                             0x41    //BYTE  1       BlockedTV:Blocked rating for TV                 
  99      =1  #define EEP_FVSLD                               0x42    //BYTE  6
 100      =1  //                                                              7    6       4    3    2    1    0
 101      =1  //  FVSLD Level                        ALL   FV(V)   S    L    D    
 102      =1  //  0x43    BYTE    1   TV-Y            X  
 103      =1  //  0x44        BYTE    1   TV-Y7           X    X 
 104      =1  //  0x45        BYTE    1   TV-G            X 
 105      =1  //  0x46        BYTE    1   TV-PG           X       X    X    X    X
 106      =1  //  0x47        BYTE    1   TV-14           X       X    X    X    X 
 107      =1  //  0x48        BYTE    1   TV-MA           X       X    X    X
 108      =1  //
 109      =1  #define EEP_VCHIPPASSWORD               0x49    //BYTE  4   OSDPassword                                 //Defualt:3366
 110      =1  //                      ---------------------------------------------------------------
 111      =1  //
 112      =1  //
 113      =1  //      0x61    WORD    2   PanelXRes
 114      =1  //      0x63    WORD    2       PanelYRes
 115      =1  //      0x65    BYTE    1       PanelHsyncMinPulseWidth
 116      =1  //      0x66    BYTE    1       PanelVsyncMinPulseWidth
 117      =1  //      0x67    WORD    2       PanelHminBackPorch
 118      =1  //      0x69    BYTE    1       PanelHsyncPolarity
 119      =1  //      0x6a    BYTE    1       PanelVsyncPolarity
 120      =1  //      0x6b    WORD    2       PanelDotClock
 121      =1  //      0x6d    BYTE    1       PanelPixsPerClock
 122      =1  //      0x6e    BYTE    1       PanelDEonly
 123      =1  //                      ---------------------------------------------------------------
 124      =1  //
 125      =1  //      0x80    PC Data
 126      =1  //
 127      =1  //                      ---------------------------------------------------------------
 128      =1  //
 129      =1  //      0x300   TV Data
 130      =1  //
 131      =1  //      --- NTSC_TV -------------------------------------------------------------
 132      =1  //      CNT_SAVEDAIR                    BYTE    1   Total count of saved Air TV Channel.
 133      =1  //      IDX_CURAIR                              BYTE    1   Index of Current Air TV Channel
 134      =1  //      CHN_CURAIR                              BYTE    1   Current Air TV Channel.
 135      =1  //
 136      =1  //      FIRSTSAVED_AIRCHN               BYTE    1       First saved Air TV channel no   (maximum 100)
 137      =1  //      ....
 138      =1  //
 139      =1  //      CNT_SAVEDCABLE                  BYTE    1   Total count of saved Cable TV Channel.
 140      =1  //      IDX_CURCABLE                    BYTE    1   Index of Current Cable TV Channel
 141      =1  //      CHN_CURCABLE                    BYTE    1   Current Cable TV Channel.
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 35  

 142      =1  //
 143      =1  //      FIRSTSAVED_CABLECHN             BYTE    1       First saved Cable TV channel no (maximum 100)
 144      =1  //
 145      =1  //      --- PAL_TV --------------------------------------------------------------
 146      =1  //      PR_CUR                                  BYTE    1   Current PR no.
 147      =1  //      FIRST_SAVEDPR                   DWORD   4   Freq of PR0.        (TOTAL_PR)
 148      =1  //      FIRST_SAVEDPR+4                 DWORD   4   Freq of PR1.
 149      =1  //      .....
 150      =1  //
 151      =1  
 152      =1  
 153      =1  
 154      =1  //
 155      =1  // Offset of EEPROM
 156      =1  //
 157      =1  /*
 158      =1  #define VIDEOCONTRAST           0x18            // for NTSC.(PAL:0x20,SECAM:0x28)
 159      =1  #define VIDEOBRIGHTNESS         0x19
 160      =1  #define VIDEOSATURATION_U       0x1a
 161      =1  #define VIDEOSATURATION_V       0x1b
 162      =1  #define VIDEOHUE                        0x1c            // only for NTSC
 163      =1  #define VIDEOSHARPNESS          0x1d
 164      =1  */
 165      =1  #define CCCOLOR         0x52
 166      =1  #define VOLZOOM         0x53
 167      =1  
 168      =1  #define PANELINFO       0x61
 169      =1  
 170      =1  // PAL_TV
 171      =1  #define  PR_CUR                                 0x301   
 172      =1  #define  FIRST_SAVEDPR                  0x308   
 173      =1   #define TVFREQ_HIGH 0 
 174      =1   #define TVFREQ_LOW  1
 175      =1  #ifdef PAL_TV
           =1  #define TVFINETUNE  2
           =1                 // NOT Finetune: 0 , Range: -32 ~ +32
           =1  #define TVPRSYSTEM  3  
           =1                 // bit 7: Add:1 Ereased :0
           =1                 // 
           =1  #define TVCHNAME    4
           =1 
           =1  #define BYTEPERCHANNEL 9 
           =1 #endif
 185      =1  // NTSC_TV
 186      =1  #define  EEP_TVInputSel                 0x302
 187      =1  #define  CHN_CURAIR                             0x303   
 188      =1  #define  FIRSTSAVED_AIRCHN              0x308   
 189      =1  #define  CHN_CURCABLE                   0x403   
 190      =1  #define  FIRSTSAVED_CABLECHN    0x408   
 191      =1  #ifdef NTSC_TV
           =1  #define TVFINETUNE  0
           =1                 // NOT Finetune: 0 , Range: -32 ~ +32
           =1  #define TVPRSYSTEM  1  
           =1                 // bit 7: Add:1 Ereased :0
           =1                 // 
           =1  #define BYTEPERCHANNEL 2
           =1 #endif
 199      =1  
 200      =1  
 201      =1  
 202      =1  
 203      =1  WORD GetFWRevEE(void);
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 36  

 204      =1  void SaveFWRevEE(WORD);
 205      =1  
 206      =1  BYTE GetDebugLevelEE(void);
 207      =1  void SaveDebugLevelEE(BYTE);
 208      =1  
 209      =1  #ifdef WIDE_SCREEN
 210      =1  BYTE GetWideModeEE(void);
 211      =1  void SaveWideModeEE(BYTE dl);
 212      =1  #endif
 213      =1  
 214      =1  
 215      =1  //BYTE GetRange4CoarseEE(void);
 216      =1  //void SaveRange4CoarseEE(BYTE);
 217      =1  
 218      =1  BYTE GetPossibleAutoDetectStdEE(void);
 219      =1  void SetPossibleAutoDetectStdEE(void);
 220      =1  
 221      =1  //BYTE GetOSDXPositionEE(void);
 222      =1  //BYTE GetOSDYPositionEE(void);
 223      =1  BYTE GetClosedCaptionFlagEE(void);
 224      =1  
 225      =1  BYTE GetVideoDatafromEE(BYTE);
 226      =1  void SaveVideoDatatoEE(BYTE offset, BYTE ndata);
 227      =1  
 228      =1  //BYTE GetVideoBrightnessEE(void);
 229      =1  //BYTE GetVideoSaturationEE(BYTE);
 230      =1  //BYTE GetVideoHueEE(void);
 231      =1  //BYTE GetVideoSharpnessEE(void);
 232      =1  
 233      =1  //void SaveVideoContrastEE(BYTE ndata);
 234      =1  //void SaveVideoBrightnessEE(BYTE ndata);
 235      =1  //void SaveVideoSaturationEE(BYTE, BYTE ndata);
 236      =1  //void SaveVideoHueEE(BYTE ndata);
 237      =1  //void SaveVideoSharpnessEE(BYTE ndata);
 238      =1  
 239      =1  BYTE GetOSDPositionModeEE(void);
 240      =1  void SaveOSDPositionModeEE(BYTE ndata);
 241      =1  //void SaveOSDXPositionEE(BYTE);
 242      =1  //void SaveOSDYPositionEE(BYTE);
 243      =1  
 244      =1  void SaveClosedCaptionFlagEE(BYTE);
 245      =1  
 246      =1  BYTE GetBlockedTVEE(void);                      
 247      =1  void SaveBlockedTVEE(BYTE vi);          
 248      =1  BYTE GetBlockedTV_FLDSLEE( BYTE level ) ;
 249      =1  void SaveBlockedTV_FLDSLEE(BYTE level, BYTE vi) ;
 250      =1  
 251      =1  BYTE GetBlockedMovieEE(void);           
 252      =1  void SaveBlockedMovieEE(BYTE vi);       
 253      =1  #if 0
           =1 BYTE GetInputSelectionEE(void);
           =1 #endif
 256      =1  void SaveInputSelectionEE(BYTE val);
 257      =1  
 258      =1  //BYTE GetOSDDurationEE(void);
 259      =1  //void SaveOSDDurationEE(BYTE val);
 260      =1  
 261      =1  BYTE GetOSDLangEE(void);
 262      =1  void SaveOSDLangEE(BYTE val);
 263      =1  
 264      =1  //ljy100303...BYTE GetOSDZoomEE(void);
 265      =1  //ljy100303...void SaveOSDZoomEE(BYTE val);
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 37  

 266      =1  
 267      =1  BYTE GetAudioVolEE(void);
 268      =1  void SetAudioVolEE( BYTE vol );
 269      =1  BYTE GetPCAudioVolEE(void);
 270      =1  void SetPCAudioVolEE( BYTE vol );
 271      =1  #if 0
           =1 BYTE GetAudioBalanceEE(void);
           =1 void SetAudioBalanceEE( BYTE vol );
           =1 BYTE GetAudioBassEE(void);
           =1 void SetAudioBassEE( BYTE vol );
           =1 BYTE GetAudioTrebleEE(void);
           =1 void SetAudioTrebleEE( BYTE vol );
           =1 #endif
 279      =1  //BYTE GetAudioEffectEE(void);
 280      =1  //void SetAudioEffectEE( BYTE vol );
 281      =1  
 282      =1  void ClearBasicEE(void);
 283      =1  
 284      =1  BYTE ValidPassword(DATA_P BYTE *numstr, BYTE index);
 285      =1  BYTE SetNewPassword(DATA_P BYTE *numstr, BYTE index);
 286      =1  
 287      =1  //WORD GetPanelXRes(void);
 288      =1  //WORD GetPanelYRes(void);
 289      =1  BYTE GetPanelHsyncMinPulseWidth(void);
 290      =1  BYTE GetPanelVsyncMinPulseWidth(void);
 291      =1  WORD GetPanelHMinBackPorch(void);
 292      =1  BYTE GetPanelHsyncPolarity(void);
 293      =1  BYTE GetPanelVsyncPolarity(void);
 294      =1  WORD GetPanelDotClock(void);
 295      =1  WORD GetPanelMaxClock(void);
 296      =1  BYTE GetPanelPixsPerClock(void);
 297      =1  // Not used yet *************************  BYTE GetPanelDEonly(void);
 298      =1  
 299      =1  void AddTVChannelEE( BYTE tvtype, BYTE chn);
 300      =1  BYTE GetTVChannelEE( BYTE tvtype, BYTE inx);
 301      =1  void ResetTVChannelEE( BYTE tvtype );
 302      =1  BYTE GetTVChannelCntEE(BYTE tvtype);
 303      =1  BYTE GetTVChnIdxEE(BYTE tvtype);
 304      =1  BYTE GetCurTVChannelEE(BYTE tvtype);
 305      =1  void SetTVChnIdxEE(BYTE tvtype, BYTE newd);
 306      =1  void SetCurTVChannelEE(BYTE tvtype, BYTE newd);
 307      =1  BYTE InsertTVChannelEE(BYTE tvtype, BYTE newd);
 308      =1  BYTE RemoveTVChannelEE(BYTE tvtype, BYTE newd);
 309      =1  
 310      =1  void SetTVPrEE(void);
 311      =1  BYTE GetTVPrEE(void);
 312      =1  void SetTVFreqEE(BYTE, WORD);
 313      =1  WORD GetTVFreqEE(BYTE);
 314      =1  void SetFineTuneEE(BYTE, BYTE);
 315      =1  BYTE GetFineTuneEE(BYTE);
 316      =1  BYTE GetTVPrSystem(BYTE);
 317      =1  void SetTVPrSystem(BYTE, BYTE);
 318      =1  BYTE GetTVInputSelEE(void);
 319      =1  void SetTVInputSelEE(BYTE);
 320      =1  
 321      =1  #define GetVInputStdDetectModeEE()                              ReadEEP(EEP_AUTODETECTTYTE)
 322      =1  #define SaveVInputStdDetectModeEE(A)                    WriteEEP(EEP_AUTODETECTTYTE, A)
 323      =1  
 324      =1  #define GetAutoRecogntionEE()                                   ReadEEP(EEP_AUTORECOGNITION)
 325      =1  #define SaveAutoRecogntionEE(A)                                 WriteEEP(EEP_AUTORECOGNITION, A)
 326      =1  
 327      =1  #define SetVideoModeEE( ctid )                                  WriteEEP( EEP_VIDEOMODE, ctid )
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 38  

 328      =1  #define GetVideoModeEE()                                                ReadEEP( EEP_VIDEOMODE )
 329      =1  
 330      =1  #define GetPanelContrastEE()                                    ReadEEP(0x10)
 331      =1  
 332      =1  #if defined( SUPPORT_PC ) || defined( SUPPORT_DTV )
 333      =1  //#define GetPanelHueEE()                                                       ReadEEP(0x28)
 334      =1  //#define GetPanelSharpnessEE()                                 ReadEEP(0x29)
 335      =1  #define GetPanelBrightnessEE()                                  ReadEEP(0x11)
 336      =1  //#define GetPanelSaturationEE()                                        ReadEEP(0x2a)
 337      =1  
 338      =1  //#define SavePanelHueEE(A)                                             WriteEEP(0x28, A)
 339      =1  //#define SavePanelSharpnessEE(A)                                       WriteEEP(0x29, A)
 340      =1  #define SavePanelContrastEE(A)                                  WriteEEP(0x10, A)
 341      =1  #define SavePanelBrightnessEE(A)                                WriteEEP(0x11, A)
 342      =1  //#define SavePanelSaturationEE(A)                              WriteEEP(0x2a, A)
 343      =1  #endif
 344      =1  
 345      =1  /*
 346      =1  #define GetDigitalVideoContrastEE()                             ReadEEP(0x2b)
 347      =1  #define GetDigitalVideoBrightnessEE()                   ReadEEP(0x2c)
 348      =1  #define GetDigitalVideoHueEE()                                  ReadEEP(0x2d)
 349      =1  #define GetDigitalVideoSaturationEE(off)                ReadEEP(0x2e+off)
 350      =1  
 351      =1  #define SaveDigitalVideoContrastEE(A)                   WriteEEP(0x2b, A)
 352      =1  #define SaveDigitalVideoBrightnessEE(A)                 WriteEEP(0x2c, A)
 353      =1  #define SaveDigitalVideoHueEE(A)                                WriteEEP(0x2d, A)
 354      =1  #define SaveDigitalVideoSaturationEE(off,A)             WriteEEP(0x2e+off, A)
 355      =1  */
 356      =1  
 357      =1  #endif  // __ETC_EEP__
  15          #include "pc_eep.h"
   1      =1  #ifndef __PC_EEP__
   2      =1  #define __PC_EEP__
   3      =1  
   4      =1  
   5      =1  // -----------------------------------------------------------------------------
   6      =1  #define PC_COLOR_DATA   0x80    // StartAddress of EEPROM for PC Color Temperature
   7      =1  #define PC_USERCOLOR    0x8A
   8      =1  #define SetPCColorTempModeEE( ctid )                    WriteEEP( PC_COLOR_DATA, ctid )
   9      =1  #define GetPCColorTempModeEE()                                  ReadEEP( PC_COLOR_DATA )
  10      =1  
  11      =1  #define GetPCUserColorTempEE( ucolorr)                  ReadEEP( PC_USERCOLOR+ucolorr )
  12      =1  #define SavePCUserColorTempEE( ucolorw, uval)   WriteEEP( PC_USERCOLOR+ucolorw, uval )
  13      =1  #define GetPCColorEE(index)                                             ReadEEP(index)
  14      =1  
  15      =1  // -----------------------------------------------------------------------------
  16      =1  #define EE_ADC_GO               0x90    // ADC Gain Offset for PC
  17      =1  #define EE_ADC_GO_DTV   0x98    // ADC Gain Offset for DTV
  18      =1  
  19      =1  #define EE_PCDATA               0xC0    // StartAddress of EEPROM for PCDATA
  20      =1  #define LEN_PCDATA              5               // Length of PCDATA
  21      =1  
  22      =1  WORD GetHPNfromEE(BYTE mode);
  23      =1  
  24      =1  BYTE CheckPcDataEEValid(BYTE, WORD);
  25      =1  
  26      =1  WORD GetVactiveStartEE(BYTE mode);
  27      =1  WORD GetHactiveStartEE(BYTE mode);
  28      =1  
  29      =1  void GetPCDataEE(BYTE mode);
  30      =1  void SavePCDataEE(BYTE mode);
  31      =1  void SaveDefaultPCDataEE(void);
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 39  

  32      =1  void SaveDefaultPCDataAllEE(void);
  33      =1  
  34      =1  void SaveHactiveEE(BYTE mode);
  35      =1  void SaveVactiveEE(BYTE mode);
  36      =1  void SaveVBackPorchEE(BYTE mode);
  37      =1  void SaveCoarseEE(BYTE mode);
  38      =1  void SavePhaseEE(BYTE mode);
  39      =1  /*
  40      =1  WORD GetHactiveStartEE(BYTE mode);
  41      =1  WORD GetVactiveStartEE(BYTE mode);
  42      =1  */
  43      =1  void DumpPCData(void);
  44      =1  
  45      =1  void SaveActiveVEE(WORD);
  46      =1  void SaveBackPorchEE(BYTE);
  47      =1  void SaveActiveHEE(WORD);
  48      =1  
  49      =1  void SaveADCGainOffsetEE(BYTE mod);
  50      =1  void GetADCGainOffsetEE(void);
  51      =1  
  52      =1  void SaveADCGainOffsetForDTVEE(BYTE mod);
  53      =1  void GetADCGainOffsetForDTVEE(void);
  54      =1  
  55      =1  #endif  // __PC_EEP__
  16          #include "Audio.h"
   1      =1  
   2      =1  
   3      =1  extern  BYTE    AudioVol;
   4      =1  extern  BYTE    PCAudioVol;
   5      =1  
   6      =1  //BYTE ResetMSP(void);
   7      =1  //void SetMSPSCARTPrescale(void);
   8      =1  //void SetMSPSourceSel(void);
   9      =1  //void SetMSPVol(void);
  10      =1  
  11      =1  //BYTE AudioAutoStdDetection(void);
  12      =1  //BYTE SteroMonoDetection(void);
  13      =1  
  14      =1  //BYTE TunerAudio(void);
  15      =1  //void ExtAudio(void);
  16      =1  //id PCAudio(void);
  17      =1  //id MuteOn(void);
  18      =1  //BYTE GetAudioVol(void);
  19      =1  BYTE ChangeVol(char);
  20      =1  //BYTE GetAudioBalance(void);
  21      =1  //BYTE ChangeBalance(char);
  22      =1  //BYTE GetAudioBass(void);
  23      =1  //BYTE ChangeBass(char);
  24      =1  //BYTE GetAudioTreble(void);
  25      =1  //BYTE ChangeTreble(char);
  26      =1  //BYTE GetAudioEffect(void);
  27      =1  //BYTE ChangeAudioEffect(char amount);
  28      =1  //void ToggleAudioMute(void);
  29      =1  //void CheckAndClearMuteOn(void);
  30      =1  
  31      =1  //BYTE IsAudioMuteOn(void);
  32      =1  //void SetAudioMute(BYTE on );
  33      =1  //void ChangeMTS(BYTE type);
  34      =1  //void AudioOff(void);
  35      =1  void AudioMute(bit mute);
  36      =1  
  37      =1  //#define AudioOn()                     SetMSPVol()
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 40  

  38      =1  //void ResetAudioValue();
  17          #include "Measure.h"
   1      =1  #ifndef __MEASURE__
   2      =1  #define __MEASURE__
   3      =1  
   4      =1  #define EE_DOS                          0
   5      =1  
   6      =1  #define EE_SP1                          1
   7      =1  #define EE_SP2                          2
   8      =1  #define EE_SP3                          3
   9      =1  
  10      =1  #define EE_VGA_60                       4
  11      =1  #define EE_VGA_66                       5
  12      =1  #define EE_VGA_70                       6
  13      =1  #define EE_VGA_72                       7
  14      =1  #define EE_VGA_75                       8
  15      =1  #define EE_VGA_85                       9
  16      =1  
  17      =1  #define EE_SVGA_56                      10
  18      =1  #define EE_SVGA_60                      11
  19      =1  #define EE_SVGA_70                      12
  20      =1  #define EE_SVGA_72                      13
  21      =1  #define EE_SVGA_75                      14
  22      =1  #define EE_SVGA_85                      15
  23      =1  
  24      =1  #define EE_832_75                       16
  25      =1  
  26      =1  #define EE_XGA_60                       17
  27      =1  #define EE_XGA_70                       18
  28      =1  #define EE_XGA_72                       19
  29      =1  #define EE_XGA_75                       20
  30      =1  #define EE_XGA_85                       21
  31      =1  
  32      =1  #define EE_1152_60                      22
  33      =1  #define EE_1152_70                      23
  34      =1  #define EE_1152_75                      24
  35      =1  
  36      =1  #define EE_SXGA_60                      25
  37      =1  #define EE_SXGA_70                      26
  38      =1  #define EE_SXGA_75                      27
  39      =1  
  40      =1  #define EE_RGB_480P                     28
  41      =1  #define EE_RGB_720P                     29
  42      =1  #define EE_RGB_720P50           30
  43      =1  #define EE_RGB_1080I            31
  44      =1  #define EE_RGB_1080I50A         32
  45      =1  #define EE_RGB_1080I50B         33
  46      =1  #define EE_RGB_480I                     34
  47      =1  #define EE_RGB_576I                     35
  48      =1  #define EE_RGB_576P                     36
  49      =1  
  50      =1  #define EE_YPbPr_480P           37
  51      =1  #define EE_YPbPr_720P           38
  52      =1  #define EE_YPbPr_720P50         39
  53      =1  #define EE_YPbPr_1080I          40
  54      =1  #define EE_YPbPr_1080I50A       41
  55      =1  #define EE_YPbPr_1080I50B       42
  56      =1  #define EE_YPbPr_480I           43
  57      =1  #define EE_YPbPr_576I           44
  58      =1  #define EE_YPbPr_576P           45
  59      =1  
  60      =1  #define EE_PC_MAX                       46
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 41  

  61      =1  
  62      =1  #define EE_PC_NO_SIGNAL         0xfe
  63      =1  #define EE_PC_UNKNOWN           0xff
  64      =1  
  65      =1  struct _PCMDATA {
  66      =1          CODE_P BYTE  Support;
  67      =1          CODE_P WORD  HAN;
  68      =1          CODE_P WORD  VAN;
  69      =1          CODE_P WORD  IVF;
  70      =1          CODE_P WORD  CLOCK;
  71      =1          CODE_P WORD  low;
  72      =1          CODE_P WORD  high;
  73      =1          CODE_P WORD  Hstart;
  74      =1          CODE_P WORD  Vstart;
  75      =1          CODE_P WORD  IPF;               // 0.1MHz
  76      =1          CODE_P WORD  PPF;               // 0.1MHz
  77      =1          CODE_P BYTE  VBack;
  78      =1  };
  79      =1  #ifndef AUTOCALC_PC
           =1 
           =1 #ifdef SUPPORT_DTV
           =1 struct _DTVMDATA {
           =1         CODE_P BYTE Reg62;
           =1         CODE_P BYTE RegBC;
           =1         CODE_P BYTE RegBD;
           =1         CODE_P BYTE RegBE;
           =1         CODE_P WORD PHP;
           =1 };
           =1 #endif
           =1 #endif
  91      =1  #if defined     XGA
           =1         #define MAX_PPF          90000000
           =1 #elif defined SXGA
           =1         #define MAX_PPF         135000000
           =1 #elif defined WXGA
           =1         #define MAX_PPF          90000000
           =1 #elif defined WVGA
  98      =1          #define MAX_PPF          90000000
  99      =1  #elif defined VGA
           =1         #define MAX_PPF          50000000
           =1 #elif defined SVGA
           =1         #define MAX_PPF          80000000
           =1 #elif defined QVGA
           =1         #define MAX_PPF          30000000
           =1 #elif defined WQVGA
           =1         #define MAX_PPF          30000000
           =1 #endif
 108      =1  
 109      =1  extern BYTE cLastSyncLoss;
 110      =1  extern BYTE PcMode;
 111      =1  
 112      =1  void CompLT170E2(void);
 113      =1  
 114      =1  WORD gap(WORD a, WORD b);
 115      =1  
 116      =1  //===================================================================
 117      =1  WORD GetHpnVpn(BYTE);
 118      =1  
 119      =1  WORD ConvertBasedOnInput(WORD dat);
 120      =1  
 121      =1  BYTE IsDTVInput(void);
 122      =1  
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 42  

 123      =1  void SetVValueForPanel(WORD vstart);
 124      =1  BYTE SetHValueForPanel(void);
 125      =1  BYTE GetActiveRegion(void);
 126      =1  
 127      =1  BYTE DetectAndSetForVGAInput(BYTE);
 128      =1  #ifdef SUPPORT_DTV
           =1 BYTE DetectAndSetForDTVInput(BYTE);
           =1 #endif
 131      =1  void CheckPCinput(void);
 132      =1  void CheckDTVinput(void);
 133      =1  
 134      =1  WORD GetCoarseValue(void);
 135      =1  BYTE GetPhaseValue(void);
 136      =1  WORD SetPCCoarseValue(BYTE val);
 137      =1  BYTE SetPhaseValue(BYTE val);
 138      =1  
 139      =1  void DisplayResultAndSetActiveRange(void);
 140      =1  
 141      =1  //=============================================================================
 142      =1  //                    PC Screen Position Move Functions
 143      =1  //=============================================================================
 144      =1  void MoveActiveVpos(BYTE val);          // Up/Down
 145      =1  void MoveActiveHpos(BYTE val);          // Left/Right
 146      =1  
 147      =1  BYTE GetVPosition(void);
 148      =1  BYTE SetVPosition(BYTE val);
 149      =1  BYTE GetHPosition(void);
 150      =1  BYTE SetHPosition(BYTE val);
 151      =1  
 152      =1  void ResetPCValue(void);
 153      =1  
 154      =1  CODE_P BYTE *GetPCInputSourceName(void);
 155      =1  BYTE AutoAdjust(void);
 156      =1  
 157      =1  #endif // __MEASURE__
  18          #include "OSDBasic.h"
   1      =1  //osd_basic.h
   2      =1  //LJY11012001
   3      =1  #ifndef __OSD_BASIC__
   4      =1  #define __OSD_BASIC__
   5      =1  
   6      =1  // osd_basic.h
   7      =1  // char code
   8      =1  //#include "apilib.h"
   9      =1  
  10      =1  //ljy052903
  11      =1  //definition for internal OSD
  12      =1  #define FONT_WIDTH_TW88                 12
  13      =1  #define FONT_HEIGHT_TW88                18
  14      =1  #define PIXS_PER_XSTEP_TW88             8
  15      =1  #define LINES_PER_YSTEP_TW88    4
  16      =1  #define MAX_OSDWINDOW_TW88              8
  17      =1  
  18      =1  // Using TW88 OSD for Menu
  19      =1  #define FONT_WIDTH                      12
  20      =1  #define FONT_HEIGHT                     18
  21      =1  #define PIXS_PER_XSTEP          8
  22      =1  #define LINES_PER_YSTEP         4
  23      =1  #define MAX_OSDWINDOW           4
  24      =1  
  25      =1  #define MAX_FONT_BYTES          27
  26      =1  #define RAMFONT         0xFE
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 43  

  27      =1  #define ROMFONT         0xFF
  28      =1  #define NO_UDFONT                       226 
  29      =1  
  30      =1  #define FONT_ROM        1
  31      =1  #define FONT_RAM        2
  32      =1  
  33      =1  
  34      =1  /////////////////////////////////
  35      =1  // Old Registers...
  36      =1  /*
  37      =1          #define TW88_WIN1ATTR           0x76
  38      =1          #define TW88_WIN1XSTART         0x77
  39      =1          #define TW88_WIN1YSTART         0x78
  40      =1          #define TW88_WIN1WIDTH          0x79
  41      =1          #define TW88_WIN1HEIGHT         0x7a
  42      =1          #define TW88_WIN1BRDATTR        0x7b
  43      =1          #define TW88_WIN1BRDWIDTH       0x7c
  44      =1          #define TW88_WIN1BRDHEIGHT      0x7d
  45      =1          #define TW88_WIN1XSPACE         0x7e            // between characters.
  46      =1          #define TW88_WIN1YSPACE         0x7f
  47      =1          #define TW88_WIN1SADDR          0x80            // starting address of OSD ram for Windows 1
  48      =1  */
  49      =1  /////////////////////////////////
  50      =1  
  51      =1  // OSD
  52      =1  #define TW88_ENABLERAM          0x94    // TW8804C
  53      =1  #define TW88_FONTRAMADDR        0x99    // TW8804C
  54      =1  #define TW88_FONTRAMDATA        0x9a    // TW8804C
  55      =1  #define TW88_OSDRAMADDRHI       0x95    // TW8804C
  56      =1  #define TW88_OSDRAMADDRLO       0x96    // TW8804C
  57      =1  #define TW88_OSDRAMDATAHI       0x97    // TW8804C
  58      =1  #define TW88_OSDRAMDATALO       0x98    // TW8804C
  59      =1  #define TW88_MULTISTART         0x9b    // TW8804C
  60      =1  #define TW88_OSDLOCKUPSEL       0x9c
  61      =1  #define TW88_WINNUM                     0x9e    // TW8804C
  62      =1  #define TW88_WINATTR            0x9f    //
  63      =1  #define TW88_WINXSTART          0xa1    //
  64      =1  #define TW88_WINYSTART          0xa2    //
  65      =1  #define TW88_WINSTART_HI        0xa0    //
  66      =1  #define TW88_WINWIDTH           0xa3    //
  67      =1  #define TW88_WINHEIGHT          0xa4    //
  68      =1  #define TW88_WINBRDATTR         0xa5    //
  69      =1  #define TW88_WINBRDWIDTH        0xa6    //
  70      =1  #define TW88_WINBRDHEIGHT       0xa7    //
  71      =1  #define TW88_WINSPACE           0xa8    // between characters.
  72      =1  #define TW88_WINZOOM            0xa9    //
  73      =1  #define TW88_WINSADDRHI         0xa9    // starting address of OSD ram for Windows 1
  74      =1  #define TW88_WINSADDRLO         0xaa    // starting address of OSD ram for Windows 1
  75      =1  
  76      =1  #define TW88_WINSHADOW          0xab    //
  77      =1  #define TW88_WINBLENDING        0xac    //
  78      =1  #define TW88_WINCHEFFECT        0xad    //
  79      =1  
  80      =1  
  81      =1  //Attributes for OSD
  82      =1  #define WINZOOMx1                       0x01
  83      =1  #define WINZOOMx2                       0x02
  84      =1  #define WINZOOMx3                       0x03
  85      =1  #define WINZOOMx4                       0x04
  86      =1  #define SHOW                            0x08    
  87      =1  
  88      =1  #define EXTENDED_COLOR          0x80
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 44  

  89      =1  #define BG_COLOR_BLACK          0x00    //For background color of window, border, and char. 
  90      =1  #define BG_COLOR_RED            0x40    
  91      =1  #define BG_COLOR_GREEN          0x20
  92      =1  #define BG_COLOR_YELLOW         0x60
  93      =1  #define BG_COLOR_BLUE           0x10
  94      =1  #define BG_COLOR_MAGENTA        0x50
  95      =1  #define BG_COLOR_CYAN           0x30
  96      =1  #define BG_COLOR_WHITE          0x70
  97      =1  #define BG_COLOR_TRANS          0x80    
  98      =1  #define BG_COLOR_MASK           0xf0    
  99      =1  
 100      =1  #define CH_COLOR_BLACK          0x00    //For color of char.
 101      =1  #define CH_COLOR_RED            0x04    
 102      =1  #define CH_COLOR_GREEN          0x02
 103      =1  #define CH_COLOR_YELLOW         0x06
 104      =1  #define CH_COLOR_BLUE           0x01
 105      =1  #define CH_COLOR_MAGENTA        0x05
 106      =1  #define CH_COLOR_CYAN           0x03
 107      =1  #define CH_COLOR_WHITE          0x07
 108      =1  #define CH_BLINK                        0x08    
 109      =1  #define CH_COLOR_MASK           0x0f    
 110      =1  
 111      =1  #define CL_BLACK                        0x00    //For color of char.
 112      =1  #define CL_BLUE                         0x01
 113      =1  #define CL_GREEN                        0x02
 114      =1  #define CL_CYAN                         0x03
 115      =1  #define CL_RED                          0x04    
 116      =1  #define CL_MAGENTA                      0x05
 117      =1  #define CL_YELLOW                       0x06
 118      =1  #define CL_WHITE                        0x07
 119      =1  #define CL_BLINK                        0x08    
 120      =1  
 121      =1  // 0x76*(WindowNo*0x0b)
 122      =1  #define WINDOW_DISABLE          0x00
 123      =1  #define WINDOW_ENABLE           0x01
 124      =1  #define WINDOW_3D_ENABLE    0x04
 125      =1  #define WINDOW_3D_BOTTOM    0x08
 126      =1  #define WINDOW_3D_TOP       0x00
 127      =1  #define WINDOW_TRANS_ENABLE 0x80
 128      =1  
 129      =1  #define WINBDCOLOR_ENABLE       0x80
 130      =1  #define WINBDCOLOR_EXTENT       0x80
 131      =1  
 132      =1  
 133      =1  #define WINBLENDING_DISABLE 0x00
 134      =1  #define WINBLENDING_BACK    0x10
 135      =1  #define WINBLENDING_FORE    0x20
 136      =1  #define WINBLENDING_ALL     0x30
 137      =1  
 138      =1  #define WINSHADOW_ENABLE        0x80
 139      =1  // 0xc8*WindowNo
 140      =1  #define WIN_MULTICOLOR_ENABLE 0x20
 141      =1  #define WIN_CH_EFFECT_ENABLE  0x10
 142      =1  #define WIN_CH_EFFECT_SHADOW  0x08
 143      =1  
 144      =1  
 145      =1  
 146      =1  ///////// TW8804C /////////////
 147      =1  // Window Number
 148      =1  #define WINNUM1                         1
 149      =1  #define WINNUM2                         2
 150      =1  #define WINNUM3                         3
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 45  

 151      =1  #define WINNUM4                         4
 152      =1  
 153      =1  // Index 0x9f Defination
 154      =1  #define WIN_BG_COLOR_EX         0x80
 155      =1  #define WIN_BG_COLOR_EX0        0x00
 156      =1  #define WIN_3D_TYPE                     0x08
 157      =1  #define WIN_3D_TYPE0            0x00
 158      =1  #define WIN_3D_EN                       0x04
 159      =1  #define WIN_3D_EN0                      0x00
 160      =1  #define WIN_3D_LEVEL            0x02
 161      =1  #define WIN_EN                          0x01
 162      =1  #define WIN_EN0                         0x00
 163      =1  
 164      =1  // Index 0xa5 Defination
 165      =1  #define WIN_BD_EN                       0x80
 166      =1  #define WIN_BD_EN0                      0x00
 167      =1  #define WIN_BD_WIDTH(a)         a
 168      =1  
 169      =1  // Index 0xa6 Defination
 170      =1  #define WIN_BD_COLOR_EX         0x80
 171      =1  #define WIN_BD_COLOR_EX0        0x00
 172      =1  #define WIN_H_BD_W(a)           a
 173      =1  
 174      =1  // Index 0xa7 Defination
 175      =1  #define WIN_V_BD_W(a)           a
 176      =1  
 177      =1  // Index 0xa8
 178      =1  #define WIN_CH_VSPACE(a)        (a<<4)
 179      =1  #define WIN_CH_HSPACE(a)        a
 180      =1  
 181      =1  // Index 0xa9 Defination
 182      =1  #define WIN_VZOOM(a)            (a-1)
 183      =1  #define WIN_HZOOM(a)            (a-1)
 184      =1  #define WIN_SADDR(a)            a
 185      =1  
 186      =1  // Index 0xab
 187      =1  #define WIN_SHADOW_EN           0x80
 188      =1  #define WIN_SHADOW_EN0          0x00
 189      =1  #define WIN_SHADOW_W(a)         a
 190      =1  
 191      =1  // ad
 192      =1  #define WIN_SHADOW_COLOR_EX             0x80
 193      =1  #define WIN_SHADOW_COLOR_EX0    0x00
 194      =1  #define WIN_MULTI_EN                    0x40
 195      =1  #define WIN_MULTI_EN0                   0x00
 196      =1  #define WIN_V_EXT_EN                    0x20
 197      =1  #define WIN_V_EXT_EN0                   0x00
 198      =1  #define WIN_CH_BDSH_SEL(a)              a
 199      =1  #define SEL_BORDER                              0
 200      =1  #define SEL_SHADOW                              1
 201      =1  #define WIN_CH_BDSH_COLOR_EX    0x08
 202      =1  #define WIN_CH_BDSH_COLOR_EX0   0x00
 203      =1  
 204      =1  #define OSD_Win_Num(a)                  0x9e, a-1
 205      =1  #define OSD_Win_Start_Addr              0xa0
 206      =1  #define OSD_Win_Attr(a)                         a
 207      =1  #define OSD_Win_Start(h,v)                       (BYTE)(((WORD)h>>8) | (((WORD)v>>8)<<4)),(BYTE)h, (BYTE)v
 208      =1  #define OSD_Win_Width(a)                        a
 209      =1  #define OSD_Win_Height(a)                       a
 210      =1  #define OSD_Win_Border(a)                       a
 211      =1  #define OSD_Win_HBorder(a)                      a
 212      =1  #define OSD_Win_VBorder(a)                      a
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 46  

 213      =1  #define OSD_Win_CH_Space(a)                     a
 214      =1  #define OSD_Win_ZM_SAddr(h,v,a)         ((h<<6)|(v<<4)|(a>>8)), (BYTE)a
 215      =1  #define OSD_Win_Shadow(a)                       a
 216      =1  #define OSD_Win_Blending(a)                     a
 217      =1  #define OSD_Win_CH_BorderShadow(a)      a
 218      =1  
 219      =1  
 220      =1  #define SetOSDWindowNum(winno)          WriteTW88(TW88_WINNUM, winno-1)
 221      =1  
 222      =1  //#define  OSD_Window_Attr(Trans_en,Color,3D_Type,3D_en,W_en)       (((( Trans_en | Color ) | 3D_Type) | 3
             -D_en) | W_en)
 223      =1  #define  OSD_Window_Attr(a,b,c,d,e)                                                                     (((( a | b ) | c) | d) | e)
 224      =1  #define  OSD_WShadow_Attr(W_Shadow_en,Color,Width)                                      W_Shadow_en | Color | Width
 225      =1  //#define  OSD_Blending(en,level)                                                                               en | (level & 0x0f)
 226      =1  //#define  OSD_Ch_Effect(Multi, Effect_En, ShadowBorder, Color)         Multi | Effect_En | ShadowBorder | Color 
             - 
 227      =1  
 228      =1  
 229      =1  struct OSDStrInfo 
 230      =1  {
 231      =1          BYTE    cnt;
 232      =1          WORD    addr;
 233      =1          BYTE    attr;
 234      =1          DWORD   str;
 235      =1  };
 236      =1  /*
 237      =1  struct BarInfo {
 238      =1          struct RegisterInfo BarCnt;
 239      =1          BYTE    winno;
 240      =1          BYTE    xoff;
 241      =1          BYTE    yoff;
 242      =1          BYTE    color;
 243      =1          int             bar_cnt;
 244      =1  };
 245      =1  */
 246      =1  struct FontData {
 247      =1          BYTE    font[27];
 248      =1  } ;
 249      =1  
 250      =1  //====================================================================
 251      =1  //  Internal OSD Function
 252      =1  void CopyCharToOSDRAM_TW88(BYTE Addr, BYTE attr, BYTE ch);
 253      =1  void CopyUDCharToOSDRAM_TW88(BYTE Addr, BYTE attr, BYTE ch);
 254      =1  //BYTE GetOSDWindowWidth_TW88(BYTE winno);
 255      =1  WORD GetOSDWindowSA_TW88(BYTE winno);
 256      =1  void SetOSDWindowX_TW88(BYTE winno, BYTE x);
 257      =1  void SetOSDWindowY_TW88(BYTE winno, BYTE y);
 258      =1  void SetOSDWindowWidth_TW88(BYTE winno, BYTE w);
 259      =1  void SetOSDWindowSA_TW88(BYTE winno, WORD sa);
 260      =1  
 261      =1  void SetOSDItalicsAndUnderline(BYTE italics, BYTE underline);
 262      =1  
 263      =1  void SetOSDHBorderWidth_TW88(BYTE winno, BYTE w);
 264      =1  //BYTE GetOSDWindowColor_TW88(BYTE winno);
 265      =1  void SetOSDWindowColor_TW88(BYTE CCWin, BYTE color);
 266      =1  void EnableOSDRAMAndChangeFont(BYTE type);
 267      =1  void WriteCharToOSDRAM(WORD addr, BYTE ch, BYTE attr);
 268      =1  
 269      =1  
 270      =1  void ShowOSDWindowAll(BYTE on);
 271      =1  void ShowOSDWindow_TW88(BYTE winno, BYTE onoff);
 272      =1  void ClearOSD_TW88(void);
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 47  

 273      =1  //void CreateOSDWindow_TW88(BYTE winno, BYTE x, BYTE y, BYTE w, BYTE h, WORD sa, BYTE attr);
 274      =1  /*not yet!!
 275      =1  //ljy012304...CC_ADJUST_POS
 276      =1  void SetOSDWindowXS_TW88(BYTE winno, BYTE xs);
 277      =1  void SetOSDWindowYS_TW88(BYTE winno, BYTE ys);
 278      =1  */
 279      =1  
 280      =1  //====================================================================
 281      =1  //      OSDMenu Functions
 282      =1  
 283      =1  //--------------------------------------------------------------------
 284      =1  //      Functions used in only Menu
 285      =1  #define         CONVERT_CODE                    0x80
 286      =1  
 287      =1  void InitOSDWindow(BYTE *ptr);
 288      =1  
 289      =1  WORD GetOSDWindowX(BYTE winno);
 290      =1  WORD GetOSDWindowY(BYTE winno);
 291      =1  BYTE CreateOSDWindowOutline(BYTE winno, BYTE w, BYTE color);
 292      =1  void CreateOSDMenuWindow(BYTE, BYTE, BYTE, BYTE, BYTE, BYTE, BYTE);
 293      =1  void ClearOSDLine(BYTE winno, BYTE sx, BYTE sy, BYTE cnt, BYTE attr);
 294      =1  void WriteStringToAddr(WORD addr, BYTE *str, BYTE cnt);
 295      =1  void DrawAttrString(WORD addr, BYTE *str, BYTE cnt);
 296      =1  void DrawAttrCnt(WORD addr, BYTE color, BYTE cnt);
 297      =1  void ClearDataCnt(WORD, BYTE);
 298      =1  #define         SetOSDWindowX(A, B)                                                     SetOSDWindowX_TW88(A, B)
 299      =1  #define     SetOSDWindowY(A, B)                                                 SetOSDWindowY_TW88(A, B)
 300      =1  
 301      =1  
 302      =1  //--------------------------------------------------------------------
 303      =1  //      Functions used in Menu and others
 304      =1  #define         ShowOSDWindow(A, B)                                                     ShowOSDWindow_TW88(A, B)
 305      =1  #define     ClearOSD()                                                                  ClearOSD_TW88()
 306      =1  
 307      =1  //================================================================
 308      =1  //      Font
 309      =1  void DownloadUDFont(void);
 310      =1  #ifdef Hs_debug
           =1 void DisplayROMFont(BYTE);
           =1 void DisplayRAMFont(BYTE);
           =1 #endif
 314      =1  void DownloadFont(BYTE cod, CODE_P BYTE *fontdata);
 315      =1  //void DisplayGrid( void );
 316      =1  //void DisplayCone( void );
 317      =1  //void DisplayJapanese( void );
 318      =1  void TestRAMFont( void );
 319      =1  #ifdef BANKING
           =1 void DisplayMGrid( BYTE );
           =1 void DisplayMessage( void );
           =1 void DisplayChinese( void );
           =1 void DisplayJapanese( void );
           =1 void DisplayKorean( void );
           =1 void DisplayGridBank0( BYTE n );
           =1 void DisplayGridBank1( BYTE n );
           =1 #endif
 328      =1  
 329      =1  //================================================================
 330      =1  //      OSD COLOR
 331      =1  void Change_OSDColorLookup(void);
 332      =1  void Reset_OSDColorLookup(void);
 333      =1  
 334      =1  //====================================================================
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 48  

 335      =1  //                              Conversion
 336      =1  //====================================================================
 337      =1  BYTE utoa(WORD value, BYTE *str, BYTE radix);
 338      =1  BYTE ltoa_K(long value, BYTE *str, BYTE);
 339      =1  BYTE strlen( BYTE *str );
 340      =1  
 341      =1  #define CStrlen(A)                              strlen(A)
 342      =1  
 343      =1  void WaitEndofDisplayArea(void);
 344      =1  
 345      =1  #endif  // __OSD_BASIC__
  19          #include "OSDMenu.h"
   1      =1  //osdmenu.h
   2      =1  //LJY10292001
   3      =1  #ifndef __OSDMENU__
   4      =1  #define __OSDMENU__
   5      =1  
   6      =1  //=======================================================================
   7      =1  // 
   8      =1  //BYTE GetOSDDuration(void);
   9      =1  
  10      =1  void ResetVideoValue(void);
  11      =1  //#if defined( SUPPORT_PC ) || defined( SUPPORT_DTV )
  12      =1  //void ResetPCValue(void);
  13      =1  //#endif
  14      =1  BYTE GetOSDMenuLevel( void );
  15      =1  
  16      =1  void DrawMenulist(BYTE);
  17      =1  void Display_EnterPin(void);
  18      =1  void OSDHighMenu_sub(void);
  19      =1  void ResetOSDValue(void);
  20      =1  #ifdef E_Wintek
           =1 void ResetUESROSDValue(void);
           =1 #endif
  23      =1  //BYTE OnChangingValue(void);
  24      =1  //Not used yet *******************BYTE OnChangingTime(void);
  25      =1  
  26      =1  //WORD GetOSDclock(void);
  27      =1  
  28      =1  void InitOSDMenu(void);
  29      =1  BYTE CloseOSDMenu(void);
  30      =1  void OpenOSDMenu(void);
  31      =1  void OSDHighMenu(void);
  32      =1  void OSDSelect(void);
  33      =1  void OSDCursorMove(BYTE flag );
  34      =1  void OSDLeftRight(BYTE flag );
  35      =1  void OSDValueUpDn(BYTE flag);
  36      =1  WORD SetItemValue( BYTE id, BYTE flag );
  37      =1  BYTE DoAction(BYTE id);
  38      =1  
  39      =1  BYTE SaveValue1(void);
  40      =1  void ClearValueWin(void);
  41      =1  
  42      =1  void OSDNumber( BYTE num );
  43      =1  
  44      =1  void Set4WideScreen(BYTE id);
  45      =1  
  46      =1  void SetRGBContrast( BYTE id, BYTE val );
  47      =1  BYTE SetPCColorTemp(BYTE flag);
  48      =1  void ResetPanelAttributeValue(void);
  49      =1  WORD GetItemValue( BYTE);
  50      =1  void DisplayViewBar( WORD,BYTE);
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 49  

  51      =1  void DrawNum(WORD, CODE_P struct NumType *, WORD);
  52      =1  void DrawStringByLang( WORD, CODE_P struct EnumType *, WORD);
  53      =1  
  54      =1  void DisplayVolumebar(BYTE val);
  55      =1  BYTE GetOSDLang(void);
  56      =1  void InitOSDMenuXY(void);
  57      =1  
  58      =1  void Display_TVGuide_Window(void);
  59      =1  void Display_TVGuide_Status(void);
  60      =1  
  61      =1  void ChangeVchip_LevelCursor(BYTE);
  62      =1  void ChangeVchip_ContentCursor(BYTE);
  63      =1  void Select_VchipLevel(void);
  64      =1  void SetVideoMode(BYTE mode);
  65      =1  BYTE GetVideoDatawithOffset(BYTE offset);
  66      =1  void SetVideoContrast(BYTE newv);
  67      =1  void SetVideoBrightness(BYTE newv);
  68      =1  void SetVideoHue(BYTE newv) ;
  69      =1  void SetVideoSaturation(BYTE svtype, BYTE newv) ;
  70      =1  BYTE SetVideoSharpness(BYTE flag) ;
  71      =1  void SetVideoBacklight(BYTE newv) ;
  72      =1  //------------------------------------------------andy awt 981013
  73      =1  //void DaySelect(BYTE);
  74      =1  void CAMOutDSel(BYTE val);
  75      =1  void DVRAodioSel(BYTE  val);
  76      =1  
  77      =1  //------------------------------------------------andy awt 981013
  78      =1  
  79      =1  void DisplayLineOSD(void);      // OSD Line display Demo
  80      =1  
  81      =1  
  82      =1  struct MenuType {
  83      =1          BYTE    width,  height;
  84      =1          BYTE    TitleColor;     
  85      =1          BYTE    CursorColor;
  86      =1  };
  87      =1  
  88      =1  struct NumType {
  89      =1          BYTE    PrePostCharLen;         // high nibble(pre) / low nibble(post)
  90      =1          BYTE    PrePostChar[4];
  91      =1  };
  92      =1  
  93      =1  struct NumberStringType {
  94      =1          BYTE    x, y;
  95      =1          BYTE    width;
  96      =1          BYTE    BackColor;
  97      =1          BYTE    Radix;
  98      =1          BYTE    NumColor;
  99      =1          BYTE    MaxLen;                         // maximum length of string
 100      =1          BYTE    PrePostCharLen;         // high nibble(pre) / low nibble(post)
 101      =1          BYTE    PrePostChar[3];
 102      =1  };
 103      =1  
 104      =1  struct TimeType {
 105      =1          BYTE    x, y;
 106      =1          BYTE    width;
 107      =1          BYTE    BackColor;
 108      =1          BYTE    Format;                         //_24H_TIME
 109      =1          BYTE    TimeColor;
 110      =1          BYTE    CursorColor;
 111      =1  };
 112      =1  
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 50  

 113      =1  struct EnumType {
 114      =1          BYTE    Sz;//size
 115      =1          BYTE    ByLang;
 116      =1          BYTE    Str[15];                        // doesn't matter the size !!!
 117      =1  };
 118      =1  
 119      =1  #define ICON_CH_SZ              2
 120      =1  //#define BAR_NUM_SZ            4
 121      =1  #define ICON_BUF_SZ             2
 122      =1  struct DefineMenu {
 123      =1          //WORD                                          Icon[ICON_BUF_SZ];      
 124      =1          BYTE                            CODE    *Icon;
 125      =1          BYTE                                            **Desc;                         
 126      =1          BYTE                                            PreFnId, 
 127      =1                                                                  PostFnId;
 128      =1  //      void            (*CalltoFunction)(void);                                    // Un/Dn/Sel Function
 129      =1          BYTE                                            IconColor;                      //NIL: not to display icon
 130      =1          BYTE                                            DescColor;                      //NIL: not to display desc. (IconColor==NIL && DescColor==NIL)->Last Item
 131      =1          struct DefineMenu       CODE    *Child;
 132      =1          BYTE                                            Type;                           // MENU, CHOICEMENU, BAR, NUMBER, TIME, ACTION, ENUM_STRING
 133      =1          BYTE                                            ActiveWithCursor;
 134      =1          BYTE                                            Id;
 135      =1          BYTE                            CODE    *TypeData;      //MenuType, BarType, NumType,,,
 136      =1  } ;
 137      =1  
 138      =1  struct PictureInfo {
 139      =1  
 140      =1          BYTE Register_Addr;
 141      =1          BYTE EEPROM_Addr;
 142      =1          struct RegisterInfo     CODE    *Control_Range;
 143      =1  };
 144      =1  
 145      =1  
 146      =1  //-------------------------------------------------------------------
 147      =1  // OSD Window Information
 148      =1  //-------------------------------------------------------------------
 149      =1  // Window Number
 150      =1  #define OSDCURSORWINDOW                 1
 151      =1  #define OSDMENUWINDOW                   OSDCURSORWINDOW+1
 152      =1  #define OSDMENU_TOPWIN                  OSDCURSORWINDOW+2
 153      =1  #define OSDMENU_TITLEWIN                OSDCURSORWINDOW+3
 154      =1  #define OSDBARWINDOW                    OSDCURSORWINDOW
 155      =1  
 156      =1  #define TECHWELLOGO_OSDWIN      1       
 157      =1  #define TVINFO_OSDWIN           2       
 158      =1  #define FONTTEST_OSDWIN         2       
 159      =1  #define INPUTINFO_OSDWIN        3  
 160      =1  #define RATINGINFO_OSDWIN       1       
 161      =1  #define PCINFO_OSDWIN           3//4/   
 162      =1  
 163      =1  //-------------OSDMENU_TITLEWIN------------------------------------------------------
 164      =1  // Window Start address
 165      =1  #define OSDMENU_MAINADDR        0
 166      =1  #define OSDMENU_SUBADDR     OSDMENU_MAINADDR+15    //25*9:196
 167      =1  #define OSDMENU_BARADDR         175 //OSDMENU_SUBADDR+225    //256   //25x2:50
 168      =1  
 169      =1  #define INPUTINFO_ADDR          160     // 9x1:9
 170      =1  #ifdef WQVGA
           =1 #define INPUTINFO1_ADDR         INPUTINFO_ADDR+17       //17x3:51
           =1 #else
 173      =1  #define INPUTINFO1_ADDR         INPUTINFO_ADDR+34       //17x2:51
 174      =1  #endif
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 51  

 175      =1  
 176      =1  #define MUTEINFO_ADDR       INPUTINFO1_ADDR+51  // 4x1:4
 177      =1  #define TVCHINFO_ADDR           MUTEINFO_ADDR//324      // 3X1:3
 178      =1  #define LOGO_ADDR                       0
 179      =1  #define RATINGINFO_ADDR         0       //addr:210(8x1:8)
 180      =1  #define PCMEASUREINFO_ADDR  OSDMENU_BARADDR //10x1
 181      =1  
 182      =1  
 183      =1  //--------------------------------------------------------------------
 184      =1  // OSD Menu Position Range
 185      =1  #if ((defined WQVGA) && (defined ANALOG_7INCH)) || ((defined QVGA) && (defined SHARP_LQ050Q5DR01))
           =1         #define OSD_PHR_ PHR_/2
           =1 #else
 188      =1          #define OSD_PHR_ PHR_
 189      =1  #endif
 190      =1  
 191      =1  #define OSDHSTART_MAX (OSD_PHR_-(12+1)*25 - 56*2 -4)  //PHR - (pixelsize +Hspace)*MenuWidth - Hborder*2 - 
             -outlinewidth*2
 192      =1  #define OSDVSTART_MAX (PVR_-(18+11)*9 - 5*2 ) //  PVR - (Linesize+Vspace)*MENU_HEIGHT - Vborder*2  - outli
             -newidth*2
 193      =1  
 194      =1  #define OSDMENUX_MIN 1//0
 195      =1  #define OSDMENUX_MAX (OSDHSTART_MAX>>3)
 196      =1  #define OSDMENUX_50  (OSDHSTART_MAX>>4)
 197      =1  
 198      =1  #define OSDMENUY_MIN 2//0
 199      =1  #define OSDMENUY_MAX (OSDVSTART_MAX>>2)
 200      =1  #define OSDMENUY_50  (OSDVSTART_MAX>>3)
 201      =1  
 202      =1  //--------------------------------------------------------------------
 203      =1  // OSD Menu Width, Height 
 204      =1  #ifdef E_Wintek
           =1 #define ICON_HIGH                               0x14
           =1 #else
 207      =1  #define ICON_HIGH                               0x0a
 208      =1  #endif
 209      =1  #define TOTAL_MAX_HIGHT                 9
 210      =1  
 211      =1  #define TOPMENU_WIDTH                   2
 212      =1  #define TOTAL_TOP_HEIGHT                5       // Include blank line!
 213      =1  
 214      =1  #define TOPMENU_HEIGHT                  4       
 215      =1  
 216      =1  #if (defined QVGA) && (defined SHARP_LQ050Q5DR01)
           =1 #define MENU_WIDTH                              17 //23//25 
           =1 #define TITLE_MAX_DESC                  17//25  //
           =1 #define BAR_LENGTH                              0
           =1 #else
 221      =1  #define MENU_WIDTH                              23//23//25 
 222      =1  #define TITLE_MAX_DESC                  23//25  //
 223      =1  #define BAR_LENGTH                              5//8
 224      =1  #endif
 225      =1  
 226      =1  #define MENU_HEIGHT                             7//6 
 227      =1  
 228      =1  #define BARNUM_LENGTH                   8       //11
 229      =1  #ifdef REFERENCE
           =1 #define BACK_COLOR                              BG_COLOR_CYAN
           =1 #define DEFAULT_COLOR                   BG_COLOR_CYAN   | CH_COLOR_WHITE
           =1 //#define ACTIVE_COLOR                  BG_COLOR_YELLOW | CH_COLOR_WHITE
           =1 #define TITLE_BACK_COLOR                BG_COLOR_MAGENTA
           =1 #define TITLE_COLOR                             TITLE_BACK_COLOR | CH_COLOR_YELLOW
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 52  

           =1 #define COMMENT_COLOR                   TITLE_BACK_COLOR | CH_COLOR_WHITE
           =1 #define CURSOR_COLOR                    BG_COLOR_YELLOW | CH_COLOR_BLUE
           =1 #define OSD_INFO_COLOR                  DEFAULT_COLOR
           =1 #define BAR_COLOR                               DEFAULT_COLOR   
           =1 #define BAR_NUM_COLOR                   DEFAULT_COLOR
           =1 #define NUM_COLOR                               DEFAULT_COLOR
           =1 
           =1 #define OSDMENU_OUTLINE_COLOR   BG_COLOR_BLUE
           =1 
           =1 #else
 245      =1  #define BACK_COLOR                              BG_COLOR_CYAN
 246      =1  #define DEFAULT_COLOR                   BG_COLOR_CYAN | CH_COLOR_WHITE
 247      =1  //#define ACTIVE_COLOR                  BG_COLOR_YELLOW | CH_COLOR_WHITE
 248      =1  #define TITLE_BACK_COLOR                BG_COLOR_BLUE
 249      =1  #define TITLE_COLOR                             TITLE_BACK_COLOR | CH_COLOR_YELLOW
 250      =1  #define COMMENT_COLOR                   TITLE_BACK_COLOR | CH_COLOR_WHITE
 251      =1  #define CURSOR_COLOR                    BG_COLOR_YELLOW  | CH_COLOR_BLUE
 252      =1  #define OSD_INFO_COLOR                  BG_COLOR_CYAN    | CH_COLOR_GREEN
 253      =1  #define BAR_COLOR                               DEFAULT_COLOR   
 254      =1  #define BAR_NUM_COLOR                   DEFAULT_COLOR
 255      =1  #define NUM_COLOR                               DEFAULT_COLOR
 256      =1  
 257      =1  #define VER_COLOR               BG_COLOR_CYAN   | CH_COLOR_YELLOW   /// V1.1 03/07/07 simonsung
 258      =1  
 259      =1  
 260      =1  #define OSDMENU_OUTLINE_COLOR   BG_COLOR_CYAN
 261      =1  #endif 
 262      =1  
 263      =1  
 264      =1  //DisplayedOSD
 265      =1  //              new       |     MENU    TVINFO          CC              INPUTINFO               PCINFO          RATINGINFO
 266      =1  //      current   |
 267      =1  //============|=========================================================================
 268      =1  //      MENU      |                     TVINFO          --              INPUTINFO               PCINFO          MENU + RATINGINFO       
 269      =1  //                        |                                              
 270      =1  //------------|-------------------------------------------------------------------------
 271      =1  //      TVINFO    |     MENU    TVINFO          --              INPUTINFO               PCINFO          TVINFO+RATING
 272      =1  //------------|-------------------------------------------------------------------------
 273      =1  //      CC                |     MENU->  TVINFO->                        INPUTINFO->             PCINFO          RATINGINFO
 274      =1  //                        |      CC              CC                                      CC                                              
 275      =1  //------------|-------------------------------------------------------------------------
 276      =1  //      INPUTINFO |     MENU    TVINFO          --              INPUTINFO               PCINFO          --
 277      =1  //------------|-------------------------------------------------------------------------
 278      =1  //      PCINFO    |     MENU    x                       x               INPUTINFO               PCINFO          x
 279      =1  //------------|-------------------------------------------------------------------------
 280      =1  //      RATINGINFO|     MENU    TVINFO     RATING   INPUTINFO           x                       RATINGINFO
 281      =1  //                                                                      
 282      =1  
 283      =1  //=======================================================================================
 284      =1  // OSD Menu Constant define.
 285      =1  //=======================================================================================
 286      =1  //Time type
 287      =1  #define _24H_TIME               1
 288      =1  
 289      =1  //for previous, next, parent or child
 290      =1  #define YES                             0xfe    
 291      =1  #define NO                              0
 292      =1  
 293      =1  
 294      =1  //#define OVERWRITE             0
 295      =1  //#define POPUP                 1
 296      =1  
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 53  

 297      =1  //CursorMove
 298      =1  #define VERT                    0
 299      =1  #define HORI                    1
 300      =1  
 301      =1  //Type of MenuItem
 302      =1  #define OSDMENU                 1
 303      =1  #define CHOICEMENU              2
 304      =1  #define ACTION                  3
 305      =1  #define BAR                             4
 306      =1  #define NUMBER                  5
 307      =1  #define CHOICE                  6
 308      =1  #define ENUM_STRING             7 //YESNO                       7
 309      =1  #define CHOICE1                 8
 310      =1  #define TIME                    9
 311      =1  #define NUMBER_STRING   10
 312      =1  #define TEXT_STR              11   // V1.1 02/28/07 simonsung
 313      =1  
 314      =1  
 315      =1  //Bar type
 316      =1  #define LEFT_FILLED             1
 317      =1  #define RIGHT_FILLED    2
 318      =1  #define NO_FILLED               3
 319      =1  
 320      =1  //OSDmenu up and down key
 321      =1  #define UP                                      1
 322      =1  #define DN                                      2
 323      =1  #define RIGHT                           3
 324      =1  #define LEFT                            4
 325      =1  
 326      =1  // Action Id
 327      =1  #define DISP_INFO                       0x16
 328      =1  
 329      =1  #define INPUTSELECTION                          0x2f
 330      =1  
 331      =1  #define CHANGE_TO_COMPOSITE                     (0x20|CH_TW2835)                        // Low nibble need to start from 1 
 332      =1  #define CHANGE_TO_SVIDEO                        (0x20|SVIDEO)                           // so that it match with COMPOSITE...
 333      =1  #define CHANGE_TO_COMPONENT                     (0x20|COMPONENT)                
 334      =1  #define CHANGE_TO_DTV                           (0x20|DTV)              
 335      =1  #define CHANGE_TO_TV                            (0x20|TV)                                       
 336      =1  #define CHANGE_TO_PC                            (0x20|PC)                                       
 337      =1  #define CHANGE_TO_DIGITALVGA            (0x20|DIGITALVGA)                       
 338      =1  #define CHANGE_TO_SCART                         (0x20|SCART)                            
 339      =1  
 340      =1  
 341      =1  #define OSDPOSITIONMODE     0x10
 342      =1  #define OSD_VPOS                        0x11
 343      =1  #define OSD_HPOS                        0x12
 344      =1  #define OSD_HALFTONE            0x13
 345      =1  #define OSD_DURATION            0x14
 346      =1  #define RESET_OSDVALUE          0x15
 347      =1  #define OSDLANG                         0x16
 348      =1  
 349      =1  #define PANEL_CONTRAST          0x58
 350      =1  #define PANEL_BRIGHTNESS        0x59
 351      =1  #define PANEL_HUE                       0x5a
 352      =1  #define PANEL_SHARPNESS         0x5b
 353      =1  #define PANEL_SATURATION        0x5c
 354      =1  
 355      =1  #define PC_VPOS                         0x43
 356      =1  #define PC_HPOS                         0x44
 357      =1  #define PC_HSIZE                        0x4d
 358      =1  
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 54  

 359      =1  #define PC_CLOCK                        0x45
 360      =1  #define PC_PHASE                        0x46
 361      =1  
 362      =1  #define AUTOADJUST                      0x47
 363      =1  #define AUTOADJUST2                     0x48
 364      =1  //#define SAVE_AUTOADJUST               0x49
 365      =1  #define RESET_AUTOADJUST        0x4a
 366      =1  
 367      =1  #define PCCOLORADJUST           0x4b
 368      =1  #define SAVE_COLORADJUST        0x4c
 369      =1  //#define RESET_COLORADJUST     0x4d
 370      =1  
 371      =1  #define RESET_PCVALUE           0x4e
 372      =1  #define CameraOSD                       0x4f
 373      =1  
 374      =1  #define PC_COLOR_MODE           0x3f
 375      =1  #define PC_COLOR_TEMP           0x30
 376      =1  #define PC_COLOR_MODE1          0x31
 377      =1  #define PC_COLOR_MODE2          0x32
 378      =1  #define PC_COLOR_MODE3          0x33
 379      =1  #define PC_COLOR_USER           0x34
 380      =1  #define PC_COLOR_R                      0x35
 381      =1  #define PC_COLOR_G                      0x36
 382      =1  #define PC_COLOR_B                      0x37
 383      =1  
 384      =1  #define VIDEO_MODE                      0x90
 385      =1  #define VIDEO_MODE1                     0x91
 386      =1  #define VIDEO_MODE2                     0x92
 387      =1  #define VIDEO_MODE3                     0x93
 388      =1  #define VIDEO_USER                      0x94
 389      =1  #define VIDEO_CONTRAST          0x95
 390      =1  #define VIDEO_BRIGHTNESS        0x96
 391      =1  #define VIDEO_SATURATION        0x97
 392      =1  #define VIDEO_HUE                       0x99
 393      =1  #define VIDEO_SHARPNESS         0x9a
 394      =1  #define VIDEO_BACKLIGHT         0x9c            // add new value 
 395      =1  #define RESET_VIDEOVALUE        0x9b
 396      =1  #ifdef E_Wintek
           =1 #define RESET_USERVALUE 0x9d
           =1 #endif
 399      =1  #define VIDEOPICTURE            0x9f
 400      =1  
 401      =1  #define INPUTSTD                        0x6f
 402      =1  #define CHANGE_TO_AUTO          0x60
 403      =1  #define CHANGE_TO_NTSC          (0x60 | NTSC)
 404      =1  #define CHANGE_TO_PAL           (0x60 | PAL)
 405      =1  #define CHANGE_TO_SECAM         (0x60 | SECAM)
 406      =1  #define CHANGE_TO_NTSC4         (0x60 | NTSC4)
 407      =1  #define CHANGE_TO_PALM          (0x60 | PALM)
 408      =1  #define CHANGE_TO_PALN          (0x60 | PALN)
 409      =1  #define CHANGE_TO_PAL60         (0x60 | PAL60)
 410      =1  
 411      =1  
 412      =1  
 413      =1  
 414      =1  #define CLOSED_CAPTION          0x7f
 415      =1  #define CLOSEDCAP_OFF           0x70
 416      =1  #define CLOSEDCAP_CC1           0x71
 417      =1  #define CLOSEDCAP_CC2           0x72
 418      =1  #define CLOSEDCAP_CC3           0x73
 419      =1  #define CLOSEDCAP_CC4           0x74
 420      =1  #define CLOSEDCAP_T1            0x75
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 55  

 421      =1  #define CLOSEDCAP_T2            0x76
 422      =1  #define CLOSEDCAP_T3            0x77
 423      =1  #define CLOSEDCAP_T4            0x78
 424      =1  
 425      =1  #define TV_GUIDE                        0x8f
 426      =1  #define NO_VCHIP_LOCK           0
 427      =1  #define VCHIP_TV_Y                      1
 428      =1  #define VCHIP_TV_Y7                     2
 429      =1  #define VCHIP_TV_G                      3
 430      =1  #define VCHIP_TV_PG                     4
 431      =1  #define VCHIP_TV_14                     5
 432      =1  #define VCHIP_TV_MA                     6
 433      =1  #define PASSWORD                        0x87
 434      =1  #define NEW_PASSWORD            0x88
 435      =1  #define CHK_PASSWORD            0x89
 436      =1  #define RET_CHK_PASSWORD        0x8a
 437      =1  
 438      =1  #define MPAA_RATING                     0x9f
 439      =1  #define NO_MPAA_RATING          0
 440      =1  #define MPAA_G                          1
 441      =1  #define MPAA_PG                         2
 442      =1  #define MPAA_PG_13                      3
 443      =1  #define MPAA_R                          4
 444      =1  #define MPAA_NC_17                      5
 445      =1  #define MPAA_X                          6
 446      =1  
 447      =1  #define TVINSTALL                       0xa0
 448      =1  #define SCAN_CHANNEL            0xa1
 449      =1  #define AIR_CABLE_TV            0xa3
 450      =1  #define STORE_CLEAR_TVCHN       0xa4
 451      =1  #define MTS                                     0xa5
 452      =1  #define EDIT_CHANNEL            0xa6
 453      =1          #define         MTS_STEREO                      0//0x10
 454      =1          #define         MTS_MONO                        1//0x11
 455      =1  
 456      =1  #define AUDIO_VOLUME            0xb7
 457      =1  
 458      =1  #if 0 //andy AWT8.4 20090811
           =1 
           =1 #define AUDIO_BALANCE           0xb9
           =1 #define AUDIO_BASS                      0xba
           =1 #define AUDIO_TREBLE            0xbb
           =1 
           =1 #define AUDIO_LOUDNESS          0xbc
           =1 #define AUDIO_EFFECT            0xbd
           =1 #define AUDIO_MUTE                      0xbe
           =1 #endif
 468      =1  
 469      =1  #define DayChoice           0xb8
 470      =1  #define CAMOSDONOFF         0xb9
 471      =1  #define GAUGEChoice         0xba
 472      =1  #define OsdLockChoice       0xbb
 473      =1  #define PRIORITYChoice      0xcA
 474      =1  #define DVRDisplay              0xcc
 475      =1  
 476      =1  #define CAMAONOFF                   0xc1
 477      =1  #define CAMBONOFF               0xc2
 478      =1  #define CAMCONOFF                   0xc3
 479      =1  #define CAMRONOFF                       0xc4
 480      =1  
 481      =1  #define IMAGEChoice         0xc5 
 482      =1  #define REARChoice          0xc6
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 56  

 483      =1  #define JUMPChoice          0xc7
 484      =1  #define CAMOUTChoice        0xc8 
 485      =1  #define STIME_STEP                  0xc9
 486      =1  #define TriggerVGA                  0xcb
 487      =1  #define IMAGE_A_Choice         0xcd
 488      =1  #define IMAGE_B_Choice         0xce
 489      =1  #define IMAGE_C_Choice         0xcf
 490      =1  
 491      =1  
 492      =1  #define MANUAL_TUNE_CHANNEL     0xab
 493      =1  #define FINE_TUNE_CHANNEL       0xac
 494      =1  #define STORE_PALCHANNEL        0xad
 495      =1  
 496      =1  //#define CLEAR_TVCHN                   0xb0
 497      =1  //#define STORE_TVCHN                   0xb1
 498      =1  
 499      =1  #define WIDESCREEN                      0xc0
 500      =1  #define WIDESCREEN_NORMAL       0 
 501      =1  #define WIDESCREEN_WIDE         1 
 502      =1  #define WIDESCREEN_PANO         2
 503      =1  #define WIDESCREEN_FULL         3 
 504      =1  #define WIDESCREEN_ZOOM         4 
 505      =1  
 506      =1  #define SYSTEM_CLOCK            0xd1
 507      =1  #define SYSTEM_CLOCK_H          0xd2
 508      =1  #define WAKEUP_TIME                     0xd3
 509      =1  #define WAKEUP_TIME_H           0xd4
 510      =1  #define WAKEUP_PR                       0xd5
 511      =1  #define OFF_TIME                        0xd6
 512      =1  #define OFF_TIME_H                      0xd7
 513      =1  #define SLEEP_TIMER                     0xd8
 514      =1  
 515      =1  #define Resolution                      0xe0
 516      =1  #define FPS                                     0xe1
 517      =1  #define Quality                         0xe2
 518      =1  #define RecordMode                      0xe3
 519      =1  #define RecordLength            0xe4
 520      =1  #define PreAlarmLength          0xe5
 521      =1  #define PostAlarmLength         0xe6
 522      =1  #define Apply                           0xe7
 523      =1  #define ManualRecordStart       0xe8
 524      =1  #define ManualRecordStop        0xe9
 525      =1  #define Snapshot                        0xea
 526      =1  #define FormatSD                        0xeb
 527      =1  #define AudioRecord                     0xec
 528      =1  #define FirmwareUpdate          0xed
 529      =1  #define ChangePassword          0xee
 530      =1  #define OverWrite                       0xef
 531      =1  
 532      =1  
 533      =1  
 534      =1  
 535      =1  #define Year                            0x20
 536      =1  #define Month                           0x21
 537      =1  #define Day                                     0x22
 538      =1  #define Hour                            0x23
 539      =1  #define Minute                          0x24
 540      =1  
 541      =1  #define DaylightSaving                          0x25
 542      =1  #define TimeBeginesMonth                        0x26
 543      =1  #define TimeBeginesWeek                         0x27
 544      =1  #define TimeBeginesTime                         0x28
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 57  

 545      =1  #define StandardTimeBeginesMonth        0x29
 546      =1  #define StandardTimeBeginesWeek         0x2a
 547      =1  #define StandardTimeBeginesTime         0x2b
 548      =1  #define TimeZone                                        0x2c
 549      =1  #define FirstNumber                                     0x2d
 550      =1  #define SecondNumber                            0x2e
 551      =1  #define ThridNumber                                     0x2f
 552      =1  #define FourthNumber                            0x38
 553      =1  
 554      =1  
 555      =1  
 556      =1  #define OSDLANGI                        0xd9
 557      =1  #define OSDLANGII                       OSDLANGI+1
 558      =1  #define OSDLANGIII                      OSDLANGI+2
 559      =1  #define OSDLANGIV                       OSDLANGI+3
 560      =1  
 561      =1  
 562      =1  #define TOHIGHMENU                      0xf1
 563      =1  #define MOVECURSOR2FIRST        0xf2
 564      =1  #define RESET_ALL                       0xf3
 565      =1  #define EXITMENU                        0xf4
 566      =1  #define DVRParamApply           0xf5
 567      =1  #define DATETIMEApply           0xf6
 568      =1  
 569      =1  
 570      =1  #define CHOICE1_VAL                     0xfc
 571      =1  #define CHOICE_VAL                      0xfd
 572      =1  #define BAR_VAL                         0xfe
 573      =1  #define NUM_VAL                         0xff
 574      =1  
 575      =1  #define CAMNumberChoice     0xa3 
 576      =1  #define PelcoChoice         0xa4
 577      =1  #define Baud_rateChoice         0xa5
 578      =1  
 579      =1  #endif  // __OSDMENU__
  20          #include "DispInfo.h"
   1      =1  #ifndef __DISPINFO__
   2      =1  #define __DISPINFO__
   3      =1  //==================================================================
   4      =1  //                              Display Information
   5      =1  //==================================================================
   6      =1  #if (defined WQVGA) && (defined ANALOG_7INCH)
           =1 #define         INPUTINFO_ZOOM          WINZOOMx1
           =1 #define         LOGO_ZOOM                       WINZOOMx3
           =1 
           =1 #else // (defined WQVGA) && (defined SHARP_LQ043T3DX02)
  11      =1  #define         INPUTINFO_ZOOM          WINZOOMx2
  12      =1  #define         LOGO_ZOOM                       WINZOOMx2
  13      =1  #endif
  14      =1  //#define               VOL_ZOOM                        WINZOOMx4
  15      =1  #define         MUTE_ZOOM                       WINZOOMx3
  16      =1  #define         TVCHN_ZOOM                      WINZOOMx4
  17      =1  #define         RATINGINFO_ZOOM         WINZOOMx3
  18      =1  #define     SCANTV_ZOOM                 WINZOOMx2               //ljy012304
  19      =1  #define         PCINFO_ZOOM                     WINZOOMx2
  20      =1  #define     BAR_ZOOM                    WINZOOMx2
  21      =1  
  22      =1  
  23      =1  #define DVRStatus_OSDWIN        4 
  24      =1  #define DVRStatus_ADDR  195 
  25      =1  
  26      =1  extern  IDATA BYTE  DisplayedOSD;
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 58  

  27      =1  
  28      =1  
  29      =1  void ClearDisplayedOSD( BYTE newd );
  30      =1  void SetDisplayedOSD( BYTE newd );
  31      =1  BYTE GetDisplayedOSD(void);
  32      =1  void ClearOSDInfo(void);
  33      =1  
  34      =1  void DisplayInput(void);
  35      =1  BYTE ClearInput(void);
  36      =1  
  37      =1  
  38      =1  void DisplayLogo(void);
  39      =1  void ClearLogo(void);
  40      =1  
  41      =1  void DisplayPCInfo(BYTE CODE *ptr);
  42      =1  void ClearPCInfo(void);
  43      =1  void DisplayAutoAdjust(void);
  44      =1  void ClearAutoAdjust(void);
  45      =1  
  46      =1  
  47      =1  void DisplayVol(void);
  48      =1  #if 0
           =1 void DisplayMuteInfo(void);
           =1 #endif
  51      =1  void ClearMuteInfo(void);
  52      =1  BYTE CheckAndClearOSD(void);
  53      =1  
  54      =1  //==================================================================
  55      =1  //                                              TV Info
  56      =1  //==================================================================
  57      =1  
  58      =1  BYTE ClearTVInfo(void);
  59      =1  
  60      =1  #endif  // __DISPINFO__
  21          //#include "Monitor.h"
  22          #include "variables.h"
   1      =1  //
   2      =1  //Variables.h   : Register declaration
   3      =1  //
   4      =1  
   5      =1  #ifndef __VARIABLES__
   6      =1  #define __VARIABLES__
   7      =1  
   8      =1  #ifdef INTERNAL_MCU
           =1 xdata BYTE REG00        _at_ 0xc000;
           =1 xdata BYTE REG01        _at_ 0xc001;
           =1 xdata BYTE REG02        _at_ 0xc002;
           =1 xdata BYTE REG03        _at_ 0xc003;
           =1 xdata BYTE REG04        _at_ 0xc004;
           =1 xdata BYTE REG05        _at_ 0xc005;
           =1 xdata BYTE REG06        _at_ 0xc006;
           =1 xdata BYTE REG07        _at_ 0xc007;
           =1 xdata BYTE REG08        _at_ 0xc008;
           =1 xdata BYTE REG09        _at_ 0xc009;
           =1 xdata BYTE REG0a        _at_ 0xc00a;
           =1 xdata BYTE REG0b        _at_ 0xc00b;
           =1 xdata BYTE REG0c        _at_ 0xc00c;
           =1 xdata BYTE REG0d        _at_ 0xc00d;
           =1 xdata BYTE REG0e        _at_ 0xc00e;
           =1 xdata BYTE REG0f        _at_ 0xc00f;
           =1 xdata BYTE REG10        _at_ 0xc010;
           =1 xdata BYTE REG11        _at_ 0xc011;
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 59  

           =1 xdata BYTE REG12        _at_ 0xc012;
           =1 xdata BYTE REG13        _at_ 0xc013;
           =1 xdata BYTE REG14        _at_ 0xc014;
           =1 xdata BYTE REG15        _at_ 0xc015;
           =1 xdata BYTE REG16        _at_ 0xc016;
           =1 xdata BYTE REG17        _at_ 0xc017;
           =1 xdata BYTE REG18        _at_ 0xc018;
           =1 xdata BYTE REG19        _at_ 0xc019;
           =1 xdata BYTE REG1a        _at_ 0xc01a;
           =1 xdata BYTE REG1b        _at_ 0xc01b;
           =1 xdata BYTE REG1c        _at_ 0xc01c;
           =1 xdata BYTE REG1d        _at_ 0xc01d;
           =1 xdata BYTE REG1e        _at_ 0xc01e;
           =1 xdata BYTE REG1f        _at_ 0xc01f;
           =1 xdata BYTE REG20        _at_ 0xc020;
           =1 xdata BYTE REG21        _at_ 0xc021;
           =1 xdata BYTE REG22        _at_ 0xc022;
           =1 xdata BYTE REG23        _at_ 0xc023;
           =1 xdata BYTE REG24        _at_ 0xc024;
           =1 xdata BYTE REG25        _at_ 0xc025;
           =1 xdata BYTE REG26        _at_ 0xc026;
           =1 xdata BYTE REG27        _at_ 0xc027;
           =1 xdata BYTE REG28        _at_ 0xc028;
           =1 xdata BYTE REG29        _at_ 0xc029;
           =1 xdata BYTE REG2a        _at_ 0xc02a;
           =1 xdata BYTE REG2b        _at_ 0xc02b;
           =1 xdata BYTE REG2c        _at_ 0xc02c;
           =1 xdata BYTE REG2d        _at_ 0xc02d;
           =1 xdata BYTE REG2e        _at_ 0xc02e;
           =1 xdata BYTE REG2f        _at_ 0xc02f;
           =1 xdata BYTE REG30        _at_ 0xc030;
           =1 xdata BYTE REG31        _at_ 0xc031;
           =1 xdata BYTE REG32        _at_ 0xc032;
           =1 xdata BYTE REG33        _at_ 0xc033;
           =1 xdata BYTE REG34        _at_ 0xc034;
           =1 xdata BYTE REG35        _at_ 0xc035;
           =1 xdata BYTE REG36        _at_ 0xc036;
           =1 xdata BYTE REG37        _at_ 0xc037;
           =1 xdata BYTE REG38        _at_ 0xc038;
           =1 xdata BYTE REG39        _at_ 0xc039;
           =1 xdata BYTE REG3a        _at_ 0xc03a;
           =1 xdata BYTE REG3b        _at_ 0xc03b;
           =1 xdata BYTE REG3c        _at_ 0xc03c;
           =1 xdata BYTE REG3d        _at_ 0xc03d;
           =1 xdata BYTE REG3e        _at_ 0xc03e;
           =1 xdata BYTE REG3f        _at_ 0xc03f;
           =1 xdata BYTE REG40        _at_ 0xc040;
           =1 xdata BYTE REG41        _at_ 0xc041;
           =1 xdata BYTE REG42        _at_ 0xc042;
           =1 xdata BYTE REG43        _at_ 0xc043;
           =1 xdata BYTE REG44        _at_ 0xc044;
           =1 xdata BYTE REG45        _at_ 0xc045;
           =1 xdata BYTE REG46        _at_ 0xc046;
           =1 xdata BYTE REG47        _at_ 0xc047;
           =1 xdata BYTE REG48        _at_ 0xc048;
           =1 xdata BYTE REG49        _at_ 0xc049;
           =1 xdata BYTE REG4a        _at_ 0xc04a;
           =1 xdata BYTE REG4b        _at_ 0xc04b;
           =1 xdata BYTE REG4c        _at_ 0xc04c;
           =1 xdata BYTE REG4d        _at_ 0xc04d;
           =1 xdata BYTE REG4e        _at_ 0xc04e;
           =1 xdata BYTE REG4f        _at_ 0xc04f;
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 60  

           =1 xdata BYTE REG50        _at_ 0xc050;
           =1 xdata BYTE REG51        _at_ 0xc051;
           =1 xdata BYTE REG52        _at_ 0xc052;
           =1 xdata BYTE REG53        _at_ 0xc053;
           =1 xdata BYTE REG54        _at_ 0xc054;
           =1 xdata BYTE REG55        _at_ 0xc055;
           =1 xdata BYTE REG56        _at_ 0xc056;
           =1 xdata BYTE REG57        _at_ 0xc057;
           =1 xdata BYTE REG58        _at_ 0xc058;
           =1 xdata BYTE REG59        _at_ 0xc059;
           =1 xdata BYTE REG5a        _at_ 0xc05a;
           =1 xdata BYTE REG5b        _at_ 0xc05b;
           =1 xdata BYTE REG5c        _at_ 0xc05c;
           =1 xdata BYTE REG5d        _at_ 0xc05d;
           =1 xdata BYTE REG5e        _at_ 0xc05e;
           =1 xdata BYTE REG5f        _at_ 0xc05f;
           =1 xdata BYTE REG60        _at_ 0xc060;
           =1 xdata BYTE REG61        _at_ 0xc061;
           =1 xdata BYTE REG62        _at_ 0xc062;
           =1 xdata BYTE REG63        _at_ 0xc063;
           =1 xdata BYTE REG64        _at_ 0xc064;
           =1 xdata BYTE REG65        _at_ 0xc065;
           =1 xdata BYTE REG66        _at_ 0xc066;
           =1 xdata BYTE REG67        _at_ 0xc067;
           =1 xdata BYTE REG68        _at_ 0xc068;
           =1 xdata BYTE REG69        _at_ 0xc069;
           =1 xdata BYTE REG6a        _at_ 0xc06a;
           =1 xdata BYTE REG6b        _at_ 0xc06b;
           =1 xdata BYTE REG6c        _at_ 0xc06c;
           =1 xdata BYTE REG6d        _at_ 0xc06d;
           =1 xdata BYTE REG6e        _at_ 0xc06e;
           =1 xdata BYTE REG6f        _at_ 0xc06f;
           =1 xdata BYTE REG70        _at_ 0xc070;
           =1 xdata BYTE REG71        _at_ 0xc071;
           =1 xdata BYTE REG72        _at_ 0xc072;
           =1 xdata BYTE REG73        _at_ 0xc073;
           =1 xdata BYTE REG74        _at_ 0xc074;
           =1 xdata BYTE REG75        _at_ 0xc075;
           =1 xdata BYTE REG76        _at_ 0xc076;
           =1 xdata BYTE REG77        _at_ 0xc077;
           =1 xdata BYTE REG78        _at_ 0xc078;
           =1 xdata BYTE REG79        _at_ 0xc079;
           =1 xdata BYTE REG7a        _at_ 0xc07a;
           =1 xdata BYTE REG7b        _at_ 0xc07b;
           =1 xdata BYTE REG7c        _at_ 0xc07c;
           =1 xdata BYTE REG7d        _at_ 0xc07d;
           =1 xdata BYTE REG7e        _at_ 0xc07e;
           =1 xdata BYTE REG7f        _at_ 0xc07f;
           =1 xdata BYTE REG80        _at_ 0xc080;
           =1 xdata BYTE REG81        _at_ 0xc081;
           =1 xdata BYTE REG82        _at_ 0xc082;
           =1 xdata BYTE REG83        _at_ 0xc083;
           =1 xdata BYTE REG84        _at_ 0xc084;
           =1 xdata BYTE REG85        _at_ 0xc085;
           =1 xdata BYTE REG86        _at_ 0xc086;
           =1 xdata BYTE REG87        _at_ 0xc087;
           =1 xdata BYTE REG88        _at_ 0xc088;
           =1 xdata BYTE REG89        _at_ 0xc089;
           =1 xdata BYTE REG8a        _at_ 0xc08a;
           =1 xdata BYTE REG8b        _at_ 0xc08b;
           =1 xdata BYTE REG8c        _at_ 0xc08c;
           =1 xdata BYTE REG8d        _at_ 0xc08d;
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 61  

           =1 xdata BYTE REG8e        _at_ 0xc08e;
           =1 xdata BYTE REG8f        _at_ 0xc08f;
           =1 xdata BYTE REG90        _at_ 0xc090;
           =1 xdata BYTE REG91        _at_ 0xc091;
           =1 xdata BYTE REG92        _at_ 0xc092;
           =1 xdata BYTE REG93        _at_ 0xc093;
           =1 xdata BYTE REG94        _at_ 0xc094;
           =1 xdata BYTE REG95        _at_ 0xc095;
           =1 xdata BYTE REG96        _at_ 0xc096;
           =1 xdata BYTE REG97        _at_ 0xc097;
           =1 xdata BYTE REG98        _at_ 0xc098;
           =1 xdata BYTE REG99        _at_ 0xc099;
           =1 xdata BYTE REG9a        _at_ 0xc09a;
           =1 xdata BYTE REG9b        _at_ 0xc09b;
           =1 xdata BYTE REG9c        _at_ 0xc09c;
           =1 xdata BYTE REG9d        _at_ 0xc09d;
           =1 xdata BYTE REG9e        _at_ 0xc09e;
           =1 xdata BYTE REG9f        _at_ 0xc09f;
           =1 xdata BYTE REGa0        _at_ 0xc0a0;
           =1 xdata BYTE REGa1        _at_ 0xc0a1;
           =1 xdata BYTE REGa2        _at_ 0xc0a2;
           =1 xdata BYTE REGa3        _at_ 0xc0a3;
           =1 xdata BYTE REGa4        _at_ 0xc0a4;
           =1 xdata BYTE REGa5        _at_ 0xc0a5;
           =1 xdata BYTE REGa6        _at_ 0xc0a6;
           =1 xdata BYTE REGa7        _at_ 0xc0a7;
           =1 xdata BYTE REGa8        _at_ 0xc0a8;
           =1 xdata BYTE REGa9        _at_ 0xc0a9;
           =1 xdata BYTE REGaa        _at_ 0xc0aa;
           =1 xdata BYTE REGab        _at_ 0xc0ab;
           =1 xdata BYTE REGac        _at_ 0xc0ac;
           =1 xdata BYTE REGad        _at_ 0xc0ad;
           =1 xdata BYTE REGae        _at_ 0xc0ae;
           =1 xdata BYTE REGaf        _at_ 0xc0af;
           =1 xdata BYTE REGb0        _at_ 0xc0b0;
           =1 xdata BYTE REGb1        _at_ 0xc0b1;
           =1 xdata BYTE REGb2        _at_ 0xc0b2;
           =1 xdata BYTE REGb3        _at_ 0xc0b3;
           =1 xdata BYTE REGb4        _at_ 0xc0b4;
           =1 xdata BYTE REGb5        _at_ 0xc0b5;
           =1 xdata BYTE REGb6        _at_ 0xc0b6;
           =1 xdata BYTE REGb7        _at_ 0xc0b7;
           =1 xdata BYTE REGb8        _at_ 0xc0b8;
           =1 xdata BYTE REGb9        _at_ 0xc0b9;
           =1 xdata BYTE REGba        _at_ 0xc0ba;
           =1 xdata BYTE REGbb        _at_ 0xc0bb;
           =1 xdata BYTE REGbc        _at_ 0xc0bc;
           =1 xdata BYTE REGbd        _at_ 0xc0bd;
           =1 xdata BYTE REGbe        _at_ 0xc0be;
           =1 xdata BYTE REGcf        _at_ 0xc0cf;
           =1 xdata BYTE REGc0        _at_ 0xc0c0;
           =1 xdata BYTE REGc1        _at_ 0xc0c1;
           =1 xdata BYTE REGc2        _at_ 0xc0c2;
           =1 xdata BYTE REGc3        _at_ 0xc0c3;
           =1 xdata BYTE REGc4        _at_ 0xc0c4;
           =1 xdata BYTE REGc5        _at_ 0xc0c5;
           =1 xdata BYTE REGc6        _at_ 0xc0c6;
           =1 xdata BYTE REGc7        _at_ 0xc0c7;
           =1 xdata BYTE REGc8        _at_ 0xc0c8;
           =1 xdata BYTE REGc9        _at_ 0xc0c9;
           =1 xdata BYTE REGca        _at_ 0xc0ca;
           =1 xdata BYTE REGcb        _at_ 0xc0cb;
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 62  

           =1 xdata BYTE REGcc        _at_ 0xc0cc;
           =1 xdata BYTE REGcd        _at_ 0xc0cd;
           =1 xdata BYTE REGce        _at_ 0xc0ce;
           =1 xdata BYTE REGcf        _at_ 0xc0cf;
           =1 xdata BYTE REGd0        _at_ 0xc0d0;
           =1 xdata BYTE REGd1        _at_ 0xc0d1;
           =1 xdata BYTE REGd2        _at_ 0xc0d2;
           =1 xdata BYTE REGd3        _at_ 0xc0d3;
           =1 xdata BYTE REGd4        _at_ 0xc0d4;
           =1 xdata BYTE REGd5        _at_ 0xc0d5;
           =1 xdata BYTE REGd6        _at_ 0xc0d6;
           =1 xdata BYTE REGd7        _at_ 0xc0d7;
           =1 xdata BYTE REGd8        _at_ 0xc0d8;
           =1 xdata BYTE REGd9        _at_ 0xc0d9;
           =1 xdata BYTE REGda        _at_ 0xc0da;
           =1 xdata BYTE REGdb        _at_ 0xc0db;
           =1 xdata BYTE REGdc        _at_ 0xc0dc;
           =1 xdata BYTE REGdd        _at_ 0xc0dd;
           =1 xdata BYTE REGde        _at_ 0xc0de;
           =1 xdata BYTE REGdf        _at_ 0xc0df;
           =1 xdata BYTE REGe0        _at_ 0xc0e0;
           =1 xdata BYTE REGe1        _at_ 0xc0e1;
           =1 xdata BYTE REGe2        _at_ 0xc0e2;
           =1 xdata BYTE REGe3        _at_ 0xc0e3;
           =1 xdata BYTE REGe4        _at_ 0xc0e4;
           =1 xdata BYTE REGe5        _at_ 0xc0e5;
           =1 xdata BYTE REGe6        _at_ 0xc0e6;
           =1 xdata BYTE REGe7        _at_ 0xc0e7;
           =1 xdata BYTE REGe8        _at_ 0xc0e8;
           =1 xdata BYTE REGe9        _at_ 0xc0e9;
           =1 xdata BYTE REGea        _at_ 0xc0ea;
           =1 xdata BYTE REGeb        _at_ 0xc0eb;
           =1 xdata BYTE REGec        _at_ 0xc0ec;
           =1 xdata BYTE REGed        _at_ 0xc0ed;
           =1 xdata BYTE REGee        _at_ 0xc0ee;
           =1 xdata BYTE REGef        _at_ 0xc0ef;
           =1 xdata BYTE REGf0        _at_ 0xc0f0;
           =1 xdata BYTE REGf1        _at_ 0xc0f1;
           =1 xdata BYTE REGf2        _at_ 0xc0f2;
           =1 xdata BYTE REGf3        _at_ 0xc0f3;
           =1 xdata BYTE REGf4        _at_ 0xc0f4;
           =1 xdata BYTE REGf5        _at_ 0xc0f5;
           =1 xdata BYTE REGf6        _at_ 0xc0f6;
           =1 xdata BYTE REGf7        _at_ 0xc0f7;
           =1 xdata BYTE REGf8        _at_ 0xc0f8;
           =1 xdata BYTE REGf9        _at_ 0xc0f9;
           =1 xdata BYTE REGfa        _at_ 0xc0fa;
           =1 xdata BYTE REGfb        _at_ 0xc0fb;
           =1 xdata BYTE REGfc        _at_ 0xc0fc;
           =1 xdata BYTE REGfd        _at_ 0xc0fd;
           =1 xdata BYTE REGfe        _at_ 0xc0fe;
           =1 xdata BYTE REGff        _at_ 0xc0ff;
           =1 #endif  // internal MCU only variables
 266      =1  
 267      =1  #endif  //__VARIABLES__
 268      =1  
  23          #include <math.h>
   1      =1  /*--------------------------------------------------------------------------
   2      =1  MATH.H
   3      =1  
   4      =1  Prototypes for mathematic functions.
   5      =1  Copyright (c) 1988-2002 Keil Elektronik GmbH and Keil Software, Inc.
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 63  

   6      =1  All rights reserved.
   7      =1  --------------------------------------------------------------------------*/
   8      =1  
   9      =1  #ifndef __MATH_H__
  10      =1  #define __MATH_H__
  11      =1  
  12      =1  #pragma SAVE
  13      =1  #pragma REGPARMS
  14      =1  extern char  cabs  (char  val);
  15      =1  extern int    abs  (int   val);
  16      =1  extern long  labs  (long  val);
  17      =1  extern float fabs  (float val);
  18      =1  extern float sqrt  (float val);
  19      =1  extern float exp   (float val);
  20      =1  extern float log   (float val);
  21      =1  extern float log10 (float val);
  22      =1  extern float sin   (float val);
  23      =1  extern float cos   (float val);
  24      =1  extern float tan   (float val);
  25      =1  extern float asin  (float val);
  26      =1  extern float acos  (float val);
  27      =1  extern float atan  (float val);
  28      =1  extern float sinh  (float val);
  29      =1  extern float cosh  (float val);
  30      =1  extern float tanh  (float val);
  31      =1  extern float atan2 (float y, float x);
  32      =1  
  33      =1  extern float ceil  (float val);
  34      =1  extern float floor (float val);
  35      =1  extern float modf  (float val, float *n);
  36      =1  extern float fmod  (float x, float y);
  37      =1  extern float pow   (float x, float y);
  38      =1  
  39      =1  #pragma RESTORE
  40      =1  
  41      =1  #endif
  24          #include "main.h"
   1      =1  #ifndef __MAIN__
           =1 #define __MAIN__
           =1 
           =1 #define ON                                      1
           =1 #define OFF                                     0
           =1 //#define Hs_debug
           =1 //#define       DVR
           =1 
           =1 //================= DIP SW Definition =========================================
           =1 ///#define PIXEL_SINGLE         P0_0
           =1 #define DIP_PANEL_SWITCH        P0_0    // Samsung(0) // Sharp-Noticon(1)
           =1 #define DIP_AUTO_DETECT         P0_1
           =1 #define DIP_EDGE_ENHANCE        P0_2
           =1 #define DIP_BW_STRETCH          P0_3
           =1 
           =1 #define Panel_Enable()          P4=P4|0x08 //andy 980908
           =1 #define Panel_Disable()                 P4=P4&0xf7
           =1 
           =1 #define SetBacklight()      P4=P4|0x04
           =1 #define clrBacklight()      P4=P4&0xfb
           =1 
           =1 
           =1 //InputSelection
           =1 struct struct_IdName {
           =1         BYTE    Id;
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 64  

           =1         BYTE    Name[16];
           =1 };
           =1 
           =1 #define CH_TW2835              1
           =1 #define CH_CAMD                2
           =1 #define CH_AV                  3
           =1 #define PC                                         7
           =1 #define ChineseDefaultMenu   8
           =1 
           =1 #define SVIDEO                          2
           =1 #define COMPONENT                       3
           =1 //#define ANALOGDTV                     4
           =1 #define DTV                                     4
           =1 #define TV                                      5
           =1 #define SCART                           6
           =1 
           =1 #define DIGITALVGA                      8
           =1 
           =1 #define AIRTV                           0 //9
           =1 #define CABLETV                         1 //0xa
           =1 
           =1 
           =1 #define TVTUNER                         0xd             //10
           =1 #define MUTE                            1       
           =1 #define MENU                            2       
           =1 #define TVVOL                           4       
           =1 #define CC                                      8       
           =1 #define INPUTINFO                       0x10
           =1 #define PCINFO                          0x20
           =1 #define GAUGEINFO           0x40
           =1 //#define RATINGINFO                    0x40
           =1 #define TVCHN                           0x80
           =1 //#define MUTE                          0x40
           =1 
           =1 #define YPBPR_480i                      0
           =1 #define YPBPR_576i                      1
           =1 #define YPBPR_480p                      2
           =1 #define YPBPR_576p                      3
           =1 #define YPBPR_1080i                     4
           =1 #define YPBPR_720p                      5
           =1 #define YPBPR_720p50            6
           =1 
           =1 
           =1 //--------------------------- P0 Define -----------------------------
           =1 #define SEL_MIX                 P0_6    // 
           =1 //--------------------------- P1 Define -----------------------------
           =1 #define SEL_DVI                 P3_5    //LJY062001             
           =1 
           =1 #define TW88HWReset                     P3_4    //LJY001010 //LJY000721
           =1 #define PowerUp             P1_4
           =1 //======================= CDS Control ================================= 
           =1 #define CDS_CTRL           P1_5
           =1 extern BYTE     SelectModeType;
           =1 extern BYTE InputSelection;
           =1 extern BYTE SEQTime;
           =1 extern BYTE     Priority;
           =1 extern BYTE AutoDayNight;
           =1 extern BYTE PowerFlag;
           =1 
           =1 BYTE keyIn(void);
           =1 void TimerForRemocon(void);
           =1 void TimerForTick(void);
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 65  

           =1 void DisableRemoconInt(void);
           =1 BYTE SetSupport_remocon(BYTE newd);
           =1 
           =1 void delay(BYTE cnt);
           =1 
           =1 BYTE RS_ready(void);
           =1 BYTE RS_rx(void);
           =1 void RS_tx(BYTE tx_buf);
           =1 
           =1 BYTE RS2_rx(void);
           =1 void RS2_tx(BYTE tx_buf);
           =1 
           =1 void NewLine(void);
           =1 void PutsP(PDATA_P BYTE *ptr);
           =1 #ifdef Hs_debug
           =1 void MonWriteI2C(BYTE addr, BYTE index, BYTE val);
           =1 BYTE MonReadI2C(BYTE addr, BYTE index);
           =1 #endif
           =1 BYTE Asc1Bin(BYTE asc);
           =1 BYTE Asc2Bin(PDATA_P BYTE *s);
           =1 
           =1 void I2CDeviceInitialize( CODE_P BYTE *RegSet);
           =1 
           =1 //void RestartSystemClock(WORD clock_hm);
           =1 WORD GetTime_ms(void);
           =1 BYTE GetTime_H(void);
           =1 BYTE GetTime_M(void);
           =1 void ChangeTime_H( char add );
           =1 void ChangeTime_M( char add );
           =1 //WORD GetWakeupTime(void);
           =1 //void SetWakeupTime(WORD wtime);
           =1 
           =1 
           =1 //WORD GetOffTime(void);
           =1 //void SetOffTime(WORD wtime);
           =1 //BYTE GetSleepTimer(void);
           =1 //void SetSleepTimer(BYTE stime);
           =1 WORD DiffTime_ms( WORD stime, WORD etime );
           =1 //void SetLastBlockedTime(void);
           =1 void SetLastCCTime(void);                               //ljy010904...CC_FIX_CLEAR_ON_TIME
           =1 
           =1 void SetOSDLastKeyInTime(void);
           =1 WORD GetOSDLastKeyInTime(void);
           =1 WORD GetIVF(void);
           =1 DWORD GetIHF(void);
           =1 BYTE ReadVInputSTD(void);
           =1 void SetVInputStd(BYTE newd);
           =1 BYTE GetVInputStd(void);
           =1 BYTE GetInputSelection(void);
           =1 #ifdef ADD_ANALOGPANEL
           =1 BYTE IsAnalogOn(void);
           =1 #endif
           =1 void InitVideoData(BYTE src);
           =1 void ChangeVInputStdDetectMode(BYTE val);
           =1 BYTE GetVInputStdInx(void);
           =1 
           =1 void MonWriteI2Cn_(BYTE addr, BYTE *val, BYTE cnt) ;
           =1 
           =1 ///void Usage(void);
           =1 #ifdef Hs_debug
           =1         void Prompt(void);
           =1 #endif
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 66  

           =1 void DebugKeyIn(BYTE ikey);
           =1 void DVIPowerDown(bit flag);
           =1 void PowerDown_XTAL(bit flag);
           =1 
           =1 void ChangeInput(BYTE newsel);
           =1 
           =1 
           =1 void WaitPowerOn(void);
           =1 void PowerOff(void);
           =1 BYTE GetNextInputSelection(void);
           =1 
           =1 BYTE WantToStopTVScan(void);
           =1 
           =1 //BYTE IsTW8801(void);
           =1 //BYTE IsTW8803(void);
           =1 //BYTE ConvertVideoVSAT(BYTE reg);
           =1 
           =1 BYTE IsNoInput(void);
           =1 void LoadEEPROM (void);
           =1 void Hs_InitVars(void);
           =1 void AdjustAutoDayNight(BYTE val);
           =1 void ACCPowerControl(void);
           =1 struct RegisterInfo
           =1 {
           =1    int  Min;
           =1    int  Max;
           =1    int  Default;
           =1 };
           =1 struct LongRegisterInfo
           =1 {
           =1    WORD Min;
           =1    WORD Max;
           =1    WORD Default;
           =1 };
           =1 
           =1 #endif  // __MAIN__
  25          
  26          #include "HS_DisplayOSD.h"
   1      =1  #ifndef _HS_DisplayOSD_
   2      =1  #define _HS_DisplayOSD_
   3      =1  
   4      =1  
   5      =1  
   6      =1  
   7      =1  
   8      =1  #define         NORMAL_Record   0x01
   9      =1  #define         Manual_Record   0x02
  10      =1  #define         ALARM_Record    0x04
  11      =1  #define         OverWrite_Record        0x80
  12      =1  
  13      =1  void DisplayGaugeOSD(void);
  14      =1  void ClearGAUGEINFO(void);
  15      =1  void DisplaylockOSD(void); 
  16      =1  void DisplayactvOSD(void); 
  17      =1  
  18      =1  
  19      =1  void DisplayNumber(BYTE addr,WORD val,BYTE type);
  20      =1  
  21      =1  //#ifdef SUPPORT_SDCARD
  22      =1  void DisplayDVRStatus(void);
  23      =1  void DisplayFormatOSD(void);
  24      =1  void DisplayFormatOkOSD(void);
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 67  

  25      =1  void DisplayFormatFailOSD(void);
  26      =1  void DisplayFWUpDate(void);
  27      =1  void DisplayFWUpDateOK(void);
  28      =1  void DisplayFWUpDateFail(void);
  29      =1  void DisplayFWVersion(void) ;
  30      =1  void DisplayDVRnotReady(void);
  31      =1  //#endif                //#ifdef SUPPORT_SDCARD
  32      =1  #endif
  27          
  28          #define ClearRemoTimer()        TR2 = 0
  29          
  30          
  31          
  32          
  33          extern            BYTE  DebugLevel;
  34          #ifdef REMO_RC5
              extern  BYTE RemoDataReady;
              #endif
  37          extern  BYTE RemoSystemCode, RemoDataCode;
  38          extern  BYTE InputSelection;
  39          extern            BYTE  VInputStdDetectMode;
  40          extern  BYTE  VInputStd;
  41          
  42          extern  BYTE    PcMode;
  43          //extern                  bit   AutoDetect;
  44          extern            bit   NoInitAccess;
  45          extern            bit   GetDATETIMEflag;
  46          
  47          //===================== Timer =================================================
  48                          DATA BYTE keytic=0;
  49                          DATA BYTE Key=0;
  50                          bit KeyReady=0, RepeatKey = 0;
  51          
  52                          DATA BYTE tm001;
  53                          DATA  WORD  stopWatch;
  54                          DATA  WORD  tm01=0;
  55                          DATA  BYTE  tic01=0;    //, tic_pc;
  56                          DATA  WORD  tic_pc=0;
  57          
  58                          DATA DWORD      SystemClock;                    //00:00
  59          //              xdata DWORD     LastBlockedTime;                //00:00
  60          //static  DATA WORD     WakeupTime;
  61          //static  DATA BYTE     WakeupPR;
  62          
  63          //               WORD   OffTime;         
  64          //               BYTE   SleepTimer;
  65          //               WORD   SleepTime;
  66          #ifdef CHIP_MANUAL_TEST //==============================================================
              extern  BYTE ManualFrequency;
              extern  bit             OnChipTest;
              #endif                  //==============================================================
  70          
  71          #ifdef SERIAL //=======================================================================
  72          
  73          
  74          
  75          
  76          static  DATA BYTE       RS_buf[BUF_MAX];
  77                          DATA BYTE       RS_buf2[BUF_MAX];
  78                          DATA BYTE       DVR_buf[DVR_BUF_MAX];
  79          
  80                          
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 68  

  81                          DATA BYTE   RS_in, RS_out;
  82                          DATA BYTE   RS2_in;
  83                          bit             RS_Xbusy=0;                     // bit RS_Xbusy=0;
  84                          bit             RS2_Xbusy=0;            // bit RS_Xbusy=0;
  85                          
  86          
  87          #endif  // SERIAL ======================================================================
  88          //================== Remocon ==================================================
  89          #ifdef REMO_RC5
              
              static  bit         RemoPhase1, RemoPhase2;
                      IDATA   BYTE    RemoDataReady=0;
                      IDATA   BYTE  RemoSystemCode, RemoDataCode;
              
              #elif defined REMO_NEC
              
              static  bit         RemoPhase=0;
              static  IDATA   BYTE  RemoStep=0;
              static  IDATA   BYTE  RemoHcnt, RemoLcnt;
                              IDATA   BYTE     RemoData[4];
                          IDATA BYTE  RemoDataReady=0;
              static  IDATA BYTE  RemoNum, RemoBit;
              
                          IDATA BYTE  RemoDataCode=0xff;
              #endif  //================== Remocon ======================
 106          BYTE    FormatWait=0;
 107          extern bit      FormatStart;
 108          BYTE    PowerDownWait=0;
 109          extern bit              PowerDownStart;
 110          
 111          extern BYTE     year1,year2,month,day,hour,minute,second;
 112          
 113          //====================HS 2835Command================ Andy AWT 980928
 114          code unsigned char *CommTable[] = { 
 115              {"hscom 1 1 ch0:1%1bx ch1:0%1bx ch2:0%1bx ch3:0%1bx\n\r"},        // INDEX_ID=0x00 CAM A
 116              {"hscom 1 1 ch1:1%1bx ch0:0%1bx ch2:0%1bx ch3:0%1bx\n\r"},        // INDEX_ID=0x01 CAM B
 117              {"hscom 1 1 ch2:1%1bx ch0:0%1bx ch1:0%1bx ch3:0%1bx\n\r"},        // INDEX_ID=0x02 CAM C
 118              {"hscom 1 1 ch3:1%1bx ch0:0%1bx ch1:0%1bx ch2:0%1bx\n\r"},        // INDEX_ID=0x03 CAM R
 119              {"hscom 2 2 ch0:1%1bx ch1:0%1bx ch2:0%1bx ch3:0%1bx\n\r"},        // INDEX_ID=0x04 CAM A+B
 120              {"hscom 2 2 ch2:0%1bx ch3:1%1bx ch0:0%1bx ch1:0%1bx\n\r"},        // INDEX_ID=0x05 CAM C+R
 121              {"hscom 2 2 ch0:0%1bx ch3:1%1bx ch1:0%1bx ch2:0%1bx\n\r"},        // INDEX_ID=0x06 CAM A+R
 122              {"hscom 2 2 ch3:1%1bx ch1:0%1bx ch0:0%1bx ch2:0%1bx\n\r"},        // INDEX_ID=0x07 CAM R+B
 123              {"hscom 3 1 ch3:1%1bx ch0:0%1bx ch1:0%1bx ch2:0%1bx\n\r"},        // INDEX_ID=0x08 CAM R+A+B T1
 124              {"hscom 3 3 ch0:0%1bx ch1:0%1bx ch3:1%1bx ch2:0%1bx\n\r"},        // INDEX_ID=0x09 CAM A+B+R T3
 125              {"hscom 3 4 ch0:0%1bx ch1:0%1bx ch3:1%1bx ch2:0%1bx\n\r"},        // INDEX_ID=0x0A CAM A+B+R T4
 126              {"hscom 4 1 ch0:0%1bx ch1:0%1bx ch2:0%1bx ch3:1%1bx\n\r"},        // INDEX_ID=0x0B CAM A+B+C+R
 127              {"hscom 2 2 ch0:1%1bx ch2:0%1bx ch1:0%1bx ch3:0%1bx\n\r"},        // INDEX_ID=0x0C CAM A+C
 128              {"hscom 2 2 ch2:1%1bx ch1:0%1bx ch0:0%1bx ch3:0%1bx\n\r"},        // INDEX_ID=0x0D CAM C+B  
 129              {"hscom 3 3 ch3:1%1bx ch0:0%1bx ch1:0%1bx ch2:0%1bx\n\r"},         // INDEX_ID=0x0E CAM R+AB //Ryan
 130          
 131            //Andy A1.4 2009 1 12 
 132              {"hscom 2 2 ch3:1%1bx ch2:0%1bx ch1:0%1bx ch0:0%1bx\n\r"},        // INDEX_ID=0x0F CAM R+C
 133              {"hscom 3 1 ch3:1%1bx ch0:0%1bx ch2:0%1bx ch1:0%1bx\n\r"},        // INDEX_ID=0x10 CAM R+A+C T1
 134              {"hscom 3 1 ch3:1%1bx ch1:0%1bx ch2:0%1bx ch0:0%1bx\n\r"},        // INDEX_ID=0x11 CAM R+B+C T1
 135              {"hscom 3 3 ch3:1%1bx ch0:0%1bx ch2:0%1bx ch1:0%1bx\n\r"},        // INDEX_ID=0x12 CAM R+AC T3
 136              {"hscom 3 3 ch3:1%1bx ch1:0%1bx ch2:0%1bx ch0:0%1bx\n\r"},         // INDEX_ID=0x13 CAM R+BC T3
 137            //Andy A1.4 2009 1 13 
 138              {"hscom 3 3 ch0:1%1bx ch1:0%1bx ch2:0%1bx ch3:0%1bx\n\r"},        // INDEX_ID=0x14 CAM A+B+C T3
 139              {"hscom 3 3 ch0:0%1bx ch2:0%1bx ch3:1%1bx ch1:0%1bx\n\r"},        // INDEX_ID=0x15 CAM A+C+R T3
 140            //Andy A1.4 2009 1 13 
 141              {"hscom 2 2 ch1:1%1bx ch0:0%1bx ch2:0%1bx ch3:0%1bx\n\r"},        // INDEX_ID=0x16 CAM B+A
 142              {"hscom 2 2 ch1:1%1bx ch2:0%1bx ch3:0%1bx ch0:0%1bx\n\r"},        // INDEX_ID=0x17 CAM B+C
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 69  

 143              {"hscom 2 2 ch1:0%1bx ch3:1%1bx ch2:0%1bx ch0:0%1bx\n\r"},        // INDEX_ID=0x18 CAM B+R
 144              {"hscom 3 3 ch1:1%1bx ch0:0%1bx ch2:0%1bx ch3:0%1bx\n\r"},        // INDEX_ID=0x19 CAM B+A+C T3
 145              {"hscom 3 3 ch1:0%1bx ch0:0%1bx ch3:1%1bx ch2:0%1bx\n\r"},        // INDEX_ID=0x1A CAM B+A+R T3
 146              {"hscom 3 3 ch1:0%1bx ch2:0%1bx ch3:1%1bx ch0:0%1bx\n\r"},        // INDEX_ID=0x1B CAM B+C+R T3
 147            //Andy A1.4 2009 1 13 //C trigger    
 148              {"hscom 2 2 ch2:1%1bx ch0:0%1bx ch1:0%1bx ch3:0%1bx\n\r"},        // INDEX_ID=0x1C CAM C+A
 149              {"hscom 2 2 ch2:1%1bx ch1:0%1bx ch3:0%1bx ch0:0%1bx\n\r"},        // INDEX_ID=0x1D CAM C+B
 150              {"hscom 2 2 ch2:0%1bx ch3:1%1bx ch1:0%1bx ch0:0%1bx\n\r"},        // INDEX_ID=0x1E CAM C+R
 151              {"hscom 3 3 ch2:1%1bx ch0:0%1bx ch1:0%1bx ch3:0%1bx\n\r"},        // INDEX_ID=0x1F CAM C+A+B T3
 152              {"hscom 3 3 ch2:0%1bx ch0:0%1bx ch3:1%1bx ch1:0%1bx\n\r"},        // INDEX_ID=0x20 CAM C+A+R T3
 153              {"hscom 3 3 ch2:0%1bx ch1:0%1bx ch3:1%1bx ch0:0%1bx\n\r"},        // INDEX_ID=0x21 CAM C+B+R T3
 154          };
 155          //=========================End===================
 156          
 157          
 158          
 159          
 160          
 161          CODE BYTE PanelInfoStr[]={
 162          #if (defined UXGA)                                              // 1600 x 1200
                      "---> Panel: UXGA-1600*1200"
              #elif (defined SXGA)                                            // 1280 x 1024
                      "---> Panel: SXGA-1280*1024"
              #elif (defined  XGA)                                            // 1024 x 768
                      "---> Panel: XGA-1024*768"
              #elif (defined SVGA)                                            //  800 x 600
                      "---> Panel: SVGA-800*600"
              #elif (defined VGA)                                             //  640 x 480
                      "---> Panel: VGA-640*480"
              #elif (defined WXGA)                                            // 1280 x 768 (15:9) // 1366 x 768 (16:9)
                      "---> Panel: WXGA-1280*768(15:9) or 1366*768(16:9)"
              #elif (defined WSVGA)                                           // 1024 x 600   *** only video mode
                      "---> Panel: WSVGA-1024*600"
              #elif (defined WVGA)                                            //  800 x 480
 177                  #ifdef AU_10INCH
                      "---> Panel: WVGA-800*480 -- TTL AU 10inch"
                      #elif (defined SAMSUNG_10INCH)
                      "---> Panel: WVGA-800*480 -- TTL SAMSUNG 10inch"
                      #elif (defined SAMSUNG_TICONLESS_10INCH)
                      "---> Panel: WVGA-800*480 -- TICONLESS SAMSUNG 10inch"
                      #elif (defined SHARP_TICONLESS_7INCH)
                      "---> Panel: WVGA-800*480 -- TICONLESS SHARP 7inch"
                      #elif (defined AU_TICONLESS_7INCH)
 186                  "---> Panel: WVGA-800*480 -- TICONLESS AU 7inch"
 187                  #elif (defined AU_TICONLESS_10INCH)
                      "---> Panel: WVGA-800*480 -- TICONLESS AU 10inch"
                      #elif defined HITACHI_T01
                      "---> Panel: WVGA-800*480 -- TICONLESS Hitachi TX18D24VM2BAA"
                      #elif defined HITACHI_TX23D12
                      "---> Panel: WVGA-800*480 -- TICONLESS Hitachi TX23D12"
                      #elif defined HITACHI_TX18D24
                      "---> Panel: WVGA-800*480 -- TICONLESS Hitachi TX18D24"
                      #else
                      "---> Panel: WVGA-800*480"
                      #endif
 198          #elif (defined HVGA)                                            //  480 x 320
                      "---> Panel: HVGA-480*320"
              #elif (defined QVGA)                                            //  320 x 240   *** only video mode
                      "---> Panel: QVGA-320*240"
              #elif (defined WQVGA)                                           //  480 x 234   *** only video mode
                  #ifdef ANALOG_7INCH
                      "---> Panel: WQVGA-480*234 -- ANALOG TICONLESS AU 7inch"
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 70  

                      #elif (defined SHARP_LQ043T3DX02)
                      "---> Panel: WQVGA-480*234 -- TTL SHARP LED 4.3inch panel"
                      #else
                      "---> Panel: WQVGA-480*234 "
                      #endif
              #endif
 211          };
 212          
 213          #ifdef ADD_ANALOGPANEL          // Added Analog panel(AU7") from default set panel(expect WQVGA) with DIP #1 switc
             -h.(DIP#1=L:ANALOG, H:DEFAULT)
              CODE BYTE AddedAnalogPanelStr[]={
                              #ifdef ADD_ANALOG_7INCH
                      "---> Added Analog Panel(AU 7inch) with DIP SW1=Enabled"
                              #elif defined ADD_TMD_LTA05B352A
                      "---> Added Analog Panel(TMD 4inch) with DIP SW1=Enabled"
                              #endif
              };
              #endif
 222          
 223          
 224          
 225          #if 0           //william-981029
              //=============================================================================
              //                            CheckSpecialMode                                                   
              //=============================================================================
              void CheckSpecialMode(void)
              {
                      BYTE i;
              
                      i = GetKey(0);
              
                      switch( i ) {
                      case MENUKEY:
                              Puts("\r\n---- Menu Key is pressed -> Enter Special Mode( To Composite )");
                              SaveInputSelectionEE(CH_TW2835);
                              DebugLevel = 0;
              ///             PcDetectFlag = 0;
                              break;
                      }
              }
              #endif
 245          //=============================================================================
 246          //    Main Initialize Routine
 247          //=============================================================================
 248          void main_init (void)
 249          {
 250   1              extern CODE BYTE *OutOfRangeStr[] ;
 251   1      
 252   1              //BYTE  ikey;
 253   1              WORD    rev;
 254   1      
 255   1      //      WriteTW88(0xff, 0x10);  // Disable I2C auto increase mode
 256   1              WriteTW88(0xe0, 0x10);  // Disable I2C auto increase mode
 257   1      
 258   1              //PowerLED(ON);
 259   1      
 260   1              //EnableRemoconInt();
 261   1      #if 0           //981103
                      ikey = ResetMSP();
                      if( ikey ) 
                      {
                              #ifdef DEBUG
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 71  

                              dPrintf("\r\nError on resetting MSP:0x%02x", (WORD)ikey);
                              #endif
                      }
              #endif
 270   1              rev = GetFWRevEE();
 271   1              Printf("\r\nPrev.FW:%04x", rev);
 272   1      
 273   1              if( GetFWRevEE()!=FWVER )       // exist EEPROM
 274   1              {                                       
 275   2                      Printf("\r\nCurr.FW:%04x", (WORD)FWVER);
 276   2                      SaveFWRevEE(FWVER);
 277   2                      Printf("\r\nCurr.FW:%04x", (WORD)GetFWRevEE());
 278   2              }
 279   1              
 280   1      
 281   1              //---------- if FW version is not matched, initialize EEPROM data -----------
 282   1      
 283   1              if( GetFWRevEE()==FWVER )
 284   1              {                                       // exist EEPROM
 285   2                      if( rev != FWVER ) 
 286   2                      {                                       //
 287   3                              SaveDebugLevelEE(DebugLevel);
 288   3                              //Printf("\r\nNew DebugLevel:%02x", (WORD)DebugLevel);//andy awt084 980928
 289   3      
 290   3                              SaveInputSelectionEE(CH_TW2835);
 291   3                              ClearBasicEE();
 292   3      
 293   3                              #ifdef SUPPORT_PC
 294   3                              ResetPanelAttributeValue();
 295   3                              SaveDefaultPCDataAllEE();
 296   3                              #endif
 297   3                      }
 298   2                      else 
 299   2                      {
 300   3                              DebugLevel = GetDebugLevelEE();
 301   3                              //Printf("\r\nSaved DebugLevel:%02x", (WORD)DebugLevel);//andy awt084 980928
 302   3                      }
 303   2      
 304   2              }
 305   1              else 
 306   1              {
 307   2                      Printf("\r\nCannot access EEPROM!!!!");
 308   2                      Printf("\r\nNo initialize");
 309   2                      DebugLevel = 0xff;
 310   2                      SetVInputStd( NTSC );
 311   2                      InitVideoData(VInputStd);
 312   2                      DisplayLogo();
 313   2                      LCDPowerON(0);
 314   2                      return;
 315   2              }
 316   1      
 317   1              #ifdef SUPPORT_GAMMA
                      DownLoadGamma();
                      #endif
 320   1      
 321   1              VInputStdDetectMode = GetVInputStdDetectModeEE();
 322   1              if( VInputStdDetectMode != AUTO )
 323   1                      SetVInputStd( VInputStdDetectMode );
 324   1              else
 325   1                      SetVInputStd( NTSC );
 326   1              SetPossibleAutoDetectStdEE();
 327   1      
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 72  

 328   1              //InputSelectionInx  = 0;
 329   1              InputSelection  = UNKNOWN;              //GetInputSelectionEE();
 330   1              InitVideoData(VInputStd);
 331   1      
 332   1              //ChangeInput( GetInputSelectionEE() );
 333   1      
 334   1              Change_OSDColorLookup();
 335   1      
 336   1      
 337   1              DownloadUDFont();
 338   1      
 339   1      
 340   1              delay(100);
 341   1              
 342   1              //AutoDetect = 0;
 343   1              
 344   1              
 345   1      #ifdef Hs_debug 
                      Prompt();
              #endif
 348   1      
 349   1      
 350   1              //////////////////////////////////////////////////////////////////////////////////
 351   1      
 352   1              WriteTW88( 0xd0, 0xff); // clear status
 353   1              WriteTW88( 0xd1, 0xff); // clear status
 354   1      
 355   1      }
 356          
 357          
 358          
 359          
 360          //=============================================================================
 361          //                            Initialize WINBOND CPU                                                   
 362          //=============================================================================
 363          void InitCPU(void)
 364          {
 365   1      
 366   1              CHPENR = 0x87;          // Enable AUX RAM in Winbond(W78E516B)
 367   1              CHPENR = 0x59;          //
 368   1              CHPCON = 0x10;          //
 369   1              CHPENR = 0x00;          // Write Disable
 370   1      
 371   1              /*----- Initialize interrupt -------------*/
 372   1      
 373   1              TH1 = 0xf4;             //    SMOD = 0      SMOD =1     //andy AWT 980924                                       
 374   1                                                      // 0ffh :57600 bps                              
 375   1                                                      // 0fdh : 9600 bps      0fdh :19200 bps                         
 376   1                                                      // 0fah : 4800 bps                                                              
 377   1                                                      // 0f4h : 2400 bps                                                              
 378   1                                                      // 0e8h : 1200 bps                                                              
 379   1      
 380   1              SCON = 0x50;            // 0100 0000 mode 1 - 8 bit UART                                
 381   1                                                      // Enable serial reception                                              
 382   1          TMOD = 0x22;                // 0010 0010 timer 0 - 8 bit auto reload                
 383   1                                                      // timer 1 - baud rate generator                                
 384   1          TCON = 0x55;                // 0101 0001 timer 0,1 run                                              
 385   1                                                      // int 0,  edge triggered                                               
 386   1                                                      // int 1,  edge triggered                                               
 387   1                                                      // TF1 TR1 TF0 TR0      EI1 IT1 EI0 IT0                         
 388   1              TH0 = TL0 = 64;         // 64=4608 Hz at 11.0592MHz
 389   1      
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 73  

 390   1              PCON = 0x80;            // 0000 0000 SMOD(double baud rate bit) = 1             
 391   1              IP       = 0x02;                // 0000 0000 interrupt priority                                 
 392   1                                                      // -  - PT2 PS PT1 PX1 PT0 PX0                           
 393   1      
 394   1              #ifdef SERIAL
 395   1              IE       = 0x92;                // 1001 0010 interrupt enable:Serial,TM0                
 396   1                                                      // EA - ET2 ES ET1 EX1 ET0 EX0                                  
 397   1      
 398   1              TI       = 1;                   // LJY000724 // For Starting Serial TX 
 399   1              ES   = 1;                       // LJY000724
 400   1              #else
                      IE   = 0x82;
                      #endif // SERIAL
 403   1      
 404   1              //------------ Timer 2 for Remocon --------------------------------
 405   1              T2CON  = 0x00;                          // Timer2 Clear
 406   1              TR2        = 0;
 407   1              ET2    = 1;
 408   1              //-----------------------------------------------------------------
 409   1      
 410   1              //Uart2
 411   1              //P0M0=0x7F;
 412   1              P1M0=0x04;
 413   1          S2CON=0x50;                                 //Set UART Mode 1
 414   1          S2BRT=0xf4;                                 //Set 2UART overflow rate
 415   1          //AUXR2=0x08;                                 //SMOD = 1,TX12 = 0 (/12)
 416   1          //AUXR2|=0x10;                                //S2TR = 1
 417   1              AUXR2 |= 0x18;
 418   1      
 419   1              // Enable serial interrupt
 420   1              AUXIE |= 0x10;
 421   1      
 422   1              RS2_Xbusy=0;
 423   1              CCAPM2=0x42;
 424   1              CCON    |=      0x40;                           //Start PCA Counter
 425   1       
 426   1              
 427   1      }
 428          
 429          //#define _ReadKey()            ( ((~P4>>2)& 0x01) | (~P1 & 0xfc) )
 430          #ifndef INTERNAL_MCU
 431          #define _ReadKey()      ((~P2 & 0xFc)) //ANDY awt 980907
 432          #else
              #define _ReadKey()              ( ((~P4>>2)& 0x01) | (~P1 & 0xfc) )
              #endif
 435          
 436          
 437          
 438          ////////////////////////////////
 439          
 440          //INTERRUPT(1, timer0_int)
 441          void timer0_int(void) interrupt 1 using 1                       // interrupt number1, bank register 2
 442          {
 443   1              tm001++;
 444   1              
 445   1              //---------- 0.01 sec timer ------------
 446   1              
 447   1              #ifdef CLOCK_11M
                      if( tm001 > 48 ) {                      // LJY001220 0.01sec
                      #elif defined CLOCK_22M
 450   1              if( tm001 > 48*2 ) {            // LJY001220 0.01sec
 451   2              #endif
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 74  

 452   2      
 453   2                      stopWatch++;
 454   2                      tm001 = 0;
 455   2                      tic01++;
 456   2                      
 457   2                      if( tic01==100 ) 
 458   2                      {                               // 1 sec
 459   3                              if(SEQTime<255) SEQTime++;
 460   3                              SystemClock++;
 461   3                              tic01 = 0;
 462   3                      //date  
 463   3                      second++;
 464   3                      if(FormatStart==1)
 465   3                              FormatWait++;
 466   3                      if(PowerDownStart==1)
 467   3                              PowerDownWait++;                        
 468   3                      if(second==60)
 469   3                              {
 470   4                              second=0;
 471   4                              minute++;
 472   4      
 473   4                              GetDATETIMEflag=1;
 474   4                              }
 475   3                      
 476   3                      if(minute==60)
 477   3                              {               
 478   4                              minute=0;
 479   4                              hour++;
 480   4                              }
 481   3                      
 482   3                      if(hour==24)
 483   3                              {
 484   4                              hour=0;
 485   4                              day++;
 486   4                              }                       
 487   3      
 488   3                      }
 489   2                      if( tic_pc!=0xffff ) 
 490   2                              tic_pc++;
 491   2      
 492   2              ///////////////////////////////////////////     
 493   2              if( _ReadKey() ) {
 494   3                      if( keytic==3 ) {
 495   4                              Key = _ReadKey();
 496   4                              RepeatKey = 0;
 497   4                              KeyReady = 1;
 498   4                      }
 499   3                      else if( keytic==100 ) {
 500   4                              Key = _ReadKey();
 501   4                              RepeatKey = 1;
 502   4                              KeyReady = 1;
 503   4                              keytic = 80;
 504   4                      }
 505   3                      keytic++;
 506   3              }
 507   2              else 
 508   2                      keytic = 0;
 509   2              ///////////////////////////////////////////     
 510   2              }
 511   1      }
 512          //------------------------------------------------------------------
 513          // void InitVars(void) - variable initialize
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 75  

 514          //------------------------------------------------------------------
 515          void    InitVars(void)
 516          {
 517   1              SystemClock=0;                  //00:00
 518   1              //LastBlockedTime=0xffffffff;           //00:00 //ljy010904...CC_FIX_CLEAR_ON_TIME..oops! previous vchip clear err
             -or 
 519   1              //OffTime=0xffff;
 520   1              //SleepTimer=0;
 521   1              //SleepTime=0xffff;
 522   1      
 523   1              SEL_DVI=  1;            // disable Digital VGA
 524   1              // ResetKey();
 525   1      
 526   1              DebugLevel              = 0;
 527   1      #ifdef REMO_RC5
                      RemoDataReady   = 0;
              #endif
 530   1              //P0_7 = 1;
 531   1              delay(100);
 532   1              PowerDown_XTAL(0);
 533   1              
 534   1              TW88HWReset = 1;        delay(1);
 535   1      }
 536          
 537          //------------------------------------------------------------------
 538          // void InitTechwell(void) - Techwell Decoder initialize
 539          //------------------------------------------------------------------
 540          void    InitTechwell( void )
 541          {
 542   1      
 543   1              #ifdef NO_INITIALIZE
                      if( P0_3==0 ) {// No Initialize
                              NoInitAccess =1;
                              Printf("\r\n No-initialize Test going on with DIP SW4 ..: %d\n", (WORD)P0_3);
                              return;
                      }
                      #endif
 550   1              #ifdef CHIP_MANUAL_TEST
                      if( P0_0==0 ) OnChipTest =1;
                      ManualFrequency = 2; //1;
                      #endif
 554   1      
 555   1              
 556   1      
 557   1              Puts("\r\n\nDetect ");
 558   1              
 559   1              switch( ReadTW88(0) ) {
 560   2                      case 0x21:      Puts("TW8816");         break;
 561   2                      case 0x22:      Puts("TW8816B");                break;
 562   2                      case 0x49:      Puts("TW8817");         break;
 563   2                      default:        Printf("Nothing --0x%02x\r\n", (WORD)ReadDecoder(0)); 
 564   2                              while(1) {
 565   3                                      #ifdef SERIAL
 566   3                                      if( RS_ready() ) break;
 567   3                                      #endif
 568   3      
 569   3                                      Printf("Check again --0x%02x\r\n", (WORD)ReadDecoder(0));
 570   3                                      delay(99);
 571   3                                      if( ReadTW88(0)==0 ) continue;
 572   3                                      if( ReadTW88(0)==0xff ) continue;
 573   3                                      break;
 574   3                              }
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 76  

 575   2      
 576   2                              delay(99);
 577   2                              delay(99);
 578   2                              Printf("Last Check --0x%02x\r\n", (WORD)ReadDecoder(0));
 579   2                      break;
 580   2              }
 581   1      
 582   1                      Printf("%s \n", PanelInfoStr);
 583   1              //CheckSpecialMode();           //william-981029
 584   1              
 585   1      
 586   1      }
 587          //=============================================================================
 588          //                            Power LED ON / OFF                                                   
 589          //=============================================================================
 590          void PowerLED(BYTE flag)
 591          {
 592   1      #define GREEN_LED       P3_5
 593   1      //#define RED_LED               P3_3            P4^1
 594   1      
 595   1              if( flag==ON ) {
 596   2                      GREEN_LED = 0;          // ON GREEN
 597   2                      P4=P4|0x02;             //RED_LED = 1;          // ON RED
 598   2                      dPuts("\r\n(PowerLED)-ON");
 599   2              }
 600   1              else {
 601   2                      GREEN_LED = 1;          // OFF FREEN
 602   2                      P4=P4&0xFD;             //RED_LED = 0;          // ON RED
 603   2                      dPuts("\r\n(PowerLED)-OFF");
 604   2              }
 605   1      }
 606          
 607          
 608          //------------------------ common routines with interrupts --------------------
 609          
 610          /*****************************************************************************/
 611          /*      Ext Int 1 Interrupt                                                  */
 612          /*****************************************************************************/
 613          //INTERRUPT(2, ext1_int)
 614          void    ext1_int(void) interrupt 2 using 1
 615          {
 616   1              EX1 = 0;
 617   1      }
 618          
 619          //****************************************************************************/
 620          //      Timer 0 Interrupt                                                  
 621          //                      If TL0 overflow,
 622          //                       .Invoke this interrupt
 623          //                       .TL0 <- TH0
 624          //                      TL0 is incremented every machine cycle
 625          //                      Every machine cycle is 12*Tosc(11.0592MHz)
 626          //
 627          //                      Every machine cycle = 1.085us
 628          //                      Interrupt interval = 208us ( 1.085*(256-64(TH0)) )
 629          //                      When tm001==48, it's 0.01sec.  48*208us
 630          //                                                      
 631          //****************************************************************************/
 632          
 633          
 634          //=============================================================================
 635          //                      Remocon
 636          //=============================================================================
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 77  

 637          
 638          #ifdef REMO_RC5
              
              void InitForRemo(void)
              {
                      WORD temp;
              
                      #if defined CLOCK_11M
              
                      #ifdef TECHWELL_REMOCON // DONGYANG
                      temp = 0x10000 - 193;   // 209.62us = 1.085*193
                      #else
                      temp = 0x10000 - 204;   // 221.34us = 1.085*204
                      #endif
                      
                      #elif defined CLOCK_22M
              
                      #ifdef TECHWELL_REMOCON // DONGYANG
                      temp = 0x10000 - 193*2; // 209.62us = 1.085/2*193*2
                      #else
                      temp = 0x10000 - 204*2; // 221.34us = 1.085/2*204*2
                      #endif
              
                      #elif defined CLOCK_27M         // intenal_mcu
              
                      #ifdef TECHWELL_REMOCON // DONGYANG
                      temp = 0x10000 - 20;    // 209.62us = 1/27 * 283 * 20 = 209.63uS
                      T2HIGH = 1;                     // 283 = 256 + 27
                      T2LOW = 27;                     // 
                      #else
                      temp = 0x10000 - 36;    // 221.34us = 1/27 * 166 * 36 = 221.33uS
                      T2HIGH = 0;                     // 
                      T2LOW = 166;                    // 
                      #endif
              
                      #endif
              
                      RCAP2H = TH2 = temp>>8;
                      RCAP2L = TL2 = (BYTE)(temp & 0xff);
                      TR2    = 1;
              
                      tm01 = 4;
                      RemoPhase1 = 1;
                      RemoSystemCode= RemoDataCode=0;
              }
              
              #elif defined REMO_NEC
              
              void InitForRemo(void)
              {
                      WORD temp;
              
                      #if defined CLOCK_11M
                      temp = 0x10000 - 173;   // 187.71us = 1.085*173
                      #elif defined CLOCK_22M
                      temp = 0x10000 - 173*2;
                      #elif defined CLOCK_27M 
                      T2HIGH = 0;                     // 
                      T2LOW = 252;                    // 
                      temp = 0x10000 - 20;    // 186.667uS = 1 /27 * 252 * 20
                      #endif
              
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 78  

                      RCAP2H = TH2 = temp>>8;
                      RCAP2L = TL2 = (BYTE)(temp & 0xff);
              
                      TR2 = 1;
              
                      tm01 = 0;
                      RemoStep  = 0;
                      RemoPhase = 0;
                      RemoHcnt  = 0;
                      RemoLcnt  = 0;
              }
              
              #endif
 712          
 713          #ifdef REMO_RC5
              
              ///****************************************************************************
              ///*      Ext Int 0 Interrupt                                                
              ///****************************************************************************
              //_interrupt(0) void remocon_int (void)
              //INTERRUPT(0, remocon_int)
              void    remocon_int(void) interrupt 0 using 1
              {
                      EX0 = 0;        // Enable Remocon (Enable Ext int0)
                      InitForRemo();
              }
              #endif
 726          //*****************************************************************************
 727          //      Serial Interrupt                                                   
 728          //*****************************************************************************
 729          #ifdef SERIAL
 730          
 731          //INTERRUPT(4, serial_int)
 732          void serial_int(void) interrupt 4 using 1               // register bank 1
 733          {
 734   1              
 735   1              //day++;
 736   1              //year2=RI;
 737   1              //year1=TI;
 738   1              if( RI ) {                                      //--- Receive interrupt ----
 739   2                      RI = 0;
 740   2                      RS_buf2[RS_in]=RS_buf[RS_in]=/*DVR_buf[RS_in]=*/ SBUF;//andy awt 980928
 741   2                      //month++;
 742   2                  RS_in++;
 743   2                      if( RS_in>=BUF_MAX/*DVR_BUF_MAX*/) RS_in = 0;
 744   2              }
 745   1      
 746   1              if( TI ) {                                      //--- Transmit interrupt ----
 747   2                      TI = 0;
 748   2                      RS_Xbusy=0;
 749   2              }
 750   1      }
 751          
 752          #if 1
 753          //INTERRUPT(12, serial2_int)
 754          void serial2_int(void) interrupt 12 using 1             
 755          {
 756   1              //--- Receive interrupt ----
 757   1              //day++;
 758   1              //year2=S2CON&0x0f;
 759   1              if ((S2CON & 0x01) == 0x01)
 760   1                      {                                       
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 79  

 761   2                      // Clear reception flag
 762   2                      S2CON = S2CON&0xfe;
 763   2                      DVR_buf[RS2_in] = S2BUF;
 764   2                      //month++;
 765   2                  RS2_in++;
 766   2                      if( RS2_in>=/*BUF_MAX*/DVR_BUF_MAX) RS2_in = 0;
 767   2              }
 768   1              
 769   1              if ((S2CON & 0x02) == 0x02)
 770   1              {
 771   2                      S2CON = S2CON&0xfd;
 772   2                      RS2_Xbusy = 0;
 773   2              }
 774   1      }
 775          
 776          #endif
 777          //=============================================================================
 778          //              Serial RX Check                                                                                                    
 779          //=============================================================================
 780          BYTE RS_ready(void)
 781          {
 782   1              if( RS_in == RS_out ) return 0;
 783   1              else return 1;
 784   1      }
 785          //=============================================================================
 786          //              Serial RX                                                                                                                  
 787          //=============================================================================
 788          BYTE RS_rx(void)
 789          {
 790   1              BYTE    ret;
 791   1                      
 792   1              ES = 0;
 793   1              ret = RS_buf[RS_out];
 794   1              RS_out++;
 795   1              if(RS_out >= BUF_MAX) 
 796   1                      RS_out = 0;
 797   1              ES = 1;
 798   1      
 799   1              return ret;
 800   1      }
 801          //=============================================================================
 802          //              Serial TX                                                                                                                  
 803          //=============================================================================
 804          void RS_tx(BYTE tx_buf)
 805          {
 806   1              while(RS_Xbusy);
 807   1              SBUF = tx_buf;
 808   1              RS_Xbusy=1;
 809   1      }
 810          
 811          
 812          
 813          //=============================================================================
 814          //              Serial2 TX                                                                                                                 
 815          //=============================================================================
 816          void RS2_tx(BYTE tx_buf)
 817          {
 818   1      #if 0
                      BYTE temp;      
              
                      temp = S2CON;
                      S2BUF = tx_buf;
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 80  

                      while(S2CON==temp);
                      S2CON = temp;
              #endif
 826   1              while(RS2_Xbusy);       
 827   1                      S2BUF=tx_buf;
 828   1                      RS2_Xbusy=1;
 829   1      }
 830          
 831          
 832          #endif  // SERIAL
 833          
 834          
 835          
 836          //****************************************************************************/
 837          //      Timer 2 Interrupt                                                  
 838          //                      If TH2 and TL2 are overflowed,
 839          //                       .Invoke this interrupt
 840          //                       .TH2 <- RCAP2H
 841          //                       .TL2 <- RCAP2L
 842          //                      TL2 is incremented every machine cycle
 843          //                      Every machine cycle is 12*Tosc(11.0592MHz)
 844          //
 845          //                      Every machine cycle = 1.085us
 846          //                      Interrupt interval  
 847          //                              1) REMO_RC5 
 848          //                                      221.34us  ( 1.085*204 )         // (256-52) (0x10000-0xff34)
 849          //
 850          //                                      data length: 14bit (2sync bits, 1 control bit, 11 data bits) 24,889ms
 851          //
 852          //                                                              +----+
 853          //                                      1 is coded:      |    |
 854          //                                                                       +----+   
 855          //                                                                T    T
 856          //
 857          //                                                                       +----+
 858          //                                      0 is coded: |    |
 859          //                                                  +----+        
 860          //                                                                T    T                                        T = 889us
 861          //
 862          //                                      *) DongYang
 863          //                                              209.62  ( 1.085*193 )   // (256-63) (0x10000-0xff3f)
 864          //-----------------------------------------------------------------------------
 865          //                              2) REMO_NEC
 866          //                                      187.714us ( 1.085*173 )     // (256-83) (0x10000-0xff53)
 867          //                                                      
 868          //****************************************************************************/
 869          //INTERRUPT(5, timer2_int)
 870          void timer2_int(void) interrupt 5 using 1                       // using register block 3
 871          {
 872   1              TF2 = 0;                                        // clear overflow
 873   1      
 874   1              tm01++;
 875   1      
 876   1              #ifdef REMO_RC5
                      {
                              BYTE    i;
              
                              i = tm01 & 0x07;
                              if( i>=1 && i<=2 )
                                      RemoPhase1 = P3_2;
                              else if( i>=5 && i<=6 )
                                      RemoPhase2 = P3_2;
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 81  

                              else
                                      ;
                              if( i==0 ) {    //every 8 tm01
                                      if( RemoPhase1==RemoPhase2 ) {  // error
                                              ClearRemoTimer();                       
                                              EnableRemoconInt();
                                              return;
                                      }
                                      if( tm01<=(8*8) ) {                             // start control system
                                              RemoSystemCode <<=1;
                                              if( RemoPhase1==1 && RemoPhase2==0 )
                                                      RemoSystemCode |=1;
                                      }
                                      else {                                                  // data
                                              RemoDataCode <<=1;
                                              if( RemoPhase1==1 && RemoPhase2==0 )
                                                      RemoDataCode |=1;
                                      }
                              }
                              if( tm01 > (8*14) ) {
                                      RemoDataReady++;        //LJY051502 RemoDataReady = 1;                          // new key
                                      ClearRemoTimer();                               
                                      //RemoOver = 0;
                              }
                      }
              
                      #elif defined REMO_NEC
                      
                      {
                              if( RemoDataReady ) return;
              
                              switch( RemoStep ) {
              
                              case 0:
                                      if( P3_2==0 ) {
                                              RemoLcnt++;
                                              if( RemoLcnt==0xff ) goto RemoError;
                                      }
                                      else {
                                              RemoHcnt = 0;
                                              RemoStep++;
                                      }
                                      break;
              
                              case 1:
                                      if( P3_2==1 ) {
                                              RemoHcnt++;
                                              if( RemoHcnt==0xff ) goto RemoError;
                                      }
                                      else {
                                              if( RemoLcnt>=15*3 && RemoLcnt<=17*3 ) {
                                                      
                                                      if( RemoHcnt>=3*3 && RemoHcnt<=5*3 ) {
                                                              RemoStep = 3;
                                                              RemoDataReady = 2;
                                                              break;
                                                      }
                                                      else if( RemoHcnt>=7*3 && RemoHcnt<=9*3 ) {
                                                              RemoStep++;
                                                              RemoPhase = 0;
                                                              RemoLcnt = 0;
                                                              RemoNum  = 0;
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 82  

                                                              RemoBit  = 0;
                                                              break;
                                                      }
                                              }
                                              else goto RemoError;
                                      }
                                      break;
              
                              case 2:
                                      if( RemoPhase==0 ) {
                                              if( P3_2==0 )                                   // Phase=0  Input=0
                                                      RemoLcnt++;
                                              else {                                                  // Phase=0  Input=1
                                                      RemoPhase = 1;
                                                      RemoHcnt = 0;
                                              }
                                      }
                                      else {                                                          
                                              if( P3_2==1 )                                   // Phase=1  Input=1
                                                      RemoHcnt++;
                                              else {                                                  // Phase=1  Input=0
                                                      RemoPhase = 0;
                                                      if( RemoLcnt>=1 && RemoLcnt<=5 ) {
                                                              if( RemoHcnt<=2*3 )                     // bit 0
                                                                      RemoData[RemoNum] <<= 1;
                                                              else if( RemoHcnt<=4*3 ) {              // bit 1
                                                                      RemoData[RemoNum] <<= 1;
                                                                      RemoData[RemoNum]++;
                                                              }
                                                              else goto RemoError;
              
                                                              if( ++RemoBit>=8 ) {
                                                                      RemoBit = 0;
                                                                      if( ++RemoNum>=4 ) {
                                                                              RemoDataReady = 1;
                                                                              RemoStep++;
                                                                      }
                                                              }
                                                              RemoLcnt = 0;
              
                                                      }
                                                      else goto RemoError;
                                              }
                                      }
                                      break;
              
                              case 3:
                                      break;
                              
                              }
                              return;
              
              RemoError:
                              ClearRemoTimer();                               //TimerFor208us();
                              EnableRemoconInt();
                      }
              
                      #endif  // REMO_NEC
1005   1      }
1006          
1007          
1008          void delay(BYTE cnt)
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 83  

1009          {
1010   1              WORD ttic01;
1011   1      
1012   1              ttic01 =  ( tic01 + cnt ) % 100;
1013   1              do {
1014   2                      ;
1015   2              } while( tic01 != ttic01 );
1016   1      }
1017          
1018          
1019          //=============================================================================
1020          //              Time
1021          //=============================================================================
1022          #define _24H_SECS                       86400L                  // 24*60*60
1023          WORD GetTime_ms(void)
1024          {
1025   1              WORD tms;
1026   1      
1027   1              tms = tic01;
1028   1              tms += ( SystemClock % 60 ) * 100;
1029   1              return tms;     // in ms
1030   1      }
1031          BYTE GetTime_H(void)
1032          {
1033   1              return ( SystemClock / 60 / 60 ) % 24 ;
1034   1      }
1035          
1036          BYTE GetTime_M(void)
1037          {
1038   1              return ( SystemClock / 60  ) % 60 ;
1039   1      }
1040          #if 0
              BYTE GetSleepTimer(void)
              {
                      WORD val;
              
                      val = SleepTimer;
                      if( val )       {       // already set, display rest of time
                              val = ( SleepTime >> 8 ) * 60 + ( SleepTime & 0xff );
                              val -= ( GetTime_H() * 60 + GetTime_M() );
                      }
                      return (BYTE)val;
              }
              
              void SetSleepTimer(BYTE stime)
              {
                      SleepTimer = stime;
                      if( SleepTimer==0 )
                              SleepTime = 0xffff;
                      else {
                              SleepTime = GetTime_H() + ( GetTime_M() + SleepTimer ) / 60;
                              SleepTime = ( SleepTime << 8 ) | ( ( GetTime_M() + SleepTimer ) % 60 );
                      }
              
                      #ifdef DEBUG_TIME
                      dPrintf("\r\n++(SetSleepTimer) SleepTime:0x%x__", (WORD)SleepTime);
                      #endif
              }
              
              BYTE OKSleepTime(void)
              {
                      if( GetTime_H() == ( SleepTime >>8 ) && 
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 84  

                              GetTime_M() == ( SleepTime & 0xff ) )   {
                              SleepTimer=0;
                              SleepTime = 0xffff;
                              return 1;
                      }
                      return 0;
              }
              #endif
1079          WORD DiffTime_ms( WORD stime, WORD etime )
1080          {
1081   1              //#ifdef DEBUG
1082   1              //dPrintf("\r\n(DiffTime) stime:%d, etime:%d", (WORD)stime, (WORD)etime );
1083   1              //#endif
1084   1              if( etime < stime ) {                   // resetted
1085   2                      return etime + (6000 - stime);
1086   2              }
1087   1              else {
1088   2                      return etime - stime;
1089   2              }
1090   1      }
1091          
1092          void Wait_ms(WORD Tms)
1093          {
1094   1              #define CPU_CLK_KHZ     22118
1095   1              #define CPU_SPEED       1
1096   1              #define CountStick         (1000000U/((CPU_CLK_KHZ*CPU_SPEED)/12))/20                   //winbond
1097   1              #define MegawinCountStick          ((1000000U/((CPU_CLK_KHZ*CPU_SPEED)/12))/20)*8       //Megawin
1098   1          WORD count;
1099   1          while(Tms)
1100   1           {
1101   2           for(count=0; count</*CountStick*/MegawinCountStick; count++);//total 20 clock for this loop
1102   2              Tms--;
1103   2           }
1104   1      }
1105          
1106          
1107          BYTE TW2835Command(char _commid, char _attr0, char _attr1, char _attr2, char _attr3)
1108          {        
1109   1         BYTE AttrBuf[4];
1110   1         BYTE i,j;
1111   1         WORD WaitCnt;
1112   1         //Kane @HS 2007 0807 Ver1.3 for camera always on
1113   1         _attr0|=0x10;
1114   1         _attr1|=0x10;
1115   1         _attr2|=0x10;
1116   1         _attr3|=0x10;
1117   1         //Kane @HS 2007 0807 Ver1.3 for camera always on
1118   1       //  Printf("TW2835Command\r\n",0);             //william-v1.44a-970923
1119   1          
1120   1      #if 0   
              switch(_commid)
                  {
                      case 0:
                      case 11:
                          AttrBuf[0]=_attr0;
                          AttrBuf[1]=_attr1;
                          AttrBuf[2]=_attr2;
                          AttrBuf[3]=_attr3;
                          break;
                           
                      case 1:
                       case 15:               
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 85  

                          AttrBuf[0]=_attr1;
                          AttrBuf[1]=_attr0;
                          AttrBuf[2]=_attr2;
                          AttrBuf[3]=_attr3;
                          break;
                           
                      case 2:
                          AttrBuf[0]=_attr2;
                          AttrBuf[1]=_attr0;
                          AttrBuf[2]=_attr1;
                          AttrBuf[3]=_attr3;
                          break;
                           
                      case 3:
                      case 8:
                          case 14:            
                          AttrBuf[0]=_attr3;
                          AttrBuf[1]=_attr0;
                          AttrBuf[2]=_attr1;
                          AttrBuf[3]=_attr2;
                          break;
                           
                      case 4:
                          AttrBuf[0]=_attr0;
                          AttrBuf[1]=_attr1;
                          AttrBuf[2]=_attr2;
                          AttrBuf[3]=_attr3;
                          break;
                           
                      case 5:
                          AttrBuf[0]=_attr2;
                          AttrBuf[1]=_attr3;
                          AttrBuf[2]=_attr0;
                          AttrBuf[3]=_attr1;
                          break;
                           
                      case 6:
                          AttrBuf[0]=_attr0;
                          AttrBuf[1]=_attr3;
                          AttrBuf[2]=_attr1;
                          AttrBuf[3]=_attr2;
                          break;
                           
                      case 7:
                          AttrBuf[0]=_attr3;
                          AttrBuf[1]=_attr1;
                          AttrBuf[2]=_attr0;
                          AttrBuf[3]=_attr2;
                          break;     
              
              // 2007.4.10 Justin add for A+C &  C+B Mode
              
                      case 12:
                          AttrBuf[0]=_attr0;
                          AttrBuf[1]=_attr2;
                          AttrBuf[2]=_attr1;
                          AttrBuf[3]=_attr3;
                          break;        
              
              
              
                      case 13:
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 86  

                          AttrBuf[0]=_attr2;
                          AttrBuf[1]=_attr1;
                          AttrBuf[2]=_attr0;
                          AttrBuf[3]=_attr3;
                          break;                              
              
              // 2007.4.10 Justin add for A+C &  C+B Mode
              
              
              // 2007.4.16  Justin
                      case 9:
                          case 10:
                          AttrBuf[0]=_attr0;
                          AttrBuf[1]=_attr1;
                          AttrBuf[2]=_attr3;
                          AttrBuf[3]=_attr2;
                          break;
              // 2007.4.16  Justin                    
                 }
              #endif
1215   1      switch(_commid)
1216   1      {
1217   2              //A B C R
1218   2                      case 0:
1219   2              case 11:
1220   2                  AttrBuf[0]=_attr0;
1221   2                  AttrBuf[1]=_attr1;
1222   2                  AttrBuf[2]=_attr2;
1223   2                  AttrBuf[3]=_attr3;
1224   2                  break;
1225   2              //B A C R     
1226   2              case 22:
1227   2                      case 25:        
1228   2                      case 1:
1229   2                  AttrBuf[0]=_attr1;
1230   2                  AttrBuf[1]=_attr0;
1231   2                  AttrBuf[2]=_attr2;
1232   2                  AttrBuf[3]=_attr3;
1233   2                  break;
1234   2              //C A B R     
1235   2              case 28:
1236   2                      case 31:        
1237   2                      case 2:
1238   2                  AttrBuf[0]=_attr2;
1239   2                  AttrBuf[1]=_attr0;
1240   2                  AttrBuf[2]=_attr1;
1241   2                  AttrBuf[3]=_attr3;
1242   2                  break;
1243   2              //R A B C     
1244   2              case 3:
1245   2              case 8:
1246   2                  case 14:            
1247   2                  AttrBuf[0]=_attr3;
1248   2                  AttrBuf[1]=_attr0;
1249   2                  AttrBuf[2]=_attr1;
1250   2                  AttrBuf[3]=_attr2;
1251   2                  break;
1252   2              //A B C R     
1253   2              case 20:
1254   2                      case 4:
1255   2                  AttrBuf[0]=_attr0;
1256   2                  AttrBuf[1]=_attr1;
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 87  

1257   2                  AttrBuf[2]=_attr2;
1258   2                  AttrBuf[3]=_attr3;
1259   2                  break;
1260   2              //C R A B      
1261   2              case 5:
1262   2                  AttrBuf[0]=_attr2;
1263   2                  AttrBuf[1]=_attr3;
1264   2                  AttrBuf[2]=_attr0;
1265   2                  AttrBuf[3]=_attr1;
1266   2                  break;
1267   2              //A R B C     
1268   2              case 6:
1269   2                  AttrBuf[0]=_attr0;
1270   2                  AttrBuf[1]=_attr3;
1271   2                  AttrBuf[2]=_attr1;
1272   2                  AttrBuf[3]=_attr2;
1273   2                  break;
1274   2             //R B A C      
1275   2              case 7:
1276   2                  AttrBuf[0]=_attr3;
1277   2                  AttrBuf[1]=_attr1;
1278   2                  AttrBuf[2]=_attr0;
1279   2                  AttrBuf[3]=_attr2;
1280   2                  break;     
1281   2      
1282   2      // 2007.4.10 Justin add for A+C &  C+B Mode
1283   2              //A C B R 
1284   2              case 12:
1285   2                  AttrBuf[0]=_attr0;
1286   2                  AttrBuf[1]=_attr2;
1287   2                  AttrBuf[2]=_attr1;
1288   2                  AttrBuf[3]=_attr3;
1289   2                  break;        
1290   2      
1291   2      
1292   2              //C B A R
1293   2              case 13:
1294   2                  AttrBuf[0]=_attr2;
1295   2                  AttrBuf[1]=_attr1;
1296   2                  AttrBuf[2]=_attr0;
1297   2                  AttrBuf[3]=_attr3;
1298   2                  break;                              
1299   2      
1300   2      // 2007.4.10 Justin add for A+C &  C+B Mode
1301   2      
1302   2      
1303   2      // 2007.4.16  Justin
1304   2              //A B R C
1305   2                      case 9:
1306   2                  case 10:
1307   2                  AttrBuf[0]=_attr0;
1308   2                  AttrBuf[1]=_attr1;
1309   2                  AttrBuf[2]=_attr3;
1310   2                  AttrBuf[3]=_attr2;
1311   2                  break;
1312   2      // 2007.4.16  Justin
1313   2              //Andy A1.4 20090113
1314   2              //-----------------------------
1315   2              //R C A B
1316   2                      case 15:
1317   2                              AttrBuf[0]=_attr3;
1318   2                  AttrBuf[1]=_attr2;
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 88  

1319   2                  AttrBuf[2]=_attr1;
1320   2                  AttrBuf[3]=_attr0;
1321   2                              break;
1322   2              //R A C B
1323   2                      case 16:
1324   2                      case 18:           
1325   2                              AttrBuf[0]=_attr3;
1326   2                  AttrBuf[1]=_attr0;
1327   2                  AttrBuf[2]=_attr2;
1328   2                  AttrBuf[3]=_attr1;
1329   2                              break;
1330   2              //R B C A
1331   2                      case 17:
1332   2                      case 19:
1333   2                              AttrBuf[0]=_attr3;
1334   2                  AttrBuf[1]=_attr1;
1335   2                  AttrBuf[2]=_attr2;
1336   2                  AttrBuf[3]=_attr0;
1337   2                              break;
1338   2              //A C R B
1339   2                      case 21:
1340   2                          AttrBuf[0]=_attr0;
1341   2                  AttrBuf[1]=_attr2;
1342   2                  AttrBuf[2]=_attr3;
1343   2                  AttrBuf[3]=_attr1;
1344   2                              break;
1345   2                      //B C R A
1346   2                      case 23:
1347   2                  case 27:
1348   2                  AttrBuf[0]=_attr1;
1349   2                  AttrBuf[1]=_attr2;
1350   2                  AttrBuf[2]=_attr3;
1351   2                  AttrBuf[3]=_attr0;
1352   2                              break;
1353   2              //B R A C
1354   2                      case 24:
1355   2                              AttrBuf[0]=_attr1;
1356   2                  AttrBuf[1]=_attr3;
1357   2                  AttrBuf[2]=_attr0;
1358   2                  AttrBuf[3]=_attr2;
1359   2                              break;
1360   2              //B A R C
1361   2                      case 26:
1362   2                              AttrBuf[0]=_attr1;
1363   2                  AttrBuf[1]=_attr0;
1364   2                  AttrBuf[2]=_attr3;
1365   2                  AttrBuf[3]=_attr2;
1366   2                              break;
1367   2              //C B R A
1368   2                      case 29:
1369   2                      case 33:
1370   2                              AttrBuf[0]=_attr2;
1371   2                  AttrBuf[1]=_attr1;
1372   2                  AttrBuf[2]=_attr3;
1373   2                  AttrBuf[3]=_attr0;
1374   2                              break;
1375   2                      //C R A B
1376   2                      case 30:
1377   2                              AttrBuf[0]=_attr2;
1378   2                  AttrBuf[1]=_attr3;
1379   2                  AttrBuf[2]=_attr0;
1380   2                  AttrBuf[3]=_attr1;
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 89  

1381   2                              break;
1382   2              //C A R B
1383   2                      case 32:                        
1384   2                              AttrBuf[0]=_attr2;
1385   2                  AttrBuf[1]=_attr0;
1386   2                  AttrBuf[2]=_attr3;
1387   2                  AttrBuf[3]=_attr1;
1388   2                              break;
1389   2         }
1390   1          for(i=0;i<BUF_MAX;i++) {RS_buf2[i]='\0';RS_buf[i]='\0';} // cls RX buffer
1391   1          for(j=0;j<3;j++)
1392   1              {       
1393   2              Printf(CommTable[_commid], AttrBuf[0], AttrBuf[1], AttrBuf[2], AttrBuf[3]); 
1394   2              WaitCnt=GetTime_ms();
1395   2                      while(abs(WaitCnt-GetTime_ms())<40)
1396   2                      {
1397   3                      for(i=0;i<BUF_MAX;i++) 
1398   3                              {  
1399   4                                      if(RS_buf2[i]=='A' )
1400   4                                      {
1401   5                                                if( RS_buf2[(i+1)%8]=='C' &&  RS_buf2[(i+2)%8]=='K'  ) 
1402   5                                                       return TRUE;
1403   5                                      }               
1404   4                      }
1405   3                      }
1406   2                  Wait_ms(200);                               
1407   2              }
1408   1              return FALSE;
1409   1         
1410   1      }
1411          
1412          
1413          
1414          
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 90  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com009C (BEGIN)
0000         L?0157:
0000 E4                CLR     A
0001 7B3C              MOV     R3,#03CH
0003 FA                MOV     R2,A
0004 F9                MOV     R1,A
0005 F8                MOV     R0,A
0006 AF00        R     MOV     R7,SystemClock+03H
0008 AE00        R     MOV     R6,SystemClock+02H
000A AD00        R     MOV     R5,SystemClock+01H
000C AC00        R     MOV     R4,SystemClock
000E 120000      E     LCALL   ?C?ULDIV
0011         L?0158:
0011 E4                CLR     A
0012 7B3C              MOV     R3,#03CH
0014 FA                MOV     R2,A
0015 F9                MOV     R1,A
0016 F8                MOV     R0,A
0017 22                RET     
0018         L?0161:
0018 ED                MOV     A,R5
0019         L?0162:
0019 7800        R     MOV     R0,#LOW AttrBuf
001B         L?0163:
001B F2                MOVX    @R0,A
001C 7800        R     MOV     R0,#LOW _attr2
001E E2                MOVX    A,@R0
001F 7800        R     MOV     R0,#LOW AttrBuf+01H
0021 22                RET     
0022         L?0164:
0022 F2                MOVX    @R0,A
0023 EB                MOV     A,R3
0024         L?0165:
0024 08                INC     R0
0025         L?0166:
0025 F2                MOVX    @R0,A
0026 7800        R     MOV     R0,#LOW _attr3
0028 E2                MOVX    A,@R0
0029 7800        R     MOV     R0,#LOW AttrBuf+02H
002B 22                RET     
002C         L?0167:
002C 7800        E     MOV     R0,#LOW ?_Printf?BYTE+03H
002E         L?0168:
002E F2                MOVX    @R0,A
002F 08                INC     R0
0030 EF                MOV     A,R7
0031 F2                MOVX    @R0,A
0032 7BFF              MOV     R3,#0FFH
0034 22                RET     
0035         L?0169:
0035         L?0170:
0035 7800        R     MOV     R0,#LOW _attr2
0037 E2                MOVX    A,@R0
0038 7800        R     MOV     R0,#LOW AttrBuf
003A F2                MOVX    @R0,A
003B 22                RET     
003C         L?0171:
003C         L?0172:
003C 7800        R     MOV     R0,#LOW _attr3
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 91  

003E E2                MOVX    A,@R0
003F 08                INC     R0
0040 F2                MOVX    @R0,A
0041 08                INC     R0
0042 22                RET     
             ; FUNCTION Com009C (END)

             ; FUNCTION main_init (BEGIN)
                                           ; SOURCE LINE # 248
                                           ; SOURCE LINE # 249
                                           ; SOURCE LINE # 256
0000 7B10              MOV     R3,#010H
0002 7DE0              MOV     R5,#0E0H
0004 7F8A              MOV     R7,#08AH
0006 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 270
0009 120000      E     LCALL   GetFWRevEE
000C 7800        R     MOV     R0,#LOW rev
000E EE                MOV     A,R6
                                           ; SOURCE LINE # 271
000F 120000      R     LCALL   L?0168
0012 7A00        R     MOV     R2,#HIGH ?SC_1768
0014 7900        R     MOV     R1,#LOW ?SC_1768
0016 7800        E     MOV     R0,#LOW ?_Printf?BYTE+03H
0018 EE                MOV     A,R6
0019 F2                MOVX    @R0,A
001A 08                INC     R0
001B EF                MOV     A,R7
001C F2                MOVX    @R0,A
001D 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 273
0020 120000      E     LCALL   GetFWRevEE
0023 EF                MOV     A,R7
0024 6440              XRL     A,#040H
0026 7003              JNZ     ?C0126
0028 EE                MOV     A,R6
0029 6401              XRL     A,#01H
002B         ?C0126:
002B 6027              JZ      ?C0001
                                           ; SOURCE LINE # 274
                                           ; SOURCE LINE # 275
002D 7BFF              MOV     R3,#0FFH
002F 7A00        R     MOV     R2,#HIGH ?SC_1783
0031 7900        R     MOV     R1,#LOW ?SC_1783
0033 7800        E     MOV     R0,#LOW ?_Printf?BYTE+03H
0035 7401              MOV     A,#01H
0037 F2                MOVX    @R0,A
0038 08                INC     R0
0039 7440              MOV     A,#040H
003B F2                MOVX    @R0,A
003C 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 276
003F 7F40              MOV     R7,#040H
0041 7E01              MOV     R6,#01H
0043 120000      E     LCALL   _SaveFWRevEE
                                           ; SOURCE LINE # 277
0046 120000      E     LCALL   GetFWRevEE
0049 EE                MOV     A,R6
004A 120000      R     LCALL   L?0167
004D 7A00        R     MOV     R2,#HIGH ?SC_1783
004F 7900        R     MOV     R1,#LOW ?SC_1783
0051 120000      E     LCALL   _Printf
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 92  

                                           ; SOURCE LINE # 278
0054         ?C0001:
                                           ; SOURCE LINE # 283
0054 120000      E     LCALL   GetFWRevEE
0057 EF                MOV     A,R7
0058 6440              XRL     A,#040H
005A 7003              JNZ     ?C0127
005C EE                MOV     A,R6
005D 6401              XRL     A,#01H
005F         ?C0127:
005F 702D              JNZ     ?C0002
                                           ; SOURCE LINE # 284
                                           ; SOURCE LINE # 285
0061 7800        R     MOV     R0,#LOW rev+01H
0063 E2                MOVX    A,@R0
0064 6440              XRL     A,#040H
0066 7004              JNZ     ?C0128
0068 18                DEC     R0
0069 E2                MOVX    A,@R0
006A 6401              XRL     A,#01H
006C         ?C0128:
006C 6017              JZ      ?C0003
                                           ; SOURCE LINE # 286
                                           ; SOURCE LINE # 287
006E 7800        E     MOV     R0,#LOW DebugLevel
0070 E2                MOVX    A,@R0
0071 FF                MOV     R7,A
0072 120000      E     LCALL   _SaveDebugLevelEE
                                           ; SOURCE LINE # 290
0075 7F01              MOV     R7,#01H
0077 120000      E     LCALL   _SaveInputSelectionEE
                                           ; SOURCE LINE # 291
007A 120000      E     LCALL   ClearBasicEE
                                           ; SOURCE LINE # 294
007D 120000      E     LCALL   ResetPanelAttributeValue
                                           ; SOURCE LINE # 295
0080 120000      E     LCALL   SaveDefaultPCDataAllEE
                                           ; SOURCE LINE # 297
0083 8034              SJMP    ?C0005
0085         ?C0003:
                                           ; SOURCE LINE # 299
                                           ; SOURCE LINE # 300
0085 120000      E     LCALL   GetDebugLevelEE
0088 7800        E     MOV     R0,#LOW DebugLevel
008A EF                MOV     A,R7
008B F2                MOVX    @R0,A
                                           ; SOURCE LINE # 302
                                           ; SOURCE LINE # 304
008C 802B              SJMP    ?C0005
008E         ?C0002:
                                           ; SOURCE LINE # 306
                                           ; SOURCE LINE # 307
008E 7BFF              MOV     R3,#0FFH
0090 7A00        R     MOV     R2,#HIGH ?SC_1798
0092 7900        R     MOV     R1,#LOW ?SC_1798
0094 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 308
0097 7BFF              MOV     R3,#0FFH
0099 7A00        R     MOV     R2,#HIGH ?SC_1825
009B 7900        R     MOV     R1,#LOW ?SC_1825
009D 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 309
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 93  

00A0 7800        E     MOV     R0,#LOW DebugLevel
00A2 74FF              MOV     A,#0FFH
00A4 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 310
00A5 7F01              MOV     R7,#01H
00A7 120000      E     LCALL   _SetVInputStd
                                           ; SOURCE LINE # 311
00AA 7800        E     MOV     R0,#LOW VInputStd
00AC E2                MOVX    A,@R0
00AD FF                MOV     R7,A
00AE 120000      E     LCALL   _InitVideoData
                                           ; SOURCE LINE # 312
00B1 120000      E     LCALL   DisplayLogo
                                           ; SOURCE LINE # 313
00B4 E4                CLR     A
00B5 FF                MOV     R7,A
00B6 020000      E     LJMP    _LCDPowerON
                                           ; SOURCE LINE # 315
00B9         ?C0005:
                                           ; SOURCE LINE # 321
00B9 7F08              MOV     R7,#08H
00BB 7E00              MOV     R6,#00H
00BD 120000      E     LCALL   _ReadEEP
00C0 7800        E     MOV     R0,#LOW VInputStdDetectMode
00C2 EF                MOV     A,R7
00C3 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 322
00C4 6004              JZ      ?C0007
                                           ; SOURCE LINE # 323
00C6 E2                MOVX    A,@R0
00C7 FF                MOV     R7,A
00C8 8002              SJMP    ?C0135
00CA         ?C0007:
                                           ; SOURCE LINE # 325
00CA 7F01              MOV     R7,#01H
00CC         ?C0135:
00CC 120000      E     LCALL   _SetVInputStd
00CF         ?C0008:
                                           ; SOURCE LINE # 326
00CF 120000      E     LCALL   SetPossibleAutoDetectStdEE
                                           ; SOURCE LINE # 329
00D2 7800        E     MOV     R0,#LOW InputSelection
00D4 74FE              MOV     A,#0FEH
00D6 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 330
00D7 7800        E     MOV     R0,#LOW VInputStd
00D9 E2                MOVX    A,@R0
00DA FF                MOV     R7,A
00DB 120000      E     LCALL   _InitVideoData
                                           ; SOURCE LINE # 334
00DE 120000      E     LCALL   Change_OSDColorLookup
                                           ; SOURCE LINE # 337
00E1 120000      E     LCALL   DownloadUDFont
                                           ; SOURCE LINE # 340
00E4 7F64              MOV     R7,#064H
00E6 120000      R     LCALL   _delay
                                           ; SOURCE LINE # 352
00E9 7BFF              MOV     R3,#0FFH
00EB 7DD0              MOV     R5,#0D0H
00ED 7F8A              MOV     R7,#08AH
00EF 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 353
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 94  

00F2 7BFF              MOV     R3,#0FFH
00F4 7DD1              MOV     R5,#0D1H
00F6 7F8A              MOV     R7,#08AH
00F8 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 355
00FB         ?C0006:
00FB 22                RET     
             ; FUNCTION main_init (END)

             ; FUNCTION InitCPU (BEGIN)
                                           ; SOURCE LINE # 363
                                           ; SOURCE LINE # 364
                                           ; SOURCE LINE # 366
0000 75F687            MOV     CHPENR,#087H
                                           ; SOURCE LINE # 367
0003 75F659            MOV     CHPENR,#059H
                                           ; SOURCE LINE # 368
0006 75BF10            MOV     CHPCON,#010H
                                           ; SOURCE LINE # 369
0009 E4                CLR     A
000A F5F6              MOV     CHPENR,A
                                           ; SOURCE LINE # 373
000C 758DF4            MOV     TH1,#0F4H
                                           ; SOURCE LINE # 380
000F 759850            MOV     SCON,#050H
                                           ; SOURCE LINE # 382
0012 758922            MOV     TMOD,#022H
                                           ; SOURCE LINE # 384
0015 758855            MOV     TCON,#055H
                                           ; SOURCE LINE # 388
0018 758A40            MOV     TL0,#040H
001B 758C40            MOV     TH0,#040H
                                           ; SOURCE LINE # 390
001E 758780            MOV     PCON,#080H
                                           ; SOURCE LINE # 391
0021 75B802            MOV     IP,#02H
                                           ; SOURCE LINE # 395
0024 75A892            MOV     IE,#092H
                                           ; SOURCE LINE # 398
0027 D299              SETB    TI
                                           ; SOURCE LINE # 399
0029 D2AC              SETB    ES
                                           ; SOURCE LINE # 405
002B F5C8              MOV     T2CON,A
                                           ; SOURCE LINE # 406
002D C2CA              CLR     TR2
                                           ; SOURCE LINE # 407
002F D2AD              SETB    ET2
                                           ; SOURCE LINE # 412
0031 759104            MOV     P1M0,#04H
                                           ; SOURCE LINE # 413
0034 75AA50            MOV     S2CON,#050H
                                           ; SOURCE LINE # 414
0037 75BAF4            MOV     S2BRT,#0F4H
                                           ; SOURCE LINE # 417
003A 43A618            ORL     AUXR2,#018H
                                           ; SOURCE LINE # 420
003D 43AD10            ORL     AUXIE,#010H
                                           ; SOURCE LINE # 422
0040 C200        R     CLR     RS2_Xbusy
                                           ; SOURCE LINE # 423
0042 75DC42            MOV     CCAPM2,#042H
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 95  

                                           ; SOURCE LINE # 424
0045 43D840            ORL     CCON,#040H
                                           ; SOURCE LINE # 427
0048 22                RET     
             ; FUNCTION InitCPU (END)

             ; FUNCTION timer0_int (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0D0              PUSH    PSW
0004 75D008            MOV     PSW,#08H
                                           ; SOURCE LINE # 441
                                           ; SOURCE LINE # 443
0007 0500        R     INC     tm001
                                           ; SOURCE LINE # 450
0009 E500        R     MOV     A,tm001
000B D3                SETB    C
000C 9460              SUBB    A,#060H
000E 5003              JNC     $ + 5H
0010 020000      R     LJMP    ?C0024
                                           ; SOURCE LINE # 453
0013 0500        R     INC     stopWatch+01H
0015 E500        R     MOV     A,stopWatch+01H
0017 7002              JNZ     ?C0129
0019 0500        R     INC     stopWatch
001B         ?C0129:
                                           ; SOURCE LINE # 454
001B 750000      R     MOV     tm001,#00H
                                           ; SOURCE LINE # 455
001E 0500        R     INC     tic01
                                           ; SOURCE LINE # 457
0020 E500        R     MOV     A,tic01
0022 6464              XRL     A,#064H
0024 7063              JNZ     ?C0011
                                           ; SOURCE LINE # 458
                                           ; SOURCE LINE # 459
0026 7800        E     MOV     R0,#LOW SEQTime
0028 E2                MOVX    A,@R0
0029 94FF              SUBB    A,#0FFH
002B 5003              JNC     ?C0012
002D E2                MOVX    A,@R0
002E 04                INC     A
002F F2                MOVX    @R0,A
0030         ?C0012:
                                           ; SOURCE LINE # 460
0030 E500        R     MOV     A,SystemClock+03H
0032 2401              ADD     A,#01H
0034 FF                MOV     R7,A
0035 E4                CLR     A
0036 3500        R     ADDC    A,SystemClock+02H
0038 FE                MOV     R6,A
0039 E4                CLR     A
003A 3500        R     ADDC    A,SystemClock+01H
003C FD                MOV     R5,A
003D E4                CLR     A
003E 3500        R     ADDC    A,SystemClock
0040 8F00        R     MOV     SystemClock+03H,R7
0042 8E00        R     MOV     SystemClock+02H,R6
0044 8D00        R     MOV     SystemClock+01H,R5
0046 F500        R     MOV     SystemClock,A
                                           ; SOURCE LINE # 461
0048 750000      R     MOV     tic01,#00H
                                           ; SOURCE LINE # 463
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 96  

004B 7800        E     MOV     R0,#LOW second
004D E2                MOVX    A,@R0
004E 04                INC     A
004F F2                MOVX    @R0,A
                                           ; SOURCE LINE # 464
0050 300005      E     JNB     FormatStart,?C0013
                                           ; SOURCE LINE # 465
0053 7800        R     MOV     R0,#LOW FormatWait
0055 E2                MOVX    A,@R0
0056 04                INC     A
0057 F2                MOVX    @R0,A
0058         ?C0013:
                                           ; SOURCE LINE # 466
0058 300005      E     JNB     PowerDownStart,?C0014
                                           ; SOURCE LINE # 467
005B 7800        R     MOV     R0,#LOW PowerDownWait
005D E2                MOVX    A,@R0
005E 04                INC     A
005F F2                MOVX    @R0,A
0060         ?C0014:
                                           ; SOURCE LINE # 468
0060 7800        E     MOV     R0,#LOW second
0062 E2                MOVX    A,@R0
0063 B43C09            CJNE    A,#03CH,?C0015
                                           ; SOURCE LINE # 469
                                           ; SOURCE LINE # 470
0066 E4                CLR     A
0067 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 471
0068 7800        E     MOV     R0,#LOW minute
006A E2                MOVX    A,@R0
006B 04                INC     A
006C F2                MOVX    @R0,A
                                           ; SOURCE LINE # 473
006D D200        E     SETB    GetDATETIMEflag
                                           ; SOURCE LINE # 474
006F         ?C0015:
                                           ; SOURCE LINE # 476
006F 7800        E     MOV     R0,#LOW minute
0071 E2                MOVX    A,@R0
0072 B43C07            CJNE    A,#03CH,?C0016
                                           ; SOURCE LINE # 477
                                           ; SOURCE LINE # 478
0075 E4                CLR     A
0076 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 479
0077 7800        E     MOV     R0,#LOW hour
0079 E2                MOVX    A,@R0
007A 04                INC     A
007B F2                MOVX    @R0,A
                                           ; SOURCE LINE # 480
007C         ?C0016:
                                           ; SOURCE LINE # 482
007C 7800        E     MOV     R0,#LOW hour
007E E2                MOVX    A,@R0
007F B41807            CJNE    A,#018H,?C0011
                                           ; SOURCE LINE # 483
                                           ; SOURCE LINE # 484
0082 E4                CLR     A
0083 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 485
0084 7800        E     MOV     R0,#LOW day
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 97  

0086 E2                MOVX    A,@R0
0087 04                INC     A
0088 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 486
                                           ; SOURCE LINE # 488
0089         ?C0011:
                                           ; SOURCE LINE # 489
0089 E500        R     MOV     A,tic_pc+01H
008B F4                CPL     A
008C 7003              JNZ     ?C0130
008E E500        R     MOV     A,tic_pc
0090 F4                CPL     A
0091         ?C0130:
0091 6008              JZ      ?C0018
                                           ; SOURCE LINE # 490
0093 0500        R     INC     tic_pc+01H
0095 E500        R     MOV     A,tic_pc+01H
0097 7002              JNZ     ?C0131
0099 0500        R     INC     tic_pc
009B         ?C0131:
009B         ?C0018:
                                           ; SOURCE LINE # 493
009B E5A0              MOV     A,P2
009D F4                CPL     A
009E 54FC              ANL     A,#0FCH
00A0 6029              JZ      ?C0019
                                           ; SOURCE LINE # 494
00A2 E500        R     MOV     A,keytic
00A4 B4030D            CJNE    A,#03H,?C0020
                                           ; SOURCE LINE # 495
00A7 E5A0              MOV     A,P2
00A9 F4                CPL     A
00AA 54FC              ANL     A,#0FCH
00AC F500        R     MOV     Key,A
                                           ; SOURCE LINE # 496
00AE C200        R     CLR     RepeatKey
                                           ; SOURCE LINE # 497
00B0 D200        R     SETB    KeyReady
                                           ; SOURCE LINE # 498
00B2 8013              SJMP    ?C0021
00B4         ?C0020:
                                           ; SOURCE LINE # 499
00B4 E500        R     MOV     A,keytic
00B6 B4640E            CJNE    A,#064H,?C0021
                                           ; SOURCE LINE # 500
00B9 E5A0              MOV     A,P2
00BB F4                CPL     A
00BC 54FC              ANL     A,#0FCH
00BE F500        R     MOV     Key,A
                                           ; SOURCE LINE # 501
00C0 D200        R     SETB    RepeatKey
                                           ; SOURCE LINE # 502
00C2 D200        R     SETB    KeyReady
                                           ; SOURCE LINE # 503
00C4 750050      R     MOV     keytic,#050H
                                           ; SOURCE LINE # 504
00C7         ?C0021:
                                           ; SOURCE LINE # 505
00C7 0500        R     INC     keytic
                                           ; SOURCE LINE # 506
00C9 8003              SJMP    ?C0024
00CB         ?C0019:
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 98  

                                           ; SOURCE LINE # 508
00CB 750000      R     MOV     keytic,#00H
                                           ; SOURCE LINE # 510
                                           ; SOURCE LINE # 511
00CE         ?C0024:
00CE D0D0              POP     PSW
00D0 D0E0              POP     ACC
00D2 32                RETI    
             ; FUNCTION timer0_int (END)

             ; FUNCTION InitVars (BEGIN)
                                           ; SOURCE LINE # 515
                                           ; SOURCE LINE # 516
                                           ; SOURCE LINE # 517
0000 E4                CLR     A
0001 F500        R     MOV     SystemClock+03H,A
0003 F500        R     MOV     SystemClock+02H,A
0005 F500        R     MOV     SystemClock+01H,A
0007 F500        R     MOV     SystemClock,A
                                           ; SOURCE LINE # 523
0009 D2B5              SETB    P3_5
                                           ; SOURCE LINE # 526
000B 7800        E     MOV     R0,#LOW DebugLevel
000D F2                MOVX    @R0,A
                                           ; SOURCE LINE # 531
000E 7F64              MOV     R7,#064H
0010 120000      R     LCALL   _delay
                                           ; SOURCE LINE # 532
0013 C200        E     CLR     ?PowerDown_XTAL?BIT
0015 120000      E     LCALL   PowerDown_XTAL
                                           ; SOURCE LINE # 534
0018 D2B4              SETB    P3_4
001A 7F01              MOV     R7,#01H
001C 020000      R     LJMP    _delay
             ; FUNCTION InitVars (END)

             ; FUNCTION InitTechwell (BEGIN)
                                           ; SOURCE LINE # 540
                                           ; SOURCE LINE # 541
                                           ; SOURCE LINE # 557
0000 7BFF              MOV     R3,#0FFH
0002 7A00        R     MOV     R2,#HIGH ?SC_1841
0004 7900        R     MOV     R1,#LOW ?SC_1841
0006 120000      E     LCALL   _Puts
                                           ; SOURCE LINE # 559
0009 E4                CLR     A
000A FD                MOV     R5,A
000B 7F8A              MOV     R7,#08AH
000D 120000      E     LCALL   _ReadI2C
0010 EF                MOV     A,R7
0011 24DE              ADD     A,#0DEH
0013 6010              JZ      ?C0028
0015 24D9              ADD     A,#0D9H
0017 6014              JZ      ?C0029
0019 2428              ADD     A,#028H
001B 701B              JNZ     ?C0030
                                           ; SOURCE LINE # 560
001D         ?C0027:
001D 7BFF              MOV     R3,#0FFH
001F 7A00        R     MOV     R2,#HIGH ?SC_1852
0021 7900        R     MOV     R1,#LOW ?SC_1852
0023 800E              SJMP    ?C0137
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 99  

                                           ; SOURCE LINE # 561
0025         ?C0028:
0025 7BFF              MOV     R3,#0FFH
0027 7A00        R     MOV     R2,#HIGH ?SC_1859
0029 7900        R     MOV     R1,#LOW ?SC_1859
002B         ?C0136:
002B 8006              SJMP    ?C0137
                                           ; SOURCE LINE # 562
002D         ?C0029:
002D 7BFF              MOV     R3,#0FFH
002F 7A00        R     MOV     R2,#HIGH ?SC_1867
0031 7900        R     MOV     R1,#LOW ?SC_1867
0033         ?C0137:
0033 120000      E     LCALL   _Puts
0036 803E              SJMP    ?C0026
                                           ; SOURCE LINE # 563
0038         ?C0030:
0038 120000      R     LCALL   L?0159
003B 7A00        R     MOV     R2,#HIGH ?SC_1874
003D 7900        R     MOV     R1,#LOW ?SC_1874
003F 120000      E     LCALL   _Printf
0042         ?C0031:
                                           ; SOURCE LINE # 564
                                           ; SOURCE LINE # 566
0042 120000      R     LCALL   RS_ready
0045 EF                MOV     A,R7
0046 701B              JNZ     ?C0032
0048         ?C0033:
                                           ; SOURCE LINE # 569
0048 120000      R     LCALL   L?0159
004B 7A00        R     MOV     R2,#HIGH ?SC_1893
004D 7900        R     MOV     R1,#LOW ?SC_1893
004F 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 570
                                           ; SOURCE LINE # 571
0052 120000      R     LCALL   L?0160
0055 EF                MOV     A,R7
0056 60EA              JZ      ?C0031
0058         ?C0034:
                                           ; SOURCE LINE # 572
0058 E4                CLR     A
0059 FD                MOV     R5,A
005A 7F8A              MOV     R7,#08AH
005C 120000      E     LCALL   _ReadI2C
005F EF                MOV     A,R7
0060 F4                CPL     A
0061 60DF              JZ      ?C0031
                                           ; SOURCE LINE # 573
                                           ; SOURCE LINE # 574
0063         ?C0032:
                                           ; SOURCE LINE # 576
0063 7F63              MOV     R7,#063H
0065 120000      R     LCALL   _delay
                                           ; SOURCE LINE # 577
                                           ; SOURCE LINE # 578
0068 120000      R     LCALL   L?0160
006B E4                CLR     A
006C 120000      R     LCALL   L?0167
006F 7A00        R     MOV     R2,#HIGH ?SC_1916
0071 7900        R     MOV     R1,#LOW ?SC_1916
0073 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 579
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 100 

                                           ; SOURCE LINE # 580
0076         ?C0026:
                                           ; SOURCE LINE # 582
0076 7BFF              MOV     R3,#0FFH
0078 7A00        R     MOV     R2,#HIGH PanelInfoStr
007A 7900        R     MOV     R1,#LOW PanelInfoStr
007C 7800        E     MOV     R0,#LOW ?_Printf?BYTE+03H
007E 120000      E     LCALL   ?C?PSTPDATA
0081 7A00        R     MOV     R2,#HIGH ?SC_1938
0083 7900        R     MOV     R1,#LOW ?SC_1938
0085 020000      E     LJMP    _Printf
                                           ; SOURCE LINE # 586
0088         L?0159:
0088 E4                CLR     A
0089 FD                MOV     R5,A
008A 7F8A              MOV     R7,#08AH
008C 120000      E     LCALL   _ReadI2C
008F 7800        E     MOV     R0,#LOW ?_Printf?BYTE+03H
0091 E4                CLR     A
0092 F2                MOVX    @R0,A
0093 08                INC     R0
0094 EF                MOV     A,R7
0095 F2                MOVX    @R0,A
0096 7BFF              MOV     R3,#0FFH
0098 22                RET     
0099         L?0160:
0099 7F63              MOV     R7,#063H
009B 120000      R     LCALL   _delay
009E E4                CLR     A
009F FD                MOV     R5,A
00A0 7F8A              MOV     R7,#08AH
00A2 120000      E     LCALL   _ReadI2C
00A5 22                RET     
             ; FUNCTION InitTechwell (END)

             ; FUNCTION _PowerLED (BEGIN)
                                           ; SOURCE LINE # 590
;---- Variable 'flag' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 591
                                           ; SOURCE LINE # 595
0000 EF                MOV     A,R7
0001 B40106            CJNE    A,#01H,?C0037
                                           ; SOURCE LINE # 596
0004 C2B5              CLR     P3_5
                                           ; SOURCE LINE # 597
0006 43E802            ORL     P4,#02H
                                           ; SOURCE LINE # 599
0009 22                RET     
000A         ?C0037:
                                           ; SOURCE LINE # 600
                                           ; SOURCE LINE # 601
000A D2B5              SETB    P3_5
                                           ; SOURCE LINE # 602
000C 53E8FD            ANL     P4,#0FDH
                                           ; SOURCE LINE # 604
                                           ; SOURCE LINE # 605
000F         ?C0039:
000F 22                RET     
             ; FUNCTION _PowerLED (END)

             ; FUNCTION ext1_int (BEGIN)
                                           ; SOURCE LINE # 614
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 101 

                                           ; SOURCE LINE # 616
0000 C2AA              CLR     EX1
                                           ; SOURCE LINE # 617
0002 32                RETI    
             ; FUNCTION ext1_int (END)

             ; FUNCTION serial_int (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0D0              PUSH    PSW
0004 75D008            MOV     PSW,#08H
                                           ; SOURCE LINE # 732
                                           ; SOURCE LINE # 738
0007 30981E            JNB     RI,?C0041
                                           ; SOURCE LINE # 739
000A C298              CLR     RI
                                           ; SOURCE LINE # 740
000C AF99              MOV     R7,SBUF
000E 7400        R     MOV     A,#LOW RS_buf
0010 2500        R     ADD     A,RS_in
0012 F8                MOV     R0,A
0013 EF                MOV     A,R7
0014 F6                MOV     @R0,A
0015 7400        R     MOV     A,#LOW RS_buf2
0017 2500        R     ADD     A,RS_in
0019 F8                MOV     R0,A
001A A60F              MOV     @R0,AR7
                                           ; SOURCE LINE # 742
001C 0500        R     INC     RS_in
                                           ; SOURCE LINE # 743
001E E500        R     MOV     A,RS_in
0020 C3                CLR     C
0021 9408              SUBB    A,#08H
0023 4003              JC      ?C0041
0025 750000      R     MOV     RS_in,#00H
                                           ; SOURCE LINE # 744
0028         ?C0041:
                                           ; SOURCE LINE # 746
0028 309904            JNB     TI,?C0044
                                           ; SOURCE LINE # 747
002B C299              CLR     TI
                                           ; SOURCE LINE # 748
002D C200        R     CLR     RS_Xbusy
                                           ; SOURCE LINE # 749
                                           ; SOURCE LINE # 750
002F         ?C0044:
002F D0D0              POP     PSW
0031 D0E0              POP     ACC
0033 32                RETI    
             ; FUNCTION serial_int (END)

             ; FUNCTION serial2_int (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0D0              PUSH    PSW
0004 75D008            MOV     PSW,#08H
                                           ; SOURCE LINE # 754
                                           ; SOURCE LINE # 759
0007 E5AA              MOV     A,S2CON
0009 30E016            JNB     ACC.0,?C0045
                                           ; SOURCE LINE # 760
                                           ; SOURCE LINE # 762
000C 53AAFE            ANL     S2CON,#0FEH
                                           ; SOURCE LINE # 763
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 102 

000F 7400        R     MOV     A,#LOW DVR_buf
0011 2500        R     ADD     A,RS2_in
0013 F8                MOV     R0,A
0014 A69A              MOV     @R0,S2BUF
                                           ; SOURCE LINE # 765
0016 0500        R     INC     RS2_in
                                           ; SOURCE LINE # 766
0018 E500        R     MOV     A,RS2_in
001A C3                CLR     C
001B 941E              SUBB    A,#01EH
001D 4003              JC      ?C0045
001F 750000      R     MOV     RS2_in,#00H
                                           ; SOURCE LINE # 767
0022         ?C0045:
                                           ; SOURCE LINE # 769
0022 E5AA              MOV     A,S2CON
0024 30E105            JNB     ACC.1,?C0048
                                           ; SOURCE LINE # 770
                                           ; SOURCE LINE # 771
0027 53AAFD            ANL     S2CON,#0FDH
                                           ; SOURCE LINE # 772
002A C200        R     CLR     RS2_Xbusy
                                           ; SOURCE LINE # 773
                                           ; SOURCE LINE # 774
002C         ?C0048:
002C D0D0              POP     PSW
002E D0E0              POP     ACC
0030 32                RETI    
             ; FUNCTION serial2_int (END)

             ; FUNCTION RS_ready (BEGIN)
                                           ; SOURCE LINE # 780
                                           ; SOURCE LINE # 781
                                           ; SOURCE LINE # 782
0000 E500        R     MOV     A,RS_in
0002 B50003      R     CJNE    A,RS_out,?C0049
0005 7F00              MOV     R7,#00H
0007 22                RET     
0008         ?C0049:
                                           ; SOURCE LINE # 783
0008 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 784
000A         ?C0050:
000A 22                RET     
             ; FUNCTION RS_ready (END)

             ; FUNCTION RS_rx (BEGIN)
                                           ; SOURCE LINE # 788
                                           ; SOURCE LINE # 789
                                           ; SOURCE LINE # 792
0000 C2AC              CLR     ES
                                           ; SOURCE LINE # 793
0002 7400        R     MOV     A,#LOW RS_buf
0004 2500        R     ADD     A,RS_out
0006 F8                MOV     R0,A
0007 E6                MOV     A,@R0
0008 FF                MOV     R7,A
;---- Variable 'ret' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 794
0009 0500        R     INC     RS_out
                                           ; SOURCE LINE # 795
000B E500        R     MOV     A,RS_out
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 103 

000D C3                CLR     C
000E 9408              SUBB    A,#08H
0010 4003              JC      ?C0052
                                           ; SOURCE LINE # 796
0012 E4                CLR     A
0013 F500        R     MOV     RS_out,A
0015         ?C0052:
                                           ; SOURCE LINE # 797
0015 D2AC              SETB    ES
                                           ; SOURCE LINE # 799
                                           ; SOURCE LINE # 800
0017         ?C0053:
0017 22                RET     
             ; FUNCTION RS_rx (END)

             ; FUNCTION _RS_tx (BEGIN)
                                           ; SOURCE LINE # 804
;---- Variable 'tx_buf' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 805
0000         ?C0054:
                                           ; SOURCE LINE # 806
0000 2000FD      R     JB      RS_Xbusy,?C0054
0003         ?C0055:
                                           ; SOURCE LINE # 807
0003 8F99              MOV     SBUF,R7
                                           ; SOURCE LINE # 808
0005 D200        R     SETB    RS_Xbusy
                                           ; SOURCE LINE # 809
0007 22                RET     
             ; FUNCTION _RS_tx (END)

             ; FUNCTION _RS2_tx (BEGIN)
                                           ; SOURCE LINE # 816
;---- Variable 'tx_buf' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 817
0000         ?C0057:
                                           ; SOURCE LINE # 826
0000 2000FD      R     JB      RS2_Xbusy,?C0057
0003         ?C0058:
                                           ; SOURCE LINE # 827
0003 8F9A              MOV     S2BUF,R7
                                           ; SOURCE LINE # 828
0005 D200        R     SETB    RS2_Xbusy
                                           ; SOURCE LINE # 829
0007 22                RET     
             ; FUNCTION _RS2_tx (END)

             ; FUNCTION timer2_int (BEGIN)
0000 C0E0              PUSH    ACC
                                           ; SOURCE LINE # 870
                                           ; SOURCE LINE # 872
0002 C2CF              CLR     TF2
                                           ; SOURCE LINE # 874
0004 0500        R     INC     tm01+01H
0006 E500        R     MOV     A,tm01+01H
0008 7002              JNZ     ?C0132
000A 0500        R     INC     tm01
000C         ?C0132:
                                           ; SOURCE LINE # 1005
000C D0E0              POP     ACC
000E 32                RETI    
             ; FUNCTION timer2_int (END)
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 104 


             ; FUNCTION _delay (BEGIN)
                                           ; SOURCE LINE # 1008
;---- Variable 'cnt' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1009
                                           ; SOURCE LINE # 1012
0000 E500        R     MOV     A,tic01
0002 2F                ADD     A,R7
0003 FF                MOV     R7,A
0004 E4                CLR     A
0005 33                RLC     A
0006 FE                MOV     R6,A
0007 7C00              MOV     R4,#00H
0009 7D64              MOV     R5,#064H
000B 120000      E     LCALL   ?C?UIDIV
;---- Variable 'ttic01' assigned to Register 'R4/R5' ----
                                           ; SOURCE LINE # 1013
                                           ; SOURCE LINE # 1015
000E         ?C0061:
000E E500        R     MOV     A,tic01
0010 B505FB            CJNE    A,AR5,?C0061
0013 E4                CLR     A
0014 B504F7            CJNE    A,AR4,?C0061
                                           ; SOURCE LINE # 1016
0017 22                RET     
             ; FUNCTION _delay (END)

             ; FUNCTION GetTime_ms (BEGIN)
                                           ; SOURCE LINE # 1023
                                           ; SOURCE LINE # 1024
                                           ; SOURCE LINE # 1027
0000 7800        R     MOV     R0,#LOW tms
0002 E4                CLR     A
0003 F2                MOVX    @R0,A
0004 08                INC     R0
0005 E500        R     MOV     A,tic01
0007 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1028
0008 120000      R     LCALL   L?0158
000B AF00        R     MOV     R7,SystemClock+03H
000D AE00        R     MOV     R6,SystemClock+02H
000F AD00        R     MOV     R5,SystemClock+01H
0011 AC00        R     MOV     R4,SystemClock
0013 120000      E     LCALL   ?C?ULDIV
0016 AC00              MOV     R4,AR0
0018 AD01              MOV     R5,AR1
001A AE02              MOV     R6,AR2
001C AF03              MOV     R7,AR3
001E E4                CLR     A
001F 7B64              MOV     R3,#064H
0021 FA                MOV     R2,A
0022 F9                MOV     R1,A
0023 F8                MOV     R0,A
0024 120000      E     LCALL   ?C?LMUL
0027 7800        R     MOV     R0,#LOW tms+01H
0029 E2                MOVX    A,@R0
002A 2F                ADD     A,R7
002B F2                MOVX    @R0,A
002C 18                DEC     R0
002D E2                MOVX    A,@R0
002E 3E                ADDC    A,R6
002F F2                MOVX    @R0,A
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 105 

                                           ; SOURCE LINE # 1029
0030 E2                MOVX    A,@R0
0031 FE                MOV     R6,A
0032 08                INC     R0
0033 E2                MOVX    A,@R0
0034 FF                MOV     R7,A
                                           ; SOURCE LINE # 1030
0035         ?C0065:
0035 22                RET     
             ; FUNCTION GetTime_ms (END)

             ; FUNCTION GetTime_H (BEGIN)
                                           ; SOURCE LINE # 1031
                                           ; SOURCE LINE # 1032
                                           ; SOURCE LINE # 1033
0000 120000      R     LCALL   L?0157
0003 120000      E     LCALL   ?C?ULDIV
0006 E4                CLR     A
0007 7B18              MOV     R3,#018H
0009 FA                MOV     R2,A
000A F9                MOV     R1,A
000B F8                MOV     R0,A
000C 120000      E     LCALL   ?C?ULDIV
000F AF03              MOV     R7,AR3
                                           ; SOURCE LINE # 1034
0011         ?C0066:
0011 22                RET     
             ; FUNCTION GetTime_H (END)

             ; FUNCTION GetTime_M (BEGIN)
                                           ; SOURCE LINE # 1036
                                           ; SOURCE LINE # 1037
                                           ; SOURCE LINE # 1038
0000 120000      R     LCALL   L?0157
0003 120000      E     LCALL   ?C?ULDIV
0006 AF03              MOV     R7,AR3
                                           ; SOURCE LINE # 1039
0008         ?C0067:
0008 22                RET     
             ; FUNCTION GetTime_M (END)

             ; FUNCTION _DiffTime_ms (BEGIN)
                                           ; SOURCE LINE # 1079
;---- Variable 'etime' assigned to Register 'R4/R5' ----
;---- Variable 'stime' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 1080
                                           ; SOURCE LINE # 1084
0000 C3                CLR     C
0001 ED                MOV     A,R5
0002 9F                SUBB    A,R7
0003 EC                MOV     A,R4
0004 9E                SUBB    A,R6
0005 5010              JNC     ?C0068
                                           ; SOURCE LINE # 1085
0007 C3                CLR     C
0008 7470              MOV     A,#070H
000A 9F                SUBB    A,R7
000B FF                MOV     R7,A
000C 7417              MOV     A,#017H
000E 9E                SUBB    A,R6
000F FE                MOV     R6,A
0010 EF                MOV     A,R7
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 106 

0011 2D                ADD     A,R5
0012 FF                MOV     R7,A
0013 EE                MOV     A,R6
0014 3C                ADDC    A,R4
0015 FE                MOV     R6,A
0016 22                RET     
                                           ; SOURCE LINE # 1086
0017         ?C0068:
                                           ; SOURCE LINE # 1087
                                           ; SOURCE LINE # 1088
0017 C3                CLR     C
0018 ED                MOV     A,R5
0019 9F                SUBB    A,R7
001A FF                MOV     R7,A
001B EC                MOV     A,R4
001C 9E                SUBB    A,R6
001D FE                MOV     R6,A
                                           ; SOURCE LINE # 1089
                                           ; SOURCE LINE # 1090
001E         ?C0069:
001E 22                RET     
             ; FUNCTION _DiffTime_ms (END)

             ; FUNCTION _Wait_ms (BEGIN)
                                           ; SOURCE LINE # 1092
0000 7800        R     MOV     R0,#LOW Tms
0002 EE                MOV     A,R6
0003 F2                MOVX    @R0,A
0004 08                INC     R0
0005 EF                MOV     A,R7
0006 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1093
0007         ?C0071:
                                           ; SOURCE LINE # 1099
0007 7800        R     MOV     R0,#LOW Tms+01H
0009 E2                MOVX    A,@R0
000A 7002              JNZ     ?C0134
000C 18                DEC     R0
000D E2                MOVX    A,@R0
000E         ?C0134:
000E 6035              JZ      ?C0076
                                           ; SOURCE LINE # 1100
                                           ; SOURCE LINE # 1101
0010 E4                CLR     A
0011 7800        R     MOV     R0,#LOW count
0013 F2                MOVX    @R0,A
0014 08                INC     R0
0015 F2                MOVX    @R0,A
0016         ?C0073:
0016 7800        R     MOV     R0,#LOW count
0018 E2                MOVX    A,@R0
0019 FE                MOV     R6,A
001A 08                INC     R0
001B E2                MOVX    A,@R0
001C FF                MOV     R7,A
001D E4                CLR     A
001E FC                MOV     R4,A
001F FD                MOV     R5,A
0020 7BD8              MOV     R3,#0D8H
0022 FA                MOV     R2,A
0023 F9                MOV     R1,A
0024 F8                MOV     R0,A
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 107 

0025 D3                SETB    C
0026 120000      E     LCALL   ?C?ULCMP
0029 400D              JC      ?C0074
002B 7800        R     MOV     R0,#LOW count+01H
002D E2                MOVX    A,@R0
002E 2401              ADD     A,#01H
0030 F2                MOVX    @R0,A
0031 18                DEC     R0
0032 E2                MOVX    A,@R0
0033 3400              ADDC    A,#00H
0035 F2                MOVX    @R0,A
0036 80DE              SJMP    ?C0073
0038         ?C0074:
                                           ; SOURCE LINE # 1102
0038 7800        R     MOV     R0,#LOW Tms+01H
003A E2                MOVX    A,@R0
003B 24FF              ADD     A,#0FFH
003D F2                MOVX    @R0,A
003E 18                DEC     R0
003F E2                MOVX    A,@R0
0040 34FF              ADDC    A,#0FFH
0042 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1103
0043 80C2              SJMP    ?C0071
                                           ; SOURCE LINE # 1104
0045         ?C0076:
0045 22                RET     
             ; FUNCTION _Wait_ms (END)

             ; FUNCTION _TW2835Command (BEGIN)
                                           ; SOURCE LINE # 1107
0000 7800        R     MOV     R0,#LOW _commid
0002 EF                MOV     A,R7
0003 F2                MOVX    @R0,A
;---- Variable '_attr1' assigned to Register 'R3' ----
;---- Variable '_attr0' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 1108
                                           ; SOURCE LINE # 1113
0004 ED                MOV     A,R5
0005 4410              ORL     A,#010H
0007 FD                MOV     R5,A
                                           ; SOURCE LINE # 1114
0008 EB                MOV     A,R3
0009 4410              ORL     A,#010H
000B FB                MOV     R3,A
                                           ; SOURCE LINE # 1115
000C 7800        R     MOV     R0,#LOW _attr2
000E E2                MOVX    A,@R0
000F 4410              ORL     A,#010H
0011 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1116
0012 08                INC     R0
0013 E2                MOVX    A,@R0
0014 4410              ORL     A,#010H
0016 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1215
0017 EF                MOV     A,R7
0018 120000      E     LCALL   ?C?CCASE
001B 0000        R     DW      ?C0079
001D 00                DB      00H
001E 0000        R     DW      ?C0082
0020 01                DB      01H
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 108 

0021 0000        R     DW      ?C0085
0023 02                DB      02H
0024 0000        R     DW      ?C0088
0026 03                DB      03H
0027 0000        R     DW      ?C0090
0029 04                DB      04H
002A 0000        R     DW      ?C0091
002C 05                DB      05H
002D 0000        R     DW      ?C0092
002F 06                DB      06H
0030 0000        R     DW      ?C0093
0032 07                DB      07H
0033 0000        R     DW      ?C0088
0035 08                DB      08H
0036 0000        R     DW      ?C0097
0038 09                DB      09H
0039 0000        R     DW      ?C0097
003B 0A                DB      0AH
003C 0000        R     DW      ?C0079
003E 0B                DB      0BH
003F 0000        R     DW      ?C0094
0041 0C                DB      0CH
0042 0000        R     DW      ?C0095
0044 0D                DB      0DH
0045 0000        R     DW      ?C0088
0047 0E                DB      0EH
0048 0000        R     DW      ?C0098
004A 0F                DB      0FH
004B 0000        R     DW      ?C0100
004D 10                DB      010H
004E 0000        R     DW      ?C0102
0050 11                DB      011H
0051 0000        R     DW      ?C0100
0053 12                DB      012H
0054 0000        R     DW      ?C0102
0056 13                DB      013H
0057 0000        R     DW      ?C0090
0059 14                DB      014H
005A 0000        R     DW      ?C0103
005C 15                DB      015H
005D 0000        R     DW      ?C0082
005F 16                DB      016H
0060 0000        R     DW      ?C0105
0062 17                DB      017H
0063 0000        R     DW      ?C0106
0065 18                DB      018H
0066 0000        R     DW      ?C0082
0068 19                DB      019H
0069 0000        R     DW      ?C0107
006B 1A                DB      01AH
006C 0000        R     DW      ?C0105
006E 1B                DB      01BH
006F 0000        R     DW      ?C0085
0071 1C                DB      01CH
0072 0000        R     DW      ?C0109
0074 1D                DB      01DH
0075 0000        R     DW      ?C0091
0077 1E                DB      01EH
0078 0000        R     DW      ?C0085
007A 1F                DB      01FH
007B 0000        R     DW      ?C0111
007D 20                DB      020H
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 109 

007E 0000        R     DW      ?C0109
0080 21                DB      021H
0081 0000              DW      00H
0083 0000        R     DW      ?C0077
                                           ; SOURCE LINE # 1216
                                           ; SOURCE LINE # 1218
                                           ; SOURCE LINE # 1219
0085         ?C0079:
                                           ; SOURCE LINE # 1220
                                           ; SOURCE LINE # 1221
                                           ; SOURCE LINE # 1222
                                           ; SOURCE LINE # 1223
                                           ; SOURCE LINE # 1224
0085 8015              SJMP    ?C0138
                                           ; SOURCE LINE # 1226
                                           ; SOURCE LINE # 1227
                                           ; SOURCE LINE # 1228
0087         ?C0082:
                                           ; SOURCE LINE # 1229
0087 7800        R     MOV     R0,#LOW AttrBuf
0089 EB                MOV     A,R3
008A F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1230
008B 08                INC     R0
008C ED                MOV     A,R5
                                           ; SOURCE LINE # 1231
                                           ; SOURCE LINE # 1232
                                           ; SOURCE LINE # 1233
008D 8013              SJMP    ?C0139
                                           ; SOURCE LINE # 1235
                                           ; SOURCE LINE # 1236
                                           ; SOURCE LINE # 1237
008F         ?C0085:
                                           ; SOURCE LINE # 1238
008F 120000      R     LCALL   L?0169
                                           ; SOURCE LINE # 1239
0092 08                INC     R0
0093 ED                MOV     A,R5
                                           ; SOURCE LINE # 1240
                                           ; SOURCE LINE # 1241
                                           ; SOURCE LINE # 1242
0094 8030              SJMP    ?C0140
                                           ; SOURCE LINE # 1244
                                           ; SOURCE LINE # 1245
                                           ; SOURCE LINE # 1246
0096         ?C0088:
                                           ; SOURCE LINE # 1247
                                           ; SOURCE LINE # 1248
0096 120000      R     LCALL   L?0171
0099 ED                MOV     A,R5
                                           ; SOURCE LINE # 1249
                                           ; SOURCE LINE # 1250
                                           ; SOURCE LINE # 1251
009A 8019              SJMP    ?C0141
                                           ; SOURCE LINE # 1253
                                           ; SOURCE LINE # 1254
009C         ?C0090:
                                           ; SOURCE LINE # 1255
009C         ?C0138:
009C 7800        R     MOV     R0,#LOW AttrBuf
009E ED                MOV     A,R5
009F F2                MOVX    @R0,A
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 110 

                                           ; SOURCE LINE # 1256
00A0 08                INC     R0
00A1 EB                MOV     A,R3
00A2         ?C0139:
00A2 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1257
00A3 7800        R     MOV     R0,#LOW _attr2
00A5 E2                MOVX    A,@R0
00A6 7800        R     MOV     R0,#LOW AttrBuf+02H
                                           ; SOURCE LINE # 1258
                                           ; SOURCE LINE # 1259
00A8 8029              SJMP    ?C0146
                                           ; SOURCE LINE # 1261
00AA         ?C0091:
                                           ; SOURCE LINE # 1262
                                           ; SOURCE LINE # 1263
                                           ; SOURCE LINE # 1264
                                           ; SOURCE LINE # 1265
                                           ; SOURCE LINE # 1266
00AA 020000      R     LJMP    ?C0143
                                           ; SOURCE LINE # 1268
00AD         ?C0092:
                                           ; SOURCE LINE # 1269
00AD 7800        R     MOV     R0,#LOW AttrBuf
00AF ED                MOV     A,R5
00B0 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1270
00B1 18                DEC     R0
00B2 E2                MOVX    A,@R0
00B3 7800        R     MOV     R0,#LOW AttrBuf+01H
00B5         ?C0141:
00B5 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1271
00B6 08                INC     R0
00B7 EB                MOV     A,R3
                                           ; SOURCE LINE # 1272
                                           ; SOURCE LINE # 1273
00B8 8024              SJMP    ?C0145
                                           ; SOURCE LINE # 1275
00BA         ?C0093:
                                           ; SOURCE LINE # 1276
                                           ; SOURCE LINE # 1277
00BA 120000      R     LCALL   L?0171
00BD EB                MOV     A,R3
00BE F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1278
00BF 08                INC     R0
00C0 ED                MOV     A,R5
00C1         ?C0144:
                                           ; SOURCE LINE # 1279
                                           ; SOURCE LINE # 1280
00C1 801B              SJMP    ?C0145
                                           ; SOURCE LINE # 1284
00C3         ?C0094:
                                           ; SOURCE LINE # 1285
                                           ; SOURCE LINE # 1286
00C3 120000      R     LCALL   L?0161
00C6         ?C0140:
00C6 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1287
00C7 08                INC     R0
00C8 EB                MOV     A,R3
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 111 

00C9         ?C0142:
                                           ; SOURCE LINE # 1288
                                           ; SOURCE LINE # 1289
00C9 8008              SJMP    ?C0146
                                           ; SOURCE LINE # 1293
00CB         ?C0095:
                                           ; SOURCE LINE # 1294
00CB 120000      R     LCALL   L?0169
                                           ; SOURCE LINE # 1295
00CE 08                INC     R0
00CF EB                MOV     A,R3
00D0 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1296
00D1 08                INC     R0
00D2 ED                MOV     A,R5
00D3         ?C0146:
00D3 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1297
00D4 7800        R     MOV     R0,#LOW _attr3
                                           ; SOURCE LINE # 1298
00D6 8059              SJMP    ?C0154
                                           ; SOURCE LINE # 1305
                                           ; SOURCE LINE # 1306
00D8         ?C0097:
                                           ; SOURCE LINE # 1307
00D8 7800        R     MOV     R0,#LOW AttrBuf
00DA ED                MOV     A,R5
                                           ; SOURCE LINE # 1308
                                           ; SOURCE LINE # 1309
00DB 120000      R     LCALL   L?0164
00DE         ?C0145:
00DE F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1310
00DF 7800        R     MOV     R0,#LOW _attr2
00E1         ?C0147:
                                           ; SOURCE LINE # 1311
00E1 804E              SJMP    ?C0154
                                           ; SOURCE LINE # 1316
00E3         ?C0098:
                                           ; SOURCE LINE # 1317
00E3 7800        R     MOV     R0,#LOW _attr3
00E5 E2                MOVX    A,@R0
00E6 08                INC     R0
                                           ; SOURCE LINE # 1318
00E7 120000      R     LCALL   L?0163
00EA F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1319
00EB 08                INC     R0
00EC EB                MOV     A,R3
                                           ; SOURCE LINE # 1320
                                           ; SOURCE LINE # 1321
00ED 8050              SJMP    ?C0153
                                           ; SOURCE LINE # 1323
                                           ; SOURCE LINE # 1324
00EF         ?C0100:
                                           ; SOURCE LINE # 1325
                                           ; SOURCE LINE # 1326
00EF 120000      R     LCALL   L?0172
00F2 ED                MOV     A,R5
00F3 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1327
00F4 7800        R     MOV     R0,#LOW _attr2
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 112 

                                           ; SOURCE LINE # 1328
                                           ; SOURCE LINE # 1329
00F6 020000      R     LJMP    ?C0152
                                           ; SOURCE LINE # 1331
                                           ; SOURCE LINE # 1332
00F9         ?C0102:
                                           ; SOURCE LINE # 1333
                                           ; SOURCE LINE # 1334
00F9 120000      R     LCALL   L?0172
00FC EB                MOV     A,R3
00FD F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1335
00FE 7800        R     MOV     R0,#LOW _attr2
0100 E2                MOVX    A,@R0
0101 7800        R     MOV     R0,#LOW AttrBuf+02H
0103         ?C0149:
                                           ; SOURCE LINE # 1336
                                           ; SOURCE LINE # 1337
0103 803A              SJMP    ?C0153
                                           ; SOURCE LINE # 1339
0105         ?C0103:
                                           ; SOURCE LINE # 1340
                                           ; SOURCE LINE # 1341
0105 120000      R     LCALL   L?0161
0108 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1342
0109 7800        R     MOV     R0,#LOW _attr3
010B         ?C0150:
                                           ; SOURCE LINE # 1343
                                           ; SOURCE LINE # 1344
010B 804C              SJMP    ?C0152
                                           ; SOURCE LINE # 1346
                                           ; SOURCE LINE # 1347
010D         ?C0105:
                                           ; SOURCE LINE # 1348
010D EB                MOV     A,R3
                                           ; SOURCE LINE # 1349
010E 120000      R     LCALL   L?0162
                                           ; SOURCE LINE # 1350
0111 120000      R     LCALL   L?0166
0114         ?C0151:
                                           ; SOURCE LINE # 1351
                                           ; SOURCE LINE # 1352
0114 8029              SJMP    ?C0153
                                           ; SOURCE LINE # 1354
0116         ?C0106:
                                           ; SOURCE LINE # 1355
0116 7800        R     MOV     R0,#LOW AttrBuf
0118 EB                MOV     A,R3
0119 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1356
011A 18                DEC     R0
011B E2                MOVX    A,@R0
011C 7800        R     MOV     R0,#LOW AttrBuf+01H
011E F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1357
011F 08                INC     R0
0120 ED                MOV     A,R5
0121 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1358
0122 7800        R     MOV     R0,#LOW _attr2
0124         ?C0148:
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 113 

                                           ; SOURCE LINE # 1359
0124 800B              SJMP    ?C0154
                                           ; SOURCE LINE # 1361
0126         ?C0107:
                                           ; SOURCE LINE # 1362
0126 7800        R     MOV     R0,#LOW AttrBuf
0128 EB                MOV     A,R3
0129 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1363
012A ED                MOV     A,R5
                                           ; SOURCE LINE # 1364
012B 120000      R     LCALL   L?0165
012E F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1365
012F 7800        R     MOV     R0,#LOW _attr2
0131         ?C0154:
0131 E2                MOVX    A,@R0
0132 7800        R     MOV     R0,#LOW AttrBuf+03H
0134 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1366
0135 8029              SJMP    ?C0077
                                           ; SOURCE LINE # 1368
                                           ; SOURCE LINE # 1369
0137         ?C0109:
                                           ; SOURCE LINE # 1370
0137 7800        R     MOV     R0,#LOW _attr2
0139 E2                MOVX    A,@R0
013A 7800        R     MOV     R0,#LOW AttrBuf
                                           ; SOURCE LINE # 1371
                                           ; SOURCE LINE # 1372
013C 120000      R     LCALL   L?0164
013F         ?C0153:
013F F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1373
0140 08                INC     R0
0141 ED                MOV     A,R5
0142 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1374
0143 801B              SJMP    ?C0077
                                           ; SOURCE LINE # 1376
0145         ?C0143:
0145 120000      R     LCALL   L?0170
                                           ; SOURCE LINE # 1378
0148 18                DEC     R0
0149 E2                MOVX    A,@R0
014A 7800        R     MOV     R0,#LOW AttrBuf+01H
014C F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1379
014D 08                INC     R0
014E ED                MOV     A,R5
                                           ; SOURCE LINE # 1380
                                           ; SOURCE LINE # 1381
014F 800B              SJMP    ?C0155
                                           ; SOURCE LINE # 1383
0151         ?C0111:
                                           ; SOURCE LINE # 1384
0151 120000      R     LCALL   L?0170
                                           ; SOURCE LINE # 1385
0154 08                INC     R0
0155 ED                MOV     A,R5
0156 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1386
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 114 

0157 7800        R     MOV     R0,#LOW _attr3
0159         ?C0152:
0159 E2                MOVX    A,@R0
015A 7800        R     MOV     R0,#LOW AttrBuf+02H
015C         ?C0155:
015C F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1387
015D 08                INC     R0
015E EB                MOV     A,R3
015F F2                MOVX    @R0,A
                                           ; SOURCE LINE # 1388
                                           ; SOURCE LINE # 1389
0160         ?C0077:
                                           ; SOURCE LINE # 1390
0160 E4                CLR     A
0161 7800        R     MOV     R0,#LOW i
0163 F2                MOVX    @R0,A
0164         ?C0112:
0164 7800        R     MOV     R0,#LOW i
0166 E2                MOVX    A,@R0
0167 FF                MOV     R7,A
0168 C3                CLR     C
0169 9408              SUBB    A,#08H
016B 5013              JNC     ?C0113
016D 7400        R     MOV     A,#LOW RS_buf2
016F 2F                ADD     A,R7
0170 F8                MOV     R0,A
0171 E4                CLR     A
0172 F6                MOV     @R0,A
0173 7400        R     MOV     A,#LOW RS_buf
0175 2F                ADD     A,R7
0176 F8                MOV     R0,A
0177 E4                CLR     A
0178 F6                MOV     @R0,A
0179 7800        R     MOV     R0,#LOW i
017B E2                MOVX    A,@R0
017C 04                INC     A
017D F2                MOVX    @R0,A
017E 80E4              SJMP    ?C0112
0180         ?C0113:
                                           ; SOURCE LINE # 1391
0180 E4                CLR     A
0181 7800        R     MOV     R0,#LOW j
0183 F2                MOVX    @R0,A
0184         ?C0115:
                                           ; SOURCE LINE # 1392
                                           ; SOURCE LINE # 1393
0184 7800        R     MOV     R0,#LOW _commid
0186 E2                MOVX    A,@R0
0187 FF                MOV     R7,A
0188 33                RLC     A
0189 95E0              SUBB    A,ACC
018B FE                MOV     R6,A
018C 900000      R     MOV     DPTR,#CommTable
018F 75F003            MOV     B,#03H
0192 EF                MOV     A,R7
0193 120000      E     LCALL   ?C?OFFXADD
0196 EE                MOV     A,R6
0197 75F003            MOV     B,#03H
019A A4                MUL     AB
019B 2583              ADD     A,DPH
019D F583              MOV     DPH,A
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 115 

019F 120000      E     LCALL   ?C?PLDCODE
01A2 7800        R     MOV     R0,#LOW AttrBuf
01A4 E2                MOVX    A,@R0
01A5 7800        E     MOV     R0,#LOW ?_Printf?BYTE+03H
01A7 F2                MOVX    @R0,A
01A8 7800        R     MOV     R0,#LOW AttrBuf+01H
01AA E2                MOVX    A,@R0
01AB 7800        E     MOV     R0,#LOW ?_Printf?BYTE+04H
01AD F2                MOVX    @R0,A
01AE 7800        R     MOV     R0,#LOW AttrBuf+02H
01B0 E2                MOVX    A,@R0
01B1 7800        E     MOV     R0,#LOW ?_Printf?BYTE+05H
01B3 F2                MOVX    @R0,A
01B4 7800        R     MOV     R0,#LOW AttrBuf+03H
01B6 E2                MOVX    A,@R0
01B7 7800        E     MOV     R0,#LOW ?_Printf?BYTE+06H
01B9 F2                MOVX    @R0,A
01BA 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 1394
01BD 120000      R     LCALL   GetTime_ms
01C0 7800        R     MOV     R0,#LOW WaitCnt
01C2 EE                MOV     A,R6
01C3 F2                MOVX    @R0,A
01C4 08                INC     R0
01C5 EF                MOV     A,R7
01C6 F2                MOVX    @R0,A
01C7         ?C0118:
                                           ; SOURCE LINE # 1395
01C7 120000      R     LCALL   GetTime_ms
01CA C3                CLR     C
01CB 7800        R     MOV     R0,#LOW WaitCnt+01H
01CD E2                MOVX    A,@R0
01CE 9F                SUBB    A,R7
01CF FF                MOV     R7,A
01D0 18                DEC     R0
01D1 E2                MOVX    A,@R0
01D2 9E                SUBB    A,R6
01D3 FE                MOV     R6,A
01D4 120000      E     LCALL   _abs
01D7 C3                CLR     C
01D8 EF                MOV     A,R7
01D9 9428              SUBB    A,#028H
01DB EE                MOV     A,R6
01DC 6480              XRL     A,#080H
01DE 9480              SUBB    A,#080H
01E0 503A              JNC     ?C0119
                                           ; SOURCE LINE # 1396
                                           ; SOURCE LINE # 1397
01E2 E4                CLR     A
01E3 7800        R     MOV     R0,#LOW i
01E5 F2                MOVX    @R0,A
01E6         ?C0120:
01E6 7800        R     MOV     R0,#LOW i
01E8 E2                MOVX    A,@R0
01E9 FF                MOV     R7,A
01EA C3                CLR     C
01EB 9408              SUBB    A,#08H
01ED 50D8              JNC     ?C0118
                                           ; SOURCE LINE # 1398
                                           ; SOURCE LINE # 1399
01EF 7400        R     MOV     A,#LOW RS_buf2
01F1 2F                ADD     A,R7
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 116 

01F2 F8                MOV     R0,A
01F3 E6                MOV     A,@R0
01F4 6441              XRL     A,#041H
01F6 701D              JNZ     ?C0122
                                           ; SOURCE LINE # 1400
                                           ; SOURCE LINE # 1401
01F8 7800        R     MOV     R0,#LOW i
01FA E2                MOVX    A,@R0
01FB FF                MOV     R7,A
01FC 04                INC     A
01FD 5407              ANL     A,#07H
01FF 2400        R     ADD     A,#LOW RS_buf2
0201 F8                MOV     R0,A
0202 E6                MOV     A,@R0
0203 B4430F            CJNE    A,#043H,?C0122
0206 EF                MOV     A,R7
0207 2402              ADD     A,#02H
0209 5407              ANL     A,#07H
020B 2400        R     ADD     A,#LOW RS_buf2
020D F8                MOV     R0,A
020E E6                MOV     A,@R0
020F B44B03            CJNE    A,#04BH,?C0122
                                           ; SOURCE LINE # 1402
0212 7F01              MOV     R7,#01H
0214 22                RET     
                                           ; SOURCE LINE # 1403
                                           ; SOURCE LINE # 1404
0215         ?C0122:
0215 7800        R     MOV     R0,#LOW i
0217 E2                MOVX    A,@R0
0218 04                INC     A
0219 F2                MOVX    @R0,A
021A 80CA              SJMP    ?C0120
                                           ; SOURCE LINE # 1405
021C         ?C0119:
                                           ; SOURCE LINE # 1406
021C 7FC8              MOV     R7,#0C8H
021E 7E00              MOV     R6,#00H
0220 120000      R     LCALL   _Wait_ms
                                           ; SOURCE LINE # 1407
0223 7800        R     MOV     R0,#LOW j
0225 E2                MOVX    A,@R0
0226 04                INC     A
0227 F2                MOVX    @R0,A
0228 E2                MOVX    A,@R0
0229 C3                CLR     C
022A 9403              SUBB    A,#03H
022C 5003              JNC     $ + 5H
022E 020000      R     LJMP    ?C0115
0231         ?C0116:
                                           ; SOURCE LINE # 1408
0231 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 1410
0233         ?C0125:
0233 22                RET     
             ; FUNCTION _TW2835Command (END)

C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 117 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


FormatStart. . . . . . . . . . . . . .  EXTERN   DATA   BIT      -----  1
P1M0 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0091H  1
second . . . . . . . . . . . . . . . .  EXTERN   PDATA  U_CHAR   -----  1
InitCPU. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
timer0_int . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
P2 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A0H  1
DWORD. . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
_SaveDebugLevelEE. . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_LCDPowerON. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
timer2_int . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
P4 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E8H  1
CAM_R. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
FormatWait . . . . . . . . . . . . . .  PUBLIC   PDATA  U_CHAR   0000H  1
CAM_BAR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ABR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_CAR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ACR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_CBR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_BCR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
DVR_buf. . . . . . . . . . . . . . . .  PUBLIC   DATA   ARRAY    0000H  30
keytic . . . . . . . . . . . . . . . .  PUBLIC   DATA   U_CHAR   001EH  1
NumberStringType . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  11
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  width. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  BackColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  Radix. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  NumColor . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  MaxLen . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  PrePostCharLen . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  PrePostChar. . . . . . . . . . . . .  MEMBER   -----  ARRAY    0008H  3
_InitVideoData . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
IE . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A8H  1
RS2_in . . . . . . . . . . . . . . . .  PUBLIC   DATA   U_CHAR   001FH  1
RepeatKey. . . . . . . . . . . . . . .  PUBLIC   DATA   BIT      0000H  1
GetDATETIMEflag. . . . . . . . . . . .  EXTERN   DATA   BIT      -----  1
_delay . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  cnt. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  ttic01 . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
Change_OSDColorLookup. . . . . . . . .  EXTERN   CODE   PROC     -----  -----
SaveDefaultPCDataAllEE . . . . . . . .  EXTERN   CODE   PROC     -----  -----
GetDebugLevelEE. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
minute . . . . . . . . . . . . . . . .  EXTERN   PDATA  U_CHAR   -----  1
FontData . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  27
  font . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  27
VInputStd. . . . . . . . . . . . . . .  EXTERN   PDATA  U_CHAR   -----  1
P3_4 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B4H  1
P3_5 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B5H  1
ES . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ACH  1
CCAPM2 . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DCH  1
IP . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B8H  1
RI . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0098H  1
TI . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0099H  1
RS_ready . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
AVMode . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
SourceModeType . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
tic01. . . . . . . . . . . . . . . . .  PUBLIC   DATA   U_CHAR   0020H  1
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 118 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


KeyReady . . . . . . . . . . . . . . .  PUBLIC   DATA   BIT      0001H  1
CAM_NUM. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
RS_Xbusy . . . . . . . . . . . . . . .  PUBLIC   DATA   BIT      0002H  1
CCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D8H  1
_RS2_tx. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  tx_buf . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
SetPossibleAutoDetectStdEE . . . . . .  EXTERN   CODE   PROC     -----  -----
Key. . . . . . . . . . . . . . . . . .  PUBLIC   DATA   U_CHAR   0021H  1
_Puts. . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CAM_RAB_H. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
serial_int . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
ext1_int . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
OSDStrInfo . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  8
  cnt. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  addr . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  attr . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  str. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0004H  4
SBUF . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0099H  1
PCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0087H  1
SCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0098H  1
InitVars . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
TMOD . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0089H  1
TCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0088H  1
CAM_BA . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_AB . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
BYTE . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
TimeType . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  7
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  width. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  BackColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  Format . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  TimeColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  CursorColor. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
ResetPanelAttributeValue . . . . . . .  EXTERN   CODE   PROC     -----  -----
CAM_CA . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_AC . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_abs . . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CAM_BC . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_CB . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
SourceModeTypeEnum . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
struct_IdName. . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  17
  Id . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  Name . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0001H  16
EnumType . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  17
  Sz . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  ByLang . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  Str. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0002H  15
MenuType . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  4
  width. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  height . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  TitleColor . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  CursorColor. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
CAM_RAB_T. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
PanelInfoStr . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    07FDH  47
PowerDownStart . . . . . . . . . . . .  EXTERN   DATA   BIT      -----  1
_ReadI2C . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 119 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


CHPCON . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BFH  1
WORD . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
main_init. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  rev. . . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0000H  2
day. . . . . . . . . . . . . . . . . .  EXTERN   PDATA  U_CHAR   -----  1
hour . . . . . . . . . . . . . . . . .  EXTERN   PDATA  U_CHAR   -----  1
InputSelection . . . . . . . . . . . .  EXTERN   PDATA  U_CHAR   -----  1
CHPENR . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F6H  1
PowerDownWait. . . . . . . . . . . . .  PUBLIC   PDATA  U_CHAR   0001H  1
tm01 . . . . . . . . . . . . . . . . .  PUBLIC   DATA   U_INT    0022H  2
stopWatch. . . . . . . . . . . . . . .  PUBLIC   DATA   U_INT    0024H  2
_TW2835Command . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  _commid. . . . . . . . . . . . . . .  AUTO     PDATA  CHAR     0000H  1
  _attr0 . . . . . . . . . . . . . . .  AUTO     DATA   CHAR     0005H  1
  _attr1 . . . . . . . . . . . . . . .  AUTO     DATA   CHAR     0003H  1
  _attr2 . . . . . . . . . . . . . . .  AUTO     PDATA  CHAR     0003H  1
  _attr3 . . . . . . . . . . . . . . .  AUTO     PDATA  CHAR     0004H  1
  AttrBuf. . . . . . . . . . . . . . .  AUTO     PDATA  ARRAY    0005H  4
  i. . . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   0009H  1
  j. . . . . . . . . . . . . . . . . .  AUTO     PDATA  U_CHAR   000AH  1
  WaitCnt. . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    000BH  2
RS_buf . . . . . . . . . . . . . . . .  STATIC   DATA   ARRAY    0026H  8
_SetVInputStd. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CAM_AR . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
PowerDown_XTAL . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CAM_BR . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_RB . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_CR . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Register . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
ET2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ADH  1
TF2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CFH  1
TH0. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008CH  1
_WriteI2C. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
TH1. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008DH  1
_DiffTime_ms . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  stime. . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
  etime. . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
EX1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AAH  1
TL0. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008AH  1
InitTechwell . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
RS2_Xbusy. . . . . . . . . . . . . . .  PUBLIC   DATA   BIT      0003H  1
NumType. . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  5
  PrePostCharLen . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  PrePostChar. . . . . . . . . . . . .  MEMBER   -----  ARRAY    0001H  4
_Wait_ms . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  Tms. . . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0000H  2
  count. . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0002H  2
TR2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CAH  1
_ReadEEP . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
RegisterInfo . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  Min. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0000H  2
  Max. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0002H  2
  Default. . . . . . . . . . . . . . .  MEMBER   -----  INT      0004H  2
ClearBasicEE . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
GetTime_H. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_PCMDATA . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  22
  Support. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 120 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  HAN. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  VAN. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0003H  2
  IVF. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0005H  2
  CLOCK. . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0007H  2
  low. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0009H  2
  high . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000BH  2
  Hstart . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000DH  2
  Vstart . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000FH  2
  IPF. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0011H  2
  PPF. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0013H  2
  VBack. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0015H  1
RS_in. . . . . . . . . . . . . . . . .  PUBLIC   DATA   U_CHAR   002EH  1
_SaveInputSelectionEE. . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CAM_QUAD . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
RS_out . . . . . . . . . . . . . . . .  PUBLIC   DATA   U_CHAR   002FH  1
GetTime_M. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
serial2_int. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
S2BUF. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   009AH  1
DebugLevel . . . . . . . . . . . . . .  EXTERN   PDATA  U_CHAR   -----  1
DefineMenu . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  16
  Icon . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0000H  2
  Desc . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0002H  3
  PreFnId. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  PostFnId . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  IconColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  DescColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
  Child. . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0009H  2
  Type . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000BH  1
  ActiveWithCursor . . . . . . . . . .  MEMBER   -----  U_CHAR   000CH  1
  Id . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000DH  1
  TypeData . . . . . . . . . . . . . .  MEMBER   -----  PTR      000EH  2
_PowerLED. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  flag . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
S2CON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00AAH  1
VGAMode. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
T2CON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C8H  1
_SaveFWRevEE . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
SEQ. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
LongRegisterInfo . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  Min. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  Max. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  Default. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
DisplayLogo. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
S2BRT. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BAH  1
PictureInfo. . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  4
  Register_Addr. . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  EEPROM_Addr. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  Control_Range. . . . . . . . . . . .  MEMBER   -----  PTR      0002H  2
CAM_ABR_T3 . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
RS_rx. . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ret. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
CAM_ABR_T4 . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
DownloadUDFont . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_RS_tx . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  tx_buf . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
CAM_A. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
tm001. . . . . . . . . . . . . . . . .  PUBLIC   DATA   U_CHAR   0030H  1
C51 COMPILER V8.16   CPU                                                                   03/04/2011 15:51:16 PAGE 121 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


AUXR2. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A6H  1
CAM_B. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
GetTime_ms . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  tms. . . . . . . . . . . . . . . . .  AUTO     PDATA  U_INT    0000H  2
CAM_C. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
tic_pc . . . . . . . . . . . . . . . .  PUBLIC   DATA   U_INT    0031H  2
CAM_D. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
RS_buf2. . . . . . . . . . . . . . . .  PUBLIC   DATA   ARRAY    0033H  8
_Printf. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
SystemClock. . . . . . . . . . . . . .  PUBLIC   DATA   U_LONG   003BH  4
CAM_CAB. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_BAC. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ABC. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CommTable. . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0797H  102
GetFWRevEE . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
SEQTime. . . . . . . . . . . . . . . .  EXTERN   PDATA  U_CHAR   -----  1
VInputStdDetectMode. . . . . . . . . .  EXTERN   PDATA  U_CHAR   -----  1
AUXIE. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00ADH  1


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1756    ----
   CONSTANT SIZE    =   2092    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =      2      21
   DATA SIZE        =     63    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      4    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
