C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE KEYREMO
OBJECT MODULE PLACED IN .\Output\keyremo.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE keyremo.c LARGE OPTIMIZE(9,SIZE) BROWSE INCDIR(.\Include\) DEBUG OBJECTE
                    -XTEND CODE LISTINCLUDE SYMBOLS PRINT(.\Source\keyremo.lst) TABS(2) OBJECT(.\Output\keyremo.obj)

line level    source

   1          //
   2          // KeyRemo.h
   3          // Default function for Key Input and Remocon Input
   4          //
   5          //=============================================================================
   6          //                        Operation Key Mapping
   7          //=============================================================================
   8          #include "config.h"
   1      =1  /*****************************************************************************/
   2      =1  /*                           System Configurations                           */
   3      =1  /*              rev 0.10 include auto test             */
   4      =1  // 0.11 change DTV, PC input initial download data correct for Charge Pump
   5      =1  // 0.12 correct phase measurement routine '>>3'
   6      =1  // 0.13 enable function for SPI control... only EXT MCU case
   7      =1  // 0.14 corrected PC measurement......
   8      =1  // 0.0a test function only for CVBS, SVIDEO
   9      =1  // 0.15 corrected DTV scaler setting for panel resolutions
  10      =1  // 0.0b panel for AND 640x480 TICON panel
  11      =1  // 0.16 corrected COMPONENT scaler setting for panel resolutions  11/21/2007
  12      =1  // 0.0c automatic chip test
  13      =1  // 0.17 add monitor function, osd grid for writing grid
  14      =1  // 0.18 add component, dtv pc for analogpanel, 12/06/2007
  15      =1  // 0.19 correct pal input for CES, 12/20/2007
  16      =1  // 0.1a CCFL control, 12/28/2007
  17      =1  // 0.19 Multi Grid for Banking on Internal MCU  01/17/2008
  18      =1  // 0.20 CCFL contol for backlight brightness  01/21/2008
  19      =1  // 0.21 CCFL contol for backlight brightness  01/25/2008
  20      =1  // 0.22 phase setting 02/07/2008
  21      =1  // 0.221 display input correction 04/03/2008
  22      =1  // 0.23 PC, DTV mode, no signal display
  23      =1  // 0.24 PC Auto Color adjustment
  24      =1  // 0.25 revised PC Auto Clock adjustment - find divide number and phase
  25      =1  // 0.26 Digital RGB for TW8826
  26      =1  // 0.27 Correct LVDS control          08/22/2008
  27      =1  // 0.28 Add WSVGA resolution          10/23/2008
  28      =1  // 0.29 Add NEW GRID              11/14/2008
  29      =1  // 0.30 Fix DTV input             12/10/2008
  30      =1  // 0.31 Add 1080i23, 24, 25A, 25B       01/20/2009
  31      =1  // 0.32 TCON setting FIX all mode       01/22/2009
  32      =1  // 0.33 autodetect is auto on/off by dip sw1  02/02/2009
  33      =1  // 0.34 Fix autocolor function and clamp position 02/08/2009
  34      =1  /*****************************************************************************/
  35      =1  #ifndef __CONFIG_H__
  36      =1  #define __CONFIG_H__
  37      =1  
  38      =1  //#define INTERNAL_MCU -- defined by Project Compiler session
  39      =1  #define   HS        
  40      =1  //#define   E_Wintek  
  41      =1  //#define   AWT 
  42      =1  //#define Holtz
  43      =1  
  44      =1  //#define QUAD
  45      =1  
  46      =1  #ifdef QUAD
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 2   

           =1   #define AWT_ML072Q  //Pinchi 20150827 disable for HTRV
           =1 //  #define HTRV  //Pinchi 20140902 disable for AWT ML072Q
           =1 #else
  50      =1    #define AWT_ML072S
  51      =1  #endif
  52      =1  
  53      =1  //--------------------------------------------------
  54      =1  //              Common Feature Define
  55      =1  //--------------------------------------------------
  56      =1  //#define FIRST_RUN_FROM_AC  //Pinchi 20150831 disable for Screen re-setting by Set4WideScreen()  //Pinchi
             - 20141029 add
  57      =1  #define SUPPORT_ML072Q_AUTO_DAY_NIGHT  //Pinchi 20150825 add for function define
  58      =1  #define SUPPORT_TRIGGER_EXIT_MENU  //Pinchi 20150827 add for exit OSD Menu by CAM trigger
  59      =1  #define SUPPORT_AC_ON_NORMAL_SCREEN  //Pinchi 20150901 add to set 4:3 screen when AC on
  60      =1  
  61      =1  #define FIX_DISPLAY_OFF_TRIGGER_ISSUE  //Pinchi 20150908 add to fix [Display] set OFF and trigger release 
             -then trigger again during display info the CAM will change from trigger CH to original CH
  62      =1  #define FIX_EXIT_STANDBY_NO_AUDIO  //Pinchi 20150908 add to fix no audio output when exit Standby mode
  63      =1  #ifdef AWT_ML072Q
           =1 #define FIX_2835_SCREEN_NOISE  //Pinchi 20160929 add to fix the screen noise of TW2835 by change DDR to ma
             -ke clock shift
           =1 #endif
  66      =1  
  67      =1  #define SUPPORT_NEW_TRIGGER_FUNCTION  /////修改新的Trigger方式減少trigger polling 時間 add by ryan@2018012
             -4
  68      =1  
  69      =1  //#define AWT_ML072QS_MSG  //Pinchi 20140925 add
  70      =1  //#define REDUCE_DELAY_TIME  //Pinchi 20141029 add
  71      =1  //#define DISPLAY_TECHWELL_LOGO  //Pinchi 2050903 add to disable the Techwell logo
  72      =1  
  73      =1  //#define SUPPORT_SVIDEO                     //andy Awt 20090914
  74      =1  //#define SUPPORT_COMPONENT     // support component analog to decoder//andy Awt 20090914
  75      =1  //#define SUPPORT_DTV           // support DTV input through component( to ADC ).//andy Awt 20090914
  76      =1  //#define SUPPORT_PC        // support PC function
  77      =1  //#define SUPPORT_DVI       // support DVI input
  78      =1  //#define SUPPORT_SDCARD
  79      =1  
  80      =1  #define SUPPORT_2835_CLK_TUNE_BACK_DOOR  //Pinchi 20160913 add to fine tune TW2835 clock by hot key
  81      =1  //#define SUPPORT_DISPLAY_TEST_VERSION  //Pinchi 20150929 add to display test software version on OSD
  82      =1  
  83      =1  //--------------------------------------------------
  84      =1  //              Model Feature Define
  85      =1  //--------------------------------------------------
  86      =1  #if (defined AWT_ML072Q) || (defined AWT_ML072S)
  87      =1  #define AWT_ML072QS_FW_RULE  //Pinchi 20140902 add
  88      =1  //#define AWT_NEW_SLIM_MODEL  //Pinchi 20150203 add for AWT new slim model
  89      =1  #define AWT_NO_SIGNAL_MSG  //Pinchi 20150319 add for display "NO VIDEO SIGNAL" by AWT request of 20150302
  90      =1  #define AWT_TW2835_DRAW_T_ICON  //Pinchi 20150415 add to draw T icon by TW2835 when CAM C trigger
  91      =1  #define SUPPORT_AC_ON_REDUCE_TIME  //Pinchi 20150903 add to reduce Power time when AC on
  92      =1  
  93      =1  //#define SUPPORT_TRIGGER_RELEASE_DELAY  //Pinchi 20150908 add to support delay time when CAM trigger rele
             -ase
  94      =1  
  95      =1  typedef enum  //Pinchi 20150326 add
  96      =1  {
  97      =1       LAST_TRIG_NON =  0x00,
  98      =1       LAST_TRIG_LEFT =   0x01,
  99      =1       LAST_TRIG_RIGHT =  0x02,
 100      =1       LAST_TRIG_REVERSE =0x03,
 101      =1       LAST_TRIG_CAMC =   0x04,
 102      =1  
 103      =1  } AWT_LAST_TRIGGER;
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 3   

 104      =1  
 105      =1  #endif
 106      =1  
 107      =1  
 108      =1  #ifdef HTRV  //Pinchi 20150825 add
           =1 #define HTRV_ML072Q_FW_RULE  //Pinchi 20150827 add
           =1 #define HTRV_REDUCE_SCREEN_CHANGE  //Pinchi 20150828 add to reduce screen double change
           =1 
           =1 #if 0  //Pinchi 20151209 add to remove 4:3 screen by HTRV request of 20151209
           =1 #define HTRV_SUPPORT_4_3_SCREEN
           =1 #else
           =1 #undef SUPPORT_AC_ON_NORMAL_SCREEN  //Pinchi 20151210 add
           =1 #endif
           =1 
           =1 #endif
 119      =1  
 120      =1  //#define SUPPORT_RS485
 121      =1  //-----------------------------------------------------------------------------
 122      =1  //    Firmware Version
 123      =1  //-----------------------------------------------------------------------------
 124      =1  #ifdef HTRV  //Pinchi 20150907 add
           =1 //#define FWVER     0x200 // Rev 2.00
           =1 //#define FWVER     0x210   // Rev 2.1  //Pinchi 20151209 update version for HTRV request to remove 4:3 scree
             -n
           =1 //#define FWVER     0x220   // Rev 2.2  //Pinchi 20160929 change for V2.2
           =1 #define FWVER     0x230     //Rev 2.3    ryan@20170727 update version by Encoder switches零件 EOL更換
           =1 #else
 130      =1  #define FWVER     0x210   // Rev 0.14
 131      =1  #endif
 132      =1  
 133      =1  //-----------------------------------------------------------------------------
 134      =1  //    Compiler
 135      =1  //-----------------------------------------------------------------------------
 136      =1  #define KEILC           // Keil C 5.0
 137      =1  //-----------------------------------------------------------------------------
 138      =1  //    MPU Clock
 139      =1  //-----------------------------------------------------------------------------
 140      =1  #ifndef INTERNAL_MCU
 141      =1  //#define CLOCK_11M         // 11.0592MHz
 142      =1  #define CLOCK_22M         // 22.1184MHz
 143      =1  #else                 // INTERNAL_MCU
           =1 #define CLOCK_27M         // 27MHz
           =1 #define REG_START_ADDRESS 0xc000    // register start 0xc000, for page0, 0xc100-page1 
           =1 #endif
 147      =1  //-----------------------------------------------------------------------------
 148      =1  //    TW88 Version
 149      =1  //-----------------------------------------------------------------------------
 150      =1  #define TW8816   ///AWT TW8806 change to TW8816 platform //ryan@20170921
 151      =1  //-----------------------------------------------------------------------------
 152      =1  //-----------------------------------------------------------------------------
 153      =1  //    Options for Backlight control
 154      =1  //-----------------------------------------------------------------------------
 155      =1  //#define BACKLIGHT_CCFL
 156      =1  //#define BACKLIGHT_LED
 157      =1  #define BACKLIGHT_PWM
 158      =1  
 159      =1  //-----------------------------------------------------------------------------
 160      =1  //    Panel Resolution
 161      =1  //-----------------------------------------------------------------------------
 162      =1  // ---- Select Default Panel
 163      =1  //
 164      =1  //#define UXGA            // 1600 x 1200
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 4   

 165      =1  //#define SXGA              // 1280 x 1024
 166      =1  //#define XGA  // 1024 x 768
 167      =1  #ifdef XGA
           =1   #define LVDS          
           =1   #define PWIDTH  1024
           =1   #define PHEIGHT 768
           =1 #endif
 172      =1  //#define SVGA            //  800 x 600
 173      =1  //#define VGA             //  640 x 480
 174      =1  #ifdef VGA
           =1   #define PWIDTH  640
           =1   #define PHEIGHT 480
           =1   //#define HITACHI_640_B_160   //--> 640 x 160
           =1   #define AND_640_480
           =1 #endif
 180      =1  //#define WXGA            // 1280 x 768 (15:9) // 1366 x 768 (16:9)
 181      =1  #ifdef WXGA
           =1     //#define WX_SHARP_LQ106K1LA
           =1   #define PWIDTH  1280
           =1   #define PHEIGHT 768
           =1 #endif
 186      =1  //#define WSVGA           // 1024 x 600 *** only video mode
 187      =1  #ifdef WSVGA
           =1   #define PWIDTH  1024
           =1   #define PHEIGHT 600
           =1   #define UNIDEN_1024_600
           =1 #endif
 192      =1  #define WVGA            //  800 x 480
 193      =1  #ifdef WVGA
 194      =1    #define PWIDTH  800
 195      =1    #define PHEIGHT 480//600
 196      =1    // If WVGA, you have to select panel.
 197      =1    //#define AU_10INCH
 198      =1    //#define WVGA_TPO
 199      =1    //#define SAMSUNG_10INCH
 200      =1    //#define SAMSUNG_TICONLESS_10INCH
 201      =1    //#define SHARP_TICONLESS_7INCH
 202      =1    //#define AU_TICONLESS_7INCH
 203      =1    //#define AU_G084SN05V8_8_4INCH 
 204      =1    #define HSD070IDW1_7INCH
 205      =1    //#define INNOLUX_AT080TN03
 206      =1    //#define AU_TICONLESS_7INCH_CCFL
 207      =1    //#define CMO     // CHIMEI panel
 208      =1    //#define AU_TICONLESS_10INCH
 209      =1    //#define HITACHI_T01
 210      =1    //#define HITACHI_TX23D12
 211      =1    //#define HITACHI_TX18D24
 212      =1    //#define HITACHI_TX18D16
 213      =1    //#define TMD_LTA070A320F
 214      =1    //#define TMD_LTA080B
 215      =1  #endif  //WVGA
 216      =1  //#define HVGA            //  480 x 320
 217      =1  //#define QVGA            //  320 x 240 *** only video mode
 218      =1  #ifdef QVGA
           =1   #define PWIDTH  320
           =1   #define PHEIGHT 240
           =1   //#define HITACHI_TX09D73
           =1   //#define AU_DELTARGB
           =1   //#define SHARP_LQ050Q5DR01
           =1   //#define SHARP_LQ035
           =1   //#define TMD
           =1 #endif
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 5   

 227      =1  
 228      =1  //#define WQVGA           //  480 x 234 *** only video mode
 229      =1  #ifdef WQVGA
           =1   #define PWIDTH  480
           =1   #define PHEIGHT 240
           =1   // If WQVGA, you have to select panel 
           =1     #define ANALOG_7INCH
           =1   //#define PWIDTH  400
           =1   //#define PHEIGHT 240
           =1   //#define SHARP_LQ043T3DX02   //  400 x 237
           =1   //#define LG_ANALOG
           =1   //#define TMD_ANALOG        //TMD_LTA05B352A
           =1   //#define T_51945GD       // Optorex Panel
           =1 #endif  // WQVGA
 241      =1  
 242      =1  //if LVDS pannel disable TICONLESS
 243      =1  
 244      =1  //-----------------------------------------------------------------------------
 245      =1  //---- Add Support One more panel with DIPSW#1
 246      =1  //---- Ex. Add Analog AU 7" Panel with Default Panel for evalution
 247      =1  //#define ADD_ANALOGPANEL   // Added Analog panel(AU7") from default set panel(expect WQVGA) with DIP #1 sw
             -itch.(DIP#1=L:ANALOG, H:DEFAULT)
 248      =1                // It can't support WQVGA and ADD_ANALOGPANEL same time!!
 249      =1    //#define ADD_ANALOG_7INCH
 250      =1    //#define ADD_TMD_LTA05B352A
 251      =1                    
 252      =1  //---- Support Wide panel function
 253      =1  #if (defined WXGA) || (defined WSVGA) || (defined WVGA) || (defined WQVGA)
 254      =1  #if 0///ryan@20180115//mask for NTSC sharpness issue
           =1 #define WIDE_SCREEN         // Can support 4 display mode, i.e. Normal, Wide, Full, Zoom
           =1 #endif
 257      =1  #endif                // Tested panasonic WVGA panel.
 258      =1  
 259      =1  //-----------------------------------------------------------------------------
 260      =1  //    Panel Vendor Specific
 261      =1  //-----------------------------------------------------------------------------
 262      =1  
 263      =1  //-----------------------------------------------------------------------------
 264      =1  //    TV Tuner
 265      =1  //-----------------------------------------------------------------------------
 266      =1  #define PHILIPS       0
 267      =1  #define ALPS        1   // ALPS, LG
 268      =1  #define TEMIC       2
 269      =1  #define TVAVA       3
 270      =1  #define LGTUNER       4
 271      =1  #define SAMSUNGMUTITUNER  5
 272      =1  
 273      =1  #define TVTunerDevice   4
 274      =1  //-----------------------------------------------------------------------------
 275      =1  //    IR Remote Controller Type
 276      =1  //-----------------------------------------------------------------------------
 277      =1  //#define REMO_RC5          // RC5 style
 278      =1  #define TECHWELL_REMOCON
 279      =1  //#define REMO_NEC          // NEC style
 280      =1  //#define PHILIPS_REMOCON // New remocon 
 281      =1  
 282      =1  //-----------------------------------------------------------------------------
 283      =1  //    I2C Device Access Address Mapping
 284      =1  //-----------------------------------------------------------------------------
 285      =1  
 286      =1  #define EEPROMI2CAddress  0xa0  // EEPROM (24C16)
 287      =1  #define TW88I2CAddress    0x8a  // TW880x
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 6   

 288      =1  
 289      =1  #define MSPI2CAddress   0x80  // MSP
 290      =1  #define ALC106I2CAddress  0x4A  // MSP
 291      =1  //-----------------------------------------------------------------------------
 292      =1  //    Options for Possible Inputs
 293      =1  //-----------------------------------------------------------------------------
 294      =1  
 295      =1  
 296      =1  //-----------------------------------------------------------------------------
 297      =1  //    Options for Possible Standards
 298      =1  //    Default:NTSC
 299      =1  //-----------------------------------------------------------------------------
 300      =1  #define SUPPORT_PAL     
 301      =1  #define SUPPORT_SECAM
 302      =1  #define SUPPORT_NTSC4   
 303      =1  #define SUPPORT_PALM  
 304      =1  #define SUPPORT_PALN    
 305      =1  #define SUPPORT_PAL60   
 306      =1  
 307      =1  //#define ID_CHECK_BY_FW        // in Video mode, check input system ID by firmware
 308      =1  
 309      =1  //-----------------------------------------------------------------------------
 310      =1  //    Options for Debugging/Release
 311      =1  //-----------------------------------------------------------------------------
 312      =1  //#define SUPPORT_PATTERN       // support LCD test pattern
 313      =1  
 314      =1  #ifndef WQVGA
 315      =1    #ifndef QVGA
 316      =1  #define SUPPORT_OSDPOSITIONMOVE
 317      =1    #endif
 318      =1  #endif
 319      =1  
 320      =1  #define SERIAL              // include serial communication routines
 321      =1  
 322      =1  //#define SUPPORT_DEBUG       // Support to use Read & Write in debug OSD Window by remocon.
 323      =1  
 324      =1  //#define DEBUG           // include debug information
 325      =1  #ifdef DEBUG
           =1   //#define DEBUG_MAIN
           =1   //#define DEBUG_TIME
           =1   //#define DEBUG_KEYREMO
           =1   //#define DEBUG_TW88
           =1   //#define DEBUG_DECODER
           =1   //#define DEBUG_I2C
           =1   //#define DEBUG_EEP
           =1   //#define DEBUG_OSD
           =1   //#define DEBUG_AUDIO
           =1   //#define DEBUG_SETPANEL
           =1   //#define DEBUG_DTV
           =1 //  #define DEBUG_PC
           =1   //#define DEBUG_PC_MEAS
           =1   //#define DEBUG_PC_COLOR
           =1   //#define DEBUG_COMPONENT
           =1   //#define DEBUG_BANK
           =1   //#define DEBUG_PAUSE
           =1   //#define DEBUG_MCU
           =1 #endif
 345      =1  
 346      =1  #define AUTOCALC_PC         // in PC mode, Enable Auto Calcuration
 347      =1  //#define SUPPORT_USERCOLORFROMTXT  // Use color setting of text file in Color mode=USER MODE which is as B
             -rightness(Reg10), Contast(Reg11),
 348      =1                    //    Sat_U(Reg13),Sat_V(Reg14),Sharpness(Reg12,Reg78)                  
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 7   

 349      =1  //#define SUPPORT_GAMMA
 350      =1  
 351      =1  //#define CHIP_MANUAL_TEST      // DIPSW#1
 352      =1  
 353      =1  #ifndef INTERNAL_MCU
 354      =1  //#define NO_INITIALIZE       // After Power switch turn on with DIP SW4 Enable(Low), or pressed MENU button 
             -for internal MCU
 355      =1                                      //     micom works to access only I2C bus by serial command.
 356      =1  #endif
 357      =1  
 358      =1  //#define SUPPORT_KRS_OSDDEMO   // For KRS Company Demo 
 359      =1  //#define SUPPORT_LINE_OSDDEMO
 360      =1  
 361      =1  //-----------------------------------------------------------------------------
 362      =1  //    Special Features
 363      =1  //-----------------------------------------------------------------------------
 364      =1  
 365      =1  #ifndef INTERNAL_MCU
 366      =1  //#define SUPPORT_DELTA_RGB
 367      =1  #endif
 368      =1  #define SUPPORT_SELECTKEY     // choose the keymap of using select key or left,right key.
 369      =1  //-----------------------------------------------------------------------------
 370      =1  
 371      =1  //#define HS_NEWOSDMENU     //Weylis -@121008 for Hor. Style OSD
 372      =1  //#define HS_NEWOSDMENU_2     //Weylis -@121008 for Hor. Style OSD(2 line)
 373      =1  
 374      =1  #endif  //__CONFIG_H__
 375      =1  
   9          #include "typedefs.h"
   1      =1  #ifndef __TYPEDEFS__
   2      =1  #define __TYPEDEFS__
   3      =1  
   4      =1  
   5      =1  #define DATA    data
   6      =1  #define PDATA   pdata
   7      =1  #define IDATA   data
   8      =1  #define CODE    code
   9      =1  #define CODE_P
  10      =1  #define PDATA_P
  11      =1  #define IDATA_P
  12      =1  #define DATA_P
  13      =1  
  14      =1  #define INTERRUPT( num, name ) name() interrupt num
  15      =1  
  16      =1  #define _between(x, a, b) (a<=x && x<=b)
  17      =1  #define _swap(a, b)     { a^=b; b^=a; a^=b; }
  18      =1  
  19      =1  typedef unsigned char Register;
  20      =1  typedef unsigned char BYTE;
  21      =1  typedef unsigned short  WORD;
  22      =1  typedef unsigned long DWORD;
  23      =1  
  24      =1  #define TRUE  1
  25      =1  #define FALSE 0
  26      =1  
  27      =1  //VInputStdDetectMode
  28      =1  #define AUTO  0
  29      =1  
  30      =1  //VInputStd
  31      =1  #define NTSC  1     
  32      =1  #define PAL   2
  33      =1  #define SECAM 3
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 8   

  34      =1  #define NTSC4 4
  35      =1  #define PALM  5
  36      =1  #define PALN  6
  37      =1  #define PAL60 7
  38      =1  
  39      =1  #define MAXINPUTSTD PAL60+1 // 
  40      =1  
  41      =1  #define UNKNOWN 0xfe
  42      =1  #define NOINPUT 0 //0xff
  43      =1  
  44      =1  #define NIL     0xff
  45      =1  
  46      =1  enum SourceModeTypeEnum
  47      =1  { 
  48      =1    AVMode,      // 0   0X00
  49      =1    //VGAMode,       // 1
  50      =1  #ifdef USE_CAMD 
           =1   CAM_D,         // 2
           =1 #endif
  53      =1    CAM_A,         // 3   0x01
  54      =1    CAM_B,         // 4   0x02
  55      =1    CAM_C,         // 5   0x03
  56      =1    CAM_R,         // 6   0x04
  57      =1    CAM_AB,        // 7   0x05
  58      =1    CAM_CR,        // 8   0x06
  59      =1    CAM_AR,        // 9   0x07
  60      =1    CAM_RB,        // 10    0x08
  61      =1    CAM_AC,        // 11    0x09
  62      =1    CAM_CB,        // 12    0x0a
  63      =1    CAM_RAB_T,     // 13    0x0b
  64      =1    CAM_RAB_H,     // 14    0x0c
  65      =1  
  66      =1    #ifdef HTRV
           =1   CAM_RC,
           =1   #endif
  69      =1    
  70      =1    CAM_QUAD,      // 15    0x0d
  71      =1    CAM_ABR_T3,    // 16    0x0e
  72      =1    CAM_ABR_T4,    // 17    0x0f
  73      =1    CAM_RAC_T,      //  0x10
  74      =1    CAM_RBC_T,      //  0x11
  75      =1    CAM_RAC_T2,     //  0x12
  76      =1    CAM_RBC_T2,     //  0x13
  77      =1    CAM_BA,       //  0x14
  78      =1    CAM_BC,       //  0x15
  79      =1    CAM_BR,       //  0x16
  80      =1    CAM_CA,       //  0x17
  81      =1    CAM_ABC,      //  0x18
  82      =1    CAM_ABR,      //  0x19
  83      =1    CAM_ACR,      //  0x1a
  84      =1    CAM_BAC,      //  0x1b
  85      =1    CAM_BAR,      //  0x1c
  86      =1    CAM_BCR,      //  0x1d
  87      =1    CAM_CAB,      //  0x1e
  88      =1    CAM_CAR,      //  0x1f
  89      =1    CAM_CBR,      //  0x20
  90      =1    SEQ,           // 18      0x10
  91      =1    CAM_NUM
  92      =1  };
  93      =1  
  94      =1  typedef unsigned char SourceModeType;
  95      =1  
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 9   

  96      =1  #endif  /* __TYPEDEFS__ */
  97      =1  
  10          #include "keyremo.h"
   1      =1  //
   2      =1  // KeyRemo.h
   3      =1  // Default function for Key Input and Remocon Input
   4      =1  //
   5      =1  //=============================================================================
   6      =1  //                        Operation Key Mapping
   7      =1  //=============================================================================
   8      =1  
   9      =1  
  10      =1  
  11      =1  
  12      =1  #define ResetKey()    { P2 = 0xff;}
  13      =1  //#define ReadKey()   (~P1 & 0xfc);
  14      =1  
  15      =1  #ifdef QUAD
           =1 #define EVENTKEY    0x02
           =1 #endif
  18      =1  #define POWERKEY    0x04 //andy AWT 980907
  19      =1  #define MENUKEY     0x08
  20      =1  
  21      =1  #ifdef AWT_NEW_SLIM_MODEL  //Pinchi 20150203 add for AWT new slim model
           =1 #define UPKEY       0x10
           =1 #define DOWNKEY     0x20
           =1 #define SELECTKEY     0x40
           =1 #define INPUTSOURCEKEY  0x80
           =1 #define VersionKEY    0xC0
           =1 #define UnLockKEY     0xC0
           =1 #else
  29      =1  #define INPUTSOURCEKEY  0x10
  30      =1  #define UPKEY       0x20
  31      =1  #define DOWNKEY       0x40
  32      =1  #define SELECTKEY     0x80
  33      =1    #if 1//Pinchi 20160929 add
  34      =1    #define Tune2835ClkKEY 0x90
  35      =1    #define Enter2835TuneKEY 0x0C
  36      =1    #else
           =1   #define VersionKEY      0x90
           =1   #endif
  39      =1  #endif
  40      =1  
  41      =1  #define REMO_CUSTOM   0
  42      =1  
  43      =1  #define REMO_NUM0   0
  44      =1  #define REMO_NUM1   1
  45      =1  #define REMO_NUM2   2
  46      =1  #define REMO_NUM3   3
  47      =1  #define REMO_NUM4   4
  48      =1  #define REMO_NUM5   5
  49      =1  #define REMO_NUM6   6
  50      =1  #define REMO_NUM7   7
  51      =1  #define REMO_NUM8   8
  52      =1  #define REMO_NUM9   9
  53      =1  
  54      =1  #define REMO_STANDBY  12
  55      =1  #define REMO_CHNUP    32
  56      =1  #define REMO_CHNDN    33
  57      =1  #define REMO_VOLUP    16
  58      =1  #define REMO_VOLDN    17
  59      =1  #define REMO_SELECT   21
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 10  

  60      =1  #define REMO_MENU   63
  61      =1  #define REMO_MUTE   13
  62      =1  #define REMO_INPUT    56
  63      =1  
  64      =1  #define REMO_AUTO   10
  65      =1  #define REMO_INFO   58
  66      =1  #define REMO_AUDIO    38
  67      =1  #define REMO_ASPECT   62
  68      =1  #define REMO_CC     15
  69      =1  #define REMO_EXIT   0x16
  70      =1  
  71      =1  #define REMO_TTXRED     0x37
  72      =1  #define REMO_TTXGREEN   0x36
  73      =1  #define REMO_TTXYELLOW    0x32
  74      =1  #define REMO_TTXCYAN    0x34
  75      =1  
  76      =1  
  77      =1  
  78      =1  //=============================================================================
  79      =1  //                                 RC5 type
  80      =1  //=============================================================================
  81      =1  #ifdef REMO_RC5
           =1 
           =1 #ifdef TECHWELL_REMOCON
           =1 #define REMO_CUSTOM   0
           =1 
           =1 #define REMO_NUM0   0
           =1 #define REMO_NUM1   1
           =1 #define REMO_NUM2   2
           =1 #define REMO_NUM3   3
           =1 #define REMO_NUM4   4
           =1 #define REMO_NUM5   5
           =1 #define REMO_NUM6   6
           =1 #define REMO_NUM7   7
           =1 #define REMO_NUM8   8
           =1 #define REMO_NUM9   9
           =1 
           =1 #define REMO_STANDBY  12
           =1 #define REMO_CHNUP    32
           =1 #define REMO_CHNDN    33
           =1 #define REMO_VOLUP    16
           =1 #define REMO_VOLDN    17
           =1 #define REMO_SELECT   21
           =1 #define REMO_MENU   63
           =1 //#define REMO_TV     63
           =1 //#define REMO_VCR    60
           =1 //#define REMO_SVIDEO   56
           =1 #define REMO_MUTE   13
           =1 #define REMO_INPUT    56
           =1 
           =1 #define REMO_AUTO   10
           =1 #define REMO_INFO   58
           =1 #define REMO_AUDIO    38
           =1 #define REMO_ASPECT   62
           =1 #define REMO_CC     15
           =1 #define REMO_EXIT   0x16
           =1 
           =1 #define REMO_TTXRED     0x37
           =1 #define REMO_TTXGREEN   0x36
           =1 #define REMO_TTXYELLOW    0x32
           =1 #define REMO_TTXCYAN    0x34
           =1 
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 11  

           =1 #ifdef SUPPORT_DEBUG
           =1 #define REMO_DEBUG    0x2b
           =1 #define REMO_READ   0x29
           =1 #define REMO_WRITE    0x2a
           =1 #define REMO_RESERVED 0x30
           =1 #endif
           =1 
           =1 #else 
           =1 #define REMO_CUSTOM   0
           =1 
           =1 #define REMO_NUM0   0
           =1 #define REMO_NUM1   1
           =1 #define REMO_NUM2   2
           =1 #define REMO_NUM3   3
           =1 #define REMO_NUM4   4
           =1 #define REMO_NUM5   5
           =1 #define REMO_NUM6   6
           =1 #define REMO_NUM7   7
           =1 #define REMO_NUM8   8
           =1 #define REMO_NUM9   9
           =1 
           =1 #define REMO_STANDBY  12
           =1 #define REMO_CHNUP    32
           =1 #define REMO_CHNDN    33
           =1 #define REMO_VOLUP    16
           =1 #define REMO_VOLDN    17
           =1 #define REMO_SELECT   18
           =1 #define REMO_MENU   48
           =1 #define REMO_TV     63
           =1 #define REMO_VCR    60
           =1 #define REMO_SVIDEO   56
           =1 #define REMO_MUTE   13
           =1 #define REMO_INPUT    0xff
           =1 
           =1 #define REMO_INFO   0x0a //??
           =1 #endif
           =1 
           =1 //=============================================================================
           =1 //                                 NEC type
           =1 //=============================================================================
           =1 #elif defined REMO_NEC
           =1 /*
           =1 // Techwell Origin
           =1 #define REMO_CUSTOM1  0x20
           =1 #define REMO_CUSTOM2  0xdf
           =1 
           =1 
           =1 #define REMO_NUM0   0x08
           =1 #define REMO_NUM1   0x88
           =1 #define REMO_NUM2   0x48
           =1 #define REMO_NUM3   0xc8
           =1 #define REMO_NUM4   0x28
           =1 #define REMO_NUM5   0xa8
           =1 #define REMO_NUM6   0x68
           =1 #define REMO_NUM7   0xe8
           =1 #define REMO_NUM8   0x18
           =1 #define REMO_NUM9   0x98
           =1 
           =1 #define REMO_STANDBY  0x10
           =1 #define REMO_CHNUP    0x00
           =1 #define REMO_CHNDN    0x80
           =1 #define REMO_VOLUP    0x40
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 12  

           =1 #define REMO_VOLDN    0xc0
           =1 #define REMO_SELECT   0x70
           =1 #define REMO_MENU   0x9c
           =1 #define REMO_MUTE   0x90
           =1 #define REMO_INPUT    0xd0
           =1 */
           =1 
           =1 // Techwell New Remocon after 4/7/2005
           =1 #ifdef PHILIPS_REMOCON
           =1 #define REMO_CUSTOM1  0x02
           =1 #define REMO_CUSTOM2  0xfd
           =1 
           =1 #define REMO_NUM0   0x00
           =1 #define REMO_NUM1   0x80
           =1 #define REMO_NUM2   0x40
           =1 #define REMO_NUM3   0xc0
           =1 #define REMO_NUM4   0x20
           =1 #define REMO_NUM5   0xa0
           =1 #define REMO_NUM6   0x60
           =1 #define REMO_NUM7   0xe0
           =1 #define REMO_NUM8   0x10
           =1 #define REMO_NUM9   0x90
           =1 
           =1 #define REMO_STANDBY  0x48
           =1 #define REMO_CHNUP    0xd8
           =1 #define REMO_CHNDN    0xf8
           =1 #define REMO_VOLUP    0x58
           =1 #define REMO_VOLDN    0x78
           =1 #define REMO_SELECT   0xe8
           =1 #define REMO_MENU   0x01
           =1 #define REMO_MUTE   0x08
           =1 #define REMO_INPUT    0xf0
           =1 
           =1 #define REMO_INFO   0x38
           =1 
           =1 
           =1 
           =1 #define REMO_TTXRED     0x4E
           =1 #define REMO_TTXGREEN   0x8E
           =1 #define REMO_TTXYELLOW    0xC6
           =1 #define REMO_TTXCYAN    0x86
           =1 
           =1 #else
           =1 // RYU For Test
           =1 #define REMO_CUSTOM1    0x04
           =1 #define REMO_CUSTOM2    0xfb
           =1 
           =1 #define REMO_NUM0   0xf8
           =1 #define REMO_NUM1   0x48
           =1 #define REMO_NUM2   0xc8
           =1 #define REMO_NUM3   0x28
           =1 #define REMO_NUM4   0xa8
           =1 #define REMO_NUM5   0x18
           =1 #define REMO_NUM6   0x98
           =1 #define REMO_NUM7   0x58
           =1 #define REMO_NUM8   0xd8
           =1 #define REMO_NUM9   0x78
           =1 
           =1 #define REMO_STANDBY  0x00
           =1 #define REMO_CHNUP    0x40  //
           =1 #define REMO_CHNDN    0x70  //
           =1 #define REMO_VOLUP    0x90  //
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 13  

           =1 #define REMO_VOLDN    0xe0  //
           =1 #define REMO_SELECT   0x11//??
           =1 #define REMO_MENU   0x10
           =1 
           =1 #define REMO_MUTE   0x60
           =1 #define REMO_INPUT    0xc0
           =1 #define REMO_AUTO   0x30
           =1 #define REMO_AUTOSCAN 0x80
           =1 #define REMO_TV     0x20
           =1 #define REMO_EXIT   0xa0
           =1 #define REMO_INFO   0x08
           =1 #define REMO_ASPECT   0x62
           =1 
           =1 #define REMO_TTXRED   0xb8
           =1 #define REMO_TTXGREEN 0x02
           =1 #define REMO_TTXYELLOW  0x82
           =1 #define REMO_TTXCYAN  0x42
           =1 
           =1 #ifdef SUPPORT_DEBUG
           =1 #define REMO_DEBUG    0xb8
           =1 #define REMO_READ   0x02
           =1 #define REMO_WRITE    0x82
           =1 #endif
           =1 
           =1 #endif //PHILIPS_REMOCON
           =1 
           =1 #endif // REMO_NEC
 273      =1  
 274      =1  
 275      =1  
 276      =1  BYTE ActionRemo(BYTE, BYTE);
 277      =1  BYTE CheckKeyIn(void);
 278      =1  BYTE GetKey(BYTE repeat);
 279      =1  BYTE IsRemoDataReady(BYTE *, BYTE *);
 280      =1  
 281      =1  
  11          #include "measure.h"
   1      =1  #ifndef __MEASURE__
   2      =1  #define __MEASURE__
   3      =1  
   4      =1  #define EE_DOS        0
   5      =1  
   6      =1  #define EE_SP1        1
   7      =1  #define EE_SP2        2
   8      =1  #define EE_SP3        3
   9      =1  
  10      =1  #define EE_VGA_60     4
  11      =1  #define EE_VGA_66     5
  12      =1  #define EE_VGA_70     6
  13      =1  #define EE_VGA_72     7
  14      =1  #define EE_VGA_75     8
  15      =1  #define EE_VGA_85     9
  16      =1  
  17      =1  #define EE_SVGA_56      10
  18      =1  #define EE_SVGA_60      11
  19      =1  #define EE_SVGA_70      12
  20      =1  #define EE_SVGA_72      13
  21      =1  #define EE_SVGA_75      14
  22      =1  #define EE_SVGA_85      15
  23      =1  
  24      =1  #define EE_832_75     16
  25      =1  
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 14  

  26      =1  #define EE_XGA_60     17
  27      =1  #define EE_XGA_70     18
  28      =1  #define EE_XGA_72     19
  29      =1  #define EE_XGA_75     20
  30      =1  #define EE_XGA_85     21
  31      =1  
  32      =1  #define EE_1152_60      22
  33      =1  #define EE_1152_70      23
  34      =1  #define EE_1152_75      24
  35      =1  
  36      =1  #define EE_SXGA_60      25
  37      =1  #define EE_SXGA_70      26
  38      =1  #define EE_SXGA_75      27
  39      =1  
  40      =1  #define EE_RGB_480P     28
  41      =1  #define EE_RGB_720P     29
  42      =1  #define EE_RGB_720P50   30
  43      =1  #define EE_RGB_1080I    31
  44      =1  #define EE_RGB_1080I50A   32
  45      =1  #define EE_RGB_1080I50B   33
  46      =1  #define EE_RGB_480I     34
  47      =1  #define EE_RGB_576I     35
  48      =1  #define EE_RGB_576P     36
  49      =1  
  50      =1  #define EE_YPbPr_480P   37
  51      =1  #define EE_YPbPr_720P   38
  52      =1  #define EE_YPbPr_720P50   39
  53      =1  #define EE_YPbPr_1080I    40
  54      =1  #define EE_YPbPr_1080I50A 41
  55      =1  #define EE_YPbPr_1080I50B 42
  56      =1  #define EE_YPbPr_480I   43
  57      =1  #define EE_YPbPr_576I   44
  58      =1  #define EE_YPbPr_576P   45
  59      =1  
  60      =1  #define EE_PC_MAX     46
  61      =1  
  62      =1  #define EE_PC_NO_SIGNAL   0xfe
  63      =1  #define EE_PC_UNKNOWN   0xff
  64      =1  
  65      =1  struct _PCMDATA {
  66      =1    CODE_P BYTE  Support;
  67      =1    CODE_P WORD  HAN;
  68      =1    CODE_P WORD  VAN;
  69      =1    CODE_P WORD  IVF;
  70      =1    CODE_P WORD  CLOCK;
  71      =1    CODE_P WORD  low;
  72      =1    CODE_P WORD  high;
  73      =1    CODE_P WORD  Hstart;
  74      =1    CODE_P WORD  Vstart;
  75      =1    CODE_P WORD  IPF;   // 0.1MHz
  76      =1    CODE_P WORD  PPF;   // 0.1MHz
  77      =1    CODE_P BYTE  VBack;
  78      =1  };
  79      =1  #ifndef AUTOCALC_PC
           =1 
           =1 #ifdef SUPPORT_DTV
           =1 struct _DTVMDATA {
           =1   CODE_P BYTE Reg62;
           =1   CODE_P BYTE RegBC;
           =1   CODE_P BYTE RegBD;
           =1   CODE_P BYTE RegBE;
           =1   CODE_P WORD PHP;
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 15  

           =1 };
           =1 #endif
           =1 #endif
  91      =1  #if defined XGA
           =1   #define MAX_PPF    90000000
           =1 #elif defined SXGA
           =1   #define MAX_PPF   135000000
           =1 #elif defined WXGA
           =1   #define MAX_PPF    90000000
           =1 #elif defined WVGA
  98      =1    #define MAX_PPF    90000000
  99      =1  #elif defined VGA
           =1   #define MAX_PPF    50000000
           =1 #elif defined SVGA
           =1   #define MAX_PPF    80000000
           =1 #elif defined QVGA
           =1   #define MAX_PPF    30000000
           =1 #elif defined WQVGA
           =1   #define MAX_PPF    30000000
           =1 #endif
 108      =1  
 109      =1  extern BYTE cLastSyncLoss;
 110      =1  extern BYTE PcMode;
 111      =1  
 112      =1  void CompLT170E2(void);
 113      =1  
 114      =1  WORD gap(WORD a, WORD b);
 115      =1  
 116      =1  //===================================================================
 117      =1  WORD GetHpnVpn(BYTE);
 118      =1  
 119      =1  WORD ConvertBasedOnInput(WORD dat);
 120      =1  
 121      =1  BYTE IsDTVInput(void);
 122      =1  
 123      =1  void SetVValueForPanel(WORD vstart);
 124      =1  BYTE SetHValueForPanel(void);
 125      =1  BYTE GetActiveRegion(void);
 126      =1  
 127      =1  BYTE DetectAndSetForVGAInput(BYTE);
 128      =1  #ifdef SUPPORT_DTV
           =1 BYTE DetectAndSetForDTVInput(BYTE);
           =1 #endif
 131      =1  void CheckPCinput(void);
 132      =1  void CheckDTVinput(void);
 133      =1  
 134      =1  WORD GetCoarseValue(void);
 135      =1  BYTE GetPhaseValue(void);
 136      =1  WORD SetPCCoarseValue(BYTE val);
 137      =1  BYTE SetPhaseValue(BYTE val);
 138      =1  
 139      =1  void DisplayResultAndSetActiveRange(void);
 140      =1  
 141      =1  //=============================================================================
 142      =1  //                    PC Screen Position Move Functions
 143      =1  //=============================================================================
 144      =1  void MoveActiveVpos(BYTE val);    // Up/Down
 145      =1  void MoveActiveHpos(BYTE val);    // Left/Right
 146      =1  
 147      =1  BYTE GetVPosition(void);
 148      =1  BYTE SetVPosition(BYTE val);
 149      =1  BYTE GetHPosition(void);
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 16  

 150      =1  BYTE SetHPosition(BYTE val);
 151      =1  
 152      =1  void ResetPCValue(void);
 153      =1  
 154      =1  CODE_P BYTE *GetPCInputSourceName(void);
 155      =1  BYTE AutoAdjust(void);
 156      =1  
 157      =1  #endif // __MEASURE__
  12          #include "audio.h"
   1      =1  
   2      =1  #define MAX_SOUND_VOLUME 50
   3      =1  extern  BYTE  AudioVol;
   4      =1  extern  BYTE  PCAudioVol;
   5      =1  
   6      =1  //BYTE ResetMSP(void);
   7      =1  //void SetMSPSCARTPrescale(void);
   8      =1  //void SetMSPSourceSel(void);
   9      =1  //void SetMSPVol(void);
  10      =1  
  11      =1  //BYTE AudioAutoStdDetection(void);
  12      =1  //BYTE SteroMonoDetection(void);
  13      =1  
  14      =1  //BYTE TunerAudio(void);
  15      =1  //void ExtAudio(void);
  16      =1  //id PCAudio(void);
  17      =1  //id MuteOn(void);
  18      =1  //BYTE GetAudioVol(void);
  19      =1  BYTE ChangeVol(char);
  20      =1  //BYTE GetAudioBalance(void);
  21      =1  //BYTE ChangeBalance(char);
  22      =1  //BYTE GetAudioBass(void);
  23      =1  //BYTE ChangeBass(char);
  24      =1  //BYTE GetAudioTreble(void);
  25      =1  //BYTE ChangeTreble(char);
  26      =1  //BYTE GetAudioEffect(void);
  27      =1  //BYTE ChangeAudioEffect(char amount);
  28      =1  //void ToggleAudioMute(void);
  29      =1  //void CheckAndClearMuteOn(void);
  30      =1  
  31      =1  //BYTE IsAudioMuteOn(void);
  32      =1  //void SetAudioMute(BYTE on );
  33      =1  //void ChangeMTS(BYTE type);
  34      =1  //void AudioOff(void);
  35      =1  void AudioMute(bit mute);
  36      =1  extern void    Wait_ms(WORD Tms);
  37      =1  
  38      =1  //#define AudioOn()     SetMSPVol()
  39      =1  //void ResetAudioValue();
  13          #include "dispinfo.h"
   1      =1  #ifndef __DISPINFO__
   2      =1  #define __DISPINFO__
   3      =1  //==================================================================
   4      =1  //        Display Information
   5      =1  //==================================================================
   6      =1  #if (defined WQVGA) && (defined ANALOG_7INCH)
           =1 #define   INPUTINFO_ZOOM    WINZOOMx1
           =1 #define   LOGO_ZOOM     WINZOOMx3
           =1 
           =1 #else // (defined WQVGA) && (defined SHARP_LQ043T3DX02)
  11      =1  
  12      =1    #ifdef AWT_ML072S
  13      =1    #define   INPUTINFO_ZOOM    WINZOOMx4
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 17  

  14      =1    #else
           =1   #define   INPUTINFO_ZOOM    WINZOOMx2
           =1   #endif
  17      =1  #define   LOGO_ZOOM     WINZOOMx2
  18      =1  #endif
  19      =1  //#define   VOL_ZOOM      WINZOOMx4
  20      =1  #define   MUTE_ZOOM     WINZOOMx3
  21      =1  #define   TVCHN_ZOOM      WINZOOMx4
  22      =1  #define   RATINGINFO_ZOOM   WINZOOMx3
  23      =1  #define     SCANTV_ZOOM     WINZOOMx2   //ljy012304
  24      =1  #define   PCINFO_ZOOM     WINZOOMx2
  25      =1  #define     BAR_ZOOM      WINZOOMx2
  26      =1  
  27      =1  
  28      =1  #define DVRStatus_OSDWIN  4 
  29      =1  #define DVRStatus_ADDR  180
  30      =1  
  31      =1  extern  BYTE  DisplayedOSD;
  32      =1  
  33      =1  
  34      =1  void ClearDisplayedOSD( BYTE newd );
  35      =1  void SetDisplayedOSD( BYTE newd );
  36      =1  BYTE GetDisplayedOSD(void);
  37      =1  void ClearOSDInfo(void);
  38      =1  
  39      =1  void DisplayInput(void);
  40      =1  BYTE ClearInput(void);
  41      =1  BYTE ClearInput2s(void);
  42      =1  
  43      =1  //void DisplayLogo(void);
  44      =1  
  45      =1  void ClearLogo(void);
  46      =1  
  47      =1  void DisplayPCInfo(BYTE CODE *ptr);
  48      =1  void ClearPCInfo(void);
  49      =1  void DisplayAutoAdjust(void);
  50      =1  void ClearAutoAdjust(void);
  51      =1  
  52      =1  
  53      =1  void DisplayVol(void);
  54      =1  #if 0
           =1 void DisplayBrightness(void);
           =1 #endif
  57      =1  #if 0
           =1 void DisplayMuteInfo(void);
           =1 #endif
  60      =1  void ClearMuteInfo(void);
  61      =1  BYTE CheckAndClearOSD(void);
  62      =1  BYTE ClearVlossOsd(void);
  63      =1  #ifdef AWT_ML072S
  64      =1  void VlossHandler(void);
  65      =1  void Check_Vloss(void);
  66      =1  #endif
  67      =1  //==================================================================
  68      =1  //            TV Info
  69      =1  //==================================================================
  70      =1  
  71      =1  BYTE ClearTVInfo(void);
  72      =1  
  73      =1  #endif  // __DISPINFO__
  14          #include "main.h"
   1      =1  #ifndef __MAIN__
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 18  

   2      =1  #define __MAIN__
   3      =1  
   4      =1  #define ON          1
   5      =1  #define OFF         0
   6      =1  #if 1//ryan@20171214
   7      =1  #define Hs_debug
   8      =1  #define Monitor_debug  
   9      =1  //#define Trigger_debug 
  10      =1  #endif
  11      =1  
  12      =1  
  13      =1  //#define DVR
  14      =1  #define Format_SDCard
  15      =1  #define BJTSwitch
  16      =1  
  17      =1  #define Panel_Enable()    P4=P4|0x08 //andy 980908
  18      =1  #define Panel_Disable()   P4=P4&0xf7
  19      =1  
  20      =1  #if 0
           =1 #define SetBacklight()      P4=P4|0x04
           =1 #define clrBacklight()      P4=P4&0xfb
           =1 #else
  24      =1  #define SetBacklight()    P4=P4&0xfb
  25      =1  #define clrBacklight()    P4=P4|0x04
  26      =1  #endif
  27      =1  
  28      =1  //InputSelection
  29      =1  struct struct_IdName {
  30      =1    BYTE  Id;
  31      =1    BYTE  Name[16];
  32      =1  };
  33      =1  
  34      =1  #define CH_TW2835       1
  35      =1  #define CH_CAMD       2
  36      =1  #define CH_AV         3
  37      =1  #define PC          7
  38      =1  #define ChineseDefaultMenu  8
  39      =1  
  40      =1  #define SVIDEO        2
  41      =1  #define COMPONENT     3
  42      =1  //#define ANALOGDTV     4
  43      =1  #define DTV         4
  44      =1  #define TV          5
  45      =1  #define SCART       6
  46      =1  
  47      =1  #ifdef HS
  48      =1  #define CH_CAMB         4
  49      =1  #endif
  50      =1  
  51      =1  #define DIGITALVGA      8
  52      =1  
  53      =1  #define AIRTV       0 //9
  54      =1  #define CABLETV       1 //0xa
  55      =1  
  56      =1  #define TVTUNER       0xd   //10
  57      =1  #define MUTE        1 
  58      =1  #define MENU        2 
  59      =1  #define TVVOL       4 
  60      =1  #ifdef AWT_ML072S
  61      =1  #define VLOSSINFO     8 
  62      =1  #else
           =1 #define CC          8 
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 19  

           =1 #endif
  65      =1  #define INPUTINFO     0x10
  66      =1  #define PCINFO        0x20
  67      =1  #define GAUGEINFO       0x40
  68      =1  //#define RATINGINFO      0x40
  69      =1  #define TVCHN       0x80
  70      =1  //#define MUTE        0x40
  71      =1  
  72      =1  #define YPBPR_480i      0
  73      =1  #define YPBPR_576i      1
  74      =1  #define YPBPR_480p      2
  75      =1  #define YPBPR_576p      3
  76      =1  #define YPBPR_1080i     4
  77      =1  #define YPBPR_720p      5
  78      =1  #define YPBPR_720p50    6
  79      =1  
  80      =1  //---------------------- Feature Define ----------------------------
  81      =1  #ifdef AWT_ML072Q
           =1 
           =1 //mask by ryan@20171018   #define AWT_ML720Q_NEW_TRIGGER_FUN    //Pinchi 20141031 add for AWT request each t
             -rigger can work by PRIORITY OFF
           =1 #define AWT_ADD_TRIGGER_DELAY_FUN 
           =1 #define AWT_SUPPORT_4_3_SCREEN    //ryan@20170907 
           =1 #endif
  87      =1  
  88      =1  #ifdef AWT_ML072S
  89      =1  #define AWT_ADD_TRIGGER_DELAY_FUN 
  90      =1  #endif
  91      =1  
  92      =1  //--------------------------- P0 Define -----------------------------
  93      =1  //#define SEL_MIX     P0_6  // 
  94      =1  //--------------------------- P1 Define -----------------------------
  95      =1  //#define SEL_DVI     P3_5  //LJY062001   
  96      =1  
  97      =1  #define TW88HWReset     P3_4  //LJY001010 //LJY000721
  98      =1  #define PowerUp       P3_7
  99      =1  //======================= CDS Control ================================= 
 100      =1  //#define CDS_CTRL           P1_5
 101      =1  extern BYTE SelectModeType;
 102      =1  extern BYTE InputSelection;
 103      =1  extern BYTE SEQTime;
 104      =1  extern BYTE Priority;
 105      =1  extern BYTE PowerFlag;
 106      =1  //extern bit AutoDayNight;
 107      =1  extern bit SDCardCoverDetect;
 108      =1  
 109      =1  BYTE keyIn(void);
 110      =1  void TimerForRemocon(void);
 111      =1  void TimerForTick(void);
 112      =1  void DisableRemoconInt(void);
 113      =1  BYTE SetSupport_remocon(BYTE newd);
 114      =1  
 115      =1  void delay(BYTE cnt);
 116      =1  
 117      =1  BYTE RS_ready(void);
 118      =1  #ifdef Monitor_debug
 119      =1  BYTE RS_rx(void);
 120      =1  #endif
 121      =1  void RS_tx(BYTE tx_buf);
 122      =1  
 123      =1  BYTE RS2_rx(void);
 124      =1  void RS2_tx(BYTE tx_buf);
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 20  

 125      =1  
 126      =1  void NewLine(void);
 127      =1  void PutsP(PDATA_P BYTE *ptr);
 128      =1  #ifdef Hs_debug
 129      =1  //void MonWriteI2C(BYTE addr, BYTE index, BYTE val);
 130      =1  //BYTE MonReadI2C(BYTE addr, BYTE index);
 131      =1  #endif
 132      =1  BYTE Asc1Bin(BYTE asc);
 133      =1  BYTE Asc2Bin(PDATA_P BYTE *s);
 134      =1  
 135      =1  void I2CDeviceInitialize( CODE_P BYTE *RegSet);
 136      =1  
 137      =1  //void RestartSystemClock(WORD clock_hm);
 138      =1  WORD GetTime_ms(void);
 139      =1  #if 0
           =1 BYTE GetTime_H(void);
           =1 BYTE GetTime_M(void);
           =1 #endif
 143      =1  void ChangeTime_H( char add );
 144      =1  void ChangeTime_M( char add );
 145      =1  //WORD GetWakeupTime(void);
 146      =1  //void SetWakeupTime(WORD wtime);
 147      =1  
 148      =1  
 149      =1  //WORD GetOffTime(void);
 150      =1  //void SetOffTime(WORD wtime);
 151      =1  //BYTE GetSleepTimer(void);
 152      =1  //void SetSleepTimer(BYTE stime);
 153      =1  WORD DiffTime_ms( WORD stime, WORD etime );
 154      =1  //void SetLastBlockedTime(void);
 155      =1  void SetLastCCTime(void);       //ljy010904...CC_FIX_CLEAR_ON_TIME
 156      =1  
 157      =1  void SetOSDLastKeyInTime(void);
 158      =1  WORD GetOSDLastKeyInTime(void);
 159      =1  WORD GetIVF(void);
 160      =1  DWORD GetIHF(void);
 161      =1  BYTE ReadVInputSTD(void);
 162      =1  void SetVInputStd(BYTE newd);
 163      =1  BYTE GetVInputStd(void);
 164      =1  BYTE GetInputSelection(void);
 165      =1  #ifdef ADD_ANALOGPANEL
           =1 BYTE IsAnalogOn(void);
           =1 #endif
 168      =1  void InitVideoData(BYTE src);
 169      =1  void ChangeVInputStdDetectMode(BYTE val);
 170      =1  BYTE GetVInputStdInx(void);
 171      =1  
 172      =1  void MonWriteI2Cn_(BYTE addr, BYTE *val, BYTE cnt) ;
 173      =1  
 174      =1  void CheckNewTriggerFunc(void);
 175      =1  ///void Usage(void);
 176      =1  #ifdef Monitor_debug
 177      =1    void Prompt(void);
 178      =1  #endif
 179      =1  void DebugKeyIn(BYTE ikey);
 180      =1  void DVIPowerDown(bit flag);
 181      =1  void PowerDown_XTAL(bit flag);
 182      =1  
 183      =1  void ChangeInput(BYTE newsel);
 184      =1  
 185      =1  
 186      =1  void WaitPowerOn(void);
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 21  

 187      =1  void PowerOff(void);
 188      =1  BYTE GetNextInputSelection(void);
 189      =1  
 190      =1  BYTE WantToStopTVScan(void);
 191      =1  
 192      =1  //BYTE IsTW8801(void);
 193      =1  //BYTE IsTW8803(void);
 194      =1  //BYTE ConvertVideoVSAT(BYTE reg);
 195      =1  
 196      =1  BYTE IsNoInput(void);
 197      =1  void LoadEEPROM (void);
 198      =1  void Hs_InitVars(void);
 199      =1  void AdjustAutoDayNight(BYTE val);
 200      =1  void ACCPowerControl(void);
 201      =1  void ON_LVDS(void);
 202      =1  void OFF_LVDS(void);
 203      =1  void main_loop(void);
 204      =1  struct RegisterInfo
 205      =1  {
 206      =1     int  Min;
 207      =1     int  Max;
 208      =1     int  Default;
 209      =1  };
 210      =1  struct LongRegisterInfo
 211      =1  {
 212      =1     WORD Min;
 213      =1     WORD Max;
 214      =1     WORD Default;
 215      =1  };
 216      =1  
 217      =1  
 218      =1  typedef enum   ///add enum  by ryan@20170907
 219      =1  {
 220      =1    NORMALL_MODE,
 221      =1    REVERSE_TRIG,
 222      =1    LEFT_TRIG,
 223      =1    RIGHT_TRIG,
 224      =1  #ifdef USE_CAMD 
           =1   CAMD_TRIG,
           =1 #endif  
 227      =1    CAMC_TRIG,
 228      =1    VGA_TRIG,
 229      =1    PARK_TRIG,
 230      =1    No_TRIG,
 231      =1    TRIGGER_NUM
 232      =1  }TriggerModeType;
 233      =1  
 234      =1  
 235      =1  #endif  // __MAIN__
 236      =1  
  15          #include "i2c.h"
   1      =1  #ifndef __I2C_H__
   2      =1  #define __I2C_H__
   3      =1  
   4      =1  
   5      =1  void I2CReadByte3(BYTE *);
   6      =1  void I2CRead8Byte(BYTE *);
   7      =1  #if 0
           =1 void I2CReadByteMSP(BYTE addr, BYTE index, BYTE *pd, BYTE cnt);
           =1 #endif
  10      =1  BYTE I2CWriteByte2(BYTE);
  11      =1  BYTE I2CWriteByte3(BYTE*);
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 22  

  12      =1  BYTE I2CWrite8Byte(BYTE *);
  13      =1  
  14      =1  void I2CStart(void);
  15      =1  void I2CWriteData(BYTE value);
  16      =1  BYTE I2CReadData(void);
  17      =1  #if 0
           =1 BYTE I2CReadDataWithACK(void);
           =1 #endif
  20      =1  void I2CStop(void);
  21      =1  void I2Cdelay(void);
  22      =1  
  23      =1  
  24      =1  #define WriteTW88(a,b)    WriteI2C(TW88I2CAddress, a, b)
  25      =1  #define ReadTW88(a)     ReadI2C(TW88I2CAddress, a)
  26      =1  
  27      =1  BYTE WriteTW88_Wait (BYTE, BYTE);
  28      =1  void WriteADC   (BYTE, BYTE);
  29      =1  BYTE ReadADC    (BYTE);
  30      =1  BYTE ReadADC_TW88(BYTE index);
  31      =1  void WriteADC_TW88(BYTE index, BYTE dat);
  32      =1  
  33      =1  void WriteEEP   (WORD, BYTE);
  34      =1  BYTE ReadEEP    (WORD);
  35      =1  WORD ReadALC106(WORD index);
  36      =1  void WriteALC106(WORD index, WORD  dat);
  37      =1  WORD ReadI2CWORD(BYTE addr, BYTE index);
  38      =1  BYTE ReadI2C    (BYTE addr, BYTE index);
  39      =1  void WriteI2C   (BYTE addr, BYTE index, BYTE val);
  40      =1  
  41      =1  void WriteI2Cn_(BYTE addr, BYTE *val, BYTE cnt);
  42      =1  void WriteI2Cn (BYTE addr, BYTE index, BYTE *val, BYTE cnt);
  43      =1  void WriteI2CnD(BYTE addr, BYTE index, BYTE val, BYTE cnt);
  44      =1  
  45      =1  void ReadI2Cmn(BYTE addr, BYTE wcnt, BYTE rcnt, BYTE *rwdata);
  46      =1  
  47      =1  #define   WriteADC(a,b) WriteADC_TW88(a,b)
  48      =1  #define   ReadADC(a)    ReadADC_TW88(a)
  49      =1  
  50      =1  #endif  /* __I2C_H__ */
  16          #include "osdmenu.h"
   1      =1  //osdmenu.h
   2      =1  //LJY10292001
   3      =1  #ifndef __OSDMENU__
   4      =1  #define __OSDMENU__
   5      =1  
   6      =1  //=======================================================================
   7      =1  // 
   8      =1  //BYTE GetOSDDuration(void);
   9      =1  
  10      =1  void ResetVideoValue(void);
  11      =1  //#if defined( SUPPORT_PC ) || defined( SUPPORT_DTV )
  12      =1  //void ResetPCValue(void);
  13      =1  //#endif
  14      =1  BYTE GetOSDMenuLevel( void );
  15      =1  
  16      =1  void DrawMenulist(BYTE);
  17      =1  void Display_EnterPin(void);
  18      =1  void OSDHighMenu_sub(void);
  19      =1  void ResetOSDValue(void);
  20      =1  #ifdef E_Wintek
           =1 void ResetUESROSDValue(void);
           =1 #endif
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 23  

  23      =1  //BYTE OnChangingValue(void);
  24      =1  //Not used yet *******************BYTE OnChangingTime(void);
  25      =1  
  26      =1  //WORD GetOSDclock(void);
  27      =1  
  28      =1  #ifdef HS_NEWOSDMENU
           =1 void InitOSDMenu(BYTE OSD_ID);
           =1 void OpenOSDMenu(BYTE OSD_ID);
           =1 #else
  32      =1  void InitOSDMenu(void);
  33      =1  void OpenOSDMenu(void);
  34      =1  #endif
  35      =1  BYTE CloseOSDMenu(void);
  36      =1  
  37      =1  void OpenFORMATMenu(void);
  38      =1  void OSDHighMenu(void);
  39      =1  void OSDSelect(void);
  40      =1  void OSDCursorMove(BYTE flag );
  41      =1  void OSDLeftRight(BYTE flag );
  42      =1  void OSDValueUpDn(BYTE flag);
  43      =1  WORD SetItemValue( BYTE id, BYTE flag );
  44      =1  BYTE DoAction(BYTE id);
  45      =1  
  46      =1  BYTE SaveValue1(void);
  47      =1  void ClearValueWin(void);
  48      =1  
  49      =1  void OSDNumber( BYTE num );
  50      =1  
  51      =1  void Set4WideScreen(BYTE id);
  52      =1  
  53      =1  void SetRGBContrast( BYTE id, BYTE val );
  54      =1  BYTE SetPCColorTemp(BYTE flag);
  55      =1  void ResetPanelAttributeValue(void);
  56      =1  WORD GetItemValue( BYTE);
  57      =1  void DisplayViewBar( WORD,BYTE);
  58      =1  void DrawNum(WORD, CODE_P struct NumType *, WORD);
  59      =1  void DrawStringByLang( WORD, CODE_P struct EnumType *, WORD);
  60      =1  
  61      =1  void DisplayVolumebar(BYTE val);
  62      =1  BYTE GetOSDLang(void);
  63      =1  void InitOSDMenuXY(void);
  64      =1  
  65      =1  void Display_TVGuide_Window(void);
  66      =1  void Display_TVGuide_Status(void);
  67      =1  
  68      =1  void ChangeVchip_LevelCursor(BYTE);
  69      =1  void ChangeVchip_ContentCursor(BYTE);
  70      =1  void Select_VchipLevel(void);
  71      =1  void SetVideoMode(BYTE mode);
  72      =1  BYTE GetVideoDatawithOffset(BYTE offset);
  73      =1  void SetVideoContrast(BYTE newv);
  74      =1  void SetVideoBrightness(BYTE newv);
  75      =1  void SetVideoHue(BYTE newv) ;
  76      =1  void SetVideoSaturation(BYTE svtype, BYTE newv) ;
  77      =1  BYTE SetVideoSharpness(BYTE flag) ;
  78      =1  void SetVideoBacklight(BYTE newv) ;
  79      =1  //------------------------------------------------andy awt 981013
  80      =1  //void DaySelect(BYTE);
  81      =1  void CAMOutDSel(BYTE val);
  82      =1  void DVRAodioSel(BYTE  val);
  83      =1  
  84      =1  //------------------------------------------------andy awt 981013
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 24  

  85      =1  
  86      =1  void DisplayLineOSD(void);  // OSD Line display Demo
  87      =1  #ifdef CENEC_OSDMENU_ACCM8
           =1 BYTE ChkOSDMENU_TOPWIN(void);  //Weylis 080930
           =1 BYTE ChkOSDMENU_WINDOW(void);
           =1 BYTE ChkOSDMENU(void);
           =1 #endif
  92      =1  
  93      =1  #ifdef AWT_ADD_TRIGGER_DELAY_FUN  //Pinchi 20150209 add
  94      =1  void AWT_DisplayViewBar(WORD addr , BYTE val);
  95      =1  #endif
  96      =1  struct MenuType {
  97      =1    BYTE  width,  height;
  98      =1    BYTE  TitleColor; 
  99      =1    BYTE  CursorColor;
 100      =1  };
 101      =1  
 102      =1  struct NumType {
 103      =1    BYTE  PrePostCharLen;   // high nibble(pre) / low nibble(post)
 104      =1    BYTE  PrePostChar[4];
 105      =1  };
 106      =1  
 107      =1  struct NumberStringType {
 108      =1    BYTE  x, y;
 109      =1    BYTE    width;
 110      =1    BYTE  BackColor;
 111      =1    BYTE  Radix;
 112      =1    BYTE  NumColor;
 113      =1    BYTE    MaxLen;       // maximum length of string
 114      =1    BYTE  PrePostCharLen;   // high nibble(pre) / low nibble(post)
 115      =1    BYTE  PrePostChar[3];
 116      =1  };
 117      =1  
 118      =1  struct TimeType {
 119      =1    BYTE  x, y;
 120      =1    BYTE    width;
 121      =1    BYTE  BackColor;
 122      =1    BYTE  Format;       //_24H_TIME
 123      =1    BYTE  TimeColor;
 124      =1    BYTE    CursorColor;
 125      =1  };
 126      =1  
 127      =1  struct EnumType {
 128      =1    BYTE    Sz;//size
 129      =1    BYTE    ByLang;
 130      =1    BYTE  Str[15];      // doesn't matter the size !!!
 131      =1  };
 132      =1  
 133      =1  #define ICON_CH_SZ    2
 134      =1  //#define BAR_NUM_SZ    4
 135      =1  #define ICON_BUF_SZ   2
 136      =1  struct DefineMenu {
 137      =1    //WORD            Icon[ICON_BUF_SZ];  
 138      =1    BYTE        CODE  *Icon;
 139      =1    BYTE            **Desc;       
 140      =1    BYTE            PreFnId, 
 141      =1                  PostFnId;
 142      =1  //  void    (*CalltoFunction)(void);            // Un/Dn/Sel Function
 143      =1    BYTE            IconColor;      //NIL: not to display icon
 144      =1    BYTE            DescColor;      //NIL: not to display desc. (IconColor==NIL && DescColor==NIL)->Last Item
 145      =1    struct DefineMenu CODE  *Child;
 146      =1    BYTE            Type;       // MENU, CHOICEMENU, BAR, NUMBER, TIME, ACTION, ENUM_STRING
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 25  

 147      =1    BYTE            ActiveWithCursor;
 148      =1    BYTE            Id;
 149      =1    BYTE        CODE  *TypeData;  //MenuType, BarType, NumType,,,
 150      =1  } ;
 151      =1  
 152      =1  struct PictureInfo {
 153      =1  
 154      =1    BYTE Register_Addr;
 155      =1    BYTE EEPROM_Addr;
 156      =1    struct RegisterInfo   CODE  *Control_Range;
 157      =1  };
 158      =1  
 159      =1  
 160      =1  //-------------------------------------------------------------------
 161      =1  // OSD Window Information
 162      =1  //-------------------------------------------------------------------
 163      =1  // Window Number
 164      =1  #define OSDCURSORWINDOW     1
 165      =1  #define OSDMENUWINDOW       OSDCURSORWINDOW+1
 166      =1  #define OSDMENU_TOPWIN      OSDCURSORWINDOW+2
 167      =1  #define OSDMENU_TITLEWIN    OSDCURSORWINDOW+3
 168      =1  #define OSDBARWINDOW      OSDCURSORWINDOW
 169      =1  
 170      =1  #define TECHWELLOGO_OSDWIN    1 
 171      =1  #define TVINFO_OSDWIN       2 
 172      =1  #define FONTTEST_OSDWIN     2 
 173      =1  #define INPUTINFO_OSDWIN    3  
 174      =1  #define RATINGINFO_OSDWIN     1 
 175      =1  #define PCINFO_OSDWIN       3
 176      =1  #define VLOSSINFO_OSDWIN    4
 177      =1  
 178      =1  //-------------OSDMENU_TITLEWIN------------------------------------------------------
 179      =1  // Window Start address
 180      =1  #define OSDMENU_MAINADDR  0
 181      =1  //#define OSDMENU_SUBADDR     OSDMENU_MAINADDR+15    //25*9:196
 182      =1  //#define OSDMENU_SUBADDR     OSDMENU_MAINADDR+HS_WIDTH //0+40   //25*9:196
 183      =1  //#define OSDMENU_SUBADDR     OSDMENU_MAINADDR+10 //0+40   //25*9:196
 184      =1  #define OSDMENU_SUBADDR     OSDMENU_MAINADDR + 14 //0+40   //25*9:196  // Weylis 121008 清除 Icon 後面
 185      =1  
 186      =1  #define OSDMENU_BARADDR   200 //OSDMENU_SUBADDR+225    //256   //25x2:50
 187      =1  
 188      =1  #ifdef WQVGA
           =1 #define INPUTINFO1_ADDR   INPUTINFO_ADDR+17 //17x3:51
           =1 #else
 191      =1  #define INPUTINFO1_ADDR   INPUTINFO_ADDR+34 //17x2:51
 192      =1  #endif
 193      =1  
 194      =1  #define MUTEINFO_ADDR     INPUTINFO1_ADDR+51  // 4x1:4
 195      =1  #define TVCHINFO_ADDR     MUTEINFO_ADDR//324  // 3X1:3
 196      =1  #define LOGO_ADDR     0
 197      =1  #ifdef AWT_ML072S
 198      =1  #define RATINGINFO_ADDR   (34)  //addr:210(8x1:8)
 199      =1  #else
           =1 #define RATINGINFO_ADDR   0 //addr:210(8x1:8)
           =1 #endif
 202      =1  #define PCMEASUREINFO_ADDR  OSDMENU_BARADDR //10x1
 203      =1  #ifdef QUAD
           =1 #define INPUTINFO_ADDR    160 // 9x1:9
           =1 #else
 206      =1  #define INPUTINFO_ADDR    0///24  // 9x1:9
 207      =1    #ifdef AWT_ML072S
 208      =1    #define INPUTINFO_MIRROR_ADDR 0//83 //william-v1.0-970804
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 26  

 209      =1    #else
           =1   #define INPUTINFO_MIRROR_ADDR 73//83  //william-v1.0-970804
           =1   #endif
 212      =1  #define INPUTINFO_WIDTH   40  // 9x1:9    //william-v1.0-971111
 213      =1  #endif
 214      =1  #define OSD_VLOSS_ADDR  33 
 215      =1  
 216      =1  
 217      =1  //--------------------------------------------------------------------
 218      =1  // OSD Menu Position Range
 219      =1  #if ((defined WQVGA) && (defined ANALOG_7INCH)) || ((defined QVGA) && (defined SHARP_LQ050Q5DR01))
           =1   #define OSD_PHR_ PHR_/2
           =1 #else
 222      =1    #define OSD_PHR_ PHR_
 223      =1  #endif
 224      =1  
 225      =1  #define OSDHSTART_MAX (OSD_PHR_-(12+1)*25 - 56*2 -4)  //PHR - (pixelsize +Hspace)*MenuWidth - Hborder*2 - 
             -outlinewidth*2
 226      =1  #define OSDVSTART_MAX (PVR_-(18+11)*9 - 5*2 ) //  PVR - (Linesize+Vspace)*MENU_HEIGHT - Vborder*2  - outli
             -newidth*2
 227      =1  
 228      =1  #define OSDHSTART_MAX_A (OSD_PHR_-(12+2)*25 - 56*2 -8) //OSDHSTART_MAX  //PHR - (pixelsize +Hspace)*MenuWi
             -dth - Hborder*2 - outlinewidth*2
 229      =1  #define OSDVSTART_MAX_A OSDVSTART_MAX  //  PVR - (Linesize+Vspace)*MENU_HEIGHT - Vborder*2  - outlinewidth*
             -2
 230      =1  
 231      =1  #define OSDMENUX_MIN 1//0
 232      =1  #define OSDMENUX_MAX (OSDHSTART_MAX>>3)
 233      =1  #define OSDMENUX_50  (OSDHSTART_MAX>>4)
 234      =1  
 235      =1  #define OSDMENUY_MIN 2//0
 236      =1  #define OSDMENUY_MAX (OSDVSTART_MAX>>2)
 237      =1  #define OSDMENUY_50  (OSDVSTART_MAX>>3)
 238      =1  
 239      =1  #ifdef HS_NEWOSDMENU  //Weylis -@121008
           =1 // HS OSD Style
           =1 #define HS_WIDTH      40
           =1 #define HS_CHSPACE      14
           =1 //#define HS_CHSPACE      18
           =1 #define HS_ICONSPACE    1
           =1 #define HS_ICONSADDR    0
           =1 //#define HS_ICONSPACE    2
           =1 //#define HS_ICONSADDR    8
           =1 #endif
 249      =1  
 250      =1  //--------------------------------------------------------------------
 251      =1  // OSD Menu Width, Height 
 252      =1  #ifdef E_Wintek
           =1 #define ICON_HIGH       0x14
           =1 #else
 255      =1  #define ICON_HIGH       0x0a
 256      =1  #endif
 257      =1  
 258      =1  #define TOTAL_MAX_HIGHT     9
 259      =1  #define TOTAL_TOP_HEIGHT    5 // Include blank line!
 260      =1  #define TOPMENU_WIDTH     2
 261      =1  #define TOPMENU_HEIGHT      4 
 262      =1  
 263      =1  #if (defined QVGA) && (defined SHARP_LQ050Q5DR01)
           =1 #define MENU_WIDTH        17 //23//25 
           =1 #define TITLE_MAX_DESC      17 //25 //
           =1 #define BAR_LENGTH        0
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 27  

           =1 #else
 268      =1  //#define MENU_WIDTH        23  //23//25 
 269      =1  //#define MENU_WIDTH        26  //ryan@20170821
 270      =1  #ifdef AWT_ML072S
 271      =1  #define MENU_WIDTH        19  
 272      =1  #else
           =1 #define MENU_WIDTH        24  //ryan@20170821
           =1 #endif
 275      =1  
 276      =1  #define TITLE_MAX_DESC      23  //25  //
 277      =1  #define BAR_LENGTH        5  //8
 278      =1  #endif
 279      =1  
 280      =1  #ifdef TW8816
 281      =1  #define MENU_HEIGHT       8  //6 
 282      =1  #else
           =1 #define MENU_HEIGHT       7  //6 
           =1 #endif
 285      =1  //#define BARNUM_LENGTH       8  //11
 286      =1  
 287      =1  #ifdef AWT_ML072S
 288      =1  #define BARNUM_LENGTH       4//ryan@20170821
 289      =1  #else
           =1 #define BARNUM_LENGTH       9//ryan@20170821
           =1 #endif
 292      =1  
 293      =1  
 294      =1  #ifdef REFERENCE
           =1 #define BACK_COLOR        BG_COLOR_CYAN
           =1 #define DEFAULT_COLOR     BG_COLOR_CYAN   | CH_COLOR_WHITE
           =1 //#define ACTIVE_COLOR      BG_COLOR_YELLOW | CH_COLOR_WHITE
           =1 #define TITLE_BACK_COLOR    BG_COLOR_MAGENTA
           =1 #define TITLE_COLOR       TITLE_BACK_COLOR | CH_COLOR_YELLOW
           =1 #define COMMENT_COLOR     TITLE_BACK_COLOR | CH_COLOR_WHITE
           =1 #define CURSOR_COLOR      BG_COLOR_YELLOW | CH_COLOR_BLUE
           =1 #define OSD_INFO_COLOR      DEFAULT_COLOR
           =1 #define BAR_COLOR       DEFAULT_COLOR 
           =1 #define BAR_NUM_COLOR     DEFAULT_COLOR
           =1 #define NUM_COLOR       DEFAULT_COLOR
           =1 #define OSDMENU_OUTLINE_COLOR BG_COLOR_BLUE
           =1 #else
 308      =1  #define BACK_COLOR        BG_COLOR_CYAN
 309      =1  
 310      =1  #define DEFAULT_COLOR     BG_COLOR_CYAN | CH_COLOR_GREEN//ryan@20170828
 311      =1  
 312      =1  //#define ACTIVE_COLOR      BG_COLOR_YELLOW | CH_COLOR_WHITE
 313      =1  #define TITLE_BACK_COLOR    BG_COLOR_BLUE
 314      =1  #define TITLE_COLOR       TITLE_BACK_COLOR | CH_COLOR_YELLOW
 315      =1  #define COMMENT_COLOR     TITLE_BACK_COLOR | CH_COLOR_WHITE
 316      =1  #define CURSOR_COLOR      BG_COLOR_YELLOW  | CH_COLOR_BLUE
 317      =1  #define OSD_INFO_COLOR      BG_COLOR_CYAN    | CH_COLOR_GREEN
 318      =1  #define BAR_COLOR       DEFAULT_COLOR
 319      =1  #define BAR_NUM_COLOR     DEFAULT_COLOR
 320      =1  #define NUM_COLOR       DEFAULT_COLOR
 321      =1  #define VER_COLOR         BG_COLOR_CYAN   | CH_COLOR_YELLOW   /// V1.1 03/07/07 simonsung
 322      =1  #define OSDMENU_OUTLINE_COLOR   BG_COLOR_CYAN
 323      =1  #define OSD_VLOSS_COLOR     BG_COLOR_CYAN    | CH_COLOR_WHITE
 324      =1  
 325      =1  #endif
 326      =1  
 327      =1  #ifdef HS_NEWOSDMENU
           =1 #define COMMENT1_COLOR      BG_COLOR_CYAN | CH_COLOR_RED
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 28  

           =1 #endif
 330      =1  
 331      =1  #define Trigger_COLOR       BG_COLOR_CYAN|CH_COLOR_RED      //william-v1.1-970827
 332      =1  #define Mirror_COLOR      BG_COLOR_CYAN|CH_COLOR_YELLOW     //william-v1.1-970827
 333      =1  #ifndef AWT_ML072S
           =1 #define Jump_COLOR        BG_COLOR_CYAN|CH_COLOR_GREEN      //william-v1.1-970827
           =1 #else
 336      =1  #define Jump_COLOR        BG_COLOR_CYAN|CH_COLOR_BLUE     //william-v1.1-970827
 337      =1  #endif
 338      =1  #define Gauge_COLOR1      BG_COLOR_BLACK|CH_COLOR_GREEN 
 339      =1  #define Gauge_COLOR2      BG_COLOR_BLACK|CH_COLOR_YELLOW  
 340      =1  #define Gauge_COLOR3      BG_COLOR_BLACK|CH_COLOR_RED
 341      =1  
 342      =1  //DisplayedOSD
 343      =1  //    new   | MENU  TVINFO    CC    INPUTINFO   PCINFO    RATINGINFO
 344      =1  //  current   |
 345      =1  //============|=========================================================================
 346      =1  //  MENU    |     TVINFO    --    INPUTINFO   PCINFO    MENU + RATINGINFO 
 347      =1  //        |            
 348      =1  //------------|-------------------------------------------------------------------------
 349      =1  //  TVINFO    | MENU  TVINFO    --    INPUTINFO   PCINFO    TVINFO+RATING
 350      =1  //------------|-------------------------------------------------------------------------
 351      =1  //  CC      | MENU->  TVINFO->      INPUTINFO->   PCINFO    RATINGINFO
 352      =1  //        |  CC    CC          CC            
 353      =1  //------------|-------------------------------------------------------------------------
 354      =1  //  INPUTINFO | MENU  TVINFO    --    INPUTINFO   PCINFO    --
 355      =1  //------------|-------------------------------------------------------------------------
 356      =1  //  PCINFO    | MENU  x     x   INPUTINFO   PCINFO    x
 357      =1  //------------|-------------------------------------------------------------------------
 358      =1  //  RATINGINFO| MENU  TVINFO     RATING   INPUTINFO   x     RATINGINFO
 359      =1  //                  
 360      =1  
 361      =1  //=======================================================================================
 362      =1  // OSD Menu Constant define.
 363      =1  //=======================================================================================
 364      =1  //Time type
 365      =1  #define _24H_TIME   1
 366      =1  
 367      =1  //for previous, next, parent or child
 368      =1  #define YES       0xfe  
 369      =1  #define NO        0
 370      =1  
 371      =1  //#define OVERWRITE   0
 372      =1  //#define POPUP     1
 373      =1  
 374      =1  //CursorMove
 375      =1  #define VERT      0
 376      =1  #define HORI      1
 377      =1  
 378      =1  //Type of MenuItem
 379      =1  #define OSDMENU     1
 380      =1  #define CHOICEMENU    2
 381      =1  #define ACTION      3
 382      =1  #define BAR       4
 383      =1  #define NUMBER      5
 384      =1  #define CHOICE      6
 385      =1  #define ENUM_STRING   7 //YESNO     7
 386      =1  #define CHOICE1     8
 387      =1  #define TIME      9
 388      =1  #define NUMBER_STRING 10
 389      =1  #define TEXT_STR              11   // V1.1 02/28/07 simonsung
 390      =1  #define INFORMATION              12
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 29  

 391      =1  #define TEXT_STR_exit 13
 392      =1  
 393      =1  #ifdef HTRV
           =1 #define GRAPH 16
           =1 #endif
 396      =1  
 397      =1  //Bar type
 398      =1  #define LEFT_FILLED   1
 399      =1  #define RIGHT_FILLED  2
 400      =1  #define NO_FILLED   3
 401      =1  
 402      =1  //OSDmenu up and down key
 403      =1  #define UP          1
 404      =1  #define DN          2
 405      =1  #define RIGHT       3
 406      =1  #define LEFT          4
 407      =1  
 408      =1  // Action Id
 409      =1  #define DISP_INFO     0x16
 410      =1  
 411      =1  #define INPUTSELECTION    0x2f
 412      =1  
 413      =1  #define CHANGE_TO_COMPOSITE     (0x20|CH_TW2835)      // Low nibble need to start from 1 
 414      =1  #define CHANGE_TO_SVIDEO      (0x20|SVIDEO)       // so that it match with COMPOSITE...
 415      =1  #define CHANGE_TO_COMPONENT     (0x20|COMPONENT)    
 416      =1  #define CHANGE_TO_DTV       (0x20|DTV)    
 417      =1  #define CHANGE_TO_TV        (0x20|TV)         
 418      =1  #define CHANGE_TO_PC        (0x20|PC)         
 419      =1  #define CHANGE_TO_DIGITALVGA    (0x20|DIGITALVGA)     
 420      =1  #define CHANGE_TO_SCART       (0x20|SCART)        
 421      =1  
 422      =1  #define OSDPOSITIONMODE     0x10
 423      =1  #define OSD_VPOS      0x11
 424      =1  #define OSD_HPOS      0x12
 425      =1  #define OSD_HALFTONE    0x13
 426      =1  #define OSD_DURATION    0x14
 427      =1  #define RESET_OSDVALUE    0x15
 428      =1  #define OSDLANG       0x16
 429      =1  
 430      =1  #define PANEL_CONTRAST    0x58
 431      =1  #define PANEL_BRIGHTNESS  0x59
 432      =1  #define PANEL_HUE     0x5a
 433      =1  #define PANEL_SHARPNESS   0x5b
 434      =1  #define PANEL_SATURATION  0x5c
 435      =1  
 436      =1  #define PC_VPOS       0x43
 437      =1  #define PC_HPOS       0x44
 438      =1  #define PC_HSIZE      0x4d
 439      =1  
 440      =1  #define PC_CLOCK      0x45
 441      =1  #define PC_PHASE      0x46
 442      =1  
 443      =1  #define AUTOADJUST      0x47
 444      =1  #define AUTOADJUST2     0x48
 445      =1  //#define SAVE_AUTOADJUST   0x49
 446      =1  #define RESET_AUTOADJUST  0x4a
 447      =1  
 448      =1  #define PCCOLORADJUST   0x4b
 449      =1  #define SAVE_COLORADJUST  0x4c
 450      =1  //#define RESET_COLORADJUST 0x4d
 451      =1  
 452      =1  #define RESET_PCVALUE   0x4e
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 30  

 453      =1  #define CameraOSD     0x4f
 454      =1  
 455      =1  #define PC_COLOR_MODE   0x3f
 456      =1  #define PC_COLOR_TEMP   0x30
 457      =1  #define PC_COLOR_MODE1    0x31
 458      =1  #define PC_COLOR_MODE2    0x32
 459      =1  #define PC_COLOR_MODE3    0x33
 460      =1  #define PC_COLOR_USER   0x34
 461      =1  #define PC_COLOR_R      0x35
 462      =1  #define PC_COLOR_G      0x36
 463      =1  #define PC_COLOR_B      0x37
 464      =1  
 465      =1  #define VIDEO_MODE      0x90
 466      =1  #define VIDEO_MODE1     0x91
 467      =1  #define VIDEO_MODE2     0x92
 468      =1  #define VIDEO_MODE3     0x93
 469      =1  #define VIDEO_USER      0x94
 470      =1  #define VIDEO_CONTRAST    0x95
 471      =1  #define VIDEO_BRIGHTNESS  0x96
 472      =1  #define VIDEO_SATURATION  0x97
 473      =1  #define VIDEO_HUE     0x99
 474      =1  #define VIDEO_SHARPNESS   0x9a
 475      =1  #define VIDEO_BACKLIGHT   0x9c    // add new value 
 476      =1  #define RESET_VIDEOVALUE  0x9b
 477      =1  #define RESET_DVRVALUE    0x9e
 478      =1  #define RESET_MonitorVALUE    0x70
 479      =1  
 480      =1  
 481      =1  #ifdef AWT_ADD_TRIGGER_DELAY_FUN  //Pinchi 20150209 add
 482      =1  #define TRIGGER_CamADelay 0xb2
 483      =1  #define TRIGGER_CamBDelay 0xb3
 484      =1  #define TRIGGER_CamCDelay 0xb4
 485      =1  #define TRIGGER_CamRDelay 0xb5
 486      =1  #endif
 487      =1  
 488      =1  #ifdef HTRV
           =1 #define RESET_GAUGESETUP  0x9d   
           =1 #define Gauge_VStart      0x7a   
           =1 #endif
 492      =1  
 493      =1  #ifdef E_Wintek
           =1 #define RESET_USERVALUE 0x9d
           =1 #endif
 496      =1  #define VIDEOPICTURE    0x9f
 497      =1  
 498      =1  #define INPUTSTD      0x6f
 499      =1  #define CHANGE_TO_AUTO    0x60
 500      =1  #define CHANGE_TO_NTSC    (0x60 | NTSC)
 501      =1  #define CHANGE_TO_PAL   (0x60 | PAL)
 502      =1  #define CHANGE_TO_SECAM   (0x60 | SECAM)
 503      =1  #define CHANGE_TO_NTSC4   (0x60 | NTSC4)
 504      =1  #define CHANGE_TO_PALM    (0x60 | PALM)
 505      =1  #define CHANGE_TO_PALN    (0x60 | PALN)
 506      =1  #define CHANGE_TO_PAL60   (0x60 | PAL60)
 507      =1  
 508      =1  #if 0
           =1 #define CLOSED_CAPTION    0x7f
           =1 #define CLOSEDCAP_OFF   0x70
           =1 #define CLOSEDCAP_CC1   0x71
           =1 #define CLOSEDCAP_CC2   0x72
           =1 #define CLOSEDCAP_CC3   0x73
           =1 #define CLOSEDCAP_CC4   0x74
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 31  

           =1 #define CLOSEDCAP_T1    0x75
           =1 #define CLOSEDCAP_T2    0x76
           =1 #define CLOSEDCAP_T3    0x77
           =1 #define CLOSEDCAP_T4    0x78
           =1 
           =1 #define TV_GUIDE      0x8f
           =1 #define NO_VCHIP_LOCK   0
           =1 #define VCHIP_TV_Y      1
           =1 #define VCHIP_TV_Y7     2
           =1 #define VCHIP_TV_G      3
           =1 #define VCHIP_TV_PG     4
           =1 #define VCHIP_TV_14     5
           =1 #define VCHIP_TV_MA     6
           =1 #define PASSWORD      0x87
           =1 #define NEW_PASSWORD    0x88
           =1 #define CHK_PASSWORD    0x89
           =1 #define RET_CHK_PASSWORD  0x8a
           =1 #endif
 533      =1  
 534      =1  #define MPAA_RATING     0x9f
 535      =1  #define NO_MPAA_RATING    0
 536      =1  #define MPAA_G        1
 537      =1  #define MPAA_PG       2
 538      =1  #define MPAA_PG_13      3
 539      =1  #define MPAA_R        4
 540      =1  #define MPAA_NC_17      5
 541      =1  #define MPAA_X        6
 542      =1  
 543      =1  #define TVINSTALL     0xa0
 544      =1  #define SCAN_CHANNEL    0xa1
 545      =1  #define AIR_CABLE_TV    0xa3
 546      =1  #define STORE_CLEAR_TVCHN 0xa4
 547      =1  #define MTS         0xa5
 548      =1  #define EDIT_CHANNEL    0xa6
 549      =1  #define MTS_STEREO      0//0x10
 550      =1  #define MTS_MONO      1//0x11
 551      =1  
 552      =1  #define AUDIO_VOLUME    0xb7
 553      =1  
 554      =1  #if 0 //andy AWT8.4 20090811
           =1 
           =1 #define AUDIO_BALANCE   0xb9
           =1 #define AUDIO_BASS      0xba
           =1 #define AUDIO_TREBLE    0xbb
           =1 
           =1 #define AUDIO_LOUDNESS    0xbc
           =1 #define AUDIO_EFFECT    0xbd
           =1 #define AUDIO_MUTE      0xbe
           =1 #endif
 564      =1  
 565      =1  #define DayChoice           0xb8
 566      =1  #define CAMOSDONOFF         0xb9
 567      =1  #define GAUGEChoice         0xba
 568      =1  #define OsdLockChoice       0xbb
 569      =1  #define PRIORITYChoice      0xcA
 570      =1  #define DVRDisplay    0xcc
 571      =1  
 572      =1  #define CAMAONOFF       0xc1
 573      =1  #define CAMBONOFF         0xc2
 574      =1  #define CAMCONOFF       0xc3
 575      =1  #define CAMRONOFF     0xc4
 576      =1  
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 32  

 577      =1  #define IMAGEChoice         0xc5 
 578      =1  #define REARChoice          0xc6
 579      =1  #define JUMPChoice          0xc7
 580      =1  #define CAMOUTChoice        0xc8 
 581      =1  #define STIME_STEP        0xc9
 582      =1  #define TriggerVGA        0xcb
 583      =1  #define IMAGE_A_Choice         0xcd
 584      =1  #define IMAGE_B_Choice         0xce
 585      =1  #define IMAGE_C_Choice         0xcf
 586      =1  
 587      =1  #define DELAYCAMA       0xd0
 588      =1  #define DELAYCAMB            0xd1
 589      =1  #define DELAYCAMC       0xd2
 590      =1  #define DELAYCAMR         0xd3
 591      =1  #ifdef USE_CAMD
           =1 #define DELAYCAMD       0xd4
           =1 #endif
 594      =1  #define ReverseMode   0xd6
 595      =1  #ifdef AWT_ML072S //william @20130902 v1.0.1.2
 596      =1  #define JUMP_AV     0xd7
 597      =1  #endif
 598      =1  #define MANUAL_TUNE_CHANNEL 0xab
 599      =1  #define FINE_TUNE_CHANNEL 0xac
 600      =1  #define STORE_PALCHANNEL  0xad
 601      =1  
 602      =1  //#define CLEAR_TVCHN     0xb0
 603      =1  //#define STORE_TVCHN     0xb1
 604      =1  
 605      =1  #define WIDESCREEN      0xc0
 606      =1  #define WIDESCREEN_NORMAL 0 
 607      =1  #define WIDESCREEN_WIDE   1 
 608      =1  #define WIDESCREEN_PANO   2
 609      =1  #define WIDESCREEN_FULL   3 
 610      =1  #define WIDESCREEN_ZOOM   4 
 611      =1  
 612      =1  //#define SYSTEM_CLOCK    0xd1
 613      =1  //#define SYSTEM_CLOCK_H    0xd2
 614      =1  //#define WAKEUP_TIME     0xd3
 615      =1  //#define WAKEUP_TIME_H   0xd4
 616      =1  //#define WAKEUP_PR     0xd5
 617      =1  //#define OFF_TIME      0xd6
 618      =1  //#define OFF_TIME_H      0xd7
 619      =1  //#define SLEEP_TIMER     0xd8
 620      =1  
 621      =1  #define Resolution      0xe0
 622      =1  #define FPS         0xe1
 623      =1  #define Quality       0xe2
 624      =1  #define RecordMode      0xe3
 625      =1  #define RecordLength      0xe4
 626      =1  #define PreAlarmLength    0xe5
 627      =1  #define PostAlarmLength   0xe6
 628      =1  #define Apply       0xe7
 629      =1  #if 0 //william-awt ml073q-20120313
           =1 #define ManualRecordStart 0xe8
           =1 #define ManualRecordStop  0xe9
           =1 #define Snapshot        0xea
           =1 #endif
 634      =1  #define FormatSD      0xeb
 635      =1  #define AudioRecord     0xec
 636      =1  #define FirmwareUpdate    0xed
 637      =1  #define ChangePassword    0xee
 638      =1  #define OverWrite     0xef
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 33  

 639      =1  
 640      =1  #define UpdateConfig      0xd0
 641      =1  #define SDCardDetect      0xd5
 642      =1  
 643      =1  #define Year        0x20
 644      =1  #define Month       0x21
 645      =1  #define Day         0x22
 646      =1  #define Hour        0x23
 647      =1  #define Minute        0x24
 648      =1  
 649      =1  #define DaylightSaving        0x25
 650      =1  #define TimeBeginesMonth      0x26
 651      =1  #define TimeBeginesWeek       0x27
 652      =1  #define TimeBeginesTime       0x28
 653      =1  #define StandardTimeBeginesMonth  0x29
 654      =1  #define StandardTimeBeginesWeek   0x2a
 655      =1  #define StandardTimeBeginesTime   0x2b
 656      =1  #define TimeZone          0x2c
 657      =1  #define FirstNumber         0x2d
 658      =1  #define SecondNumber        0x2e
 659      =1  #define ThridNumber         0x2f
 660      =1  #define FourthNumber        0x38
 661      =1  #define WIFIIPNumber        0x39
 662      =1  #define WIFIMACNumber       0x3a
 663      =1  #define GETWAYNumber        0x3b
 664      =1  
 665      =1  #define OSDLANGI      0xd9
 666      =1  #define OSDLANGII     OSDLANGI+1
 667      =1  #define OSDLANGIII      OSDLANGI+2
 668      =1  #define OSDLANGIV     OSDLANGI+3
 669      =1  
 670      =1  #define TOHIGHMENU      0xf1
 671      =1  #define MOVECURSOR2FIRST  0xf2
 672      =1  #define RESET_ALL     0xf3
 673      =1  #define EXITMENU      0xf4
 674      =1  #define DVRParamApply   0xf5
 675      =1  #define DATETIMEApply   0xf6
 676      =1  
 677      =1  #define CHOICE1_VAL     0xfc
 678      =1  #define CHOICE_VAL      0xfd
 679      =1  #define BAR_VAL       0xfe
 680      =1  #define NUM_VAL       0xff
 681      =1  
 682      =1  #define CAMNumberChoice     0xa3 
 683      =1  #define PelcoChoice         0xa4
 684      =1  #define Baud_rateChoice   0xa5
 685      =1  
 686      =1  
 687      =1  #endif  // __OSDMENU__
 688      =1  
  17          #include "debug.h"
   1      =1  #ifndef __DEBUG__
   2      =1  #define __DEBUG__
   3      =1  
   4      =1  #define DEBUG_ERR 1
   5      =1  #define DEBUG_WARN  2
   6      =1  #define DEBUG_INFO  3
   7      =1  #define DEBUG_BREAK 4
   8      =1  
   9      =1  #ifdef DEBUG_PAUSE
           =1 #define Pause(a)  { Printf("\r\n"); Printf(a); while(!RS_ready()); RS_rx(); }
           =1 #endif
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 34  

  12      =1  //#define BURSTLOCK 7
  13      =1  
  14      =1  void DebugWindowControl (void) ;
  15      =1  void Draw_Debug_Char(void);
  16      =1  void DebugWindowCursor( BYTE flag ) ;
  17      =1  void DebugWindowData( BYTE flag ) ;
  18      =1  void Debug_Write(void);
  19      =1  void Debug_Read(void);
  20      =1  
  21      =1  
  22      =1  
  23      =1  #endif  // __DEBUG__
  24      =1  
  25      =1  #ifdef CHIP_MANUAL_TEST
           =1 BYTE DelaynCheck(void);
           =1 void ChipManualTest(void);
           =1 
           =1 #endif
  18          #include "cpu.h"
   1      =1  #ifndef __CPU__
   2      =1  #define __CPU__
   3      =1  
   4      =1  /*
   5      =1  #ifdef INTERNAL_MCU
   6      =1  #define I2C_SCL   P2_0
   7      =1  #else
   8      =1  #define I2C_SCL   P1_0
   9      =1  #endif
  10      =1  #define I2C_SDA   P1_1
  11      =1  */
  12      =1  #define I2C_SCL     P1_0
  13      =1  #define I2C_SDA     P1_1
  14      =1  #ifdef SUPPORT_SDCARD  //ryan@20170824 
           =1 #define BUF_MAX     8
           =1 #define DVR_BUF_MAX   30
           =1 #else
  18      =1  #define BUF_MAX     20
  19      =1  #define DVR_BUF_MAX   8
  20      =1  #endif
  21      =1  
  22      =1  #ifdef REMO_RC5
           =1 #define EnableRemoconInt()  { RemoDataReady = 0;  EX0 = 1;}
           =1 #endif
  25      =1  void  InitCPU(void);
  26      =1  void  InitVars(void);
  27      =1  void  InitTechwell(void);
  28      =1  void  main_init (void);
  29      =1  void  PowerDown( void );
  30      =1  #if 0
           =1 BYTE  OKSleepTime(void);
           =1 #endif
  33      =1  #ifdef REMO_RC5
           =1 void  InitForRemo(void);
           =1 #endif
  36      =1  void  PowerLED(BYTE flag);
  37      =1  void    Wait_ms(WORD Tms);
  38      =1  BYTE    TW2835Command(char,char,char,char,char);
  39      =1  
  40      =1  #ifdef Monitor_debug
  41      =1  BYTE RS_rx(void);
  42      =1  #endif
  43      =1  
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 35  

  44      =1  #endif
  45      =1  
  19          #include "printf.h"
   1      =1  #ifndef __PRINTF__
   2      =1  #define __PRINTF__
   3      =1  
   4      =1  #define _outchar(c) while(1) { if( !RS_Xbusy ) { SBUF = c; RS_Xbusy=1; break; } }
   5      =1  #define Putch(c) _outchar(c)
   6      =1  
   7      =1  #ifdef SERIAL
   8      =1  
   9      =1   void Printf ( const char CODE_P *fmt, ... );
  10      =1   void Puts ( CODE_P char *ptr );
  11      =1  
  12      =1  #define TW2835Cmd(a)   Puts ( a )
  13      =1  
  14      =1  #else
           =1 
           =1  #undef  DEBUG
           =1  #define Printf(a,b)  //
           =1  #define Puts(a)      //
           =1 
           =1 #endif
  21      =1  
  22      =1  
  23      =1  #ifndef DEBUG
  24      =1  
  25      =1   #define dPuts(a)   //
  26      =1   #define wPuts(a)   //
  27      =1   #define ePuts(a)   //
  28      =1  
  29      =1  #else
           =1 
           =1  void dPrintf( const char CODE_P *fmt, ... );
           =1  void wPrintf( const char CODE_P *fmt, ... );
           =1  void ePrintf( const char CODE_P *fmt, ... );
           =1 
           =1  void dPuts( CODE_P char *ptr );
           =1  void wPuts( CODE_P char *ptr );
           =1  void ePuts( CODE_P char *ptr );
           =1 
           =1 #endif  // DEBUG
  40      =1  
  41      =1  BYTE Getch(void);
  42      =1  BYTE Getche(void);
  43      =1  
  44      =1  
  45      =1  #endif  //__PRINTF__
  20          #include "regmap.h"
   1      =1  #ifndef __REGMAP__
   2      =1  #define __REGMAP__
   3      =1  
   4      =1  //-----------------------------------------------------------------------------
   5      =1  //        Individual Decoder Registers 
   6      =1  //-----------------------------------------------------------------------------
   7      =1  
   8      =1  #define MCU_STOP_MODE 0xc8  // bit 7 is mcu stop, bit5 is MCU debug
   9      =1  
  10      =1  #define LAD0      0xc9  // Low speed AD channel 0
  11      =1  #define LAD1      0xca  // Low speed AD channel 1
  12      =1  
  13      =1  #define REG_PAGE    0xff
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 36  

  14      =1  #define STATUS0     0xd0
  15      =1  #define STATUS1     0xd1
  16      =1  #define IRQ_EN1     0xd2
  17      =1  #define IRQ_EN0     0xd3
  18      =1  
  19      =1  //-----------------------------------------------------------------------------
  20      =1  //        Individual Decoder Registers 
  21      =1  //-----------------------------------------------------------------------------
  22      =1  
  23      =1  #define DECODERADDRESS  TW88I2CAddress
  24      =1  
  25      =1  #define CVFMT     0x1e  // Component Video Format
  26      =1  #define FBSHIFT     0x38  // RGB Anti-Alias Filter/FB Shift Level
  27      =1  #define SHUE      0x3e  // RGB Hue
  28      =1  #define SCONTRAST   0x3b  // RGB Contrast
  29      =1  #define SBRIGHT     0x3a  // RGB Brightness
  30      =1  #define SCbGAIN     0x3c  // RGB Cb Gain
  31      =1  #define SCrGAIN     0x3d  // RGB Cb Gain
  32      =1  #define RGBCONTROL    0x36  // RGB Powerdown..
  33      =1  #define RGBMISC     0x39
  34      =1  #define FBCONTRL    0x3F
  35      =1  
  36      =1  //#define OSD_ADJ     0xce
  37      =1  #define PNLSHARPNESS  0x78  // Sharpness Control
  38      =1  #define OSDWINSTATUS  0x95
  39      =1  //-----------------------------------------------------------------------------
  40      =1  //        Common Registers
  41      =1  //-----------------------------------------------------------------------------
  42      =1  #define CSTATUS     0x01  // Chip Status
  43      =1  #define INFORM      0x02  // Input Format
  44      =1  #define ACNTL     0x06  // Analog Control
  45      =1  #define CROP_HI     0x07  // Cropping High
  46      =1  #define VDELAY_LO   0x08  // Vertical Delay Low
  47      =1  #define VACTIVE_LO    0x09  // Vertical Active Low
  48      =1  #define HDELAY_LO   0x0a  // Horizontal Delay Low
  49      =1  #define HACTIVE_LO    0x0b  // Horizontal Active Low
  50      =1  #define CNTRL1      0x0c  // Control 1
  51      =1  
  52      =1  #define BRIGHT      0x10  // Brightness Control
  53      =1  #define CONTRAST    0x11  // Contrast Control
  54      =1  #define SHARPNESS   0x12  // Sharpness Control
  55      =1  #define SAT_U     0x13  // Chroma(U) Gain
  56      =1  #define SAT_V     0x14  // Chroma(V) Gain
  57      =1  #define HUE       0x15  // Hue Conrol
  58      =1  #define V_PEAKING   0x17  // Vertical Peaking
  59      =1  
  60      =1  #define CC_STATUS   0x1a  // CC/EDS Status
  61      =1  #define CC_DATA     0x1b  // CC/EDS Data
  62      =1  #define SDT       0x1c  // Standard Selection
  63      =1  #define SDTR      0x1d  // Standard Recognition
  64      =1  
  65      =1  #define V_CONTROL2    0x29  // Vertical Control II
  66      =1  #define HFILTER     0x2c
  67      =1  #define MISC1     0x2d  // Miscellaneous Control 1
  68      =1  #define MISC2     0x2e  // Miscellaneous Control 2
  69      =1  #define MISC3     0x2f  // Miscellaneous Control 2
  70      =1  
  71      =1  #define VBI_CNTL2   0x34  // VBI control 2 - WSSEN
  72      =1  #define CC_ODDLINE    0x35  // CC Odd Line
  73      =1  
  74      =1  #define LADC0     0xc9  //LADC Channel 0 Input Value 
  75      =1  #define LADC1     0xca  //LADC Channel 1 Input Value 
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 37  

  76      =1  
  77      =1  #define WriteDecoder(index, val)    WriteTW88( index, val )
  78      =1  #define ReadDecoder(index)        ReadTW88( index )
  79      =1  
  80      =1  #endif // __REGMAP__
  81      =1  
  21          #include "reg.h"
   1      =1  //
   2      =1  //Registers.h : Register declaration
   3      =1  //
   4      =1  
   5      =1  #ifndef __REGISTERS__
   6      =1  #define __REGISTERS__
   7      =1  
   8      =1  #ifdef INTERNAL_MCU
           =1 /*  BYTE Registers  */
           =1 sfr P0    = 0x80;
           =1 sfr P1    = 0x90;
           =1 sfr P2    = 0xA0;
           =1 sfr P3    = 0xB0;
           =1 sfr PSW   = 0xD0;
           =1 sfr ACC   = 0xE0;
           =1 sfr B     = 0xF0;
           =1 sfr SP    = 0x81;
           =1 sfr DPL   = 0x82;
           =1 sfr DPH   = 0x83;
           =1 sfr PCON  = 0x87;
           =1 sfr TCON  = 0x88;
           =1 sfr TMOD  = 0x89;
           =1 sfr TL0   = 0x8A;
           =1 sfr TL1   = 0x8B;
           =1 sfr TH0   = 0x8C;
           =1 sfr TH1   = 0x8D;
           =1 sfr IE    = 0xA8;
           =1 sfr IP    = 0xB8;
           =1 sfr SCON  = 0x98;
           =1 sfr SBUF  = 0x99;
           =1 
           =1 //sfr P4    = 0xd8;
           =1 
           =1 /*  8052 Extensions  */
           =1 sfr EXIF  = 0x91;   // external interrupt 2,3,4,5 flags should be cleared by software
           =1 sfr T2CON = 0xC8;
           =1 sfr RCAP2L = 0xCA;
           =1 sfr RCAP2H = 0xCB;
           =1 sfr TL2   = 0xCC;
           =1 sfr TH2   = 0xCD;
           =1 sfr EICON = 0xD8;
           =1 sfr EIE   = 0xE8;
           =1 sfr EIP   = 0xF8;
           =1 
           =1 /*  TW88 Core Extension */
           =1 sfr BANKREG   = 0x9A;
           =1 sfr SPICONTROL  = 0x9B;
           =1 sfr T0HIGH    = 0x9C;
           =1 sfr T0LOW     = 0x9D;
           =1 sfr T1HIGH    = 0x9E;
           =1 sfr T1LOW     = 0x9F;
           =1 sfr T2HIGH    = 0x93;
           =1 sfr T2LOW     = 0x94;
           =1 
           =1 /*  BIT Registers  */
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 38  

           =1 /*  PSW  */
           =1 sbit CY    = 0xD7;
           =1 sbit AC    = 0xD6;
           =1 sbit F0    = 0xD5;
           =1 sbit RS1   = 0xD4;
           =1 sbit RS0   = 0xD3;
           =1 sbit OV    = 0xD2;
           =1 sbit P     = 0xD0;
           =1 
           =1 /*  TCON  */
           =1 sbit TF1   = 0x8F;
           =1 sbit TR1   = 0x8E;
           =1 sbit TF0   = 0x8D;
           =1 sbit TR0   = 0x8C;
           =1 sbit IE1   = 0x8B;
           =1 sbit IT1   = 0x8A;
           =1 sbit IE0   = 0x89;
           =1 sbit IT0   = 0x88;
           =1 
           =1 /*  IE  */
           =1 sbit EA    = 0xAF;
           =1 sbit ES    = 0xAC;
           =1 sbit ET1   = 0xAB;
           =1 sbit EX1   = 0xAA;
           =1 sbit ET0   = 0xA9;
           =1 sbit EX0   = 0xA8;
           =1 
           =1 /*  EIE  */
           =1 sbit EWDI  = 0xEC;    // Watch dog timer interrupt enable
           =1 sbit EX5   = 0xEB;    // external interrupt 5 enable
           =1 sbit EX4   = 0xEA;    // external interrupt 4 enable
           =1 sbit EX3   = 0xE9;    // external interrupt 3 enable
           =1 sbit EX2   = 0xE8;    // external interrupt 2 enable
           =1 
           =1 /*  IP  */
           =1 sbit PS    = 0xBC;
           =1 sbit PT1   = 0xBB;
           =1 sbit PX1   = 0xBA;
           =1 sbit PT0   = 0xB9;
           =1 sbit PX0   = 0xB8;
           =1 
           =1 /*  EIP  */
           =1 sbit PWDI  = 0xFC;    // Watch dog timer interrupt priority
           =1 sbit PX5   = 0xFB;    // external interrupt5 priority
           =1 sbit PX4   = 0xFA;    // external interrupt4 priority
           =1 sbit PX3   = 0xF9;    // external interrupt3 priority
           =1 sbit PX2   = 0xF8;    // external interrupt2 priority
           =1 
           =1 /*  P3  */
           =1 sbit RD    = 0xB7;
           =1 sbit WR    = 0xB6;
           =1 sbit T1    = 0xB5;
           =1 sbit T0    = 0xB4;
           =1 sbit INT1  = 0xB3;
           =1 sbit INT0  = 0xB2;
           =1 sbit TXD   = 0xB1;
           =1 sbit RXD   = 0xB0;
           =1 
           =1 /*  SCON  */
           =1 sbit SM0   = 0x9F;
           =1 sbit SM1   = 0x9E;
           =1 sbit SM2   = 0x9D;
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 39  

           =1 sbit REN   = 0x9C;
           =1 sbit TB8   = 0x9B;
           =1 sbit RB8   = 0x9A;
           =1 sbit TI    = 0x99;
           =1 sbit RI    = 0x98;
           =1 
           =1 /*  8052 Extensions  */
           =1 /*  IE  */
           =1 sbit ET2   = 0xAD;
           =1 
           =1 /*  IP  */
           =1 sbit PT2   = 0xBD;
           =1 
           =1 /*  P1  */
           =1 sbit T2EX  = 0x91;
           =1 sbit T2    = 0x90;
           =1              
           =1 /*  T2CON  */
           =1 sbit TF2   = 0xCF;
           =1 sbit EXF2  = 0xCE;
           =1 sbit RCLK  = 0xCD;
           =1 sbit TCLK  = 0xCC;
           =1 sbit EXEN2 = 0xCB;
           =1 sbit TR2   = 0xCA;
           =1 sbit C_T2  = 0xC9;
           =1 sbit CP_RL2= 0xC8;
           =1 
           =1 sfr CHPENR = 0xF6;
           =1 sfr CHPCON = 0xBF;
           =1 sfr SFRAL  = 0xC4;
           =1 sfr SFRAH  = 0xC5;
           =1 sfr SFRFD  = 0xC6;
           =1 sfr SFRCN  = 0xC7;
           =1 
           =1 sbit P0_0  = 0x80;
           =1 sbit P0_1  = 0x81;
           =1 sbit P0_2  = 0x82;
           =1 sbit P0_3  = 0x83;
           =1 sbit P0_4  = 0x84;
           =1 sbit P0_5  = 0x85;
           =1 sbit P0_6  = 0x86;
           =1 sbit P0_7  = 0x87;
           =1 
           =1 sbit P1_0  = 0x90;
           =1 sbit P1_1  = 0x91;
           =1 sbit P1_2  = 0x92;
           =1 sbit P1_3  = 0x93;
           =1 sbit P1_4  = 0x94;
           =1 sbit P1_5  = 0x95;
           =1 sbit P1_6  = 0x96;
           =1 sbit P1_7  = 0x97;
           =1 
           =1 sbit P2_0  = 0xa0;
           =1 sbit P2_1  = 0xa1;
           =1 sbit P2_2  = 0xa2;
           =1 sbit P2_3  = 0xa3;
           =1 sbit P2_4  = 0xa4;
           =1 sbit P2_5  = 0xa5;
           =1 sbit P2_6  = 0xa6;
           =1 sbit P2_7  = 0xa7;
           =1 
           =1 sbit P3_0  = 0xb0;
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 40  

           =1 sbit P3_1  = 0xb1;
           =1 sbit P3_2  = 0xb2;
           =1 sbit P3_3  = 0xb3;
           =1 sbit P3_4  = 0xb4;
           =1 sbit P3_5  = 0xb5;
           =1 sbit P3_6  = 0xb6;
           =1 sbit P3_7  = 0xb7;
           =1 
           =1 #else // external MCU=WINBOND
 189      =1  /*  BYTE Registers  */
 190      =1  sfr P0    = 0x80;
 191      =1  sfr P1    = 0x90;
 192      =1  sfr P2    = 0xA0;
 193      =1  sfr P3    = 0xB0;
 194      =1  sfr PSW   = 0xD0;
 195      =1  sfr ACC   = 0xE0;
 196      =1  sfr B     = 0xF0;
 197      =1  sfr SP    = 0x81;
 198      =1  sfr DPL   = 0x82;
 199      =1  sfr DPH   = 0x83;
 200      =1  sfr PCON  = 0x87;
 201      =1  sfr TCON  = 0x88;
 202      =1  sfr TMOD  = 0x89;
 203      =1  sfr TL0   = 0x8A;
 204      =1  sfr TL1   = 0x8B;
 205      =1  sfr TH0   = 0x8C;
 206      =1  sfr TH1   = 0x8D;
 207      =1  sfr CKCON = 0x8E;   //clock control register, default =0x01
 208      =1  sfr IE    = 0xA8;
 209      =1  sfr IP    = 0xB8;
 210      =1  sfr SCON  = 0x98;
 211      =1  sfr SBUF  = 0x99;
 212      =1  sfr P4 = 0xE8; //Megawin Ryan@970716
 213      =1  //sfr P4    = 0xa5;      //SST MCU
 214      =1  //sfr P4    = 0xd8;   //winbond<960820>
 215      =1  
 216      =1  /*  8052 Extensions  */
 217      =1  sfr ADCTL = 0xC5;   //william-20111017
 218      =1  sfr ADCV = 0xC6;    //william-20111017
 219      =1  sfr ADCVL = 0xE8;   //william-20111017
 220      =1  sfr T2CON = 0xC8;
 221      =1  sfr RCAP2L = 0xCA;
 222      =1  sfr RCAP2H = 0xCB;
 223      =1  sfr TL2   = 0xCC;
 224      =1  sfr TH2   = 0xCD;
 225      =1  
 226      =1  // for UART2
 227      =1  sfr S2CON  = 0xAA;
 228      =1  sfr S2BRT  = 0xBA;
 229      =1  sfr S2BUF  = 0x9A;
 230      =1  sfr AUXR2  = 0xA6;
 231      =1  sfr AUXIE  = 0xAD;
 232      =1  
 233      =1  sfr P1M0  = 0x91;
 234      =1  sfr P1M1  = 0x92;
 235      =1  sfr P0M0  = 0x93;
 236      =1  sfr P0M1  = 0x94;
 237      =1  sfr P2M0  = 0x95;
 238      =1  sfr P2M1  = 0x96;
 239      =1  sfr P3M0  = 0xB1;
 240      =1  sfr P3M1  = 0xB2;
 241      =1  
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 41  

 242      =1  // for PCA
 243      =1  sfr CCON   = 0xD8;
 244      =1  sfr CMOD   = 0xD9;
 245      =1  sfr CCAPM0 = 0xDA;
 246      =1  sfr CCAPM1 = 0xDB;
 247      =1  sfr CCAPM2 = 0xDC;
 248      =1  sfr CCAPM3 = 0xDD;
 249      =1  sfr CCAPM4 = 0xDE;
 250      =1  sfr CCAPM5 = 0xDF;
 251      =1  sfr CL     = 0xE9;
 252      =1  sfr CH     = 0xF9;
 253      =1  sfr CCAP0L = 0xEA;
 254      =1  sfr CCAP0H = 0xFA;
 255      =1  sfr CCAP1L = 0xEB;
 256      =1  sfr CCAP1H = 0xFB;
 257      =1  sfr CCAP2L = 0xEC;
 258      =1  sfr CCAP2H = 0xFC;
 259      =1  sfr CCAP3L = 0xED;
 260      =1  sfr CCAP3H = 0xFD;
 261      =1  sfr CCAP4L = 0xEE;
 262      =1  sfr CCAP4H = 0xFE;
 263      =1  sfr CCAP5L = 0xEF;
 264      =1  sfr CCAP5H = 0xFF;
 265      =1  sfr PCAPWM0= 0xF2;
 266      =1  sfr PCAPWM1= 0xF3;
 267      =1  sfr PCAPWM2= 0xF4;
 268      =1  sfr PCAPWM3= 0xF5;
 269      =1  sfr PCAPWM4= 0xF6;
 270      =1  sfr PCAPWM5= 0xF7;
 271      =1  
 272      =1  /*  BIT Registers  */
 273      =1  /*  PSW  */
 274      =1  sbit CY    = 0xD7;
 275      =1  sbit AC    = 0xD6;
 276      =1  sbit F0    = 0xD5;
 277      =1  sbit RS1   = 0xD4;
 278      =1  sbit RS0   = 0xD3;
 279      =1  sbit OV    = 0xD2;
 280      =1  sbit P     = 0xD0;
 281      =1  
 282      =1  /*  TCON  */
 283      =1  sbit TF1   = 0x8F;
 284      =1  sbit TR1   = 0x8E;
 285      =1  sbit TF0   = 0x8D;
 286      =1  sbit TR0   = 0x8C;
 287      =1  sbit IE1   = 0x8B;
 288      =1  sbit IT1   = 0x8A;
 289      =1  sbit IE0   = 0x89;
 290      =1  sbit IT0   = 0x88;
 291      =1  
 292      =1  /*  IE  */
 293      =1  sbit EA    = 0xAF;
 294      =1  sbit ES    = 0xAC;
 295      =1  sbit ET1   = 0xAB;
 296      =1  sbit EX1   = 0xAA;
 297      =1  sbit ET0   = 0xA9;
 298      =1  sbit EX0   = 0xA8;
 299      =1  
 300      =1  /*  IP  */
 301      =1  sbit PS    = 0xBC;
 302      =1  sbit PT1   = 0xBB;
 303      =1  sbit PX1   = 0xBA;
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 42  

 304      =1  sbit PT0   = 0xB9;
 305      =1  sbit PX0   = 0xB8;
 306      =1  
 307      =1  /*  P3  */
 308      =1  sbit RD    = 0xB7;
 309      =1  sbit WR    = 0xB6;
 310      =1  sbit T1    = 0xB5;
 311      =1  sbit T0    = 0xB4;
 312      =1  sbit INT1  = 0xB3;
 313      =1  sbit INT0  = 0xB2;
 314      =1  sbit TXD   = 0xB1;
 315      =1  sbit RXD   = 0xB0;
 316      =1  
 317      =1  /*  SCON  */
 318      =1  sbit SM0   = 0x9F;
 319      =1  sbit SM1   = 0x9E;
 320      =1  sbit SM2   = 0x9D;
 321      =1  sbit REN   = 0x9C;
 322      =1  sbit TB8   = 0x9B;
 323      =1  sbit RB8   = 0x9A;
 324      =1  sbit TI    = 0x99;
 325      =1  sbit RI    = 0x98;
 326      =1  
 327      =1  /*  8052 Extensions  */
 328      =1  /*  IE  */
 329      =1  sbit ET2   = 0xAD;
 330      =1  
 331      =1  /*  IP  */
 332      =1  sbit PT2   = 0xBD;
 333      =1  
 334      =1  /*  P1  */
 335      =1  sbit T2EX  = 0x91;
 336      =1  sbit T2    = 0x90;
 337      =1               
 338      =1  /*  T2CON  */
 339      =1  sbit TF2   = 0xCF;
 340      =1  sbit EXF2  = 0xCE;
 341      =1  sbit RCLK  = 0xCD;
 342      =1  sbit TCLK  = 0xCC;
 343      =1  sbit EXEN2 = 0xCB;
 344      =1  sbit TR2   = 0xCA;
 345      =1  sbit C_T2  = 0xC9;
 346      =1  sbit CP_RL2= 0xC8;
 347      =1  
 348      =1  sfr CHPENR = 0xF6;
 349      =1  sfr CHPCON = 0xBF;
 350      =1  sfr SFRAL  = 0xC4;
 351      =1  sfr SFRAH  = 0xC5;
 352      =1  sfr SFRFD  = 0xC6;
 353      =1  sfr SFRCN  = 0xC7;
 354      =1  
 355      =1  sbit P0_0  = 0x80;
 356      =1  sbit P0_1  = 0x81;
 357      =1  sbit P0_2  = 0x82;
 358      =1  sbit P0_3  = 0x83;
 359      =1  sbit P0_4  = 0x84;
 360      =1  sbit P0_5  = 0x85;
 361      =1  sbit P0_6  = 0x86;
 362      =1  sbit P0_7  = 0x87;
 363      =1  
 364      =1  sbit P1_0  = 0x90;
 365      =1  sbit P1_1  = 0x91;
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 43  

 366      =1  sbit P1_2  = 0x92;
 367      =1  sbit P1_3  = 0x93;
 368      =1  sbit P1_4  = 0x94;
 369      =1  sbit P1_5  = 0x95;
 370      =1  sbit P1_6  = 0x96;
 371      =1  sbit P1_7  = 0x97;
 372      =1  
 373      =1  sbit P2_0  = 0xa0;
 374      =1  sbit P2_1  = 0xa1;
 375      =1  sbit P2_2  = 0xa2;
 376      =1  sbit P2_3  = 0xa3;
 377      =1  sbit P2_4  = 0xa4;
 378      =1  sbit P2_5  = 0xa5;
 379      =1  sbit P2_6  = 0xa6;
 380      =1  sbit P2_7  = 0xa7;
 381      =1  
 382      =1  sbit P3_0  = 0xb0;
 383      =1  sbit P3_1  = 0xb1;
 384      =1  sbit P3_2  = 0xb2;
 385      =1  sbit P3_3  = 0xb3;
 386      =1  sbit P3_4  = 0xb4;
 387      =1  sbit P3_5  = 0xb5;
 388      =1  sbit P3_6  = 0xb6;
 389      =1  sbit P3_7  = 0xb7;
 390      =1  
 391      =1  sbit P4_0  = P4^0;
 392      =1  sbit P4_1  = P4^1;
 393      =1  sbit INT3  = P4^2;
 394      =1  sbit INT2  = P4^3;
 395      =1  
 396      =1  sfr P4M0  = 0xB3;
 397      =1  sfr P4M1  = 0xB4;
 398      =1  #endif  // INTERNAL_MCU
 399      =1  
 400      =1  #endif  //__REGISTERS__
 401      =1  
  22          #include "etc_eep.h"
   1      =1  #ifndef __ETC_EEP__
   2      =1  #define __ETC_EEP__
   3      =1  
   4      =1  
   5      =1  ////eeprom.h
   6      =1  
   7      =1  //=========================================================================
   8      =1  //  EEPROM structure
   9      =1  //  0x00  BYTE  4 'TW88'
  10      =1  #define EEP_FWREV_MAJOR     0x04  //BYTE  1 F/W Rev.-major(Hex) 
  11      =1  #define EEP_FWREV_MINOR     0x05  //BYTE  1 F/W Rev.-minor(Hex)
  12      =1  #define EEP_DEBUGLEVEL      0x06  //BYTE  1 DebugLevel
  13      =1  //
  14      =1  #define EEP_AUTODETECT      0x07  //BYTE  1 Flag for Input Auto Detect  -0:Auto, 1:NTSC,....
  15      =1  #define EEP_AUTODETECTTYTE    0x08  //BYTE  1 Type of Auto-detect(will be value of register 0x1d)
  16      =1  //      ---------------------------------------------------------------
  17      =1  #define EEP_WIDEMODE      0x09  //BYTE  1   Wide Mode
  18      =1  
  19      =1  #define EEP_AUTORECOGNITION   0x0a  //BYTE  1 Auto Recognition
  20      =1  #define EEP_VIDEOMODE     0x0b  //BYTE  1   Video Mode
  21      =1  
  22      =1  #define EEP_OSDLANG       0x0c  //BYTE  1   OSDLang           // 0
  23      =1  
  24      =1  #define EEP_OSDPOSITIONMODE   0x0d  //BYTE  1 OSD Position Mode
  25      =1  #define EEP_CCD         0x0e  //BYTE  1 Closed Caption- 0: off, 1:on
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 44  

  26      =1  
  27      =1  #define EEP_INPUTSELECTION    0x0f  //BYTE  1 InputSelection
  28      =1  
  29      =1  //
  30      =1  #define EEP_PC_CONTRAST     0x10
  31      =1  #define EEP_PC_BRIGHT     0x11
  32      =1  
  33      =1  #define EEP_CONTRAST      0x12  //BYTE  1 Contrast 
  34      =1  #define EEP_BRIGHTNESS      0x13  //BYTE  1 Brightness
  35      =1  #define EEP_SATURATION_U    0x14  //BYTE  1 Saturation :U
  36      =1  #define EEP_SATURATION_V    0x15  //BYTE  1 Saturation :V
  37      =1  #define EEP_SHARPNESS     0x16  //BYTE  1 Sharpness 
  38      =1  #define EEP_HUE         0x17  //BYTE  1 Hue                    
  39      =1  
  40      =1  //====================================HS AWT 981001
  41      =1  #define  EEP_AutoMode           0xa0
  42      =1  #define  EEP_IMAGEMode          0xa1
  43      =1  #define  EEP_RearMode           0xa2
  44      =1  #define  EEP_COSDMode           0xa3
  45      =1  #define  EEP_GAUGEMode          0xa4
  46      =1  #define  EEP_CAMAMode           0xa5 
  47      =1  #define  EEP_CAMBMode           0xa6
  48      =1  #define  EEP_CAMCMode           0xa7
  49      =1  #define  EEP_CAMRMode           0xa8
  50      =1  #define  EEP_CAMOutMode         0xa9  
  51      =1  #define  EEP_TimeStep           0xaa
  52      =1  #define  EEP_Powerflag          0xab   
  53      =1  #define  EEP_ONOFFChoice        0xac 
  54      =1  
  55      =1  #define  EEP_PRIORITY           0xad
  56      =1  #define  EEP_JUMPMode           0xae
  57      =1  #define  EEP_NowModeState       0xaf
  58      =1  #define  EEP_SelectMode         0xb0
  59      =1  #define  EEP_PriorityOffSelectMode  0xb1
  60      =1  #define  EEP_AudioRecord    0xb2
  61      =1  
  62      =1  #define  EEP_FirstNumber    0xb3
  63      =1  #define  EEP_SecondNumber   0xb4
  64      =1  #define  EEP_ThridNumber    0xb5
  65      =1  #define  EEP_FourthNumber   0xb6
  66      =1  
  67      =1  #define  EEP_CAMNUMBER     0xb7
  68      =1  #define  EEP_PELCO       0xb8
  69      =1  #define  EEP_Baud_rate     0xb9
  70      =1  #define  EEP_TriggerVGA    0xba
  71      =1  #define  EEP_DVRDisplay    0xbb
  72      =1  #define  EEP_IMAGE_A_Mode    0xbc//andy A1.4 20100113
  73      =1  #define  EEP_IMAGE_B_Mode    0xbd//andy A1.4 20100113
  74      =1  #define  EEP_IMAGE_C_Mode    0xbe//andy A1.4 20100113
  75      =1  
  76      =1  #define  EEP_SDCardDetect    0xbf//andy A1.4 20100113
  77      =1  
  78      =1  #ifdef HTRV
           =1 #define  EEP_Gauge_VStart  0x211   //WILLIAM-970318
           =1 static  BYTE GaugeVStart;
           =1 #endif
  82      =1  
  83      =1  #define  EEP_DELAYCAMA           0xC0 
  84      =1  #define  EEP_DELAYCAMB           0xC1
  85      =1  #define  EEP_DELAYCAMC           0xC2
  86      =1  #define  EEP_DELAYCAMR           0xC3
  87      =1  #ifdef USE_CAMD
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 45  

           =1 #define  EEP_DELAYCAMD           0xC4
           =1 #endif
  90      =1  //#define  EEP_SelectModeBuf         0xb2
  91      =1  #define  EEP_ReverseMode    0xc5
  92      =1  #define  EEP_JUMPAV_TIMESET 0xc6
  93      =1  #if 0
           =1 #define  EEP_Resolution     0xc0
           =1 #define  EEP_FPS        0xc1
           =1 #define  EEP_Quality      0xc2
           =1 #define  EEP_RecordMode     0xc3
           =1 #define  EEP_RecordLength   0xc4
           =1 #define  EEP_PreAlarmLength   0xc5
           =1 #define  EEP_PostAlarmLength  0xc6
           =1 #endif
 102      =1  //====================================HS AWT 981001
 103      =1  
 104      =1  #ifdef AWT_ADD_TRIGGER_DELAY_FUN  
 105      =1  #define  EEP_CamADelay    0x21b
 106      =1  #define  EEP_CamBDelay    0x21c
 107      =1  #define  EEP_CamCDelay    0x21d
 108      =1  #define  EEP_CamRDelay    0x21e
 109      =1  #endif
 110      =1  //====================================
 111      =1  //
 112      =1  //        ---------------------------------------------------------------
 113      =1  #define EEP_PCAUDIOPVOL   0x37  //BYTE  1   AudioVol
 114      =1  #define EEP_AUDIOPVOL     0x38  //BYTE  1   AudioVol
 115      =1  #define EEP_AUDIOBALANCE    0x39  //BYTE  1   AudioBalance
 116      =1  //
 117      =1  //        ---------------------------------------------------------------
 118      =1  
 119      =1  #define EEP_BLOCKMOVIE      0x40  //BYTE  1 BlockedMovie:Blocked rating for Movie 
 120      =1  #define EEP_BLOCKTV       0x41  //BYTE  1 BlockedTV:Blocked rating for TV     
 121      =1  #define EEP_FVSLD       0x42  //BYTE  6
 122      =1  //                            7    6       4    3    2    1    0
 123      =1  //  FVSLD Level                        ALL   FV(V)   S    L    D    
 124      =1  //  0x43    BYTE    1   TV-Y            X  
 125      =1  //  0x44  BYTE    1   TV-Y7           X    X 
 126      =1  //  0x45  BYTE    1   TV-G            X 
 127      =1  //  0x46  BYTE    1   TV-PG           X       X    X    X    X
 128      =1  //  0x47  BYTE    1   TV-14           X       X    X    X    X 
 129      =1  //  0x48  BYTE    1   TV-MA           X       X    X    X
 130      =1  //
 131      =1  #define EEP_VCHIPPASSWORD   0x49  //BYTE  4   OSDPassword         //Defualt:3366
 132      =1  //      ---------------------------------------------------------------
 133      =1  //
 134      =1  //
 135      =1  //  0x61  WORD  2   PanelXRes
 136      =1  //  0x63  WORD  2 PanelYRes
 137      =1  //  0x65  BYTE  1 PanelHsyncMinPulseWidth
 138      =1  //  0x66  BYTE  1 PanelVsyncMinPulseWidth
 139      =1  //  0x67  WORD  2 PanelHminBackPorch
 140      =1  //  0x69  BYTE  1 PanelHsyncPolarity
 141      =1  //  0x6a  BYTE  1 PanelVsyncPolarity
 142      =1  //  0x6b  WORD  2 PanelDotClock
 143      =1  //  0x6d  BYTE  1 PanelPixsPerClock
 144      =1  //  0x6e  BYTE  1 PanelDEonly
 145      =1  //      ---------------------------------------------------------------
 146      =1  //
 147      =1  //  0x80  PC Data
 148      =1  //
 149      =1  //      ---------------------------------------------------------------
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 46  

 150      =1  //
 151      =1  //  0x300 TV Data
 152      =1  //
 153      =1  //  --- NTSC_TV -------------------------------------------------------------
 154      =1  //  CNT_SAVEDAIR      BYTE  1   Total count of saved Air TV Channel.
 155      =1  //  IDX_CURAIR        BYTE  1   Index of Current Air TV Channel
 156      =1  //  CHN_CURAIR        BYTE    1   Current Air TV Channel.
 157      =1  //
 158      =1  //  FIRSTSAVED_AIRCHN   BYTE    1 First saved Air TV channel no (maximum 100)
 159      =1  //  ....
 160      =1  //
 161      =1  //  CNT_SAVEDCABLE      BYTE  1   Total count of saved Cable TV Channel.
 162      =1  //  IDX_CURCABLE      BYTE  1   Index of Current Cable TV Channel
 163      =1  //  CHN_CURCABLE      BYTE    1   Current Cable TV Channel.
 164      =1  //
 165      =1  //  FIRSTSAVED_CABLECHN   BYTE  1 First saved Cable TV channel no (maximum 100)
 166      =1  //
 167      =1  //  --- PAL_TV --------------------------------------------------------------
 168      =1  //  PR_CUR          BYTE  1   Current PR no.
 169      =1  //  FIRST_SAVEDPR     DWORD 4   Freq of PR0.  (TOTAL_PR)
 170      =1  //  FIRST_SAVEDPR+4     DWORD   4   Freq of PR1.
 171      =1  //  .....
 172      =1  //
 173      =1  
 174      =1  
 175      =1  
 176      =1  //
 177      =1  // Offset of EEPROM
 178      =1  //
 179      =1  /*
 180      =1  #define VIDEOCONTRAST   0x18    // for NTSC.(PAL:0x20,SECAM:0x28)
 181      =1  #define VIDEOBRIGHTNESS   0x19
 182      =1  #define VIDEOSATURATION_U 0x1a
 183      =1  #define VIDEOSATURATION_V 0x1b
 184      =1  #define VIDEOHUE      0x1c    // only for NTSC
 185      =1  #define VIDEOSHARPNESS    0x1d
 186      =1  */
 187      =1  #define CCCOLOR   0x52
 188      =1  #define VOLZOOM   0x53
 189      =1  
 190      =1  #define PANELINFO 0x61
 191      =1  
 192      =1  // PAL_TV
 193      =1  #define  PR_CUR         0x301 
 194      =1  #define  FIRST_SAVEDPR      0x308 
 195      =1   #define TVFREQ_HIGH 0 
 196      =1   #define TVFREQ_LOW  1
 197      =1  #ifdef PAL_TV
           =1  #define TVFINETUNE  2
           =1     // NOT Finetune: 0 , Range: -32 ~ +32
           =1  #define TVPRSYSTEM  3  
           =1     // bit 7: Add:1 Ereased :0
           =1     // 
           =1  #define TVCHNAME    4
           =1 
           =1  #define BYTEPERCHANNEL 9 
           =1 #endif
 207      =1  // NTSC_TV
 208      =1  #define  EEP_TVInputSel     0x302
 209      =1  #define  CHN_CURAIR       0x303 
 210      =1  #define  FIRSTSAVED_AIRCHN    0x308 
 211      =1  #define  CHN_CURCABLE     0x403 
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 47  

 212      =1  #define  FIRSTSAVED_CABLECHN  0x408 
 213      =1  #ifdef NTSC_TV
           =1  #define TVFINETUNE  0
           =1     // NOT Finetune: 0 , Range: -32 ~ +32
           =1  #define TVPRSYSTEM  1  
           =1     // bit 7: Add:1 Ereased :0
           =1     // 
           =1  #define BYTEPERCHANNEL 2
           =1 #endif
 221      =1  
 222      =1  
 223      =1  
 224      =1  
 225      =1  WORD GetFWRevEE(void);
 226      =1  void SaveFWRevEE(WORD);
 227      =1  
 228      =1  BYTE GetDebugLevelEE(void);
 229      =1  void SaveDebugLevelEE(BYTE);
 230      =1  
 231      =1  #ifdef WIDE_SCREEN
           =1 BYTE GetWideModeEE(void);
           =1 void SaveWideModeEE(BYTE dl);
           =1 #endif
 235      =1  
 236      =1  
 237      =1  //BYTE GetRange4CoarseEE(void);
 238      =1  //void SaveRange4CoarseEE(BYTE);
 239      =1  
 240      =1  BYTE GetPossibleAutoDetectStdEE(void);
 241      =1  void SetPossibleAutoDetectStdEE(void);
 242      =1  
 243      =1  //BYTE GetOSDXPositionEE(void);
 244      =1  //BYTE GetOSDYPositionEE(void);
 245      =1  BYTE GetClosedCaptionFlagEE(void);
 246      =1  
 247      =1  BYTE GetVideoDatafromEE(BYTE);
 248      =1  void SaveVideoDatatoEE(BYTE offset, BYTE ndata);
 249      =1  
 250      =1  //BYTE GetVideoBrightnessEE(void);
 251      =1  //BYTE GetVideoSaturationEE(BYTE);
 252      =1  //BYTE GetVideoHueEE(void);
 253      =1  //BYTE GetVideoSharpnessEE(void);
 254      =1  
 255      =1  //void SaveVideoContrastEE(BYTE ndata);
 256      =1  //void SaveVideoBrightnessEE(BYTE ndata);
 257      =1  //void SaveVideoSaturationEE(BYTE, BYTE ndata);
 258      =1  //void SaveVideoHueEE(BYTE ndata);
 259      =1  //void SaveVideoSharpnessEE(BYTE ndata);
 260      =1  
 261      =1  BYTE GetOSDPositionModeEE(void);
 262      =1  void SaveOSDPositionModeEE(BYTE ndata);
 263      =1  //void SaveOSDXPositionEE(BYTE);
 264      =1  //void SaveOSDYPositionEE(BYTE);
 265      =1  
 266      =1  void SaveClosedCaptionFlagEE(BYTE);
 267      =1  
 268      =1  BYTE GetBlockedTVEE(void);      
 269      =1  void SaveBlockedTVEE(BYTE vi);    
 270      =1  BYTE GetBlockedTV_FLDSLEE( BYTE level ) ;
 271      =1  void SaveBlockedTV_FLDSLEE(BYTE level, BYTE vi) ;
 272      =1  
 273      =1  BYTE GetBlockedMovieEE(void);   
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 48  

 274      =1  void SaveBlockedMovieEE(BYTE vi); 
 275      =1  #if 0
           =1 BYTE GetInputSelectionEE(void);
           =1 #endif
 278      =1  void SaveInputSelectionEE(BYTE val);
 279      =1  
 280      =1  //BYTE GetOSDDurationEE(void);
 281      =1  //void SaveOSDDurationEE(BYTE val);
 282      =1  
 283      =1  BYTE GetOSDLangEE(void);
 284      =1  void SaveOSDLangEE(BYTE val);
 285      =1  
 286      =1  //ljy100303...BYTE GetOSDZoomEE(void);
 287      =1  //ljy100303...void SaveOSDZoomEE(BYTE val);
 288      =1  
 289      =1  BYTE GetAudioVolEE(void);
 290      =1  void SetAudioVolEE( BYTE vol );
 291      =1  BYTE GetPCAudioVolEE(void);
 292      =1  void SetPCAudioVolEE( BYTE vol );
 293      =1  #if 0
           =1 BYTE GetAudioBalanceEE(void);
           =1 void SetAudioBalanceEE( BYTE vol );
           =1 BYTE GetAudioBassEE(void);
           =1 void SetAudioBassEE( BYTE vol );
           =1 BYTE GetAudioTrebleEE(void);
           =1 void SetAudioTrebleEE( BYTE vol );
           =1 #endif
 301      =1  //BYTE GetAudioEffectEE(void);
 302      =1  //void SetAudioEffectEE( BYTE vol );
 303      =1  
 304      =1  void ClearBasicEE(void);
 305      =1  
 306      =1  BYTE ValidPassword(DATA_P BYTE *numstr, BYTE index);
 307      =1  BYTE SetNewPassword(DATA_P BYTE *numstr, BYTE index);
 308      =1  
 309      =1  //WORD GetPanelXRes(void);
 310      =1  //WORD GetPanelYRes(void);
 311      =1  BYTE GetPanelHsyncMinPulseWidth(void);
 312      =1  BYTE GetPanelVsyncMinPulseWidth(void);
 313      =1  WORD GetPanelHMinBackPorch(void);
 314      =1  BYTE GetPanelHsyncPolarity(void);
 315      =1  BYTE GetPanelVsyncPolarity(void);
 316      =1  WORD GetPanelDotClock(void);
 317      =1  WORD GetPanelMaxClock(void);
 318      =1  BYTE GetPanelPixsPerClock(void);
 319      =1  // Not used yet *************************  BYTE GetPanelDEonly(void);
 320      =1  
 321      =1  void AddTVChannelEE( BYTE tvtype, BYTE chn);
 322      =1  BYTE GetTVChannelEE( BYTE tvtype, BYTE inx);
 323      =1  void ResetTVChannelEE( BYTE tvtype );
 324      =1  BYTE GetTVChannelCntEE(BYTE tvtype);
 325      =1  BYTE GetTVChnIdxEE(BYTE tvtype);
 326      =1  BYTE GetCurTVChannelEE(BYTE tvtype);
 327      =1  void SetTVChnIdxEE(BYTE tvtype, BYTE newd);
 328      =1  void SetCurTVChannelEE(BYTE tvtype, BYTE newd);
 329      =1  BYTE InsertTVChannelEE(BYTE tvtype, BYTE newd);
 330      =1  BYTE RemoveTVChannelEE(BYTE tvtype, BYTE newd);
 331      =1  
 332      =1  void SetTVPrEE(void);
 333      =1  BYTE GetTVPrEE(void);
 334      =1  void SetTVFreqEE(BYTE, WORD);
 335      =1  WORD GetTVFreqEE(BYTE);
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 49  

 336      =1  void SetFineTuneEE(BYTE, BYTE);
 337      =1  BYTE GetFineTuneEE(BYTE);
 338      =1  BYTE GetTVPrSystem(BYTE);
 339      =1  void SetTVPrSystem(BYTE, BYTE);
 340      =1  BYTE GetTVInputSelEE(void);
 341      =1  void SetTVInputSelEE(BYTE);
 342      =1  
 343      =1  #define GetVInputStdDetectModeEE()        ReadEEP(EEP_AUTODETECTTYTE)
 344      =1  #define SaveVInputStdDetectModeEE(A)      WriteEEP(EEP_AUTODETECTTYTE, A)
 345      =1  
 346      =1  #define GetAutoRecogntionEE()         ReadEEP(EEP_AUTORECOGNITION)
 347      =1  #define SaveAutoRecogntionEE(A)         WriteEEP(EEP_AUTORECOGNITION, A)
 348      =1  
 349      =1  #define SetVideoModeEE( ctid )          WriteEEP( EEP_VIDEOMODE, ctid )
 350      =1  #define GetVideoModeEE()            ReadEEP( EEP_VIDEOMODE )
 351      =1  
 352      =1  #define GetPanelContrastEE()          ReadEEP(0x10)
 353      =1  
 354      =1  #if defined( SUPPORT_PC ) || defined( SUPPORT_DTV )
           =1 //#define GetPanelHueEE()             ReadEEP(0x28)
           =1 //#define GetPanelSharpnessEE()         ReadEEP(0x29)
           =1 #define GetPanelBrightnessEE()          ReadEEP(0x11)
           =1 //#define GetPanelSaturationEE()          ReadEEP(0x2a)
           =1 
           =1 //#define SavePanelHueEE(A)           WriteEEP(0x28, A)
           =1 //#define SavePanelSharpnessEE(A)         WriteEEP(0x29, A)
           =1 #define SavePanelContrastEE(A)          WriteEEP(0x10, A)
           =1 #define SavePanelBrightnessEE(A)        WriteEEP(0x11, A)
           =1 //#define SavePanelSaturationEE(A)        WriteEEP(0x2a, A)
           =1 #endif
 366      =1  
 367      =1  /*
 368      =1  #define GetDigitalVideoContrastEE()       ReadEEP(0x2b)
 369      =1  #define GetDigitalVideoBrightnessEE()     ReadEEP(0x2c)
 370      =1  #define GetDigitalVideoHueEE()          ReadEEP(0x2d)
 371      =1  #define GetDigitalVideoSaturationEE(off)    ReadEEP(0x2e+off)
 372      =1  
 373      =1  #define SaveDigitalVideoContrastEE(A)     WriteEEP(0x2b, A)
 374      =1  #define SaveDigitalVideoBrightnessEE(A)     WriteEEP(0x2c, A)
 375      =1  #define SaveDigitalVideoHueEE(A)        WriteEEP(0x2d, A)
 376      =1  #define SaveDigitalVideoSaturationEE(off,A)   WriteEEP(0x2e+off, A)
 377      =1  */
 378      =1  
 379      =1  #endif  // __ETC_EEP__
  23          #include "osdbasic.h"
   1      =1  //osd_basic.h
   2      =1  //LJY11012001
   3      =1  #ifndef __OSD_BASIC__
   4      =1  #define __OSD_BASIC__
   5      =1  
   6      =1  // osd_basic.h
   7      =1  // char code
   8      =1  //#include "apilib.h"
   9      =1  
  10      =1  //ljy052903
  11      =1  //definition for internal OSD
  12      =1  #define FONT_WIDTH_TW88     12
  13      =1  #define FONT_HEIGHT_TW88    18
  14      =1  #define PIXS_PER_XSTEP_TW88   8
  15      =1  #define LINES_PER_YSTEP_TW88  4
  16      =1  #define MAX_OSDWINDOW_TW88    8
  17      =1  
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 50  

  18      =1  // Using TW88 OSD for Menu
  19      =1  #define FONT_WIDTH      12
  20      =1  #define FONT_HEIGHT     18
  21      =1  #define PIXS_PER_XSTEP    8
  22      =1  #define LINES_PER_YSTEP   4
  23      =1  #define MAX_OSDWINDOW   4
  24      =1  
  25      =1  #define MAX_FONT_BYTES    27
  26      =1  #define RAMFONT   0xFE
  27      =1  #define ROMFONT   0xFF
  28      =1  #define NO_UDFONT     226 
  29      =1  
  30      =1  #define FONT_ROM  1
  31      =1  #define FONT_RAM  2
  32      =1  
  33      =1  
  34      =1  /////////////////////////////////
  35      =1  // Old Registers...
  36      =1  /*
  37      =1    #define TW88_WIN1ATTR   0x76
  38      =1    #define TW88_WIN1XSTART   0x77
  39      =1    #define TW88_WIN1YSTART   0x78
  40      =1    #define TW88_WIN1WIDTH    0x79
  41      =1    #define TW88_WIN1HEIGHT   0x7a
  42      =1    #define TW88_WIN1BRDATTR  0x7b
  43      =1    #define TW88_WIN1BRDWIDTH 0x7c
  44      =1    #define TW88_WIN1BRDHEIGHT  0x7d
  45      =1    #define TW88_WIN1XSPACE   0x7e    // between characters.
  46      =1    #define TW88_WIN1YSPACE   0x7f
  47      =1    #define TW88_WIN1SADDR    0x80    // starting address of OSD ram for Windows 1
  48      =1  */
  49      =1  /////////////////////////////////
  50      =1  
  51      =1  // OSD
  52      =1  #define TW88_ENABLERAM    0x94  // TW8804C
  53      =1  #define TW88_FONTRAMADDR  0x99  // TW8804C
  54      =1  #define TW88_FONTRAMDATA  0x9a  // TW8804C
  55      =1  #define TW88_OSDRAMADDRHI 0x95  // TW8804C
  56      =1  #define TW88_OSDRAMADDRLO 0x96  // TW8804C
  57      =1  #define TW88_OSDRAMDATAHI 0x97  // TW8804C
  58      =1  #define TW88_OSDRAMDATALO 0x98  // TW8804C
  59      =1  #define TW88_MULTISTART   0x9b  // TW8804C
  60      =1  #define TW88_OSDLOCKUPSEL 0x9c
  61      =1  #define TW88_WINNUM     0x9e  // TW8804C
  62      =1  #define TW88_WINATTR    0x9f  //
  63      =1  #define TW88_WINXSTART    0xa1  //
  64      =1  #define TW88_WINYSTART    0xa2  //
  65      =1  #define TW88_WINSTART_HI  0xa0  //
  66      =1  #define TW88_WINWIDTH   0xa3  //
  67      =1  #define TW88_WINHEIGHT    0xa4  //
  68      =1  #define TW88_WINBRDATTR   0xa5  //
  69      =1  #define TW88_WINBRDWIDTH  0xa6  //
  70      =1  #define TW88_WINBRDHEIGHT 0xa7  //
  71      =1  #define TW88_WINSPACE   0xa8  // between characters.
  72      =1  #define TW88_WINZOOM    0xa9  //
  73      =1  #define TW88_WINSADDRHI   0xa9  // starting address of OSD ram for Windows 1
  74      =1  #define TW88_WINSADDRLO   0xaa  // starting address of OSD ram for Windows 1
  75      =1  
  76      =1  #define TW88_WINSHADOW    0xab  //
  77      =1  #define TW88_WINBLENDING  0xac  //
  78      =1  #define TW88_WINCHEFFECT  0xad  //
  79      =1  
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 51  

  80      =1  
  81      =1  //Attributes for OSD
  82      =1  #define WINZOOMx1     0x01
  83      =1  #define WINZOOMx2     0x02
  84      =1  #define WINZOOMx3     0x03
  85      =1  #define WINZOOMx4     0x04
  86      =1  #define SHOW        0x08  
  87      =1  
  88      =1  #define EXTENDED_COLOR    0x80
  89      =1  #define BG_COLOR_BLACK    0x00  //For background color of window, border, and char. 
  90      =1  #define BG_COLOR_RED    0x40  
  91      =1  #define BG_COLOR_GREEN    0x20
  92      =1  #define BG_COLOR_YELLOW   0x60
  93      =1  #define BG_COLOR_BLUE   0x10
  94      =1  #define BG_COLOR_MAGENTA  0x50
  95      =1  #define BG_COLOR_CYAN   0x30
  96      =1  #define BG_COLOR_WHITE    0x70
  97      =1  #define BG_COLOR_TRANS    0x80  
  98      =1  #define BG_COLOR_MASK   0xf0  
  99      =1  
 100      =1  #define CH_COLOR_BLACK    0x00  //For color of char.
 101      =1  #define CH_COLOR_RED    0x04  
 102      =1  #define CH_COLOR_GREEN    0x02
 103      =1  #define CH_COLOR_YELLOW   0x06
 104      =1  #define CH_COLOR_BLUE   0x01
 105      =1  #define CH_COLOR_MAGENTA  0x05
 106      =1  #define CH_COLOR_CYAN   0x03
 107      =1  #define CH_COLOR_WHITE    0x07
 108      =1  #define CH_BLINK      0x08  
 109      =1  #define CH_COLOR_MASK   0x0f  
 110      =1  
 111      =1  #define CL_BLACK      0x00  //For color of char.
 112      =1  #define CL_BLUE       0x01
 113      =1  #define CL_GREEN      0x02
 114      =1  #define CL_CYAN       0x03
 115      =1  #define CL_RED        0x04  
 116      =1  #define CL_MAGENTA      0x05
 117      =1  #define CL_YELLOW     0x06
 118      =1  #define CL_WHITE      0x07
 119      =1  #define CL_BLINK      0x08  
 120      =1  
 121      =1  // 0x76*(WindowNo*0x0b)
 122      =1  #define WINDOW_DISABLE    0x00
 123      =1  #define WINDOW_ENABLE   0x01
 124      =1  #define WINDOW_3D_ENABLE    0x04
 125      =1  #define WINDOW_3D_BOTTOM    0x08
 126      =1  #define WINDOW_3D_TOP     0x00
 127      =1  #define WINDOW_TRANS_ENABLE 0x80
 128      =1  
 129      =1  #define WINBDCOLOR_ENABLE 0x80
 130      =1  #define WINBDCOLOR_EXTENT 0x80
 131      =1  
 132      =1  
 133      =1  #define WINBLENDING_DISABLE 0x00
 134      =1  #define WINBLENDING_BACK    0x10
 135      =1  #define WINBLENDING_FORE    0x20
 136      =1  #define WINBLENDING_ALL     0x30
 137      =1  
 138      =1  #define WINSHADOW_ENABLE  0x80
 139      =1  // 0xc8*WindowNo
 140      =1  #define WIN_MULTICOLOR_ENABLE 0x20
 141      =1  #define WIN_CH_EFFECT_ENABLE  0x10
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 52  

 142      =1  #define WIN_CH_EFFECT_SHADOW  0x08
 143      =1  
 144      =1  
 145      =1  
 146      =1  ///////// TW8804C /////////////
 147      =1  // Window Number
 148      =1  #define WINNUM1       1
 149      =1  #define WINNUM2       2
 150      =1  #define WINNUM3       3
 151      =1  #define WINNUM4       4
 152      =1  
 153      =1  // Index 0x9f Defination
 154      =1  #define WIN_BG_COLOR_EX   0x80
 155      =1  #define WIN_BG_COLOR_EX0  0x00
 156      =1  #define WIN_3D_TYPE     0x08
 157      =1  #define WIN_3D_TYPE0    0x00
 158      =1  #define WIN_3D_EN     0x04
 159      =1  #define WIN_3D_EN0      0x00
 160      =1  #define WIN_3D_LEVEL    0x02
 161      =1  #define WIN_EN        0x01
 162      =1  #define WIN_EN0       0x00
 163      =1  
 164      =1  // Index 0xa5 Defination
 165      =1  #define WIN_BD_EN     0x80
 166      =1  #define WIN_BD_EN0      0x00
 167      =1  #define WIN_BD_WIDTH(a)   a
 168      =1  
 169      =1  // Index 0xa6 Defination
 170      =1  #define WIN_BD_COLOR_EX   0x80
 171      =1  #define WIN_BD_COLOR_EX0  0x00
 172      =1  #define WIN_H_BD_W(a)   a
 173      =1  
 174      =1  // Index 0xa7 Defination
 175      =1  #define WIN_V_BD_W(a)   a
 176      =1  
 177      =1  // Index 0xa8
 178      =1  #define WIN_CH_VSPACE(a)  (a<<4)
 179      =1  #define WIN_CH_HSPACE(a)  a
 180      =1  
 181      =1  // Index 0xa9 Defination
 182      =1  #define WIN_VZOOM(a)    (a-1)
 183      =1  #define WIN_HZOOM(a)    (a-1)
 184      =1  #define WIN_SADDR(a)    a
 185      =1  
 186      =1  // Index 0xab
 187      =1  #define WIN_SHADOW_EN   0x80
 188      =1  #define WIN_SHADOW_EN0    0x00
 189      =1  #define WIN_SHADOW_W(a)   a
 190      =1  
 191      =1  // ad
 192      =1  #define WIN_SHADOW_COLOR_EX   0x80
 193      =1  #define WIN_SHADOW_COLOR_EX0  0x00
 194      =1  #define WIN_MULTI_EN      0x40
 195      =1  #define WIN_MULTI_EN0     0x00
 196      =1  #define WIN_V_EXT_EN      0x20
 197      =1  #define WIN_V_EXT_EN0     0x00
 198      =1  #define WIN_CH_BDSH_SEL(a)    a
 199      =1  #define SEL_BORDER        0
 200      =1  #define SEL_SHADOW        1
 201      =1  #define WIN_CH_BDSH_COLOR_EX  0x08
 202      =1  #define WIN_CH_BDSH_COLOR_EX0 0x00
 203      =1  
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 53  

 204      =1  #define OSD_Win_Num(a)      0x9e, a-1
 205      =1  #define OSD_Win_Start_Addr    0xa0
 206      =1  #define OSD_Win_Attr(a)       a
 207      =1  #define OSD_Win_Start(h,v)       (BYTE)(((WORD)h>>8) | (((WORD)v>>8)<<4)),(BYTE)h, (BYTE)v
 208      =1  #define OSD_Win_Width(a)      a
 209      =1  #define OSD_Win_Height(a)     a
 210      =1  #define OSD_Win_Border(a)     a
 211      =1  #define OSD_Win_HBorder(a)      a
 212      =1  #define OSD_Win_VBorder(a)      a
 213      =1  #define OSD_Win_CH_Space(a)     a
 214      =1  #define OSD_Win_ZM_SAddr(h,v,a)   ((h<<6)|(v<<4)|(a>>8)), (BYTE)a
 215      =1  #define OSD_Win_Shadow(a)     a
 216      =1  #define OSD_Win_Blending(a)     a
 217      =1  #define OSD_Win_CH_BorderShadow(a)  a
 218      =1  
 219      =1  
 220      =1  #define SetOSDWindowNum(winno)    WriteTW88(TW88_WINNUM, winno-1)
 221      =1  
 222      =1  //#define  OSD_Window_Attr(Trans_en,Color,3D_Type,3D_en,W_en)       (((( Trans_en | Color ) | 3D_Type) | 3
             -D_en) | W_en)
 223      =1  #define  OSD_Window_Attr(a,b,c,d,e)                 (((( a | b ) | c) | d) | e)
 224      =1  #define  OSD_WShadow_Attr(W_Shadow_en,Color,Width)          W_Shadow_en | Color | Width
 225      =1  //#define  OSD_Blending(en,level)                   en | (level & 0x0f)
 226      =1  //#define  OSD_Ch_Effect(Multi, Effect_En, ShadowBorder, Color)   Multi | Effect_En | ShadowBorder | Color 
             - 
 227      =1  
 228      =1  
 229      =1  struct OSDStrInfo 
 230      =1  {
 231      =1    BYTE  cnt;
 232      =1    WORD  addr;
 233      =1    BYTE  attr;
 234      =1    DWORD str;
 235      =1  };
 236      =1  /*
 237      =1  struct BarInfo {
 238      =1    struct RegisterInfo BarCnt;
 239      =1    BYTE  winno;
 240      =1    BYTE  xoff;
 241      =1    BYTE  yoff;
 242      =1    BYTE  color;
 243      =1    int   bar_cnt;
 244      =1  };
 245      =1  */
 246      =1  struct FontData {
 247      =1    BYTE  font[27];
 248      =1  } ;
 249      =1  
 250      =1  //====================================================================
 251      =1  //  Internal OSD Function
 252      =1  void CopyCharToOSDRAM_TW88(BYTE Addr, BYTE attr, BYTE ch);
 253      =1  void CopyUDCharToOSDRAM_TW88(BYTE Addr, BYTE attr, BYTE ch);
 254      =1  //BYTE GetOSDWindowWidth_TW88(BYTE winno);
 255      =1  WORD GetOSDWindowSA_TW88(BYTE winno);
 256      =1  void SetOSDWindowX_TW88(BYTE winno, BYTE x);
 257      =1  void SetOSDWindowY_TW88(BYTE winno, BYTE y);
 258      =1  void SetOSDWindowWidth_TW88(BYTE winno, BYTE w);
 259      =1  void SetOSDWindowSA_TW88(BYTE winno, WORD sa);
 260      =1  
 261      =1  void SetOSDItalicsAndUnderline(BYTE italics, BYTE underline);
 262      =1  
 263      =1  void SetOSDHBorderWidth_TW88(BYTE winno, BYTE w);
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 54  

 264      =1  //BYTE GetOSDWindowColor_TW88(BYTE winno);
 265      =1  void SetOSDWindowColor_TW88(BYTE CCWin, BYTE color);
 266      =1  void EnableOSDRAMAndChangeFont(BYTE type);
 267      =1  void WriteCharToOSDRAM(WORD addr, BYTE ch, BYTE attr);
 268      =1  
 269      =1  
 270      =1  void ShowOSDWindowAll(BYTE on);
 271      =1  void ShowOSDWindow_TW88(BYTE winno, BYTE onoff);
 272      =1  void ClearOSD_TW88(void);
 273      =1  //void CreateOSDWindow_TW88(BYTE winno, BYTE x, BYTE y, BYTE w, BYTE h, WORD sa, BYTE attr);
 274      =1  /*not yet!!
 275      =1  //ljy012304...CC_ADJUST_POS
 276      =1  void SetOSDWindowXS_TW88(BYTE winno, BYTE xs);
 277      =1  void SetOSDWindowYS_TW88(BYTE winno, BYTE ys);
 278      =1  */
 279      =1  
 280      =1  //====================================================================
 281      =1  //  OSDMenu Functions
 282      =1  
 283      =1  //--------------------------------------------------------------------
 284      =1  //  Functions used in only Menu
 285      =1  #define   CONVERT_CODE      0x80
 286      =1  
 287      =1  void InitOSDWindow(BYTE *ptr);
 288      =1  
 289      =1  WORD GetOSDWindowX(BYTE winno);
 290      =1  WORD GetOSDWindowY(BYTE winno);
 291      =1  BYTE CreateOSDWindowOutline(BYTE winno, BYTE w, BYTE color);
 292      =1  void CreateOSDMenuWindow(BYTE, BYTE, BYTE, BYTE, BYTE, BYTE, BYTE);
 293      =1  void ClearOSDLine(BYTE winno, BYTE sx, BYTE sy, BYTE cnt, BYTE attr);
 294      =1  void WriteStringToAddr(WORD addr, BYTE *str, BYTE cnt);
 295      =1  void DrawAttrString(WORD addr, BYTE *str, BYTE cnt);
 296      =1  void DrawAttrCnt(WORD addr, BYTE color, BYTE cnt);
 297      =1  void ClearDataCnt(WORD, BYTE);
 298      =1  #define   SetOSDWindowX(A, B)       SetOSDWindowX_TW88(A, B)
 299      =1  #define   SetOSDWindowY(A, B)       SetOSDWindowY_TW88(A, B)
 300      =1  
 301      =1  //--------------------------------------------------------------------
 302      =1  //  Functions used in Menu and others
 303      =1  #define   ShowOSDWindow(A, B)       ShowOSDWindow_TW88(A, B)
 304      =1  #define   ClearOSD()              ClearOSD_TW88()
 305      =1  
 306      =1  //================================================================
 307      =1  //  Font
 308      =1  void DownloadUDFont(void);
 309      =1  #ifdef Hs_debug
 310      =1  void DisplayROMFont(BYTE);
 311      =1  void DisplayRAMFont(BYTE);
 312      =1  #endif
 313      =1  void DownloadFont(BYTE cod, CODE_P BYTE *fontdata);
 314      =1  //void DisplayGrid( void );
 315      =1  //void DisplayCone( void );
 316      =1  //void DisplayJapanese( void );
 317      =1  void TestRAMFont( void );
 318      =1  #ifdef BANKING
           =1 void DisplayMGrid( BYTE );
           =1 void DisplayMessage( void );
           =1 void DisplayChinese( void );
           =1 void DisplayJapanese( void );
           =1 void DisplayKorean( void );
           =1 void DisplayGridBank0( BYTE n );
           =1 void DisplayGridBank1( BYTE n );
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 55  

           =1 #endif
 327      =1  
 328      =1  //================================================================
 329      =1  //  OSD COLOR
 330      =1  void Change_OSDColorLookup(void);
 331      =1  void Reset_OSDColorLookup(void);
 332      =1  
 333      =1  //====================================================================
 334      =1  //        Conversion
 335      =1  //====================================================================
 336      =1  BYTE utoa(WORD value, BYTE *str, BYTE radix);
 337      =1  BYTE ltoa_K(long value, BYTE *str, BYTE);
 338      =1  BYTE strlen( BYTE *str );
 339      =1  
 340      =1  #define CStrlen(A)        strlen(A)
 341      =1  
 342      =1  void WaitEndofDisplayArea(void);
 343      =1  
 344      =1  #endif  // __OSD_BASIC__
 345      =1  
  24          #include "HS_keyremo.h"
   1      =1  #ifndef _HS_keyremo_
   2      =1  #define _HS_keyremo_
   3      =1  
   4      =1  //
   5      =1  // KeyRemo.h
   6      =1  // Default function for Key Input and Remocon Input
   7      =1  //
   8      =1  //=============================================================================
   9      =1  //                        Operation Key Mapping
  10      =1  //=============================================================================
  11      =1  
  12      =1  
  13      =1  
  14      =1  #define  SelectMode 0
  15      =1  #define  JumpMode 1
  16      =1  
  17      =1  #define COMPOSITE1          1
  18      =1  #define COMPOSITE2          2
  19      =1  #define COMPOSITE3          3
  20      =1  #define COMPOSITE4          4
  21      =1  
  22      =1  
  23      =1  #ifndef QUAD
  24      =1  
  25      =1  #define COMPOSITE1          1
  26      =1  #define COMPOSITE2          2
  27      =1  #define COMPOSITE3          3
  28      =1  #define COMPOSITE4          4
  29      =1  
  30      =1  #ifdef AWT_ML072S
  31      =1  #define SOURCE_A      1     
  32      =1  #define SOURCE_R            2   
  33      =1  #define SOURCE_AV           3
  34      =1  #define SOURCE_B            4 
  35      =1  #else
           =1 #define SOURCE_A      1   
           =1 #define SOURCE_B            2   
           =1 #define SOURCE_R            3   
           =1 #define SOURCE_AV           4
           =1 #endif
  41      =1  
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 56  

  42      =1  void CheckSourceMode(BYTE sorce);
  43      =1  #endif
  44      =1  
  45      =1  
  46      =1  
  47      =1  extern BYTE NowModeState;
  48      =1  extern BYTE TriggerFlag;
  49      =1  extern bit  ParkFlag;
  50      =1  extern BYTE  Attr_A,Attr_B,Attr_C,Attr_R; 
  51      =1  extern BYTE TimeStep;
  52      =1  extern BYTE SEQFlag;
  53      =1  extern BYTE SEQIndex;
  54      =1  extern BYTE TriggerMode;
  55      =1  extern bit AVFlag;
  56      =1  extern bit VGAAudio;
  57      =1  
  58      =1  
  59      =1  
  60      =1  //BYTE TW2835Command(char,char,char,char,char);
  61      =1  void SetSourceMode(BYTE Index,char ,char ,char ,char );
  62      =1  void SetJumpSource(BYTE Index,char ,char ,char ,char );  //Pinchi 20150825 add
  63      =1  void SetSelectMode(void);
  64      =1  //void PriorityOffSelectMode(void);
  65      =1  void SetJumpMode(void);
  66      =1  void SetNowMode(void);
  67      =1  void SetRearSource(void);
  68      =1  void SetLeftSource(void);
  69      =1  void SetRightSource(void);
  70      =1  void CheckMirror(void);
  71      =1  BYTE CheckTrigger(void);
  72      =1  void TriggerHandler(BYTE T_Flag);
  73      =1  void SEQMode(void);
  74      =1  
  75      =1  void SelectBoxHandler(void);
  76      =1  
  77      =1  extern void CheckNewTriggerFunc(void);
  78      =1  
  79      =1  #endif
  25          #include "HS_DisplayOSD.h"
   1      =1  #ifndef _HS_DisplayOSD_
   2      =1  #define _HS_DisplayOSD_
   3      =1  
   4      =1  
   5      =1  enum DisplayInformation
   6      =1  {
   7      =1    InfoOSDMENULOCKED,
   8      =1    InfoOSDMENUATCIVE,
   9      =1  #ifdef SUPPORT_SDCARD  //Pinchi 20150319 add
           =1   InfoFORMATSDCARD,
           =1   InfoFORMATSUCCESS,
           =1   InfoFORMATFAIL,
           =1   InfoRECORDERROR,
           =1   InfoPASSWORDERROR,
           =1   InfoFWUpdate,
           =1   InfoFWUpdateSUCCESS,
           =1   InfoFWUpdateFAIL,
           =1   InfoSDCARDReset,
           =1   InfoSDCARDNotReady,
           =1   InfoUpdateConfigStart,
           =1   InfoUpdateConfigFail,
           =1   InfoUpdateConfigSuccess,
           =1 #endif
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 57  

  24      =1    InfoAutoDayNight_Auto,
  25      =1    InfoAutoDayNight_Day,
  26      =1    InfoAutoDayNight_Night,
  27      =1    InfoPLZRESETSYSTEM,
  28      =1  #ifdef AWT_NO_SIGNAL_MSG  //Pinchi 20150319 add for to display "NO VIDEO SIGNAL" by AWT request of 2015030
             -2
  29      =1    InfoNoVideoSignal,
  30      =1  #endif
  31      =1  
  32      =1  };
  33      =1  
  34      =1  //#define   InfoUpdateConfigStart 0x01
  35      =1  //#define   InfoUpdateConfigFail    0x02
  36      =1  //#define   InfoUpdateConfigSuccess 0x03
  37      =1  
  38      =1  #define   NORMAL_Record   0x01
  39      =1  #define   Manual_Record 0x02
  40      =1  #define   ALARM_Record  0x04
  41      =1  #define   GPS       0x08
  42      =1  #define   G_Sensor    0x10
  43      =1  #define   WIFI      0x20 
  44      =1  #define   WIFI_Signal   0x40
  45      =1  #define   OverWrite_Record  0x80
  46      =1  
  47      =1  void DisplayGaugeOSD(void);
  48      =1  void ClearGAUGEINFO(void);
  49      =1  void DisplaylockOSD(void); 
  50      =1  void DisplayactvOSD(void); 
  51      =1  void DisplayNumber(BYTE addr,WORD val,BYTE type);
  52      =1  //#ifdef SUPPORT_SDCARD
  53      =1  void DisplayDVRStatus(void);
  54      =1  void DisplayFormatOSD(void);
  55      =1  void DisplayFormatOkOSD(void);
  56      =1  void DisplayFormatFailOSD(void);
  57      =1  void DisplayFWUpDate(void);
  58      =1  void DisplayFWUpDateOK(void);
  59      =1  void DisplayFWUpDateFail(void);
  60      =1  void DisplayFWVersion(void) ;
  61      =1  void DisplayDVRnotReady(void);
  62      =1  void DisplayInformation(BYTE info);
  63      =1  //#endif    //#ifdef SUPPORT_SDCARD
  64      =1  
  65      =1  #if 0 //def AWT_NO_SIGNAL_MSG  //Pinchi 20150319 add for to display "NO VIDEO SIGNAL" by AWT request of 20
             -150302
           =1 void AWT_Display_NoVideoSignal(BYTE bOnOff);
           =1 #endif
  68      =1  
  69      =1  #endif
  70      =1  
  26          #include "HS_DVRProtocol.h"
   1      =1  
   2      =1  #ifndef _HS_DVRProtocol_
   3      =1  #define _HS_DVRProtocol_
   4      =1  
   5      =1  //==================================================
   6      =1  //
   7      =1  //==================================================
   8      =1  
   9      =1  #define bSetDVRParam  0x0001
  10      =1  #define bSetDVRDefault  0x0002
  11      =1  #define bSetDATETIME  0x0004
  12      =1  #define bGetDVRParam  0x0008
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 58  

  13      =1  #define bGetDVRStatus 0x0010
  14      =1  #define bGetDATETIME  0x0020
  15      =1  #define bBOOKMARK   0x0040
  16      =1  #define bSetSystem    0x0080
  17      =1  #define bHalt_Start   0x0100
  18      =1  #define bSetFormatSD    0x0200  
  19      =1  #define bGetDVRVersion  0x0400  
  20      =1  #define bFW_Update_Start 0x0800
  21      =1  #define bUpdate_CONFIG  0x1000
  22      =1  #define bDoorClose    0x2000
  23      =1  #define bDoorOpen     0x4000
  24      =1  
  25      =1  
  26      =1  enum HS_DvrCommand
  27      =1  {
  28      =1    CMD_NULL,
  29      =1    SetDVRParam,  // 1
  30      =1    SetDVRDefault,
  31      =1    SetDATETIME,
  32      =1    GetDVRParam,
  33      =1    GetDVRStatus,
  34      =1    GetDATETIME, 
  35      =1    SetFormatSD, 
  36      =1    SendAlarm, 
  37      =1    GetDVRVersion=0x09, 
  38      =1    SendDVRStatus=0x14,
  39      =1    GetLCDMode=0x15,
  40      =1    SendDVRParam=0x16,
  41      =1    SendDVRParamDT=0x17,
  42      =1    SetFormatSDDone=0x18,
  43      =1    GetInformation=0x19,
  44      =1    SetSystem=0x1a,
  45      =1    GPSReset=0x1b,
  46      =1    Halt_Start=0xc8,
  47      =1    Halt_OK=0xc9,
  48      =1    FW_Update_Start=0xca,
  49      =1    FW_Update_OK=0xcb,
  50      =1    MANUALRECSTART=0xdc,
  51      =1    MANUALRECSTOP=0xdd,
  52      =1    SNAPSHOT=0xde,
  53      =1    BOOKMARK=0xdf,
  54      =1    Update_CONFIG=0xe0,
  55      =1    Update_CONFIG_OK=0xe1,
  56      =1    DoorOpen=0xe2,
  57      =1    DoorClose=0xe3,
  58      =1    CMD_UNKNOWN=0xff,
  59      =1    CMD_NUM
  60      =1  };
  61      =1  
  62      =1  //RS485 TX or RX define
  63      =1  enum
  64      =1  {
  65      =1    RS485_TX,   //RS485 Transmit  
  66      =1    RS485_RX    //Rs485 Receive
  67      =1  };
  68      =1  
  69      =1  enum
  70      =1  {
  71      =1    Baud_rate2400,    
  72      =1    Baud_rate4800,  
  73      =1    Baud_rate9600
  74      =1  };
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 59  

  75      =1  
  76      =1  
  77      =1  //Camera Command ID define
  78      =1  enum
  79      =1  {
  80      =1  //  CAM_CLEAR,        //Clear 
  81      =1    CAM_ZOOM_OUT_START,     //Zoom Out  Start
  82      =1  //  CAM_ZOOM_OUT_END,     //Zoom Out  End
  83      =1    CAM_ZOOM_IN_START,      //Zoom In Start
  84      =1  //  CAM_ZOOM_IN_END,      //Zoom In End
  85      =1  //  CAM_IRIS_CLOSE_START,   //IRIS Close Start
  86      =1  //  CAM_IRIS_CLOSE_END,   //IRIS Close End
  87      =1  //  CAM_IRIS_OPEN_START,      //IRIS Open Start
  88      =1  //  CAM_IRIS_OPEN_END,      //IRIS Open End
  89      =1  //  CAM_FOCUS_FAR_START,    //Focus Far Start
  90      =1  //  CAM_FOCUS_FAR_END,    //Focus Far End
  91      =1  //  CAM_FOCUS_NEAR_START,   //Focus Near Start
  92      =1  //  CAM_FOCUS_NEAR_END,   //Focus Near End
  93      =1    CAM_SET,        //Set 
  94      =1    CAM_CALL,       //Call 
  95      =1  //  CAM_FOCUS_SPEED,    //Focus Speed
  96      =1  //  CAM_ZOOM_SPEED,   //Zoom Speed
  97      =1    CAM_PTZ_RIGHT,      //PTZ Right 
  98      =1    CAM_PTZ_LEFT,     //PTZ Left
  99      =1    CAM_PTZ_UP,     //PTZ Up
 100      =1    CAM_PTZ_DOWN,     //PTZ Down
 101      =1    CAM_MENU_ENTER,     //PTZ Down
 102      =1    CAM_Iris_Open,
 103      =1  
 104      =1  //  CAM_PTZ_RIGHT_UP,   //PTZ Right with Up
 105      =1  //  CAM_PTZ_RIGHT_DOWN, //PTZ Right with Down
 106      =1  //  CAM_PTZ_LEFT_UP,    //PTZ Left with Up
 107      =1  //  CAM_PTZ_LEFT_DOWN,  //PTZ Left with Down
 108      =1    CAM_PTZ_STOP      //PTZ Control Stop
 109      =1  };
 110      =1  
 111      =1  void Hs_DvrTxCmdPaser(BYTE Cmd_Id );
 112      =1  void Hs_Protocol_Init(void);
 113      =1  BYTE DvrReceivePaser(void);
 114      =1  void DVRCommandReSend(void);
 115      =1  
 116      =1  #if 0
           =1 BYTE TW2835ReceivePaser(void);
           =1 #endif
 119      =1  extern bit   DVR_Ready;
 120      =1  void CAM_TxCommand_toRS485(BYTE Com_ID);
 121      =1  void Send_PelcoP_Command(void);
 122      =1  void Send_PelcoD_Command(void);
 123      =1  void Send_GE_Command(void);
 124      =1  
 125      =1  #endif
 126      =1  
  27          #include "HS_IOdef.h"
   1      =1  #ifndef _HS_IOdef_
   2      =1  #define _HS_IOdef_
   3      =1  
   4      =1  
   5      =1  #include "Reg.h"
   1      =2  //
   2      =2  //Registers.h : Register declaration
   3      =2  //
   4      =2  
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 60  

   5      =2  #ifndef __REGISTERS__
           =2 #define __REGISTERS__
           =2 
           =2 #ifdef INTERNAL_MCU
           =2 /*  BYTE Registers  */
           =2 sfr P0    = 0x80;
           =2 sfr P1    = 0x90;
           =2 sfr P2    = 0xA0;
           =2 sfr P3    = 0xB0;
           =2 sfr PSW   = 0xD0;
           =2 sfr ACC   = 0xE0;
           =2 sfr B     = 0xF0;
           =2 sfr SP    = 0x81;
           =2 sfr DPL   = 0x82;
           =2 sfr DPH   = 0x83;
           =2 sfr PCON  = 0x87;
           =2 sfr TCON  = 0x88;
           =2 sfr TMOD  = 0x89;
           =2 sfr TL0   = 0x8A;
           =2 sfr TL1   = 0x8B;
           =2 sfr TH0   = 0x8C;
           =2 sfr TH1   = 0x8D;
           =2 sfr IE    = 0xA8;
           =2 sfr IP    = 0xB8;
           =2 sfr SCON  = 0x98;
           =2 sfr SBUF  = 0x99;
           =2 
           =2 //sfr P4    = 0xd8;
           =2 
           =2 /*  8052 Extensions  */
           =2 sfr EXIF  = 0x91;   // external interrupt 2,3,4,5 flags should be cleared by software
           =2 sfr T2CON = 0xC8;
           =2 sfr RCAP2L = 0xCA;
           =2 sfr RCAP2H = 0xCB;
           =2 sfr TL2   = 0xCC;
           =2 sfr TH2   = 0xCD;
           =2 sfr EICON = 0xD8;
           =2 sfr EIE   = 0xE8;
           =2 sfr EIP   = 0xF8;
           =2 
           =2 /*  TW88 Core Extension */
           =2 sfr BANKREG   = 0x9A;
           =2 sfr SPICONTROL  = 0x9B;
           =2 sfr T0HIGH    = 0x9C;
           =2 sfr T0LOW     = 0x9D;
           =2 sfr T1HIGH    = 0x9E;
           =2 sfr T1LOW     = 0x9F;
           =2 sfr T2HIGH    = 0x93;
           =2 sfr T2LOW     = 0x94;
           =2 
           =2 /*  BIT Registers  */
           =2 /*  PSW  */
           =2 sbit CY    = 0xD7;
           =2 sbit AC    = 0xD6;
           =2 sbit F0    = 0xD5;
           =2 sbit RS1   = 0xD4;
           =2 sbit RS0   = 0xD3;
           =2 sbit OV    = 0xD2;
           =2 sbit P     = 0xD0;
           =2 
           =2 /*  TCON  */
           =2 sbit TF1   = 0x8F;
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 61  

           =2 sbit TR1   = 0x8E;
           =2 sbit TF0   = 0x8D;
           =2 sbit TR0   = 0x8C;
           =2 sbit IE1   = 0x8B;
           =2 sbit IT1   = 0x8A;
           =2 sbit IE0   = 0x89;
           =2 sbit IT0   = 0x88;
           =2 
           =2 /*  IE  */
           =2 sbit EA    = 0xAF;
           =2 sbit ES    = 0xAC;
           =2 sbit ET1   = 0xAB;
           =2 sbit EX1   = 0xAA;
           =2 sbit ET0   = 0xA9;
           =2 sbit EX0   = 0xA8;
           =2 
           =2 /*  EIE  */
           =2 sbit EWDI  = 0xEC;    // Watch dog timer interrupt enable
           =2 sbit EX5   = 0xEB;    // external interrupt 5 enable
           =2 sbit EX4   = 0xEA;    // external interrupt 4 enable
           =2 sbit EX3   = 0xE9;    // external interrupt 3 enable
           =2 sbit EX2   = 0xE8;    // external interrupt 2 enable
           =2 
           =2 /*  IP  */
           =2 sbit PS    = 0xBC;
           =2 sbit PT1   = 0xBB;
           =2 sbit PX1   = 0xBA;
           =2 sbit PT0   = 0xB9;
           =2 sbit PX0   = 0xB8;
           =2 
           =2 /*  EIP  */
           =2 sbit PWDI  = 0xFC;    // Watch dog timer interrupt priority
           =2 sbit PX5   = 0xFB;    // external interrupt5 priority
           =2 sbit PX4   = 0xFA;    // external interrupt4 priority
           =2 sbit PX3   = 0xF9;    // external interrupt3 priority
           =2 sbit PX2   = 0xF8;    // external interrupt2 priority
           =2 
           =2 /*  P3  */
           =2 sbit RD    = 0xB7;
           =2 sbit WR    = 0xB6;
           =2 sbit T1    = 0xB5;
           =2 sbit T0    = 0xB4;
           =2 sbit INT1  = 0xB3;
           =2 sbit INT0  = 0xB2;
           =2 sbit TXD   = 0xB1;
           =2 sbit RXD   = 0xB0;
           =2 
           =2 /*  SCON  */
           =2 sbit SM0   = 0x9F;
           =2 sbit SM1   = 0x9E;
           =2 sbit SM2   = 0x9D;
           =2 sbit REN   = 0x9C;
           =2 sbit TB8   = 0x9B;
           =2 sbit RB8   = 0x9A;
           =2 sbit TI    = 0x99;
           =2 sbit RI    = 0x98;
           =2 
           =2 /*  8052 Extensions  */
           =2 /*  IE  */
           =2 sbit ET2   = 0xAD;
           =2 
           =2 /*  IP  */
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 62  

           =2 sbit PT2   = 0xBD;
           =2 
           =2 /*  P1  */
           =2 sbit T2EX  = 0x91;
           =2 sbit T2    = 0x90;
           =2              
           =2 /*  T2CON  */
           =2 sbit TF2   = 0xCF;
           =2 sbit EXF2  = 0xCE;
           =2 sbit RCLK  = 0xCD;
           =2 sbit TCLK  = 0xCC;
           =2 sbit EXEN2 = 0xCB;
           =2 sbit TR2   = 0xCA;
           =2 sbit C_T2  = 0xC9;
           =2 sbit CP_RL2= 0xC8;
           =2 
           =2 sfr CHPENR = 0xF6;
           =2 sfr CHPCON = 0xBF;
           =2 sfr SFRAL  = 0xC4;
           =2 sfr SFRAH  = 0xC5;
           =2 sfr SFRFD  = 0xC6;
           =2 sfr SFRCN  = 0xC7;
           =2 
           =2 sbit P0_0  = 0x80;
           =2 sbit P0_1  = 0x81;
           =2 sbit P0_2  = 0x82;
           =2 sbit P0_3  = 0x83;
           =2 sbit P0_4  = 0x84;
           =2 sbit P0_5  = 0x85;
           =2 sbit P0_6  = 0x86;
           =2 sbit P0_7  = 0x87;
           =2 
           =2 sbit P1_0  = 0x90;
           =2 sbit P1_1  = 0x91;
           =2 sbit P1_2  = 0x92;
           =2 sbit P1_3  = 0x93;
           =2 sbit P1_4  = 0x94;
           =2 sbit P1_5  = 0x95;
           =2 sbit P1_6  = 0x96;
           =2 sbit P1_7  = 0x97;
           =2 
           =2 sbit P2_0  = 0xa0;
           =2 sbit P2_1  = 0xa1;
           =2 sbit P2_2  = 0xa2;
           =2 sbit P2_3  = 0xa3;
           =2 sbit P2_4  = 0xa4;
           =2 sbit P2_5  = 0xa5;
           =2 sbit P2_6  = 0xa6;
           =2 sbit P2_7  = 0xa7;
           =2 
           =2 sbit P3_0  = 0xb0;
           =2 sbit P3_1  = 0xb1;
           =2 sbit P3_2  = 0xb2;
           =2 sbit P3_3  = 0xb3;
           =2 sbit P3_4  = 0xb4;
           =2 sbit P3_5  = 0xb5;
           =2 sbit P3_6  = 0xb6;
           =2 sbit P3_7  = 0xb7;
           =2 
           =2 #else // external MCU=WINBOND
           =2 /*  BYTE Registers  */
           =2 sfr P0    = 0x80;
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 63  

           =2 sfr P1    = 0x90;
           =2 sfr P2    = 0xA0;
           =2 sfr P3    = 0xB0;
           =2 sfr PSW   = 0xD0;
           =2 sfr ACC   = 0xE0;
           =2 sfr B     = 0xF0;
           =2 sfr SP    = 0x81;
           =2 sfr DPL   = 0x82;
           =2 sfr DPH   = 0x83;
           =2 sfr PCON  = 0x87;
           =2 sfr TCON  = 0x88;
           =2 sfr TMOD  = 0x89;
           =2 sfr TL0   = 0x8A;
           =2 sfr TL1   = 0x8B;
           =2 sfr TH0   = 0x8C;
           =2 sfr TH1   = 0x8D;
           =2 sfr CKCON = 0x8E;   //clock control register, default =0x01
           =2 sfr IE    = 0xA8;
           =2 sfr IP    = 0xB8;
           =2 sfr SCON  = 0x98;
           =2 sfr SBUF  = 0x99;
           =2 sfr P4 = 0xE8; //Megawin Ryan@970716
           =2 //sfr P4    = 0xa5;      //SST MCU
           =2 //sfr P4    = 0xd8;   //winbond<960820>
           =2 
           =2 /*  8052 Extensions  */
           =2 sfr ADCTL = 0xC5;   //william-20111017
           =2 sfr ADCV = 0xC6;    //william-20111017
           =2 sfr ADCVL = 0xE8;   //william-20111017
           =2 sfr T2CON = 0xC8;
           =2 sfr RCAP2L = 0xCA;
           =2 sfr RCAP2H = 0xCB;
           =2 sfr TL2   = 0xCC;
           =2 sfr TH2   = 0xCD;
           =2 
           =2 // for UART2
           =2 sfr S2CON  = 0xAA;
           =2 sfr S2BRT  = 0xBA;
           =2 sfr S2BUF  = 0x9A;
           =2 sfr AUXR2  = 0xA6;
           =2 sfr AUXIE  = 0xAD;
           =2 
           =2 sfr P1M0  = 0x91;
           =2 sfr P1M1  = 0x92;
           =2 sfr P0M0  = 0x93;
           =2 sfr P0M1  = 0x94;
           =2 sfr P2M0  = 0x95;
           =2 sfr P2M1  = 0x96;
           =2 sfr P3M0  = 0xB1;
           =2 sfr P3M1  = 0xB2;
           =2 
           =2 // for PCA
           =2 sfr CCON   = 0xD8;
           =2 sfr CMOD   = 0xD9;
           =2 sfr CCAPM0 = 0xDA;
           =2 sfr CCAPM1 = 0xDB;
           =2 sfr CCAPM2 = 0xDC;
           =2 sfr CCAPM3 = 0xDD;
           =2 sfr CCAPM4 = 0xDE;
           =2 sfr CCAPM5 = 0xDF;
           =2 sfr CL     = 0xE9;
           =2 sfr CH     = 0xF9;
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 64  

           =2 sfr CCAP0L = 0xEA;
           =2 sfr CCAP0H = 0xFA;
           =2 sfr CCAP1L = 0xEB;
           =2 sfr CCAP1H = 0xFB;
           =2 sfr CCAP2L = 0xEC;
           =2 sfr CCAP2H = 0xFC;
           =2 sfr CCAP3L = 0xED;
           =2 sfr CCAP3H = 0xFD;
           =2 sfr CCAP4L = 0xEE;
           =2 sfr CCAP4H = 0xFE;
           =2 sfr CCAP5L = 0xEF;
           =2 sfr CCAP5H = 0xFF;
           =2 sfr PCAPWM0= 0xF2;
           =2 sfr PCAPWM1= 0xF3;
           =2 sfr PCAPWM2= 0xF4;
           =2 sfr PCAPWM3= 0xF5;
           =2 sfr PCAPWM4= 0xF6;
           =2 sfr PCAPWM5= 0xF7;
           =2 
           =2 /*  BIT Registers  */
           =2 /*  PSW  */
           =2 sbit CY    = 0xD7;
           =2 sbit AC    = 0xD6;
           =2 sbit F0    = 0xD5;
           =2 sbit RS1   = 0xD4;
           =2 sbit RS0   = 0xD3;
           =2 sbit OV    = 0xD2;
           =2 sbit P     = 0xD0;
           =2 
           =2 /*  TCON  */
           =2 sbit TF1   = 0x8F;
           =2 sbit TR1   = 0x8E;
           =2 sbit TF0   = 0x8D;
           =2 sbit TR0   = 0x8C;
           =2 sbit IE1   = 0x8B;
           =2 sbit IT1   = 0x8A;
           =2 sbit IE0   = 0x89;
           =2 sbit IT0   = 0x88;
           =2 
           =2 /*  IE  */
           =2 sbit EA    = 0xAF;
           =2 sbit ES    = 0xAC;
           =2 sbit ET1   = 0xAB;
           =2 sbit EX1   = 0xAA;
           =2 sbit ET0   = 0xA9;
           =2 sbit EX0   = 0xA8;
           =2 
           =2 /*  IP  */
           =2 sbit PS    = 0xBC;
           =2 sbit PT1   = 0xBB;
           =2 sbit PX1   = 0xBA;
           =2 sbit PT0   = 0xB9;
           =2 sbit PX0   = 0xB8;
           =2 
           =2 /*  P3  */
           =2 sbit RD    = 0xB7;
           =2 sbit WR    = 0xB6;
           =2 sbit T1    = 0xB5;
           =2 sbit T0    = 0xB4;
           =2 sbit INT1  = 0xB3;
           =2 sbit INT0  = 0xB2;
           =2 sbit TXD   = 0xB1;
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 65  

           =2 sbit RXD   = 0xB0;
           =2 
           =2 /*  SCON  */
           =2 sbit SM0   = 0x9F;
           =2 sbit SM1   = 0x9E;
           =2 sbit SM2   = 0x9D;
           =2 sbit REN   = 0x9C;
           =2 sbit TB8   = 0x9B;
           =2 sbit RB8   = 0x9A;
           =2 sbit TI    = 0x99;
           =2 sbit RI    = 0x98;
           =2 
           =2 /*  8052 Extensions  */
           =2 /*  IE  */
           =2 sbit ET2   = 0xAD;
           =2 
           =2 /*  IP  */
           =2 sbit PT2   = 0xBD;
           =2 
           =2 /*  P1  */
           =2 sbit T2EX  = 0x91;
           =2 sbit T2    = 0x90;
           =2              
           =2 /*  T2CON  */
           =2 sbit TF2   = 0xCF;
           =2 sbit EXF2  = 0xCE;
           =2 sbit RCLK  = 0xCD;
           =2 sbit TCLK  = 0xCC;
           =2 sbit EXEN2 = 0xCB;
           =2 sbit TR2   = 0xCA;
           =2 sbit C_T2  = 0xC9;
           =2 sbit CP_RL2= 0xC8;
           =2 
           =2 sfr CHPENR = 0xF6;
           =2 sfr CHPCON = 0xBF;
           =2 sfr SFRAL  = 0xC4;
           =2 sfr SFRAH  = 0xC5;
           =2 sfr SFRFD  = 0xC6;
           =2 sfr SFRCN  = 0xC7;
           =2 
           =2 sbit P0_0  = 0x80;
           =2 sbit P0_1  = 0x81;
           =2 sbit P0_2  = 0x82;
           =2 sbit P0_3  = 0x83;
           =2 sbit P0_4  = 0x84;
           =2 sbit P0_5  = 0x85;
           =2 sbit P0_6  = 0x86;
           =2 sbit P0_7  = 0x87;
           =2 
           =2 sbit P1_0  = 0x90;
           =2 sbit P1_1  = 0x91;
           =2 sbit P1_2  = 0x92;
           =2 sbit P1_3  = 0x93;
           =2 sbit P1_4  = 0x94;
           =2 sbit P1_5  = 0x95;
           =2 sbit P1_6  = 0x96;
           =2 sbit P1_7  = 0x97;
           =2 
           =2 sbit P2_0  = 0xa0;
           =2 sbit P2_1  = 0xa1;
           =2 sbit P2_2  = 0xa2;
           =2 sbit P2_3  = 0xa3;
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 66  

           =2 sbit P2_4  = 0xa4;
           =2 sbit P2_5  = 0xa5;
           =2 sbit P2_6  = 0xa6;
           =2 sbit P2_7  = 0xa7;
           =2 
           =2 sbit P3_0  = 0xb0;
           =2 sbit P3_1  = 0xb1;
           =2 sbit P3_2  = 0xb2;
           =2 sbit P3_3  = 0xb3;
           =2 sbit P3_4  = 0xb4;
           =2 sbit P3_5  = 0xb5;
           =2 sbit P3_6  = 0xb6;
           =2 sbit P3_7  = 0xb7;
           =2 
           =2 sbit P4_0  = P4^0;
           =2 sbit P4_1  = P4^1;
           =2 sbit INT3  = P4^2;
           =2 sbit INT2  = P4^3;
           =2 
           =2 sfr P4M0  = 0xB3;
           =2 sfr P4M1  = 0xB4;
           =2 #endif  // INTERNAL_MCU
           =2 
           =2 #endif  //__REGISTERS__
 401      =2  
   6      =1  
   7      =1  #ifdef AWT_ML072S
   8      =1    #ifdef HS
   9      =1  #define LEFT_T      P0_0
  10      =1  #define Right_T     P0_1
  11      =1    #else 
           =1 #define LEFT_T      P0_1
           =1 #define Right_T     P0_0
           =1   #endif
  15      =1  #else
           =1 #define LEFT_T      P0_0
           =1 #define Right_T     P0_1
           =1 #endif
  19      =1  #define REVERSE_T     P0_2
  20      =1  //#define VGA_T     P0_4
  21      =1  
  22      =1  #ifdef  AWT_ML072Q  //Pinchi 20140902 add for AWT ML072Q
           =1   #ifdef AWT_NEW_SLIM_MODEL  //Pinchi 20150203 add for AWT new slim model
           =1   #define AV_T      P0_3
           =1   #define CAMC_T    P0_4
           =1   #else
           =1   #define CAMC_T    P0_3
           =1   #endif
           =1 #else  //AWT_ML072S & HTRV
  30      =1  #define PARK_T      P0_3
  31      =1  #endif
  32      =1  
  33      =1  #ifdef USE_CAMD  //Pinchi 20150826 add
           =1 #define CAMD_T      P0_5
           =1 #endif
  36      =1  
  37      =1  #ifdef SUPPORT_SDCARD  //Pinchi 20150826 add 
           =1 #define SB_ADC      P1_6
           =1 #define ACC_B     P0_6
           =1 #define PPWR      P3_6
           =1 #define Door_Det    P1_7
           =1 #endif
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 67  

  43      =1  
  44      =1  #define Audio_Select1   P1_4
  45      =1  #define Audio_Select2   P1_5
  46      =1  #define Audio_Mute    P1_7
  47      =1  //#define AVOutPutSelect  P1_7
  48      =1  //#define RS232Select     P4_0
  49      =1  
  50      =1  //#define GPS_PWR   P3_2
  51      =1  //#define GM8126_WD1  P2_0
  52      =1  //#define GM8126_WD2  P3_5
  53      =1  
  54      =1  #endif
  55      =1  
  28          #include "audio.h"
   1      =1  
   2      =1  #define MAX_SOUND_VOLUME 50
   3      =1  extern  BYTE  AudioVol;
   4      =1  extern  BYTE  PCAudioVol;
   5      =1  
   6      =1  //BYTE ResetMSP(void);
   7      =1  //void SetMSPSCARTPrescale(void);
   8      =1  //void SetMSPSourceSel(void);
   9      =1  //void SetMSPVol(void);
  10      =1  
  11      =1  //BYTE AudioAutoStdDetection(void);
  12      =1  //BYTE SteroMonoDetection(void);
  13      =1  
  14      =1  //BYTE TunerAudio(void);
  15      =1  //void ExtAudio(void);
  16      =1  //id PCAudio(void);
  17      =1  //id MuteOn(void);
  18      =1  //BYTE GetAudioVol(void);
  19      =1  BYTE ChangeVol(char);
  20      =1  //BYTE GetAudioBalance(void);
  21      =1  //BYTE ChangeBalance(char);
  22      =1  //BYTE GetAudioBass(void);
  23      =1  //BYTE ChangeBass(char);
  24      =1  //BYTE GetAudioTreble(void);
  25      =1  //BYTE ChangeTreble(char);
  26      =1  //BYTE GetAudioEffect(void);
  27      =1  //BYTE ChangeAudioEffect(char amount);
  28      =1  //void ToggleAudioMute(void);
  29      =1  //void CheckAndClearMuteOn(void);
  30      =1  
  31      =1  //BYTE IsAudioMuteOn(void);
  32      =1  //void SetAudioMute(BYTE on );
  33      =1  //void ChangeMTS(BYTE type);
  34      =1  //void AudioOff(void);
  35      =1  void AudioMute(bit mute);
  36      =1  extern void    Wait_ms(WORD Tms);
  37      =1  
  38      =1  //#define AudioOn()     SetMSPVol()
  39      =1  //void ResetAudioValue();
  29          
  30          
  31          bit CAM_PTZ_RUN_flag;
  32          BYTE lock_keycnt; 
  33          BYTE KeyBuffer=0;
  34          BYTE LockKeyState=0; 
  35          BYTE BookMarkState=0;
  36          BYTE DayNightLevel=0;
  37          
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 68  

  38          BYTE Disp_Input=0;//ryan@21071019
  39          
  40          BYTE TR_JUMP_Flag=0;//ryan@20170912
  41          BYTE TR_JUMP_HOLD=0;//ryan@20170912
  42          BYTE RELEASE_TR_JUMP_Flag=0;//ryan@20170912
  43          
  44          BYTE OSD_LOCKF=0;//ryan@21071018
  45            
  46          extern bit SpeedDomeMode;
  47          extern bit OnChangingValue;
  48          extern bit RepeatKey;
  49          extern bit Init_DisplayInput;
  50          #ifdef SUPPORT_DEBUG
              extern  bit Debug_On;
              #endif
  53          extern  BYTE  PcMode;
  54          extern      WORD  OSDLastKeyInTime;   // in ms
  55          //extern      bit   DisplayInputHold;   //william-981029
  56          extern  DATA  WORD  tic_pc;
  57          extern      bit KeyReady;
  58          extern  DATA BYTE Key;
  59          extern  BYTE  keyticSec;
  60          #ifdef REMO_RC5
              extern   BYTE RemoDataReady;
              #endif
  63          extern BYTE RemoSystemCode, RemoDataCode;
  64          //#ifdef Format_SDCard
  65          extern BYTE FormatSDCard;
  66          //#endif
  67          extern  bit ChannelEdit_Flag;
  68          extern  bit ChannelEdit_on;
  69          extern  bit GetDVRStatusflag;
  70          extern  BYTE    OSDMenuLevel;
  71          #ifdef E_Wintek
              extern  bit FactoryMenu;
              #endif
  74          extern BYTE  updn_reg[4];
  75          extern bit ChangeKey;
  76          
  77          extern bit  IsDrawNoVideoSignal;//ryan@20170922
  78          
  79          #ifdef HTRV  //Pinchi 20150825 add model #define
              extern BYTE GaugeVStart;
              
              BYTE GaugeSetup =0;
              BYTE GaugeInfoOSD =0;
              #endif
  85          
  86          #ifdef SUPPORT_2835_CLK_TUNE_BACK_DOOR  //Pinchi 20160929 add
  87          DATA bit IsRun2835ClkTune=0;
  88          DATA BYTE b2835ClkTuneVal=0;
  89          
  90          DATA bit IsEnter2835ClkTune=0;
  91          DATA DWORD Enter2835TuneClock;
  92          extern DATA DWORD SystemClock;
  93          
  94          void HS_Display2835ClkTuneVal(WORD val);
  95          extern CODE BYTE Init_Osd_DisplayInput_B[];
  96          #endif
  97          
  98          #ifdef HS_NEWOSDMENU
              void RemoMenu_MenuKey(BYTE isREMOTE)
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 69  

              {
                if(GetDisplayedOSD() & MENU)  
                  OSDHighMenu();       
                else
                  {
                  /*  //Weylis -@121008 
                  //FMONFLG = 3;
                  if(GetInputSelection()== soDVDAV || GetInputSelection()== soCOMPONENT)
                    {
                      if(isREMOTE)
                        OpenOSDMenu(1);
                      else
                        OpenOSDMenu(0);
                    }
                  else
                  */
                    OpenOSDMenu(1);
                  }
              }
              #else 
 120          void RemoMenu_MenuKey(void)
 121          {
 122   1      
 123   1      
 124   1          
 125   1        if(  GetDisplayedOSD() & MENU  )    OSDHighMenu();
 126   1        else
 127   1          {
 128   2          #ifdef AWT_ML072S
 129   2          ClearOSDInfo();
 130   2          WriteDecoder(0xff, 0x01);
 131   2          Wait_ms(5);
 132   2          WriteDecoder(0x82, 0x01);////normal mode
 133   2          Wait_ms(5);
 134   2          WriteDecoder(0xff, 0x00);
 135   2          #endif
 136   2          
 137   2          OpenOSDMenu();
 138   2          }
 139   1      }
 140          #endif
 141          
 142          void RemoChnUp_UpKey(void)
 143          {
 144   1        #ifdef SUPPORT_DEBUG
                if( Debug_On ) {
                  DebugWindowData(UP);
                  return;
                }
                else 
                #endif  
 151   1        if( GetDisplayedOSD() & MENU  ) 
 152   1          #ifdef PAL_TV
                  if( ChannelEdit_Flag) {
                    if( ChannelEdit_on )          ChannelEdit_Char(UP);
                    else {    
                      UpDownTVChannel(DN);
                      ChannelEdit_display();
                    }
                  }
                  else
                  #endif  
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 70  

 162   1          OSDCursorMove(UP);  
 163   1        #ifdef SUPPORT_PC
                else if( GetInputSelection()==PC )    AutoAdjust();
                #endif
 166   1        else  
 167   1          return;
 168   1      }
 169          
 170          void RemoChnDn_DnKey(void)
 171          {
 172   1        #ifdef SUPPORT_DEBUG
                if( Debug_On ) {
                  DebugWindowData(DN);
                  return;
                }
                else 
                #endif  
 179   1        if( GetDisplayedOSD() & MENU  ) {
 180   2          OSDCursorMove(DN);  
 181   2        }
 182   1        else
 183   1          #ifdef SUPPORT_LINE_OSDDEMO
                  DisplayLineOSD();
                  #endif
 186   1          return;
 187   1      }
 188          
 189          void RemoVolUp_RightKey(void)
 190          {
 191   1        #ifdef SUPPORT_DEBUG
                if( Debug_On ) {
                  DebugWindowCursor(UP);
                  return;
                }
                else 
                #endif  
 198   1        if(  GetDisplayedOSD() & MENU  ) {
 199   2          if( OnChangingValue )           OSDValueUpDn(UP );
 200   2          else                    OSDSelect();      
 201   2        }
 202   1        else //if(GetDisplayedOSD() & TVVOL)
 203   1        {
 204   2        #ifdef HTRV  //Pinchi 20150827 add
                    if(GaugeSetup)//william-v1.43-970319
                    OSDValueUpDn(UP );  
                  else
                #endif
 209   2          {
 210   3            ChangeVol(1);
 211   3            DisplayVol();
 212   3          }
 213   2        }
 214   1      }
 215          
 216          void RemoVolDn_LeftKey(void)
 217          {
 218   1        #ifdef SUPPORT_DEBUG
                if( Debug_On ) {
                  DebugWindowCursor(DN);
                  return;
                }
                else 
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 71  

                #endif
 225   1        if(  GetDisplayedOSD() & MENU  ) 
 226   1          {
 227   2          if( OnChangingValue )           
 228   2            OSDValueUpDn(DN );
 229   2          else 
 230   2            OSDHighMenu();  
 231   2          }
 232   1        else //if(GetDisplayedOSD() & TVVOL)
 233   1        {
 234   2        #ifdef HTRV  //Pinchi 20150827 add
                    if(GaugeSetup)//william-v1.43-970319
                    OSDValueUpDn(DN); 
                  else
                #endif
 239   2          {
 240   3            ChangeVol(-1);
 241   3            DisplayVol();
 242   3          }
 243   2        }
 244   1      }
 245          
 246          //=============================================================================
 247          //
 248          //=============================================================================
 249          BYTE ActionRemo(BYTE _RemoDataCode, BYTE AutoKey)
 250          {
 251   1        SetOSDLastKeyInTime();
 252   1        
 253   1         #if (defined SUPPORT_PC) || (defined SUPPORT_DTV)  
                   #if 0//andy ML084 980930
                  if( (PcMode==EE_PC_NO_SIGNAL) && (GetInputSelection()==PC || GetInputSelection()==DTV) ) {
                   if( PcMode==EE_PC_NO_SIGNAL ) {
                     switch (_RemoDataCode) {
                       case REMO_INPUT:
                     //case REMO_STANDBY: 
                     break;
                      
                    default:
                      tic_pc = 0;
                      return 1;
                    }
                  }
                }
                   #endif
                #endif // SUPPORT_PC
 270   1      
 271   1        switch(_RemoDataCode) {
 272   2      
 273   2        case REMO_STANDBY:        // power
 274   2          #ifdef DEBUG_KEYREMO
                  dPrintf("\r\nSTANDBY Mode, Autokey:%02x", AutoKey);
                  #endif
 277   2          OSDLastKeyInTime = 0xffff;
 278   2          if( AutoKey ) return 1;
 279   2          return 0;         // power off
 280   2      
 281   2        case REMO_MUTE:
 282   2          #if 0
                  #ifdef DEBUG_KEYREMO
                  dPrintf("\r\nMUTE Mode, Autokey:%02x", AutoKey);
                  #endif
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 72  

                  if( AutoKey ) return 1;
                  ToggleAudioMute();
                  if( IsAudioMuteOn() )   DisplayMuteInfo();
                  else{           
                    ClearMuteInfo();
                    //if( DisplayInputHold ) DisplayInput();    //william-981029
                  }
                  #endif
 294   2          break;
 295   2      
 296   2        case REMO_INPUT:
 297   2          #ifdef DEBUG_KEYREMO
                  dPrintf("\r\nChange INPUT, Autokey:%02x", AutoKey);
                  #endif
 300   2          ChangeInput(GetNextInputSelection());
 301   2          return 1;
 302   2      
 303   2        case REMO_INFO:
 304   2          #ifdef DEBUG_KEYREMO
                  dPrintf("\r\nINFO display, Autokey:%02x", AutoKey);
                  #endif
 307   2          if( GetDisplayedOSD() & INPUTINFO ) ClearInput();
 308   2          else    DisplayInput();
 309   2          return 1;
 310   2      
 311   2        case REMO_NUM0:
 312   2        case REMO_NUM1:
 313   2        case REMO_NUM2:
 314   2        case REMO_NUM3:
 315   2        case REMO_NUM4:
 316   2        case REMO_NUM5:
 317   2        case REMO_NUM6:
 318   2        case REMO_NUM7:
 319   2        case REMO_NUM8:
 320   2        case REMO_NUM9:
 321   2          #ifdef DEBUG_KEYREMO
                  dPrintf("\r\nNumber %02x Key Pressed, Autokey:%02x", (_RemoDataCode-0x30), AutoKey);
                  #endif
 324   2          if( AutoKey )               return 1;
 325   2      
 326   2          else                    return 1;
 327   2          break;
 328   2      
 329   2        case REMO_CHNUP:
 330   2          #ifdef DEBUG_KEYREMO
                  dPuts("\r\nChannel UP");
                  #endif
 333   2          RemoChnUp_UpKey();
 334   2          break;
 335   2        
 336   2        case REMO_CHNDN:
 337   2          #ifdef DEBUG_KEYREMO
                  dPuts("\r\nChannel DOWN");
                  #endif
 340   2          RemoChnDn_DnKey();
 341   2          break;
 342   2        
 343   2        case REMO_SELECT:
 344   2          #ifdef DEBUG_KEYREMO
                  dPrintf("\r\nSELECT key pressed, Autokey:%02x", AutoKey);
                  #endif
 347   2          if( AutoKey ) return 1;
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 73  

 348   2          if(  GetDisplayedOSD() & MENU  )    {
 349   3              OSDSelect();
 350   3          }
 351   2          break;
 352   2      
 353   2        case REMO_VOLUP:
 354   2          #ifdef DEBUG_KEYREMO
                  dPuts("\r\nVolumn UP");
                  #endif
 357   2          RemoVolUp_RightKey();
 358   2          break;
 359   2        case REMO_VOLDN:
 360   2          #ifdef DEBUG_KEYREMO
                  dPuts("\r\nVolumn DOWN");
                  #endif
 363   2          RemoVolDn_LeftKey();
 364   2          break;
 365   2      
 366   2      
 367   2        case REMO_MENU:
 368   2          #ifdef DEBUG_KEYREMO
                  dPrintf("\r\nMENU display, Autokey:%02x", AutoKey);
                  #endif
 371   2          if( AutoKey ) return 1;
 372   2        #ifdef HS_NEWOSDMENU  
                  RemoMenu_MenuKey(1);
                #else
 375   2          RemoMenu_MenuKey();
 376   2        #endif
 377   2          break;
 378   2      
 379   2        case REMO_EXIT:
 380   2          #ifdef DEBUG_KEYREMO
                  dPuts("\r\n EXIT");
                  #endif
 383   2          if(  GetDisplayedOSD() & MENU  )    
 384   2            DoAction(EXITMENU);
 385   2          break;
 386   2      
 387   2        #ifdef SUPPORT_PC
                case REMO_AUTO:
                  #ifdef DEBUG_KEYREMO
                  dPuts("\r\n AUTO mode adjust for PC input");
                  #endif
                  if( GetInputSelection()==PC )
                    AutoAdjust();
                  break;
                #endif
 396   2      
 397   2        #ifdef WIDE_SCREEN
                case REMO_ASPECT:
                  #ifdef DEBUG_KEYREMO
                  dPuts("\r\n Screen Aspect Ratio change to WIDE");
                  #endif
                  SetItemValue(WIDESCREEN,UP);
                  break;
                #endif
 405   2        }
 406   1      
 407   1        #ifdef SUPPORT_DEBUG
                switch(_RemoDataCode) {   
                case REMO_DEBUG:    DebugWindowControl();   break;
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 74  

                case REMO_READ:     Debug_Read();   break;
                case REMO_WRITE:    Debug_Write();  
                            Debug_Read(); // Read back
                                      break;
                }
                #endif
 416   1      
 417   1        return 1;
 418   1      }
 419          
 420          BYTE CheckKeyIn(void)
 421          {
 422   1        BYTE ret=1, ikey,OSD_LOCK;
 423   1      
 424   1      #ifdef SUPPORT_2835_CLK_TUNE_BACK_DOOR  //Pinchi 20160929 add
 425   1        if ((IsEnter2835ClkTune == 1) && (IsRun2835ClkTune == 0))
 426   1        {
 427   2          if ((SystemClock - Enter2835TuneClock) >= 10)
 428   2            IsEnter2835ClkTune = 0;
 429   2        }
 430   1      #endif
 431   1          
 432   1        if( (ikey = GetKey(1)) ) 
 433   1        {
 434   2          #ifdef Hs_debug//ryan@20171002
 435   2      
 436   2          switch (ikey) {
 437   3            case POWERKEY: Printf("\r\nPOWER key pressed"); break;
 438   3            case MENUKEY: Printf("\r\nMENU key pressed"); break;
 439   3            case INPUTSOURCEKEY: Printf("\r\nINPUTSOURCE key pressed"); break;
 440   3            case UPKEY:  Printf("\r\nUP key pressed"); break;
 441   3            case DOWNKEY: Printf("\r\nDOWN key pressed"); break;
 442   3                  case SELECTKEY: Printf("\r\nSELECTKEY key pressed"); break;//Printf("\r\nSELECTKEY key pressed
             -"); break;
 443   3            default: Printf("\r\nNOT ASSIGNED key pressed"); break;
 444   3          }   
 445   2            #endif
 446   2      
 447   2         //   if(TriggerFlag&&(ikey!=INPUTSOURCEKEY))     //判斷是否進入Tigger Mode
 448   2           // { 
 449   2             // ikey=0;
 450   2             // return 1;
 451   2           // }
 452   2          
 453   2        //mask by ryan@20171018 OSD_LOCK = ReadEEP(EEP_ONOFFChoice);
 454   2        OSD_LOCK=OSD_LOCKF;
 455   2      
 456   2          
 457   2        #ifdef AWT_NEW_SLIM_MODEL  //Pinchi 20150203 add for AWT new slim model
                  if (((~P2 & UnLockKEY) == UnLockKEY) && (OSD_LOCK == 0))   // 解osd lock
                #else
 460   2          if((~P2&0x90)==0x90 && OSD_LOCK==0)   //  解osd lock
 461   2        #endif
 462   2          { 
 463   3            Wait_ms(2000);
 464   3          #ifdef AWT_NEW_SLIM_MODEL  //Pinchi 20150203 add for AWT new slim model
                    if (((~P2 & UnLockKEY) == UnLockKEY) || (LockKeyState == 3))
                  #else
 467   3            if((~P2&0x90)==0x90||LockKeyState==3)
 468   3          #endif
 469   3            {
 470   4              WriteEEP(EEP_ONOFFChoice,0x01);
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 75  

 471   4              OSD_LOCK=1;//ryan@20170908
 472   4              OSD_LOCKF=1;
 473   4              DisplayInformation(InfoOSDMENUATCIVE);
 474   4              ikey=0;
 475   4              Wait_ms(2000);
 476   4      
 477   4              if(TriggerFlag&0x20)//if rear trigger
 478   4              {
 479   5              DisplayGaugeOSD();
 480   5              }
 481   4              else
 482   4              {
 483   5              ClearGAUGEINFO();
 484   5              lock_keycnt=0;
 485   5              LockKeyState=0;
 486   5              DisplayInput();
 487   5            
 488   5              }
 489   4              
 490   4            
 491   4            #ifdef AWT_NO_SIGNAL_MSG  //Pinchi 20150320 add
 492   4            IsDrawNoVideoSignal = 0;
 493   4            #endif
 494   4            
 495   4            //  return 1;  //Pinchi 20150825 add  //Pinchi 20150825 disable
 496   4            }
 497   3          }
 498   2      
 499   2            if(TriggerFlag&&(ikey!=INPUTSOURCEKEY))     //判斷是否進入Tigger Mode
 500   2            { 
 501   3              ikey=0;
 502   3              return 1;
 503   3            }
 504   2        
 505   2        #ifndef AWT_ML072Q  //Pinchi 20140911 add for AWT ML072Q
 506   2          if(LockKeyState==3 && OSD_LOCK==0)
 507   2          {
 508   3            WriteEEP(EEP_ONOFFChoice,0x01);
 509   3            OSD_LOCKF=1;
 510   3            DisplayInformation(InfoOSDMENUATCIVE);
 511   3            Wait_ms(2000);
 512   3            //lock_keycnt=0;
 513   3            DisplayInput();
 514   3            LockKeyState=0;
 515   3            PowerLED(ON);
 516   3            
 517   3            #ifdef AWT_NO_SIGNAL_MSG  //Pinchi 20150320 add
 518   3            IsDrawNoVideoSignal = 0;
 519   3            #endif
 520   3          }
 521   2        #endif
 522   2      
 523   2          if(lock_keycnt==0 && OSD_LOCK==0 && LockKeyState!=0)
 524   2          {
 525   3            LockKeyState=0;
 526   3            PowerLED(ON);
 527   3          }
 528   2      
 529   2       
 530   2        #ifdef AWT_ML072Q  //Pinchi 20140918 add for AWT ML072Q
                  #ifdef AWT_NEW_SLIM_MODEL  //Pinchi 20150203 add for AWT new slim model
                  if (ikey && (OSD_LOCK == 0) && ((~P2 & UnLockKEY) != UnLockKEY))
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 76  

                  #else
                  if (ikey && (OSD_LOCK == 0) && ((~P2 & 0x90) != 0x90)&&(TriggerFlag==0))
                  #endif
                  {
                    ClearOSDInfo();//ryan@20170922
                    DisplayInformation(InfoOSDMENULOCKED);
                    delay(500);
                    ClearGAUGEINFO(); 
                    DisplayInput();
                    #ifdef Hs_debug
                    Printf("\r\n***OSD_LOCK",0);
                    #endif
                              #ifdef AWT_NO_SIGNAL_MSG  //Pinchi 20150320 add
                              IsDrawNoVideoSignal = 0;
                              #endif
                    return 1;
                  }
                #endif
 551   2      
 552   2        #ifdef AWT_ML072S ////add by ryan@20171212 
 553   2          if (ikey && (OSD_LOCK == 0) && ((~P2 & 0x90) != 0x90)&&(TriggerFlag==0))
 554   2          {
 555   3            ClearOSDInfo();
 556   3            DisplayInformation(InfoOSDMENULOCKED);
 557   3            delay(500);
 558   3            ClearGAUGEINFO(); 
 559   3            DisplayInput();
 560   3            #ifdef Hs_debug
 561   3            Printf("\r\n*****OSD_LOCK",0);
 562   3            #endif
 563   3                      #ifdef AWT_NO_SIGNAL_MSG  //Pinchi 20150320 add
 564   3                      IsDrawNoVideoSignal = 0;
 565   3                      #endif
 566   3            return 1;
 567   3          }
 568   2        #endif
 569   2        
 570   2          SetOSDLastKeyInTime();
 571   2      
 572   2          switch( ikey ) {
 573   3            case  POWERKEY :
 574   3              Printf("\r\nPOWER key ");
 575   3            #ifdef SUPPORT_2835_CLK_TUNE_BACK_DOOR  //Pinchi 20160929 add
 576   3              if (IsRun2835ClkTune == 1)
 577   3              {
 578   4                if (b2835ClkTuneVal >= 15)
 579   4                  b2835ClkTuneVal = 0;
 580   4                else
 581   4                  b2835ClkTuneVal++;
 582   4      
 583   4                switch(b2835ClkTuneVal)
 584   4                {
 585   5                  case 0 :
 586   5                  default :
 587   5                    TW2835Cmd("\n\rbusw 0 1 7E 80\r\n");
 588   5                    break;
 589   5      
 590   5                  case 1 :
 591   5                    TW2835Cmd("\n\rbusw 0 1 7E 81\r\n");
 592   5                    break;
 593   5      
 594   5                  case 2 :
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 77  

 595   5                    TW2835Cmd("\n\rbusw 0 1 7E 82\r\n");
 596   5                    break;
 597   5      
 598   5                  case 3 :
 599   5                    TW2835Cmd("\n\rbusw 0 1 7E 83\r\n");
 600   5                    break;
 601   5      
 602   5                  case 4 :
 603   5                    TW2835Cmd("\n\rbusw 0 1 7E 84\r\n");
 604   5                    break;
 605   5      
 606   5                  case 5 :
 607   5                    TW2835Cmd("\n\rbusw 0 1 7E 85\r\n");
 608   5                    break;
 609   5      
 610   5                  case 6 :
 611   5                    TW2835Cmd("\n\rbusw 0 1 7E 86\r\n");
 612   5                    break;
 613   5      
 614   5                  case 7 :
 615   5                    TW2835Cmd("\n\rbusw 0 1 7E 87\r\n");
 616   5                    break;
 617   5      
 618   5                  case 8 :
 619   5                    TW2835Cmd("\n\rbusw 0 1 7E 88\r\n");
 620   5                    break;
 621   5      
 622   5                  case 9 :
 623   5                    TW2835Cmd("\n\rbusw 0 1 7E 89\r\n");
 624   5                    break;
 625   5      
 626   5                  case 10 :
 627   5                    TW2835Cmd("\n\rbusw 0 1 7E 8A\r\n");
 628   5                    break;
 629   5      
 630   5                  case 11 :
 631   5                    TW2835Cmd("\n\rbusw 0 1 7E 8B\r\n");
 632   5                    break;
 633   5      
 634   5                  case 12 :
 635   5                    TW2835Cmd("\n\rbusw 0 1 7E 8C\r\n");
 636   5                    break;
 637   5      
 638   5                  case 13 :
 639   5                    TW2835Cmd("\n\rbusw 0 1 7E 8D\r\n");
 640   5                    break;
 641   5      
 642   5                  case 14 :
 643   5                    TW2835Cmd("\n\rbusw 0 1 7E 8E\r\n");
 644   5                    break;
 645   5      
 646   5                  case 15 :
 647   5                    TW2835Cmd("\n\rbusw 0 1 7E 8F\r\n");
 648   5                    break;
 649   5                }
 650   4      
 651   4                HS_Display2835ClkTuneVal(b2835ClkTuneVal);
 652   4              }
 653   3              else
 654   3            #endif
 655   3              {
 656   4              
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 78  

 657   4                if(SpeedDomeMode==0)
 658   4                {
 659   5                  if(TriggerFlag==0x00)
 660   5                  {
 661   6                    //ret = ActionRemo( REMO_STANDBY, RepeatKey );
 662   6                    ret = ActionRemo( REMO_STANDBY, 0 );
 663   6                    PowerFlag=0;
 664   6                    //Hs_DvrTxCmdPaser(Halt_Start);
 665   6                            WriteEEP(EEP_Powerflag,PowerFlag);//2007.3.28 Justin
 666   6                  }
 667   5                }
 668   4                else
 669   4                {
 670   5                  SpeedDomeMode=0;
 671   5                  //RS232Select=0;
 672   5                  //ClearDataCnt(INPUTINFO_ADDR,19);
 673   5                  //DrawAttrCnt(INPUTINFO_ADDR,0x00,19); 
 674   5                  DisplayInput();
 675   5                }
 676   4              }
 677   3                      break;
 678   3      
 679   3            case MENUKEY:
 680   3              Printf("\r\nMENUKEY key ");
 681   3              //Printf("\r\nSpeedDomeMode=%02x",(WORD)SpeedDomeMode);
 682   3            #ifdef SUPPORT_2835_CLK_TUNE_BACK_DOOR  //Pinchi 20160929 add
 683   3              if (IsRun2835ClkTune == 1)
 684   3              {
 685   4                HS_Display2835ClkTuneVal(b2835ClkTuneVal);
 686   4              }
 687   3              else
 688   3            #endif
 689   3              {
 690   4              #ifdef HTRV
                        if(GaugeInfoOSD)
                        {
                          GaugeInfoOSD =0;
                          GaugeSetup=0;
                          WriteDecoder(0x0a,0x16); ///_FULLPANEL_20140313_xx
                          WriteDecoder(0x61,0x80);
                          WriteDecoder(0x66,0x00);
              
                          SelectModeType = ReadEEP(EEP_SelectMode);
              
                          ////  SelectModeType = CAM_A;
                          ClearOSDInfo();
                          CloseOSDMenu();
              
                        #if 0  //Pinchi 20150901 add to setup 2s for Display OFF
                          if (ReadEEP(EEP_COSDMode) == 1)
                            displayhold_flag = 3;
                        #endif
                                    break;
                          }
                      #endif
 712   4      
 713   4                if(SpeedDomeMode==0)
 714   4                {
 715   5                #ifdef AWT_ML072S//Pinchi 20150825 modify //ndef AWT_ML072Q  //Pinchi 20140918 add for AWT ML072Q
 716   5                  if(SEQFlag)
 717   5                  {
 718   6                  ;  
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 79  

 719   6                  }
 720   5                  else  if(OSD_LOCK==0)
 721   5                  {
 722   6                    //DisplaylockOSD();
 723   6                    DisplayInformation(InfoOSDMENULOCKED);
 724   6                    delay(500);
 725   6                    ClearGAUGEINFO(); 
 726   6                    DisplayInput();
 727   6                    Printf("\r\n *OSD_LOCK",0);
 728   6                  }
 729   5                  else
 730   5                #else ////AWT_ML072S
                           if(OSD_LOCK==0)
                          {
                            //DisplaylockOSD();
                            DisplayInformation(InfoOSDMENULOCKED);
                            delay(500);
                            ClearGAUGEINFO(); 
                            DisplayInput();
                            Printf("\r\n *OSD_LOCK",0);
                          }
                          else        
                        #endif
 742   5                  {
 743   6                          if(  GetDisplayedOSD() & MENU  ) 
 744   6                          {
 745   7                              if( OnChangingValue )
 746   7                        ret = ActionRemo( REMO_MENU, 0 );
 747   7                        //ret = ActionRemo( REMO_MENU, RepeatKey );
 748   7                      else
 749   7                        OSDSelect();
 750   7                          }
 751   6                    else if( GetDisplayedOSD() & TVVOL)
 752   6                    {
 753   7                      //ClearOSDInfo();
 754   7                    //  CloseOSDMenu();
 755   7                      //DisplayInput();
 756   7                      ;
 757   7                    }
 758   6        
 759   6                    else 
 760   6                    {
 761   7                      //#ifdef Format_SDCard
 762   7                    #ifdef SUPPORT_SDCARD  //Pinchi 20140918 add
                              if(FormatSDCard>=60)
                              {
                                //OpenFORMATMenu();
                                FormatSDCard=0;
                                ClearOSDInfo();
                                  //ClearDataCnt(GAUGEINFO_ADDR,30*5);
                              }
              
                              WriteDecoder(0xff, 0x01);
                              Wait_ms(5);
                              //WriteDecoder(0x82, 0x0c);
                              WriteDecoder(0x82, 0x01);
                              Wait_ms(5);
                              WriteDecoder(0xff, 0x00);
                              //Printf("\r\nwilliam_test",0);
                              //Wait_ms(2000);
                            #endif
 780   7                      ret = ActionRemo( REMO_MENU, 0 );  
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 80  

 781   7                    }
 782   6                  }
 783   5                }
 784   4                else
 785   4                {
 786   5                  CAM_TxCommand_toRS485(CAM_Iris_Open);
 787   5                  CAM_PTZ_RUN_flag = 1;
 788   5                }
 789   4              }
 790   3              break;
 791   3      
 792   3            //------------------------------------------------------------------------    
 793   3            
 794   3            case UPKEY:
 795   3              if(SpeedDomeMode==0)
 796   3              {
 797   4                if(  GetDisplayedOSD() & MENU  ) 
 798   4                {
 799   5                  if( OnChangingValue )       
 800   5                    OSDValueUpDn(UP );
 801   5                  else    
 802   5                  {
 803   6                    //if(OSDMenuLevel == 1||OSDMenuLevel == 2)
 804   6                    //   OSDCursorMove( DN);
 805   6                    //else  
 806   6                       OSDCursorMove( UP );
 807   6                  }
 808   5                }
 809   4                else  
 810   4                {
 811   5                  #ifdef Hs_debug
 812   5                  Printf("\r\nREMO_VOLUP",0);
 813   5                  #endif
 814   5                  #ifdef AWT_ML072S
 815   5                  if(GetDisplayedOSD()&INPUTINFO)ClearOSDInfo();
 816   5                  #endif            
 817   5                            ret=ActionRemo(REMO_VOLUP,0);
 818   5                  return 1;
 819   5                }
 820   4              }
 821   3              else
 822   3              {
 823   4                CAM_TxCommand_toRS485(CAM_PTZ_UP);
 824   4                CAM_PTZ_RUN_flag = 1;
 825   4      
 826   4              }
 827   3              break;
 828   3          
 829   3            case DOWNKEY:
 830   3              if(SpeedDomeMode==0)
 831   3              {
 832   4                if(  GetDisplayedOSD() & MENU  )
 833   4                {
 834   5                  if( OnChangingValue )       
 835   5                    OSDValueUpDn(DN );
 836   5                  else    
 837   5                  {
 838   6                    //if(OSDMenuLevel == 1||OSDMenuLevel == 2)
 839   6                    //   OSDCursorMove( UP);
 840   6                    //else  
 841   6                    OSDCursorMove( DN);
 842   6                  }
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 81  

 843   5                }
 844   4                else
 845   4                {
 846   5                  #ifdef Hs_debug
 847   5                  Printf("\r\nREMO_VOLDN",0);
 848   5                  #endif
 849   5                  #ifdef AWT_ML072S
 850   5                  if(GetDisplayedOSD()&INPUTINFO)ClearOSDInfo();
 851   5                  #endif
 852   5                                ret=ActionRemo(REMO_VOLDN,0);
 853   5                  return 1;
 854   5                }
 855   4              }
 856   3              else
 857   3              {
 858   4                CAM_TxCommand_toRS485(CAM_PTZ_DOWN);
 859   4                CAM_PTZ_RUN_flag = 1;
 860   4      
 861   4              }
 862   3              break;
 863   3      
 864   3            case SELECTKEY:
 865   3              if(SpeedDomeMode==0)
 866   3              {
 867   4                if((SelectModeType == AVMode)&&(GetDisplayedOSD() & MENU))
 868   4                CloseOSDMenu();
 869   4      
 870   4                if(GetDisplayedOSD() & INPUTINFO)
 871   4                      ClearInput();
 872   4                
 873   4                SetSelectMode();
 874   4              }
 875   3              else
 876   3              {
 877   4                CAM_TxCommand_toRS485(CAM_PTZ_LEFT);
 878   4                CAM_PTZ_RUN_flag = 1;
 879   4      
 880   4              }
 881   3              break;
 882   3      
 883   3            //------------------------------------------------------------------------    
 884   3      
 885   3            case INPUTSOURCEKEY:
 886   3              
 887   3                if((TriggerFlag)&&(Priority==0))//ryan@20170907
 888   3                {
 889   4                  //not change state... ryan@20170914
 890   4                  ;//Printf("\r\n*INPUTSOURCEKEY* Priority=%02x", (WORD)Priority);
 891   4                }
 892   3              else if(TriggerFlag&&(TR_JUMP_Flag==0)&&(Priority==1))
 893   3                {         
 894   4                if(ReadEEP(EEP_ONOFFChoice)==1)//unlock key work
 895   4                {
 896   5                if((TriggerFlag&0x20))
 897   5                 ClearGAUGEINFO();           
 898   5      
 899   5                  TR_JUMP_Flag=1;
 900   5                  
 901   5                if(RELEASE_TR_JUMP_Flag==0) TR_JUMP_HOLD=NowModeState;          
 902   5      
 903   5                RELEASE_TR_JUMP_Flag=1;
 904   5                
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 82  

 905   5                NowModeState=JumpMode;
 906   5      
 907   5                SetJumpMode();    
 908   5                }
 909   4                
 910   4                }
 911   3              else if(SpeedDomeMode==0)
 912   3              {
 913   4              
 914   4                if(TR_JUMP_Flag)
 915   4                {
 916   5                  TriggerFlag=0;      
 917   5                  TriggerMode=No_TRIG;
 918   5                TR_JUMP_Flag=0;
 919   5                NowModeState=SelectMode;
 920   5              //Printf("\r\n((SelectModeType=%02x    NowModeState=%02x))",(WORD)SelectModeType,(WORD)NowModeState);
 921   5                }
 922   4                else
 923   4                {
 924   5      
 925   5      
 926   5        if((SelectModeType == AVMode)&&(GetDisplayedOSD() & MENU))
 927   5            CloseOSDMenu();
 928   5                
 929   5                
 930   5                  if(NowModeState==SelectMode)
 931   5                  NowModeState=JumpMode;
 932   5                  else
 933   5                  NowModeState=SelectMode;
 934   5                  
 935   5                              SetJumpMode();
 936   5                  
 937   5                }
 938   4              }
 939   3              else
 940   3              {
 941   4                CAM_TxCommand_toRS485(CAM_PTZ_RIGHT); 
 942   4                CAM_PTZ_RUN_flag = 1;
 943   4      
 944   4              }
 945   3            break;
 946   3      
 947   3          #ifdef QUAD
                    case  EVENTKEY:
                      Printf("\r\nEVENTKEY key pressed");
                  ////  Hs_DvrTxCmdPaser(BOOKMARK);       
                              break;
                  #endif
 953   3      
 954   3          #ifdef SUPPORT_SDCARD  //Pinchi 20160929 disable for no DVR function
                    case VersionKEY:
                      #ifdef E_Wintek
                      FactoryMenu=1;
                      #endif
                      Printf("\r\nVersionKEY key pressed");
                    #ifdef SUPPORT_SDCARD 
                      if(DVR_Ready)
                      {
                      #if  1
                        if(AudioVol==15)
                        {
                          Hs_DvrTxCmdPaser(GetDVRVersion);
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 83  

                        }
                        #ifndef SUPPORT_SDCARD
                        else
                          DisplayDVRStatus();
                        #endif
                      #endif
                      }
                    #else
                      if(AudioVol==15)
                      {
                        WriteDecoder(0xff, 0x01);
                        Wait_ms(5);
                        //WriteDecoder(0x82, 0x0c);
                        WriteDecoder(0x82, 0x01);
                        Wait_ms(5);
                        WriteDecoder(0xff, 0x00);
                        DisplayFWVersion();
                      }
                    #endif
                      //else
                      //  {
                      //  CloseOSDMenu(); 
                      //  DisplayInput();
                      //  }
                      break;
                  #endif
 993   3      
 994   3          #ifdef SUPPORT_2835_CLK_TUNE_BACK_DOOR  //Pinchi 20160929 add
 995   3            case Tune2835ClkKEY :
 996   3              if ((AudioVol == 20) && (IsEnter2835ClkTune == 1))
 997   3              {
 998   4                if (IsRun2835ClkTune == 1)
 999   4                {
1000   5                  IsRun2835ClkTune = 0;
1001   5                  PowerLED(ON);
1002   5                  ClearDataCnt(INPUTINFO_ADDR, 2);
1003   5                  IsEnter2835ClkTune = 0;
1004   5                }
1005   4                else
1006   4                {
1007   5                  IsRun2835ClkTune = 1;
1008   5                  PowerLED(2);
1009   5                  HS_Display2835ClkTuneVal(b2835ClkTuneVal);
1010   5                }
1011   4      
1012   4                Printf("\r\n[MSG]CheckKeyIn()=> IsRun2835ClkTune=%bx",(BYTE)IsRun2835ClkTune);
1013   4              }
1014   3              break;
1015   3      
1016   3            case Enter2835TuneKEY :
1017   3              if (AudioVol == 23)
1018   3              {
1019   4                PowerLED(2);
1020   4                Wait_ms(100);
1021   4                PowerLED(ON);
1022   4                Wait_ms(100);
1023   4                PowerLED(2);
1024   4                Wait_ms(100);
1025   4                PowerLED(ON);
1026   4                Wait_ms(100);
1027   4                PowerLED(2);
1028   4                Wait_ms(100);
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 84  

1029   4                PowerLED(ON);
1030   4                IsEnter2835ClkTune = 1;
1031   4                Enter2835TuneClock = SystemClock;
1032   4              }
1033   3              break;
1034   3          #endif
1035   3          }
1036   2        }
1037   1        return (ret);
1038   1      }
1039          
1040          //=============================================================================
1041          //    Get Key 
1042          //=============================================================================
1043          #define CUPKEY  DOWNKEY
1044          #define CDOWNKEY  UPKEY
1045          
1046          BYTE GetKey(BYTE repeat)
1047          {
1048   1      
1049   1        bit ready;
1050   1        //BYTE KeyBuffer2;  //Pinchi disable for compiler warning
1051   1        ready = KeyReady;
1052   1        KeyReady = 0;
1053   1      
1054   1      
1055   1        #if 1//ryan@20170914
1056   1        if((ChangeKey==1)&&(Key==0))
1057   1        {
1058   2          ready=1;
1059   2          if((updn_reg[0] == 3) && (updn_reg[1] == 2)&& (updn_reg[2] == 0)&& (updn_reg[3] == 1))      //Up Key     
1060   2            Key=CUPKEY;  
1061   2          else  if((updn_reg[0] == 3) && (updn_reg[1] == 1)&& (updn_reg[2] == 0)&& (updn_reg[3] == 2))  //Down Key 
             -   
1062   2            Key=CDOWNKEY;  
1063   2          
1064   2          ChangeKey = 0;    
1065   2        }   
1066   1      
1067   1        
1068   1        #elif 0
                if(ChangeKey==1)
                {
              
                  ready=1;
                  
                  if((updn_reg[0] == 1) && (updn_reg[1] == 3) && (updn_reg[2] == 2)&& (updn_reg[3] == 0))  //UP Key
                    Key|=CUPKEY;
                  //else if((updn_reg[0] == 3) && (updn_reg[1] == 2)&& (updn_reg[2] == 0)&& (updn_reg[3] == 1))  //UP Key
                  //  Key|=CUPKEY;
              
                  if((updn_reg[0] == 1) && (updn_reg[1] == 0)&& (updn_reg[2] == 2)&& (updn_reg[3] == 3))  //DN Key
                    Key|=CDOWNKEY;
                  //else if((updn_reg[0] == 3) && (updn_reg[1] == 1)&& (updn_reg[2] == 0)&& (updn_reg[3] == 2))  //DN Key
                  //  Key|=CDOWNKEY;
                  
                  ChangeKey = 0;  
              
                  
                }   
                
              
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 85  

                #else
                if(ChangeKey==1)//Kane @HS 2007 0814 Ver1.31<<<<
                {
                  ready=1;
              
                  if((updn_reg[0] == 0) && (updn_reg[1] == 1) && (updn_reg[2] == 3)&& (updn_reg[3] == 2))  //UP Key
                    Key|=UPKEY;
                  if((updn_reg[0] == 3) && (updn_reg[1] == 2)&& (updn_reg[2] == 0)&& (updn_reg[3] == 1))  //UP Key
                    Key|=UPKEY;
              
                  if((updn_reg[0] == 0) && (updn_reg[1] == 2)&& (updn_reg[2] == 3)&& (updn_reg[3] == 1))  //DN Key
                    Key|=DOWNKEY;
                  if((updn_reg[0] == 3) && (updn_reg[1] == 1)&& (updn_reg[2] == 0)&& (updn_reg[3] == 2))  //DN Key
                    Key|=DOWNKEY;
                   
                  //if(OnChangingValue==1)
                  if ((GetDisplayedOSD() & MENU) == 0)  //william-v1.42-961203
                  {
                    if((updn_reg[0] == 1) && (updn_reg[1] == 3)&& (updn_reg[2] == 2)&& (updn_reg[3] == 0))  //UP Key
                      Key|=UPKEY;
                    if((updn_reg[0] == 2) && (updn_reg[1] == 0)&& (updn_reg[2] == 1)&& (updn_reg[3] == 3))  //UP Key
                      Key|=UPKEY;
                    if((updn_reg[0] == 2) && (updn_reg[1] == 3)&& (updn_reg[2] == 1)&& (updn_reg[3] == 0))  //DN Key
                      Key|=DOWNKEY;
                    if((updn_reg[0] == 1) && (updn_reg[1] == 0)&& (updn_reg[2] == 2)&& (updn_reg[3] == 3))  //DN Key
                      Key|=DOWNKEY;
                  }
                  ChangeKey = 0;    //william-v1.42-961130
                }   
              
                #endif
1121   1        
1122   1        if( !ready ) return 0;
1123   1        if( repeat ) return Key;
1124   1        if( !RepeatKey ) return Key;
1125   1      
1126   1        return 0;
1127   1      
1128   1      }
1129          
1130          
1131          //=============================================================================
1132          //    CheckRemo
1133          //=============================================================================
1134          #ifdef REMO_RC5
              
              BYTE IsRemoDataReady(BYTE *DataCode, BYTE *AutoKey)
              {
                bit togglebit;
                static bit  LastToggle=0;
                static BYTE AutoWait=0;
              
                BYTE _RemoSystemCode, _RemoDataCode, _RemoDataReady;
              
                if( !RemoDataReady ) return 0;
              
                _RemoDataReady = RemoDataReady;
                _RemoDataCode = RemoDataCode;
                _RemoSystemCode = RemoSystemCode;
              
                *AutoKey = 0;
              
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 86  

                EnableRemoconInt();
              
                #ifdef DEBUG_KEYREMO
                dPrintf("\r\n(CheckRemo)R-S:%02x, R-D:%02x", (WORD)_RemoSystemCode, (WORD)_RemoDataCode);
                #endif
              
                if( (_RemoSystemCode & 0xc0) != 0xc0 ) return 0;
                if( (_RemoSystemCode & 0x1f) != REMO_CUSTOM ) return 0;
              
                togglebit = LastToggle;
                if( _RemoSystemCode & 0x20 ) LastToggle = 1;
                else LastToggle = 0;
              
                #ifdef DEBUG_KEYREMO
                dPrintf("**** %d  %d ", (WORD)LastToggle, (WORD)_RemoDataReady);
                #endif
              
                if( LastToggle != togglebit ) {     // new key
                  AutoWait =  0;
                }
                else if( AutoWait>=4 ) {        // auto key
                  AutoWait++;
                  if( AutoWait>=6 ) {
                    AutoWait = 4;
                    *AutoKey = 1;
                  }
                  else return 0;
                }
                else {                  // wait auto key
                  AutoWait++;
                  return 0;
                }
                
                #ifdef DEBUG_KEYREMO
                if( *AutoKey ) {
                  dPuts(" ---> AutoKey ");
                }
                else {
                  dPuts(" ---> New Key ");
                }
                #endif
              
                *DataCode = _RemoDataCode;
                return 1;
              }
              
              #elif defined REMO_NEC
              extern DATA   BYTE   RemoData[4];
              
              BYTE IsRemoDataReady(BYTE *DataCode, BYTE *AutoKey)
              {
                static BYTE AutoWait=0;
                static IDATA BYTE LastDataCode=0xff;
                static IDATA BYTE repeatcnt=0;
                BYTE ret =0 ;
              
                *AutoKey = 0;
                switch ( RemoDataReady ) {
              
                case 0: return 0;
              
                case 1:
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 87  

                  #ifdef DEBUG_KEYREMO
                  dPrintf("\r\nNEC RemoData = %02x %02x %02x %02x", (WORD)RemoData[0], (WORD)RemoData[1], (WORD)RemoData[2
             -], (WORD)RemoData[3] );
                  #endif
                  if( (RemoData[0]==REMO_CUSTOM1) && (RemoData[1]==REMO_CUSTOM2 ) && (RemoData[2]+RemoData[3])==0xff ) {
                    RemoDataCode = RemoData[2];
                    LastDataCode = RemoDataCode;
                    AutoWait = 0;
                    *AutoKey = 0;
                    repeatcnt = 0;
                  }
                  else {
                    RemoDataCode = 0xff;
                    LastDataCode = 0xff;
              
                    EnableRemoconInt();   //
                    return 0;
                  }
                  break;
              
                case 2:
                  AutoWait++;
                  if( AutoWait>=6 ) {
                    RemoDataCode = LastDataCode;
                    repeatcnt++;
                    if( repeatcnt>=5 ) {
                      AutoWait = 5;
                    }
                    else
                      AutoWait = 4;
              
                    *AutoKey = 1;
                  }
                  else {
                    EnableRemoconInt();   //
                    return 0;
                  }
                  break;
              
                }
              
                EnableRemoconInt();   ////LJY052902
                if( RemoDataCode==0xff )  return 0;
              
                #ifdef DEBUG_KEYREMO
                dPrintf("(R-D:%02x)  ", (WORD)RemoDataCode);
                #endif
              
                *DataCode = RemoDataCode;
                return 1;
              }
              
              #endif  // REMO_NEC
1266          
1267          #ifdef SUPPORT_2835_CLK_TUNE_BACK_DOOR  //Pinchi 20160929 add
1268          void HS_Display2835ClkTuneVal(WORD val)
1269          {
1270   1        BYTE mstr[]={ ' ',' ' };
1271   1        //Printf("\r\n[MSG]Display2835ClkTuneVal()=> enter to draw 2835ClkTuneVal",0);  //pinchi test
1272   1        mstr[1] =  val % 10 + '0';   val /= 10;
1273   1        mstr[0] = val + '0';
1274   1      
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 88  

1275   1        InitOSDWindow(Init_Osd_DisplayInput_B);
1276   1        SetDisplayedOSD(INPUTINFO);
1277   1        ClearDataCnt(INPUTINFO_ADDR, 2);
1278   1        DrawAttrCnt(INPUTINFO_ADDR , BG_COLOR_CYAN|CH_COLOR_WHITE, 2);
1279   1        WriteStringToAddr(INPUTINFO_ADDR , mstr, 2);
1280   1        
1281   1        ShowOSDWindow(INPUTINFO_OSDWIN-1,TRUE);
1282   1        ShowOSDWindowAll(1);  //0x09c  第4bit : OSD ON, 1: OSD OFF
1283   1      }
1284          #endif
1285          
1286          
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 89  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com00CA (BEGIN)
0000         L?0203:
0000         L?0204:
0000 AFA0              MOV     R7,P2
0002 EF                MOV     A,R7
0003 F4                CPL     A
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 5490              ANL     A,#090H
0008 6490              XRL     A,#090H
000A 22                RET     
000B         L?0208:
000B 7C00              MOV     R4,#00H
000D 7D0A              MOV     R5,#0AH
000F AE02              MOV     R6,AR2
0011 020000      E     LJMP    ?C?UIDIV
             ; FUNCTION Com00CA (END)

             ; FUNCTION RemoMenu_MenuKey (BEGIN)
                                           ; SOURCE LINE # 120
                                           ; SOURCE LINE # 121
                                           ; SOURCE LINE # 125
0000 120000      E     LCALL   GetDisplayedOSD
0003 EF                MOV     A,R7
0004 30E103            JNB     ACC.1,?C0001
0007 020000      E     LJMP    OSDHighMenu
000A         ?C0001:
                                           ; SOURCE LINE # 127
                                           ; SOURCE LINE # 129
000A 120000      E     LCALL   ClearOSDInfo
                                           ; SOURCE LINE # 130
000D 7DFF              MOV     R5,#0FFH
                                           ; SOURCE LINE # 131
000F 120000      R     LCALL   L?0206
                                           ; SOURCE LINE # 132
0012 7D82              MOV     R5,#082H
                                           ; SOURCE LINE # 133
0014 120000      R     LCALL   L?0206
                                           ; SOURCE LINE # 134
0017 E4                CLR     A
0018 FB                MOV     R3,A
0019 7DFF              MOV     R5,#0FFH
001B 7F8A              MOV     R7,#08AH
001D 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 137
0020 120000      E     LCALL   OpenOSDMenu
                                           ; SOURCE LINE # 138
                                           ; SOURCE LINE # 139
0023         ?C0003:
0023 22                RET     
0024         L?0206:
0024 7B01              MOV     R3,#01H
0026 7F8A              MOV     R7,#08AH
0028 120000      E     LCALL   _WriteI2C
002B 7F05              MOV     R7,#05H
002D 7E00              MOV     R6,#00H
002F 120000      E     LCALL   _Wait_ms
0032 22                RET     
             ; FUNCTION RemoMenu_MenuKey (END)
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 90  


             ; FUNCTION RemoChnUp_UpKey (BEGIN)
                                           ; SOURCE LINE # 142
                                           ; SOURCE LINE # 143
                                           ; SOURCE LINE # 151
0000 120000      E     LCALL   GetDisplayedOSD
0003 EF                MOV     A,R7
0004 30E105            JNB     ACC.1,?C0006
                                           ; SOURCE LINE # 162
0007 7F01              MOV     R7,#01H
0009 120000      E     LCALL   _OSDCursorMove
                                           ; SOURCE LINE # 168
000C         ?C0006:
000C 22                RET     
             ; FUNCTION RemoChnUp_UpKey (END)

             ; FUNCTION RemoChnDn_DnKey (BEGIN)
                                           ; SOURCE LINE # 170
                                           ; SOURCE LINE # 171
                                           ; SOURCE LINE # 179
0000 120000      E     LCALL   GetDisplayedOSD
0003 EF                MOV     A,R7
0004 30E105            JNB     ACC.1,?C0009
                                           ; SOURCE LINE # 180
0007 7F02              MOV     R7,#02H
0009 120000      E     LCALL   _OSDCursorMove
                                           ; SOURCE LINE # 181
                                           ; SOURCE LINE # 187
000C         ?C0009:
000C 22                RET     
             ; FUNCTION RemoChnDn_DnKey (END)

             ; FUNCTION RemoVolUp_RightKey (BEGIN)
                                           ; SOURCE LINE # 189
                                           ; SOURCE LINE # 190
                                           ; SOURCE LINE # 198
0000 120000      E     LCALL   GetDisplayedOSD
0003 EF                MOV     A,R7
0004 30E10B            JNB     ACC.1,?C0010
                                           ; SOURCE LINE # 199
0007 300005      E     JNB     OnChangingValue,?C0011
000A 7F01              MOV     R7,#01H
000C 020000      E     LJMP    _OSDValueUpDn
000F         ?C0011:
                                           ; SOURCE LINE # 200
000F 020000      E     LJMP    OSDSelect
                                           ; SOURCE LINE # 201
0012         ?C0010:
                                           ; SOURCE LINE # 203
                                           ; SOURCE LINE # 209
                                           ; SOURCE LINE # 210
0012 7F01              MOV     R7,#01H
0014 120000      E     LCALL   _ChangeVol
                                           ; SOURCE LINE # 211
0017 120000      E     LCALL   DisplayVol
                                           ; SOURCE LINE # 212
                                           ; SOURCE LINE # 213
                                           ; SOURCE LINE # 214
001A         ?C0014:
001A 22                RET     
             ; FUNCTION RemoVolUp_RightKey (END)

C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 91  

             ; FUNCTION RemoVolDn_LeftKey (BEGIN)
                                           ; SOURCE LINE # 216
                                           ; SOURCE LINE # 217
                                           ; SOURCE LINE # 225
0000 120000      E     LCALL   GetDisplayedOSD
0003 EF                MOV     A,R7
0004 30E10B            JNB     ACC.1,?C0015
                                           ; SOURCE LINE # 226
                                           ; SOURCE LINE # 227
0007 300005      E     JNB     OnChangingValue,?C0016
                                           ; SOURCE LINE # 228
000A 7F02              MOV     R7,#02H
000C 020000      E     LJMP    _OSDValueUpDn
000F         ?C0016:
                                           ; SOURCE LINE # 230
000F 020000      E     LJMP    OSDHighMenu
                                           ; SOURCE LINE # 231
0012         ?C0015:
                                           ; SOURCE LINE # 233
                                           ; SOURCE LINE # 239
                                           ; SOURCE LINE # 240
0012 7FFF              MOV     R7,#0FFH
0014 120000      E     LCALL   _ChangeVol
                                           ; SOURCE LINE # 241
0017 120000      E     LCALL   DisplayVol
                                           ; SOURCE LINE # 242
                                           ; SOURCE LINE # 243
                                           ; SOURCE LINE # 244
001A         ?C0019:
001A 22                RET     
             ; FUNCTION RemoVolDn_LeftKey (END)

             ; FUNCTION _ActionRemo (BEGIN)
                                           ; SOURCE LINE # 249
0000 900000      R     MOV     DPTR,#_RemoDataCode
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 250
                                           ; SOURCE LINE # 251
0008 120000      E     LCALL   SetOSDLastKeyInTime
                                           ; SOURCE LINE # 271
000B 900000      R     MOV     DPTR,#_RemoDataCode
000E E0                MOVX    A,@DPTR
000F 120000      E     LCALL   ?C?CCASE
0012 0000        R     DW      ?C0038
0014 00                DB      00H
0015 0000        R     DW      ?C0038
0017 01                DB      01H
0018 0000        R     DW      ?C0038
001A 02                DB      02H
001B 0000        R     DW      ?C0038
001D 03                DB      03H
001E 0000        R     DW      ?C0038
0020 04                DB      04H
0021 0000        R     DW      ?C0038
0023 05                DB      05H
0024 0000        R     DW      ?C0038
0026 06                DB      06H
0027 0000        R     DW      ?C0038
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 92  

0029 07                DB      07H
002A 0000        R     DW      ?C0038
002C 08                DB      08H
002D 0000        R     DW      ?C0038
002F 09                DB      09H
0030 0000        R     DW      ?C0021
0032 0C                DB      0CH
0033 0000        R     DW      ?C0046
0035 10                DB      010H
0036 0000        R     DW      ?C0047
0038 11                DB      011H
0039 0000        R     DW      ?C0043
003B 15                DB      015H
003C 0000        R     DW      ?C0050
003E 16                DB      016H
003F 0000        R     DW      ?C0041
0041 20                DB      020H
0042 0000        R     DW      ?C0042
0044 21                DB      021H
0045 0000        R     DW      ?C0025
0047 38                DB      038H
0048 0000        R     DW      ?C0026
004A 3A                DB      03AH
004B 0000        R     DW      ?C0048
004D 3F                DB      03FH
004E 0000              DW      00H
0050 0000        R     DW      ?C0020
                                           ; SOURCE LINE # 273
0052         ?C0021:
                                           ; SOURCE LINE # 277
0052 74FF              MOV     A,#0FFH
0054 900000      E     MOV     DPTR,#OSDLastKeyInTime
0057 F0                MOVX    @DPTR,A
0058 A3                INC     DPTR
0059 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 278
005A 900000      R     MOV     DPTR,#AutoKey
005D E0                MOVX    A,@DPTR
005E 6003              JZ      ?C0022
0060 7F01              MOV     R7,#01H
0062 22                RET     
0063         ?C0022:
                                           ; SOURCE LINE # 279
0063 7F00              MOV     R7,#00H
0065 22                RET     
                                           ; SOURCE LINE # 281
                                           ; SOURCE LINE # 294
                                           ; SOURCE LINE # 296
0066         ?C0025:
                                           ; SOURCE LINE # 300
0066 120000      E     LCALL   GetNextInputSelection
0069 120000      E     LCALL   _ChangeInput
                                           ; SOURCE LINE # 301
006C 7F01              MOV     R7,#01H
006E 22                RET     
                                           ; SOURCE LINE # 303
006F         ?C0026:
                                           ; SOURCE LINE # 307
006F 120000      E     LCALL   GetDisplayedOSD
0072 EF                MOV     A,R7
0073 30E405            JNB     ACC.4,?C0027
0076 120000      E     LCALL   ClearInput
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 93  

0079 8003              SJMP    ?C0028
007B         ?C0027:
                                           ; SOURCE LINE # 308
007B 120000      E     LCALL   DisplayInput
007E         ?C0028:
                                           ; SOURCE LINE # 309
007E 7F01              MOV     R7,#01H
0080 22                RET     
                                           ; SOURCE LINE # 311
                                           ; SOURCE LINE # 312
                                           ; SOURCE LINE # 313
                                           ; SOURCE LINE # 314
                                           ; SOURCE LINE # 315
                                           ; SOURCE LINE # 316
                                           ; SOURCE LINE # 317
                                           ; SOURCE LINE # 318
                                           ; SOURCE LINE # 319
                                           ; SOURCE LINE # 320
0081         ?C0038:
                                           ; SOURCE LINE # 324
0081 900000      R     MOV     DPTR,#AutoKey
0084 E0                MOVX    A,@DPTR
0085         ?C0039:
                                           ; SOURCE LINE # 326
0085 7F01              MOV     R7,#01H
0087 22                RET     
                                           ; SOURCE LINE # 327
                                           ; SOURCE LINE # 329
0088         ?C0041:
                                           ; SOURCE LINE # 333
0088 120000      R     LCALL   RemoChnUp_UpKey
                                           ; SOURCE LINE # 334
008B 803E              SJMP    ?C0020
                                           ; SOURCE LINE # 336
008D         ?C0042:
                                           ; SOURCE LINE # 340
008D 120000      R     LCALL   RemoChnDn_DnKey
                                           ; SOURCE LINE # 341
0090 8039              SJMP    ?C0020
                                           ; SOURCE LINE # 343
0092         ?C0043:
                                           ; SOURCE LINE # 347
0092 900000      R     MOV     DPTR,#AutoKey
0095 E0                MOVX    A,@DPTR
0096 6003              JZ      ?C0044
0098 7F01              MOV     R7,#01H
009A 22                RET     
009B         ?C0044:
                                           ; SOURCE LINE # 348
009B 120000      E     LCALL   GetDisplayedOSD
009E EF                MOV     A,R7
009F 30E129            JNB     ACC.1,?C0020
                                           ; SOURCE LINE # 349
00A2 120000      E     LCALL   OSDSelect
                                           ; SOURCE LINE # 350
                                           ; SOURCE LINE # 351
00A5 8024              SJMP    ?C0020
                                           ; SOURCE LINE # 353
00A7         ?C0046:
                                           ; SOURCE LINE # 357
00A7 120000      R     LCALL   RemoVolUp_RightKey
                                           ; SOURCE LINE # 358
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 94  

00AA 801F              SJMP    ?C0020
                                           ; SOURCE LINE # 359
00AC         ?C0047:
                                           ; SOURCE LINE # 363
00AC 120000      R     LCALL   RemoVolDn_LeftKey
                                           ; SOURCE LINE # 364
00AF 801A              SJMP    ?C0020
                                           ; SOURCE LINE # 367
00B1         ?C0048:
                                           ; SOURCE LINE # 371
00B1 900000      R     MOV     DPTR,#AutoKey
00B4 E0                MOVX    A,@DPTR
00B5 6003              JZ      ?C0049
00B7 7F01              MOV     R7,#01H
00B9 22                RET     
00BA         ?C0049:
                                           ; SOURCE LINE # 375
00BA 120000      R     LCALL   RemoMenu_MenuKey
                                           ; SOURCE LINE # 377
00BD 800C              SJMP    ?C0020
                                           ; SOURCE LINE # 379
00BF         ?C0050:
                                           ; SOURCE LINE # 383
00BF 120000      E     LCALL   GetDisplayedOSD
00C2 EF                MOV     A,R7
00C3 30E105            JNB     ACC.1,?C0020
                                           ; SOURCE LINE # 384
00C6 7FF4              MOV     R7,#0F4H
00C8 120000      E     LCALL   _DoAction
                                           ; SOURCE LINE # 385
                                           ; SOURCE LINE # 405
00CB         ?C0020:
                                           ; SOURCE LINE # 417
00CB 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 418
00CD         ?C0023:
00CD 22                RET     
             ; FUNCTION _ActionRemo (END)

             ; FUNCTION CheckKeyIn (BEGIN)
                                           ; SOURCE LINE # 420
                                           ; SOURCE LINE # 421
                                           ; SOURCE LINE # 422
0000 900000      R     MOV     DPTR,#ret
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 425
0006 300026      R     JNB     IsEnter2835ClkTune,?C0052
0009 200023      R     JB      IsRun2835ClkTune,?C0052
                                           ; SOURCE LINE # 426
                                           ; SOURCE LINE # 427
000C C3                CLR     C
000D E500        E     MOV     A,SystemClock+03H
000F 9500        R     SUBB    A,Enter2835TuneClock+03H
0011 FF                MOV     R7,A
0012 E500        E     MOV     A,SystemClock+02H
0014 9500        R     SUBB    A,Enter2835TuneClock+02H
0016 FE                MOV     R6,A
0017 E500        E     MOV     A,SystemClock+01H
0019 9500        R     SUBB    A,Enter2835TuneClock+01H
001B FD                MOV     R5,A
001C E500        E     MOV     A,SystemClock
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 95  

001E 9500        R     SUBB    A,Enter2835TuneClock
0020 FC                MOV     R4,A
0021 E4                CLR     A
0022 7B0A              MOV     R3,#0AH
0024 FA                MOV     R2,A
0025 F9                MOV     R1,A
0026 F8                MOV     R0,A
0027 D3                SETB    C
0028 120000      E     LCALL   ?C?ULCMP
002B 5002              JNC     ?C0052
                                           ; SOURCE LINE # 428
002D C200        R     CLR     IsEnter2835ClkTune
                                           ; SOURCE LINE # 429
002F         ?C0052:
                                           ; SOURCE LINE # 432
002F 7F01              MOV     R7,#01H
0031 120000      R     LCALL   _GetKey
0034 900000      R     MOV     DPTR,#ikey
0037 EF                MOV     A,R7
0038 F0                MOVX    @DPTR,A
0039 7003              JNZ     $ + 5H
003B 020000      R     LJMP    ?C0054
                                           ; SOURCE LINE # 433
                                           ; SOURCE LINE # 436
003E E0                MOVX    A,@DPTR
003F 24F8              ADD     A,#0F8H
0041 601C              JZ      ?C0057
0043 24F8              ADD     A,#0F8H
0045 6020              JZ      ?C0058
0047 24F0              ADD     A,#0F0H
0049 6024              JZ      ?C0059
004B 24E0              ADD     A,#0E0H
004D 6028              JZ      ?C0060
004F 24C0              ADD     A,#0C0H
0051 602C              JZ      ?C0061
0053 247C              ADD     A,#07CH
0055 7030              JNZ     ?C0062
                                           ; SOURCE LINE # 437
0057         ?C0056:
0057 7BFF              MOV     R3,#0FFH
0059 7A00        R     MOV     R2,#HIGH ?SC_0
005B 7900        R     MOV     R1,#LOW ?SC_0
005D 802E              SJMP    ?C0171
                                           ; SOURCE LINE # 438
005F         ?C0057:
005F 7BFF              MOV     R3,#0FFH
0061 7A00        R     MOV     R2,#HIGH ?SC_20
0063 7900        R     MOV     R1,#LOW ?SC_20
0065         ?C0166:
0065 8026              SJMP    ?C0171
                                           ; SOURCE LINE # 439
0067         ?C0058:
0067 7BFF              MOV     R3,#0FFH
0069 7A00        R     MOV     R2,#HIGH ?SC_39
006B 7900        R     MOV     R1,#LOW ?SC_39
006D         ?C0167:
006D 801E              SJMP    ?C0171
                                           ; SOURCE LINE # 440
006F         ?C0059:
006F 7BFF              MOV     R3,#0FFH
0071 7A00        R     MOV     R2,#HIGH ?SC_65
0073 7900        R     MOV     R1,#LOW ?SC_65
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 96  

0075         ?C0168:
0075 8016              SJMP    ?C0171
                                           ; SOURCE LINE # 441
0077         ?C0060:
0077 7BFF              MOV     R3,#0FFH
0079 7A00        R     MOV     R2,#HIGH ?SC_82
007B 7900        R     MOV     R1,#LOW ?SC_82
007D         ?C0169:
007D 800E              SJMP    ?C0171
                                           ; SOURCE LINE # 442
007F         ?C0061:
007F 7BFF              MOV     R3,#0FFH
0081 7A00        R     MOV     R2,#HIGH ?SC_101
0083 7900        R     MOV     R1,#LOW ?SC_101
0085         ?C0170:
0085 8006              SJMP    ?C0171
                                           ; SOURCE LINE # 443
0087         ?C0062:
0087 7BFF              MOV     R3,#0FFH
0089 7A00        R     MOV     R2,#HIGH ?SC_125
008B 7900        R     MOV     R1,#LOW ?SC_125
008D         ?C0171:
008D 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 444
0090         ?C0055:
                                           ; SOURCE LINE # 454
0090 900000      R     MOV     DPTR,#OSD_LOCKF
0093 E0                MOVX    A,@DPTR
0094 900000      R     MOV     DPTR,#OSD_LOCK
0097 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 460
0098 120000      R     LCALL   L?0203
009B 704F              JNZ     ?C0063
009D E0                MOVX    A,@DPTR
009E 704C              JNZ     ?C0063
                                           ; SOURCE LINE # 462
                                           ; SOURCE LINE # 463
00A0 120000      R     LCALL   L?0207
                                           ; SOURCE LINE # 467
00A3 120000      R     LCALL   L?0203
00A6 6008              JZ      ?C0065
00A8 900000      R     MOV     DPTR,#LockKeyState
00AB E0                MOVX    A,@DPTR
00AC 6403              XRL     A,#03H
00AE 703C              JNZ     ?C0063
00B0         ?C0065:
                                           ; SOURCE LINE # 469
                                           ; SOURCE LINE # 470
00B0 7D01              MOV     R5,#01H
00B2 7FAC              MOV     R7,#0ACH
00B4 7E00              MOV     R6,#00H
00B6 120000      E     LCALL   _WriteEEP
                                           ; SOURCE LINE # 471
00B9 900000      R     MOV     DPTR,#OSD_LOCK
00BC 7401              MOV     A,#01H
00BE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 472
00BF 900000      R     MOV     DPTR,#OSD_LOCKF
00C2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 473
00C3 FF                MOV     R7,A
00C4 120000      E     LCALL   _DisplayInformation
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 97  

                                           ; SOURCE LINE # 474
00C7 E4                CLR     A
00C8 900000      R     MOV     DPTR,#ikey
00CB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 475
00CC 120000      R     LCALL   L?0207
                                           ; SOURCE LINE # 477
00CF 900000      E     MOV     DPTR,#TriggerFlag
00D2 E0                MOVX    A,@DPTR
00D3 30E505            JNB     ACC.5,?C0066
                                           ; SOURCE LINE # 478
                                           ; SOURCE LINE # 479
00D6 120000      E     LCALL   DisplayGaugeOSD
                                           ; SOURCE LINE # 480
00D9 800F              SJMP    ?C0067
00DB         ?C0066:
                                           ; SOURCE LINE # 482
                                           ; SOURCE LINE # 483
00DB 120000      E     LCALL   ClearGAUGEINFO
                                           ; SOURCE LINE # 484
00DE E4                CLR     A
00DF 900000      R     MOV     DPTR,#lock_keycnt
00E2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 485
00E3 900000      R     MOV     DPTR,#LockKeyState
00E6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 486
00E7 120000      E     LCALL   DisplayInput
                                           ; SOURCE LINE # 488
00EA         ?C0067:
                                           ; SOURCE LINE # 492
00EA C200        E     CLR     IsDrawNoVideoSignal
                                           ; SOURCE LINE # 496
                                           ; SOURCE LINE # 497
00EC         ?C0063:
                                           ; SOURCE LINE # 499
00EC 900000      E     MOV     DPTR,#TriggerFlag
00EF E0                MOVX    A,@DPTR
00F0 600C              JZ      ?C0068
00F2 900000      R     MOV     DPTR,#ikey
00F5 E0                MOVX    A,@DPTR
00F6 6410              XRL     A,#010H
00F8 6004              JZ      ?C0068
                                           ; SOURCE LINE # 500
                                           ; SOURCE LINE # 501
00FA E4                CLR     A
                                           ; SOURCE LINE # 502
00FB 020000      R     LJMP    ?C0194
                                           ; SOURCE LINE # 503
00FE         ?C0068:
                                           ; SOURCE LINE # 506
00FE 900000      R     MOV     DPTR,#LockKeyState
0101 E0                MOVX    A,@DPTR
0102 6403              XRL     A,#03H
0104 702E              JNZ     ?C0070
0106 900000      R     MOV     DPTR,#OSD_LOCK
0109 E0                MOVX    A,@DPTR
010A 7028              JNZ     ?C0070
                                           ; SOURCE LINE # 507
                                           ; SOURCE LINE # 508
010C 7D01              MOV     R5,#01H
010E 7FAC              MOV     R7,#0ACH
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 98  

0110 FE                MOV     R6,A
0111 120000      E     LCALL   _WriteEEP
                                           ; SOURCE LINE # 509
0114 900000      R     MOV     DPTR,#OSD_LOCKF
0117 7401              MOV     A,#01H
0119 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 510
011A FF                MOV     R7,A
011B 120000      E     LCALL   _DisplayInformation
                                           ; SOURCE LINE # 511
011E 7FD0              MOV     R7,#0D0H
0120 7E07              MOV     R6,#07H
0122 120000      E     LCALL   _Wait_ms
                                           ; SOURCE LINE # 513
0125 120000      E     LCALL   DisplayInput
                                           ; SOURCE LINE # 514
0128 E4                CLR     A
0129 900000      R     MOV     DPTR,#LockKeyState
012C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 515
012D 7F01              MOV     R7,#01H
012F 120000      E     LCALL   _PowerLED
                                           ; SOURCE LINE # 518
0132 C200        E     CLR     IsDrawNoVideoSignal
                                           ; SOURCE LINE # 520
0134         ?C0070:
                                           ; SOURCE LINE # 523
0134 900000      R     MOV     DPTR,#lock_keycnt
0137 E0                MOVX    A,@DPTR
0138 7013              JNZ     ?C0071
013A 900000      R     MOV     DPTR,#OSD_LOCK
013D E0                MOVX    A,@DPTR
013E 700D              JNZ     ?C0071
0140 900000      R     MOV     DPTR,#LockKeyState
0143 E0                MOVX    A,@DPTR
0144 6007              JZ      ?C0071
                                           ; SOURCE LINE # 524
                                           ; SOURCE LINE # 525
0146 E4                CLR     A
0147 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 526
0148 7F01              MOV     R7,#01H
014A 120000      E     LCALL   _PowerLED
                                           ; SOURCE LINE # 527
014D         ?C0071:
                                           ; SOURCE LINE # 553
014D 900000      R     MOV     DPTR,#ikey
0150 E0                MOVX    A,@DPTR
0151 6022              JZ      ?C0072
0153 A3                INC     DPTR
0154 E0                MOVX    A,@DPTR
0155 701E              JNZ     ?C0072
0157 120000      R     LCALL   L?0204
015A 6019              JZ      ?C0072
015C 900000      E     MOV     DPTR,#TriggerFlag
015F E0                MOVX    A,@DPTR
0160 7013              JNZ     ?C0072
                                           ; SOURCE LINE # 554
                                           ; SOURCE LINE # 555
0162 120000      E     LCALL   ClearOSDInfo
                                           ; SOURCE LINE # 556
0165 E4                CLR     A
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 99  

                                           ; SOURCE LINE # 557
                                           ; SOURCE LINE # 558
                                           ; SOURCE LINE # 559
0166 120000      R     LCALL   L?0205
                                           ; SOURCE LINE # 561
0169 7A00        R     MOV     R2,#HIGH ?SC_152
016B 7900        R     MOV     R1,#LOW ?SC_152
016D 120000      R     LCALL   L?0200
                                           ; SOURCE LINE # 564
0170 C200        E     CLR     IsDrawNoVideoSignal
                                           ; SOURCE LINE # 566
0172 7F01              MOV     R7,#01H
0174 22                RET     
                                           ; SOURCE LINE # 567
0175         ?C0072:
                                           ; SOURCE LINE # 570
0175 120000      E     LCALL   SetOSDLastKeyInTime
                                           ; SOURCE LINE # 572
0178 900000      R     MOV     DPTR,#ikey
017B E0                MOVX    A,@DPTR
017C 120000      E     LCALL   ?C?CCASE
017F 0000        R     DW      ?C0074
0181 04                DB      04H
0182 0000        R     DW      ?C0100
0184 08                DB      08H
0185 0000        R     DW      ?C0155
0187 0C                DB      0CH
0188 0000        R     DW      ?C0136
018A 10                DB      010H
018B 0000        R     DW      ?C0115
018D 20                DB      020H
018E 0000        R     DW      ?C0123
0190 40                DB      040H
0191 0000        R     DW      ?C0131
0193 80                DB      080H
0194 0000        R     DW      ?C0151
0196 90                DB      090H
0197 0000              DW      00H
0199 0000        R     DW      ?C0054
                                           ; SOURCE LINE # 573
019B         ?C0074:
                                           ; SOURCE LINE # 574
019B 7BFF              MOV     R3,#0FFH
019D 7A00        R     MOV     R2,#HIGH ?SC_168
019F 7900        R     MOV     R1,#LOW ?SC_168
01A1 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 576
01A4 200003      R     JB      IsRun2835ClkTune,$ + 6H
01A7 020000      R     LJMP    ?C0075
                                           ; SOURCE LINE # 577
                                           ; SOURCE LINE # 578
01AA C3                CLR     C
01AB E500        R     MOV     A,b2835ClkTuneVal
01AD 940F              SUBB    A,#0FH
01AF 7480              MOV     A,#080H
01B1 9480              SUBB    A,#080H
01B3 4005              JC      ?C0076
                                           ; SOURCE LINE # 579
01B5 E4                CLR     A
01B6 F500        R     MOV     b2835ClkTuneVal,A
01B8 8002              SJMP    ?C0077
01BA         ?C0076:
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 100 

                                           ; SOURCE LINE # 581
01BA 0500        R     INC     b2835ClkTuneVal
01BC         ?C0077:
                                           ; SOURCE LINE # 583
01BC E500        R     MOV     A,b2835ClkTuneVal
01BE 120000      E     LCALL   ?C?CCASE
01C1 0000        R     DW      ?C0081
01C3 01                DB      01H
01C4 0000        R     DW      ?C0082
01C6 02                DB      02H
01C7 0000        R     DW      ?C0083
01C9 03                DB      03H
01CA 0000        R     DW      ?C0084
01CC 04                DB      04H
01CD 0000        R     DW      ?C0085
01CF 05                DB      05H
01D0 0000        R     DW      ?C0086
01D2 06                DB      06H
01D3 0000        R     DW      ?C0087
01D5 07                DB      07H
01D6 0000        R     DW      ?C0088
01D8 08                DB      08H
01D9 0000        R     DW      ?C0089
01DB 09                DB      09H
01DC 0000        R     DW      ?C0090
01DE 0A                DB      0AH
01DF 0000        R     DW      ?C0091
01E1 0B                DB      0BH
01E2 0000        R     DW      ?C0092
01E4 0C                DB      0CH
01E5 0000        R     DW      ?C0093
01E7 0D                DB      0DH
01E8 0000        R     DW      ?C0094
01EA 0E                DB      0EH
01EB 0000        R     DW      ?C0095
01ED 0F                DB      0FH
01EE 0000              DW      00H
01F0 0000        R     DW      ?C0080
                                           ; SOURCE LINE # 584
                                           ; SOURCE LINE # 585
                                           ; SOURCE LINE # 586
01F2         ?C0080:
                                           ; SOURCE LINE # 587
01F2 7BFF              MOV     R3,#0FFH
01F4 7A00        R     MOV     R2,#HIGH ?SC_181
01F6 7900        R     MOV     R1,#LOW ?SC_181
                                           ; SOURCE LINE # 588
01F8 8076              SJMP    ?C0187
                                           ; SOURCE LINE # 590
01FA         ?C0081:
                                           ; SOURCE LINE # 591
01FA 7BFF              MOV     R3,#0FFH
01FC 7A00        R     MOV     R2,#HIGH ?SC_200
01FE 7900        R     MOV     R1,#LOW ?SC_200
0200         ?C0173:
                                           ; SOURCE LINE # 592
0200 806E              SJMP    ?C0187
                                           ; SOURCE LINE # 594
0202         ?C0082:
                                           ; SOURCE LINE # 595
0202 7BFF              MOV     R3,#0FFH
0204 7A00        R     MOV     R2,#HIGH ?SC_219
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 101 

0206 7900        R     MOV     R1,#LOW ?SC_219
0208         ?C0174:
                                           ; SOURCE LINE # 596
0208 8066              SJMP    ?C0187
                                           ; SOURCE LINE # 598
020A         ?C0083:
                                           ; SOURCE LINE # 599
020A 7BFF              MOV     R3,#0FFH
020C 7A00        R     MOV     R2,#HIGH ?SC_238
020E 7900        R     MOV     R1,#LOW ?SC_238
0210         ?C0175:
                                           ; SOURCE LINE # 600
0210 805E              SJMP    ?C0187
                                           ; SOURCE LINE # 602
0212         ?C0084:
                                           ; SOURCE LINE # 603
0212 7BFF              MOV     R3,#0FFH
0214 7A00        R     MOV     R2,#HIGH ?SC_257
0216 7900        R     MOV     R1,#LOW ?SC_257
0218         ?C0176:
                                           ; SOURCE LINE # 604
0218 8056              SJMP    ?C0187
                                           ; SOURCE LINE # 606
021A         ?C0085:
                                           ; SOURCE LINE # 607
021A 7BFF              MOV     R3,#0FFH
021C 7A00        R     MOV     R2,#HIGH ?SC_276
021E 7900        R     MOV     R1,#LOW ?SC_276
0220         ?C0177:
                                           ; SOURCE LINE # 608
0220 804E              SJMP    ?C0187
                                           ; SOURCE LINE # 610
0222         ?C0086:
                                           ; SOURCE LINE # 611
0222 7BFF              MOV     R3,#0FFH
0224 7A00        R     MOV     R2,#HIGH ?SC_295
0226 7900        R     MOV     R1,#LOW ?SC_295
0228         ?C0178:
                                           ; SOURCE LINE # 612
0228 8046              SJMP    ?C0187
                                           ; SOURCE LINE # 614
022A         ?C0087:
                                           ; SOURCE LINE # 615
022A 7BFF              MOV     R3,#0FFH
022C 7A00        R     MOV     R2,#HIGH ?SC_314
022E 7900        R     MOV     R1,#LOW ?SC_314
0230         ?C0179:
                                           ; SOURCE LINE # 616
0230 803E              SJMP    ?C0187
                                           ; SOURCE LINE # 618
0232         ?C0088:
                                           ; SOURCE LINE # 619
0232 7BFF              MOV     R3,#0FFH
0234 7A00        R     MOV     R2,#HIGH ?SC_333
0236 7900        R     MOV     R1,#LOW ?SC_333
0238         ?C0180:
                                           ; SOURCE LINE # 620
0238 8036              SJMP    ?C0187
                                           ; SOURCE LINE # 622
023A         ?C0089:
                                           ; SOURCE LINE # 623
023A 7BFF              MOV     R3,#0FFH
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 102 

023C 7A00        R     MOV     R2,#HIGH ?SC_352
023E 7900        R     MOV     R1,#LOW ?SC_352
0240         ?C0181:
                                           ; SOURCE LINE # 624
0240 802E              SJMP    ?C0187
                                           ; SOURCE LINE # 626
0242         ?C0090:
                                           ; SOURCE LINE # 627
0242 7BFF              MOV     R3,#0FFH
0244 7A00        R     MOV     R2,#HIGH ?SC_371
0246 7900        R     MOV     R1,#LOW ?SC_371
0248         ?C0182:
                                           ; SOURCE LINE # 628
0248 8026              SJMP    ?C0187
                                           ; SOURCE LINE # 630
024A         ?C0091:
                                           ; SOURCE LINE # 631
024A 7BFF              MOV     R3,#0FFH
024C 7A00        R     MOV     R2,#HIGH ?SC_390
024E 7900        R     MOV     R1,#LOW ?SC_390
0250         ?C0183:
                                           ; SOURCE LINE # 632
0250 801E              SJMP    ?C0187
                                           ; SOURCE LINE # 634
0252         ?C0092:
                                           ; SOURCE LINE # 635
0252 7BFF              MOV     R3,#0FFH
0254 7A00        R     MOV     R2,#HIGH ?SC_409
0256 7900        R     MOV     R1,#LOW ?SC_409
0258         ?C0184:
                                           ; SOURCE LINE # 636
0258 8016              SJMP    ?C0187
                                           ; SOURCE LINE # 638
025A         ?C0093:
                                           ; SOURCE LINE # 639
025A 7BFF              MOV     R3,#0FFH
025C 7A00        R     MOV     R2,#HIGH ?SC_428
025E 7900        R     MOV     R1,#LOW ?SC_428
0260         ?C0185:
                                           ; SOURCE LINE # 640
0260 800E              SJMP    ?C0187
                                           ; SOURCE LINE # 642
0262         ?C0094:
                                           ; SOURCE LINE # 643
0262 7BFF              MOV     R3,#0FFH
0264 7A00        R     MOV     R2,#HIGH ?SC_447
0266 7900        R     MOV     R1,#LOW ?SC_447
0268         ?C0186:
                                           ; SOURCE LINE # 644
0268 8006              SJMP    ?C0187
                                           ; SOURCE LINE # 646
026A         ?C0095:
                                           ; SOURCE LINE # 647
026A 7BFF              MOV     R3,#0FFH
026C 7A00        R     MOV     R2,#HIGH ?SC_466
026E 7900        R     MOV     R1,#LOW ?SC_466
0270         ?C0187:
0270 120000      E     LCALL   _Puts
                                           ; SOURCE LINE # 648
                                           ; SOURCE LINE # 649
0273         ?C0078:
                                           ; SOURCE LINE # 651
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 103 

                                           ; SOURCE LINE # 652
0273 803A              SJMP    ?C0188
0275         ?C0075:
                                           ; SOURCE LINE # 655
                                           ; SOURCE LINE # 657
0275 200023      E     JB      SpeedDomeMode,?C0097
                                           ; SOURCE LINE # 658
                                           ; SOURCE LINE # 659
0278 900000      E     MOV     DPTR,#TriggerFlag
027B E0                MOVX    A,@DPTR
027C 6003              JZ      $ + 5H
027E 020000      R     LJMP    ?C0054
                                           ; SOURCE LINE # 660
                                           ; SOURCE LINE # 662
0281 FD                MOV     R5,A
0282 7F0C              MOV     R7,#0CH
0284 120000      R     LCALL   _ActionRemo
0287 900000      R     MOV     DPTR,#ret
028A EF                MOV     A,R7
028B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 663
028C E4                CLR     A
028D 900000      E     MOV     DPTR,#PowerFlag
0290 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 665
0291 FD                MOV     R5,A
0292 7FAB              MOV     R7,#0ABH
0294 FE                MOV     R6,A
0295 120000      E     LCALL   _WriteEEP
                                           ; SOURCE LINE # 666
                                           ; SOURCE LINE # 667
0298 020000      R     LJMP    ?C0054
029B         ?C0097:
                                           ; SOURCE LINE # 669
                                           ; SOURCE LINE # 670
029B C200        E     CLR     SpeedDomeMode
                                           ; SOURCE LINE # 674
029D 120000      E     LCALL   DisplayInput
                                           ; SOURCE LINE # 675
                                           ; SOURCE LINE # 676
                                           ; SOURCE LINE # 677
02A0 020000      R     LJMP    ?C0054
                                           ; SOURCE LINE # 679
02A3         ?C0100:
                                           ; SOURCE LINE # 680
02A3 7BFF              MOV     R3,#0FFH
02A5 7A00        R     MOV     R2,#HIGH ?SC_485
02A7 7900        R     MOV     R1,#LOW ?SC_485
02A9 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 683
02AC 30000A      R     JNB     IsRun2835ClkTune,?C0101
                                           ; SOURCE LINE # 684
                                           ; SOURCE LINE # 685
02AF         ?C0188:
02AF AF00        R     MOV     R7,b2835ClkTuneVal
02B1 7E00              MOV     R6,#00H
02B3 120000      R     LCALL   _HS_Display2835ClkTuneVal
                                           ; SOURCE LINE # 686
02B6 020000      R     LJMP    ?C0054
02B9         ?C0101:
                                           ; SOURCE LINE # 689
                                           ; SOURCE LINE # 713
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 104 

02B9 200041      E     JB      SpeedDomeMode,?C0103
                                           ; SOURCE LINE # 714
                                           ; SOURCE LINE # 716
02BC 900000      E     MOV     DPTR,#SEQFlag
02BF E0                MOVX    A,@DPTR
02C0 6003              JZ      $ + 5H
02C2 020000      R     LJMP    ?C0054
                                           ; SOURCE LINE # 717
                                           ; SOURCE LINE # 719
                                           ; SOURCE LINE # 720
02C5 900000      R     MOV     DPTR,#OSD_LOCK
02C8 E0                MOVX    A,@DPTR
02C9 700D              JNZ     ?C0106
                                           ; SOURCE LINE # 721
                                           ; SOURCE LINE # 723
                                           ; SOURCE LINE # 724
                                           ; SOURCE LINE # 725
                                           ; SOURCE LINE # 726
02CB 120000      R     LCALL   L?0205
                                           ; SOURCE LINE # 727
02CE 7BFF              MOV     R3,#0FFH
02D0 7A00        R     MOV     R2,#HIGH ?SC_500
02D2 7900        R     MOV     R1,#LOW ?SC_500
02D4 E4                CLR     A
                                           ; SOURCE LINE # 728
02D5 020000      R     LJMP    ?C0189
02D8         ?C0106:
                                           ; SOURCE LINE # 742
                                           ; SOURCE LINE # 743
02D8 120000      E     LCALL   GetDisplayedOSD
02DB EF                MOV     A,R7
02DC 30E10B            JNB     ACC.1,?C0108
                                           ; SOURCE LINE # 744
                                           ; SOURCE LINE # 745
02DF 300002      E     JNB     OnChangingValue,?C0109
                                           ; SOURCE LINE # 746
02E2 8010              SJMP    ?C0190
02E4         ?C0109:
                                           ; SOURCE LINE # 749
02E4 120000      E     LCALL   OSDSelect
                                           ; SOURCE LINE # 750
02E7 020000      R     LJMP    ?C0054
02EA         ?C0108:
                                           ; SOURCE LINE # 751
02EA 120000      E     LCALL   GetDisplayedOSD
02ED EF                MOV     A,R7
02EE 30E203            JNB     ACC.2,$ + 6H
02F1 020000      R     LJMP    ?C0054
                                           ; SOURCE LINE # 752
                                           ; SOURCE LINE # 757
                                           ; SOURCE LINE # 760
                                           ; SOURCE LINE # 780
02F4         ?C0190:
02F4 7F3F              MOV     R7,#03FH
02F6 120000      R     LCALL   L?0201
02F9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 781
                                           ; SOURCE LINE # 782
                                           ; SOURCE LINE # 783
02FA 020000      R     LJMP    ?C0054
02FD         ?C0103:
                                           ; SOURCE LINE # 785
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 105 

                                           ; SOURCE LINE # 786
02FD 7F09              MOV     R7,#09H
                                           ; SOURCE LINE # 787
                                           ; SOURCE LINE # 788
                                           ; SOURCE LINE # 789
                                           ; SOURCE LINE # 790
02FF 020000      R     LJMP    ?C0197
                                           ; SOURCE LINE # 794
0302         ?C0115:
                                           ; SOURCE LINE # 795
0302 200026      E     JB      SpeedDomeMode,?C0116
                                           ; SOURCE LINE # 796
                                           ; SOURCE LINE # 797
0305 120000      E     LCALL   GetDisplayedOSD
0308 EF                MOV     A,R7
0309 30E107            JNB     ACC.1,?C0117
                                           ; SOURCE LINE # 798
                                           ; SOURCE LINE # 799
030C 7F01              MOV     R7,#01H
030E 300034      E     JNB     OnChangingValue,?C0193
                                           ; SOURCE LINE # 800
0311 802C              SJMP    ?C0192
0313         ?C0117:
                                           ; SOURCE LINE # 810
                                           ; SOURCE LINE # 812
0313 7A00        R     MOV     R2,#HIGH ?SC_513
0315 7900        R     MOV     R1,#LOW ?SC_513
0317 120000      R     LCALL   L?0200
                                           ; SOURCE LINE # 815
031A 120000      E     LCALL   GetDisplayedOSD
031D EF                MOV     A,R7
031E 30E403            JNB     ACC.4,?C0121
0321 120000      E     LCALL   ClearOSDInfo
0324         ?C0121:
                                           ; SOURCE LINE # 817
0324 7F10              MOV     R7,#010H
0326 120000      R     LCALL   L?0201
0329         ?C0172:
                                           ; SOURCE LINE # 818
0329 8043              SJMP    ?C0194
                                           ; SOURCE LINE # 819
                                           ; SOURCE LINE # 820
032B         ?C0116:
                                           ; SOURCE LINE # 822
                                           ; SOURCE LINE # 823
032B 7F06              MOV     R7,#06H
032D         ?C0191:
                                           ; SOURCE LINE # 824
                                           ; SOURCE LINE # 826
                                           ; SOURCE LINE # 827
032D 020000      R     LJMP    ?C0197
                                           ; SOURCE LINE # 829
0330         ?C0123:
                                           ; SOURCE LINE # 830
0330 20003F      E     JB      SpeedDomeMode,?C0124
                                           ; SOURCE LINE # 831
                                           ; SOURCE LINE # 832
0333 120000      E     LCALL   GetDisplayedOSD
0336 EF                MOV     A,R7
0337 30E111            JNB     ACC.1,?C0125
                                           ; SOURCE LINE # 833
                                           ; SOURCE LINE # 834
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 106 

033A 7F02              MOV     R7,#02H
033C 300006      E     JNB     OnChangingValue,?C0126
                                           ; SOURCE LINE # 835
033F         ?C0192:
033F 120000      E     LCALL   _OSDValueUpDn
0342 020000      R     LJMP    ?C0054
0345         ?C0126:
                                           ; SOURCE LINE # 837
                                           ; SOURCE LINE # 841
0345         ?C0193:
0345 120000      E     LCALL   _OSDCursorMove
                                           ; SOURCE LINE # 842
                                           ; SOURCE LINE # 843
0348 020000      R     LJMP    ?C0054
034B         ?C0125:
                                           ; SOURCE LINE # 845
                                           ; SOURCE LINE # 847
034B 7BFF              MOV     R3,#0FFH
034D 7A00        R     MOV     R2,#HIGH ?SC_526
034F 7900        R     MOV     R1,#LOW ?SC_526
0351 E4                CLR     A
0352 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
0355 F0                MOVX    @DPTR,A
0356 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 850
0359 120000      E     LCALL   GetDisplayedOSD
035C EF                MOV     A,R7
035D 30E403            JNB     ACC.4,?C0129
0360 120000      E     LCALL   ClearOSDInfo
0363         ?C0129:
                                           ; SOURCE LINE # 852
0363 E4                CLR     A
0364 FD                MOV     R5,A
0365 7F11              MOV     R7,#011H
0367 120000      R     LCALL   _ActionRemo
036A 900000      R     MOV     DPTR,#ret
036D EF                MOV     A,R7
036E         ?C0194:
036E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 853
036F 7F01              MOV     R7,#01H
0371 22                RET     
                                           ; SOURCE LINE # 854
                                           ; SOURCE LINE # 855
0372         ?C0124:
                                           ; SOURCE LINE # 857
                                           ; SOURCE LINE # 858
0372 7F07              MOV     R7,#07H
0374         ?C0195:
                                           ; SOURCE LINE # 859
                                           ; SOURCE LINE # 861
                                           ; SOURCE LINE # 862
0374 020000      R     LJMP    ?C0197
                                           ; SOURCE LINE # 864
0377         ?C0131:
                                           ; SOURCE LINE # 865
0377 200020      E     JB      SpeedDomeMode,?C0132
                                           ; SOURCE LINE # 866
                                           ; SOURCE LINE # 867
037A 900000      E     MOV     DPTR,#SelectModeType
037D E0                MOVX    A,@DPTR
037E 700A              JNZ     ?C0133
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 107 

0380 120000      E     LCALL   GetDisplayedOSD
0383 EF                MOV     A,R7
0384 30E103            JNB     ACC.1,?C0133
                                           ; SOURCE LINE # 868
0387 120000      E     LCALL   CloseOSDMenu
038A         ?C0133:
                                           ; SOURCE LINE # 870
038A 120000      E     LCALL   GetDisplayedOSD
038D EF                MOV     A,R7
038E 30E403            JNB     ACC.4,?C0134
                                           ; SOURCE LINE # 871
0391 120000      E     LCALL   ClearInput
0394         ?C0134:
                                           ; SOURCE LINE # 873
0394 120000      E     LCALL   SetSelectMode
                                           ; SOURCE LINE # 874
0397 020000      R     LJMP    ?C0054
039A         ?C0132:
                                           ; SOURCE LINE # 876
                                           ; SOURCE LINE # 877
039A 7F05              MOV     R7,#05H
039C         ?C0196:
                                           ; SOURCE LINE # 878
                                           ; SOURCE LINE # 880
                                           ; SOURCE LINE # 881
039C 020000      R     LJMP    ?C0197
                                           ; SOURCE LINE # 885
039F         ?C0136:
                                           ; SOURCE LINE # 887
039F 900000      E     MOV     DPTR,#TriggerFlag
03A2 E0                MOVX    A,@DPTR
03A3 FF                MOV     R7,A
03A4 6009              JZ      ?C0137
03A6 900000      E     MOV     DPTR,#Priority
03A9 E0                MOVX    A,@DPTR
03AA 7003              JNZ     $ + 5H
03AC 020000      R     LJMP    ?C0054
                                           ; SOURCE LINE # 888
                                           ; SOURCE LINE # 891
03AF         ?C0137:
                                           ; SOURCE LINE # 892
03AF EF                MOV     A,R7
03B0 6046              JZ      ?C0139
03B2 900000      R     MOV     DPTR,#TR_JUMP_Flag
03B5 E0                MOVX    A,@DPTR
03B6 7040              JNZ     ?C0139
03B8 900000      E     MOV     DPTR,#Priority
03BB E0                MOVX    A,@DPTR
03BC 6401              XRL     A,#01H
03BE 7038              JNZ     ?C0139
                                           ; SOURCE LINE # 893
                                           ; SOURCE LINE # 894
03C0 7FAC              MOV     R7,#0ACH
03C2 FE                MOV     R6,A
03C3 120000      E     LCALL   _ReadEEP
03C6 EF                MOV     A,R7
03C7 6401              XRL     A,#01H
03C9 6003              JZ      $ + 5H
03CB 020000      R     LJMP    ?C0054
                                           ; SOURCE LINE # 895
                                           ; SOURCE LINE # 896
03CE 900000      E     MOV     DPTR,#TriggerFlag
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 108 

03D1 E0                MOVX    A,@DPTR
03D2 30E503            JNB     ACC.5,?C0141
                                           ; SOURCE LINE # 897
03D5 120000      E     LCALL   ClearGAUGEINFO
03D8         ?C0141:
                                           ; SOURCE LINE # 899
03D8 900000      R     MOV     DPTR,#TR_JUMP_Flag
03DB 7401              MOV     A,#01H
03DD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 901
03DE 900000      R     MOV     DPTR,#RELEASE_TR_JUMP_Flag
03E1 E0                MOVX    A,@DPTR
03E2 7008              JNZ     ?C0142
03E4 900000      E     MOV     DPTR,#NowModeState
03E7 E0                MOVX    A,@DPTR
03E8 900000      R     MOV     DPTR,#TR_JUMP_HOLD
03EB F0                MOVX    @DPTR,A
03EC         ?C0142:
                                           ; SOURCE LINE # 903
03EC 900000      R     MOV     DPTR,#RELEASE_TR_JUMP_Flag
03EF 7401              MOV     A,#01H
03F1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 905
03F2 900000      E     MOV     DPTR,#NowModeState
03F5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 907
                                           ; SOURCE LINE # 908
                                           ; SOURCE LINE # 910
03F6 803F              SJMP    ?C0198
03F8         ?C0139:
                                           ; SOURCE LINE # 911
03F8 200042      E     JB      SpeedDomeMode,?C0144
                                           ; SOURCE LINE # 912
                                           ; SOURCE LINE # 914
03FB 900000      R     MOV     DPTR,#TR_JUMP_Flag
03FE E0                MOVX    A,@DPTR
03FF 6017              JZ      ?C0145
                                           ; SOURCE LINE # 915
                                           ; SOURCE LINE # 916
0401 E4                CLR     A
0402 900000      E     MOV     DPTR,#TriggerFlag
0405 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 917
0406 900000      E     MOV     DPTR,#TriggerMode
0409 7407              MOV     A,#07H
040B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 918
040C E4                CLR     A
040D 900000      R     MOV     DPTR,#TR_JUMP_Flag
0410 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 919
0411 900000      E     MOV     DPTR,#NowModeState
0414 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 921
0415 020000      R     LJMP    ?C0054
0418         ?C0145:
                                           ; SOURCE LINE # 923
                                           ; SOURCE LINE # 926
0418 900000      E     MOV     DPTR,#SelectModeType
041B E0                MOVX    A,@DPTR
041C 700A              JNZ     ?C0147
041E 120000      E     LCALL   GetDisplayedOSD
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 109 

0421 EF                MOV     A,R7
0422 30E103            JNB     ACC.1,?C0147
                                           ; SOURCE LINE # 927
0425 120000      E     LCALL   CloseOSDMenu
0428         ?C0147:
                                           ; SOURCE LINE # 930
0428 900000      E     MOV     DPTR,#NowModeState
042B E0                MOVX    A,@DPTR
042C 7004              JNZ     ?C0148
                                           ; SOURCE LINE # 931
042E 04                INC     A
042F F0                MOVX    @DPTR,A
0430 8005              SJMP    ?C0149
0432         ?C0148:
                                           ; SOURCE LINE # 933
0432 E4                CLR     A
0433 900000      E     MOV     DPTR,#NowModeState
0436 F0                MOVX    @DPTR,A
0437         ?C0149:
                                           ; SOURCE LINE # 935
0437         ?C0198:
0437 120000      E     LCALL   SetJumpMode
                                           ; SOURCE LINE # 937
                                           ; SOURCE LINE # 938
043A 020000      R     LJMP    ?C0054
043D         ?C0144:
                                           ; SOURCE LINE # 940
                                           ; SOURCE LINE # 941
043D 7F04              MOV     R7,#04H
043F         ?C0197:
043F 120000      E     LCALL   _CAM_TxCommand_toRS485
                                           ; SOURCE LINE # 942
0442 D200        R     SETB    CAM_PTZ_RUN_flag
                                           ; SOURCE LINE # 944
                                           ; SOURCE LINE # 945
0444 020000      R     LJMP    ?C0054
                                           ; SOURCE LINE # 995
0447         ?C0151:
                                           ; SOURCE LINE # 996
0447 900000      E     MOV     DPTR,#AudioVol
044A E0                MOVX    A,@DPTR
044B 6414              XRL     A,#014H
044D 7067              JNZ     ?C0054
044F 300064      R     JNB     IsEnter2835ClkTune,?C0054
                                           ; SOURCE LINE # 997
                                           ; SOURCE LINE # 998
0452 300013      R     JNB     IsRun2835ClkTune,?C0153
                                           ; SOURCE LINE # 999
                                           ; SOURCE LINE # 1000
0455 C200        R     CLR     IsRun2835ClkTune
                                           ; SOURCE LINE # 1001
0457 7F01              MOV     R7,#01H
0459 120000      E     LCALL   _PowerLED
                                           ; SOURCE LINE # 1002
045C 7D02              MOV     R5,#02H
045E E4                CLR     A
045F FF                MOV     R7,A
0460 FE                MOV     R6,A
0461 120000      E     LCALL   _ClearDataCnt
                                           ; SOURCE LINE # 1003
0464 C200        R     CLR     IsEnter2835ClkTune
                                           ; SOURCE LINE # 1004
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 110 

0466 800E              SJMP    ?C0154
0468         ?C0153:
                                           ; SOURCE LINE # 1006
                                           ; SOURCE LINE # 1007
0468 D200        R     SETB    IsRun2835ClkTune
                                           ; SOURCE LINE # 1008
046A 7F02              MOV     R7,#02H
046C 120000      E     LCALL   _PowerLED
                                           ; SOURCE LINE # 1009
046F AF00        R     MOV     R7,b2835ClkTuneVal
0471 7E00              MOV     R6,#00H
0473 120000      R     LCALL   _HS_Display2835ClkTuneVal
                                           ; SOURCE LINE # 1010
0476         ?C0154:
                                           ; SOURCE LINE # 1012
0476 7BFF              MOV     R3,#0FFH
0478 7A00        R     MOV     R2,#HIGH ?SC_539
047A 7900        R     MOV     R1,#LOW ?SC_539
047C A200        R     MOV     C,IsRun2835ClkTune
047E E4                CLR     A
047F 33                RLC     A
0480         ?C0189:
0480 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
0483 F0                MOVX    @DPTR,A
0484 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 1013
                                           ; SOURCE LINE # 1014
0487 802D              SJMP    ?C0054
                                           ; SOURCE LINE # 1016
0489         ?C0155:
                                           ; SOURCE LINE # 1017
0489 900000      E     MOV     DPTR,#AudioVol
048C E0                MOVX    A,@DPTR
048D 6417              XRL     A,#017H
048F 7025              JNZ     ?C0054
                                           ; SOURCE LINE # 1018
                                           ; SOURCE LINE # 1019
0491 7F02              MOV     R7,#02H
0493 120000      E     LCALL   _PowerLED
                                           ; SOURCE LINE # 1020
0496 7F64              MOV     R7,#064H
0498 7E00              MOV     R6,#00H
049A 120000      E     LCALL   _Wait_ms
                                           ; SOURCE LINE # 1021
                                           ; SOURCE LINE # 1022
                                           ; SOURCE LINE # 1023
                                           ; SOURCE LINE # 1024
049D 120000      R     LCALL   L?0199
                                           ; SOURCE LINE # 1025
                                           ; SOURCE LINE # 1026
                                           ; SOURCE LINE # 1027
                                           ; SOURCE LINE # 1028
04A0 120000      R     LCALL   L?0199
                                           ; SOURCE LINE # 1029
04A3 7F01              MOV     R7,#01H
04A5 120000      E     LCALL   _PowerLED
                                           ; SOURCE LINE # 1030
04A8 D200        R     SETB    IsEnter2835ClkTune
                                           ; SOURCE LINE # 1031
04AA 850000      R     MOV     Enter2835TuneClock+03H,SystemClock+03H
04AD 850000      R     MOV     Enter2835TuneClock+02H,SystemClock+02H
04B0 850000      R     MOV     Enter2835TuneClock+01H,SystemClock+01H
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 111 

04B3 850000      R     MOV     Enter2835TuneClock,SystemClock
                                           ; SOURCE LINE # 1032
                                           ; SOURCE LINE # 1033
                                           ; SOURCE LINE # 1035
                                           ; SOURCE LINE # 1036
04B6         ?C0054:
                                           ; SOURCE LINE # 1037
04B6 900000      R     MOV     DPTR,#ret
04B9 E0                MOVX    A,@DPTR
04BA FF                MOV     R7,A
                                           ; SOURCE LINE # 1038
04BB         ?C0069:
04BB 22                RET     
04BC         L?0199:
04BC 7F01              MOV     R7,#01H
04BE 120000      E     LCALL   _PowerLED
04C1 7F64              MOV     R7,#064H
04C3 7E00              MOV     R6,#00H
04C5 120000      E     LCALL   _Wait_ms
04C8 7F02              MOV     R7,#02H
04CA 120000      E     LCALL   _PowerLED
04CD 7F64              MOV     R7,#064H
04CF 7E00              MOV     R6,#00H
04D1 120000      E     LCALL   _Wait_ms
04D4 22                RET     
04D5         L?0200:
04D5 7BFF              MOV     R3,#0FFH
04D7 E4                CLR     A
04D8 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
04DB F0                MOVX    @DPTR,A
04DC 120000      E     LCALL   _Printf
04DF 22                RET     
04E0         L?0201:
04E0 E4                CLR     A
04E1 FD                MOV     R5,A
04E2 120000      R     LCALL   _ActionRemo
04E5 900000      R     MOV     DPTR,#ret
04E8 EF                MOV     A,R7
04E9 22                RET     
04EA         L?0205:
04EA FF                MOV     R7,A
04EB 120000      E     LCALL   _DisplayInformation
04EE 7FF4              MOV     R7,#0F4H
04F0 120000      E     LCALL   _delay
04F3 120000      E     LCALL   ClearGAUGEINFO
04F6 120000      E     LCALL   DisplayInput
04F9 22                RET     
04FA         L?0207:
04FA 7FD0              MOV     R7,#0D0H
04FC 7E07              MOV     R6,#07H
04FE 120000      E     LCALL   _Wait_ms
0501 22                RET     
             ; FUNCTION CheckKeyIn (END)

             ; FUNCTION _GetKey (BEGIN)
                                           ; SOURCE LINE # 1046
;---- Variable 'repeat' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1047
                                           ; SOURCE LINE # 1051
0000 A200        E     MOV     C,KeyReady
0002 9200        R     MOV     ready,C
                                           ; SOURCE LINE # 1052
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 112 

0004 C200        E     CLR     KeyReady
                                           ; SOURCE LINE # 1056
0006 300043      E     JNB     ChangeKey,?C0157
0009 E500        E     MOV     A,Key
000B 703F              JNZ     ?C0157
                                           ; SOURCE LINE # 1057
                                           ; SOURCE LINE # 1058
000D D200        R     SETB    ready
                                           ; SOURCE LINE # 1059
000F 900000      E     MOV     DPTR,#updn_reg
0012 E0                MOVX    A,@DPTR
0013 FD                MOV     R5,A
0014 7C00              MOV     R4,#00H
0016 6403              XRL     A,#03H
0018 7015              JNZ     ?C0158
001A A3                INC     DPTR
001B E0                MOVX    A,@DPTR
001C 6402              XRL     A,#02H
001E 700F              JNZ     ?C0158
0020 A3                INC     DPTR
0021 E0                MOVX    A,@DPTR
0022 700B              JNZ     ?C0158
0024 A3                INC     DPTR
0025 E0                MOVX    A,@DPTR
0026 6401              XRL     A,#01H
0028 7005              JNZ     ?C0158
                                           ; SOURCE LINE # 1060
002A 750040      E     MOV     Key,#040H
002D 801B              SJMP    ?C0159
002F         ?C0158:
                                           ; SOURCE LINE # 1061
002F ED                MOV     A,R5
0030 6403              XRL     A,#03H
0032 4C                ORL     A,R4
0033 7015              JNZ     ?C0159
0035 900000      E     MOV     DPTR,#updn_reg+01H
0038 E0                MOVX    A,@DPTR
0039 6401              XRL     A,#01H
003B 700D              JNZ     ?C0159
003D A3                INC     DPTR
003E E0                MOVX    A,@DPTR
003F 7009              JNZ     ?C0159
0041 A3                INC     DPTR
0042 E0                MOVX    A,@DPTR
0043 6402              XRL     A,#02H
0045 7003              JNZ     ?C0159
                                           ; SOURCE LINE # 1062
0047 750020      E     MOV     Key,#020H
004A         ?C0159:
                                           ; SOURCE LINE # 1064
004A C200        E     CLR     ChangeKey
                                           ; SOURCE LINE # 1065
004C         ?C0157:
                                           ; SOURCE LINE # 1122
004C 200003      R     JB      ready,?C0161
004F 7F00              MOV     R7,#00H
0051 22                RET     
0052         ?C0161:
                                           ; SOURCE LINE # 1123
0052 EF                MOV     A,R7
0053 6003              JZ      ?C0163
0055 AF00        E     MOV     R7,Key
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 113 

0057 22                RET     
0058         ?C0163:
                                           ; SOURCE LINE # 1124
0058 200003      E     JB      RepeatKey,?C0164
005B AF00        E     MOV     R7,Key
005D 22                RET     
005E         ?C0164:
                                           ; SOURCE LINE # 1126
005E 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 1128
0060         ?C0162:
0060 22                RET     
             ; FUNCTION _GetKey (END)

             ; FUNCTION _HS_Display2835ClkTuneVal (BEGIN)
                                           ; SOURCE LINE # 1268
0000 900000      R     MOV     DPTR,#val
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1269
                                           ; SOURCE LINE # 1270
0008 7800        R     MOV     R0,#LOW mstr
000A 7C00        R     MOV     R4,#HIGH mstr
000C 7D01              MOV     R5,#01H
000E 7BFF              MOV     R3,#0FFH
0010 7A00        R     MOV     R2,#HIGH _?ix1000
0012 7900        R     MOV     R1,#LOW _?ix1000
0014 7E00              MOV     R6,#00H
0016 7F02              MOV     R7,#02H
0018 120000      E     LCALL   ?C?COPY
                                           ; SOURCE LINE # 1272
001B 900000      R     MOV     DPTR,#val
001E E0                MOVX    A,@DPTR
001F FA                MOV     R2,A
0020 A3                INC     DPTR
0021 E0                MOVX    A,@DPTR
0022 FB                MOV     R3,A
0023 FF                MOV     R7,A
0024 120000      R     LCALL   L?0208
0027 ED                MOV     A,R5
0028 2430              ADD     A,#030H
002A 900000      R     MOV     DPTR,#mstr+01H
002D F0                MOVX    @DPTR,A
002E AF03              MOV     R7,AR3
0030 120000      R     LCALL   L?0208
0033 900000      R     MOV     DPTR,#val
0036 EE                MOV     A,R6
0037 F0                MOVX    @DPTR,A
0038 A3                INC     DPTR
0039 EF                MOV     A,R7
003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1273
003B 2430              ADD     A,#030H
003D A3                INC     DPTR
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1275
003F 7BFF              MOV     R3,#0FFH
0041 7A00        E     MOV     R2,#HIGH Init_Osd_DisplayInput_B
0043 7900        E     MOV     R1,#LOW Init_Osd_DisplayInput_B
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 114 

0045 120000      E     LCALL   _InitOSDWindow
                                           ; SOURCE LINE # 1276
0048 7F10              MOV     R7,#010H
004A 120000      E     LCALL   _SetDisplayedOSD
                                           ; SOURCE LINE # 1277
004D 7D02              MOV     R5,#02H
004F E4                CLR     A
0050 FF                MOV     R7,A
0051 FE                MOV     R6,A
0052 120000      E     LCALL   _ClearDataCnt
                                           ; SOURCE LINE # 1278
0055 7B02              MOV     R3,#02H
0057 7D37              MOV     R5,#037H
0059 E4                CLR     A
005A FF                MOV     R7,A
005B FE                MOV     R6,A
005C 120000      E     LCALL   _DrawAttrCnt
                                           ; SOURCE LINE # 1279
005F 7B01              MOV     R3,#01H
0061 7A00        R     MOV     R2,#HIGH mstr
0063 7900        R     MOV     R1,#LOW mstr
0065 900000      E     MOV     DPTR,#?_WriteStringToAddr?BYTE+05H
0068 7402              MOV     A,#02H
006A F0                MOVX    @DPTR,A
006B E4                CLR     A
006C FF                MOV     R7,A
006D FE                MOV     R6,A
006E 120000      E     LCALL   _WriteStringToAddr
                                           ; SOURCE LINE # 1281
0071 7D01              MOV     R5,#01H
0073 7F02              MOV     R7,#02H
0075 120000      E     LCALL   _ShowOSDWindow_TW88
                                           ; SOURCE LINE # 1282
0078 7F01              MOV     R7,#01H
007A 020000      E     LJMP    _ShowOSDWindowAll
             ; FUNCTION _HS_Display2835ClkTuneVal (END)

C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 115 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


SetDATETIME. . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
Update_CONFIG. . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
P2 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A0H  1
OSDHighMenu. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
DWORD. . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
IsRun2835ClkTune . . . . . . . . . . .  PUBLIC   DATA   BIT      0000H  1
SendDVRStatus. . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
SpeedDomeMode. . . . . . . . . . . . .  EXTERN   DATA   BIT      -----  1
GetDVRParam. . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
ClearGAUGEINFO . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
P4 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E8H  1
_OSDCursorMove . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CAM_R. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_PTZ_RUN_flag . . . . . . . . . . .  PUBLIC   DATA   BIT      0001H  1
_ShowOSDWindow_TW88. . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
GetNextInputSelection. . . . . . . . .  EXTERN   CODE   PROC     -----  -----
RELEASE_TR_JUMP_Flag . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0000H  1
Disp_Input . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0001H  1
Halt_OK. . . . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
TriggerModeType. . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
SendDVRParamDT . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
CAM_BAR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ABR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
KeyBuffer. . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0002H  1
CAM_CAR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ACR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_CBR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_BCR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_HS_Display2835ClkTuneVal. . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  val. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  mstr . . . . . . . . . . . . . . . .  AUTO     XDATA  ARRAY    0002H  2
PowerFlag. . . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
_ClearDataCnt. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
NumberStringType . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  11
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  width. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  BackColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  Radix. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  NumColor . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  MaxLen . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  PrePostCharLen . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  PrePostChar. . . . . . . . . . . . .  MEMBER   -----  ARRAY    0008H  3
DisplayVol . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Init_Osd_DisplayInput_B. . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
RepeatKey. . . . . . . . . . . . . . .  EXTERN   DATA   BIT      -----  1
DoorClose. . . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
SetDVRParam. . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
SelectModeType . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
CAM_PTZ_RIGHT. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_delay . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
OpenOSDMenu. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
RemoVolDn_LeftKey. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
b2835ClkTuneVal. . . . . . . . . . . .  PUBLIC   DATA   U_CHAR   0000H  1
FontData . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  27
  font . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  27
_DoAction. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 116 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


GetDVRStatus . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
RIGHT_TRIG . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
DayNightLevel. . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0003H  1
SetSelectMode. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
LAST_TRIG_NON. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
RemoVolUp_RightKey . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
lock_keycnt. . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0004H  1
CAM_SET. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
NORMALL_MODE . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
AVMode . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
BookMarkState. . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0005H  1
TR_JUMP_Flag . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0006H  1
RemoChnDn_DnKey. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
SetOSDLastKeyInTime. . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
SourceModeType . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
KeyReady . . . . . . . . . . . . . . .  EXTERN   DATA   BIT      -----  1
_ShowOSDWindowAll. . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CAM_NUM. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CMD_NUM. . . . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
InfoAutoDayNight_Night . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
AudioVol . . . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
Key. . . . . . . . . . . . . . . . . .  EXTERN   DATA   U_CHAR   -----  1
InfoNoVideoSignal. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
DoorOpen . . . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
MANUALRECSTART . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
CAMC_TRIG. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_Puts. . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
LAST_TRIG_RIGHT. . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
DisplayGaugeOSD. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
GetDisplayedOSD. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
GetInformation . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
CAM_RAB_H. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
OSDStrInfo . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  8
  cnt. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  addr . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  attr . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  str. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0004H  4
SetFormatSD. . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
CAM_BA . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_AB . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
BYTE . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
TimeType . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  7
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  width. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  BackColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  Format . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  TimeColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  CursorColor. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
CAM_CA . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_AC . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_PTZ_UP . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
SetSystem. . . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
REVERSE_TRIG . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_BC . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_CB . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
OSD_LOCKF. . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0007H  1
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 117 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


SourceModeTypeEnum . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
LockKeyState . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0008H  1
struct_IdName. . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  17
  Id . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  Name . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0001H  16
_SetDisplayedOSD . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
SetFormatSDDone. . . . . . . . . . . .  E_CONST  -----  INT      -----  2
EnumType . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  17
  Sz . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  ByLang . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  Str. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0002H  15
MenuType . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  4
  width. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  height . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  TitleColor . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  CursorColor. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
CAM_RAB_T. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_RAC_T. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
WORD . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
CAM_PTZ_LEFT . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_RBC_T. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_Iris_Open. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
NowModeState . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
_?ix1000 . . . . . . . . . . . . . . .  STATIC   CODE   ARRAY    0246H  2
CAM_ZOOM_OUT_START . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
LAST_TRIG_CAMC . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
InfoAutoDayNight_Auto. . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
LEFT_TRIG. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CheckKeyIn . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ret. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  ikey . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  OSD_LOCK . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
CAM_AR . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_BR . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_RB . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
PARK_TRIG. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_CR . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
RemoChnUp_UpKey. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
InfoAutoDayNight_Day . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_MENU_ENTER . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Register . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
CAM_PTZ_DOWN . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
OSDSelect. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_WriteStringToAddr . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_GetKey. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  repeat . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  ready. . . . . . . . . . . . . . . .  AUTO     DATA   BIT      0000H  1
IsEnter2835ClkTune . . . . . . . . . .  PUBLIC   DATA   BIT      0002H  1
TR_JUMP_HOLD . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0009H  1
_WriteI2C. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
LAST_TRIG_REVERSE. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_CALL . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
RemoMenu_MenuKey . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_CAM_TxCommand_toRS485 . . . . . . . .  EXTERN   CODE   PROC     -----  -----
RS485_RX . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Baud_rate2400. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
RS485_TX . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 118 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


SetJumpMode. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
TriggerFlag. . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
_DrawAttrCnt . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
No_TRIG. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
FW_Update_Start. . . . . . . . . . . .  E_CONST  -----  INT      -----  2
NumType. . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  5
  PrePostCharLen . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  PrePostChar. . . . . . . . . . . . .  MEMBER   -----  ARRAY    0001H  4
_Wait_ms . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
updn_reg . . . . . . . . . . . . . . .  EXTERN   XDATA  ARRAY    -----  4
CAM_PTZ_STOP . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
BOOKMARK . . . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
_ReadEEP . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
RegisterInfo . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  Min. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0000H  2
  Max. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0002H  2
  Default. . . . . . . . . . . . . . .  MEMBER   -----  INT      0004H  2
Baud_rate4800. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
LAST_TRIG_LEFT . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_PCMDATA . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  22
  Support. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  HAN. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  VAN. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0003H  2
  IVF. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0005H  2
  CLOCK. . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0007H  2
  low. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0009H  2
  high . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000BH  2
  Hstart . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000DH  2
  Vstart . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000FH  2
  IPF. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0011H  2
  PPF. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0013H  2
  VBack. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0015H  1
Baud_rate9600. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_ChangeInput . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CAM_QUAD . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
FW_Update_OK . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
TriggerMode. . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
ClearOSDInfo . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CAM_ZOOM_IN_START. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_OSDValueUpDn. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
InfoOSDMENULOCKED. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Enter2835TuneClock . . . . . . . . . .  PUBLIC   DATA   U_LONG   0001H  4
OnChangingValue. . . . . . . . . . . .  EXTERN   DATA   BIT      -----  1
MANUALRECSTOP. . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
SetDVRDefault. . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
SEQFlag. . . . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
_PowerLED. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
DefineMenu . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  16
  Icon . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0000H  2
  Desc . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0002H  3
  PreFnId. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  PostFnId . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  IconColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  DescColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
  Child. . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0009H  2
  Type . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000BH  1
  ActiveWithCursor . . . . . . . . . .  MEMBER   -----  U_CHAR   000CH  1
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 119 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  Id . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000DH  1
  TypeData . . . . . . . . . . . . . .  MEMBER   -----  PTR      000EH  2
Priority . . . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
CMD_UNKNOWN. . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
TRIGGER_NUM. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
IsDrawNoVideoSignal. . . . . . . . . .  EXTERN   DATA   BIT      -----  1
_DisplayInformation. . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
DisplayInformation . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
_WriteEEP. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
SEQ. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
InfoOSDMENUATCIVE. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
LongRegisterInfo . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  Min. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  Max. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  Default. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
HS_DvrCommand. . . . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
SendDVRParam . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
DisplayInput . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
PictureInfo. . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  4
  Register_Addr. . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  EEPROM_Addr. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  Control_Range. . . . . . . . . . . .  MEMBER   -----  PTR      0002H  2
CAM_RAC_T2 . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ABR_T3 . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_RBC_T2 . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ABR_T4 . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
GPSReset . . . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
CMD_NULL . . . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
GetDATETIME. . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
CAM_A. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
OSDLastKeyInTime . . . . . . . . . . .  EXTERN   XDATA  U_INT    -----  2
SNAPSHOT . . . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
CAM_B. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
ChangeKey. . . . . . . . . . . . . . .  EXTERN   DATA   BIT      -----  1
InfoPLZRESETSYSTEM . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_C. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_Printf. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
VGA_TRIG . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_ActionRemo. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  _RemoDataCode. . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  AutoKey. . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
SystemClock. . . . . . . . . . . . . .  EXTERN   DATA   U_LONG   -----  4
CloseOSDMenu . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CAM_CAB. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_BAC. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ABC. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Update_CONFIG_OK . . . . . . . . . . .  E_CONST  -----  INT      -----  2
GetDVRVersion. . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
_InitOSDWindow . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
AWT_LAST_TRIGGER . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
Halt_Start . . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
SendAlarm. . . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
_ChangeVol . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
GetLCDMode . . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
ClearInput . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----


MODULE INFORMATION:   STATIC OVERLAYABLE
C51 COMPILER V9.60.0.0   KEYREMO                                                           06/22/2022 16:23:02 PAGE 120 

   CODE SIZE        =   1861    ----
   CONSTANT SIZE    =    584    ----
   XDATA SIZE       =     10       9
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      5    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
