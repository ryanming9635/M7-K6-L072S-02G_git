C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE OSDBASIC
OBJECT MODULE PLACED IN .\Output\Osdbasic.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Osdbasic.c LARGE OPTIMIZE(9,SIZE) BROWSE INCDIR(.\Include\) DEBUG OBJECT
                    -EXTEND CODE LISTINCLUDE SYMBOLS PRINT(.\Source\Osdbasic.lst) TABS(2) OBJECT(.\Output\Osdbasic.obj)

line level    source

   1          //osd_basic.c
   2          // ver0.11 2/1x/2001 Change display format from hex to decimal
   3          //  1.32  LJY11262001 .Add border features to OSD window
   4          //  1.70  LJY05302003 .Support a menu with external OSD.
   5          //  2.00  BYH05102007 .Support internal MCU, which connect with direct memoty bus
   6          //             It needs change whole ReadTW88, WriteTW88 to regTW88
   7          
   8          #include "Config.h"
   1      =1  /*****************************************************************************/
   2      =1  /*                           System Configurations                           */
   3      =1  /*              rev 0.10 include auto test             */
   4      =1  // 0.11 change DTV, PC input initial download data correct for Charge Pump
   5      =1  // 0.12 correct phase measurement routine '>>3'
   6      =1  // 0.13 enable function for SPI control... only EXT MCU case
   7      =1  // 0.14 corrected PC measurement......
   8      =1  // 0.0a test function only for CVBS, SVIDEO
   9      =1  // 0.15 corrected DTV scaler setting for panel resolutions
  10      =1  // 0.0b panel for AND 640x480 TICON panel
  11      =1  // 0.16 corrected COMPONENT scaler setting for panel resolutions  11/21/2007
  12      =1  // 0.0c automatic chip test
  13      =1  // 0.17 add monitor function, osd grid for writing grid
  14      =1  // 0.18 add component, dtv pc for analogpanel, 12/06/2007
  15      =1  // 0.19 correct pal input for CES, 12/20/2007
  16      =1  // 0.1a CCFL control, 12/28/2007
  17      =1  // 0.19 Multi Grid for Banking on Internal MCU  01/17/2008
  18      =1  // 0.20 CCFL contol for backlight brightness  01/21/2008
  19      =1  // 0.21 CCFL contol for backlight brightness  01/25/2008
  20      =1  // 0.22 phase setting 02/07/2008
  21      =1  // 0.221 display input correction 04/03/2008
  22      =1  // 0.23 PC, DTV mode, no signal display
  23      =1  // 0.24 PC Auto Color adjustment
  24      =1  // 0.25 revised PC Auto Clock adjustment - find divide number and phase
  25      =1  // 0.26 Digital RGB for TW8826
  26      =1  // 0.27 Correct LVDS control          08/22/2008
  27      =1  // 0.28 Add WSVGA resolution          10/23/2008
  28      =1  // 0.29 Add NEW GRID              11/14/2008
  29      =1  // 0.30 Fix DTV input             12/10/2008
  30      =1  // 0.31 Add 1080i23, 24, 25A, 25B       01/20/2009
  31      =1  // 0.32 TCON setting FIX all mode       01/22/2009
  32      =1  // 0.33 autodetect is auto on/off by dip sw1  02/02/2009
  33      =1  // 0.34 Fix autocolor function and clamp position 02/08/2009
  34      =1  /*****************************************************************************/
  35      =1  #ifndef __CONFIG_H__
  36      =1  #define __CONFIG_H__
  37      =1  
  38      =1  //#define INTERNAL_MCU -- defined by Project Compiler session
  39      =1  #define   HS        
  40      =1  //#define   E_Wintek  
  41      =1  //#define   AWT 
  42      =1  //#define Holtz
  43      =1  
  44      =1  //#define QUAD
  45      =1  
  46      =1  #ifdef QUAD
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 2   

           =1   #define AWT_ML072Q  //Pinchi 20150827 disable for HTRV
           =1 //  #define HTRV  //Pinchi 20140902 disable for AWT ML072Q
           =1 #else
  50      =1    #define AWT_ML072S
  51      =1  #endif
  52      =1  
  53      =1  //--------------------------------------------------
  54      =1  //              Common Feature Define
  55      =1  //--------------------------------------------------
  56      =1  //#define FIRST_RUN_FROM_AC  //Pinchi 20150831 disable for Screen re-setting by Set4WideScreen()  //Pinchi
             - 20141029 add
  57      =1  #define SUPPORT_ML072Q_AUTO_DAY_NIGHT  //Pinchi 20150825 add for function define
  58      =1  #define SUPPORT_TRIGGER_EXIT_MENU  //Pinchi 20150827 add for exit OSD Menu by CAM trigger
  59      =1  #define SUPPORT_AC_ON_NORMAL_SCREEN  //Pinchi 20150901 add to set 4:3 screen when AC on
  60      =1  
  61      =1  #define FIX_DISPLAY_OFF_TRIGGER_ISSUE  //Pinchi 20150908 add to fix [Display] set OFF and trigger release 
             -then trigger again during display info the CAM will change from trigger CH to original CH
  62      =1  #define FIX_EXIT_STANDBY_NO_AUDIO  //Pinchi 20150908 add to fix no audio output when exit Standby mode
  63      =1  #ifdef AWT_ML072Q
           =1 #define FIX_2835_SCREEN_NOISE  //Pinchi 20160929 add to fix the screen noise of TW2835 by change DDR to ma
             -ke clock shift
           =1 #endif
  66      =1  
  67      =1  #define SUPPORT_NEW_TRIGGER_FUNCTION  /////修改新的Trigger方式減少trigger polling 時間 add by ryan@2018012
             -4
  68      =1  
  69      =1  //#define AWT_ML072QS_MSG  //Pinchi 20140925 add
  70      =1  //#define REDUCE_DELAY_TIME  //Pinchi 20141029 add
  71      =1  //#define DISPLAY_TECHWELL_LOGO  //Pinchi 2050903 add to disable the Techwell logo
  72      =1  
  73      =1  //#define SUPPORT_SVIDEO                     //andy Awt 20090914
  74      =1  //#define SUPPORT_COMPONENT     // support component analog to decoder//andy Awt 20090914
  75      =1  //#define SUPPORT_DTV           // support DTV input through component( to ADC ).//andy Awt 20090914
  76      =1  //#define SUPPORT_PC        // support PC function
  77      =1  //#define SUPPORT_DVI       // support DVI input
  78      =1  //#define SUPPORT_SDCARD
  79      =1  
  80      =1  #define SUPPORT_2835_CLK_TUNE_BACK_DOOR  //Pinchi 20160913 add to fine tune TW2835 clock by hot key
  81      =1  //#define SUPPORT_DISPLAY_TEST_VERSION  //Pinchi 20150929 add to display test software version on OSD
  82      =1  
  83      =1  //--------------------------------------------------
  84      =1  //              Model Feature Define
  85      =1  //--------------------------------------------------
  86      =1  #if (defined AWT_ML072Q) || (defined AWT_ML072S)
  87      =1  #define AWT_ML072QS_FW_RULE  //Pinchi 20140902 add
  88      =1  //#define AWT_NEW_SLIM_MODEL  //Pinchi 20150203 add for AWT new slim model
  89      =1  #define AWT_NO_SIGNAL_MSG  //Pinchi 20150319 add for display "NO VIDEO SIGNAL" by AWT request of 20150302
  90      =1  #define AWT_TW2835_DRAW_T_ICON  //Pinchi 20150415 add to draw T icon by TW2835 when CAM C trigger
  91      =1  #define SUPPORT_AC_ON_REDUCE_TIME  //Pinchi 20150903 add to reduce Power time when AC on
  92      =1  
  93      =1  //#define SUPPORT_TRIGGER_RELEASE_DELAY  //Pinchi 20150908 add to support delay time when CAM trigger rele
             -ase
  94      =1  
  95      =1  typedef enum  //Pinchi 20150326 add
  96      =1  {
  97      =1       LAST_TRIG_NON =  0x00,
  98      =1       LAST_TRIG_LEFT =   0x01,
  99      =1       LAST_TRIG_RIGHT =  0x02,
 100      =1       LAST_TRIG_REVERSE =0x03,
 101      =1       LAST_TRIG_CAMC =   0x04,
 102      =1  
 103      =1  } AWT_LAST_TRIGGER;
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 3   

 104      =1  
 105      =1  #endif
 106      =1  
 107      =1  
 108      =1  #ifdef HTRV  //Pinchi 20150825 add
           =1 #define HTRV_ML072Q_FW_RULE  //Pinchi 20150827 add
           =1 #define HTRV_REDUCE_SCREEN_CHANGE  //Pinchi 20150828 add to reduce screen double change
           =1 
           =1 #if 0  //Pinchi 20151209 add to remove 4:3 screen by HTRV request of 20151209
           =1 #define HTRV_SUPPORT_4_3_SCREEN
           =1 #else
           =1 #undef SUPPORT_AC_ON_NORMAL_SCREEN  //Pinchi 20151210 add
           =1 #endif
           =1 
           =1 #endif
 119      =1  
 120      =1  //#define SUPPORT_RS485
 121      =1  //-----------------------------------------------------------------------------
 122      =1  //    Firmware Version
 123      =1  //-----------------------------------------------------------------------------
 124      =1  #ifdef HTRV  //Pinchi 20150907 add
           =1 //#define FWVER     0x200 // Rev 2.00
           =1 //#define FWVER     0x210   // Rev 2.1  //Pinchi 20151209 update version for HTRV request to remove 4:3 scree
             -n
           =1 //#define FWVER     0x220   // Rev 2.2  //Pinchi 20160929 change for V2.2
           =1 #define FWVER     0x230     //Rev 2.3    ryan@20170727 update version by Encoder switches零件 EOL更換
           =1 #else
 130      =1  #define FWVER     0x210   // Rev 0.14
 131      =1  #endif
 132      =1  
 133      =1  //-----------------------------------------------------------------------------
 134      =1  //    Compiler
 135      =1  //-----------------------------------------------------------------------------
 136      =1  #define KEILC           // Keil C 5.0
 137      =1  //-----------------------------------------------------------------------------
 138      =1  //    MPU Clock
 139      =1  //-----------------------------------------------------------------------------
 140      =1  #ifndef INTERNAL_MCU
 141      =1  //#define CLOCK_11M         // 11.0592MHz
 142      =1  #define CLOCK_22M         // 22.1184MHz
 143      =1  #else                 // INTERNAL_MCU
           =1 #define CLOCK_27M         // 27MHz
           =1 #define REG_START_ADDRESS 0xc000    // register start 0xc000, for page0, 0xc100-page1 
           =1 #endif
 147      =1  //-----------------------------------------------------------------------------
 148      =1  //    TW88 Version
 149      =1  //-----------------------------------------------------------------------------
 150      =1  #define TW8816   ///AWT TW8806 change to TW8816 platform //ryan@20170921
 151      =1  //-----------------------------------------------------------------------------
 152      =1  //-----------------------------------------------------------------------------
 153      =1  //    Options for Backlight control
 154      =1  //-----------------------------------------------------------------------------
 155      =1  //#define BACKLIGHT_CCFL
 156      =1  //#define BACKLIGHT_LED
 157      =1  #define BACKLIGHT_PWM
 158      =1  
 159      =1  //-----------------------------------------------------------------------------
 160      =1  //    Panel Resolution
 161      =1  //-----------------------------------------------------------------------------
 162      =1  // ---- Select Default Panel
 163      =1  //
 164      =1  //#define UXGA            // 1600 x 1200
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 4   

 165      =1  //#define SXGA              // 1280 x 1024
 166      =1  //#define XGA  // 1024 x 768
 167      =1  #ifdef XGA
           =1   #define LVDS          
           =1   #define PWIDTH  1024
           =1   #define PHEIGHT 768
           =1 #endif
 172      =1  //#define SVGA            //  800 x 600
 173      =1  //#define VGA             //  640 x 480
 174      =1  #ifdef VGA
           =1   #define PWIDTH  640
           =1   #define PHEIGHT 480
           =1   //#define HITACHI_640_B_160   //--> 640 x 160
           =1   #define AND_640_480
           =1 #endif
 180      =1  //#define WXGA            // 1280 x 768 (15:9) // 1366 x 768 (16:9)
 181      =1  #ifdef WXGA
           =1     //#define WX_SHARP_LQ106K1LA
           =1   #define PWIDTH  1280
           =1   #define PHEIGHT 768
           =1 #endif
 186      =1  //#define WSVGA           // 1024 x 600 *** only video mode
 187      =1  #ifdef WSVGA
           =1   #define PWIDTH  1024
           =1   #define PHEIGHT 600
           =1   #define UNIDEN_1024_600
           =1 #endif
 192      =1  #define WVGA            //  800 x 480
 193      =1  #ifdef WVGA
 194      =1    #define PWIDTH  800
 195      =1    #define PHEIGHT 480//600
 196      =1    // If WVGA, you have to select panel.
 197      =1    //#define AU_10INCH
 198      =1    //#define WVGA_TPO
 199      =1    //#define SAMSUNG_10INCH
 200      =1    //#define SAMSUNG_TICONLESS_10INCH
 201      =1    //#define SHARP_TICONLESS_7INCH
 202      =1    //#define AU_TICONLESS_7INCH
 203      =1    //#define AU_G084SN05V8_8_4INCH 
 204      =1    #define HSD070IDW1_7INCH
 205      =1    //#define INNOLUX_AT080TN03
 206      =1    //#define AU_TICONLESS_7INCH_CCFL
 207      =1    //#define CMO     // CHIMEI panel
 208      =1    //#define AU_TICONLESS_10INCH
 209      =1    //#define HITACHI_T01
 210      =1    //#define HITACHI_TX23D12
 211      =1    //#define HITACHI_TX18D24
 212      =1    //#define HITACHI_TX18D16
 213      =1    //#define TMD_LTA070A320F
 214      =1    //#define TMD_LTA080B
 215      =1  #endif  //WVGA
 216      =1  //#define HVGA            //  480 x 320
 217      =1  //#define QVGA            //  320 x 240 *** only video mode
 218      =1  #ifdef QVGA
           =1   #define PWIDTH  320
           =1   #define PHEIGHT 240
           =1   //#define HITACHI_TX09D73
           =1   //#define AU_DELTARGB
           =1   //#define SHARP_LQ050Q5DR01
           =1   //#define SHARP_LQ035
           =1   //#define TMD
           =1 #endif
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 5   

 227      =1  
 228      =1  //#define WQVGA           //  480 x 234 *** only video mode
 229      =1  #ifdef WQVGA
           =1   #define PWIDTH  480
           =1   #define PHEIGHT 240
           =1   // If WQVGA, you have to select panel 
           =1     #define ANALOG_7INCH
           =1   //#define PWIDTH  400
           =1   //#define PHEIGHT 240
           =1   //#define SHARP_LQ043T3DX02   //  400 x 237
           =1   //#define LG_ANALOG
           =1   //#define TMD_ANALOG        //TMD_LTA05B352A
           =1   //#define T_51945GD       // Optorex Panel
           =1 #endif  // WQVGA
 241      =1  
 242      =1  //if LVDS pannel disable TICONLESS
 243      =1  
 244      =1  //-----------------------------------------------------------------------------
 245      =1  //---- Add Support One more panel with DIPSW#1
 246      =1  //---- Ex. Add Analog AU 7" Panel with Default Panel for evalution
 247      =1  //#define ADD_ANALOGPANEL   // Added Analog panel(AU7") from default set panel(expect WQVGA) with DIP #1 sw
             -itch.(DIP#1=L:ANALOG, H:DEFAULT)
 248      =1                // It can't support WQVGA and ADD_ANALOGPANEL same time!!
 249      =1    //#define ADD_ANALOG_7INCH
 250      =1    //#define ADD_TMD_LTA05B352A
 251      =1                    
 252      =1  //---- Support Wide panel function
 253      =1  #if (defined WXGA) || (defined WSVGA) || (defined WVGA) || (defined WQVGA)
 254      =1  #if 0///ryan@20180115//mask for NTSC sharpness issue
           =1 #define WIDE_SCREEN         // Can support 4 display mode, i.e. Normal, Wide, Full, Zoom
           =1 #endif
 257      =1  #endif                // Tested panasonic WVGA panel.
 258      =1  
 259      =1  //-----------------------------------------------------------------------------
 260      =1  //    Panel Vendor Specific
 261      =1  //-----------------------------------------------------------------------------
 262      =1  
 263      =1  //-----------------------------------------------------------------------------
 264      =1  //    TV Tuner
 265      =1  //-----------------------------------------------------------------------------
 266      =1  #define PHILIPS       0
 267      =1  #define ALPS        1   // ALPS, LG
 268      =1  #define TEMIC       2
 269      =1  #define TVAVA       3
 270      =1  #define LGTUNER       4
 271      =1  #define SAMSUNGMUTITUNER  5
 272      =1  
 273      =1  #define TVTunerDevice   4
 274      =1  //-----------------------------------------------------------------------------
 275      =1  //    IR Remote Controller Type
 276      =1  //-----------------------------------------------------------------------------
 277      =1  //#define REMO_RC5          // RC5 style
 278      =1  #define TECHWELL_REMOCON
 279      =1  //#define REMO_NEC          // NEC style
 280      =1  //#define PHILIPS_REMOCON // New remocon 
 281      =1  
 282      =1  //-----------------------------------------------------------------------------
 283      =1  //    I2C Device Access Address Mapping
 284      =1  //-----------------------------------------------------------------------------
 285      =1  
 286      =1  #define EEPROMI2CAddress  0xa0  // EEPROM (24C16)
 287      =1  #define TW88I2CAddress    0x8a  // TW880x
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 6   

 288      =1  
 289      =1  #define MSPI2CAddress   0x80  // MSP
 290      =1  #define ALC106I2CAddress  0x4A  // MSP
 291      =1  //-----------------------------------------------------------------------------
 292      =1  //    Options for Possible Inputs
 293      =1  //-----------------------------------------------------------------------------
 294      =1  
 295      =1  
 296      =1  //-----------------------------------------------------------------------------
 297      =1  //    Options for Possible Standards
 298      =1  //    Default:NTSC
 299      =1  //-----------------------------------------------------------------------------
 300      =1  #define SUPPORT_PAL     
 301      =1  #define SUPPORT_SECAM
 302      =1  #define SUPPORT_NTSC4   
 303      =1  #define SUPPORT_PALM  
 304      =1  #define SUPPORT_PALN    
 305      =1  #define SUPPORT_PAL60   
 306      =1  
 307      =1  //#define ID_CHECK_BY_FW        // in Video mode, check input system ID by firmware
 308      =1  
 309      =1  //-----------------------------------------------------------------------------
 310      =1  //    Options for Debugging/Release
 311      =1  //-----------------------------------------------------------------------------
 312      =1  //#define SUPPORT_PATTERN       // support LCD test pattern
 313      =1  
 314      =1  #ifndef WQVGA
 315      =1    #ifndef QVGA
 316      =1  #define SUPPORT_OSDPOSITIONMOVE
 317      =1    #endif
 318      =1  #endif
 319      =1  
 320      =1  #define SERIAL              // include serial communication routines
 321      =1  
 322      =1  //#define SUPPORT_DEBUG       // Support to use Read & Write in debug OSD Window by remocon.
 323      =1  
 324      =1  //#define DEBUG           // include debug information
 325      =1  #ifdef DEBUG
           =1   //#define DEBUG_MAIN
           =1   //#define DEBUG_TIME
           =1   //#define DEBUG_KEYREMO
           =1   //#define DEBUG_TW88
           =1   //#define DEBUG_DECODER
           =1   //#define DEBUG_I2C
           =1   //#define DEBUG_EEP
           =1   //#define DEBUG_OSD
           =1   //#define DEBUG_AUDIO
           =1   //#define DEBUG_SETPANEL
           =1   //#define DEBUG_DTV
           =1 //  #define DEBUG_PC
           =1   //#define DEBUG_PC_MEAS
           =1   //#define DEBUG_PC_COLOR
           =1   //#define DEBUG_COMPONENT
           =1   //#define DEBUG_BANK
           =1   //#define DEBUG_PAUSE
           =1   //#define DEBUG_MCU
           =1 #endif
 345      =1  
 346      =1  #define AUTOCALC_PC         // in PC mode, Enable Auto Calcuration
 347      =1  //#define SUPPORT_USERCOLORFROMTXT  // Use color setting of text file in Color mode=USER MODE which is as B
             -rightness(Reg10), Contast(Reg11),
 348      =1                    //    Sat_U(Reg13),Sat_V(Reg14),Sharpness(Reg12,Reg78)                  
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 7   

 349      =1  //#define SUPPORT_GAMMA
 350      =1  
 351      =1  //#define CHIP_MANUAL_TEST      // DIPSW#1
 352      =1  
 353      =1  #ifndef INTERNAL_MCU
 354      =1  //#define NO_INITIALIZE       // After Power switch turn on with DIP SW4 Enable(Low), or pressed MENU button 
             -for internal MCU
 355      =1                                      //     micom works to access only I2C bus by serial command.
 356      =1  #endif
 357      =1  
 358      =1  //#define SUPPORT_KRS_OSDDEMO   // For KRS Company Demo 
 359      =1  //#define SUPPORT_LINE_OSDDEMO
 360      =1  
 361      =1  //-----------------------------------------------------------------------------
 362      =1  //    Special Features
 363      =1  //-----------------------------------------------------------------------------
 364      =1  
 365      =1  #ifndef INTERNAL_MCU
 366      =1  //#define SUPPORT_DELTA_RGB
 367      =1  #endif
 368      =1  #define SUPPORT_SELECTKEY     // choose the keymap of using select key or left,right key.
 369      =1  //-----------------------------------------------------------------------------
 370      =1  
 371      =1  //#define HS_NEWOSDMENU     //Weylis -@121008 for Hor. Style OSD
 372      =1  //#define HS_NEWOSDMENU_2     //Weylis -@121008 for Hor. Style OSD(2 line)
 373      =1  
 374      =1  #endif  //__CONFIG_H__
 375      =1  
   9          
  10          #include "typedefs.h"
   1      =1  #ifndef __TYPEDEFS__
   2      =1  #define __TYPEDEFS__
   3      =1  
   4      =1  
   5      =1  #define DATA    data
   6      =1  #define PDATA   pdata
   7      =1  #define IDATA   data
   8      =1  #define CODE    code
   9      =1  #define CODE_P
  10      =1  #define PDATA_P
  11      =1  #define IDATA_P
  12      =1  #define DATA_P
  13      =1  
  14      =1  #define INTERRUPT( num, name ) name() interrupt num
  15      =1  
  16      =1  #define _between(x, a, b) (a<=x && x<=b)
  17      =1  #define _swap(a, b)     { a^=b; b^=a; a^=b; }
  18      =1  
  19      =1  typedef unsigned char Register;
  20      =1  typedef unsigned char BYTE;
  21      =1  typedef unsigned short  WORD;
  22      =1  typedef unsigned long DWORD;
  23      =1  
  24      =1  #define TRUE  1
  25      =1  #define FALSE 0
  26      =1  
  27      =1  //VInputStdDetectMode
  28      =1  #define AUTO  0
  29      =1  
  30      =1  //VInputStd
  31      =1  #define NTSC  1     
  32      =1  #define PAL   2
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 8   

  33      =1  #define SECAM 3
  34      =1  #define NTSC4 4
  35      =1  #define PALM  5
  36      =1  #define PALN  6
  37      =1  #define PAL60 7
  38      =1  
  39      =1  #define MAXINPUTSTD PAL60+1 // 
  40      =1  
  41      =1  #define UNKNOWN 0xfe
  42      =1  #define NOINPUT 0 //0xff
  43      =1  
  44      =1  #define NIL     0xff
  45      =1  
  46      =1  enum SourceModeTypeEnum
  47      =1  { 
  48      =1    AVMode,      // 0   0X00
  49      =1    //VGAMode,       // 1
  50      =1  #ifdef USE_CAMD 
           =1   CAM_D,         // 2
           =1 #endif
  53      =1    CAM_A,         // 3   0x01
  54      =1    CAM_B,         // 4   0x02
  55      =1    CAM_C,         // 5   0x03
  56      =1    CAM_R,         // 6   0x04
  57      =1    CAM_AB,        // 7   0x05
  58      =1    CAM_CR,        // 8   0x06
  59      =1    CAM_AR,        // 9   0x07
  60      =1    CAM_RB,        // 10    0x08
  61      =1    CAM_AC,        // 11    0x09
  62      =1    CAM_CB,        // 12    0x0a
  63      =1    CAM_RAB_T,     // 13    0x0b
  64      =1    CAM_RAB_H,     // 14    0x0c
  65      =1  
  66      =1    #ifdef HTRV
           =1   CAM_RC,
           =1   #endif
  69      =1    
  70      =1    CAM_QUAD,      // 15    0x0d
  71      =1    CAM_ABR_T3,    // 16    0x0e
  72      =1    CAM_ABR_T4,    // 17    0x0f
  73      =1    CAM_RAC_T,      //  0x10
  74      =1    CAM_RBC_T,      //  0x11
  75      =1    CAM_RAC_T2,     //  0x12
  76      =1    CAM_RBC_T2,     //  0x13
  77      =1    CAM_BA,       //  0x14
  78      =1    CAM_BC,       //  0x15
  79      =1    CAM_BR,       //  0x16
  80      =1    CAM_CA,       //  0x17
  81      =1    CAM_ABC,      //  0x18
  82      =1    CAM_ABR,      //  0x19
  83      =1    CAM_ACR,      //  0x1a
  84      =1    CAM_BAC,      //  0x1b
  85      =1    CAM_BAR,      //  0x1c
  86      =1    CAM_BCR,      //  0x1d
  87      =1    CAM_CAB,      //  0x1e
  88      =1    CAM_CAR,      //  0x1f
  89      =1    CAM_CBR,      //  0x20
  90      =1    SEQ,           // 18      0x10
  91      =1    CAM_NUM
  92      =1  };
  93      =1  
  94      =1  typedef unsigned char SourceModeType;
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 9   

  95      =1  
  96      =1  #endif  /* __TYPEDEFS__ */
  97      =1  
  11          #include "i2c.h"
   1      =1  #ifndef __I2C_H__
   2      =1  #define __I2C_H__
   3      =1  
   4      =1  
   5      =1  void I2CReadByte3(BYTE *);
   6      =1  void I2CRead8Byte(BYTE *);
   7      =1  #if 0
           =1 void I2CReadByteMSP(BYTE addr, BYTE index, BYTE *pd, BYTE cnt);
           =1 #endif
  10      =1  BYTE I2CWriteByte2(BYTE);
  11      =1  BYTE I2CWriteByte3(BYTE*);
  12      =1  BYTE I2CWrite8Byte(BYTE *);
  13      =1  
  14      =1  void I2CStart(void);
  15      =1  void I2CWriteData(BYTE value);
  16      =1  BYTE I2CReadData(void);
  17      =1  #if 0
           =1 BYTE I2CReadDataWithACK(void);
           =1 #endif
  20      =1  void I2CStop(void);
  21      =1  void I2Cdelay(void);
  22      =1  
  23      =1  
  24      =1  #define WriteTW88(a,b)    WriteI2C(TW88I2CAddress, a, b)
  25      =1  #define ReadTW88(a)     ReadI2C(TW88I2CAddress, a)
  26      =1  
  27      =1  BYTE WriteTW88_Wait (BYTE, BYTE);
  28      =1  void WriteADC   (BYTE, BYTE);
  29      =1  BYTE ReadADC    (BYTE);
  30      =1  BYTE ReadADC_TW88(BYTE index);
  31      =1  void WriteADC_TW88(BYTE index, BYTE dat);
  32      =1  
  33      =1  void WriteEEP   (WORD, BYTE);
  34      =1  BYTE ReadEEP    (WORD);
  35      =1  WORD ReadALC106(WORD index);
  36      =1  void WriteALC106(WORD index, WORD  dat);
  37      =1  WORD ReadI2CWORD(BYTE addr, BYTE index);
  38      =1  BYTE ReadI2C    (BYTE addr, BYTE index);
  39      =1  void WriteI2C   (BYTE addr, BYTE index, BYTE val);
  40      =1  
  41      =1  void WriteI2Cn_(BYTE addr, BYTE *val, BYTE cnt);
  42      =1  void WriteI2Cn (BYTE addr, BYTE index, BYTE *val, BYTE cnt);
  43      =1  void WriteI2CnD(BYTE addr, BYTE index, BYTE val, BYTE cnt);
  44      =1  
  45      =1  void ReadI2Cmn(BYTE addr, BYTE wcnt, BYTE rcnt, BYTE *rwdata);
  46      =1  
  47      =1  #define   WriteADC(a,b) WriteADC_TW88(a,b)
  48      =1  #define   ReadADC(a)    ReadADC_TW88(a)
  49      =1  
  50      =1  #endif  /* __I2C_H__ */
  12          #include "main.h"
   1      =1  #ifndef __MAIN__
   2      =1  #define __MAIN__
   3      =1  
   4      =1  #define ON          1
   5      =1  #define OFF         0
   6      =1  #if 1//ryan@20171214
   7      =1  #define Hs_debug
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 10  

   8      =1  #define Monitor_debug  
   9      =1  //#define Trigger_debug 
  10      =1  #endif
  11      =1  
  12      =1  
  13      =1  //#define DVR
  14      =1  #define Format_SDCard
  15      =1  #define BJTSwitch
  16      =1  
  17      =1  #define Panel_Enable()    P4=P4|0x08 //andy 980908
  18      =1  #define Panel_Disable()   P4=P4&0xf7
  19      =1  
  20      =1  #if 0
           =1 #define SetBacklight()      P4=P4|0x04
           =1 #define clrBacklight()      P4=P4&0xfb
           =1 #else
  24      =1  #define SetBacklight()    P4=P4&0xfb
  25      =1  #define clrBacklight()    P4=P4|0x04
  26      =1  #endif
  27      =1  
  28      =1  //InputSelection
  29      =1  struct struct_IdName {
  30      =1    BYTE  Id;
  31      =1    BYTE  Name[16];
  32      =1  };
  33      =1  
  34      =1  #define CH_TW2835       1
  35      =1  #define CH_CAMD       2
  36      =1  #define CH_AV         3
  37      =1  #define PC          7
  38      =1  #define ChineseDefaultMenu  8
  39      =1  
  40      =1  #define SVIDEO        2
  41      =1  #define COMPONENT     3
  42      =1  //#define ANALOGDTV     4
  43      =1  #define DTV         4
  44      =1  #define TV          5
  45      =1  #define SCART       6
  46      =1  
  47      =1  #ifdef HS
  48      =1  #define CH_CAMB         4
  49      =1  #endif
  50      =1  
  51      =1  #define DIGITALVGA      8
  52      =1  
  53      =1  #define AIRTV       0 //9
  54      =1  #define CABLETV       1 //0xa
  55      =1  
  56      =1  #define TVTUNER       0xd   //10
  57      =1  #define MUTE        1 
  58      =1  #define MENU        2 
  59      =1  #define TVVOL       4 
  60      =1  #ifdef AWT_ML072S
  61      =1  #define VLOSSINFO     8 
  62      =1  #else
           =1 #define CC          8 
           =1 #endif
  65      =1  #define INPUTINFO     0x10
  66      =1  #define PCINFO        0x20
  67      =1  #define GAUGEINFO       0x40
  68      =1  //#define RATINGINFO      0x40
  69      =1  #define TVCHN       0x80
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 11  

  70      =1  //#define MUTE        0x40
  71      =1  
  72      =1  #define YPBPR_480i      0
  73      =1  #define YPBPR_576i      1
  74      =1  #define YPBPR_480p      2
  75      =1  #define YPBPR_576p      3
  76      =1  #define YPBPR_1080i     4
  77      =1  #define YPBPR_720p      5
  78      =1  #define YPBPR_720p50    6
  79      =1  
  80      =1  //---------------------- Feature Define ----------------------------
  81      =1  #ifdef AWT_ML072Q
           =1 
           =1 //mask by ryan@20171018   #define AWT_ML720Q_NEW_TRIGGER_FUN    //Pinchi 20141031 add for AWT request each t
             -rigger can work by PRIORITY OFF
           =1 #define AWT_ADD_TRIGGER_DELAY_FUN 
           =1 #define AWT_SUPPORT_4_3_SCREEN    //ryan@20170907 
           =1 #endif
  87      =1  
  88      =1  #ifdef AWT_ML072S
  89      =1  #define AWT_ADD_TRIGGER_DELAY_FUN 
  90      =1  #endif
  91      =1  
  92      =1  //--------------------------- P0 Define -----------------------------
  93      =1  //#define SEL_MIX     P0_6  // 
  94      =1  //--------------------------- P1 Define -----------------------------
  95      =1  //#define SEL_DVI     P3_5  //LJY062001   
  96      =1  
  97      =1  #define TW88HWReset     P3_4  //LJY001010 //LJY000721
  98      =1  #define PowerUp       P3_7
  99      =1  //======================= CDS Control ================================= 
 100      =1  //#define CDS_CTRL           P1_5
 101      =1  extern BYTE SelectModeType;
 102      =1  extern BYTE InputSelection;
 103      =1  extern BYTE SEQTime;
 104      =1  extern BYTE Priority;
 105      =1  extern BYTE PowerFlag;
 106      =1  //extern bit AutoDayNight;
 107      =1  extern bit SDCardCoverDetect;
 108      =1  
 109      =1  BYTE keyIn(void);
 110      =1  void TimerForRemocon(void);
 111      =1  void TimerForTick(void);
 112      =1  void DisableRemoconInt(void);
 113      =1  BYTE SetSupport_remocon(BYTE newd);
 114      =1  
 115      =1  void delay(BYTE cnt);
 116      =1  
 117      =1  BYTE RS_ready(void);
 118      =1  #ifdef Monitor_debug
 119      =1  BYTE RS_rx(void);
 120      =1  #endif
 121      =1  void RS_tx(BYTE tx_buf);
 122      =1  
 123      =1  BYTE RS2_rx(void);
 124      =1  void RS2_tx(BYTE tx_buf);
 125      =1  
 126      =1  void NewLine(void);
 127      =1  void PutsP(PDATA_P BYTE *ptr);
 128      =1  #ifdef Hs_debug
 129      =1  //void MonWriteI2C(BYTE addr, BYTE index, BYTE val);
 130      =1  //BYTE MonReadI2C(BYTE addr, BYTE index);
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 12  

 131      =1  #endif
 132      =1  BYTE Asc1Bin(BYTE asc);
 133      =1  BYTE Asc2Bin(PDATA_P BYTE *s);
 134      =1  
 135      =1  void I2CDeviceInitialize( CODE_P BYTE *RegSet);
 136      =1  
 137      =1  //void RestartSystemClock(WORD clock_hm);
 138      =1  WORD GetTime_ms(void);
 139      =1  #if 0
           =1 BYTE GetTime_H(void);
           =1 BYTE GetTime_M(void);
           =1 #endif
 143      =1  void ChangeTime_H( char add );
 144      =1  void ChangeTime_M( char add );
 145      =1  //WORD GetWakeupTime(void);
 146      =1  //void SetWakeupTime(WORD wtime);
 147      =1  
 148      =1  
 149      =1  //WORD GetOffTime(void);
 150      =1  //void SetOffTime(WORD wtime);
 151      =1  //BYTE GetSleepTimer(void);
 152      =1  //void SetSleepTimer(BYTE stime);
 153      =1  WORD DiffTime_ms( WORD stime, WORD etime );
 154      =1  //void SetLastBlockedTime(void);
 155      =1  void SetLastCCTime(void);       //ljy010904...CC_FIX_CLEAR_ON_TIME
 156      =1  
 157      =1  void SetOSDLastKeyInTime(void);
 158      =1  WORD GetOSDLastKeyInTime(void);
 159      =1  WORD GetIVF(void);
 160      =1  DWORD GetIHF(void);
 161      =1  BYTE ReadVInputSTD(void);
 162      =1  void SetVInputStd(BYTE newd);
 163      =1  BYTE GetVInputStd(void);
 164      =1  BYTE GetInputSelection(void);
 165      =1  #ifdef ADD_ANALOGPANEL
           =1 BYTE IsAnalogOn(void);
           =1 #endif
 168      =1  void InitVideoData(BYTE src);
 169      =1  void ChangeVInputStdDetectMode(BYTE val);
 170      =1  BYTE GetVInputStdInx(void);
 171      =1  
 172      =1  void MonWriteI2Cn_(BYTE addr, BYTE *val, BYTE cnt) ;
 173      =1  
 174      =1  void CheckNewTriggerFunc(void);
 175      =1  ///void Usage(void);
 176      =1  #ifdef Monitor_debug
 177      =1    void Prompt(void);
 178      =1  #endif
 179      =1  void DebugKeyIn(BYTE ikey);
 180      =1  void DVIPowerDown(bit flag);
 181      =1  void PowerDown_XTAL(bit flag);
 182      =1  
 183      =1  void ChangeInput(BYTE newsel);
 184      =1  
 185      =1  
 186      =1  void WaitPowerOn(void);
 187      =1  void PowerOff(void);
 188      =1  BYTE GetNextInputSelection(void);
 189      =1  
 190      =1  BYTE WantToStopTVScan(void);
 191      =1  
 192      =1  //BYTE IsTW8801(void);
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 13  

 193      =1  //BYTE IsTW8803(void);
 194      =1  //BYTE ConvertVideoVSAT(BYTE reg);
 195      =1  
 196      =1  BYTE IsNoInput(void);
 197      =1  void LoadEEPROM (void);
 198      =1  void Hs_InitVars(void);
 199      =1  void AdjustAutoDayNight(BYTE val);
 200      =1  void ACCPowerControl(void);
 201      =1  void ON_LVDS(void);
 202      =1  void OFF_LVDS(void);
 203      =1  void main_loop(void);
 204      =1  struct RegisterInfo
 205      =1  {
 206      =1     int  Min;
 207      =1     int  Max;
 208      =1     int  Default;
 209      =1  };
 210      =1  struct LongRegisterInfo
 211      =1  {
 212      =1     WORD Min;
 213      =1     WORD Max;
 214      =1     WORD Default;
 215      =1  };
 216      =1  
 217      =1  
 218      =1  typedef enum   ///add enum  by ryan@20170907
 219      =1  {
 220      =1    NORMALL_MODE,
 221      =1    REVERSE_TRIG,
 222      =1    LEFT_TRIG,
 223      =1    RIGHT_TRIG,
 224      =1  #ifdef USE_CAMD 
           =1   CAMD_TRIG,
           =1 #endif  
 227      =1    CAMC_TRIG,
 228      =1    VGA_TRIG,
 229      =1    PARK_TRIG,
 230      =1    No_TRIG,
 231      =1    TRIGGER_NUM
 232      =1  }TriggerModeType;
 233      =1  
 234      =1  
 235      =1  #endif  // __MAIN__
 236      =1  
  13          #include "tw88.h"
   1      =1  #ifndef __TW88__
   2      =1  #define __TW88__
   3      =1  
   4      =1  #include "main.h"
   1      =2  #ifndef __MAIN__
           =2 #define __MAIN__
           =2 
           =2 #define ON          1
           =2 #define OFF         0
           =2 #if 1//ryan@20171214
           =2 #define Hs_debug
           =2 #define Monitor_debug  
           =2 //#define Trigger_debug 
           =2 #endif
           =2 
           =2 
           =2 //#define DVR
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 14  

           =2 #define Format_SDCard
           =2 #define BJTSwitch
           =2 
           =2 #define Panel_Enable()    P4=P4|0x08 //andy 980908
           =2 #define Panel_Disable()   P4=P4&0xf7
           =2 
           =2 #if 0
           =2 #define SetBacklight()      P4=P4|0x04
           =2 #define clrBacklight()      P4=P4&0xfb
           =2 #else
           =2 #define SetBacklight()    P4=P4&0xfb
           =2 #define clrBacklight()    P4=P4|0x04
           =2 #endif
           =2 
           =2 //InputSelection
           =2 struct struct_IdName {
           =2   BYTE  Id;
           =2   BYTE  Name[16];
           =2 };
           =2 
           =2 #define CH_TW2835       1
           =2 #define CH_CAMD       2
           =2 #define CH_AV         3
           =2 #define PC          7
           =2 #define ChineseDefaultMenu  8
           =2 
           =2 #define SVIDEO        2
           =2 #define COMPONENT     3
           =2 //#define ANALOGDTV     4
           =2 #define DTV         4
           =2 #define TV          5
           =2 #define SCART       6
           =2 
           =2 #ifdef HS
           =2 #define CH_CAMB         4
           =2 #endif
           =2 
           =2 #define DIGITALVGA      8
           =2 
           =2 #define AIRTV       0 //9
           =2 #define CABLETV       1 //0xa
           =2 
           =2 #define TVTUNER       0xd   //10
           =2 #define MUTE        1 
           =2 #define MENU        2 
           =2 #define TVVOL       4 
           =2 #ifdef AWT_ML072S
           =2 #define VLOSSINFO     8 
           =2 #else
           =2 #define CC          8 
           =2 #endif
           =2 #define INPUTINFO     0x10
           =2 #define PCINFO        0x20
           =2 #define GAUGEINFO       0x40
           =2 //#define RATINGINFO      0x40
           =2 #define TVCHN       0x80
           =2 //#define MUTE        0x40
           =2 
           =2 #define YPBPR_480i      0
           =2 #define YPBPR_576i      1
           =2 #define YPBPR_480p      2
           =2 #define YPBPR_576p      3
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 15  

           =2 #define YPBPR_1080i     4
           =2 #define YPBPR_720p      5
           =2 #define YPBPR_720p50    6
           =2 
           =2 //---------------------- Feature Define ----------------------------
           =2 #ifdef AWT_ML072Q
           =2 
           =2 //mask by ryan@20171018   #define AWT_ML720Q_NEW_TRIGGER_FUN    //Pinchi 20141031 add for AWT request each t
             -rigger can work by PRIORITY OFF
           =2 #define AWT_ADD_TRIGGER_DELAY_FUN 
           =2 #define AWT_SUPPORT_4_3_SCREEN    //ryan@20170907 
           =2 #endif
           =2 
           =2 #ifdef AWT_ML072S
           =2 #define AWT_ADD_TRIGGER_DELAY_FUN 
           =2 #endif
           =2 
           =2 //--------------------------- P0 Define -----------------------------
           =2 //#define SEL_MIX     P0_6  // 
           =2 //--------------------------- P1 Define -----------------------------
           =2 //#define SEL_DVI     P3_5  //LJY062001   
           =2 
           =2 #define TW88HWReset     P3_4  //LJY001010 //LJY000721
           =2 #define PowerUp       P3_7
           =2 //======================= CDS Control ================================= 
           =2 //#define CDS_CTRL           P1_5
           =2 extern BYTE SelectModeType;
           =2 extern BYTE InputSelection;
           =2 extern BYTE SEQTime;
           =2 extern BYTE Priority;
           =2 extern BYTE PowerFlag;
           =2 //extern bit AutoDayNight;
           =2 extern bit SDCardCoverDetect;
           =2 
           =2 BYTE keyIn(void);
           =2 void TimerForRemocon(void);
           =2 void TimerForTick(void);
           =2 void DisableRemoconInt(void);
           =2 BYTE SetSupport_remocon(BYTE newd);
           =2 
           =2 void delay(BYTE cnt);
           =2 
           =2 BYTE RS_ready(void);
           =2 #ifdef Monitor_debug
           =2 BYTE RS_rx(void);
           =2 #endif
           =2 void RS_tx(BYTE tx_buf);
           =2 
           =2 BYTE RS2_rx(void);
           =2 void RS2_tx(BYTE tx_buf);
           =2 
           =2 void NewLine(void);
           =2 void PutsP(PDATA_P BYTE *ptr);
           =2 #ifdef Hs_debug
           =2 //void MonWriteI2C(BYTE addr, BYTE index, BYTE val);
           =2 //BYTE MonReadI2C(BYTE addr, BYTE index);
           =2 #endif
           =2 BYTE Asc1Bin(BYTE asc);
           =2 BYTE Asc2Bin(PDATA_P BYTE *s);
           =2 
           =2 void I2CDeviceInitialize( CODE_P BYTE *RegSet);
           =2 
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 16  

           =2 //void RestartSystemClock(WORD clock_hm);
           =2 WORD GetTime_ms(void);
           =2 #if 0
           =2 BYTE GetTime_H(void);
           =2 BYTE GetTime_M(void);
           =2 #endif
           =2 void ChangeTime_H( char add );
           =2 void ChangeTime_M( char add );
           =2 //WORD GetWakeupTime(void);
           =2 //void SetWakeupTime(WORD wtime);
           =2 
           =2 
           =2 //WORD GetOffTime(void);
           =2 //void SetOffTime(WORD wtime);
           =2 //BYTE GetSleepTimer(void);
           =2 //void SetSleepTimer(BYTE stime);
           =2 WORD DiffTime_ms( WORD stime, WORD etime );
           =2 //void SetLastBlockedTime(void);
           =2 void SetLastCCTime(void);       //ljy010904...CC_FIX_CLEAR_ON_TIME
           =2 
           =2 void SetOSDLastKeyInTime(void);
           =2 WORD GetOSDLastKeyInTime(void);
           =2 WORD GetIVF(void);
           =2 DWORD GetIHF(void);
           =2 BYTE ReadVInputSTD(void);
           =2 void SetVInputStd(BYTE newd);
           =2 BYTE GetVInputStd(void);
           =2 BYTE GetInputSelection(void);
           =2 #ifdef ADD_ANALOGPANEL
           =2 BYTE IsAnalogOn(void);
           =2 #endif
           =2 void InitVideoData(BYTE src);
           =2 void ChangeVInputStdDetectMode(BYTE val);
           =2 BYTE GetVInputStdInx(void);
           =2 
           =2 void MonWriteI2Cn_(BYTE addr, BYTE *val, BYTE cnt) ;
           =2 
           =2 void CheckNewTriggerFunc(void);
           =2 ///void Usage(void);
           =2 #ifdef Monitor_debug
           =2   void Prompt(void);
           =2 #endif
           =2 void DebugKeyIn(BYTE ikey);
           =2 void DVIPowerDown(bit flag);
           =2 void PowerDown_XTAL(bit flag);
           =2 
           =2 void ChangeInput(BYTE newsel);
           =2 
           =2 
           =2 void WaitPowerOn(void);
           =2 void PowerOff(void);
           =2 BYTE GetNextInputSelection(void);
           =2 
           =2 BYTE WantToStopTVScan(void);
           =2 
           =2 //BYTE IsTW8801(void);
           =2 //BYTE IsTW8803(void);
           =2 //BYTE ConvertVideoVSAT(BYTE reg);
           =2 
           =2 BYTE IsNoInput(void);
           =2 void LoadEEPROM (void);
           =2 void Hs_InitVars(void);
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 17  

           =2 void AdjustAutoDayNight(BYTE val);
           =2 void ACCPowerControl(void);
           =2 void ON_LVDS(void);
           =2 void OFF_LVDS(void);
           =2 void main_loop(void);
           =2 struct RegisterInfo
           =2 {
           =2    int  Min;
           =2    int  Max;
           =2    int  Default;
           =2 };
           =2 struct LongRegisterInfo
           =2 {
           =2    WORD Min;
           =2    WORD Max;
           =2    WORD Default;
           =2 };
           =2 
           =2 
           =2 typedef enum   ///add enum  by ryan@20170907
           =2 {
           =2   NORMALL_MODE,
           =2   REVERSE_TRIG,
           =2   LEFT_TRIG,
           =2   RIGHT_TRIG,
           =2 #ifdef USE_CAMD 
           =2   CAMD_TRIG,
           =2 #endif  
           =2   CAMC_TRIG,
           =2   VGA_TRIG,
           =2   PARK_TRIG,
           =2   No_TRIG,
           =2   TRIGGER_NUM
           =2 }TriggerModeType;
           =2 
           =2 
           =2 #endif  // __MAIN__
 236      =2  
   5      =1  
   6      =1  //Value for register 0x44
   7      =1  //#define DECODER_YCbCr   0x08    //xxxx bbxx
   8      =1  //#define RGB_RGB       0x0C
   9      =1  
  10      =1  #define TW88_FPLL0      0xf9
  11      =1  #define TW88_FPLL1      0xfa
  12      =1  #define TW88_FPLL2      0xfb
  13      =1  #define TW88_FSS      0xfc
  14      =1  #define TW88_FSS_PD     0xfd
  15      =1  #define TW88_PLL_DIV    0xfe
  16      =1  
  17      =1  //#define TW88_XSCALE     0x5d
  18      =1  //#define TW88_YSCALE     0x5e
  19      =1  
  20      =1  #define TW88_XUSCALELO    0x60
  21      =1  #define TW88_XDSCALELO    0x61
  22      =1  #define TW88_YUSCALELO    0x62
  23      =1  #define TW88_XYSCALEHI    0x63
  24      =1  #define TW88_XUSCALEFINE  0x69
  25      =1  #define TW88_YUSCALEFINE  0x6a
  26      =1  
  27      =1  //Power Mgt
  28      =1  #define POWER_OFF     0
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 18  

  29      =1  #define POWER_STANDBY   1
  30      =1  #define POWER_SUSPEND   2
  31      =1  #define POWER_ON      3
  32      =1  
  33      =1  //void TWChipsDetect(void);
  34      =1  void SetAutoDetectStd(void);
  35      =1  void ClearAutoDetectStd(BYTE);
  36      =1  void I2CDeviceInitialize( CODE_P BYTE *RegSet);
  37      =1  
  38      =1  
  39      =1  //0x63.. Register Group
  40      =1  #define GROUP_YCbCr     0x40
  41      =1  #define GROUP_RGB     0
  42      =1  #define SelectPanelAttrRegGroup(A)        WriteTW88(0x70, (ReadTW88(0x70) & 0xbf) | A)
  43      =1  
  44      =1  //#if defined TW8801 || defined TW8803
  45      =1  #define FB_MAIN   2
  46      =1  #define FB_NORMAL 1
  47      =1  #define FB_RGB    0
  48      =1  //void SetFBmode( BYTE mode );
  49      =1  //#endif // TW8801
  50      =1  
  51      =1  
  52      =1  //=============================================================================
  53      =1  //                               LCD Functions   
  54      =1  //=============================================================================
  55      =1  //BYTE GetLCDPowerState(void);
  56      =1  void SetLCDPowerState(BYTE dat);
  57      =1  
  58      =1  BYTE IsFreeRun(void);
  59      =1  #if defined( SUPPORT_PC ) || defined( SUPPORT_DTV )
           =1 void PanelFreeRun(BYTE on);
           =1 void PanelBlack(BYTE on);
           =1 #endif
  63      =1  #if 0
           =1 void PanelMute(BYTE on);
           =1 #endif
  66      =1  void LCDPowerON(BYTE mute); 
  67      =1  
  68      =1  #ifdef AWT_ML072S
  69      =1  void LCDPowerOFF(void);
  70      =1  #endif
  71      =1  
  72      =1  #ifdef Hs_debug
  73      =1  void LCDPower(void);
  74      =1  #endif
  75      =1  void DPMSmodeOFF(void);
  76      =1  void DPMSmodeON(void);
  77      =1  //=============================================================================
  78      =1  //                          Get PC Parameter Functions   
  79      =1  //=============================================================================
  80      =1  void GetInitPanelAttribute1(void);
  81      =1  //void GetInitPanelAttribute2(void);
  82      =1  void DefaultPanelAttributeForVideo(void);
  83      =1  void SetPVR(WORD pvr);
  84      =1  void SetPHR(WORD phr);
  85      =1  WORD GetPVR(void);
  86      =1  WORD GetPHR(void);
  87      =1  WORD GetHPN(void);
  88      =1  WORD GetVPN(void);
  89      =1  
  90      =1  //WORD GetVactive(void);
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 19  

  91      =1  
  92      =1  WORD GetHstart(void);
  93      =1  WORD GetHend(void);
  94      =1  WORD GetVstart(void);
  95      =1  WORD GetVend(void);
  96      =1  void TuneLineBuffer(BYTE field);
  97      =1  void TuneLineBuffer4Video(BYTE field);
  98      =1  
  99      =1  #if defined (SUPPORT_DTV)
           =1 void SetCoarstForDTV(BYTE en);
           =1 #endif
 102      =1  
 103      =1  WORD GetHactiveStart(void);
 104      =1  WORD GetHactiveEnd(void);
 105      =1  WORD GetVactiveStart(void);
 106      =1  //WORD GetVactiveLen(void);
 107      =1  BYTE GetVBackPorch(void);
 108      =1  void SetVBackPorch(BYTE val);
 109      =1  WORD GetPHP(void);
 110      =1  void SetPHP(WORD php);
 111      =1  void SetPVP(WORD period);
 112      =1  WORD GetPVP(void);
 113      =1  //void SetPanelRelatedRegisters(void);
 114      =1  //BYTE ChangedHPN(void);
 115      =1  //WORD GetVSUD(void);
 116      =1  
 117      =1  void SetDefaultPLL(void);
 118      =1  //void SetDefaultFPHSperiod(void);
 119      =1  //BYTE CalcPHP(DWORD ppf, BYTE tol);
 120      =1  //void ChangeFPHSperiod4DecoderInput(WORD vsud, BYTE tol);
 121      =1  
 122      =1  //-------------------------------------------------------------------
 123      =1  //                  Set Active Region Functions
 124      =1  //-------------------------------------------------------------------
 125      =1  void SetHactiveStart(WORD hstart);
 126      =1  void SetHactiveEnd(WORD hend);
 127      =1  void SetVactiveStart(WORD vstart);
 128      =1  //void SetVactiveLen(WORD van, WORD vstart);
 129      =1  void SetVactiveLen(WORD van);
 130      =1  //=============================================================================
 131      =1  //                     Set Measurement Window Functions   
 132      =1  //=============================================================================
 133      =1  void SetMeasureWindowH(WORD start, WORD stop);
 134      =1  void SetMeasureWindowV(WORD start, WORD stop);
 135      =1  //=============================================================================
 136      =1  //                          Video Input Functions   
 137      =1  //=============================================================================
 138      =1  BYTE IsVideoInput(void);
 139      =1  BYTE DetectDecoderInput(void);
 140      =1  //=============================================================================
 141      =1  //
 142      =1  //=============================================================================
 143      =1  #if defined( SUPPORT_PC ) || defined( SUPPORT_DTV )
           =1 void AutoPHPCalEnable(void);
           =1 void AutoPHPCalDisable(void);
           =1 #endif
 147      =1  void MakeStartInt(void);
 148      =1  void AVGAInput(void);
 149      =1  void DVIInput(void);
 150      =1  //void DVGAInput(void);
 151      =1  void DisableDVGA(void);
 152      =1  
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 20  

 153      =1  void COMPOSITE1Input(void);
 154      =1  void COMPOSITE2Input(void);
 155      =1  void COMPOSITE3Input(void);
 156      =1  void COMPOSITE4Input(void);
 157      =1  
 158      =1  void SVIDEOInput(void);
 159      =1  void COMPONENTInput(void);
 160      =1  void ANALOGDTVInput(void);
 161      =1  void DTVInput(void);
 162      =1  void TVInput(void);
 163      =1  void SCARTInput(void);
 164      =1  
 165      =1  //=============================================================================
 166      =1  //                          Measurement Functions
 167      =1  //=============================================================================
 168      =1  ///void SetPanelBitOrder(BYTE swap);
 169      =1  //void SetPanelSingleDouble(BYTE single);
 170      =1  
 171      =1  BYTE MeasureAndWait(BYTE flag);
 172      =1  
 173      =1  //WORD GetHCounter1(BYTE field);
 174      =1  //void SetHInitial(BYTE field, WORD counter);
 175      =1  //=============================================================================
 176      =1  //                          Invert Polarity Functions
 177      =1  //=============================================================================
 178      =1  void InvertHSYNCPolarity(void);
 179      =1  void InvertVSYNCPolarity(void);
 180      =1  //=============================================================================
 181      =1  //            Interrupt / SW Reset Control Functions
 182      =1  //=============================================================================
 183      =1  void SetInt(void);
 184      =1  //void ClearInt(void);
 185      =1  void SetEnDet(void);
 186      =1  void ClearEnDet(void);
 187      =1  void SWReset(void);
 188      =1  //void ClearSYNCLossStatus(void);
 189      =1  //void ClearSYNCChangeStatus(void);
 190      =1  //=============================================================================
 191      =1  //
 192      =1  //=============================================================================
 193      =1  BYTE IsBypassmode(void);
 194      =1  //BYTE IsInteraced(void);
 195      =1  void Clear_bypass(void);
 196      =1  void MaskOnSYNCInt(void);
 197      =1  void MaskOffSYNCInt(void);
 198      =1  //=============================================================================
 199      =1  //                                ZoomControl
 200      =1  //=============================================================================
 201      =1  void BypassZoom(void);
 202      =1  
 203      =1  void XscaleU(DWORD scale);
 204      =1  void XscaleD(DWORD scale);
 205      =1  void XScale2(DWORD scale);
 206      =1  void YScale2(DWORD scale);
 207      =1  WORD GetYScale(void);
 208      =1  //=============================================================================
 209      =1  //
 210      =1  //=============================================================================
 211      =1  WORD GetHSYNCPulse(void);
 212      =1  WORD GetVSYNCPulse(void);
 213      =1  //#if defined TW8801 || defined TW8803
 214      =1  WORD GetRelativePosition(void);
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 21  

 215      =1  //#endif
 216      =1  //=============================================================================
 217      =1  //                MISC2 for decoder
 218      =1  //=============================================================================
 219      =1  #define BLUE_DECODER    2
 220      =1  #define BLACK_DECODER   0
 221      =1  
 222      =1  BYTE ForceDecoderOutput(BYTE color);
 223      =1  BYTE ClearForcedDecoderOutput(void);
 224      =1  //=============================================================================
 225      =1  //                CC and EDS
 226      =1  //=============================================================================
 227      =1  BYTE GetCCStatus(void);
 228      =1  void DisableCC(void);
 229      =1  void EnableCC(void);
 230      =1  BYTE GetCCData(void);
 231      =1  BYTE IsCCEnabled(void);
 232      =1  void EnableEDS(void);
 233      =1  void DisableEDS(void);
 234      =1  void RecoverCCOverflow(void);
 235      =1  
 236      =1  #define CCFIFOHalfFull()      (ReadDecoder(CSTATUS) & 0x04)
 237      =1  //=============================================================================
 238      =1  //                Internal PLL
 239      =1  //=============================================================================
 240      =1  BYTE GetPOST(void);
 241      =1  void SetPLLS(BYTE plls);
 242      =1  BYTE GetREFDM(void);
 243      =1  void SetREFDM(BYTE refdm);
 244      =1  DWORD GetFBDN(void);
 245      =1  void SetFBDN(WORD fbdn, BYTE vcsel);
 246      =1  DWORD GetPPF(void);
 247      =1  void ChangeInternPLL(DWORD _PPF);
 248      =1  
 249      =1  //=============================================================================
 250      =1  //                Macros for attribute
 251      =1  //=============================================================================
 252      =1  //#define GetOSDTransReg()            ReadTW88(0xAE)
 253      =1  //#define SetOSDTransReg(AlphaV)          WriteTW88(0xAE, (BYTE)AlphaV )
 254      =1  
 255      =1  #define GetPanelContrastReg(gccolor)      ReadTW88(0x71+gccolor)
 256      =1  #define SetPanelContrastReg(sccolor, cval)    WriteTW88(0x71+sccolor,cval)
 257      =1  
 258      =1  #define GetPanelBrightnessReg(gbcolor)      ReadTW88(0x74+gbcolor);
 259      =1  #define SetPanelBrightnessReg(sbcolor, bval)  WriteTW88(0x74+sbcolor,bval);
 260      =1  
 261      =1  #define SetDTVBrightnessReg(bval)       WriteTW88(0x74,bval);
 262      =1  
 263      =1  #define GetPanelSaturationReg(gbcolor)      ReadTW88(0x72+gbcolor);
 264      =1  #define SetPanelSaturationReg(sbcolor, bval)  WriteTW88(0x72+sbcolor,bval);
 265      =1  
 266      =1  #define SetPanelSharpnessReg(bval)        WriteTW88(0x78,((bval&0x07)|0x38) );
 267      =1  
 268      =1  #define SetPanelHueReg(bval)          WriteTW88(0x70, (ReadTW88(0x70) & 0xc0 | (bval)) );
 269      =1  
 270      =1  #define GetVideoContrastReg()         ReadDecoder(CONTRAST)
 271      =1  #define SetVideoContrastReg(vcval)        WriteDecoder(CONTRAST, vcval)
 272      =1  
 273      =1  #define GetVideoBrightnessReg()         ReadDecoder(BRIGHT)
 274      =1  #define SetVideoBrightnessReg(vbval)      WriteDecoder(BRIGHT, vbval )
 275      =1  
 276      =1  #define GetVideoSaturationReg(gvstype)      ReadDecoder(SAT_U+gvstype)
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 22  

 277      =1  #define SetVideoSaturationReg(svstype, vsval) WriteDecoder(SAT_U+svstype, vsval)
 278      =1  
 279      =1  #define GetVideoHueReg()            ReadDecoder(HUE)
 280      =1  #define SetVideoHueReg(vhval)         WriteDecoder(HUE, vhval )
 281      =1  
 282      =1  #define GetVideoSharpnessRegDef         (ReadDecoder(SHARPNESS) & 0x0f) 
 283      =1  
 284      =1  #define GetVideoSharpnessReg()          GetVideoSharpnessRegDef
 285      =1  //#define SetVideoSharpnessReg(vshval)      WriteDecoder(SHARPNESS, vshval )
 286      =1  #define SetVideoSharpnessReg(vshval)      WriteDecoder(SHARPNESS, ((ReadDecoder(SHARPNESS) & 0xf0) | (vshval 
             -& 0x0f) ) );
 287      =1  
 288      =1  #ifdef TW9908
           =1 #define SetVideoVPeakingReg(vshval)
           =1 #else
 291      =1  #define SetVideoVPeakingReg(vshval)       WriteDecoder(V_PEAKING, ((ReadDecoder(V_PEAKING) & 0xf8) | (vshval 
             -& 0x07) ) );
 292      =1  #endif
 293      =1  
 294      =1  #define SetVideoHfilterReg(val)         WriteDecoder(HFILTER, ((ReadDecoder(HFILTER) & 0xf8) | (val & 0x07) )|
             -0x08 );
 295      =1  //----------------------------------------------------------------------------------
 296      =1  //color type
 297      =1  #define RED   0
 298      =1  #define GREEN 1
 299      =1  #define BLUE  2
 300      =1  #define WHITE 3
 301      =1  //saturation type
 302      =1  #define U_SAT 0
 303      =1  #define V_SAT 1
 304      =1  
 305      =1  //Alpha Blending Level
 306      =1  #define _0    0
 307      =1  #define _25   0x12
 308      =1  #define _37_5 0x13
 309      =1  #define _50   0x14
 310      =1  #define _100  0x18
 311      =1  
 312      =1  BYTE GetKey(BYTE repeat);
 313      =1  
 314      =1  /*
 315      =1  BYTE Mapping( int fromValue, struct RegisterInfo fromRange,
 316      =1                                   int * toValue, struct RegisterInfo toRange );
 317      =1  */
 318      =1  BYTE Mapping1( int fromValue, CODE_P struct RegisterInfo *fromRange,
 319      =1                                   int * toValue, CODE_P struct RegisterInfo *toRange );
 320      =1  #ifdef KEILC
 321      =1  #define Mapping2( A, B, C, D )      Mapping1( A, B, C, D )
 322      =1  #define Mapping3( A, B, C, D )      Mapping1( A, B, C, D )
 323      =1  #else
           =1 BYTE Mapping2( int fromValue, IDATA_P struct RegisterInfo *fromRange,
           =1                                  int * toValue, CODE_P struct RegisterInfo *toRange );
           =1 BYTE Mapping3( int fromValue, CODE_P struct RegisterInfo *fromRange,
           =1                                  int * toValue, IDATA_P struct RegisterInfo *toRange );
           =1 #endif
 329      =1  
 330      =1  BYTE GetAttributesFromNTSCSettings(BYTE index);
 331      =1  
 332      =1  #endif  // __TW88__
 333      =1  
  14          
  15          #include "osdbasic.h"
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 23  

   1      =1  //osd_basic.h
   2      =1  //LJY11012001
   3      =1  #ifndef __OSD_BASIC__
   4      =1  #define __OSD_BASIC__
   5      =1  
   6      =1  // osd_basic.h
   7      =1  // char code
   8      =1  //#include "apilib.h"
   9      =1  
  10      =1  //ljy052903
  11      =1  //definition for internal OSD
  12      =1  #define FONT_WIDTH_TW88     12
  13      =1  #define FONT_HEIGHT_TW88    18
  14      =1  #define PIXS_PER_XSTEP_TW88   8
  15      =1  #define LINES_PER_YSTEP_TW88  4
  16      =1  #define MAX_OSDWINDOW_TW88    8
  17      =1  
  18      =1  // Using TW88 OSD for Menu
  19      =1  #define FONT_WIDTH      12
  20      =1  #define FONT_HEIGHT     18
  21      =1  #define PIXS_PER_XSTEP    8
  22      =1  #define LINES_PER_YSTEP   4
  23      =1  #define MAX_OSDWINDOW   4
  24      =1  
  25      =1  #define MAX_FONT_BYTES    27
  26      =1  #define RAMFONT   0xFE
  27      =1  #define ROMFONT   0xFF
  28      =1  #define NO_UDFONT     226 
  29      =1  
  30      =1  #define FONT_ROM  1
  31      =1  #define FONT_RAM  2
  32      =1  
  33      =1  
  34      =1  /////////////////////////////////
  35      =1  // Old Registers...
  36      =1  /*
  37      =1    #define TW88_WIN1ATTR   0x76
  38      =1    #define TW88_WIN1XSTART   0x77
  39      =1    #define TW88_WIN1YSTART   0x78
  40      =1    #define TW88_WIN1WIDTH    0x79
  41      =1    #define TW88_WIN1HEIGHT   0x7a
  42      =1    #define TW88_WIN1BRDATTR  0x7b
  43      =1    #define TW88_WIN1BRDWIDTH 0x7c
  44      =1    #define TW88_WIN1BRDHEIGHT  0x7d
  45      =1    #define TW88_WIN1XSPACE   0x7e    // between characters.
  46      =1    #define TW88_WIN1YSPACE   0x7f
  47      =1    #define TW88_WIN1SADDR    0x80    // starting address of OSD ram for Windows 1
  48      =1  */
  49      =1  /////////////////////////////////
  50      =1  
  51      =1  // OSD
  52      =1  #define TW88_ENABLERAM    0x94  // TW8804C
  53      =1  #define TW88_FONTRAMADDR  0x99  // TW8804C
  54      =1  #define TW88_FONTRAMDATA  0x9a  // TW8804C
  55      =1  #define TW88_OSDRAMADDRHI 0x95  // TW8804C
  56      =1  #define TW88_OSDRAMADDRLO 0x96  // TW8804C
  57      =1  #define TW88_OSDRAMDATAHI 0x97  // TW8804C
  58      =1  #define TW88_OSDRAMDATALO 0x98  // TW8804C
  59      =1  #define TW88_MULTISTART   0x9b  // TW8804C
  60      =1  #define TW88_OSDLOCKUPSEL 0x9c
  61      =1  #define TW88_WINNUM     0x9e  // TW8804C
  62      =1  #define TW88_WINATTR    0x9f  //
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 24  

  63      =1  #define TW88_WINXSTART    0xa1  //
  64      =1  #define TW88_WINYSTART    0xa2  //
  65      =1  #define TW88_WINSTART_HI  0xa0  //
  66      =1  #define TW88_WINWIDTH   0xa3  //
  67      =1  #define TW88_WINHEIGHT    0xa4  //
  68      =1  #define TW88_WINBRDATTR   0xa5  //
  69      =1  #define TW88_WINBRDWIDTH  0xa6  //
  70      =1  #define TW88_WINBRDHEIGHT 0xa7  //
  71      =1  #define TW88_WINSPACE   0xa8  // between characters.
  72      =1  #define TW88_WINZOOM    0xa9  //
  73      =1  #define TW88_WINSADDRHI   0xa9  // starting address of OSD ram for Windows 1
  74      =1  #define TW88_WINSADDRLO   0xaa  // starting address of OSD ram for Windows 1
  75      =1  
  76      =1  #define TW88_WINSHADOW    0xab  //
  77      =1  #define TW88_WINBLENDING  0xac  //
  78      =1  #define TW88_WINCHEFFECT  0xad  //
  79      =1  
  80      =1  
  81      =1  //Attributes for OSD
  82      =1  #define WINZOOMx1     0x01
  83      =1  #define WINZOOMx2     0x02
  84      =1  #define WINZOOMx3     0x03
  85      =1  #define WINZOOMx4     0x04
  86      =1  #define SHOW        0x08  
  87      =1  
  88      =1  #define EXTENDED_COLOR    0x80
  89      =1  #define BG_COLOR_BLACK    0x00  //For background color of window, border, and char. 
  90      =1  #define BG_COLOR_RED    0x40  
  91      =1  #define BG_COLOR_GREEN    0x20
  92      =1  #define BG_COLOR_YELLOW   0x60
  93      =1  #define BG_COLOR_BLUE   0x10
  94      =1  #define BG_COLOR_MAGENTA  0x50
  95      =1  #define BG_COLOR_CYAN   0x30
  96      =1  #define BG_COLOR_WHITE    0x70
  97      =1  #define BG_COLOR_TRANS    0x80  
  98      =1  #define BG_COLOR_MASK   0xf0  
  99      =1  
 100      =1  #define CH_COLOR_BLACK    0x00  //For color of char.
 101      =1  #define CH_COLOR_RED    0x04  
 102      =1  #define CH_COLOR_GREEN    0x02
 103      =1  #define CH_COLOR_YELLOW   0x06
 104      =1  #define CH_COLOR_BLUE   0x01
 105      =1  #define CH_COLOR_MAGENTA  0x05
 106      =1  #define CH_COLOR_CYAN   0x03
 107      =1  #define CH_COLOR_WHITE    0x07
 108      =1  #define CH_BLINK      0x08  
 109      =1  #define CH_COLOR_MASK   0x0f  
 110      =1  
 111      =1  #define CL_BLACK      0x00  //For color of char.
 112      =1  #define CL_BLUE       0x01
 113      =1  #define CL_GREEN      0x02
 114      =1  #define CL_CYAN       0x03
 115      =1  #define CL_RED        0x04  
 116      =1  #define CL_MAGENTA      0x05
 117      =1  #define CL_YELLOW     0x06
 118      =1  #define CL_WHITE      0x07
 119      =1  #define CL_BLINK      0x08  
 120      =1  
 121      =1  // 0x76*(WindowNo*0x0b)
 122      =1  #define WINDOW_DISABLE    0x00
 123      =1  #define WINDOW_ENABLE   0x01
 124      =1  #define WINDOW_3D_ENABLE    0x04
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 25  

 125      =1  #define WINDOW_3D_BOTTOM    0x08
 126      =1  #define WINDOW_3D_TOP     0x00
 127      =1  #define WINDOW_TRANS_ENABLE 0x80
 128      =1  
 129      =1  #define WINBDCOLOR_ENABLE 0x80
 130      =1  #define WINBDCOLOR_EXTENT 0x80
 131      =1  
 132      =1  
 133      =1  #define WINBLENDING_DISABLE 0x00
 134      =1  #define WINBLENDING_BACK    0x10
 135      =1  #define WINBLENDING_FORE    0x20
 136      =1  #define WINBLENDING_ALL     0x30
 137      =1  
 138      =1  #define WINSHADOW_ENABLE  0x80
 139      =1  // 0xc8*WindowNo
 140      =1  #define WIN_MULTICOLOR_ENABLE 0x20
 141      =1  #define WIN_CH_EFFECT_ENABLE  0x10
 142      =1  #define WIN_CH_EFFECT_SHADOW  0x08
 143      =1  
 144      =1  
 145      =1  
 146      =1  ///////// TW8804C /////////////
 147      =1  // Window Number
 148      =1  #define WINNUM1       1
 149      =1  #define WINNUM2       2
 150      =1  #define WINNUM3       3
 151      =1  #define WINNUM4       4
 152      =1  
 153      =1  // Index 0x9f Defination
 154      =1  #define WIN_BG_COLOR_EX   0x80
 155      =1  #define WIN_BG_COLOR_EX0  0x00
 156      =1  #define WIN_3D_TYPE     0x08
 157      =1  #define WIN_3D_TYPE0    0x00
 158      =1  #define WIN_3D_EN     0x04
 159      =1  #define WIN_3D_EN0      0x00
 160      =1  #define WIN_3D_LEVEL    0x02
 161      =1  #define WIN_EN        0x01
 162      =1  #define WIN_EN0       0x00
 163      =1  
 164      =1  // Index 0xa5 Defination
 165      =1  #define WIN_BD_EN     0x80
 166      =1  #define WIN_BD_EN0      0x00
 167      =1  #define WIN_BD_WIDTH(a)   a
 168      =1  
 169      =1  // Index 0xa6 Defination
 170      =1  #define WIN_BD_COLOR_EX   0x80
 171      =1  #define WIN_BD_COLOR_EX0  0x00
 172      =1  #define WIN_H_BD_W(a)   a
 173      =1  
 174      =1  // Index 0xa7 Defination
 175      =1  #define WIN_V_BD_W(a)   a
 176      =1  
 177      =1  // Index 0xa8
 178      =1  #define WIN_CH_VSPACE(a)  (a<<4)
 179      =1  #define WIN_CH_HSPACE(a)  a
 180      =1  
 181      =1  // Index 0xa9 Defination
 182      =1  #define WIN_VZOOM(a)    (a-1)
 183      =1  #define WIN_HZOOM(a)    (a-1)
 184      =1  #define WIN_SADDR(a)    a
 185      =1  
 186      =1  // Index 0xab
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 26  

 187      =1  #define WIN_SHADOW_EN   0x80
 188      =1  #define WIN_SHADOW_EN0    0x00
 189      =1  #define WIN_SHADOW_W(a)   a
 190      =1  
 191      =1  // ad
 192      =1  #define WIN_SHADOW_COLOR_EX   0x80
 193      =1  #define WIN_SHADOW_COLOR_EX0  0x00
 194      =1  #define WIN_MULTI_EN      0x40
 195      =1  #define WIN_MULTI_EN0     0x00
 196      =1  #define WIN_V_EXT_EN      0x20
 197      =1  #define WIN_V_EXT_EN0     0x00
 198      =1  #define WIN_CH_BDSH_SEL(a)    a
 199      =1  #define SEL_BORDER        0
 200      =1  #define SEL_SHADOW        1
 201      =1  #define WIN_CH_BDSH_COLOR_EX  0x08
 202      =1  #define WIN_CH_BDSH_COLOR_EX0 0x00
 203      =1  
 204      =1  #define OSD_Win_Num(a)      0x9e, a-1
 205      =1  #define OSD_Win_Start_Addr    0xa0
 206      =1  #define OSD_Win_Attr(a)       a
 207      =1  #define OSD_Win_Start(h,v)       (BYTE)(((WORD)h>>8) | (((WORD)v>>8)<<4)),(BYTE)h, (BYTE)v
 208      =1  #define OSD_Win_Width(a)      a
 209      =1  #define OSD_Win_Height(a)     a
 210      =1  #define OSD_Win_Border(a)     a
 211      =1  #define OSD_Win_HBorder(a)      a
 212      =1  #define OSD_Win_VBorder(a)      a
 213      =1  #define OSD_Win_CH_Space(a)     a
 214      =1  #define OSD_Win_ZM_SAddr(h,v,a)   ((h<<6)|(v<<4)|(a>>8)), (BYTE)a
 215      =1  #define OSD_Win_Shadow(a)     a
 216      =1  #define OSD_Win_Blending(a)     a
 217      =1  #define OSD_Win_CH_BorderShadow(a)  a
 218      =1  
 219      =1  
 220      =1  #define SetOSDWindowNum(winno)    WriteTW88(TW88_WINNUM, winno-1)
 221      =1  
 222      =1  //#define  OSD_Window_Attr(Trans_en,Color,3D_Type,3D_en,W_en)       (((( Trans_en | Color ) | 3D_Type) | 3
             -D_en) | W_en)
 223      =1  #define  OSD_Window_Attr(a,b,c,d,e)                 (((( a | b ) | c) | d) | e)
 224      =1  #define  OSD_WShadow_Attr(W_Shadow_en,Color,Width)          W_Shadow_en | Color | Width
 225      =1  //#define  OSD_Blending(en,level)                   en | (level & 0x0f)
 226      =1  //#define  OSD_Ch_Effect(Multi, Effect_En, ShadowBorder, Color)   Multi | Effect_En | ShadowBorder | Color 
             - 
 227      =1  
 228      =1  
 229      =1  struct OSDStrInfo 
 230      =1  {
 231      =1    BYTE  cnt;
 232      =1    WORD  addr;
 233      =1    BYTE  attr;
 234      =1    DWORD str;
 235      =1  };
 236      =1  /*
 237      =1  struct BarInfo {
 238      =1    struct RegisterInfo BarCnt;
 239      =1    BYTE  winno;
 240      =1    BYTE  xoff;
 241      =1    BYTE  yoff;
 242      =1    BYTE  color;
 243      =1    int   bar_cnt;
 244      =1  };
 245      =1  */
 246      =1  struct FontData {
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 27  

 247      =1    BYTE  font[27];
 248      =1  } ;
 249      =1  
 250      =1  //====================================================================
 251      =1  //  Internal OSD Function
 252      =1  void CopyCharToOSDRAM_TW88(BYTE Addr, BYTE attr, BYTE ch);
 253      =1  void CopyUDCharToOSDRAM_TW88(BYTE Addr, BYTE attr, BYTE ch);
 254      =1  //BYTE GetOSDWindowWidth_TW88(BYTE winno);
 255      =1  WORD GetOSDWindowSA_TW88(BYTE winno);
 256      =1  void SetOSDWindowX_TW88(BYTE winno, BYTE x);
 257      =1  void SetOSDWindowY_TW88(BYTE winno, BYTE y);
 258      =1  void SetOSDWindowWidth_TW88(BYTE winno, BYTE w);
 259      =1  void SetOSDWindowSA_TW88(BYTE winno, WORD sa);
 260      =1  
 261      =1  void SetOSDItalicsAndUnderline(BYTE italics, BYTE underline);
 262      =1  
 263      =1  void SetOSDHBorderWidth_TW88(BYTE winno, BYTE w);
 264      =1  //BYTE GetOSDWindowColor_TW88(BYTE winno);
 265      =1  void SetOSDWindowColor_TW88(BYTE CCWin, BYTE color);
 266      =1  void EnableOSDRAMAndChangeFont(BYTE type);
 267      =1  void WriteCharToOSDRAM(WORD addr, BYTE ch, BYTE attr);
 268      =1  
 269      =1  
 270      =1  void ShowOSDWindowAll(BYTE on);
 271      =1  void ShowOSDWindow_TW88(BYTE winno, BYTE onoff);
 272      =1  void ClearOSD_TW88(void);
 273      =1  //void CreateOSDWindow_TW88(BYTE winno, BYTE x, BYTE y, BYTE w, BYTE h, WORD sa, BYTE attr);
 274      =1  /*not yet!!
 275      =1  //ljy012304...CC_ADJUST_POS
 276      =1  void SetOSDWindowXS_TW88(BYTE winno, BYTE xs);
 277      =1  void SetOSDWindowYS_TW88(BYTE winno, BYTE ys);
 278      =1  */
 279      =1  
 280      =1  //====================================================================
 281      =1  //  OSDMenu Functions
 282      =1  
 283      =1  //--------------------------------------------------------------------
 284      =1  //  Functions used in only Menu
 285      =1  #define   CONVERT_CODE      0x80
 286      =1  
 287      =1  void InitOSDWindow(BYTE *ptr);
 288      =1  
 289      =1  WORD GetOSDWindowX(BYTE winno);
 290      =1  WORD GetOSDWindowY(BYTE winno);
 291      =1  BYTE CreateOSDWindowOutline(BYTE winno, BYTE w, BYTE color);
 292      =1  void CreateOSDMenuWindow(BYTE, BYTE, BYTE, BYTE, BYTE, BYTE, BYTE);
 293      =1  void ClearOSDLine(BYTE winno, BYTE sx, BYTE sy, BYTE cnt, BYTE attr);
 294      =1  void WriteStringToAddr(WORD addr, BYTE *str, BYTE cnt);
 295      =1  void DrawAttrString(WORD addr, BYTE *str, BYTE cnt);
 296      =1  void DrawAttrCnt(WORD addr, BYTE color, BYTE cnt);
 297      =1  void ClearDataCnt(WORD, BYTE);
 298      =1  #define   SetOSDWindowX(A, B)       SetOSDWindowX_TW88(A, B)
 299      =1  #define   SetOSDWindowY(A, B)       SetOSDWindowY_TW88(A, B)
 300      =1  
 301      =1  //--------------------------------------------------------------------
 302      =1  //  Functions used in Menu and others
 303      =1  #define   ShowOSDWindow(A, B)       ShowOSDWindow_TW88(A, B)
 304      =1  #define   ClearOSD()              ClearOSD_TW88()
 305      =1  
 306      =1  //================================================================
 307      =1  //  Font
 308      =1  void DownloadUDFont(void);
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 28  

 309      =1  #ifdef Hs_debug
 310      =1  void DisplayROMFont(BYTE);
 311      =1  void DisplayRAMFont(BYTE);
 312      =1  #endif
 313      =1  void DownloadFont(BYTE cod, CODE_P BYTE *fontdata);
 314      =1  //void DisplayGrid( void );
 315      =1  //void DisplayCone( void );
 316      =1  //void DisplayJapanese( void );
 317      =1  void TestRAMFont( void );
 318      =1  #ifdef BANKING
           =1 void DisplayMGrid( BYTE );
           =1 void DisplayMessage( void );
           =1 void DisplayChinese( void );
           =1 void DisplayJapanese( void );
           =1 void DisplayKorean( void );
           =1 void DisplayGridBank0( BYTE n );
           =1 void DisplayGridBank1( BYTE n );
           =1 #endif
 327      =1  
 328      =1  //================================================================
 329      =1  //  OSD COLOR
 330      =1  void Change_OSDColorLookup(void);
 331      =1  void Reset_OSDColorLookup(void);
 332      =1  
 333      =1  //====================================================================
 334      =1  //        Conversion
 335      =1  //====================================================================
 336      =1  BYTE utoa(WORD value, BYTE *str, BYTE radix);
 337      =1  BYTE ltoa_K(long value, BYTE *str, BYTE);
 338      =1  BYTE strlen( BYTE *str );
 339      =1  
 340      =1  #define CStrlen(A)        strlen(A)
 341      =1  
 342      =1  void WaitEndofDisplayArea(void);
 343      =1  
 344      =1  #endif  // __OSD_BASIC__
 345      =1  
  16          #include "dispinfo.h"
   1      =1  #ifndef __DISPINFO__
   2      =1  #define __DISPINFO__
   3      =1  //==================================================================
   4      =1  //        Display Information
   5      =1  //==================================================================
   6      =1  #if (defined WQVGA) && (defined ANALOG_7INCH)
           =1 #define   INPUTINFO_ZOOM    WINZOOMx1
           =1 #define   LOGO_ZOOM     WINZOOMx3
           =1 
           =1 #else // (defined WQVGA) && (defined SHARP_LQ043T3DX02)
  11      =1  
  12      =1    #ifdef AWT_ML072S
  13      =1    #define   INPUTINFO_ZOOM    WINZOOMx4
  14      =1    #else
           =1   #define   INPUTINFO_ZOOM    WINZOOMx2
           =1   #endif
  17      =1  #define   LOGO_ZOOM     WINZOOMx2
  18      =1  #endif
  19      =1  //#define   VOL_ZOOM      WINZOOMx4
  20      =1  #define   MUTE_ZOOM     WINZOOMx3
  21      =1  #define   TVCHN_ZOOM      WINZOOMx4
  22      =1  #define   RATINGINFO_ZOOM   WINZOOMx3
  23      =1  #define     SCANTV_ZOOM     WINZOOMx2   //ljy012304
  24      =1  #define   PCINFO_ZOOM     WINZOOMx2
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 29  

  25      =1  #define     BAR_ZOOM      WINZOOMx2
  26      =1  
  27      =1  
  28      =1  #define DVRStatus_OSDWIN  4 
  29      =1  #define DVRStatus_ADDR  180
  30      =1  
  31      =1  extern  BYTE  DisplayedOSD;
  32      =1  
  33      =1  
  34      =1  void ClearDisplayedOSD( BYTE newd );
  35      =1  void SetDisplayedOSD( BYTE newd );
  36      =1  BYTE GetDisplayedOSD(void);
  37      =1  void ClearOSDInfo(void);
  38      =1  
  39      =1  void DisplayInput(void);
  40      =1  BYTE ClearInput(void);
  41      =1  BYTE ClearInput2s(void);
  42      =1  
  43      =1  //void DisplayLogo(void);
  44      =1  
  45      =1  void ClearLogo(void);
  46      =1  
  47      =1  void DisplayPCInfo(BYTE CODE *ptr);
  48      =1  void ClearPCInfo(void);
  49      =1  void DisplayAutoAdjust(void);
  50      =1  void ClearAutoAdjust(void);
  51      =1  
  52      =1  
  53      =1  void DisplayVol(void);
  54      =1  #if 0
           =1 void DisplayBrightness(void);
           =1 #endif
  57      =1  #if 0
           =1 void DisplayMuteInfo(void);
           =1 #endif
  60      =1  void ClearMuteInfo(void);
  61      =1  BYTE CheckAndClearOSD(void);
  62      =1  BYTE ClearVlossOsd(void);
  63      =1  #ifdef AWT_ML072S
  64      =1  void VlossHandler(void);
  65      =1  void Check_Vloss(void);
  66      =1  #endif
  67      =1  //==================================================================
  68      =1  //            TV Info
  69      =1  //==================================================================
  70      =1  
  71      =1  BYTE ClearTVInfo(void);
  72      =1  
  73      =1  #endif  // __DISPINFO__
  17          #include "measure.h"
   1      =1  #ifndef __MEASURE__
   2      =1  #define __MEASURE__
   3      =1  
   4      =1  #define EE_DOS        0
   5      =1  
   6      =1  #define EE_SP1        1
   7      =1  #define EE_SP2        2
   8      =1  #define EE_SP3        3
   9      =1  
  10      =1  #define EE_VGA_60     4
  11      =1  #define EE_VGA_66     5
  12      =1  #define EE_VGA_70     6
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 30  

  13      =1  #define EE_VGA_72     7
  14      =1  #define EE_VGA_75     8
  15      =1  #define EE_VGA_85     9
  16      =1  
  17      =1  #define EE_SVGA_56      10
  18      =1  #define EE_SVGA_60      11
  19      =1  #define EE_SVGA_70      12
  20      =1  #define EE_SVGA_72      13
  21      =1  #define EE_SVGA_75      14
  22      =1  #define EE_SVGA_85      15
  23      =1  
  24      =1  #define EE_832_75     16
  25      =1  
  26      =1  #define EE_XGA_60     17
  27      =1  #define EE_XGA_70     18
  28      =1  #define EE_XGA_72     19
  29      =1  #define EE_XGA_75     20
  30      =1  #define EE_XGA_85     21
  31      =1  
  32      =1  #define EE_1152_60      22
  33      =1  #define EE_1152_70      23
  34      =1  #define EE_1152_75      24
  35      =1  
  36      =1  #define EE_SXGA_60      25
  37      =1  #define EE_SXGA_70      26
  38      =1  #define EE_SXGA_75      27
  39      =1  
  40      =1  #define EE_RGB_480P     28
  41      =1  #define EE_RGB_720P     29
  42      =1  #define EE_RGB_720P50   30
  43      =1  #define EE_RGB_1080I    31
  44      =1  #define EE_RGB_1080I50A   32
  45      =1  #define EE_RGB_1080I50B   33
  46      =1  #define EE_RGB_480I     34
  47      =1  #define EE_RGB_576I     35
  48      =1  #define EE_RGB_576P     36
  49      =1  
  50      =1  #define EE_YPbPr_480P   37
  51      =1  #define EE_YPbPr_720P   38
  52      =1  #define EE_YPbPr_720P50   39
  53      =1  #define EE_YPbPr_1080I    40
  54      =1  #define EE_YPbPr_1080I50A 41
  55      =1  #define EE_YPbPr_1080I50B 42
  56      =1  #define EE_YPbPr_480I   43
  57      =1  #define EE_YPbPr_576I   44
  58      =1  #define EE_YPbPr_576P   45
  59      =1  
  60      =1  #define EE_PC_MAX     46
  61      =1  
  62      =1  #define EE_PC_NO_SIGNAL   0xfe
  63      =1  #define EE_PC_UNKNOWN   0xff
  64      =1  
  65      =1  struct _PCMDATA {
  66      =1    CODE_P BYTE  Support;
  67      =1    CODE_P WORD  HAN;
  68      =1    CODE_P WORD  VAN;
  69      =1    CODE_P WORD  IVF;
  70      =1    CODE_P WORD  CLOCK;
  71      =1    CODE_P WORD  low;
  72      =1    CODE_P WORD  high;
  73      =1    CODE_P WORD  Hstart;
  74      =1    CODE_P WORD  Vstart;
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 31  

  75      =1    CODE_P WORD  IPF;   // 0.1MHz
  76      =1    CODE_P WORD  PPF;   // 0.1MHz
  77      =1    CODE_P BYTE  VBack;
  78      =1  };
  79      =1  #ifndef AUTOCALC_PC
           =1 
           =1 #ifdef SUPPORT_DTV
           =1 struct _DTVMDATA {
           =1   CODE_P BYTE Reg62;
           =1   CODE_P BYTE RegBC;
           =1   CODE_P BYTE RegBD;
           =1   CODE_P BYTE RegBE;
           =1   CODE_P WORD PHP;
           =1 };
           =1 #endif
           =1 #endif
  91      =1  #if defined XGA
           =1   #define MAX_PPF    90000000
           =1 #elif defined SXGA
           =1   #define MAX_PPF   135000000
           =1 #elif defined WXGA
           =1   #define MAX_PPF    90000000
           =1 #elif defined WVGA
  98      =1    #define MAX_PPF    90000000
  99      =1  #elif defined VGA
           =1   #define MAX_PPF    50000000
           =1 #elif defined SVGA
           =1   #define MAX_PPF    80000000
           =1 #elif defined QVGA
           =1   #define MAX_PPF    30000000
           =1 #elif defined WQVGA
           =1   #define MAX_PPF    30000000
           =1 #endif
 108      =1  
 109      =1  extern BYTE cLastSyncLoss;
 110      =1  extern BYTE PcMode;
 111      =1  
 112      =1  void CompLT170E2(void);
 113      =1  
 114      =1  WORD gap(WORD a, WORD b);
 115      =1  
 116      =1  //===================================================================
 117      =1  WORD GetHpnVpn(BYTE);
 118      =1  
 119      =1  WORD ConvertBasedOnInput(WORD dat);
 120      =1  
 121      =1  BYTE IsDTVInput(void);
 122      =1  
 123      =1  void SetVValueForPanel(WORD vstart);
 124      =1  BYTE SetHValueForPanel(void);
 125      =1  BYTE GetActiveRegion(void);
 126      =1  
 127      =1  BYTE DetectAndSetForVGAInput(BYTE);
 128      =1  #ifdef SUPPORT_DTV
           =1 BYTE DetectAndSetForDTVInput(BYTE);
           =1 #endif
 131      =1  void CheckPCinput(void);
 132      =1  void CheckDTVinput(void);
 133      =1  
 134      =1  WORD GetCoarseValue(void);
 135      =1  BYTE GetPhaseValue(void);
 136      =1  WORD SetPCCoarseValue(BYTE val);
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 32  

 137      =1  BYTE SetPhaseValue(BYTE val);
 138      =1  
 139      =1  void DisplayResultAndSetActiveRange(void);
 140      =1  
 141      =1  //=============================================================================
 142      =1  //                    PC Screen Position Move Functions
 143      =1  //=============================================================================
 144      =1  void MoveActiveVpos(BYTE val);    // Up/Down
 145      =1  void MoveActiveHpos(BYTE val);    // Left/Right
 146      =1  
 147      =1  BYTE GetVPosition(void);
 148      =1  BYTE SetVPosition(BYTE val);
 149      =1  BYTE GetHPosition(void);
 150      =1  BYTE SetHPosition(BYTE val);
 151      =1  
 152      =1  void ResetPCValue(void);
 153      =1  
 154      =1  CODE_P BYTE *GetPCInputSourceName(void);
 155      =1  BYTE AutoAdjust(void);
 156      =1  
 157      =1  #endif // __MEASURE__
  18          #include "debug.h"
   1      =1  #ifndef __DEBUG__
   2      =1  #define __DEBUG__
   3      =1  
   4      =1  #define DEBUG_ERR 1
   5      =1  #define DEBUG_WARN  2
   6      =1  #define DEBUG_INFO  3
   7      =1  #define DEBUG_BREAK 4
   8      =1  
   9      =1  #ifdef DEBUG_PAUSE
           =1 #define Pause(a)  { Printf("\r\n"); Printf(a); while(!RS_ready()); RS_rx(); }
           =1 #endif
  12      =1  //#define BURSTLOCK 7
  13      =1  
  14      =1  void DebugWindowControl (void) ;
  15      =1  void Draw_Debug_Char(void);
  16      =1  void DebugWindowCursor( BYTE flag ) ;
  17      =1  void DebugWindowData( BYTE flag ) ;
  18      =1  void Debug_Write(void);
  19      =1  void Debug_Read(void);
  20      =1  
  21      =1  
  22      =1  
  23      =1  #endif  // __DEBUG__
  24      =1  
  25      =1  #ifdef CHIP_MANUAL_TEST
           =1 BYTE DelaynCheck(void);
           =1 void ChipManualTest(void);
           =1 
           =1 #endif
  19          #include "printf.h"
   1      =1  #ifndef __PRINTF__
   2      =1  #define __PRINTF__
   3      =1  
   4      =1  #define _outchar(c) while(1) { if( !RS_Xbusy ) { SBUF = c; RS_Xbusy=1; break; } }
   5      =1  #define Putch(c) _outchar(c)
   6      =1  
   7      =1  #ifdef SERIAL
   8      =1  
   9      =1   void Printf ( const char CODE_P *fmt, ... );
  10      =1   void Puts ( CODE_P char *ptr );
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 33  

  11      =1  
  12      =1  #define TW2835Cmd(a)   Puts ( a )
  13      =1  
  14      =1  #else
           =1 
           =1  #undef  DEBUG
           =1  #define Printf(a,b)  //
           =1  #define Puts(a)      //
           =1 
           =1 #endif
  21      =1  
  22      =1  
  23      =1  #ifndef DEBUG
  24      =1  
  25      =1   #define dPuts(a)   //
  26      =1   #define wPuts(a)   //
  27      =1   #define ePuts(a)   //
  28      =1  
  29      =1  #else
           =1 
           =1  void dPrintf( const char CODE_P *fmt, ... );
           =1  void wPrintf( const char CODE_P *fmt, ... );
           =1  void ePrintf( const char CODE_P *fmt, ... );
           =1 
           =1  void dPuts( CODE_P char *ptr );
           =1  void wPuts( CODE_P char *ptr );
           =1  void ePuts( CODE_P char *ptr );
           =1 
           =1 #endif  // DEBUG
  40      =1  
  41      =1  BYTE Getch(void);
  42      =1  BYTE Getche(void);
  43      =1  
  44      =1  
  45      =1  #endif  //__PRINTF__
  20          #include "udfont.h"
   1      =1  //udfont.h
   2      =1  #define COLORFONT_START 0x60
   3      =1  //#define MAX_FONT_RAM_CHARS  0xa7 //174
   4      =1  #define MAX_FONT_RAM_CHARS  0xC6 //6Kbytes for RAM
   5      =1  code unsigned char RAMFONTDATA[][27];
   6      =1  code unsigned char OSD_Color_LookUp_Data_Table[][8];
   7      =1  
   8      =1  
  21          #include "regmap.h"
   1      =1  #ifndef __REGMAP__
   2      =1  #define __REGMAP__
   3      =1  
   4      =1  //-----------------------------------------------------------------------------
   5      =1  //        Individual Decoder Registers 
   6      =1  //-----------------------------------------------------------------------------
   7      =1  
   8      =1  #define MCU_STOP_MODE 0xc8  // bit 7 is mcu stop, bit5 is MCU debug
   9      =1  
  10      =1  #define LAD0      0xc9  // Low speed AD channel 0
  11      =1  #define LAD1      0xca  // Low speed AD channel 1
  12      =1  
  13      =1  #define REG_PAGE    0xff
  14      =1  #define STATUS0     0xd0
  15      =1  #define STATUS1     0xd1
  16      =1  #define IRQ_EN1     0xd2
  17      =1  #define IRQ_EN0     0xd3
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 34  

  18      =1  
  19      =1  //-----------------------------------------------------------------------------
  20      =1  //        Individual Decoder Registers 
  21      =1  //-----------------------------------------------------------------------------
  22      =1  
  23      =1  #define DECODERADDRESS  TW88I2CAddress
  24      =1  
  25      =1  #define CVFMT     0x1e  // Component Video Format
  26      =1  #define FBSHIFT     0x38  // RGB Anti-Alias Filter/FB Shift Level
  27      =1  #define SHUE      0x3e  // RGB Hue
  28      =1  #define SCONTRAST   0x3b  // RGB Contrast
  29      =1  #define SBRIGHT     0x3a  // RGB Brightness
  30      =1  #define SCbGAIN     0x3c  // RGB Cb Gain
  31      =1  #define SCrGAIN     0x3d  // RGB Cb Gain
  32      =1  #define RGBCONTROL    0x36  // RGB Powerdown..
  33      =1  #define RGBMISC     0x39
  34      =1  #define FBCONTRL    0x3F
  35      =1  
  36      =1  //#define OSD_ADJ     0xce
  37      =1  #define PNLSHARPNESS  0x78  // Sharpness Control
  38      =1  #define OSDWINSTATUS  0x95
  39      =1  //-----------------------------------------------------------------------------
  40      =1  //        Common Registers
  41      =1  //-----------------------------------------------------------------------------
  42      =1  #define CSTATUS     0x01  // Chip Status
  43      =1  #define INFORM      0x02  // Input Format
  44      =1  #define ACNTL     0x06  // Analog Control
  45      =1  #define CROP_HI     0x07  // Cropping High
  46      =1  #define VDELAY_LO   0x08  // Vertical Delay Low
  47      =1  #define VACTIVE_LO    0x09  // Vertical Active Low
  48      =1  #define HDELAY_LO   0x0a  // Horizontal Delay Low
  49      =1  #define HACTIVE_LO    0x0b  // Horizontal Active Low
  50      =1  #define CNTRL1      0x0c  // Control 1
  51      =1  
  52      =1  #define BRIGHT      0x10  // Brightness Control
  53      =1  #define CONTRAST    0x11  // Contrast Control
  54      =1  #define SHARPNESS   0x12  // Sharpness Control
  55      =1  #define SAT_U     0x13  // Chroma(U) Gain
  56      =1  #define SAT_V     0x14  // Chroma(V) Gain
  57      =1  #define HUE       0x15  // Hue Conrol
  58      =1  #define V_PEAKING   0x17  // Vertical Peaking
  59      =1  
  60      =1  #define CC_STATUS   0x1a  // CC/EDS Status
  61      =1  #define CC_DATA     0x1b  // CC/EDS Data
  62      =1  #define SDT       0x1c  // Standard Selection
  63      =1  #define SDTR      0x1d  // Standard Recognition
  64      =1  
  65      =1  #define V_CONTROL2    0x29  // Vertical Control II
  66      =1  #define HFILTER     0x2c
  67      =1  #define MISC1     0x2d  // Miscellaneous Control 1
  68      =1  #define MISC2     0x2e  // Miscellaneous Control 2
  69      =1  #define MISC3     0x2f  // Miscellaneous Control 2
  70      =1  
  71      =1  #define VBI_CNTL2   0x34  // VBI control 2 - WSSEN
  72      =1  #define CC_ODDLINE    0x35  // CC Odd Line
  73      =1  
  74      =1  #define LADC0     0xc9  //LADC Channel 0 Input Value 
  75      =1  #define LADC1     0xca  //LADC Channel 1 Input Value 
  76      =1  
  77      =1  #define WriteDecoder(index, val)    WriteTW88( index, val )
  78      =1  #define ReadDecoder(index)        ReadTW88( index )
  79      =1  
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 35  

  80      =1  #endif // __REGMAP__
  81      =1  
  22          #include "externs.h"
   1      =1  //
   2      =1  //Externs.h : Register declaration
   3      =1  //
   4      =1  #ifdef INTERNAL_MCU
           =1 extern xdata BYTE REG00, REG01, REG02, REG03, REG04, REG05, REG06, REG07, REG08, REG09, REG0a, REG0b, REG0
             -c, REG0d, REG0e, REG0f,
           =1       REG10, REG11, REG12, REG13, REG14, REG15, REG16, REG17, REG18, REG19, REG1a, REG1b, REG1c, REG1d, REG1
             -e, REG1f,
           =1       REG20, REG21, REG22, REG23, REG24, REG25, REG26, REG27, REG28, REG29, REG2a, REG2b, REG2c, REG2d, REG2
             -e, REG2f,
           =1       REG30, REG31, REG32, REG33, REG34, REG35, REG36, REG37, REG38, REG39, REG3a, REG3b, REG3c, REG3d, REG3
             -e, REG3f,
           =1       REG40, REG41, REG42, REG43, REG44, REG45, REG46, REG47, REG48, REG49, REG4a, REG4b, REG4c, REG4d, REG4
             -e, REG4f,
           =1       REG50, REG51, REG52, REG53, REG54, REG55, REG56, REG57, REG58, REG59, REG5a, REG5b, REG5c, REG5d, REG5
             -e, REG5f,
           =1       REG60, REG61, REG62, REG63, REG64, REG65, REG66, REG67, REG68, REG69, REG6a, REG6b, REG6c, REG6d, REG6
             -e, REG6f,
           =1       REG70, REG71, REG72, REG73, REG74, REG75, REG76, REG77, REG78, REG79, REG7a, REG7b, REG7c, REG7d, REG7
             -e, REG7f,
           =1       REG80, REG81, REG82, REG83, REG84, REG85, REG86, REG87, REG88, REG89, REG8a, REG8b, REG8c, REG8d, REG8
             -e, REG8f,
           =1       REG90, REG91, REG92, REG93, REG94, REG95, REG96, REG97, REG98, REG99, REG9a, REG9b, REG9c, REG9d, REG9
             -e, REG9f,
           =1       REGa0, REGa1, REGa2, REGa3, REGa4, REGa5, REGa6, REGa7, REGa8, REGa9, REGaa, REGab, REGac, REGad, REGa
             -e, REGaf,
           =1       REGb0, REGb1, REGb2, REGb3, REGb4, REGb5, REGb6, REGb7, REGb8, REGb9, REGba, REGbb, REGbc, REGbd, REGb
             -e, REGbf,
           =1       REGc0, REGc1, REGc2, REGc3, REGc4, REGc5, REGc6, REGc7, REGc8, REGc9, REGca, REGcb, REGcc, REGcd, REGc
             -e, REGcf,
           =1       REGd0, REGd1, REGd2, REGd3, REGd4, REGd5, REGd6, REGd7, REGd8, REGd9, REGda, REGdb, REGdc, REGdd, REGd
             -e, REGdf,
           =1       REGe0, REGe1, REGe2, REGe3, REGe4, REGe5, REGe6, REGe7, REGe8, REGe9, REGea, REGeb, REGec, REGed, REGe
             -e, REGef,
           =1       REGf0, REGf1, REGf2, REGf3, REGf4, REGf5, REGf6, REGf7, REGf8, REGf9, REGfa, REGfb, REGfc, REGfd, REGf
             -e, REGff;
           =1 
           =1 #endif  // internal MCU only variables
  23      =1  
  23          
  24          extern CODE struct RegisterInfo UserRange;
  25          
  26          //CODE BYTE ZoomAttr[]={  0,  0,  0x40, 0x80, 0xc0  };
  27          
  28          //IDATA struct BarInfo BarInfo;
  29          IDATA struct OSDStrInfo OSDStrInfo;
  30          extern  bit   I2CAutoIncFlagOn ;
  31          extern    DATA  WORD  stopWatch;
  32          
  33          data BYTE code *ptrFont;
  34          
  35          //********************************************************************
  36          //
  37          //  Font
  38          //
  39          //********************************************************************
  40          
  41          void WaitEndofDisplayArea(void)
  42          {
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 36  

  43   1        BYTE ret,i;
  44   1        
  45   1        ret =  ReadTW88(OSDWINSTATUS) & 0x40;
  46   1      
  47   1        for(i=0;i<10;i++)
  48   1        {
  49   2          if( ret^ (ReadTW88(OSDWINSTATUS)&0x40)) break; 
  50   2        }
  51   1      }
  52          
  53          //=============================================================================
  54          //      Download OSD Color Look up 
  55          //=============================================================================
  56          void Change_OSDColorLookup(void)
  57          {
  58   1        BYTE i,j;
  59   1        for(j=0; j<2; j++) {   
  60   2          for(i=0; i<8; i++) {
  61   3            WriteTW88(0x9c, i+j*8);
  62   3            WriteTW88(0x9d, OSD_Color_LookUp_Data_Table[j][i]);
  63   3          }
  64   2        }
  65   1      }
  66          
  67          //=============================================================================
  68          //      Download RAM Font Data
  69          //=============================================================================
  70          //#include "grid_LPL.c"
  71          //#include "grid_GenTex.c"
  72          //#include "gridTW.c"
  73          //#include "grid\LINE_45B-4.c"
  74          /*
  75          struct MultiGridInfo
  76          {
  77            unsigned char NFonts;
  78            unsigned char NChars;
  79            unsigned char *LUT;
  80            unsigned char NofWindows;
  81            unsigned int  *WPos0;
  82            unsigned char *WColors0;
  83            unsigned int  *WPos1;
  84            unsigned char *WColors1;
  85            unsigned int  *WPos2;
  86            unsigned char *WColors2;
  87            unsigned int  *WPos3;
  88            unsigned char *WColors3;
  89            unsigned char *CharPos;
  90            unsigned char *FontData;
  91            unsigned char *DisplayData;
  92          };
  93          */
  94          //extern code struct MultiGridInfo  cone_Info, Japanese_Info;
  95          
  96          
  97          
  98          void DownloadFont(BYTE cod, CODE_P BYTE *fontdata)
  99          {
 100   1        WriteTW88(TW88_ENABLERAM, ReadTW88(TW88_ENABLERAM) | 0x01);   // Font RAM access mode
 101   1        WriteTW88(TW88_FONTRAMADDR, cod);
 102   1      
 103   1      //  WriteTW88(0xff, ReadTW88(0xff) | 0x10); // Disable I2C index auto increment during multi-write
 104   1        WriteTW88(0xe0, ReadTW88(0xe0) | 0x10); // Disable I2C index auto increment during multi-write
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 37  

 105   1        WriteI2Cn( TW88I2CAddress, TW88_FONTRAMDATA, fontdata, 27 );
 106   1      
 107   1        WriteTW88(TW88_ENABLERAM, ReadTW88(TW88_ENABLERAM) & 0xfe);   // OSD RAM access mode
 108   1      }
 109          
 110          void DownloadUDFont(void)
 111          {
 112   1        BYTE i;
 113   1      
 114   1        WriteTW88(TW88_MULTISTART, COLORFONT_START); // Set Color Font Start Address. 
 115   1      
 116   1        for(i=0; i< NO_UDFONT && i<= MAX_FONT_RAM_CHARS ; i++) {
 117   2          DownloadFont(i, RAMFONTDATA[i]);
 118   2        }
 119   1      }
 120          /*
 121          void DownloadGridFont(void)
 122          {
 123            BYTE i;
 124          
 125            WriteTW88(TW88_MULTISTART, 0xff); // Set Color Font Start Address. 
 126          
 127            //for(i=0; i< 62 ; i++) { //LPL case 62 chars
 128            for(i=0; i< NofFonts ; i++) {   // Techwell case 48 chars
 129              DownloadFont(i, gridTW[i]);
 130            }
 131          }
 132          */
 133          #if 0
              void DownloadGridFont(void)
              {
              register  BYTE i, m;
              
                WriteTW88(TW88_MULTISTART, 0xff); // Set Color Font Start Address. 
              
                m = LINE_45B_Info.NFonts;
                for(i=0; i< m ; i++) {    // Techwell case 48 chars
                  DownloadFont(i, &LINE_45B_Info.FontData[i*27]);
                }
              }
              
              void DownloadConeFont(void)
              {
              register  BYTE i, m;
              
                WriteTW88(TW88_MULTISTART, 0xff); // Set Color Font Start Address. 
                m = cone_Info.NFonts;
                for(i=0; i< m ; i++) {    // Techwell case 48 chars
                  DownloadFont(i, &cone_Info.FontData[i*27]);
                }
              }
              
              void DownloadJapaneseFont(void)
              {
              register  BYTE i, m;
              
                WriteTW88(TW88_MULTISTART, 0xff); // Set Color Font Start Address. 
                m = Japanese_Info.NFonts;
                for(i=0; i< m ; i++) {    // Techwell case 48 chars
                  DownloadFont(i+190, &Japanese_Info.FontData[i*27]);
                }
              }
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 38  

              #endif
 168          
 169          //*****************************************************************************
 170          //  OSD Window internal subfunction for TW88xx
 171          //*****************************************************************************
 172          //*****************************************************************************
 173          //  Functions for TW88xx internal OSD
 174          //*****************************************************************************
 175          #ifdef SUPPORT_OSDPOSITIONMOVE
 176          
 177          void SetOSDWindowX_TW88(BYTE winno, BYTE x)
 178          {
 179   1        WORD tmp;
 180   1        BYTE dat;
 181   1      
 182   1        if( winno<1 || winno>8 ) return;
 183   1        SetOSDWindowNum(winno);
 184   1      
 185   1        tmp = x << 3;
 186   1      
 187   1        dat = ReadTW88(TW88_WINSTART_HI) & 0xf0;
 188   1        dat = dat | (tmp>>8);
 189   1      
 190   1        WriteTW88(TW88_WINSTART_HI, dat);
 191   1        WriteTW88(TW88_WINXSTART, tmp);
 192   1      }
 193          #endif
 194          void SetOSDWindowY_TW88(BYTE winno, BYTE y)
 195          {
 196   1        WORD tmp;
 197   1        BYTE dat;
 198   1      
 199   1        if( winno<1 || winno>8 ) return;
 200   1        SetOSDWindowNum(winno);
 201   1      
 202   1        tmp = y << 2;
 203   1      
 204   1        dat = ReadTW88(TW88_WINSTART_HI) & 0x0f;
 205   1        dat = dat | ((tmp>>8)<<4);
 206   1      
 207   1        WriteTW88(TW88_WINSTART_HI, dat);
 208   1        WriteTW88(TW88_WINYSTART, tmp);
 209   1      }
 210          
 211          //=============================================================================
 212          //      ShowOSDWindow_TW88
 213          //=============================================================================
 214          void ShowOSDWindowAll(BYTE on)
 215          {
 216   1        BYTE rd;
 217   1      
 218   1        WaitEndofDisplayArea(); 
 219   1        rd = ReadTW88(TW88_OSDLOCKUPSEL);
 220   1      
 221   1        if( on )
 222   1          WriteTW88(TW88_OSDLOCKUPSEL, rd&0xef);  // 
 223   1        else
 224   1          WriteTW88(TW88_OSDLOCKUPSEL, rd|0x10);  // OSD All Off (TW8806B)
 225   1      
 226   1      }
 227          void ShowOSDWindow_TW88(BYTE winno, BYTE onoff)
 228          {
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 39  

 229   1        BYTE rd;
 230   1      
 231   1        if( winno<1 || winno>8 ) return;
 232   1        SetOSDWindowNum(winno);
 233   1      
 234   1        rd = ReadTW88(TW88_WINATTR);
 235   1        if( onoff ) rd |= 0x01;
 236   1        else    rd &= 0xfe;
 237   1      
 238   1        WaitEndofDisplayArea(); 
 239   1        WriteTW88(TW88_WINATTR, rd);
 240   1      }
 241          
 242          #ifdef SUPPORT_OSDPOSITIONMOVE
 243          WORD GetOSDWindowX(BYTE winno)
 244          {
 245   1        WORD x;
 246   1      
 247   1        if( winno<1 || winno>8 ) return 0;
 248   1        SetOSDWindowNum(winno);
 249   1      
 250   1        x = (ReadTW88(TW88_WINSTART_HI) & 0x0f) << 8;
 251   1        x = x  | ReadTW88(TW88_WINXSTART);
 252   1      
 253   1        return (BYTE)(x >> 3);
 254   1      }
 255          #endif
 256          
 257          WORD GetOSDWindowY(BYTE winno)
 258          {
 259   1        WORD y;
 260   1      
 261   1        if( winno<1 || winno>8 ) return 0;
 262   1        SetOSDWindowNum(winno);
 263   1      
 264   1        y = (ReadTW88(TW88_WINSTART_HI) & 0xf0) << 4;
 265   1        y = y  | ReadTW88(TW88_WINYSTART);
 266   1      
 267   1        return (BYTE)(y >> 2);
 268   1      }
 269          
 270          #include  "osdTW88.c"
   1      =1  //********************************************************************
   2      =1  //
   3      =1  //  Functions for OSD Menu.: MYSON
   4      =1  //
   5      =1  //********************************************************************
   6      =1  /*void ChangeFont(BYTE type)
   7      =1  {
   8      =1    BYTE dt;
   9      =1  
  10      =1    dt = ReadTW88(TW88_ENABLERAM);
  11      =1    if( type==FONT_ROM )  dt &= 0x7f;
  12      =1    else          dt |= 0x80;
  13      =1    WriteTW88(TW88_ENABLERAM, dt);
  14      =1  }
  15      =1  
  16      =1  void WriteCharToOSDRAMWithAutoInc(BYTE addr, BYTE ch, BYTE attr)
  17      =1  {
  18      =1    addr = addr;
  19      =1    WriteTW88(TW88_OSDRAMDATALO, attr); // @@ Alert @@ For TW8801 : do not change the order
  20      =1    WriteTW88(TW88_OSDRAMDATAHI, ch);
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 40  

  21      =1  }
  22      =1  
  23      =1  //-----------------------------------------------------------------------------
  24      =1  //  CopyCharToOSDWindow(BYTE winno, BYTE xoff, BYTE yoff, BYTE attr, BYTE ch)
  25      =1  //  - For FONT ROM Char.
  26      =1  //-----------------------------------------------------------------------------
  27      =1  void CopyCharToOSDWindow(BYTE winno, BYTE xoff, BYTE yoff, BYTE attr, BYTE ch)
  28      =1  {
  29      =1    BYTE w;
  30      =1    WORD addr;
  31      =1  
  32      =1    SetOSDWindowNum(winno);
  33      =1  
  34      =1  //  addr = ReadTW88(TW88_WINSADDR);
  35      =1    addr = ReadTW88(TW88_WINSADDRLO);
  36      =1    addr = addr + ((ReadTW88(TW88_WINSADDRHI) & 0x01)<<8);
  37      =1    w = ReadTW88(TW88_WINWIDTH);
  38      =1  
  39      =1    addr = addr + w*yoff + xoff;
  40      =1  
  41      =1    EnableOSDRAMAndChangeFont( FONT_ROM );
  42      =1    WriteCharToOSDRAM(  addr, ch, attr );
  43      =1  }
  44      =1  
  45      =1  #if defined( SUPPORT_PC ) || defined( SUPPORT_DTV )
  46      =1  BYTE CreateOSDWindowBorder(BYTE winno, BYTE w, BYTE h)
  47      =1  {
  48      =1    if( winno<1 || winno>8 ) return FALSE;
  49      =1    if ( w>0x7f || h>0x7f ) return FALSE;
  50      =1  
  51      =1    SetOSDWindowNum(winno);
  52      =1    WriteTW88(TW88_WINBRDWIDTH, w);
  53      =1    WriteTW88(TW88_WINBRDHEIGHT, h);
  54      =1    return TRUE;
  55      =1  }
  56      =1  
  57      =1  BYTE CreateOSDWindowOutline(BYTE winno, BYTE w, BYTE color)
  58      =1  {
  59      =1    BYTE rd;
  60      =1  
  61      =1    if( winno<1 || winno>8 ) return FALSE;
  62      =1    if ( w > 0x0f ) return FALSE;
  63      =1  
  64      =1    SetOSDWindowNum(winno);
  65      =1  
  66      =1    if( w==0 ) rd = 0;
  67      =1    else       rd = 0x80 | color | w ;
  68      =1  
  69      =1    WriteTW88(TW88_WINBRDATTR , rd);
  70      =1    return TRUE;
  71      =1  
  72      =1  }
  73      =1  #endif // SUPPORT_PC || SUPPORT_DTV
  74      =1  */
 271          //*****************************************************************************
 272          //
 273          //  Internal Font test
 274          //
 275          //*****************************************************************************
 276          //-----------------------------------------------------------------------------
 277          //  CopyUDCharToOSDWindow(BYTE winno, BYTE xoff, BYTE yoff, BYTE attr, BYTE ch)
 278          //  - For FONT RAM Char.
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 41  

 279          //-----------------------------------------------------------------------------
 280          code BYTE FontTestWindow[] = { 0xa1, 10, 0xa2, 10, 0xa0, 0, 0xa3, 16, 0xa4, 16, 0xa5, 0x91, 
 281                            0xa6, 1, 0xa7, 1, 0xa8, 0x22, 0xa9, 0x10, 0xaa, 00, 0xab, 0x62 };
 282          
 283          #ifdef Hs_debug 
 284          void DisplayROMFont( BYTE scode )
 285          {
 286   1      BYTE  i;
 287   1      
 288   1        WriteTW88( 0x94, 0x02 );    // clear OSD RAM clear and ROM font select
 289   1        WriteTW88( 0x9e, 0 );     // window #0
 290   1        for ( i=0; i<(sizeof(FontTestWindow)/2); i++ )
 291   1          WriteTW88(FontTestWindow[i*2], FontTestWindow[i*2+1]);
 292   1        if ( scode == 0 ) {
 293   2          WriteTW88( 0x94, 0x00 );    //0000 1100 ROM Font select with same attribute
 294   2          for ( i=0; i<0xfe; i++ ) {
 295   3            WriteTW88( 0x96, i );
 296   3            WriteTW88( 0x97, i );
 297   3            WriteTW88( 0x98, 0x97 );
 298   3          }
 299   2        }
 300   1        else {
 301   2          WriteTW88( 0x94, 0x0C );    //0000 1100 ROM Font select with same attribute
 302   2          Puts("\r\nIf you'd like to exit, press any Key....");
 303   2          while ( !RS_ready() ){
 304   3            WriteTW88( 0x94, 0x0C );    //0000 1100 ROM Font select with same attribute
 305   3          WriteTW88( 0x96, 0 );     // set start position of RAM
 306   3          WriteTW88( 0x98, 0x47 );    // different color with upper
 307   3          i = 0;
 308   3          do {
 309   4            WriteTW88( 0x97, i++ );
 310   4            WriteTW88( 0x97, i++ );
 311   4            WriteTW88( 0x97, i++ );
 312   4            WriteTW88( 0x97, i++ );
 313   4            WriteTW88( 0x97, i++ );
 314   4            WriteTW88( 0x97, i++ );
 315   4            WriteTW88( 0x97, i++ );
 316   4            WriteTW88( 0x97, i++ );
 317   4          } while ( i != 0 );
 318   3          }
 319   2        }
 320   1        WriteTW88( 0x9f, 0x17 );      // enable Window #2
 321   1        WriteTW88( 0x9c, 0x0f);     // turn ON
 322   1      }
 323          
 324          
 325          void DisplayRAMFont(BYTE scode)
 326          {
 327   1      BYTE  i, j;
 328   1      WORD  takenTime;
 329   1      
 330   1        WriteTW88( 0x94, 0x02 );    // clear OSD RAM clear
 331   1        WriteTW88( 0x9e, 1 );     // window #1
 332   1        for ( i=0; i<(sizeof(FontTestWindow)/2); i++ )
 333   1          WriteTW88(FontTestWindow[i*2], FontTestWindow[i*2+1]);
 334   1        if ( scode == 0 ) {
 335   2          WriteTW88( 0x94, 0x80 );    //0000 1101 RAM Font select with same attribute
 336   2          for ( i=0; i<0xfe; i++ ) {
 337   3            WriteTW88( 0x96, i );
 338   3            WriteTW88( 0x97, i );
 339   3            WriteTW88( 0x98, 0x97 );
 340   3          }
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 42  

 341   2        }
 342   1        else if ( scode == 1 ) {
 343   2          Puts("\r\nIf you'd like to exit, press any Key....");
 344   2          j = 0;
 345   2          while ( !RS_ready() ){
 346   3          WriteTW88( 0x94, 0x8C );    //0000 1101 RAM Font select with same attribute
 347   3          WriteTW88( 0x96, 0 );     // set start position of RAM
 348   3          WriteTW88( 0x98, 0x47 );    // different color with upper
 349   3          i = 0;
 350   3          do {
 351   4            WriteTW88( 0x97, i++ );
 352   4            WriteTW88( 0x97, i++ );
 353   4            WriteTW88( 0x97, i++ );
 354   4            WriteTW88( 0x97, i++ );
 355   4            WriteTW88( 0x97, i++ );
 356   4            WriteTW88( 0x97, i++ );
 357   4            WriteTW88( 0x97, i++ );
 358   4            WriteTW88( 0x97, i++ );
 359   4          } while ( i != 0 );
 360   3          }
 361   2        }
 362   1        else {
 363   2          stopWatch = 0;
 364   2          DownloadUDFont();
 365   2          takenTime = stopWatch;
 366   2          Printf("\r\nDownload User Font takes : %d [x10ms]", takenTime);
 367   2        }
 368   1        WriteTW88( 0x9f, 0x17 );      // enable Window #2
 369   1        WriteTW88( 0x9c, 0x0f);     // turn ON
 370   1      }
 371          #endif
 372          
 373          #ifdef CHIP_MANUAL_TEST
              void TestRAMFont(void)
              {
              int   i, j;
              
                WriteTW88(TW88_MULTISTART, 0xff); // Set Color Font Start Address. 
                WriteTW88( 0x94, 0x02 );    // clear OSD RAM clear
                WriteTW88( 0x9e, 1 );     // window #1
                for ( i=0; i<(sizeof(FontTestWindow)/2); i++ )
                  WriteTW88(FontTestWindow[i*2], FontTestWindow[i*2+1]);
              
                WriteTW88( 0x94, 0x80 );    //0000 1101 RAM Font select with same attribute
                for ( i=0; i<0xfe; i++ ) {
                  WriteTW88( 0x96, i );
                  WriteTW88( 0x97, i );
                  WriteTW88( 0x98, 0x97 );
                }
                WriteTW88(TW88_ENABLERAM, ReadTW88(TW88_ENABLERAM) | 0x01);   // Font RAM access mode ON
                for(i=0; i< 256 ; i++) {    // Techwell case 48 chars
                  WriteTW88(TW88_FONTRAMADDR, i);
                  for ( j = 0; j<27; j++ ) {
                    WriteTW88(TW88_FONTRAMDATA, 0x55);
                  }
                }
                DelaynCheck();
                for(i=0; i< 256 ; i++) {    // Techwell case 48 chars
                  WriteTW88(TW88_FONTRAMADDR, i);
                  for ( j = 0; j<27; j++ ) {
                    WriteTW88(TW88_FONTRAMDATA, 0xAA);
                  }
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 43  

                }
                WriteTW88(TW88_ENABLERAM, (ReadTW88(TW88_ENABLERAM) & 0xfe));   // OSD RAM access mode OFF
              //  WriteTW88( 0x9f, 0x17 );      // enable Window #2
              //  WriteTW88( 0x9c, 0x0f);     // turn ON
              }
              #endif
 409          
 410          // below is for LPL
 411          /*
 412          code BYTE GridWindow[] = { 0xa5, 0, 0xa6, 0, 0xa7, 0, 0xa8, 0, 0xa9, 0x0, 0xab, 0x62 };
 413          code BYTE Grid0[] = { 0x0d, 0x0e, 0x0f, 
 414                      0x10, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 
 415                      0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d  };  // bottom 22
 416          code BYTE Grid1[] = { 0x05, 0x06, 0x07, 0x0c, 0x0d, 0x0e,
 417                      0x13, 0x14, 0x1a, 0x1b,
 418                      0x21, 0x22, 0x29, 
 419                      0x30, 0x31, 0x38, 0x39, 0x3a,
 420                      0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47 }; // left 26
 421          code BYTE Grid2[] = { 0x00, 0x01, 0x0b, 0x0c, 0x0d,
 422                      0x16, 0x17, 0x18,
 423                      0x21, 0x22, 0x23, 0x2b, 0x2c  };  // right
 424          void DisplayGrid( void )
 425          {
 426          BYTE  i, j;
 427          
 428            DownloadGridFont();
 429            WriteTW88( 0x94, 0x02 );    // clear OSD RAM clear
 430          
 431            WriteTW88( 0x94, 0x80 );    //0000 1101 RAM Font select with same attribute
 432            for ( i=0; i < (72+51+45); i++ ) {    // clear with font '0'
 433              WriteTW88( 0x96, i );
 434              WriteTW88( 0x97, 0 );
 435              WriteTW88( 0x98, 0x07 );
 436            }
 437            i = 1;
 438            for ( j=0; j< sizeof(Grid0); j++ ) {    // display data for bottom
 439              WriteTW88( 0x96, Grid0[j] );  // set position
 440              WriteTW88( 0x97, i++ );
 441              WriteTW88( 0x98, 0x07 );
 442            }
 443            for ( j=0; j< sizeof(Grid1); j++ ) {    // display data for left
 444              WriteTW88( 0x96, Grid1[j]+51 ); // set position
 445              WriteTW88( 0x97, i++ );
 446              WriteTW88( 0x98, 0x07 );
 447            }
 448            for ( j=0; j< sizeof(Grid2); j++ ) {    // display data for right
 449              WriteTW88( 0x96, Grid2[j]+51+72 );  // set position
 450              WriteTW88( 0x97, i++ );
 451              WriteTW88( 0x98, 0x07 );
 452            }
 453          
 454            WriteTW88( 0x9e, 0 );     // window #0 for bottom
 455            for ( i=0; i<(sizeof(GridWindow)/2); i++ )
 456              WriteTW88(GridWindow[i*2], GridWindow[i*2+1]);
 457            WriteTW88( 0xa0, 0 );
 458            WriteTW88( 0xa1, 115);
 459            WriteTW88( 0xa2, 163);
 460            WriteTW88( 0xa3, 17);
 461            WriteTW88( 0xa4, 3);
 462            WriteTW88( 0xaa, 0);
 463            WriteTW88(0x9e, 0x70 );
 464            WriteTW88(0xac, 8 );
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 44  

 465            WriteTW88(0x9e, 0x00 );
 466            WriteTW88(0xac, 0 );
 467          
 468            WriteTW88( 0x9f, 1 );     // enable Window #0
 469          
 470            WriteTW88( 0x9e, 1 );   
 471            for ( i=0; i<(sizeof(GridWindow)/2); i++ )
 472              WriteTW88(GridWindow[i*2], GridWindow[i*2+1]);
 473            WriteTW88( 0xa0, 0 );
 474            WriteTW88( 0xa1, 19);
 475            WriteTW88( 0xa2, 56);
 476            WriteTW88( 0xa3, 8);
 477            WriteTW88( 0xa4, 9);
 478            WriteTW88( 0xaa, 51 );
 479            WriteTW88(0x9e, 0x71 );
 480            WriteTW88(0xac, 8 );
 481            WriteTW88(0x9e, 0x01 );
 482            WriteTW88(0xac, 0 );
 483            WriteTW88( 0x9f, 1 );     // enable Window #1
 484          
 485            WriteTW88( 0x9e, 2 );   
 486            for ( i=0; i<(sizeof(GridWindow)/2); i++ )
 487              WriteTW88(GridWindow[i*2], GridWindow[i*2+1]);
 488            WriteTW88( 0xa0, 0 );
 489            WriteTW88( 0xa1, 204);
 490            WriteTW88( 0xa2, 64);
 491            WriteTW88( 0xa3, 9);
 492            WriteTW88( 0xa4, 5);
 493            WriteTW88( 0xaa, 51+72 );
 494            WriteTW88(0x9e, 0x72 );
 495            WriteTW88(0xac, 8 );
 496            WriteTW88(0x9e, 0x02 );
 497            WriteTW88(0xac, 0 );
 498          
 499            WriteTW88( 0x9f, 1 );     // enable Window #2
 500          
 501            WriteTW88( 0x9e, 3 );   
 502            for ( i=0; i<(sizeof(GridWindow)/2); i++ )
 503              WriteTW88(GridWindow[i*2], GridWindow[i*2+1]);
 504            WriteTW88( 0xa0, 0 );
 505            WriteTW88( 0xa1, 1);
 506            WriteTW88( 0xa2, 1);
 507            WriteTW88( 0xa3, 0x1a);
 508            WriteTW88( 0xa4, 0x0d);
 509            WriteTW88( 0xa5, 0xa1);
 510            WriteTW88( 0xa6, 3);
 511            WriteTW88( 0xa7, 2);
 512          
 513            WriteTW88( 0xaa, 51+72 );
 514            WriteTW88(0x9e, 0x03 );
 515            WriteTW88(0xac, 8 );
 516            WriteTW88(0x9e, 0x33 );
 517            WriteTW88(0xac, 8 );
 518            WriteTW88(0x9e, 0x73 );
 519            WriteTW88(0xac, 8 );
 520          
 521            WriteTW88( 0x9f, 1 );     // enable Window #3
 522            WriteTW88( 0x9c, 0x0f);     // turn ON
 523          }
 524          */
 525          
 526          // below is for GenTex
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 45  

 527          /*
 528          code BYTE GridWindow[] = { 0xa5, 0, 0xa6, 0, 0xa7, 0, 0xa8, 0, 0xa9, 0x0, 0xab, 0x62 };
 529          code BYTE Grid0[] = { 0x06, 0x07, 0x0d, 0x0e, 0x0f,
 530                      0x14, 0x15, 0x16, 0x1b, 0x1c,
 531                      0x22, 0x23, 0x29, 0x2a, 0x2b, 
 532                      0x30, 0x31, 0x32, 0x33, 0x38, 0x39, 0x3a, 0x3b }; // left 23
 533          code BYTE Grid1[] = { 0x00, 0x01, 0x08, 0x09, 0x0a,
 534                      0x11, 0x12, 0x13, 0x1b, 0x1c,
 535                      0x24, 0x25, 0x2c, 0x2d, 0x2e,
 536                        0x34, 0x35, 0x36, 0x37, 0x3c, 0x3d, 0x3e, 0x3f }; // right 23
 537          code unsigned char GridLUT[8] = { 0x00,0x1c,0x1c,0xfc,0xE0,0xE3,0xFC,0xFF };
 538          void DisplayGrid( void )
 539          {
 540          BYTE  i, j;
 541          
 542            DownloadGridFont();
 543            WriteTW88( 0x94, 0x02 );    // clear OSD RAM clear
 544            for ( i=0; i<8; i++ ) {
 545              WriteTW88( 0x9c, i ); //select LUT
 546              WriteTW88( 0x9d, GridLUT[i] );
 547            }
 548          
 549            WriteTW88( 0x94, 0x80 );    //0000 1101 RAM Font select with same attribute
 550            for ( i=0; i < (72+51+45); i++ ) {    // clear with font '0'
 551              WriteTW88( 0x96, i );
 552              WriteTW88( 0x97, 0 );
 553              WriteTW88( 0x98, 0x70 );
 554            }
 555            i = 1;
 556            for ( j=0; j< sizeof(Grid0); j++ ) {    // display data for bottom
 557              WriteTW88( 0x96, Grid0[j] );  // set position
 558              WriteTW88( 0x97, i++ );
 559              WriteTW88( 0x98, (0x71 + Grid0[j]/16) );
 560            }
 561            for ( j=0; j< sizeof(Grid1); j++ ) {    // display data for left
 562              WriteTW88( 0x96, Grid1[j]+64 ); // set position
 563              WriteTW88( 0x97, i++ );
 564              WriteTW88( 0x98, (0x71 + Grid1[j]/16) );
 565            }
 566          
 567            WriteTW88( 0x9e, 0 );     // window #0 for Left
 568            for ( i=0; i<(sizeof(GridWindow)/2); i++ )
 569              WriteTW88(GridWindow[i*2], GridWindow[i*2+1]);
 570            WriteTW88( 0xa0, 0 );
 571            WriteTW88( 0xa1, 19);
 572            WriteTW88( 0xa2, 56);
 573            WriteTW88( 0xa3, 8);
 574            WriteTW88( 0xa4, 8);
 575            WriteTW88(0x9e, 0x70 );
 576            WriteTW88(0xac, 8 );
 577            WriteTW88(0x9e, 0x10 );
 578            WriteTW88(0xac, 4 );
 579            WriteTW88(0x9e, 0x20 );
 580            WriteTW88(0xac, 3 );
 581            WriteTW88(0x9e, 0x30 );
 582            WriteTW88(0xac, 2 );
 583            WriteTW88(0x9e, 0x40 );
 584            WriteTW88(0xac, 1 );
 585          
 586            WriteTW88( 0x9f, 1 );     // enable Window #0
 587          
 588            WriteTW88( 0x9e, 1 );   
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 46  

 589            for ( i=0; i<(sizeof(GridWindow)/2); i++ )
 590              WriteTW88(GridWindow[i*2], GridWindow[i*2+1]);
 591            WriteTW88( 0xa0, 0 );
 592            WriteTW88( 0xa1, 204);
 593            WriteTW88( 0xa2, 56);
 594            WriteTW88( 0xa3, 8);
 595            WriteTW88( 0xa4, 8);
 596            WriteTW88( 0xaa, 64 );
 597            WriteTW88(0x9e, 0x71 );
 598            WriteTW88(0xac, 8 );
 599            WriteTW88(0x9e, 0x11 );
 600            WriteTW88(0xac, 4 );
 601            WriteTW88(0x9e, 0x21 );
 602            WriteTW88(0xac, 3 );
 603            WriteTW88(0x9e, 0x31 );
 604            WriteTW88(0xac, 2 );
 605            WriteTW88(0x9e, 0x41 );
 606            WriteTW88(0xac, 1 );
 607            WriteTW88( 0x9f, 1 );     // enable Window #1
 608          
 609          //  WriteTW88( 0x9e, 3 );   
 610          //  for ( i=0; i<(sizeof(GridWindow)/2); i++ )
 611          //    WriteTW88(GridWindow[i*2], GridWindow[i*2+1]);
 612          //  WriteTW88( 0xa0, 0 );
 613          //  WriteTW88( 0xa1, 1);
 614          //  WriteTW88( 0xa2, 1);
 615          //  WriteTW88( 0xa3, 0x1a);
 616          //  WriteTW88( 0xa4, 0x0d);
 617          //  WriteTW88( 0xa5, 0xa1);
 618          //  WriteTW88( 0xa6, 3);
 619          //  WriteTW88( 0xa7, 2);
 620          
 621          //  WriteTW88( 0xaa, 51+72 );
 622          //  WriteTW88(0x9e, 0x03 );
 623          //  WriteTW88(0xac, 8 );
 624          //  WriteTW88(0x9e, 0x33 );
 625          //  WriteTW88(0xac, 8 );
 626          //  WriteTW88(0x9e, 0x73 );
 627          //  WriteTW88(0xac, 8 );
 628          
 629          //  WriteTW88( 0x9f, 1 );     // enable Window #3
 630          
 631            WriteTW88( 0x9c, 0x0f);     // turn ON
 632          }
 633          */
 634          // below is for Techwell Tool
 635          /*
 636          code BYTE GridWindow[] = { 0xa5, 0, 0xa6, 0, 0xa7, 0, 0xa8, 0, 0xa9, 0x0, 0xab, 0x62 };
 637          
 638          code unsigned char GridLUT[8] = { 0x00,0x1c,0x1c,0xfc,0xE0,0xE3,0xFC,0xFF };
 639          void DisplayGrid( void )
 640          {
 641          BYTE  i, j, k;
 642          
 643            DownloadGridFont();
 644            WriteTW88( 0x94, 0x02 );    // clear OSD RAM clear
 645            for ( i=0; i<8; i++ ) {
 646              WriteTW88( 0x9c, i ); //select LUT
 647              WriteTW88( 0x9d, GridLUT[i] );
 648            }
 649          
 650            WriteTW88( 0x94, 0x80 );    //0000 1101 RAM Font select with same attribute
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 47  

 651            for ( i=0; i < NofChars; i++ ) {    // clear with font '0'
 652              WriteTW88( 0x96, i );
 653              WriteTW88( 0x97, 0 );
 654              WriteTW88( 0x98, 0x70 );
 655            }
 656            i = 1;
 657            k = gridTWPos0[2]*gridTWPos0[3];
 658            for ( j=0; j< sizeof(gridTWChar); j++ ) {   // display data for all
 659              WriteTW88( 0x96, gridTWChar[j] ); // set position
 660              WriteTW88( 0x97, i++ );
 661              if ( gridTWChar[j] < k ) 
 662                WriteTW88( 0x98, (0x71 + gridTWChar[j]/(gridTWPos0[2]*2)) );      // can control how many lines for sam co
             -lor
 663              else
 664                WriteTW88( 0x98, (0x71 + (gridTWChar[j]-k)/(gridTWPos1[2]*2)) );    // can control how many lines for sam
             - color
 665            }
 666          
 667          
 668            
 669            WriteTW88( 0x9e, 0 );     // window #0 for Left
 670            for ( i=0; i<(sizeof(GridWindow)/2); i++ )
 671              WriteTW88(GridWindow[i*2], GridWindow[i*2+1]);
 672            WriteTW88( 0xa0, 0 );
 673            WriteTW88( 0xa1, gridTWPos0[0]);
 674            WriteTW88( 0xa2, gridTWPos0[1]);
 675            WriteTW88( 0xa3, gridTWPos0[2]);
 676            WriteTW88( 0xa4, gridTWPos0[3]);
 677            WriteTW88(0x9e, 0x70 );
 678            WriteTW88(0xac, 8 );
 679            WriteTW88(0x9e, 0x10 );
 680            WriteTW88(0xac, 4 );
 681            WriteTW88(0x9e, 0x20 );
 682            WriteTW88(0xac, 3 );
 683            WriteTW88(0x9e, 0x30 );
 684            WriteTW88(0xac, 2 );
 685            WriteTW88(0x9e, 0x40 );
 686            WriteTW88(0xac, 1 );
 687          
 688            WriteTW88( 0x9f, 1 );     // enable Window #0
 689          
 690            WriteTW88( 0x9e, 1 );   
 691            for ( i=0; i<(sizeof(GridWindow)/2); i++ )
 692              WriteTW88(GridWindow[i*2], GridWindow[i*2+1]);
 693            WriteTW88( 0xa0, 0 );
 694            WriteTW88( 0xa1, gridTWPos1[0]);
 695            WriteTW88( 0xa2, gridTWPos1[1]);
 696            WriteTW88( 0xa3, gridTWPos1[2]);
 697            WriteTW88( 0xa4, gridTWPos1[3]);
 698            WriteTW88( 0xaa, 64 );
 699            WriteTW88(0x9e, 0x71 );
 700            WriteTW88(0xac, 8 );
 701            WriteTW88(0x9e, 0x11 );
 702            WriteTW88(0xac, 4 );
 703            WriteTW88(0x9e, 0x21 );
 704            WriteTW88(0xac, 3 );
 705            WriteTW88(0x9e, 0x31 );
 706            WriteTW88(0xac, 2 );
 707            WriteTW88(0x9e, 0x41 );
 708            WriteTW88(0xac, 1 );
 709            WriteTW88( 0x9f, 1 );     // enable Window #1
 710          
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 48  

 711          //  WriteTW88( 0x9e, 3 );   
 712          //  for ( i=0; i<(sizeof(GridWindow)/2); i++ )
 713          //    WriteTW88(GridWindow[i*2], GridWindow[i*2+1]);
 714          //  WriteTW88( 0xa0, 0 );
 715          //  WriteTW88( 0xa1, 1);
 716          //  WriteTW88( 0xa2, 1);
 717          //  WriteTW88( 0xa3, 0x1a);
 718          //  WriteTW88( 0xa4, 0x0d);
 719          //  WriteTW88( 0xa5, 0xa1);
 720          //  WriteTW88( 0xa6, 3);
 721          //  WriteTW88( 0xa7, 2);
 722          
 723          //  WriteTW88( 0xaa, 51+72 );
 724          //  WriteTW88(0x9e, 0x03 );
 725          //  WriteTW88(0xac, 8 );
 726          //  WriteTW88(0x9e, 0x33 );
 727          //  WriteTW88(0xac, 8 );
 728          //  WriteTW88(0x9e, 0x73 );
 729          //  WriteTW88(0xac, 8 );
 730          
 731          //  WriteTW88( 0x9f, 1 );     // enable Window #3
 732          
 733            WriteTW88( 0x9c, 0x0f);     // turn ON
 734          }
 735          */
 736          #if 0
              void DisplayGrid( void )
              {
              BYTE  i, j, k;
              WORD  offset;
              BYTE  *ptrFont, *ptrAttr;
              WORD  cPos;
              
                DownloadGridFont();
                WriteTW88( 0x94, 0x02 );    // clear OSD RAM clear
                for ( i=0; i<8; i++ ) {
                  WriteTW88( 0x9c, i ); //select LUT
                  WriteTW88( 0x9d, LINE_45B_Info.LUT[i] );
                }
              
                WriteTW88( 0x94, 0x80 );
                //WriteTW88( 0x98, 0x74 );    // attribute B/C=7, F/C=1 with blink
                j = LINE_45B_Info.NChars;
                ptrFont = LINE_45B_Info.DisplayData;
                ptrAttr = LINE_45BAttr;
                if ( LINE_45B_Info.NChars > 0xff ) {
                  i = 0;
                  do {
                    WriteTW88( 0x96, i );
                    WriteTW88( 0x97, *ptrFont++ );  // set position
                    WriteTW88( 0x98, *ptrAttr++ );
                    i++;
                  } while ( i != 0);
                  WriteTW88( 0x95, ReadTW88(0x95)|1 );  //set start address
                }
                for ( i=0; i < j; i++ ) {   // clear with font '0'
                  WriteTW88( 0x96, i );
                  WriteTW88( 0x97,*ptrFont++ ); // set position
                  WriteTW88( 0x98, *ptrAttr++ );
                }
              /*  i = 1;
                ptrFont = LINE_45B_Info.CharPos;
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 49  

                m = LINE_45B_Info.NFonts-1;
                for ( j=0; j<m; j++ ) {   // display data for all
                  k = *ptrFont++;
                  WriteTW88( 0x96, k ); // set position
                  WriteTW88( 0x97, i++ );
                  WriteTW88( 0x98, 0x70|LINE_45B_Info.WColors0[k/LINE_45B_Info.WPos0[2]] );
                }
              */
                cPos = 0;
                WriteTW88( 0x9e, 0 );     // window #0
                WriteTW88( 0xa5, 0 ); WriteTW88( 0xa6, 0 ); WriteTW88( 0xa7, 0 ); 
                WriteTW88( 0xa8, 0 ); WriteTW88( 0xa9, 0 ); WriteTW88( 0xab, 62 );
                offset = LINE_45B_Info.WPos0[0]; offset >>= 8;
                k = offset;
                offset = LINE_45B_Info.WPos0[1];
                offset >>= 8;
                offset <<= 4;
                k += offset;
                WriteTW88( 0xa0, k );
                WriteTW88( 0xa1, LINE_45B_Info.WPos0[0] );
                WriteTW88( 0xa2, LINE_45B_Info.WPos0[1] );
                WriteTW88( 0xa3, LINE_45B_Info.WPos0[2] );
                WriteTW88( 0xa4, LINE_45B_Info.WPos0[3] );
                cPos = LINE_45B_Info.WPos0[2];
                cPos *= LINE_45B_Info.WPos0[3];
                WriteTW88( 0xaa, 0 );
                WriteTW88( 0x9e, 0x00 );
                WriteTW88( 0xac, 8 );
                WriteTW88( 0x9e, 0x70 );
                WriteTW88( 0xac, 0 );
                WriteTW88( 0x9f, 1 );     // enable Window #0
              
                WriteTW88( 0x9e, 1 );     // window #1
                WriteTW88( 0xa5, 0 ); WriteTW88( 0xa6, 0 ); WriteTW88( 0xa7, 0 ); 
                WriteTW88( 0xa8, 0 ); WriteTW88( 0xa9, 0 ); WriteTW88( 0xab, 62 );
                offset = LINE_45B_Info.WPos1[0]; offset >>= 8;
                k = offset;
                offset = LINE_45B_Info.WPos1[1];
                offset >>= 8;
                offset <<= 4;
                k += offset;
                WriteTW88( 0xa0, k );
                WriteTW88( 0xa1, LINE_45B_Info.WPos1[0] );
                WriteTW88( 0xa2, LINE_45B_Info.WPos1[1] );
                WriteTW88( 0xa3, LINE_45B_Info.WPos1[2] );
                WriteTW88( 0xa4, LINE_45B_Info.WPos1[3] );
              
                if ( cPos > 0xff ) {
                  WriteTW88( 0xa9, ReadTW88(0xa9) | 1 );
                }
                WriteTW88( 0xaa, cPos );
                offset = LINE_45B_Info.WPos1[2];
                offset *= LINE_45B_Info.WPos1[3];
                cPos += offset;
                WriteTW88( 0x9e, 0x01 );
                WriteTW88( 0xac, 8 );
                WriteTW88( 0x9e, 0x11 );
                WriteTW88( 0xac, 0 );
                WriteTW88( 0x9f, 1 );     // enable Window #1
              
                WriteTW88( 0x9e, 2 );     // window #2
                WriteTW88( 0xa5, 0 ); WriteTW88( 0xa6, 0 ); WriteTW88( 0xa7, 0 ); 
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 50  

                WriteTW88( 0xa8, 0 ); WriteTW88( 0xa9, 0 ); WriteTW88( 0xab, 62 );
                offset = LINE_45B_Info.WPos2[0]; offset >>= 8;
                k = offset;
                offset = LINE_45B_Info.WPos2[1];
                offset >>= 8;
                offset <<= 4;
                k += offset;
                WriteTW88( 0xa0, k );
                WriteTW88( 0xa1, LINE_45B_Info.WPos2[0] );
                WriteTW88( 0xa2, LINE_45B_Info.WPos2[1] );
                WriteTW88( 0xa3, LINE_45B_Info.WPos2[2] );
                WriteTW88( 0xa4, LINE_45B_Info.WPos2[3] );
              
                if ( cPos > 0xff ) {
                  WriteTW88( 0xa9, ReadTW88(0xa9) | 1 );
                }
                WriteTW88( 0xaa, cPos );
                offset = LINE_45B_Info.WPos2[2];
                offset *= LINE_45B_Info.WPos2[3];
                cPos += offset;
                WriteTW88( 0x9e, 0x02 );
                WriteTW88( 0xac, 8 );
                WriteTW88( 0x9e, 0x12 );
                WriteTW88( 0xac, 0 );
                WriteTW88( 0x9f, 1 );     // enable Window #2
              
                WriteTW88( 0x9e, 3 );     // window #3
                WriteTW88( 0xa5, 0 ); WriteTW88( 0xa6, 0 ); WriteTW88( 0xa7, 0 ); 
                WriteTW88( 0xa8, 0 ); WriteTW88( 0xa9, 0 ); WriteTW88( 0xab, 62 );
                offset = LINE_45B_Info.WPos3[0]; offset >>= 8;
                k = offset;
                offset = LINE_45B_Info.WPos3[1];
                offset >>= 8;
                offset <<= 4;
                k += offset;
                WriteTW88( 0xa0, k );
                WriteTW88( 0xa1, LINE_45B_Info.WPos3[0] );
                WriteTW88( 0xa2, LINE_45B_Info.WPos3[1] );
                WriteTW88( 0xa3, LINE_45B_Info.WPos3[2] );
                WriteTW88( 0xa4, LINE_45B_Info.WPos3[3] );
              
                if ( cPos > 0xff ) {
                  WriteTW88( 0xa9, ReadTW88(0xa9) | 1 );
                }
                WriteTW88( 0xaa, cPos );
                WriteTW88( 0x9e, 0x03 );
                WriteTW88( 0xac, 8 );
                WriteTW88( 0x9e, 0x13 );
                WriteTW88( 0xac, 0 );
                WriteTW88( 0x9f, 1 );     // enable Window #3
              
                WriteTW88( 0x9c, 0x0f );      // turn ON
                WriteTW88( 0x95, ReadTW88(0x95)&0xfe ); //set start address
              
              }
              #endif
 891          
 892          
 893          //*****************************************************************************
 894          //
 895          //  Functions for only CC.
 896          //
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 51  

 897          //*****************************************************************************
 898          //ljy052903: Only In CC 
 899          
 900          //*****************************************************************************
 901          
 902               // Move to CC by Harry
 903          
 904          //===============================================================================
 905          //  Used OSD Menu 
 906          //===============================================================================
 907          //------------------------------------------------------------
 908          void WriteStringToAddr(WORD addr, BYTE *str, BYTE cnt)
 909          {
 910   1        //if( I2CAutoIncFlagOn==0 )
 911   1        WriteTW88(TW88_ENABLERAM, 0x04); // OSD RAM Auto Access Enable, ROMFONT Start Enable
 912   1      
 913   1        WriteTW88(TW88_OSDRAMADDRLO, addr);
 914   1        WriteI2Cn( TW88I2CAddress, TW88_OSDRAMDATAHI, str, cnt );
 915   1      
 916   1      //  if( I2CAutoIncFlagOn==0 )
 917   1        WriteTW88(TW88_ENABLERAM, 0x00); // OSD RAM Auto Access Disable
 918   1      }
 919          #ifdef PAL_TV
              void DrawAttrString(WORD addr, BYTE *Str, BYTE cnt)
              {
              //  if( I2CAutoIncFlagOn==0 )
                WriteTW88(TW88_ENABLERAM, 0x04); // OSD RAM Auto Access Enable
                WriteTW88(TW88_OSDRAMADDRLO, addr);
                WriteI2Cn( TW88I2CAddress, TW88_OSDRAMDATALO, Str, cnt ); // Attr
              
              //  if( I2CAutoIncFlagOn==0 )
                WriteTW88(TW88_ENABLERAM, 0x00); // OSD RAM Auto Access Disable
              }
              #endif
 931          
 932          void DrawAttrCnt(WORD addr, BYTE color, BYTE cnt)
 933          {
 934   1        WriteTW88(TW88_ENABLERAM, 0x04);    // OSD RAM Auto Access Enable
 935   1        WriteTW88(TW88_OSDRAMADDRLO, addr);
 936   1        WriteI2CnD( TW88I2CAddress, TW88_OSDRAMDATALO, color, cnt );
 937   1      
 938   1        WriteTW88(TW88_ENABLERAM, 0x00);    // OSD RAM Auto Access Disable
 939   1      }
 940          
 941          void ClearDataCnt(WORD addr, BYTE cnt)
 942          {
 943   1      //  if( I2CAutoIncFlagOn==0 )
 944   1        WriteTW88(TW88_ENABLERAM, 0x04);    // OSD RAM Auto Access Enable
 945   1        WriteTW88(TW88_OSDRAMADDRLO, addr);
 946   1        WriteI2CnD( TW88I2CAddress, TW88_OSDRAMDATAHI, ' ', cnt );
 947   1      
 948   1      //  if( I2CAutoIncFlagOn==0 )
 949   1        WriteTW88(TW88_ENABLERAM, 0x00);    // OSD RAM Auto Access Disable
 950   1      }
 951          
 952          //*****************************************************************************
 953          //
 954          //  Conversion Functions.
 955          //
 956          //*****************************************************************************
 957          BYTE utoa(WORD value, BYTE *str, BYTE radix)
 958          {
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 52  

 959   1        BYTE cnt, *str1;
 960   1        WORD i, div;
 961   1      
 962   1        #ifdef DEBUG_OSD
                dPrintf("\r\n++(utoa):0x%x__", value);
                #endif
 965   1      
 966   1        str1 = str;
 967   1        cnt=0;
 968   1        if( radix==10) {
 969   2          for(div = 10000; div>=10; div/=10) {
 970   3            i = value/div;
 971   3            if( i ) {
 972   4              *str++ = i+'0';
 973   4              cnt++;
 974   4            }
 975   3            else if( cnt )    // 100, 200, 20,,,,
 976   3              *str++ = '0';
 977   3      
 978   3            value%=div;
 979   3          }
 980   2          *str++ = value+'0';
 981   2          *str = 0;
 982   2        }
 983   1        else if( radix==16) {
 984   2          for(div = 0x1000; div>=0x10; div/=0x10) {
 985   3            i = value/div;
 986   3            if( i ) {
 987   4              if( i>=0xa ) 
 988   4                *str++ = i-0xa+'A';
 989   4              else
 990   4                *str++ = i+'0';
 991   4              value%=div;
 992   4            }
 993   3          }
 994   2          if( value>=0xa ) 
 995   2            *str++ = value-0xa+'A';
 996   2          else
 997   2            *str++ = value+'0';
 998   2          *str = 0;
 999   2        }
1000   1        return 1;
1001   1      }
1002          BYTE strlen( BYTE *str )
1003          {
1004   1        BYTE i=0;
1005   1      
1006   1        while( *str++ ) i++;
1007   1        return i;
1008   1      }
1009          //=============================================================================
1010          //      Init Menu Window Data initialize 
1011          //=============================================================================
1012          #include "OsdInitTable.c"
   1      =1  #include "config.h"
   1      =2  /*****************************************************************************/
   2      =2  /*                           System Configurations                           */
   3      =2  /*              rev 0.10 include auto test             */
   4      =2  // 0.11 change DTV, PC input initial download data correct for Charge Pump
   5      =2  // 0.12 correct phase measurement routine '>>3'
   6      =2  // 0.13 enable function for SPI control... only EXT MCU case
   7      =2  // 0.14 corrected PC measurement......
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 53  

   8      =2  // 0.0a test function only for CVBS, SVIDEO
   9      =2  // 0.15 corrected DTV scaler setting for panel resolutions
  10      =2  // 0.0b panel for AND 640x480 TICON panel
  11      =2  // 0.16 corrected COMPONENT scaler setting for panel resolutions  11/21/2007
  12      =2  // 0.0c automatic chip test
  13      =2  // 0.17 add monitor function, osd grid for writing grid
  14      =2  // 0.18 add component, dtv pc for analogpanel, 12/06/2007
  15      =2  // 0.19 correct pal input for CES, 12/20/2007
  16      =2  // 0.1a CCFL control, 12/28/2007
  17      =2  // 0.19 Multi Grid for Banking on Internal MCU  01/17/2008
  18      =2  // 0.20 CCFL contol for backlight brightness  01/21/2008
  19      =2  // 0.21 CCFL contol for backlight brightness  01/25/2008
  20      =2  // 0.22 phase setting 02/07/2008
  21      =2  // 0.221 display input correction 04/03/2008
  22      =2  // 0.23 PC, DTV mode, no signal display
  23      =2  // 0.24 PC Auto Color adjustment
  24      =2  // 0.25 revised PC Auto Clock adjustment - find divide number and phase
  25      =2  // 0.26 Digital RGB for TW8826
  26      =2  // 0.27 Correct LVDS control          08/22/2008
  27      =2  // 0.28 Add WSVGA resolution          10/23/2008
  28      =2  // 0.29 Add NEW GRID              11/14/2008
  29      =2  // 0.30 Fix DTV input             12/10/2008
  30      =2  // 0.31 Add 1080i23, 24, 25A, 25B       01/20/2009
  31      =2  // 0.32 TCON setting FIX all mode       01/22/2009
  32      =2  // 0.33 autodetect is auto on/off by dip sw1  02/02/2009
  33      =2  // 0.34 Fix autocolor function and clamp position 02/08/2009
  34      =2  /*****************************************************************************/
  35      =2  #ifndef __CONFIG_H__
           =2 #define __CONFIG_H__
           =2 
           =2 //#define INTERNAL_MCU -- defined by Project Compiler session
           =2 #define   HS        
           =2 //#define   E_Wintek  
           =2 //#define   AWT 
           =2 //#define Holtz
           =2 
           =2 //#define QUAD
           =2 
           =2 #ifdef QUAD
           =2   #define AWT_ML072Q  //Pinchi 20150827 disable for HTRV
           =2 //  #define HTRV  //Pinchi 20140902 disable for AWT ML072Q
           =2 #else
           =2   #define AWT_ML072S
           =2 #endif
           =2 
           =2 //--------------------------------------------------
           =2 //              Common Feature Define
           =2 //--------------------------------------------------
           =2 //#define FIRST_RUN_FROM_AC  //Pinchi 20150831 disable for Screen re-setting by Set4WideScreen()  //Pinchi
             - 20141029 add
           =2 #define SUPPORT_ML072Q_AUTO_DAY_NIGHT  //Pinchi 20150825 add for function define
           =2 #define SUPPORT_TRIGGER_EXIT_MENU  //Pinchi 20150827 add for exit OSD Menu by CAM trigger
           =2 #define SUPPORT_AC_ON_NORMAL_SCREEN  //Pinchi 20150901 add to set 4:3 screen when AC on
           =2 
           =2 #define FIX_DISPLAY_OFF_TRIGGER_ISSUE  //Pinchi 20150908 add to fix [Display] set OFF and trigger release 
             -then trigger again during display info the CAM will change from trigger CH to original CH
           =2 #define FIX_EXIT_STANDBY_NO_AUDIO  //Pinchi 20150908 add to fix no audio output when exit Standby mode
           =2 #ifdef AWT_ML072Q
           =2 #define FIX_2835_SCREEN_NOISE  //Pinchi 20160929 add to fix the screen noise of TW2835 by change DDR to ma
             -ke clock shift
           =2 #endif
           =2 
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 54  

           =2 #define SUPPORT_NEW_TRIGGER_FUNCTION  /////修改新的Trigger方式減少trigger polling 時間 add by ryan@2018012
             -4
           =2 
           =2 //#define AWT_ML072QS_MSG  //Pinchi 20140925 add
           =2 //#define REDUCE_DELAY_TIME  //Pinchi 20141029 add
           =2 //#define DISPLAY_TECHWELL_LOGO  //Pinchi 2050903 add to disable the Techwell logo
           =2 
           =2 //#define SUPPORT_SVIDEO                     //andy Awt 20090914
           =2 //#define SUPPORT_COMPONENT     // support component analog to decoder//andy Awt 20090914
           =2 //#define SUPPORT_DTV           // support DTV input through component( to ADC ).//andy Awt 20090914
           =2 //#define SUPPORT_PC        // support PC function
           =2 //#define SUPPORT_DVI       // support DVI input
           =2 //#define SUPPORT_SDCARD
           =2 
           =2 #define SUPPORT_2835_CLK_TUNE_BACK_DOOR  //Pinchi 20160913 add to fine tune TW2835 clock by hot key
           =2 //#define SUPPORT_DISPLAY_TEST_VERSION  //Pinchi 20150929 add to display test software version on OSD
           =2 
           =2 //--------------------------------------------------
           =2 //              Model Feature Define
           =2 //--------------------------------------------------
           =2 #if (defined AWT_ML072Q) || (defined AWT_ML072S)
           =2 #define AWT_ML072QS_FW_RULE  //Pinchi 20140902 add
           =2 //#define AWT_NEW_SLIM_MODEL  //Pinchi 20150203 add for AWT new slim model
           =2 #define AWT_NO_SIGNAL_MSG  //Pinchi 20150319 add for display "NO VIDEO SIGNAL" by AWT request of 20150302
           =2 #define AWT_TW2835_DRAW_T_ICON  //Pinchi 20150415 add to draw T icon by TW2835 when CAM C trigger
           =2 #define SUPPORT_AC_ON_REDUCE_TIME  //Pinchi 20150903 add to reduce Power time when AC on
           =2 
           =2 //#define SUPPORT_TRIGGER_RELEASE_DELAY  //Pinchi 20150908 add to support delay time when CAM trigger rele
             -ase
           =2 
           =2 typedef enum  //Pinchi 20150326 add
           =2 {
           =2      LAST_TRIG_NON =  0x00,
           =2      LAST_TRIG_LEFT =   0x01,
           =2      LAST_TRIG_RIGHT =  0x02,
           =2      LAST_TRIG_REVERSE =0x03,
           =2      LAST_TRIG_CAMC =   0x04,
           =2 
           =2 } AWT_LAST_TRIGGER;
           =2 
           =2 #endif
           =2 
           =2 
           =2 #ifdef HTRV  //Pinchi 20150825 add
           =2 #define HTRV_ML072Q_FW_RULE  //Pinchi 20150827 add
           =2 #define HTRV_REDUCE_SCREEN_CHANGE  //Pinchi 20150828 add to reduce screen double change
           =2 
           =2 #if 0  //Pinchi 20151209 add to remove 4:3 screen by HTRV request of 20151209
           =2 #define HTRV_SUPPORT_4_3_SCREEN
           =2 #else
           =2 #undef SUPPORT_AC_ON_NORMAL_SCREEN  //Pinchi 20151210 add
           =2 #endif
           =2 
           =2 #endif
           =2 
           =2 //#define SUPPORT_RS485
           =2 //-----------------------------------------------------------------------------
           =2 //    Firmware Version
           =2 //-----------------------------------------------------------------------------
           =2 #ifdef HTRV  //Pinchi 20150907 add
           =2 //#define FWVER     0x200 // Rev 2.00
           =2 //#define FWVER     0x210   // Rev 2.1  //Pinchi 20151209 update version for HTRV request to remove 4:3 scree
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 55  

             -n
           =2 //#define FWVER     0x220   // Rev 2.2  //Pinchi 20160929 change for V2.2
           =2 #define FWVER     0x230     //Rev 2.3    ryan@20170727 update version by Encoder switches零件 EOL更換
           =2 #else
           =2 #define FWVER     0x210   // Rev 0.14
           =2 #endif
           =2 
           =2 //-----------------------------------------------------------------------------
           =2 //    Compiler
           =2 //-----------------------------------------------------------------------------
           =2 #define KEILC           // Keil C 5.0
           =2 //-----------------------------------------------------------------------------
           =2 //    MPU Clock
           =2 //-----------------------------------------------------------------------------
           =2 #ifndef INTERNAL_MCU
           =2 //#define CLOCK_11M         // 11.0592MHz
           =2 #define CLOCK_22M         // 22.1184MHz
           =2 #else                 // INTERNAL_MCU
           =2 #define CLOCK_27M         // 27MHz
           =2 #define REG_START_ADDRESS 0xc000    // register start 0xc000, for page0, 0xc100-page1 
           =2 #endif
           =2 //-----------------------------------------------------------------------------
           =2 //    TW88 Version
           =2 //-----------------------------------------------------------------------------
           =2 #define TW8816   ///AWT TW8806 change to TW8816 platform //ryan@20170921
           =2 //-----------------------------------------------------------------------------
           =2 //-----------------------------------------------------------------------------
           =2 //    Options for Backlight control
           =2 //-----------------------------------------------------------------------------
           =2 //#define BACKLIGHT_CCFL
           =2 //#define BACKLIGHT_LED
           =2 #define BACKLIGHT_PWM
           =2 
           =2 //-----------------------------------------------------------------------------
           =2 //    Panel Resolution
           =2 //-----------------------------------------------------------------------------
           =2 // ---- Select Default Panel
           =2 //
           =2 //#define UXGA            // 1600 x 1200
           =2 //#define SXGA              // 1280 x 1024
           =2 //#define XGA  // 1024 x 768
           =2 #ifdef XGA
           =2   #define LVDS          
           =2   #define PWIDTH  1024
           =2   #define PHEIGHT 768
           =2 #endif
           =2 //#define SVGA            //  800 x 600
           =2 //#define VGA             //  640 x 480
           =2 #ifdef VGA
           =2   #define PWIDTH  640
           =2   #define PHEIGHT 480
           =2   //#define HITACHI_640_B_160   //--> 640 x 160
           =2   #define AND_640_480
           =2 #endif
           =2 //#define WXGA            // 1280 x 768 (15:9) // 1366 x 768 (16:9)
           =2 #ifdef WXGA
           =2     //#define WX_SHARP_LQ106K1LA
           =2   #define PWIDTH  1280
           =2   #define PHEIGHT 768
           =2 #endif
           =2 //#define WSVGA           // 1024 x 600 *** only video mode
           =2 #ifdef WSVGA
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 56  

           =2   #define PWIDTH  1024
           =2   #define PHEIGHT 600
           =2   #define UNIDEN_1024_600
           =2 #endif
           =2 #define WVGA            //  800 x 480
           =2 #ifdef WVGA
           =2   #define PWIDTH  800
           =2   #define PHEIGHT 480//600
           =2   // If WVGA, you have to select panel.
           =2   //#define AU_10INCH
           =2   //#define WVGA_TPO
           =2   //#define SAMSUNG_10INCH
           =2   //#define SAMSUNG_TICONLESS_10INCH
           =2   //#define SHARP_TICONLESS_7INCH
           =2   //#define AU_TICONLESS_7INCH
           =2   //#define AU_G084SN05V8_8_4INCH 
           =2   #define HSD070IDW1_7INCH
           =2   //#define INNOLUX_AT080TN03
           =2   //#define AU_TICONLESS_7INCH_CCFL
           =2   //#define CMO     // CHIMEI panel
           =2   //#define AU_TICONLESS_10INCH
           =2   //#define HITACHI_T01
           =2   //#define HITACHI_TX23D12
           =2   //#define HITACHI_TX18D24
           =2   //#define HITACHI_TX18D16
           =2   //#define TMD_LTA070A320F
           =2   //#define TMD_LTA080B
           =2 #endif  //WVGA
           =2 //#define HVGA            //  480 x 320
           =2 //#define QVGA            //  320 x 240 *** only video mode
           =2 #ifdef QVGA
           =2   #define PWIDTH  320
           =2   #define PHEIGHT 240
           =2   //#define HITACHI_TX09D73
           =2   //#define AU_DELTARGB
           =2   //#define SHARP_LQ050Q5DR01
           =2   //#define SHARP_LQ035
           =2   //#define TMD
           =2 #endif
           =2 
           =2 //#define WQVGA           //  480 x 234 *** only video mode
           =2 #ifdef WQVGA
           =2   #define PWIDTH  480
           =2   #define PHEIGHT 240
           =2   // If WQVGA, you have to select panel 
           =2     #define ANALOG_7INCH
           =2   //#define PWIDTH  400
           =2   //#define PHEIGHT 240
           =2   //#define SHARP_LQ043T3DX02   //  400 x 237
           =2   //#define LG_ANALOG
           =2   //#define TMD_ANALOG        //TMD_LTA05B352A
           =2   //#define T_51945GD       // Optorex Panel
           =2 #endif  // WQVGA
           =2 
           =2 //if LVDS pannel disable TICONLESS
           =2 
           =2 //-----------------------------------------------------------------------------
           =2 //---- Add Support One more panel with DIPSW#1
           =2 //---- Ex. Add Analog AU 7" Panel with Default Panel for evalution
           =2 //#define ADD_ANALOGPANEL   // Added Analog panel(AU7") from default set panel(expect WQVGA) with DIP #1 sw
             -itch.(DIP#1=L:ANALOG, H:DEFAULT)
           =2               // It can't support WQVGA and ADD_ANALOGPANEL same time!!
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 57  

           =2   //#define ADD_ANALOG_7INCH
           =2   //#define ADD_TMD_LTA05B352A
           =2                   
           =2 //---- Support Wide panel function
           =2 #if (defined WXGA) || (defined WSVGA) || (defined WVGA) || (defined WQVGA)
           =2 #if 0///ryan@20180115//mask for NTSC sharpness issue
           =2 #define WIDE_SCREEN         // Can support 4 display mode, i.e. Normal, Wide, Full, Zoom
           =2 #endif
           =2 #endif                // Tested panasonic WVGA panel.
           =2 
           =2 //-----------------------------------------------------------------------------
           =2 //    Panel Vendor Specific
           =2 //-----------------------------------------------------------------------------
           =2 
           =2 //-----------------------------------------------------------------------------
           =2 //    TV Tuner
           =2 //-----------------------------------------------------------------------------
           =2 #define PHILIPS       0
           =2 #define ALPS        1   // ALPS, LG
           =2 #define TEMIC       2
           =2 #define TVAVA       3
           =2 #define LGTUNER       4
           =2 #define SAMSUNGMUTITUNER  5
           =2 
           =2 #define TVTunerDevice   4
           =2 //-----------------------------------------------------------------------------
           =2 //    IR Remote Controller Type
           =2 //-----------------------------------------------------------------------------
           =2 //#define REMO_RC5          // RC5 style
           =2 #define TECHWELL_REMOCON
           =2 //#define REMO_NEC          // NEC style
           =2 //#define PHILIPS_REMOCON // New remocon 
           =2 
           =2 //-----------------------------------------------------------------------------
           =2 //    I2C Device Access Address Mapping
           =2 //-----------------------------------------------------------------------------
           =2 
           =2 #define EEPROMI2CAddress  0xa0  // EEPROM (24C16)
           =2 #define TW88I2CAddress    0x8a  // TW880x
           =2 
           =2 #define MSPI2CAddress   0x80  // MSP
           =2 #define ALC106I2CAddress  0x4A  // MSP
           =2 //-----------------------------------------------------------------------------
           =2 //    Options for Possible Inputs
           =2 //-----------------------------------------------------------------------------
           =2 
           =2 
           =2 //-----------------------------------------------------------------------------
           =2 //    Options for Possible Standards
           =2 //    Default:NTSC
           =2 //-----------------------------------------------------------------------------
           =2 #define SUPPORT_PAL     
           =2 #define SUPPORT_SECAM
           =2 #define SUPPORT_NTSC4   
           =2 #define SUPPORT_PALM  
           =2 #define SUPPORT_PALN    
           =2 #define SUPPORT_PAL60   
           =2 
           =2 //#define ID_CHECK_BY_FW        // in Video mode, check input system ID by firmware
           =2 
           =2 //-----------------------------------------------------------------------------
           =2 //    Options for Debugging/Release
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 58  

           =2 //-----------------------------------------------------------------------------
           =2 //#define SUPPORT_PATTERN       // support LCD test pattern
           =2 
           =2 #ifndef WQVGA
           =2   #ifndef QVGA
           =2 #define SUPPORT_OSDPOSITIONMOVE
           =2   #endif
           =2 #endif
           =2 
           =2 #define SERIAL              // include serial communication routines
           =2 
           =2 //#define SUPPORT_DEBUG       // Support to use Read & Write in debug OSD Window by remocon.
           =2 
           =2 //#define DEBUG           // include debug information
           =2 #ifdef DEBUG
           =2   //#define DEBUG_MAIN
           =2   //#define DEBUG_TIME
           =2   //#define DEBUG_KEYREMO
           =2   //#define DEBUG_TW88
           =2   //#define DEBUG_DECODER
           =2   //#define DEBUG_I2C
           =2   //#define DEBUG_EEP
           =2   //#define DEBUG_OSD
           =2   //#define DEBUG_AUDIO
           =2   //#define DEBUG_SETPANEL
           =2   //#define DEBUG_DTV
           =2 //  #define DEBUG_PC
           =2   //#define DEBUG_PC_MEAS
           =2   //#define DEBUG_PC_COLOR
           =2   //#define DEBUG_COMPONENT
           =2   //#define DEBUG_BANK
           =2   //#define DEBUG_PAUSE
           =2   //#define DEBUG_MCU
           =2 #endif
           =2 
           =2 #define AUTOCALC_PC         // in PC mode, Enable Auto Calcuration
           =2 //#define SUPPORT_USERCOLORFROMTXT  // Use color setting of text file in Color mode=USER MODE which is as B
             -rightness(Reg10), Contast(Reg11),
           =2                   //    Sat_U(Reg13),Sat_V(Reg14),Sharpness(Reg12,Reg78)                  
           =2 //#define SUPPORT_GAMMA
           =2 
           =2 //#define CHIP_MANUAL_TEST      // DIPSW#1
           =2 
           =2 #ifndef INTERNAL_MCU
           =2 //#define NO_INITIALIZE       // After Power switch turn on with DIP SW4 Enable(Low), or pressed MENU button 
             -for internal MCU
           =2                                     //     micom works to access only I2C bus by serial command.
           =2 #endif
           =2 
           =2 //#define SUPPORT_KRS_OSDDEMO   // For KRS Company Demo 
           =2 //#define SUPPORT_LINE_OSDDEMO
           =2 
           =2 //-----------------------------------------------------------------------------
           =2 //    Special Features
           =2 //-----------------------------------------------------------------------------
           =2 
           =2 #ifndef INTERNAL_MCU
           =2 //#define SUPPORT_DELTA_RGB
           =2 #endif
           =2 #define SUPPORT_SELECTKEY     // choose the keymap of using select key or left,right key.
           =2 //-----------------------------------------------------------------------------
           =2 
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 59  

           =2 //#define HS_NEWOSDMENU     //Weylis -@121008 for Hor. Style OSD
           =2 //#define HS_NEWOSDMENU_2     //Weylis -@121008 for Hor. Style OSD(2 line)
           =2 
           =2 #endif  //__CONFIG_H__
 375      =2  
   2      =1  #include "panel.h"
   1      =2  //PanelConfig
   2      =2  
   3      =2    #if   defined SXGA
           =2             #define PHR_ 1280
           =2             #define PVR_ 1024
           =2   #elif defined XGA 
           =2             #define PHR_ 1024
           =2             #define PVR_ 768
           =2   #elif defined SVGA
           =2             #define PHR_ 800
           =2             #define PVR_ 600
           =2   #elif defined VGA
           =2             #define PHR_ 640
           =2             #define PVR_ 480
           =2   #elif defined QVGA
           =2             #define PHR_ 320
           =2             #define PVR_ 240
           =2   #elif defined WXGA
           =2             #define PHR_ 1280 //1366
           =2             #define PVR_ 768
           =2   #elif defined WSVGA
           =2             #define PHR_ 1024
           =2             #define PVR_ 600
           =2   #elif defined WVGA
  25      =2              #define PHR_ 800
  26      =2              #define PVR_ 480//600
  27      =2    #elif defined WQVGA
           =2         //    #define PHR_ 960 //480
           =2         //    #define PVR_ 237
           =2             #define PHR_ 480 //480
           =2             #define PVR_ 240
           =2   #endif
  33      =2  
  34      =2   
  35      =2  
  36      =2  /*
  37      =2  #define ACTIVE_LOW      0
  38      =2  #define ACTIVE_HIGH     1
  39      =2  
  40      =2  CODE struct PanelConfig {
  41      =2    unsigned    x_res,          y_res;
  42      =2    unsigned char h_sync_min_pulse_width, v_sync_min_pulse_width;
  43      =2    unsigned    h_min_back_porch;
  44      =2    unsigned char h_sync_polarity,    v_sync_polarity;
  45      =2    unsigned    dot_clock,        max_clock;      // in unit Mhz*10
  46      =2    unsigned char pixs_per_clock;
  47      =2    unsigned char DE_only;
  48      =2  } PanelConfig=
  49      =2    {
  50      =2    //----------------------------------------------------
  51      =2    #ifdef WXGA
  52      =2    //LG  LM171W01 WXGA
  53      =2    1280,     768,
  54      =2    8,        1,
  55      =2    8,
  56      =2    ACTIVE_LOW,   ACTIVE_LOW,
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 60  

  57      =2    #ifdef DOUBLE_PIXEL
  58      =2    320,      470,
  59      =2    2,
  60      =2    #else
  61      =2    650,      950,          //65Mhz
  62      =2    1,
  63      =2    #endif
  64      =2    0
  65      =2    //----------------------------------------------------
  66      =2    #elif defined XGA
  67      =2    //Samsung  LT150x1-151 XGA
  68      =2    1024,     768,
  69      =2    68,       1,
  70      =2    80,
  71      =2    ACTIVE_LOW,   ACTIVE_LOW,
  72      =2    #ifdef DOUBLE_PIXEL
  73      =2    325,      400,          //32.5Mhz
  74      =2    2,
  75      =2    #else
  76      =2    650,      800,
  77      =2    1,
  78      =2    #endif
  79      =2    0
  80      =2    //----------------------------------------------------
  81      =2    #elif defined SXGA
  82      =2    //Samsung  LT170E2-131  SXGA
  83      =2    1280,     1024,
  84      =2    1,        1,
  85      =2    1,
  86      =2    ACTIVE_LOW,   ACTIVE_LOW,
  87      =2    #ifdef DOUBLE_PIXEL
  88      =2    540,      540,          //54.5Mhz
  89      =2    2,
  90      =2    #else
  91      =2    1080,     1080,
  92      =2    1,
  93      =2    #endif
  94      =2    0
  95      =2    //----------------------------------------------------
  96      =2    #elif defined WSVGA           // Thosiba
  97      =2    1024,     600,
  98      =2    8,        3,
  99      =2    1,//80,       
 100      =2    ACTIVE_LOW,   ACTIVE_LOW,
 101      =2    #ifdef DOUBLE_PIXEL
 102      =2    325,      450,
 103      =2    2,
 104      =2    #else
 105      =2    500,      550,          //50Mhz
 106      =2    1,
 107      =2    #endif
 108      =2    0
 109      =2    //----------------------------------------------------
 110      =2  
 111      =2    #elif defined SVGA
 112      =2    //NEC NL8060AC26-11 SVGA
 113      =2    800,      600,
 114      =2    2,        1,
 115      =2    13,
 116      =2    ACTIVE_LOW,   ACTIVE_LOW,
 117      =2    #ifdef DOUBLE_PIXEL
 118      =2    384,      500,          //38.4MHz
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 61  

 119      =2    2,
 120      =2    #else
 121      =2    670,      1000,
 122      =2    1,
 123      =2    #endif
 124      =2    0
 125      =2    //----------------------------------------------------
 126      =2    #elif defined VGA
 127      =2    //NEC NL6448AC33  VGA         // OK with SetPanelRegisters
 128      =2    640,      480,
 129      =2    10,       1,
 130      =2    4,
 131      =2    ACTIVE_LOW,   ACTIVE_LOW,
 132      =2    #ifdef DOUBLE_PIXEL
 133      =2    130,      150,          //25.2MHz
 134      =2    2,
 135      =2    #else
 136      =2    250,      300,
 137      =2    1,
 138      =2    #endif
 139      =2    0
 140      =2    //----------------------------------------------------
 141      =2  
 142      =2    #elif defined WVGA
 143      =2    // Panasonic  EDTCB27QBF WVGA
 144      =2    800,      480,
 145      =2    4,        1,
 146      =2    7,
 147      =2    ACTIVE_LOW,   ACTIVE_LOW,
 148      =2    #ifdef DOUBLE_PIXEL
 149      =2    166,      200,          //33.2MHz
 150      =2    2,
 151      =2    #else
 152      =2    332,      360,          //33.2MHz
 153      =2    1,
 154      =2    #endif
 155      =2    0
 156      =2  
 157      =2    //----------------------------------------------------
 158      =2    #else
 159      =2    // Default : XGA panel
 160      =2    // Samsung  LT150x1-151 XGA
 161      =2    1024,     768,
 162      =2    68,       1,
 163      =2    80,
 164      =2    ACTIVE_LOW,   ACTIVE_LOW,
 165      =2    #ifdef DOUBLE_PIXEL
 166      =2    325,      400,          //32.5Mhz
 167      =2    2,
 168      =2    #else
 169      =2    650,      800,          //32.5Mhz
 170      =2    1,
 171      =2    #endif
 172      =2    0
 173      =2    #endif
 174      =2    };
 175      =2  
 176      =2  */
   3      =1  #include "osdmenu.h"
   1      =2  //osdmenu.h
   2      =2  //LJY10292001
   3      =2  #ifndef __OSDMENU__
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 62  

   4      =2  #define __OSDMENU__
   5      =2  
   6      =2  //=======================================================================
   7      =2  // 
   8      =2  //BYTE GetOSDDuration(void);
   9      =2  
  10      =2  void ResetVideoValue(void);
  11      =2  //#if defined( SUPPORT_PC ) || defined( SUPPORT_DTV )
  12      =2  //void ResetPCValue(void);
  13      =2  //#endif
  14      =2  BYTE GetOSDMenuLevel( void );
  15      =2  
  16      =2  void DrawMenulist(BYTE);
  17      =2  void Display_EnterPin(void);
  18      =2  void OSDHighMenu_sub(void);
  19      =2  void ResetOSDValue(void);
  20      =2  #ifdef E_Wintek
           =2 void ResetUESROSDValue(void);
           =2 #endif
  23      =2  //BYTE OnChangingValue(void);
  24      =2  //Not used yet *******************BYTE OnChangingTime(void);
  25      =2  
  26      =2  //WORD GetOSDclock(void);
  27      =2  
  28      =2  #ifdef HS_NEWOSDMENU
           =2 void InitOSDMenu(BYTE OSD_ID);
           =2 void OpenOSDMenu(BYTE OSD_ID);
           =2 #else
  32      =2  void InitOSDMenu(void);
  33      =2  void OpenOSDMenu(void);
  34      =2  #endif
  35      =2  BYTE CloseOSDMenu(void);
  36      =2  
  37      =2  void OpenFORMATMenu(void);
  38      =2  void OSDHighMenu(void);
  39      =2  void OSDSelect(void);
  40      =2  void OSDCursorMove(BYTE flag );
  41      =2  void OSDLeftRight(BYTE flag );
  42      =2  void OSDValueUpDn(BYTE flag);
  43      =2  WORD SetItemValue( BYTE id, BYTE flag );
  44      =2  BYTE DoAction(BYTE id);
  45      =2  
  46      =2  BYTE SaveValue1(void);
  47      =2  void ClearValueWin(void);
  48      =2  
  49      =2  void OSDNumber( BYTE num );
  50      =2  
  51      =2  void Set4WideScreen(BYTE id);
  52      =2  
  53      =2  void SetRGBContrast( BYTE id, BYTE val );
  54      =2  BYTE SetPCColorTemp(BYTE flag);
  55      =2  void ResetPanelAttributeValue(void);
  56      =2  WORD GetItemValue( BYTE);
  57      =2  void DisplayViewBar( WORD,BYTE);
  58      =2  void DrawNum(WORD, CODE_P struct NumType *, WORD);
  59      =2  void DrawStringByLang( WORD, CODE_P struct EnumType *, WORD);
  60      =2  
  61      =2  void DisplayVolumebar(BYTE val);
  62      =2  BYTE GetOSDLang(void);
  63      =2  void InitOSDMenuXY(void);
  64      =2  
  65      =2  void Display_TVGuide_Window(void);
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 63  

  66      =2  void Display_TVGuide_Status(void);
  67      =2  
  68      =2  void ChangeVchip_LevelCursor(BYTE);
  69      =2  void ChangeVchip_ContentCursor(BYTE);
  70      =2  void Select_VchipLevel(void);
  71      =2  void SetVideoMode(BYTE mode);
  72      =2  BYTE GetVideoDatawithOffset(BYTE offset);
  73      =2  void SetVideoContrast(BYTE newv);
  74      =2  void SetVideoBrightness(BYTE newv);
  75      =2  void SetVideoHue(BYTE newv) ;
  76      =2  void SetVideoSaturation(BYTE svtype, BYTE newv) ;
  77      =2  BYTE SetVideoSharpness(BYTE flag) ;
  78      =2  void SetVideoBacklight(BYTE newv) ;
  79      =2  //------------------------------------------------andy awt 981013
  80      =2  //void DaySelect(BYTE);
  81      =2  void CAMOutDSel(BYTE val);
  82      =2  void DVRAodioSel(BYTE  val);
  83      =2  
  84      =2  //------------------------------------------------andy awt 981013
  85      =2  
  86      =2  void DisplayLineOSD(void);  // OSD Line display Demo
  87      =2  #ifdef CENEC_OSDMENU_ACCM8
           =2 BYTE ChkOSDMENU_TOPWIN(void);  //Weylis 080930
           =2 BYTE ChkOSDMENU_WINDOW(void);
           =2 BYTE ChkOSDMENU(void);
           =2 #endif
  92      =2  
  93      =2  #ifdef AWT_ADD_TRIGGER_DELAY_FUN  //Pinchi 20150209 add
  94      =2  void AWT_DisplayViewBar(WORD addr , BYTE val);
  95      =2  #endif
  96      =2  struct MenuType {
  97      =2    BYTE  width,  height;
  98      =2    BYTE  TitleColor; 
  99      =2    BYTE  CursorColor;
 100      =2  };
 101      =2  
 102      =2  struct NumType {
 103      =2    BYTE  PrePostCharLen;   // high nibble(pre) / low nibble(post)
 104      =2    BYTE  PrePostChar[4];
 105      =2  };
 106      =2  
 107      =2  struct NumberStringType {
 108      =2    BYTE  x, y;
 109      =2    BYTE    width;
 110      =2    BYTE  BackColor;
 111      =2    BYTE  Radix;
 112      =2    BYTE  NumColor;
 113      =2    BYTE    MaxLen;       // maximum length of string
 114      =2    BYTE  PrePostCharLen;   // high nibble(pre) / low nibble(post)
 115      =2    BYTE  PrePostChar[3];
 116      =2  };
 117      =2  
 118      =2  struct TimeType {
 119      =2    BYTE  x, y;
 120      =2    BYTE    width;
 121      =2    BYTE  BackColor;
 122      =2    BYTE  Format;       //_24H_TIME
 123      =2    BYTE  TimeColor;
 124      =2    BYTE    CursorColor;
 125      =2  };
 126      =2  
 127      =2  struct EnumType {
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 64  

 128      =2    BYTE    Sz;//size
 129      =2    BYTE    ByLang;
 130      =2    BYTE  Str[15];      // doesn't matter the size !!!
 131      =2  };
 132      =2  
 133      =2  #define ICON_CH_SZ    2
 134      =2  //#define BAR_NUM_SZ    4
 135      =2  #define ICON_BUF_SZ   2
 136      =2  struct DefineMenu {
 137      =2    //WORD            Icon[ICON_BUF_SZ];  
 138      =2    BYTE        CODE  *Icon;
 139      =2    BYTE            **Desc;       
 140      =2    BYTE            PreFnId, 
 141      =2                  PostFnId;
 142      =2  //  void    (*CalltoFunction)(void);            // Un/Dn/Sel Function
 143      =2    BYTE            IconColor;      //NIL: not to display icon
 144      =2    BYTE            DescColor;      //NIL: not to display desc. (IconColor==NIL && DescColor==NIL)->Last Item
 145      =2    struct DefineMenu CODE  *Child;
 146      =2    BYTE            Type;       // MENU, CHOICEMENU, BAR, NUMBER, TIME, ACTION, ENUM_STRING
 147      =2    BYTE            ActiveWithCursor;
 148      =2    BYTE            Id;
 149      =2    BYTE        CODE  *TypeData;  //MenuType, BarType, NumType,,,
 150      =2  } ;
 151      =2  
 152      =2  struct PictureInfo {
 153      =2  
 154      =2    BYTE Register_Addr;
 155      =2    BYTE EEPROM_Addr;
 156      =2    struct RegisterInfo   CODE  *Control_Range;
 157      =2  };
 158      =2  
 159      =2  
 160      =2  //-------------------------------------------------------------------
 161      =2  // OSD Window Information
 162      =2  //-------------------------------------------------------------------
 163      =2  // Window Number
 164      =2  #define OSDCURSORWINDOW     1
 165      =2  #define OSDMENUWINDOW       OSDCURSORWINDOW+1
 166      =2  #define OSDMENU_TOPWIN      OSDCURSORWINDOW+2
 167      =2  #define OSDMENU_TITLEWIN    OSDCURSORWINDOW+3
 168      =2  #define OSDBARWINDOW      OSDCURSORWINDOW
 169      =2  
 170      =2  #define TECHWELLOGO_OSDWIN    1 
 171      =2  #define TVINFO_OSDWIN       2 
 172      =2  #define FONTTEST_OSDWIN     2 
 173      =2  #define INPUTINFO_OSDWIN    3  
 174      =2  #define RATINGINFO_OSDWIN     1 
 175      =2  #define PCINFO_OSDWIN       3
 176      =2  #define VLOSSINFO_OSDWIN    4
 177      =2  
 178      =2  //-------------OSDMENU_TITLEWIN------------------------------------------------------
 179      =2  // Window Start address
 180      =2  #define OSDMENU_MAINADDR  0
 181      =2  //#define OSDMENU_SUBADDR     OSDMENU_MAINADDR+15    //25*9:196
 182      =2  //#define OSDMENU_SUBADDR     OSDMENU_MAINADDR+HS_WIDTH //0+40   //25*9:196
 183      =2  //#define OSDMENU_SUBADDR     OSDMENU_MAINADDR+10 //0+40   //25*9:196
 184      =2  #define OSDMENU_SUBADDR     OSDMENU_MAINADDR + 14 //0+40   //25*9:196  // Weylis 121008 清除 Icon 後面
 185      =2  
 186      =2  #define OSDMENU_BARADDR   200 //OSDMENU_SUBADDR+225    //256   //25x2:50
 187      =2  
 188      =2  #ifdef WQVGA
           =2 #define INPUTINFO1_ADDR   INPUTINFO_ADDR+17 //17x3:51
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 65  

           =2 #else
 191      =2  #define INPUTINFO1_ADDR   INPUTINFO_ADDR+34 //17x2:51
 192      =2  #endif
 193      =2  
 194      =2  #define MUTEINFO_ADDR     INPUTINFO1_ADDR+51  // 4x1:4
 195      =2  #define TVCHINFO_ADDR     MUTEINFO_ADDR//324  // 3X1:3
 196      =2  #define LOGO_ADDR     0
 197      =2  #ifdef AWT_ML072S
 198      =2  #define RATINGINFO_ADDR   (34)  //addr:210(8x1:8)
 199      =2  #else
           =2 #define RATINGINFO_ADDR   0 //addr:210(8x1:8)
           =2 #endif
 202      =2  #define PCMEASUREINFO_ADDR  OSDMENU_BARADDR //10x1
 203      =2  #ifdef QUAD
           =2 #define INPUTINFO_ADDR    160 // 9x1:9
           =2 #else
 206      =2  #define INPUTINFO_ADDR    0///24  // 9x1:9
 207      =2    #ifdef AWT_ML072S
 208      =2    #define INPUTINFO_MIRROR_ADDR 0//83 //william-v1.0-970804
 209      =2    #else
           =2   #define INPUTINFO_MIRROR_ADDR 73//83  //william-v1.0-970804
           =2   #endif
 212      =2  #define INPUTINFO_WIDTH   40  // 9x1:9    //william-v1.0-971111
 213      =2  #endif
 214      =2  #define OSD_VLOSS_ADDR  33 
 215      =2  
 216      =2  
 217      =2  //--------------------------------------------------------------------
 218      =2  // OSD Menu Position Range
 219      =2  #if ((defined WQVGA) && (defined ANALOG_7INCH)) || ((defined QVGA) && (defined SHARP_LQ050Q5DR01))
           =2   #define OSD_PHR_ PHR_/2
           =2 #else
 222      =2    #define OSD_PHR_ PHR_
 223      =2  #endif
 224      =2  
 225      =2  #define OSDHSTART_MAX (OSD_PHR_-(12+1)*25 - 56*2 -4)  //PHR - (pixelsize +Hspace)*MenuWidth - Hborder*2 - 
             -outlinewidth*2
 226      =2  #define OSDVSTART_MAX (PVR_-(18+11)*9 - 5*2 ) //  PVR - (Linesize+Vspace)*MENU_HEIGHT - Vborder*2  - outli
             -newidth*2
 227      =2  
 228      =2  #define OSDHSTART_MAX_A (OSD_PHR_-(12+2)*25 - 56*2 -8) //OSDHSTART_MAX  //PHR - (pixelsize +Hspace)*MenuWi
             -dth - Hborder*2 - outlinewidth*2
 229      =2  #define OSDVSTART_MAX_A OSDVSTART_MAX  //  PVR - (Linesize+Vspace)*MENU_HEIGHT - Vborder*2  - outlinewidth*
             -2
 230      =2  
 231      =2  #define OSDMENUX_MIN 1//0
 232      =2  #define OSDMENUX_MAX (OSDHSTART_MAX>>3)
 233      =2  #define OSDMENUX_50  (OSDHSTART_MAX>>4)
 234      =2  
 235      =2  #define OSDMENUY_MIN 2//0
 236      =2  #define OSDMENUY_MAX (OSDVSTART_MAX>>2)
 237      =2  #define OSDMENUY_50  (OSDVSTART_MAX>>3)
 238      =2  
 239      =2  #ifdef HS_NEWOSDMENU  //Weylis -@121008
           =2 // HS OSD Style
           =2 #define HS_WIDTH      40
           =2 #define HS_CHSPACE      14
           =2 //#define HS_CHSPACE      18
           =2 #define HS_ICONSPACE    1
           =2 #define HS_ICONSADDR    0
           =2 //#define HS_ICONSPACE    2
           =2 //#define HS_ICONSADDR    8
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 66  

           =2 #endif
 249      =2  
 250      =2  //--------------------------------------------------------------------
 251      =2  // OSD Menu Width, Height 
 252      =2  #ifdef E_Wintek
           =2 #define ICON_HIGH       0x14
           =2 #else
 255      =2  #define ICON_HIGH       0x0a
 256      =2  #endif
 257      =2  
 258      =2  #define TOTAL_MAX_HIGHT     9
 259      =2  #define TOTAL_TOP_HEIGHT    5 // Include blank line!
 260      =2  #define TOPMENU_WIDTH     2
 261      =2  #define TOPMENU_HEIGHT      4 
 262      =2  
 263      =2  #if (defined QVGA) && (defined SHARP_LQ050Q5DR01)
           =2 #define MENU_WIDTH        17 //23//25 
           =2 #define TITLE_MAX_DESC      17 //25 //
           =2 #define BAR_LENGTH        0
           =2 #else
 268      =2  //#define MENU_WIDTH        23  //23//25 
 269      =2  //#define MENU_WIDTH        26  //ryan@20170821
 270      =2  #ifdef AWT_ML072S
 271      =2  #define MENU_WIDTH        19  
 272      =2  #else
           =2 #define MENU_WIDTH        24  //ryan@20170821
           =2 #endif
 275      =2  
 276      =2  #define TITLE_MAX_DESC      23  //25  //
 277      =2  #define BAR_LENGTH        5  //8
 278      =2  #endif
 279      =2  
 280      =2  #ifdef TW8816
 281      =2  #define MENU_HEIGHT       8  //6 
 282      =2  #else
           =2 #define MENU_HEIGHT       7  //6 
           =2 #endif
 285      =2  //#define BARNUM_LENGTH       8  //11
 286      =2  
 287      =2  #ifdef AWT_ML072S
 288      =2  #define BARNUM_LENGTH       4//ryan@20170821
 289      =2  #else
           =2 #define BARNUM_LENGTH       9//ryan@20170821
           =2 #endif
 292      =2  
 293      =2  
 294      =2  #ifdef REFERENCE
           =2 #define BACK_COLOR        BG_COLOR_CYAN
           =2 #define DEFAULT_COLOR     BG_COLOR_CYAN   | CH_COLOR_WHITE
           =2 //#define ACTIVE_COLOR      BG_COLOR_YELLOW | CH_COLOR_WHITE
           =2 #define TITLE_BACK_COLOR    BG_COLOR_MAGENTA
           =2 #define TITLE_COLOR       TITLE_BACK_COLOR | CH_COLOR_YELLOW
           =2 #define COMMENT_COLOR     TITLE_BACK_COLOR | CH_COLOR_WHITE
           =2 #define CURSOR_COLOR      BG_COLOR_YELLOW | CH_COLOR_BLUE
           =2 #define OSD_INFO_COLOR      DEFAULT_COLOR
           =2 #define BAR_COLOR       DEFAULT_COLOR 
           =2 #define BAR_NUM_COLOR     DEFAULT_COLOR
           =2 #define NUM_COLOR       DEFAULT_COLOR
           =2 #define OSDMENU_OUTLINE_COLOR BG_COLOR_BLUE
           =2 #else
 308      =2  #define BACK_COLOR        BG_COLOR_CYAN
 309      =2  
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 67  

 310      =2  #define DEFAULT_COLOR     BG_COLOR_CYAN | CH_COLOR_GREEN//ryan@20170828
 311      =2  
 312      =2  //#define ACTIVE_COLOR      BG_COLOR_YELLOW | CH_COLOR_WHITE
 313      =2  #define TITLE_BACK_COLOR    BG_COLOR_BLUE
 314      =2  #define TITLE_COLOR       TITLE_BACK_COLOR | CH_COLOR_YELLOW
 315      =2  #define COMMENT_COLOR     TITLE_BACK_COLOR | CH_COLOR_WHITE
 316      =2  #define CURSOR_COLOR      BG_COLOR_YELLOW  | CH_COLOR_BLUE
 317      =2  #define OSD_INFO_COLOR      BG_COLOR_CYAN    | CH_COLOR_GREEN
 318      =2  #define BAR_COLOR       DEFAULT_COLOR
 319      =2  #define BAR_NUM_COLOR     DEFAULT_COLOR
 320      =2  #define NUM_COLOR       DEFAULT_COLOR
 321      =2  #define VER_COLOR         BG_COLOR_CYAN   | CH_COLOR_YELLOW   /// V1.1 03/07/07 simonsung
 322      =2  #define OSDMENU_OUTLINE_COLOR   BG_COLOR_CYAN
 323      =2  #define OSD_VLOSS_COLOR     BG_COLOR_CYAN    | CH_COLOR_WHITE
 324      =2  
 325      =2  #endif
 326      =2  
 327      =2  #ifdef HS_NEWOSDMENU
           =2 #define COMMENT1_COLOR      BG_COLOR_CYAN | CH_COLOR_RED
           =2 #endif
 330      =2  
 331      =2  #define Trigger_COLOR       BG_COLOR_CYAN|CH_COLOR_RED      //william-v1.1-970827
 332      =2  #define Mirror_COLOR      BG_COLOR_CYAN|CH_COLOR_YELLOW     //william-v1.1-970827
 333      =2  #ifndef AWT_ML072S
           =2 #define Jump_COLOR        BG_COLOR_CYAN|CH_COLOR_GREEN      //william-v1.1-970827
           =2 #else
 336      =2  #define Jump_COLOR        BG_COLOR_CYAN|CH_COLOR_BLUE     //william-v1.1-970827
 337      =2  #endif
 338      =2  #define Gauge_COLOR1      BG_COLOR_BLACK|CH_COLOR_GREEN 
 339      =2  #define Gauge_COLOR2      BG_COLOR_BLACK|CH_COLOR_YELLOW  
 340      =2  #define Gauge_COLOR3      BG_COLOR_BLACK|CH_COLOR_RED
 341      =2  
 342      =2  //DisplayedOSD
 343      =2  //    new   | MENU  TVINFO    CC    INPUTINFO   PCINFO    RATINGINFO
 344      =2  //  current   |
 345      =2  //============|=========================================================================
 346      =2  //  MENU    |     TVINFO    --    INPUTINFO   PCINFO    MENU + RATINGINFO 
 347      =2  //        |            
 348      =2  //------------|-------------------------------------------------------------------------
 349      =2  //  TVINFO    | MENU  TVINFO    --    INPUTINFO   PCINFO    TVINFO+RATING
 350      =2  //------------|-------------------------------------------------------------------------
 351      =2  //  CC      | MENU->  TVINFO->      INPUTINFO->   PCINFO    RATINGINFO
 352      =2  //        |  CC    CC          CC            
 353      =2  //------------|-------------------------------------------------------------------------
 354      =2  //  INPUTINFO | MENU  TVINFO    --    INPUTINFO   PCINFO    --
 355      =2  //------------|-------------------------------------------------------------------------
 356      =2  //  PCINFO    | MENU  x     x   INPUTINFO   PCINFO    x
 357      =2  //------------|-------------------------------------------------------------------------
 358      =2  //  RATINGINFO| MENU  TVINFO     RATING   INPUTINFO   x     RATINGINFO
 359      =2  //                  
 360      =2  
 361      =2  //=======================================================================================
 362      =2  // OSD Menu Constant define.
 363      =2  //=======================================================================================
 364      =2  //Time type
 365      =2  #define _24H_TIME   1
 366      =2  
 367      =2  //for previous, next, parent or child
 368      =2  #define YES       0xfe  
 369      =2  #define NO        0
 370      =2  
 371      =2  //#define OVERWRITE   0
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 68  

 372      =2  //#define POPUP     1
 373      =2  
 374      =2  //CursorMove
 375      =2  #define VERT      0
 376      =2  #define HORI      1
 377      =2  
 378      =2  //Type of MenuItem
 379      =2  #define OSDMENU     1
 380      =2  #define CHOICEMENU    2
 381      =2  #define ACTION      3
 382      =2  #define BAR       4
 383      =2  #define NUMBER      5
 384      =2  #define CHOICE      6
 385      =2  #define ENUM_STRING   7 //YESNO     7
 386      =2  #define CHOICE1     8
 387      =2  #define TIME      9
 388      =2  #define NUMBER_STRING 10
 389      =2  #define TEXT_STR              11   // V1.1 02/28/07 simonsung
 390      =2  #define INFORMATION              12
 391      =2  #define TEXT_STR_exit 13
 392      =2  
 393      =2  #ifdef HTRV
           =2 #define GRAPH 16
           =2 #endif
 396      =2  
 397      =2  //Bar type
 398      =2  #define LEFT_FILLED   1
 399      =2  #define RIGHT_FILLED  2
 400      =2  #define NO_FILLED   3
 401      =2  
 402      =2  //OSDmenu up and down key
 403      =2  #define UP          1
 404      =2  #define DN          2
 405      =2  #define RIGHT       3
 406      =2  #define LEFT          4
 407      =2  
 408      =2  // Action Id
 409      =2  #define DISP_INFO     0x16
 410      =2  
 411      =2  #define INPUTSELECTION    0x2f
 412      =2  
 413      =2  #define CHANGE_TO_COMPOSITE     (0x20|CH_TW2835)      // Low nibble need to start from 1 
 414      =2  #define CHANGE_TO_SVIDEO      (0x20|SVIDEO)       // so that it match with COMPOSITE...
 415      =2  #define CHANGE_TO_COMPONENT     (0x20|COMPONENT)    
 416      =2  #define CHANGE_TO_DTV       (0x20|DTV)    
 417      =2  #define CHANGE_TO_TV        (0x20|TV)         
 418      =2  #define CHANGE_TO_PC        (0x20|PC)         
 419      =2  #define CHANGE_TO_DIGITALVGA    (0x20|DIGITALVGA)     
 420      =2  #define CHANGE_TO_SCART       (0x20|SCART)        
 421      =2  
 422      =2  #define OSDPOSITIONMODE     0x10
 423      =2  #define OSD_VPOS      0x11
 424      =2  #define OSD_HPOS      0x12
 425      =2  #define OSD_HALFTONE    0x13
 426      =2  #define OSD_DURATION    0x14
 427      =2  #define RESET_OSDVALUE    0x15
 428      =2  #define OSDLANG       0x16
 429      =2  
 430      =2  #define PANEL_CONTRAST    0x58
 431      =2  #define PANEL_BRIGHTNESS  0x59
 432      =2  #define PANEL_HUE     0x5a
 433      =2  #define PANEL_SHARPNESS   0x5b
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 69  

 434      =2  #define PANEL_SATURATION  0x5c
 435      =2  
 436      =2  #define PC_VPOS       0x43
 437      =2  #define PC_HPOS       0x44
 438      =2  #define PC_HSIZE      0x4d
 439      =2  
 440      =2  #define PC_CLOCK      0x45
 441      =2  #define PC_PHASE      0x46
 442      =2  
 443      =2  #define AUTOADJUST      0x47
 444      =2  #define AUTOADJUST2     0x48
 445      =2  //#define SAVE_AUTOADJUST   0x49
 446      =2  #define RESET_AUTOADJUST  0x4a
 447      =2  
 448      =2  #define PCCOLORADJUST   0x4b
 449      =2  #define SAVE_COLORADJUST  0x4c
 450      =2  //#define RESET_COLORADJUST 0x4d
 451      =2  
 452      =2  #define RESET_PCVALUE   0x4e
 453      =2  #define CameraOSD     0x4f
 454      =2  
 455      =2  #define PC_COLOR_MODE   0x3f
 456      =2  #define PC_COLOR_TEMP   0x30
 457      =2  #define PC_COLOR_MODE1    0x31
 458      =2  #define PC_COLOR_MODE2    0x32
 459      =2  #define PC_COLOR_MODE3    0x33
 460      =2  #define PC_COLOR_USER   0x34
 461      =2  #define PC_COLOR_R      0x35
 462      =2  #define PC_COLOR_G      0x36
 463      =2  #define PC_COLOR_B      0x37
 464      =2  
 465      =2  #define VIDEO_MODE      0x90
 466      =2  #define VIDEO_MODE1     0x91
 467      =2  #define VIDEO_MODE2     0x92
 468      =2  #define VIDEO_MODE3     0x93
 469      =2  #define VIDEO_USER      0x94
 470      =2  #define VIDEO_CONTRAST    0x95
 471      =2  #define VIDEO_BRIGHTNESS  0x96
 472      =2  #define VIDEO_SATURATION  0x97
 473      =2  #define VIDEO_HUE     0x99
 474      =2  #define VIDEO_SHARPNESS   0x9a
 475      =2  #define VIDEO_BACKLIGHT   0x9c    // add new value 
 476      =2  #define RESET_VIDEOVALUE  0x9b
 477      =2  #define RESET_DVRVALUE    0x9e
 478      =2  #define RESET_MonitorVALUE    0x70
 479      =2  
 480      =2  
 481      =2  #ifdef AWT_ADD_TRIGGER_DELAY_FUN  //Pinchi 20150209 add
 482      =2  #define TRIGGER_CamADelay 0xb2
 483      =2  #define TRIGGER_CamBDelay 0xb3
 484      =2  #define TRIGGER_CamCDelay 0xb4
 485      =2  #define TRIGGER_CamRDelay 0xb5
 486      =2  #endif
 487      =2  
 488      =2  #ifdef HTRV
           =2 #define RESET_GAUGESETUP  0x9d   
           =2 #define Gauge_VStart      0x7a   
           =2 #endif
 492      =2  
 493      =2  #ifdef E_Wintek
           =2 #define RESET_USERVALUE 0x9d
           =2 #endif
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 70  

 496      =2  #define VIDEOPICTURE    0x9f
 497      =2  
 498      =2  #define INPUTSTD      0x6f
 499      =2  #define CHANGE_TO_AUTO    0x60
 500      =2  #define CHANGE_TO_NTSC    (0x60 | NTSC)
 501      =2  #define CHANGE_TO_PAL   (0x60 | PAL)
 502      =2  #define CHANGE_TO_SECAM   (0x60 | SECAM)
 503      =2  #define CHANGE_TO_NTSC4   (0x60 | NTSC4)
 504      =2  #define CHANGE_TO_PALM    (0x60 | PALM)
 505      =2  #define CHANGE_TO_PALN    (0x60 | PALN)
 506      =2  #define CHANGE_TO_PAL60   (0x60 | PAL60)
 507      =2  
 508      =2  #if 0
           =2 #define CLOSED_CAPTION    0x7f
           =2 #define CLOSEDCAP_OFF   0x70
           =2 #define CLOSEDCAP_CC1   0x71
           =2 #define CLOSEDCAP_CC2   0x72
           =2 #define CLOSEDCAP_CC3   0x73
           =2 #define CLOSEDCAP_CC4   0x74
           =2 #define CLOSEDCAP_T1    0x75
           =2 #define CLOSEDCAP_T2    0x76
           =2 #define CLOSEDCAP_T3    0x77
           =2 #define CLOSEDCAP_T4    0x78
           =2 
           =2 #define TV_GUIDE      0x8f
           =2 #define NO_VCHIP_LOCK   0
           =2 #define VCHIP_TV_Y      1
           =2 #define VCHIP_TV_Y7     2
           =2 #define VCHIP_TV_G      3
           =2 #define VCHIP_TV_PG     4
           =2 #define VCHIP_TV_14     5
           =2 #define VCHIP_TV_MA     6
           =2 #define PASSWORD      0x87
           =2 #define NEW_PASSWORD    0x88
           =2 #define CHK_PASSWORD    0x89
           =2 #define RET_CHK_PASSWORD  0x8a
           =2 #endif
 533      =2  
 534      =2  #define MPAA_RATING     0x9f
 535      =2  #define NO_MPAA_RATING    0
 536      =2  #define MPAA_G        1
 537      =2  #define MPAA_PG       2
 538      =2  #define MPAA_PG_13      3
 539      =2  #define MPAA_R        4
 540      =2  #define MPAA_NC_17      5
 541      =2  #define MPAA_X        6
 542      =2  
 543      =2  #define TVINSTALL     0xa0
 544      =2  #define SCAN_CHANNEL    0xa1
 545      =2  #define AIR_CABLE_TV    0xa3
 546      =2  #define STORE_CLEAR_TVCHN 0xa4
 547      =2  #define MTS         0xa5
 548      =2  #define EDIT_CHANNEL    0xa6
 549      =2  #define MTS_STEREO      0//0x10
 550      =2  #define MTS_MONO      1//0x11
 551      =2  
 552      =2  #define AUDIO_VOLUME    0xb7
 553      =2  
 554      =2  #if 0 //andy AWT8.4 20090811
           =2 
           =2 #define AUDIO_BALANCE   0xb9
           =2 #define AUDIO_BASS      0xba
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 71  

           =2 #define AUDIO_TREBLE    0xbb
           =2 
           =2 #define AUDIO_LOUDNESS    0xbc
           =2 #define AUDIO_EFFECT    0xbd
           =2 #define AUDIO_MUTE      0xbe
           =2 #endif
 564      =2  
 565      =2  #define DayChoice           0xb8
 566      =2  #define CAMOSDONOFF         0xb9
 567      =2  #define GAUGEChoice         0xba
 568      =2  #define OsdLockChoice       0xbb
 569      =2  #define PRIORITYChoice      0xcA
 570      =2  #define DVRDisplay    0xcc
 571      =2  
 572      =2  #define CAMAONOFF       0xc1
 573      =2  #define CAMBONOFF         0xc2
 574      =2  #define CAMCONOFF       0xc3
 575      =2  #define CAMRONOFF     0xc4
 576      =2  
 577      =2  #define IMAGEChoice         0xc5 
 578      =2  #define REARChoice          0xc6
 579      =2  #define JUMPChoice          0xc7
 580      =2  #define CAMOUTChoice        0xc8 
 581      =2  #define STIME_STEP        0xc9
 582      =2  #define TriggerVGA        0xcb
 583      =2  #define IMAGE_A_Choice         0xcd
 584      =2  #define IMAGE_B_Choice         0xce
 585      =2  #define IMAGE_C_Choice         0xcf
 586      =2  
 587      =2  #define DELAYCAMA       0xd0
 588      =2  #define DELAYCAMB            0xd1
 589      =2  #define DELAYCAMC       0xd2
 590      =2  #define DELAYCAMR         0xd3
 591      =2  #ifdef USE_CAMD
           =2 #define DELAYCAMD       0xd4
           =2 #endif
 594      =2  #define ReverseMode   0xd6
 595      =2  #ifdef AWT_ML072S //william @20130902 v1.0.1.2
 596      =2  #define JUMP_AV     0xd7
 597      =2  #endif
 598      =2  #define MANUAL_TUNE_CHANNEL 0xab
 599      =2  #define FINE_TUNE_CHANNEL 0xac
 600      =2  #define STORE_PALCHANNEL  0xad
 601      =2  
 602      =2  //#define CLEAR_TVCHN     0xb0
 603      =2  //#define STORE_TVCHN     0xb1
 604      =2  
 605      =2  #define WIDESCREEN      0xc0
 606      =2  #define WIDESCREEN_NORMAL 0 
 607      =2  #define WIDESCREEN_WIDE   1 
 608      =2  #define WIDESCREEN_PANO   2
 609      =2  #define WIDESCREEN_FULL   3 
 610      =2  #define WIDESCREEN_ZOOM   4 
 611      =2  
 612      =2  //#define SYSTEM_CLOCK    0xd1
 613      =2  //#define SYSTEM_CLOCK_H    0xd2
 614      =2  //#define WAKEUP_TIME     0xd3
 615      =2  //#define WAKEUP_TIME_H   0xd4
 616      =2  //#define WAKEUP_PR     0xd5
 617      =2  //#define OFF_TIME      0xd6
 618      =2  //#define OFF_TIME_H      0xd7
 619      =2  //#define SLEEP_TIMER     0xd8
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 72  

 620      =2  
 621      =2  #define Resolution      0xe0
 622      =2  #define FPS         0xe1
 623      =2  #define Quality       0xe2
 624      =2  #define RecordMode      0xe3
 625      =2  #define RecordLength      0xe4
 626      =2  #define PreAlarmLength    0xe5
 627      =2  #define PostAlarmLength   0xe6
 628      =2  #define Apply       0xe7
 629      =2  #if 0 //william-awt ml073q-20120313
           =2 #define ManualRecordStart 0xe8
           =2 #define ManualRecordStop  0xe9
           =2 #define Snapshot        0xea
           =2 #endif
 634      =2  #define FormatSD      0xeb
 635      =2  #define AudioRecord     0xec
 636      =2  #define FirmwareUpdate    0xed
 637      =2  #define ChangePassword    0xee
 638      =2  #define OverWrite     0xef
 639      =2  
 640      =2  #define UpdateConfig      0xd0
 641      =2  #define SDCardDetect      0xd5
 642      =2  
 643      =2  #define Year        0x20
 644      =2  #define Month       0x21
 645      =2  #define Day         0x22
 646      =2  #define Hour        0x23
 647      =2  #define Minute        0x24
 648      =2  
 649      =2  #define DaylightSaving        0x25
 650      =2  #define TimeBeginesMonth      0x26
 651      =2  #define TimeBeginesWeek       0x27
 652      =2  #define TimeBeginesTime       0x28
 653      =2  #define StandardTimeBeginesMonth  0x29
 654      =2  #define StandardTimeBeginesWeek   0x2a
 655      =2  #define StandardTimeBeginesTime   0x2b
 656      =2  #define TimeZone          0x2c
 657      =2  #define FirstNumber         0x2d
 658      =2  #define SecondNumber        0x2e
 659      =2  #define ThridNumber         0x2f
 660      =2  #define FourthNumber        0x38
 661      =2  #define WIFIIPNumber        0x39
 662      =2  #define WIFIMACNumber       0x3a
 663      =2  #define GETWAYNumber        0x3b
 664      =2  
 665      =2  #define OSDLANGI      0xd9
 666      =2  #define OSDLANGII     OSDLANGI+1
 667      =2  #define OSDLANGIII      OSDLANGI+2
 668      =2  #define OSDLANGIV     OSDLANGI+3
 669      =2  
 670      =2  #define TOHIGHMENU      0xf1
 671      =2  #define MOVECURSOR2FIRST  0xf2
 672      =2  #define RESET_ALL     0xf3
 673      =2  #define EXITMENU      0xf4
 674      =2  #define DVRParamApply   0xf5
 675      =2  #define DATETIMEApply   0xf6
 676      =2  
 677      =2  #define CHOICE1_VAL     0xfc
 678      =2  #define CHOICE_VAL      0xfd
 679      =2  #define BAR_VAL       0xfe
 680      =2  #define NUM_VAL       0xff
 681      =2  
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 73  

 682      =2  #define CAMNumberChoice     0xa3 
 683      =2  #define PelcoChoice         0xa4
 684      =2  #define Baud_rateChoice   0xa5
 685      =2  
 686      =2  
 687      =2  #endif  // __OSDMENU__
 688      =2  
   4      =1  //*****************************************************************************
   5      =1  //
   6      =1  //           OSD Window Initialization Table
   7      =1  //
   8      =1  //*****************************************************************************
   9      =1  //=============================================================================
  10      =1  //      Initialize Window for DisplayLogo "Techwell"
  11      =1  //=============================================================================
  12      =1  CODE BYTE Init_Osd_DisplayLogo[] = {
  13      =1  
  14      =1    17,
  15      =1    OSD_Win_Num       ( TECHWELLOGO_OSDWIN ), // 2 bytes
  16      =1    OSD_Win_Attr      ( WIN_BG_COLOR_EX0 | BG_COLOR_BLACK | WIN_3D_TYPE0 | WIN_3D_EN0 | WIN_EN0 ),
  17      =1    OSD_Win_Start     ( ((PHR_-12*12*LOGO_ZOOM)/2), ((PVR_-18*2*WINZOOMx2)/2)), // 3 bytes
  18      =1    OSD_Win_Width     ( 12 ),
  19      =1    OSD_Win_Height      ( 2 ),
  20      =1    OSD_Win_Border      ( WIN_BD_EN0 | BG_COLOR_WHITE | WIN_BD_WIDTH(0) ),
  21      =1    OSD_Win_HBorder     ( WIN_BD_COLOR_EX0 | WIN_H_BD_W(0) ),
  22      =1    OSD_Win_VBorder     ( WIN_V_BD_W(0) ),
  23      =1    OSD_Win_CH_Space    ( WIN_CH_HSPACE(0) | WIN_CH_VSPACE(0) ),
  24      =1    OSD_Win_ZM_SAddr    ( WIN_VZOOM(WINZOOMx2), WIN_HZOOM(LOGO_ZOOM), WIN_SADDR(LOGO_ADDR) ), // 2 bytes
  25      =1    OSD_Win_Shadow      ( WIN_SHADOW_EN0 | BG_COLOR_BLACK | WIN_SHADOW_W(0) ),
  26      =1    OSD_Win_Blending    ( 0x0f ),
  27      =1    OSD_Win_CH_BorderShadow ( WIN_SHADOW_COLOR_EX0 | WIN_MULTI_EN | WIN_V_EXT_EN0 
  29      =1                            | WIN_CH_BDSH_SEL(SEL_BORDER) 
  29      =1                            | WIN_CH_BDSH_COLOR_EX0 | CH_COLOR_BLACK ),
  30      =1  
  31      =1    0 // End of Data
  32      =1  };
  33      =1  //
  34      =1  #ifdef ADD_ANALOGPANEL
           =1 CODE BYTE Init_Osd_DisplayLogo_A[] = {
           =1 
           =1   17,
           =1   OSD_Win_Num       ( TECHWELLOGO_OSDWIN ), // 2 bytes
           =1   OSD_Win_Attr      ( WIN_BG_COLOR_EX0 | BG_COLOR_BLACK | WIN_3D_TYPE0 | WIN_3D_EN0 | WIN_EN0 ),//1
           =1   OSD_Win_Start     ( ((480*2-12*12*WINZOOMx3)/2), ((234-18*2*WINZOOMx2)/2)), // 3 bytes
           =1   OSD_Win_Width     ( 12 ),
           =1   OSD_Win_Height      ( 2 ),
           =1   OSD_Win_Border      ( WIN_BD_EN0 | BG_COLOR_WHITE | WIN_BD_WIDTH(0) ),
           =1   OSD_Win_HBorder     ( WIN_BD_COLOR_EX0 | WIN_H_BD_W(0) ),
           =1   OSD_Win_VBorder     ( WIN_V_BD_W(0) ),
           =1   OSD_Win_CH_Space    ( WIN_CH_HSPACE(0) | WIN_CH_VSPACE(0) ),
           =1   OSD_Win_ZM_SAddr    ( WIN_VZOOM(WINZOOMx2), WIN_HZOOM(WINZOOMx3), WIN_SADDR(LOGO_ADDR) ), // 2 bytes
           =1   OSD_Win_Shadow      ( WIN_SHADOW_EN0 | BG_COLOR_BLACK | WIN_SHADOW_W(0) ),
           =1   OSD_Win_Blending    ( 0x0f ),
           =1   OSD_Win_CH_BorderShadow ( WIN_SHADOW_COLOR_EX0 | WIN_MULTI_EN | WIN_V_EXT_EN0 
           =1                           | WIN_CH_BDSH_SEL(SEL_BORDER) 
           =1                           | WIN_CH_BDSH_COLOR_EX0 | CH_COLOR_BLACK ),
           =1 
           =1   0 // End of Data
           =1 };
           =1 #endif
  57      =1  
  58      =1  //=============================================================================
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 74  

  59      =1  //      Initialize Window for Vchip Rathing
  60      =1  //=============================================================================
  61      =1  CODE BYTE Init_Osd_DisplayVchipWindow[] = {
  62      =1  
  63      =1    17,
  64      =1    OSD_Win_Num       ( BACK_COLOR|RATINGINFO_OSDWIN ), // 2 bytes
  65      =1    OSD_Win_Attr      ( WIN_BG_COLOR_EX0 | BACK_COLOR | WIN_3D_TYPE0 | WIN_3D_EN0 | WIN_EN ),
  66      =1    OSD_Win_Start     ( ((PHR_-12*18*LOGO_ZOOM-18)/2), ((PVR_-18*2*LOGO_ZOOM-8)/2)),  // 3 bytes
  67      =1    OSD_Win_Width     ( 18 ),
  68      =1    OSD_Win_Height      ( 2 ),
  69      =1    OSD_Win_Border      ( WIN_BD_EN | BG_COLOR_WHITE | WIN_BD_WIDTH(1) ),
  70      =1    OSD_Win_HBorder     ( WIN_BD_COLOR_EX0 | WIN_H_BD_W(0x10) ),
  71      =1    OSD_Win_VBorder     ( WIN_V_BD_W(0x08) ),
  72      =1    OSD_Win_CH_Space    ( WIN_CH_HSPACE(0) | WIN_CH_VSPACE(0) ),
  73      =1    OSD_Win_ZM_SAddr    ( WIN_VZOOM(LOGO_ZOOM), WIN_HZOOM(LOGO_ZOOM), WIN_SADDR(RATINGINFO_ADDR) ), // 2 bytes
  74      =1    OSD_Win_Shadow      ( WIN_SHADOW_EN0 | BACK_COLOR | WIN_SHADOW_W(0) ),
  75      =1    OSD_Win_Blending    ( 0x00 ),
  76      =1    OSD_Win_CH_BorderShadow ( WIN_SHADOW_COLOR_EX0 | WIN_MULTI_EN | WIN_V_EXT_EN0 
  78      =1                            | WIN_CH_BDSH_SEL(SEL_BORDER) 
  78      =1                            | WIN_CH_BDSH_COLOR_EX0 | CH_COLOR_BLACK ),
  79      =1  
  80      =1    0 // End of Data
  81      =1  };
  82      =1  
  83      =1  //=============================================================================
  84      =1  //      Initialize Window for DisplayMuteInfo
  85      =1  //=============================================================================
  86      =1  CODE BYTE Init_Osd_DisplayMuteInfo[] = {
  87      =1  
  88      =1    17,
  89      =1    OSD_Win_Num       ( BACK_COLOR|TVINFO_OSDWIN ), // 2 bytes
  90      =1    OSD_Win_Attr      ( WIN_BG_COLOR_EX0 | BG_COLOR_BLACK | WIN_3D_TYPE0 | WIN_3D_EN0 | WIN_EN0 ),
  91      =1    OSD_Win_Start     ( PHR_-12*4*MUTE_ZOOM, 0 ), // 3 bytes
  92      =1    OSD_Win_Width     ( 4 ),
  93      =1    OSD_Win_Height      ( 1 ),
  94      =1    OSD_Win_Border      ( WIN_BD_EN0 | BG_COLOR_WHITE | WIN_BD_WIDTH(0) ),
  95      =1    OSD_Win_HBorder     ( WIN_BD_COLOR_EX0 | WIN_H_BD_W(0) ),
  96      =1    OSD_Win_VBorder     ( WIN_V_BD_W(0x00) ),
  97      =1    OSD_Win_CH_Space    ( WIN_CH_HSPACE(0) | WIN_CH_VSPACE(0) ),
  98      =1    OSD_Win_ZM_SAddr    ( WIN_VZOOM(MUTE_ZOOM), WIN_HZOOM(MUTE_ZOOM), WIN_SADDR(MUTEINFO_ADDR) ), // 2 bytes
  99      =1    OSD_Win_Shadow      ( WIN_SHADOW_EN0 | BG_COLOR_BLACK | WIN_SHADOW_W(0) ),
 100      =1    OSD_Win_Blending    ( 0x0f ),
 101      =1    OSD_Win_CH_BorderShadow ( WIN_SHADOW_COLOR_EX0 | WIN_MULTI_EN | WIN_V_EXT_EN0 
 103      =1                            | WIN_CH_BDSH_SEL(SEL_BORDER) 
 103      =1                            | WIN_CH_BDSH_COLOR_EX0 | CH_COLOR_BLACK ),
 104      =1  
 105      =1    0 // End of Data
 106      =1  };
 107      =1  
 108      =1  //=============================================================================
 109      =1  //      Initialize Window for DisplayTvchannel
 110      =1  //=============================================================================
 111      =1  CODE BYTE Init_Osd_DisplayTVChannel[] = {
 112      =1  
 113      =1    17,
 114      =1    OSD_Win_Num       ( BACK_COLOR|TVINFO_OSDWIN ), // 2 bytes
 115      =1    OSD_Win_Attr      ( WIN_BG_COLOR_EX0 | BG_COLOR_BLACK | WIN_3D_TYPE0 | WIN_3D_EN0 | WIN_EN0 ),
 116      =1    OSD_Win_Start     ( PHR_-12*3*TVCHN_ZOOM, 0 ),  // 3 bytes
 117      =1    OSD_Win_Width     ( 3 ),
 118      =1    OSD_Win_Height      ( 1 ),
 119      =1    OSD_Win_Border      ( WIN_BD_EN0 | BG_COLOR_WHITE | WIN_BD_WIDTH(0) ),
 120      =1    OSD_Win_HBorder     ( WIN_BD_COLOR_EX0 | WIN_H_BD_W(0) ),
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 75  

 121      =1    OSD_Win_VBorder     ( WIN_V_BD_W(0x00) ),
 122      =1    OSD_Win_CH_Space    ( WIN_CH_HSPACE(0) | WIN_CH_VSPACE(0) ),
 123      =1    OSD_Win_ZM_SAddr    ( WIN_VZOOM(TVCHN_ZOOM), WIN_HZOOM(TVCHN_ZOOM), WIN_SADDR(TVCHINFO_ADDR) ), // 2 bytes
 124      =1    OSD_Win_Shadow      ( WIN_SHADOW_EN0 | BG_COLOR_BLACK | WIN_SHADOW_W(0) ),
 125      =1    OSD_Win_Blending    ( 0x0f ),
 126      =1    OSD_Win_CH_BorderShadow ( WIN_SHADOW_COLOR_EX0 | WIN_MULTI_EN | WIN_V_EXT_EN0 
 128      =1                            | WIN_CH_BDSH_SEL(SEL_BORDER) 
 128      =1                            | WIN_CH_BDSH_COLOR_EX0 | CH_COLOR_BLACK ),
 129      =1    0 // End of Data
 130      =1  };
 131      =1  
 132      =1  //=============================================================================
 133      =1  //      Initialize Window for DisplayPCInfo
 134      =1  //=============================================================================
 135      =1  CODE BYTE Init_Osd_DisplayPCInfo[] = {
 136      =1  
 137      =1    17,
 138      =1    OSD_Win_Num       ( BACK_COLOR|PCINFO_OSDWIN ), // 2 bytes
 139      =1    OSD_Win_Attr      ( WIN_BG_COLOR_EX0 | BACK_COLOR | WIN_3D_TYPE0 | WIN_3D_EN0 | WIN_EN0 ),
 140      =1    OSD_Win_Start     ( 12, 13 ), // 3 bytes
 141      =1    OSD_Win_Width     ( 10 ),
 142      =1    OSD_Win_Height      ( 1 ),
 143      =1    OSD_Win_Border      ( WIN_BD_EN | OSDMENU_OUTLINE_COLOR | WIN_BD_WIDTH(1) ),
 144      =1    OSD_Win_HBorder     ( WIN_BD_COLOR_EX0 | WIN_H_BD_W(4) ),
 145      =1    OSD_Win_VBorder     ( WIN_V_BD_W(4) ),
 146      =1    OSD_Win_CH_Space    ( WIN_CH_HSPACE(0) | WIN_CH_VSPACE(0) ),
 147      =1    OSD_Win_ZM_SAddr    ( WIN_VZOOM(PCINFO_ZOOM), WIN_HZOOM(PCINFO_ZOOM), WIN_SADDR(PCMEASUREINFO_ADDR) ),  // 2
             - bytes
 148      =1    OSD_Win_Shadow      ( WIN_SHADOW_EN0 | BG_COLOR_BLACK | WIN_SHADOW_W(0) ),
 149      =1    OSD_Win_Blending    ( 4 ),
 150      =1    OSD_Win_CH_BorderShadow ( WIN_SHADOW_COLOR_EX0 | WIN_MULTI_EN | WIN_V_EXT_EN0 
 152      =1                            | WIN_CH_BDSH_SEL(SEL_BORDER) 
 152      =1                            | WIN_CH_BDSH_COLOR_EX0 | CH_COLOR_BLACK ),
 153      =1  
 154      =1    0 // End of Data
 155      =1  };
 156      =1  
 157      =1  //=============================================================================
 158      =1  //      Initialize Window for DisplayInput
 159      =1  //=============================================================================
 160      =1  CODE BYTE Init_Osd_DisplayInput[] = {
 161      =1  
 162      =1    //----- Input Selection : Zoom 2
 163      =1    17,
 164      =1    OSD_Win_Num       ( BACK_COLOR|INPUTINFO_OSDWIN-1 ),  // 2 bytes
 165      =1    OSD_Win_Attr      ( WIN_BG_COLOR_EX0 | BACK_COLOR | WIN_3D_TYPE0 | WIN_3D_EN0 | WIN_EN0 ),
 166      =1    #ifdef AWT_ML072S
 167      =1    OSD_Win_Start     ( 0/*592*/, 0 ),  // 3 bytes
 168      =1    #else
           =1   OSD_Win_Start     ( 22, 13 ), // 3 bytes
           =1   #endif
 171      =1  #ifdef QUAD 
           =1   OSD_Win_Width     ( 15/*19*/ ),
           =1 #else
 174      =1      //#ifdef AWT_ML072S
 175      =1      //OSD_Win_Width     ( 16 ),
 176      =1      //#else
 177      =1      OSD_Win_Width     ( 33/*19*/ ),
 178      =1      //#endif
 179      =1  #endif
 180      =1  
 181      =1  #ifdef AWT_ML072Q  //Pinchi 20140922 add for AWT ML072Q
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 76  

           =1   OSD_Win_Height      ( 2),
           =1 #else
 184      =1    OSD_Win_Height      ( 1),//ryan@20171206
 185      =1  #endif
 186      =1    OSD_Win_Border      ( WIN_BD_EN0 | OSDMENU_OUTLINE_COLOR | WIN_BD_WIDTH(1) ),
 187      =1    OSD_Win_HBorder     ( WIN_BD_COLOR_EX0 | WIN_H_BD_W(1) ),
 188      =1    OSD_Win_VBorder     ( WIN_V_BD_W(0x00) ),
 189      =1    OSD_Win_CH_Space    ( WIN_CH_HSPACE(0) | WIN_CH_VSPACE(0) ),
 190      =1  #ifdef AWT_ML072Q  //Pinchi 20140922 add for AWT ML072Q
           =1   OSD_Win_ZM_SAddr    ( WIN_VZOOM(INPUTINFO_ZOOM), WIN_HZOOM(WINZOOMx2), WIN_SADDR(INPUTINFO_ADDR) ), // 2 by
             -tes
           =1 #else
 193      =1    OSD_Win_ZM_SAddr    ( WIN_VZOOM(INPUTINFO_ZOOM), WIN_HZOOM(WINZOOMx2), WIN_SADDR(INPUTINFO_ADDR) ), // 2 by
             -tes
 194      =1  #endif
 195      =1    OSD_Win_Shadow      ( WIN_SHADOW_EN0 | BG_COLOR_BLACK | WIN_SHADOW_W(0) ),
 196      =1    OSD_Win_Blending    ( 8 ),
 197      =1    OSD_Win_CH_BorderShadow ( WIN_SHADOW_COLOR_EX0 | WIN_MULTI_EN | WIN_V_EXT_EN0 
 199      =1                            | WIN_CH_BDSH_SEL(SEL_BORDER) 
 199      =1                            | WIN_CH_BDSH_COLOR_EX0 | CH_COLOR_BLACK ),                   
 200      =1    #if 0   //wiilaim-981029
           =1   //----- Input Discription : Zoom 1
           =1   17,
           =1   OSD_Win_Num       ( BACK_COLOR|INPUTINFO_OSDWIN ),  // 2 bytes
           =1   OSD_Win_Attr      ( WIN_BG_COLOR_EX0 | BACK_COLOR | WIN_3D_TYPE0 | WIN_3D_EN0 | WIN_EN0 ),
           =1   OSD_Win_Start     ( 11, 12 ), // 3 bytes
           =1   OSD_Win_Width     ( 0x11 ),
           =1     #ifdef  WQVGA
           =1   OSD_Win_Height      ( 2 ),
           =1     #else
           =1   OSD_Win_Height      ( 3 ),
           =1     #endif
           =1   OSD_Win_Border      ( WIN_BD_EN | OSDMENU_OUTLINE_COLOR | WIN_BD_WIDTH(1) ),
           =1   OSD_Win_HBorder     ( WIN_BD_COLOR_EX0 | WIN_H_BD_W(8) ),
           =1   OSD_Win_VBorder     ( WIN_V_BD_W(0x00) ),
           =1   OSD_Win_CH_Space    ( WIN_CH_HSPACE(0) | WIN_CH_VSPACE(0) ),
           =1   OSD_Win_ZM_SAddr    ( WIN_VZOOM(WINZOOMx1), WIN_HZOOM(WINZOOMx1), WIN_SADDR(INPUTINFO_ADDR) ),  // 2 bytes
           =1   OSD_Win_Shadow      ( WIN_SHADOW_EN0 | BG_COLOR_BLACK | WIN_SHADOW_W(0) ),
           =1   OSD_Win_Blending    ( 4 ),
           =1   OSD_Win_CH_BorderShadow ( WIN_SHADOW_COLOR_EX0 | WIN_MULTI_EN | WIN_V_EXT_EN0 
           =1                           | WIN_CH_BDSH_SEL(SEL_BORDER) 
           =1                           | WIN_CH_BDSH_COLOR_EX0 | CH_COLOR_BLACK ),                       
           =1   #endif
 223      =1    
 224      =1      17,
 225      =1      OSD_Win_Num             ( BACK_COLOR|RATINGINFO_OSDWIN ),   // 2 bytes
 226      =1      OSD_Win_Attr            ( WIN_BG_COLOR_EX0 | BACK_COLOR | WIN_3D_TYPE0 | WIN_3D_EN0 | WIN_EN ),
 227      =1  #ifdef TW8816
 228      =1    #ifdef AWT_ML072S
 229      =1    OSD_Win_Start           ( 45-8,67),  // 120->40   24->        
 230      =1    #else
           =1   OSD_Win_Start           ( 45,60-5),  // 120->40   24->        
           =1       #endif
 233      =1  #else
           =1     OSD_Win_Start           ( 45,60),  // 120->40   24->               
           =1 #endif
 236      =1      OSD_Win_Width           ( 30 ),
 237      =1      OSD_Win_Height          ( 5 ),
 238      =1      OSD_Win_Border          ( WIN_BD_EN | BG_COLOR_WHITE | WIN_BD_WIDTH(0) ),
 239      =1      OSD_Win_HBorder         ( WIN_BD_COLOR_EX0 | WIN_H_BD_W(0x00) ),
 240      =1      OSD_Win_VBorder         ( WIN_V_BD_W(0x00) ),
 241      =1      OSD_Win_CH_Space        ( WIN_CH_HSPACE(0) | WIN_CH_VSPACE(0) ),
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 77  

 242      =1      OSD_Win_ZM_SAddr        ( WIN_VZOOM(WINZOOMx4), WIN_HZOOM(WINZOOMx2), WIN_SADDR(RATINGINFO_ADDR) ), //
             - 2 bytes
 243      =1      OSD_Win_Shadow          ( WIN_SHADOW_EN0 | BACK_COLOR | WIN_SHADOW_W(8) ),//
 244      =1      OSD_Win_Blending        ( 8 ),
 245      =1      OSD_Win_CH_BorderShadow ( WIN_SHADOW_COLOR_EX0 | WIN_MULTI_EN | WIN_V_EXT_EN0 
 247      =1                              | WIN_CH_BDSH_SEL(SEL_BORDER) 
 247      =1                              | WIN_CH_BDSH_COLOR_EX0 | CH_COLOR_BLACK ),
 248      =1  /*
 249      =1    //----- Input Selection : Zoom 4
 250      =1    17,
 251      =1    #ifdef AWT_ML072S
 252      =1    OSD_Win_Num       ( BACK_COLOR|VLOSSINFO_OSDWIN-1 ),  // 2 bytes
 253      =1    #else
 254      =1    OSD_Win_Num       ( BACK_COLOR|DVRStatus_OSDWIN ),  // 2 bytes
 255      =1    #endif
 256      =1    OSD_Win_Attr      ( WIN_BG_COLOR_EX0 | BACK_COLOR | WIN_3D_TYPE0 | WIN_3D_EN0 | WIN_EN0 ),
 257      =1    #ifdef AWT_ML072S
 258      =1    OSD_Win_Start     ( 320,218 ),  // 3 bytes
 259      =1    #else
 260      =1    OSD_Win_Start     ( 12, (PVR_-18*2*BAR_ZOOM)),  // 3 bytes
 261      =1    #endif
 262      =1    OSD_Win_Width     ( 5 ),
 263      =1    OSD_Win_Height      ( 1 ),
 264      =1    OSD_Win_Border      ( WIN_BD_EN0 | OSDMENU_OUTLINE_COLOR | WIN_BD_WIDTH(1) ),
 265      =1    OSD_Win_HBorder     ( WIN_BD_COLOR_EX0 | WIN_H_BD_W(1) ),
 266      =1    OSD_Win_VBorder     ( WIN_V_BD_W(0x00) ),
 267      =1    OSD_Win_CH_Space    ( WIN_CH_HSPACE(0) | WIN_CH_VSPACE(0) ),
 268      =1    #ifdef AWT_ML072S
 269      =1    OSD_Win_ZM_SAddr    ( WIN_VZOOM(WINZOOMx3), WIN_HZOOM(WINZOOMx3), WIN_SADDR(33) ),  // 2 bytes  
 270      =1    #else
 271      =1    OSD_Win_ZM_SAddr    ( WIN_VZOOM(WINZOOMx1), WIN_HZOOM(WINZOOMx1), WIN_SADDR(DVRStatus_ADDR) ),  // 2 bytes
 272      =1    #endif
 273      =1    OSD_Win_Shadow      ( WIN_SHADOW_EN0 | BG_COLOR_BLACK | WIN_SHADOW_W(0) ),
 274      =1    OSD_Win_Blending    ( 8 ),
 275      =1    OSD_Win_CH_BorderShadow ( WIN_SHADOW_COLOR_EX0 | WIN_MULTI_EN | WIN_V_EXT_EN0 
 276      =1                            | WIN_CH_BDSH_SEL(SEL_BORDER) 
 277      =1                            | WIN_CH_BDSH_COLOR_EX0 | CH_COLOR_BLACK ),
 278      =1  */
 279      =1    0 // End of Data
 280      =1  }; 
 281      =1  
 282      =1  //#ifndef QUAD    
 283      =1  #ifdef AWT_ML072Q  //Pinchi 20140925 enable for trigger C display char of AWT ML072Q 
           =1 //=============================================================================
           =1 //      Initialize Window for DisplayInput
           =1 //=============================================================================
           =1 CODE BYTE Init_Osd_DisplayInput_M[] = {
           =1 
           =1   //----- Input Selection : Zoom 2
           =1   17,
           =1   OSD_Win_Num       ( BACK_COLOR|INPUTINFO_OSDWIN-1 ),  // 2 bytes
           =1   OSD_Win_Attr      ( WIN_BG_COLOR_EX0 | BACK_COLOR | WIN_3D_TYPE0 | WIN_3D_EN0 | WIN_EN0 ),
           =1 #ifdef AWT_ML072Q  //Pinchi 20140922 add for AWT ML072Q
           =1   OSD_Win_Start     ( 12 , 12 ),  // 3 bytes
           =1 #else
           =1   OSD_Win_Start     ( 12, 13 ), // 3 bytes
           =1 #endif
           =1 
           =1   OSD_Win_Width     ( 15/*19*/ ),
           =1 #ifdef AWT_ML072Q  //Pinchi 20140922 add for AWT ML072Q
           =1   OSD_Win_Height      ( 2 ),
           =1 #else
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 78  

           =1   OSD_Win_Height      ( 1 ),
           =1 #endif
           =1   OSD_Win_Border      ( WIN_BD_EN0 | OSDMENU_OUTLINE_COLOR | WIN_BD_WIDTH(1) ),
           =1   OSD_Win_HBorder     ( WIN_BD_COLOR_EX0 | WIN_H_BD_W(1) ),
           =1   OSD_Win_VBorder     ( WIN_V_BD_W(0x00) ),
           =1   OSD_Win_CH_Space    ( WIN_CH_HSPACE(0) | WIN_CH_VSPACE(0) ),
           =1 #ifdef AWT_ML072Q  //Pinchi 20140922 add for AWT ML072Q
           =1   OSD_Win_ZM_SAddr    ( WIN_VZOOM(INPUTINFO_ZOOM), WIN_HZOOM(INPUTINFO_ZOOM), WIN_SADDR(INPUTINFO_ADDR) ),  //
             - 2 bytes
           =1 #else
           =1   OSD_Win_ZM_SAddr    ( WIN_VZOOM(INPUTINFO_ZOOM), WIN_HZOOM(WINZOOMx1), WIN_SADDR(INPUTINFO_MIRROR_ADDR) ),  
             -// 2 bytes
           =1 #endif
           =1   OSD_Win_Shadow      ( WIN_SHADOW_EN0 | BG_COLOR_BLACK | WIN_SHADOW_W(0) ),
           =1   OSD_Win_Blending    ( 8 ),
           =1   OSD_Win_CH_BorderShadow ( WIN_SHADOW_COLOR_EX0 | WIN_MULTI_EN | WIN_V_EXT_EN0 
           =1                           | WIN_CH_BDSH_SEL(SEL_BORDER) 
           =1                           | WIN_CH_BDSH_COLOR_EX0 | CH_COLOR_BLACK ),
           =1   0 // End of Data
           =1 };          
           =1 #endif
 322      =1  
 323      =1  #ifdef ADD_ANALOGPANEL
           =1 CODE BYTE Init_Osd_DisplayInput_A[] = {
           =1   //----- Input Selection : Zoom 1
           =1   17,
           =1   OSD_Win_Num       ( BACK_COLOR|INPUTINFO_OSDWIN-1 ),  // 2 bytes
           =1   OSD_Win_Attr      ( WIN_BG_COLOR_EX0 | BACK_COLOR | WIN_3D_TYPE0 | WIN_3D_EN0 | WIN_EN0 ),
           =1   OSD_Win_Start     ( 12, 13 ), // 3 bytes
           =1   OSD_Win_Width     ( 9 ),
           =1   OSD_Win_Height      ( 1 ),
           =1   OSD_Win_Border      ( WIN_BD_EN0 | OSDMENU_OUTLINE_COLOR | WIN_BD_WIDTH(1) ),
           =1   OSD_Win_HBorder     ( WIN_BD_COLOR_EX0 | WIN_H_BD_W(1) ),
           =1   OSD_Win_VBorder     ( WIN_V_BD_W(0x00) ),
           =1   OSD_Win_CH_Space    ( WIN_CH_HSPACE(0) | WIN_CH_VSPACE(0) ),
           =1   OSD_Win_ZM_SAddr    ( WIN_VZOOM(WINZOOMx1), WIN_HZOOM(WINZOOMx2), WIN_SADDR(INPUTINFO_ADDR) ),  // 2 bytes
           =1   OSD_Win_Shadow      ( WIN_SHADOW_EN0 | BG_COLOR_BLACK | WIN_SHADOW_W(0) ),
           =1   OSD_Win_Blending    ( 4 ),
           =1   OSD_Win_CH_BorderShadow ( WIN_SHADOW_COLOR_EX0 | WIN_MULTI_EN | WIN_V_EXT_EN0 
           =1                           | WIN_CH_BDSH_SEL(SEL_BORDER) 
           =1                           | WIN_CH_BDSH_COLOR_EX0 | CH_COLOR_BLACK ),
           =1 
           =1   8,
           =1   OSD_Win_Num       ( BACK_COLOR|INPUTINFO_OSDWIN ),  // 2 bytes
           =1   OSD_Win_Attr      ( WIN_BG_COLOR_EX0 | BACK_COLOR | WIN_3D_TYPE0 | WIN_3D_EN0 | WIN_EN0 ),//1
           =1   OSD_Win_Start     ( 11, 12 ), // 3 bytes
           =1   OSD_Win_Width     ( 0x11 ),
           =1   OSD_Win_Height      ( 2 ),
           =1   0
           =1 };
           =1 #endif
 352      =1  
 353      =1  #ifdef SUPPORT_2835_CLK_TUNE_BACK_DOOR  //Pinchi 20160929 add
 354      =1  CODE BYTE Init_Osd_DisplayInput_B[] = {
 355      =1      //----- Input Selection : Zoom 1
 356      =1      17,
 357      =1      OSD_Win_Num             ( BACK_COLOR|INPUTINFO_OSDWIN-1 ),  // 2 bytes
 358      =1      OSD_Win_Attr            ( WIN_BG_COLOR_EX0 | BACK_COLOR | WIN_3D_TYPE0 | WIN_3D_EN0 | WIN_EN0 ),
 359      =1      OSD_Win_Start           ( 10, 5 ), // 3 bytes
 360      =1      OSD_Win_Width           ( 2 ),
 361      =1      OSD_Win_Height          ( 1 ),
 362      =1      OSD_Win_Border          ( WIN_BD_EN0 | OSDMENU_OUTLINE_COLOR | WIN_BD_WIDTH(1) ),
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 79  

 363      =1      OSD_Win_HBorder         ( WIN_BD_COLOR_EX0 | WIN_H_BD_W(1) ),
 364      =1      OSD_Win_VBorder         ( WIN_V_BD_W(0x00) ),
 365      =1      OSD_Win_CH_Space        ( WIN_CH_HSPACE(0) | WIN_CH_VSPACE(0) ),
 366      =1      OSD_Win_ZM_SAddr        ( WIN_VZOOM(WINZOOMx2), WIN_HZOOM(WINZOOMx2), WIN_SADDR(INPUTINFO_ADDR) ),  //
             - 2 bytes
 367      =1      OSD_Win_Shadow          ( WIN_SHADOW_EN0 | BG_COLOR_BLACK | WIN_SHADOW_W(0) ),
 368      =1      OSD_Win_Blending        ( 8 ),
 369      =1      OSD_Win_CH_BorderShadow ( WIN_SHADOW_COLOR_EX0 | WIN_MULTI_EN | WIN_V_EXT_EN0 
 371      =1                              | WIN_CH_BDSH_SEL(SEL_BORDER) 
 371      =1                              | WIN_CH_BDSH_COLOR_EX0 | CH_COLOR_BLACK ),
 372      =1      0
 373      =1  };
 374      =1  #endif
 375      =1  
 376      =1  //=============================================================================
 377      =1  //      Initialize Window for MainMenu
 378      =1  //=============================================================================
 379      =1  #if (defined ADD_ANALOGPANEL)
           =1  #define OSDHSTART_MAX_A (480-(12+1)*25 - 56*2 -4)  //PHR - (pixelsize +Hspace)*MenuWidth - Hborder*2 - ou
             -tlinewidth*2
           =1  #define OSDVSTART_MAX_A (234-(18+11)*9 - 5*2 ) //  PVR - (Linesize+Vspace)*MENU_HEIGHT - Vborder*2  - out
             -linewidth*2
           =1 CODE BYTE Init_Osd_MainMenu_A[] = {
           =1             #include "data\MenuWindow_A.txt" 
           =1 };
           =1 #endif
 386      =1  
 387      =1  #if ((defined WQVGA) && ((defined ANALOG_7INCH)||(defined TMD_ANALOG)))// || (defined QVGA) 
           =1  #define OSDHSTART_MAX_A (480-(12+2)*25 - 56*2 +40) //OSDHSTART_MAX  //PHR - (pixelsize +Hspace)*MenuWidth
             - - Hborder*2 - outlinewidth*2
           =1  #define OSDVSTART_MAX_A OSDVSTART_MAX  //  PVR - (Linesize+Vspace)*MENU_HEIGHT - Vborder*2  - outlinewidt
             -h*2
           =1 
           =1 CODE BYTE Init_Osd_MainMenu[] = {
           =1             #include "data\MenuWindow_A.txt" 
           =1 };
           =1 #elif (defined QVGA) && (defined SHARP_LQ050Q5DR01)
           =1  #define OSDHSTART_MAX_A (480-(12+2)*25 - 56*2 -8-10) //OSDHSTART_MAX  //PHR - (pixelsize +Hspace)*MenuWid
             -th - Hborder*2 - outlinewidth*2
           =1  #define OSDVSTART_MAX_A OSDVSTART_MAX  //  PVR - (Linesize+Vspace)*MENU_HEIGHT - Vborder*2  - outlinewidt
             -h*2
           =1 
           =1 CODE BYTE Init_Osd_MainMenu[] = {
           =1             #include "data\MenuWindow_A.txt" 
           =1 };
           =1 #else
 402      =1  CODE BYTE Init_Osd_MainMenu[] = {
 403      =1  //            #include "data\MenuWindow.txt" 
 404      =1  /*===========================================================================*/
 405      =1  // Normal Panel Menu Window tabel
 406      =1  /*===========================================================================*/
 407      =1    ///////////////////----- Top(Left) Window
 408      =1    17,
 409      =1    OSD_Win_Num       ( BACK_COLOR|OSDMENU_TOPWIN ),  // 2 bytes
 410      =1    OSD_Win_Attr      ( WIN_BG_COLOR_EX0 | BACK_COLOR | WIN_3D_TYPE0 | WIN_3D_EN0 | WIN_EN0 ),
 411      =1    
 412      =1  //OSD_Win_Attr        ( WIN_BG_COLOR_EX0 | TITLE_BACK_COLOR | WIN_3D_TYPE0 | WIN_3D_EN0 | WIN_EN0 ),
 413      =1  #ifdef E_Wintek
           =1   OSD_Win_Start     ( (OSDHSTART_MAX/2-145), ((OSDVSTART_MAX/2)-80) ), // 3 bytes
           =1 #else
 416      =1    #ifdef HS_NEWOSDMENU
           =1   OSD_Win_Start     ( (OSDHSTART_MAX/2-85), ((OSDVSTART_MAX/2)-84) ), // 3 bytes
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 80  

           =1   #else 
 419      =1    #ifdef TW8816
 420      =1         #ifdef AWT_ML072S
 421      =1      OSD_Win_Start     ( (0x7c), (0x09)), // 3 bytes
 422      =1       #else
           =1     OSD_Win_Start     ( (0x40/*0x50*/), (0x09)), // 3 bytes
           =1     #endif
 425      =1    #else
           =1     OSD_Win_Start     ( (OSDHSTART_MAX/2-145), ((OSDVSTART_MAX/2-60))), // 3 bytes
           =1   #endif      
 428      =1   #endif
 429      =1  #endif
 430      =1  #ifdef HS_NEWOSDMENU
           =1   OSD_Win_Width     ( 13 ),
           =1   OSD_Win_Height      ( 1 ),
           =1 #else
 434      =1    OSD_Win_Width     ( 2 ),
 435      =1    #ifdef TW8816
 436      =1    OSD_Win_Height      ( 4 ),
 437      =1    #else
           =1   OSD_Win_Height      ( 5 ),
           =1   #endif
 440      =1  #endif
 441      =1  #ifdef HS_NEWOSDMENU
           =1   OSD_Win_Border      ( WIN_BD_EN | OSDMENU_OUTLINE_COLOR | WIN_BD_WIDTH(1) ),
           =1   OSD_Win_HBorder     ( WIN_BD_COLOR_EX | WIN_H_BD_W(0x00) ),
           =1   OSD_Win_VBorder     ( WIN_V_BD_W(0x00) ),
           =1   OSD_Win_CH_Space    ( WIN_CH_HSPACE(0) | WIN_CH_VSPACE(0x00) ),
           =1   //OSD_Win_Border      ( WIN_BD_EN | OSDMENU_OUTLINE_COLOR | WIN_BD_WIDTH(1) ),
           =1   //OSD_Win_HBorder     (0),
           =1   //OSD_Win_VBorder     (0),
           =1   //OSD_Win_CH_Space      (0),
           =1 #else
 451      =1    OSD_Win_Border      ( WIN_BD_EN | OSDMENU_OUTLINE_COLOR | WIN_BD_WIDTH(1) ),
 452      =1    OSD_Win_HBorder     ( WIN_BD_COLOR_EX0 | WIN_H_BD_W(0) ),
 453      =1    #ifdef TW8816
 454      =1    OSD_Win_VBorder     ( WIN_V_BD_W(0x05/*0x08*/) ),
 455      =1    OSD_Win_CH_Space    ( WIN_CH_HSPACE(0) | WIN_CH_VSPACE(0x0b/*0x09*/) ),
 456      =1    #else
           =1   OSD_Win_VBorder     ( WIN_V_BD_W(0) ),
           =1   OSD_Win_CH_Space    ( WIN_CH_HSPACE(0) | WIN_CH_VSPACE(0x02) ),
           =1   #endif
 460      =1  #endif  
 461      =1  #ifdef E_Wintek 
           =1   OSD_Win_ZM_SAddr    ( WIN_VZOOM(WINZOOMx4), WIN_HZOOM(WINZOOMx4), WIN_SADDR(OSDMENU_MAINADDR) ),  // 2 bytes
           =1 #else
 464      =1    #ifdef HS_NEWOSDMENU
           =1   OSD_Win_ZM_SAddr    ( WIN_VZOOM(WINZOOMx4), WIN_HZOOM(WINZOOMx4), WIN_SADDR(OSDMENU_MAINADDR) ),
           =1   #else
 467      =1    OSD_Win_ZM_SAddr    ( WIN_VZOOM(WINZOOMx4), WIN_HZOOM(WINZOOMx3), WIN_SADDR(OSDMENU_MAINADDR) ),  // 2 byte
             -s
 468      =1    #endif
 469      =1  #endif
 470      =1    OSD_Win_Shadow      ( WIN_SHADOW_EN0 | BG_COLOR_BLACK | WIN_SHADOW_W(4) ),
 471      =1    OSD_Win_Blending    ( 0x33/*0x36*/ ),//( 3 ),
 472      =1    OSD_Win_CH_BorderShadow ( WIN_SHADOW_COLOR_EX0 | WIN_MULTI_EN | WIN_V_EXT_EN0 
 474      =1                            | WIN_CH_BDSH_SEL(SEL_BORDER) 
 474      =1                            | WIN_CH_BDSH_COLOR_EX0 | CH_COLOR_BLACK ),
 475      =1  
 476      =1  #ifdef HS_NEWOSDMENU_2  //Pinchi modify condition for compiler warning
           =1   #ifdef HS_NEWOSDMENU
           =1   /////////////////////////////////////----- Title Window
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 81  

           =1   17,                           
           =1   OSD_Win_Num         ( BACK_COLOR|OSDMENU_TITLEWIN ),  // 2 bytes
           =1   #if 1 
           =1   OSD_Win_Attr        ( WIN_BG_COLOR_EX0 | TITLE_BACK_COLOR | WIN_3D_TYPE0 | WIN_3D_EN0 | WIN_EN0 ),
           =1   #else 
           =1   OSD_Win_Attr        ( WIN_BG_COLOR_EX0 | DEFAULT_COLOR | WIN_3D_TYPE0 | WIN_3D_EN0 | WIN_EN0 ),
           =1   #endif  
           =1 
           =1   OSD_Win_Start       ( ((OSDHSTART_MAX/2)+66+14+2), ((OSDVSTART_MAX/2)-60) ), // 3 bytes
           =1   OSD_Win_Width       ( 13 ), 
           =1   OSD_Win_Height        ( 1 ), 
           =1   OSD_Win_Border        ( WIN_BD_EN0 | OSDMENU_OUTLINE_COLOR | WIN_BD_WIDTH(2) ),
           =1   OSD_Win_HBorder       ( WIN_BD_COLOR_EX | WIN_H_BD_W(0x30+8) ),
           =1   OSD_Win_VBorder       ( WIN_V_BD_W(0x05) ),
           =1   OSD_Win_CH_Space      ( WIN_CH_HSPACE(1) | WIN_CH_VSPACE(0x0b) ),
           =1 
           =1   #ifdef TW8816
           =1   OSD_Win_ZM_SAddr      ( WIN_VZOOM(WINZOOMx1), WIN_HZOOM(WINZOOMx1), WIN_SADDR(OSDMENU_SUBADDR) ), //Weylis
           =1   #else
           =1   OSD_Win_ZM_SAddr      ( WIN_VZOOM(WINZOOMx1), WIN_HZOOM(WINZOOMx2), WIN_SADDR(OSDMENU_SUBADDR) ), //25=MENU_
             -WIDTH
           =1   #endif
           =1 
           =1   OSD_Win_Shadow        ( WIN_SHADOW_EN0 | BG_COLOR_BLACK | WIN_SHADOW_W(8) ),
           =1   //OSD_Win_Blending        ( 3 ),
           =1   OSD_Win_Blending      ( 0x05 ),
           =1   OSD_Win_CH_BorderShadow   ( WIN_SHADOW_COLOR_EX0 | WIN_MULTI_EN | WIN_V_EXT_EN0 | WIN_CH_BDSH_SEL(SEL_BORD
             -ER) | 
           =1                   WIN_CH_BDSH_COLOR_EX0 | CH_COLOR_BLACK ),
           =1   //----- Sub(Right) Window
           =1   #else
           =1   /*
           =1   //----- Title Window
           =1   17,
           =1   OSD_Win_Num       ( BACK_COLOR|OSDMENU_TITLEWIN ),  // 2 bytes
           =1   OSD_Win_Attr      ( WIN_BG_COLOR_EX0 | TITLE_BACK_COLOR | WIN_3D_TYPE0 | WIN_3D_EN0 | WIN_EN0 ),
           =1   OSD_Win_Start     ( (OSDHSTART_MAX/2), (OSDVSTART_MAX/2) ), // 3 bytes
           =1   OSD_Win_Width     ( TITLE_MAX_DESC ), 
           =1   OSD_Win_Height      ( 0x09 ), 
           =1   OSD_Win_Border      ( WIN_BD_EN | OSDMENU_OUTLINE_COLOR | WIN_BD_WIDTH(2) ),
           =1   OSD_Win_HBorder     ( WIN_BD_COLOR_EX | WIN_H_BD_W(0x30+8) ),
           =1   OSD_Win_VBorder     ( WIN_V_BD_W(0x05) ),
           =1   OSD_Win_CH_Space    ( WIN_CH_HSPACE(1) | WIN_CH_VSPACE(0x0b) ),
           =1   OSD_Win_ZM_SAddr    ( WIN_VZOOM(WINZOOMx1), WIN_HZOOM(WINZOOMx1), WIN_SADDR(OSDMENU_SUBADDR) ), //25=MENU_W
             -IDTH// 2 bytes
           =1   OSD_Win_Shadow      ( WIN_SHADOW_EN0 | BG_COLOR_BLACK | WIN_SHADOW_W(8) ),
           =1   OSD_Win_Blending    ( 3 ),
           =1   OSD_Win_CH_BorderShadow ( WIN_SHADOW_COLOR_EX0 | WIN_MULTI_EN | WIN_V_EXT_EN0 
           =1                           | WIN_CH_BDSH_SEL(SEL_BORDER) 
           =1                           | WIN_CH_BDSH_COLOR_EX0 | CH_COLOR_BLACK ),
           =1 */                          
           =1   #endif
           =1 #endif
 529      =1  
 530      =1    ////////////////////////////////////----- Sub(Right) Window
 531      =1    17,
 532      =1    OSD_Win_Num       ( BACK_COLOR|OSDMENUWINDOW ), // 2 bytes
 533      =1    OSD_Win_Attr      ( WIN_BG_COLOR_EX0 | BACK_COLOR | WIN_3D_TYPE0 | WIN_3D_EN0 | WIN_EN0 ),
 534      =1  #ifdef E_Wintek
           =1   OSD_Win_Start     ( ((OSDHSTART_MAX/2-145)), (OSDVSTART_MAX/2-60) ), // 3 bytes
           =1 #else
 537      =1    #ifdef TW8816
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 82  

 538      =1  //  OSD_Win_Start     ( ((0x76)), (0x09) ), // 3 bytes//( ((OSDHSTART_MAX/2-85)), (OSDVSTART_MAX/2-10) ), // 
             -3 bytes
 539      =1  #ifdef AWT_ML072S
 540      =1    OSD_Win_Start     ( (0xC0), (0x09) ),
 541      =1  #else
           =1   //OSD_Win_Start     ( ((OSDHSTART_MAX/2-45)), (OSDVSTART_MAX/2-60) ), // 3 bytes//( ((OSDHSTART_MAX/2-85)),
             - (OSDVSTART_MAX/2-10) ), // 3 bytes
           =1   OSD_Win_Start     ( (0x8a/*0x9a*//*(0xb0)*/), (0x09) ), // 3 bytes//( ((OSDHSTART_MAX/2-85)), (OSDVSTART_MA
             -X/2-10) ), // 3 bytes
           =1 
           =1 #endif
 546      =1    #else
           =1   OSD_Win_Start     ( ((OSDHSTART_MAX/2-45)), (OSDVSTART_MAX/2-60) ), // 3 bytes//( ((OSDHSTART_MAX/2-85)), (
             -OSDVSTART_MAX/2-10) ), // 3 bytes
           =1   #endif
 549      =1    //OSD_Win_Start     ( ((OSDHSTART_MAX/2)+66+14+2), (OSDVSTART_MAX/2+28) ), // 3 bytes
 550      =1  #endif
 551      =1    OSD_Win_Width     ( MENU_WIDTH  ), //MENU_WIDTH
 552      =1    OSD_Win_Height      ( MENU_HEIGHT ),  // MENU_HEIGHT
 553      =1    #ifdef TW8816
 554      =1    OSD_Win_Border      ( WIN_BD_EN | OSDMENU_OUTLINE_COLOR | WIN_BD_WIDTH(0) ),
 555      =1    #else
           =1   OSD_Win_Border      ( WIN_BD_EN | OSDMENU_OUTLINE_COLOR | WIN_BD_WIDTH(1) ),
           =1   #endif
 558      =1    //OSD_Win_HBorder     ( WIN_BD_COLOR_EX | WIN_H_BD_W(0x0c+8) ),
 559      =1    #ifdef TW8816
 560      =1    OSD_Win_HBorder     ( WIN_BD_COLOR_EX | WIN_H_BD_W(0x0A) ),
 561      =1    #else
           =1   OSD_Win_HBorder     ( WIN_BD_COLOR_EX | WIN_H_BD_W(0x0A+8) ),
           =1   #endif
 564      =1  
 565      =1    #ifdef TW8816
 566      =1    OSD_Win_VBorder     ( WIN_V_BD_W(0x05) ),
 567      =1    OSD_Win_CH_Space    ( WIN_CH_HSPACE(0) | WIN_CH_VSPACE(0x0b) ),
 568      =1    #else
           =1   OSD_Win_VBorder     ( WIN_V_BD_W(0x16+1) ),
           =1   OSD_Win_CH_Space    ( WIN_CH_HSPACE(0) | WIN_CH_VSPACE(0x04) ),
           =1   #endif
 572      =1    
 573      =1  #ifdef E_Wintek 
           =1   OSD_Win_ZM_SAddr    ( WIN_VZOOM(WINZOOMx2), WIN_HZOOM(WINZOOMx2), WIN_SADDR(OSDMENU_SUBADDR+MENU_WIDTH) ),  
             -//25=MENU_WIDTH// 2 bytes
           =1 #else
 576      =1    OSD_Win_ZM_SAddr    ( WIN_VZOOM(WINZOOMx2), WIN_HZOOM(WINZOOMx2), WIN_SADDR(OSDMENU_SUBADDR+MENU_WIDTH) ),  
             -//25=MENU_WIDTH// 2 bytes
 577      =1  #endif
 578      =1    OSD_Win_Shadow      ( WIN_SHADOW_EN0 | BG_COLOR_BLACK | WIN_SHADOW_W(8) ),
 579      =1    OSD_Win_Blending    ( 0x33/*0x36*/ ),//( 3 ),
 580      =1  
 581      =1  
 582      =1    OSD_Win_CH_BorderShadow ( WIN_SHADOW_COLOR_EX0 | WIN_MULTI_EN | WIN_V_EXT_EN0 
 584      =1                            | WIN_CH_BDSH_SEL(SEL_BORDER) 
 584      =1                            | WIN_CH_BDSH_COLOR_EX0 | CH_COLOR_BLACK ),
 585      =1  
 586      =1    //----- 3D Cursor Window
 587      =1    17,
 588      =1    OSD_Win_Num       ( BACK_COLOR|OSDCURSORWINDOW ), // 2 bytes
 589      =1    OSD_Win_Attr      ( WIN_BG_COLOR_EX | BACK_COLOR | WIN_3D_TYPE0 | WIN_3D_EN | WIN_EN0 ),
 590      =1  #ifdef E_Wintek
           =1   OSD_Win_Start     ( ((OSDHSTART_MAX/2)-145+8), ((OSDVSTART_MAX/2)-80)+10 ), // 3 bytes
           =1 #else
 593      =1  #ifdef HS_NEWOSDMENU
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 83  

           =1   OSD_Win_Start     ( (OSDHSTART_MAX/2-85), ((OSDVSTART_MAX/2)-84) ), // 3 bytes
           =1 #else 
 596      =1      #ifdef TW8816
 597      =1         #ifdef AWT_ML072S
 598      =1        OSD_Win_Start     ( (0x7c), ((0x27-9) )), // 3 bytes   
 599      =1         #else
           =1       OSD_Win_Start     ( (0x40/*0x50*/), ((0x27) )), // 3 bytes
           =1       #endif
 602      =1      #else
           =1     OSD_Win_Start     ( (OSDHSTART_MAX/2-145), ((OSDVSTART_MAX/2-60) )), // 3 bytes
           =1     #endif
 605      =1  #endif  
 606      =1  #endif
 607      =1    OSD_Win_Width     ( 2 ),
 608      =1    OSD_Win_Height      ( 1 ),
 609      =1    OSD_Win_Border      ( WIN_BD_EN | BG_COLOR_WHITE | WIN_BD_WIDTH(1) ),
 610      =1    OSD_Win_HBorder     ( WIN_BD_COLOR_EX0 | WIN_H_BD_W(0) ),
 611      =1  
 612      =1    #ifdef TW8816
 613      =1         OSD_Win_VBorder      ( WIN_V_BD_W(0) ),
 614      =1         OSD_Win_CH_Space   ( WIN_CH_HSPACE(0) | WIN_CH_VSPACE(0x00) ),
 615      =1    #else
           =1        OSD_Win_VBorder      ( WIN_V_BD_W(0) ),
           =1        OSD_Win_CH_Space   ( WIN_CH_HSPACE(0) | WIN_CH_VSPACE(0x10) ),
           =1   #endif
 619      =1  
 620      =1  #ifdef E_Wintek
           =1   OSD_Win_ZM_SAddr    ( WIN_VZOOM(WINZOOMx4), WIN_HZOOM(WINZOOMx4), WIN_SADDR(OSDMENU_MAINADDR) ),  // 2 bytes
           =1 #else
 623      =1    OSD_Win_ZM_SAddr    ( WIN_VZOOM(WINZOOMx4), WIN_HZOOM(WINZOOMx3), WIN_SADDR(OSDMENU_MAINADDR) ),  // 2 byte
             -s
 624      =1  #endif
 625      =1    OSD_Win_Shadow      ( WIN_SHADOW_EN0 | BG_COLOR_BLACK | WIN_SHADOW_W(0) ),
 626      =1    OSD_Win_Blending    ( 0x33/*0x36*/ ),//( 3 ),
 627      =1    OSD_Win_CH_BorderShadow ( WIN_SHADOW_COLOR_EX | WIN_MULTI_EN | WIN_V_EXT_EN0 
 629      =1                            | WIN_CH_BDSH_SEL(SEL_SHADOW) 
 629      =1                            | WIN_CH_BDSH_COLOR_EX0 | CH_COLOR_BLACK ),
 630      =1  
 631      =1    0 // End of Data
 632      =1  /*===========================================================================*/
 633      =1  };
 634      =1  
 635      =1  #endif
 636      =1  
 637      =1  CODE BYTE Init_Osd_BarWindow[] = {
 638      =1  
 639      =1    //----- Bar/Message Window
 640      =1    17,
 641      =1    OSD_Win_Num       ( BACK_COLOR|OSDBARWINDOW  ), // 2 bytes
 642      =1    OSD_Win_Attr      ( WIN_BG_COLOR_EX0 | BACK_COLOR | WIN_3D_TYPE | WIN_3D_EN | WIN_EN0 ),
 643      =1    #ifdef TW8816
 644      =1    OSD_Win_Start     ( (0x90), (0x160) ),  // 3 bytes
 645      =1    #else
           =1   OSD_Win_Start     ( ((PHR_-12*25*BAR_ZOOM)/2), (PVR_-18*2*BAR_ZOOM-26) ), // 3 bytes
           =1   #endif
 648      =1    #ifdef TW8816
 649      =1    OSD_Win_Width     ( 21),
 650      =1    OSD_Win_Height      ( 2 ),
 651      =1    OSD_Win_Border      ( WIN_BD_EN | BG_COLOR_MASK | WIN_BD_WIDTH(1) ),
 652      =1    #else
           =1   OSD_Win_Width     ( 25 ),
           =1   OSD_Win_Height      ( 2 ),
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 84  

           =1   OSD_Win_Border      ( WIN_BD_EN | OSDMENU_OUTLINE_COLOR | WIN_BD_WIDTH(1) ),
           =1   #endif
 657      =1    OSD_Win_HBorder     ( WIN_BD_COLOR_EX0 | WIN_H_BD_W(2) ),
 658      =1    OSD_Win_VBorder     ( WIN_V_BD_W(4) ),
 659      =1    OSD_Win_CH_Space    ( WIN_CH_HSPACE(0) | WIN_CH_VSPACE(4) ),
 660      =1    OSD_Win_ZM_SAddr    ( WIN_VZOOM(BAR_ZOOM), WIN_HZOOM(BAR_ZOOM), WIN_SADDR(OSDMENU_BARADDR) ), // 2 bytes
 661      =1    OSD_Win_Shadow      ( WIN_SHADOW_EN0 | BG_COLOR_BLACK | WIN_SHADOW_W(0) ),
 662      =1  #ifdef TW8816
 663      =1    OSD_Win_Blending    ( 0x33 ),//( 5 ),
 664      =1  #else
           =1   OSD_Win_Blending    ( 0x36 ),//( 5 ),
           =1 #endif  
 667      =1    OSD_Win_CH_BorderShadow ( WIN_SHADOW_COLOR_EX | WIN_MULTI_EN | WIN_V_EXT_EN0 
 669      =1                            | WIN_CH_BDSH_SEL(SEL_BORDER) 
 669      =1                            | WIN_CH_BDSH_COLOR_EX0 | CH_COLOR_BLUE ),
 670      =1  
 671      =1    0 // End of Data
 672      =1  };
 673      =1  
1013          
1014          void InitOSDWindow(BYTE *ptr)
1015          {
1016   1        BYTE i, page;
1017   1      
1018   1        page = ReadTW88(0xff);
1019   1        WriteTW88( 0xff, (page&0xfe));
1020   1        //delay(2);   //Weylis 120307 for test
1021   1        WriteTW88(0xe0, ReadTW88(0xe0) & 0xef);
1022   1      
1023   1          i = 0;
1024   1          while(ptr[i]) {
1025   2          WriteI2Cn_(TW88I2CAddress, &ptr[i+1], ptr[i]);
1026   2          WriteI2Cn_(TW88I2CAddress, &ptr[i+1], 5);   // To set position LSB...
1027   2          //Printf("\r\nAddress=%02x,data=%02x",&ptr[i+1],ptr[i]);
1028   2              i += ptr[i] + 1;
1029   2          };
1030   1      
1031   1        WriteTW88(0xe0, ReadTW88(0xe0) | 0x10);
1032   1        WriteTW88( 0xff, page );
1033   1      }
1034          
1035          
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 85  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com0067 (BEGIN)
0000         L?0104:
0000         L?0105:
0000 ED                MOV     A,R5
0001 F0                MOVX    @DPTR,A
0002         L?0106:
0002 EF                MOV     A,R7
0003 FD                MOV     R5,A
0004 7C00              MOV     R4,#00H
0006 C3                CLR     C
0007 9401              SUBB    A,#01H
0009 7480              MOV     A,#080H
000B 9480              SUBB    A,#080H
000D 22                RET     
000E         L?0107:
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 25E0              ADD     A,ACC
0012 2400        R     ADD     A,#LOW FontTestWindow
0014 F582              MOV     DPL,A
0016 E4                CLR     A
0017 3400        R     ADDC    A,#HIGH FontTestWindow
0019 F583              MOV     DPH,A
001B E4                CLR     A
001C 93                MOVC    A,@A+DPTR
001D FD                MOV     R5,A
001E EF                MOV     A,R7
001F 25E0              ADD     A,ACC
0021 2400        R     ADD     A,#LOW FontTestWindow+01H
0023 F582              MOV     DPL,A
0025 E4                CLR     A
0026 3400        R     ADDC    A,#HIGH FontTestWindow+01H
0028 F583              MOV     DPH,A
002A E4                CLR     A
002B 93                MOVC    A,@A+DPTR
002C FB                MOV     R3,A
002D 7F8A              MOV     R7,#08AH
002F 22                RET     
0030         L?0108:
0030 900000      R     MOV     DPTR,#str
0033         L?0109:
0033 FF                MOV     R7,A
0034         L?0110:
0034 E4                CLR     A
0035 75F001            MOV     B,#01H
0038 120000      E     LCALL   ?C?PLDIXDATA
003B EF                MOV     A,R7
003C 020000      E     LJMP    ?C?CSTPTR
003F         L?0111:
003F         L?0112:
003F D3                SETB    C
0040 ED                MOV     A,R5
0041         L?0113:
0041 9408              SUBB    A,#08H
0043 7480              MOV     A,#080H
0045 9480              SUBB    A,#080H
0047 22                RET     
0048         L?0115:
0048         L?0116:
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 86  

0048 900000      R     MOV     DPTR,#value
004B E0                MOVX    A,@DPTR
004C FE                MOV     R6,A
004D A3                INC     DPTR
004E E0                MOVX    A,@DPTR
004F FF                MOV     R7,A
0050 22                RET     
0051         L?0117:
0051         L?0118:
0051 EF                MOV     A,R7
0052 14                DEC     A
0053 FB                MOV     R3,A
0054 7D9E              MOV     R5,#09EH
0056 7F8A              MOV     R7,#08AH
0058 22                RET     
0059         L?0119:
0059 900000      R     MOV     DPTR,#ptr
005C 120000      E     LCALL   ?C?PLDXDATA
005F 900000      R     MOV     DPTR,#i
0062 E0                MOVX    A,@DPTR
0063 F582              MOV     DPL,A
0065 758300            MOV     DPH,#00H
0068 020000      E     LJMP    ?C?CLDOPTR
006B         L?0121:
006B E0                MOVX    A,@DPTR
006C A4                MUL     AB
006D FF                MOV     R7,A
006E A3                INC     DPTR
006F E5F0              MOV     A,B
0071 F0                MOVX    @DPTR,A
0072 A3                INC     DPTR
0073 EF                MOV     A,R7
0074 F0                MOVX    @DPTR,A
0075 7DA0              MOV     R5,#0A0H
0077 7F8A              MOV     R7,#08AH
0079 22                RET     
007A         L?0123:
007A         L?0124:
007A 900000      R     MOV     DPTR,#div
007D E0                MOVX    A,@DPTR
007E FC                MOV     R4,A
007F A3                INC     DPTR
0080 E0                MOVX    A,@DPTR
0081 FD                MOV     R5,A
0082 22                RET     
0083         L?0127:
0083         L?0128:
0083 EE                MOV     A,R6
0084 F0                MOVX    @DPTR,A
0085 A3                INC     DPTR
0086 EF                MOV     A,R7
0087 F0                MOVX    @DPTR,A
0088 A3                INC     DPTR
0089 22                RET     
008A         L?0129:
008A 120000      E     LCALL   ?C?UIDIV
008D 900000      R     MOV     DPTR,#i
0090 EE                MOV     A,R6
0091 F0                MOVX    @DPTR,A
0092 A3                INC     DPTR
0093 EF                MOV     A,R7
0094 F0                MOVX    @DPTR,A
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 87  

0095 4E                ORL     A,R6
0096 22                RET     
0097         L?0130:
0097         L?0131:
0097 A3                INC     DPTR
0098 E0                MOVX    A,@DPTR
0099 FB                MOV     R3,A
009A 7D96              MOV     R5,#096H
009C 7F8A              MOV     R7,#08AH
009E 22                RET     
009F         L?0132:
009F 120000      E     LCALL   ?C?UIDIV
00A2 900000      R     MOV     DPTR,#value
00A5 EC                MOV     A,R4
00A6 F0                MOVX    @DPTR,A
00A7 A3                INC     DPTR
00A8 ED                MOV     A,R5
00A9 F0                MOVX    @DPTR,A
00AA 22                RET     
00AB         L?0135:
00AB F0                MOVX    @DPTR,A
00AC         L?0136:
00AC 7B04              MOV     R3,#04H
00AE 7D94              MOV     R5,#094H
00B0 7F8A              MOV     R7,#08AH
00B2 22                RET     
00B3         L?0139:
00B3 E0                MOVX    A,@DPTR
00B4 FB                MOV     R3,A
00B5 C3                CLR     C
00B6 94FE              SUBB    A,#0FEH
00B8 7480              MOV     A,#080H
00BA 9480              SUBB    A,#080H
00BC 22                RET     
00BD         L?0140:
00BD         L?0141:
00BD E4                CLR     A
00BE FB                MOV     R3,A
00BF 7D94              MOV     R5,#094H
00C1 7F8A              MOV     R7,#08AH
00C3 22                RET     
             ; FUNCTION Com0067 (END)

             ; FUNCTION WaitEndofDisplayArea (BEGIN)
                                           ; SOURCE LINE # 41
                                           ; SOURCE LINE # 42
                                           ; SOURCE LINE # 45
0000 120000      R     LCALL   L?0137
0003 900000      R     MOV     DPTR,#ret
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 47
0007 E4                CLR     A
0008 A3                INC     DPTR
0009 F0                MOVX    @DPTR,A
000A         ?C0001:
000A 900000      R     MOV     DPTR,#i
000D E0                MOVX    A,@DPTR
000E C3                CLR     C
000F 940A              SUBB    A,#0AH
0011 7480              MOV     A,#080H
0013 9480              SUBB    A,#080H
0015 5011              JNC     ?C0005
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 88  

                                           ; SOURCE LINE # 48
                                           ; SOURCE LINE # 49
0017 120000      R     LCALL   L?0137
001A FF                MOV     R7,A
001B 900000      R     MOV     DPTR,#ret
001E E0                MOVX    A,@DPTR
001F 6F                XRL     A,R7
0020 7006              JNZ     ?C0005
                                           ; SOURCE LINE # 50
0022 A3                INC     DPTR
0023 E0                MOVX    A,@DPTR
0024 04                INC     A
0025 F0                MOVX    @DPTR,A
0026 80E2              SJMP    ?C0001
                                           ; SOURCE LINE # 51
0028         ?C0005:
0028 22                RET     
0029         L?0137:
0029 7D95              MOV     R5,#095H
002B 7F8A              MOV     R7,#08AH
002D 120000      E     LCALL   _ReadI2C
0030 EF                MOV     A,R7
0031 5440              ANL     A,#040H
0033 22                RET     
             ; FUNCTION WaitEndofDisplayArea (END)

             ; FUNCTION Change_OSDColorLookup (BEGIN)
                                           ; SOURCE LINE # 56
                                           ; SOURCE LINE # 57
                                           ; SOURCE LINE # 59
0000 E4                CLR     A
0001 900000      R     MOV     DPTR,#j
0004 F0                MOVX    @DPTR,A
0005         ?C0006:
0005 900000      R     MOV     DPTR,#j
0008 E0                MOVX    A,@DPTR
0009 C3                CLR     C
000A 9402              SUBB    A,#02H
000C 7480              MOV     A,#080H
000E 9480              SUBB    A,#080H
0010 5047              JNC     ?C0012
                                           ; SOURCE LINE # 60
0012 E4                CLR     A
0013 900000      R     MOV     DPTR,#i
0016 F0                MOVX    @DPTR,A
0017         ?C0009:
0017 900000      R     MOV     DPTR,#i
001A E0                MOVX    A,@DPTR
001B FF                MOV     R7,A
001C C3                CLR     C
001D 120000      R     LCALL   L?0113
0020 502F              JNC     ?C0008
                                           ; SOURCE LINE # 61
0022 A3                INC     DPTR
0023 E0                MOVX    A,@DPTR
0024 75F008            MOV     B,#08H
0027 A4                MUL     AB
0028 FE                MOV     R6,A
0029 EF                MOV     A,R7
002A 2E                ADD     A,R6
002B 7D9C              MOV     R5,#09CH
                                           ; SOURCE LINE # 62
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 89  

002D 120000      R     LCALL   L?0138
0030 FF                MOV     R7,A
0031 A3                INC     DPTR
0032 E0                MOVX    A,@DPTR
0033 75F008            MOV     B,#08H
0036 900000      E     MOV     DPTR,#OSD_Color_LookUp_Data_Table
0039 120000      E     LCALL   ?C?OFFXADD
003C E582              MOV     A,DPL
003E 2F                ADD     A,R7
003F F582              MOV     DPL,A
0041 E4                CLR     A
0042 3583              ADDC    A,DPH
0044 F583              MOV     DPH,A
0046 E4                CLR     A
0047 93                MOVC    A,@A+DPTR
0048 7D9D              MOV     R5,#09DH
                                           ; SOURCE LINE # 63
004A 120000      R     LCALL   L?0138
004D 04                INC     A
004E F0                MOVX    @DPTR,A
004F 80C6              SJMP    ?C0009
                                           ; SOURCE LINE # 64
0051         ?C0008:
0051 900000      R     MOV     DPTR,#j
0054 E0                MOVX    A,@DPTR
0055 04                INC     A
0056 F0                MOVX    @DPTR,A
0057 80AC              SJMP    ?C0006
                                           ; SOURCE LINE # 65
0059         ?C0012:
0059 22                RET     
005A         L?0138:
005A FB                MOV     R3,A
005B 7F8A              MOV     R7,#08AH
005D 120000      E     LCALL   _WriteI2C
0060 900000      R     MOV     DPTR,#i
0063 E0                MOVX    A,@DPTR
0064 22                RET     
             ; FUNCTION Change_OSDColorLookup (END)

             ; FUNCTION _DownloadFont (BEGIN)
                                           ; SOURCE LINE # 98
0000 900000      R     MOV     DPTR,#cod
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 99
                                           ; SOURCE LINE # 100
0009 120000      R     LCALL   L?0133
000C 4401              ORL     A,#01H
000E 7D94              MOV     R5,#094H
0010 120000      R     LCALL   L?0142
                                           ; SOURCE LINE # 101
0013 900000      R     MOV     DPTR,#cod
0016 E0                MOVX    A,@DPTR
0017 7D99              MOV     R5,#099H
0019 120000      R     LCALL   L?0142
                                           ; SOURCE LINE # 104
001C 7DE0              MOV     R5,#0E0H
001E 7F8A              MOV     R7,#08AH
0020 120000      E     LCALL   _ReadI2C
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 90  

0023 EF                MOV     A,R7
0024 4410              ORL     A,#010H
0026 FB                MOV     R3,A
0027 7DE0              MOV     R5,#0E0H
0029 7F8A              MOV     R7,#08AH
002B 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 105
002E 900000      R     MOV     DPTR,#fontdata
0031 120000      E     LCALL   ?C?PLDXDATA
0034 900000      E     MOV     DPTR,#?_WriteI2Cn?BYTE+05H
0037 741B              MOV     A,#01BH
0039 F0                MOVX    @DPTR,A
003A 7D9A              MOV     R5,#09AH
003C 7F8A              MOV     R7,#08AH
003E 120000      E     LCALL   _WriteI2Cn
                                           ; SOURCE LINE # 107
0041 120000      R     LCALL   L?0133
0044 54FE              ANL     A,#0FEH
0046 FB                MOV     R3,A
0047 7D94              MOV     R5,#094H
0049 7F8A              MOV     R7,#08AH
004B 020000      E     LJMP    _WriteI2C
                                           ; SOURCE LINE # 108
004E         L?0133:
004E 7D94              MOV     R5,#094H
0050 7F8A              MOV     R7,#08AH
0052 120000      E     LCALL   _ReadI2C
0055 EF                MOV     A,R7
0056 22                RET     
0057         L?0142:
0057 FB                MOV     R3,A
0058 7F8A              MOV     R7,#08AH
005A 120000      E     LCALL   _WriteI2C
005D 22                RET     
             ; FUNCTION _DownloadFont (END)

             ; FUNCTION DownloadUDFont (BEGIN)
                                           ; SOURCE LINE # 110
                                           ; SOURCE LINE # 111
                                           ; SOURCE LINE # 114
0000 7B60              MOV     R3,#060H
0002 7D9B              MOV     R5,#09BH
0004 7F8A              MOV     R7,#08AH
0006 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 116
0009 E4                CLR     A
000A 900000      R     MOV     DPTR,#i
000D F0                MOVX    @DPTR,A
000E         ?C0014:
000E 900000      R     MOV     DPTR,#i
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 7E00              MOV     R6,#00H
0015 C3                CLR     C
0016 94E2              SUBB    A,#0E2H
0018 7480              MOV     A,#080H
001A 9480              SUBB    A,#080H
001C 5023              JNC     ?C0017
001E EF                MOV     A,R7
001F 94C6              SUBB    A,#0C6H
0021 7480              MOV     A,#080H
0023 9480              SUBB    A,#080H
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 91  

0025 501A              JNC     ?C0017
                                           ; SOURCE LINE # 117
0027 E0                MOVX    A,@DPTR
0028 75F01B            MOV     B,#01BH
002B A4                MUL     AB
002C 2400        E     ADD     A,#LOW RAMFONTDATA
002E F9                MOV     R1,A
002F 7400        E     MOV     A,#HIGH RAMFONTDATA
0031 35F0              ADDC    A,B
0033 FA                MOV     R2,A
0034 7BFF              MOV     R3,#0FFH
0036 120000      R     LCALL   _DownloadFont
                                           ; SOURCE LINE # 118
0039 900000      R     MOV     DPTR,#i
003C E0                MOVX    A,@DPTR
003D 04                INC     A
003E F0                MOVX    @DPTR,A
003F 80CD              SJMP    ?C0014
                                           ; SOURCE LINE # 119
0041         ?C0017:
0041 22                RET     
             ; FUNCTION DownloadUDFont (END)

             ; FUNCTION _SetOSDWindowX_TW88 (BEGIN)
                                           ; SOURCE LINE # 177
0000 900000      R     MOV     DPTR,#x
;---- Variable 'winno' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 178
                                           ; SOURCE LINE # 182
0003 120000      R     LCALL   L?0104
0006 4035              JC      ?C0020
0008 120000      R     LCALL   L?0111
000B 5030              JNC     ?C0020
                                           ; SOURCE LINE # 183
000D 120000      R     LCALL   L?0117
0010 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 185
0013 900000      R     MOV     DPTR,#x
0016 75F008            MOV     B,#08H
                                           ; SOURCE LINE # 187
0019 120000      R     LCALL   L?0121
001C 120000      E     LCALL   _ReadI2C
001F EF                MOV     A,R7
0020 54F0              ANL     A,#0F0H
;---- Variable 'dat' assigned to Register 'R5' ----
0022 FD                MOV     R5,A
                                           ; SOURCE LINE # 188
0023 900000      R     MOV     DPTR,#tmp
0026 E0                MOVX    A,@DPTR
0027 4D                ORL     A,R5
                                           ; SOURCE LINE # 190
0028 FB                MOV     R3,A
0029 7DA0              MOV     R5,#0A0H
002B 7F8A              MOV     R7,#08AH
002D 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 191
0030 900000      R     MOV     DPTR,#tmp
0033 A3                INC     DPTR
0034 E0                MOVX    A,@DPTR
0035 FB                MOV     R3,A
0036 7DA1              MOV     R5,#0A1H
0038 7F8A              MOV     R7,#08AH
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 92  

003A 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 192
003D         ?C0020:
003D 22                RET     
             ; FUNCTION _SetOSDWindowX_TW88 (END)

             ; FUNCTION _SetOSDWindowY_TW88 (BEGIN)
                                           ; SOURCE LINE # 194
0000 900000      R     MOV     DPTR,#y
;---- Variable 'winno' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 195
                                           ; SOURCE LINE # 199
0003 120000      R     LCALL   L?0104
0006 4038              JC      ?C0023
0008 120000      R     LCALL   L?0111
000B 5033              JNC     ?C0023
                                           ; SOURCE LINE # 200
000D 120000      R     LCALL   L?0117
0010 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 202
0013 900000      R     MOV     DPTR,#y
0016 75F004            MOV     B,#04H
                                           ; SOURCE LINE # 204
0019 120000      R     LCALL   L?0121
001C 120000      E     LCALL   _ReadI2C
001F EF                MOV     A,R7
0020 540F              ANL     A,#0FH
;---- Variable 'dat' assigned to Register 'R5' ----
0022 FD                MOV     R5,A
                                           ; SOURCE LINE # 205
0023 900000      R     MOV     DPTR,#tmp
0026 E0                MOVX    A,@DPTR
0027 C4                SWAP    A
0028 54F0              ANL     A,#0F0H
002A 4D                ORL     A,R5
                                           ; SOURCE LINE # 207
002B FB                MOV     R3,A
002C 7DA0              MOV     R5,#0A0H
002E 7F8A              MOV     R7,#08AH
0030 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 208
0033 900000      R     MOV     DPTR,#tmp
0036 A3                INC     DPTR
0037 E0                MOVX    A,@DPTR
0038 FB                MOV     R3,A
0039 7DA2              MOV     R5,#0A2H
003B 7F8A              MOV     R7,#08AH
003D 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 209
0040         ?C0023:
0040 22                RET     
             ; FUNCTION _SetOSDWindowY_TW88 (END)

             ; FUNCTION _ShowOSDWindowAll (BEGIN)
                                           ; SOURCE LINE # 214
0000 900000      R     MOV     DPTR,#on
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 215
                                           ; SOURCE LINE # 218
0005 120000      R     LCALL   WaitEndofDisplayArea
                                           ; SOURCE LINE # 219
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 93  

0008 7D9C              MOV     R5,#09CH
000A 7F8A              MOV     R7,#08AH
000C 120000      E     LCALL   _ReadI2C
000F 900000      R     MOV     DPTR,#rd
0012 EF                MOV     A,R7
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 221
0014 900000      R     MOV     DPTR,#on
0017 E0                MOVX    A,@DPTR
0018 6006              JZ      ?C0024
                                           ; SOURCE LINE # 222
001A A3                INC     DPTR
001B E0                MOVX    A,@DPTR
001C 54EF              ANL     A,#0EFH
001E 8006              SJMP    ?C0097
0020         ?C0024:
                                           ; SOURCE LINE # 224
0020 900000      R     MOV     DPTR,#rd
0023 E0                MOVX    A,@DPTR
0024 4410              ORL     A,#010H
0026         ?C0097:
0026 FB                MOV     R3,A
0027 7D9C              MOV     R5,#09CH
0029 7F8A              MOV     R7,#08AH
002B 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 226
002E         ?C0026:
002E 22                RET     
             ; FUNCTION _ShowOSDWindowAll (END)

             ; FUNCTION _ShowOSDWindow_TW88 (BEGIN)
                                           ; SOURCE LINE # 227
0000 900000      R     MOV     DPTR,#onoff
;---- Variable 'winno' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 228
                                           ; SOURCE LINE # 231
0003 120000      R     LCALL   L?0105
0006 403A              JC      ?C0029
0008 120000      R     LCALL   L?0112
000B 5035              JNC     ?C0029
                                           ; SOURCE LINE # 232
000D 120000      R     LCALL   L?0118
0010 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 234
0013 7D9F              MOV     R5,#09FH
0015 7F8A              MOV     R7,#08AH
0017 120000      E     LCALL   _ReadI2C
001A 900000      R     MOV     DPTR,#rd
001D EF                MOV     A,R7
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 235
001F 900000      R     MOV     DPTR,#onoff
0022 E0                MOVX    A,@DPTR
0023 6007              JZ      ?C0030
0025 A3                INC     DPTR
0026 E0                MOVX    A,@DPTR
0027 4401              ORL     A,#01H
0029 F0                MOVX    @DPTR,A
002A 8007              SJMP    ?C0031
002C         ?C0030:
                                           ; SOURCE LINE # 236
002C 900000      R     MOV     DPTR,#rd
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 94  

002F E0                MOVX    A,@DPTR
0030 54FE              ANL     A,#0FEH
0032 F0                MOVX    @DPTR,A
0033         ?C0031:
                                           ; SOURCE LINE # 238
0033 120000      R     LCALL   WaitEndofDisplayArea
                                           ; SOURCE LINE # 239
0036 900000      R     MOV     DPTR,#rd
0039 E0                MOVX    A,@DPTR
003A FB                MOV     R3,A
003B 7D9F              MOV     R5,#09FH
003D 7F8A              MOV     R7,#08AH
003F 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 240
0042         ?C0029:
0042 22                RET     
             ; FUNCTION _ShowOSDWindow_TW88 (END)

             ; FUNCTION _GetOSDWindowX (BEGIN)
                                           ; SOURCE LINE # 243
;---- Variable 'winno' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 244
                                           ; SOURCE LINE # 247
0000 120000      R     LCALL   L?0106
0003 4005              JC      ?C0033
0005 120000      R     LCALL   L?0112
0008 4004              JC      ?C0032
000A         ?C0033:
000A E4                CLR     A
000B FE                MOV     R6,A
000C FF                MOV     R7,A
000D 22                RET     
000E         ?C0032:
                                           ; SOURCE LINE # 248
000E 120000      R     LCALL   L?0118
0011 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 250
0014 7DA0              MOV     R5,#0A0H
0016 7F8A              MOV     R7,#08AH
0018 120000      E     LCALL   _ReadI2C
001B EF                MOV     A,R7
001C 540F              ANL     A,#0FH
001E 900000      R     MOV     DPTR,#x
0021 F0                MOVX    @DPTR,A
0022 A3                INC     DPTR
0023 E4                CLR     A
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 251
0025 7DA1              MOV     R5,#0A1H
0027 7F8A              MOV     R7,#08AH
0029 120000      E     LCALL   _ReadI2C
002C 900000      R     MOV     DPTR,#x
002F E0                MOVX    A,@DPTR
0030 F0                MOVX    @DPTR,A
0031 A3                INC     DPTR
0032 E0                MOVX    A,@DPTR
0033 4F                ORL     A,R7
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 253
0035 900000      R     MOV     DPTR,#x
0038 E0                MOVX    A,@DPTR
0039 FE                MOV     R6,A
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 95  

003A A3                INC     DPTR
003B E0                MOVX    A,@DPTR
003C 7803              MOV     R0,#03H
003E         ?C0095:
003E CE                XCH     A,R6
003F C3                CLR     C
0040 13                RRC     A
0041 CE                XCH     A,R6
0042 13                RRC     A
0043 D8F9              DJNZ    R0,?C0095
0045 FF                MOV     R7,A
0046 7E00              MOV     R6,#00H
                                           ; SOURCE LINE # 254
0048         ?C0034:
0048 22                RET     
             ; FUNCTION _GetOSDWindowX (END)

             ; FUNCTION _GetOSDWindowY (BEGIN)
                                           ; SOURCE LINE # 257
;---- Variable 'winno' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 258
                                           ; SOURCE LINE # 261
0000 120000      R     LCALL   L?0106
0003 4005              JC      ?C0036
0005 120000      R     LCALL   L?0112
0008 4004              JC      ?C0035
000A         ?C0036:
000A E4                CLR     A
000B FE                MOV     R6,A
000C FF                MOV     R7,A
000D 22                RET     
000E         ?C0035:
                                           ; SOURCE LINE # 262
000E 120000      R     LCALL   L?0118
0011 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 264
0014 7DA0              MOV     R5,#0A0H
0016 7F8A              MOV     R7,#08AH
0018 120000      E     LCALL   _ReadI2C
001B EF                MOV     A,R7
001C 54F0              ANL     A,#0F0H
001E C4                SWAP    A
001F F8                MOV     R0,A
0020 540F              ANL     A,#0FH
0022 C8                XCH     A,R0
0023 68                XRL     A,R0
0024 FE                MOV     R6,A
0025 E4                CLR     A
0026 C4                SWAP    A
0027 54F0              ANL     A,#0F0H
0029 48                ORL     A,R0
002A 900000      R     MOV     DPTR,#y
002D F0                MOVX    @DPTR,A
002E A3                INC     DPTR
002F CE                XCH     A,R6
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 265
0031 7DA2              MOV     R5,#0A2H
0033 7F8A              MOV     R7,#08AH
0035 120000      E     LCALL   _ReadI2C
0038 900000      R     MOV     DPTR,#y
003B E0                MOVX    A,@DPTR
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 96  

003C F0                MOVX    @DPTR,A
003D A3                INC     DPTR
003E E0                MOVX    A,@DPTR
003F 4F                ORL     A,R7
0040 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 267
0041 900000      R     MOV     DPTR,#y
0044 E0                MOVX    A,@DPTR
0045 FE                MOV     R6,A
0046 A3                INC     DPTR
0047 E0                MOVX    A,@DPTR
0048 7802              MOV     R0,#02H
004A         ?C0096:
004A CE                XCH     A,R6
004B C3                CLR     C
004C 13                RRC     A
004D CE                XCH     A,R6
004E 13                RRC     A
004F D8F9              DJNZ    R0,?C0096
0051 FF                MOV     R7,A
0052 7E00              MOV     R6,#00H
                                           ; SOURCE LINE # 268
0054         ?C0037:
0054 22                RET     
             ; FUNCTION _GetOSDWindowY (END)

             ; FUNCTION _DisplayROMFont (BEGIN)
                                           ; SOURCE LINE # 284
0000 900000      R     MOV     DPTR,#scode
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 285
                                           ; SOURCE LINE # 288
0005 7B02              MOV     R3,#02H
0007 120000      R     LCALL   L?0114
                                           ; SOURCE LINE # 289
000A 7D9E              MOV     R5,#09EH
000C 120000      R     LCALL   L?0122
                                           ; SOURCE LINE # 290
000F E4                CLR     A
0010 900000      R     MOV     DPTR,#i
0013 F0                MOVX    @DPTR,A
0014         ?C0038:
0014 900000      R     MOV     DPTR,#i
0017 E0                MOVX    A,@DPTR
0018 C3                CLR     C
0019 940C              SUBB    A,#0CH
001B 7480              MOV     A,#080H
001D 9480              SUBB    A,#080H
001F 500E              JNC     ?C0039
                                           ; SOURCE LINE # 291
0021 120000      R     LCALL   L?0107
0024 120000      E     LCALL   _WriteI2C
0027 900000      R     MOV     DPTR,#i
002A E0                MOVX    A,@DPTR
002B 04                INC     A
002C F0                MOVX    @DPTR,A
002D 80E5              SJMP    ?C0038
002F         ?C0039:
                                           ; SOURCE LINE # 292
002F 900000      R     MOV     DPTR,#scode
0032 E0                MOVX    A,@DPTR
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 97  

0033 7029              JNZ     ?C0041
                                           ; SOURCE LINE # 293
0035 FB                MOV     R3,A
0036 120000      R     LCALL   L?0114
                                           ; SOURCE LINE # 294
0039 E4                CLR     A
003A 900000      R     MOV     DPTR,#i
003D F0                MOVX    @DPTR,A
003E         ?C0042:
003E 900000      R     MOV     DPTR,#i
0041 120000      R     LCALL   L?0139
0044 504F              JNC     ?C0045
                                           ; SOURCE LINE # 295
0046 7D96              MOV     R5,#096H
                                           ; SOURCE LINE # 296
0048 120000      R     LCALL   L?0125
004B FB                MOV     R3,A
004C 7D97              MOV     R5,#097H
004E 7F8A              MOV     R7,#08AH
0050 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 297
0053 7B97              MOV     R3,#097H
0055 7D98              MOV     R5,#098H
                                           ; SOURCE LINE # 298
0057 120000      R     LCALL   L?0125
005A 04                INC     A
005B F0                MOVX    @DPTR,A
005C 80E0              SJMP    ?C0042
                                           ; SOURCE LINE # 299
005E         ?C0041:
                                           ; SOURCE LINE # 300
                                           ; SOURCE LINE # 301
005E 120000      R     LCALL   L?0143
                                           ; SOURCE LINE # 302
0061 7BFF              MOV     R3,#0FFH
0063 7A00        R     MOV     R2,#HIGH ?SC_0
0065 7900        R     MOV     R1,#LOW ?SC_0
0067 120000      E     LCALL   _Puts
006A         ?C0046:
                                           ; SOURCE LINE # 303
006A 120000      E     LCALL   RS_ready
006D EF                MOV     A,R7
006E 7025              JNZ     ?C0045
                                           ; SOURCE LINE # 304
0070 120000      R     LCALL   L?0143
                                           ; SOURCE LINE # 305
0073 7D96              MOV     R5,#096H
0075 120000      R     LCALL   L?0122
                                           ; SOURCE LINE # 306
0078 7B47              MOV     R3,#047H
007A 7D98              MOV     R5,#098H
007C 7F8A              MOV     R7,#08AH
007E 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 307
0081 E4                CLR     A
0082 900000      R     MOV     DPTR,#i
0085 F0                MOVX    @DPTR,A
0086         ?C0050:
                                           ; SOURCE LINE # 308
                                           ; SOURCE LINE # 309
0086 900000      R     MOV     DPTR,#i
0089 E0                MOVX    A,@DPTR
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 98  

                                           ; SOURCE LINE # 310
                                           ; SOURCE LINE # 311
                                           ; SOURCE LINE # 312
                                           ; SOURCE LINE # 313
008A 120000      R     LCALL   L?0101
                                           ; SOURCE LINE # 314
                                           ; SOURCE LINE # 315
                                           ; SOURCE LINE # 316
                                           ; SOURCE LINE # 317
008D 120000      R     LCALL   L?0101
0090 70F4              JNZ     ?C0050
                                           ; SOURCE LINE # 318
0092 020000      R     LJMP    ?C0046
                                           ; SOURCE LINE # 319
0095         ?C0045:
                                           ; SOURCE LINE # 320
0095 7B17              MOV     R3,#017H
0097 7D9F              MOV     R5,#09FH
0099 7F8A              MOV     R7,#08AH
009B 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 321
009E 7B0F              MOV     R3,#0FH
00A0 7D9C              MOV     R5,#09CH
00A2 7F8A              MOV     R7,#08AH
00A4 020000      E     LJMP    _WriteI2C
                                           ; SOURCE LINE # 322
00A7         L?0101:
00A7 FB                MOV     R3,A
00A8 04                INC     A
00A9 F0                MOVX    @DPTR,A
00AA 7D97              MOV     R5,#097H
00AC 7F8A              MOV     R7,#08AH
00AE 120000      E     LCALL   _WriteI2C
00B1 900000      R     MOV     DPTR,#i
00B4 E0                MOVX    A,@DPTR
00B5 FB                MOV     R3,A
00B6 04                INC     A
00B7 F0                MOVX    @DPTR,A
00B8 7D97              MOV     R5,#097H
00BA 7F8A              MOV     R7,#08AH
00BC 120000      E     LCALL   _WriteI2C
00BF 900000      R     MOV     DPTR,#i
00C2 E0                MOVX    A,@DPTR
00C3 FB                MOV     R3,A
00C4 04                INC     A
00C5 F0                MOVX    @DPTR,A
00C6 7D97              MOV     R5,#097H
00C8 7F8A              MOV     R7,#08AH
00CA 120000      E     LCALL   _WriteI2C
00CD 900000      R     MOV     DPTR,#i
00D0 E0                MOVX    A,@DPTR
00D1 FB                MOV     R3,A
00D2 04                INC     A
00D3 F0                MOVX    @DPTR,A
00D4 7D97              MOV     R5,#097H
00D6 7F8A              MOV     R7,#08AH
00D8 120000      E     LCALL   _WriteI2C
00DB 900000      R     MOV     DPTR,#i
00DE E0                MOVX    A,@DPTR
00DF 22                RET     
00E0         L?0114:
00E0 7D94              MOV     R5,#094H
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 99  

00E2 7F8A              MOV     R7,#08AH
00E4 120000      E     LCALL   _WriteI2C
00E7 22                RET     
00E8         L?0122:
00E8 E4                CLR     A
00E9 FB                MOV     R3,A
00EA 7F8A              MOV     R7,#08AH
00EC 120000      E     LCALL   _WriteI2C
00EF 22                RET     
00F0         L?0125:
00F0 7F8A              MOV     R7,#08AH
00F2 120000      E     LCALL   _WriteI2C
00F5 900000      R     MOV     DPTR,#i
00F8 E0                MOVX    A,@DPTR
00F9 22                RET     
00FA         L?0143:
00FA 7B0C              MOV     R3,#0CH
00FC 7D94              MOV     R5,#094H
00FE 7F8A              MOV     R7,#08AH
0100 120000      E     LCALL   _WriteI2C
0103 22                RET     
             ; FUNCTION _DisplayROMFont (END)

             ; FUNCTION _DisplayRAMFont (BEGIN)
                                           ; SOURCE LINE # 325
0000 900000      R     MOV     DPTR,#scode
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 326
                                           ; SOURCE LINE # 330
0005 7B02              MOV     R3,#02H
0007 7D94              MOV     R5,#094H
0009 7F8A              MOV     R7,#08AH
000B 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 331
000E 7B01              MOV     R3,#01H
0010 7D9E              MOV     R5,#09EH
                                           ; SOURCE LINE # 332
0012 120000      R     LCALL   L?0120
0015         ?C0052:
0015 900000      R     MOV     DPTR,#i
0018 E0                MOVX    A,@DPTR
0019 C3                CLR     C
001A 940C              SUBB    A,#0CH
001C 7480              MOV     A,#080H
001E 9480              SUBB    A,#080H
0020 500E              JNC     ?C0053
                                           ; SOURCE LINE # 333
0022 120000      R     LCALL   L?0107
0025 120000      E     LCALL   _WriteI2C
0028 900000      R     MOV     DPTR,#i
002B E0                MOVX    A,@DPTR
002C 04                INC     A
002D F0                MOVX    @DPTR,A
002E 80E5              SJMP    ?C0052
0030         ?C0053:
                                           ; SOURCE LINE # 334
0030 900000      R     MOV     DPTR,#scode
0033 E0                MOVX    A,@DPTR
0034 702A              JNZ     ?C0055
                                           ; SOURCE LINE # 335
0036 7B80              MOV     R3,#080H
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 100 

0038 7D94              MOV     R5,#094H
                                           ; SOURCE LINE # 336
003A 120000      R     LCALL   L?0120
003D         ?C0056:
003D 900000      R     MOV     DPTR,#i
0040 120000      R     LCALL   L?0139
0043 4003              JC      $ + 5H
0045 020000      R     LJMP    ?C0059
                                           ; SOURCE LINE # 337
0048 7D96              MOV     R5,#096H
                                           ; SOURCE LINE # 338
004A 120000      R     LCALL   L?0126
004D FB                MOV     R3,A
004E 7D97              MOV     R5,#097H
0050 7F8A              MOV     R7,#08AH
0052 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 339
0055 7B97              MOV     R3,#097H
0057 7D98              MOV     R5,#098H
                                           ; SOURCE LINE # 340
0059 120000      R     LCALL   L?0126
005C 04                INC     A
005D F0                MOVX    @DPTR,A
005E 80DD              SJMP    ?C0056
                                           ; SOURCE LINE # 341
0060         ?C0055:
                                           ; SOURCE LINE # 342
0060 900000      R     MOV     DPTR,#scode
0063 E0                MOVX    A,@DPTR
0064 6401              XRL     A,#01H
0066 7043              JNZ     ?C0060
                                           ; SOURCE LINE # 343
0068 7BFF              MOV     R3,#0FFH
006A 7A00        R     MOV     R2,#HIGH ?SC_0
006C 7900        R     MOV     R1,#LOW ?SC_0
006E 120000      E     LCALL   _Puts
                                           ; SOURCE LINE # 344
0071 E4                CLR     A
0072 900000      R     MOV     DPTR,#j
0075 F0                MOVX    @DPTR,A
0076         ?C0061:
                                           ; SOURCE LINE # 345
0076 120000      E     LCALL   RS_ready
0079 EF                MOV     A,R7
007A 704C              JNZ     ?C0059
                                           ; SOURCE LINE # 346
007C 7B8C              MOV     R3,#08CH
007E 7D94              MOV     R5,#094H
0080 7F8A              MOV     R7,#08AH
0082 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 347
0085 E4                CLR     A
0086 FB                MOV     R3,A
0087 7D96              MOV     R5,#096H
0089 7F8A              MOV     R7,#08AH
008B 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 348
008E 7B47              MOV     R3,#047H
0090 7D98              MOV     R5,#098H
0092 7F8A              MOV     R7,#08AH
0094 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 349
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 101 

0097 E4                CLR     A
0098 900000      R     MOV     DPTR,#i
009B F0                MOVX    @DPTR,A
009C         ?C0065:
                                           ; SOURCE LINE # 350
                                           ; SOURCE LINE # 351
009C 900000      R     MOV     DPTR,#i
009F E0                MOVX    A,@DPTR
                                           ; SOURCE LINE # 352
                                           ; SOURCE LINE # 353
                                           ; SOURCE LINE # 354
                                           ; SOURCE LINE # 355
00A0 120000      R     LCALL   L?0102
                                           ; SOURCE LINE # 356
                                           ; SOURCE LINE # 357
                                           ; SOURCE LINE # 358
                                           ; SOURCE LINE # 359
00A3 120000      R     LCALL   L?0102
00A6 70F4              JNZ     ?C0065
                                           ; SOURCE LINE # 360
00A8 020000      R     LJMP    ?C0061
                                           ; SOURCE LINE # 361
00AB         ?C0060:
                                           ; SOURCE LINE # 362
                                           ; SOURCE LINE # 363
00AB E4                CLR     A
00AC F500        E     MOV     stopWatch,A
00AE F500        E     MOV     stopWatch+01H,A
                                           ; SOURCE LINE # 364
00B0 120000      R     LCALL   DownloadUDFont
                                           ; SOURCE LINE # 365
;---- Variable 'takenTime' assigned to Register 'R6/R7' ----
00B3 AF00        E     MOV     R7,stopWatch+01H
00B5 AE00        E     MOV     R6,stopWatch
                                           ; SOURCE LINE # 366
00B7 7BFF              MOV     R3,#0FFH
00B9 7A00        R     MOV     R2,#HIGH ?SC_43
00BB 7900        R     MOV     R1,#LOW ?SC_43
00BD 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
00C0 EE                MOV     A,R6
00C1 F0                MOVX    @DPTR,A
00C2 A3                INC     DPTR
00C3 EF                MOV     A,R7
00C4 F0                MOVX    @DPTR,A
00C5 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 367
00C8         ?C0059:
                                           ; SOURCE LINE # 368
00C8 7B17              MOV     R3,#017H
00CA 7D9F              MOV     R5,#09FH
00CC 7F8A              MOV     R7,#08AH
00CE 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 369
00D1 7B0F              MOV     R3,#0FH
00D3 7D9C              MOV     R5,#09CH
00D5 7F8A              MOV     R7,#08AH
00D7 020000      E     LJMP    _WriteI2C
                                           ; SOURCE LINE # 370
00DA         L?0102:
00DA FB                MOV     R3,A
00DB 04                INC     A
00DC F0                MOVX    @DPTR,A
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 102 

00DD 7D97              MOV     R5,#097H
00DF 7F8A              MOV     R7,#08AH
00E1 120000      E     LCALL   _WriteI2C
00E4 900000      R     MOV     DPTR,#i
00E7 E0                MOVX    A,@DPTR
00E8 FB                MOV     R3,A
00E9 04                INC     A
00EA F0                MOVX    @DPTR,A
00EB 7D97              MOV     R5,#097H
00ED 7F8A              MOV     R7,#08AH
00EF 120000      E     LCALL   _WriteI2C
00F2 900000      R     MOV     DPTR,#i
00F5 E0                MOVX    A,@DPTR
00F6 FB                MOV     R3,A
00F7 04                INC     A
00F8 F0                MOVX    @DPTR,A
00F9 7D97              MOV     R5,#097H
00FB 7F8A              MOV     R7,#08AH
00FD 120000      E     LCALL   _WriteI2C
0100 900000      R     MOV     DPTR,#i
0103 E0                MOVX    A,@DPTR
0104 FB                MOV     R3,A
0105 04                INC     A
0106 F0                MOVX    @DPTR,A
0107 7D97              MOV     R5,#097H
0109 7F8A              MOV     R7,#08AH
010B 120000      E     LCALL   _WriteI2C
010E 900000      R     MOV     DPTR,#i
0111 E0                MOVX    A,@DPTR
0112 22                RET     
0113         L?0120:
0113 7F8A              MOV     R7,#08AH
0115 120000      E     LCALL   _WriteI2C
0118 E4                CLR     A
0119 900000      R     MOV     DPTR,#i
011C F0                MOVX    @DPTR,A
011D 22                RET     
011E         L?0126:
011E 7F8A              MOV     R7,#08AH
0120 120000      E     LCALL   _WriteI2C
0123 900000      R     MOV     DPTR,#i
0126 E0                MOVX    A,@DPTR
0127 22                RET     
             ; FUNCTION _DisplayRAMFont (END)

             ; FUNCTION _WriteStringToAddr (BEGIN)
                                           ; SOURCE LINE # 908
0000 900000      R     MOV     DPTR,#addr
0003 120000      R     LCALL   L?0127
0006 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 909
                                           ; SOURCE LINE # 911
0009 120000      R     LCALL   L?0136
000C 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 913
000F 900000      R     MOV     DPTR,#addr
0012 120000      R     LCALL   L?0130
0015 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 914
0018 900000      R     MOV     DPTR,#str
001B 120000      E     LCALL   ?C?PLDXDATA
001E 900000      R     MOV     DPTR,#cnt
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 103 

0021 E0                MOVX    A,@DPTR
0022 900000      E     MOV     DPTR,#?_WriteI2Cn?BYTE+05H
0025 F0                MOVX    @DPTR,A
0026 7D97              MOV     R5,#097H
0028 7F8A              MOV     R7,#08AH
002A 120000      E     LCALL   _WriteI2Cn
                                           ; SOURCE LINE # 917
002D 120000      R     LCALL   L?0140
0030 020000      E     LJMP    _WriteI2C
             ; FUNCTION _WriteStringToAddr (END)

             ; FUNCTION _DrawAttrCnt (BEGIN)
                                           ; SOURCE LINE # 932
0000 900000      R     MOV     DPTR,#addr
0003 120000      R     LCALL   L?0127
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 EB                MOV     A,R3
                                           ; SOURCE LINE # 933
                                           ; SOURCE LINE # 934
000A 120000      R     LCALL   L?0135
000D 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 935
0010 900000      R     MOV     DPTR,#addr
0013 120000      R     LCALL   L?0130
0016 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 936
0019 900000      R     MOV     DPTR,#color
001C E0                MOVX    A,@DPTR
001D FB                MOV     R3,A
001E A3                INC     DPTR
001F E0                MOVX    A,@DPTR
0020 900000      E     MOV     DPTR,#?_WriteI2CnD?BYTE+03H
0023 F0                MOVX    @DPTR,A
0024 7D98              MOV     R5,#098H
0026 7F8A              MOV     R7,#08AH
0028 120000      E     LCALL   _WriteI2CnD
                                           ; SOURCE LINE # 938
002B 120000      R     LCALL   L?0140
002E 020000      E     LJMP    _WriteI2C
             ; FUNCTION _DrawAttrCnt (END)

             ; FUNCTION _ClearDataCnt (BEGIN)
                                           ; SOURCE LINE # 941
0000 900000      R     MOV     DPTR,#addr
0003 120000      R     LCALL   L?0128
0006 ED                MOV     A,R5
                                           ; SOURCE LINE # 942
                                           ; SOURCE LINE # 944
0007 120000      R     LCALL   L?0135
000A 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 945
000D 900000      R     MOV     DPTR,#addr
0010 120000      R     LCALL   L?0131
0013 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 946
0016 900000      R     MOV     DPTR,#cnt
0019 E0                MOVX    A,@DPTR
001A 900000      E     MOV     DPTR,#?_WriteI2CnD?BYTE+03H
001D F0                MOVX    @DPTR,A
001E 7B20              MOV     R3,#020H
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 104 

0020 7D97              MOV     R5,#097H
0022 7F8A              MOV     R7,#08AH
0024 120000      E     LCALL   _WriteI2CnD
                                           ; SOURCE LINE # 949
0027 120000      R     LCALL   L?0141
002A 020000      E     LJMP    _WriteI2C
             ; FUNCTION _ClearDataCnt (END)

             ; FUNCTION _utoa (BEGIN)
                                           ; SOURCE LINE # 957
0000 900000      R     MOV     DPTR,#value
0003 120000      R     LCALL   L?0128
0006 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 958
                                           ; SOURCE LINE # 966
0009 900000      R     MOV     DPTR,#str1
000C 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 967
000F E4                CLR     A
0010 900000      R     MOV     DPTR,#cnt
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 968
0014 900000      R     MOV     DPTR,#radix
0017 E0                MOVX    A,@DPTR
0018 640A              XRL     A,#0AH
001A 7079              JNZ     ?C0071
                                           ; SOURCE LINE # 969
001C 900000      R     MOV     DPTR,#div
001F 7427              MOV     A,#027H
0021 F0                MOVX    @DPTR,A
0022 A3                INC     DPTR
0023 7410              MOV     A,#010H
0025 F0                MOVX    @DPTR,A
0026         ?C0072:
0026 120000      R     LCALL   L?0123
0029 C3                CLR     C
002A 940A              SUBB    A,#0AH
002C EC                MOV     A,R4
002D 9400              SUBB    A,#00H
002F 4056              JC      ?C0073
                                           ; SOURCE LINE # 970
0031 120000      R     LCALL   L?0115
                                           ; SOURCE LINE # 971
0034 120000      R     LCALL   L?0129
0037 6012              JZ      ?C0075
                                           ; SOURCE LINE # 972
0039 900000      R     MOV     DPTR,#i
003C A3                INC     DPTR
003D E0                MOVX    A,@DPTR
003E 2430              ADD     A,#030H
0040 120000      R     LCALL   L?0108
                                           ; SOURCE LINE # 973
0043 900000      R     MOV     DPTR,#cnt
0046 E0                MOVX    A,@DPTR
0047 04                INC     A
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 974
0049 8015              SJMP    ?C0076
004B         ?C0075:
                                           ; SOURCE LINE # 975
004B 900000      R     MOV     DPTR,#cnt
004E E0                MOVX    A,@DPTR
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 105 

004F 600F              JZ      ?C0076
                                           ; SOURCE LINE # 976
0051 900000      R     MOV     DPTR,#str
0054 E4                CLR     A
0055 75F001            MOV     B,#01H
0058 120000      E     LCALL   ?C?PLDIXDATA
005B 7430              MOV     A,#030H
005D 120000      E     LCALL   ?C?CSTPTR
0060         ?C0076:
                                           ; SOURCE LINE # 978
0060 120000      R     LCALL   L?0115
0063 900000      R     MOV     DPTR,#div
0066 E0                MOVX    A,@DPTR
0067 FA                MOV     R2,A
0068 A3                INC     DPTR
0069 E0                MOVX    A,@DPTR
006A FB                MOV     R3,A
006B FD                MOV     R5,A
006C AC02              MOV     R4,AR2
006E 120000      R     LCALL   L?0132
                                           ; SOURCE LINE # 979
0071 7D0A              MOV     R5,#0AH
0073 7C00              MOV     R4,#00H
0075 AF03              MOV     R7,AR3
0077 AE02              MOV     R6,AR2
0079 120000      E     LCALL   ?C?UIDIV
007C 900000      R     MOV     DPTR,#div
007F EE                MOV     A,R6
0080 F0                MOVX    @DPTR,A
0081 A3                INC     DPTR
0082 EF                MOV     A,R7
0083 F0                MOVX    @DPTR,A
0084 020000      R     LJMP    ?C0072
0087         ?C0073:
                                           ; SOURCE LINE # 980
0087 900000      R     MOV     DPTR,#value
008A A3                INC     DPTR
008B E0                MOVX    A,@DPTR
008C 2430              ADD     A,#030H
008E A3                INC     DPTR
008F 120000      R     LCALL   L?0109
                                           ; SOURCE LINE # 981
                                           ; SOURCE LINE # 982
0092 020000      R     LJMP    ?C0100
0095         ?C0071:
                                           ; SOURCE LINE # 983
0095 900000      R     MOV     DPTR,#radix
0098 E0                MOVX    A,@DPTR
0099 6410              XRL     A,#010H
009B 6003              JZ      $ + 5H
009D 020000      R     LJMP    ?C0078
                                           ; SOURCE LINE # 984
00A0 900000      R     MOV     DPTR,#div
00A3 7410              MOV     A,#010H
00A5 F0                MOVX    @DPTR,A
00A6 A3                INC     DPTR
00A7 E4                CLR     A
00A8 F0                MOVX    @DPTR,A
00A9         ?C0080:
00A9 120000      R     LCALL   L?0123
00AC C3                CLR     C
00AD 9410              SUBB    A,#010H
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 106 

00AF EC                MOV     A,R4
00B0 9400              SUBB    A,#00H
00B2 4044              JC      ?C0081
                                           ; SOURCE LINE # 985
00B4 120000      R     LCALL   L?0116
                                           ; SOURCE LINE # 986
00B7 120000      R     LCALL   L?0129
00BA 6028              JZ      ?C0082
                                           ; SOURCE LINE # 987
00BC 900000      R     MOV     DPTR,#i
00BF E0                MOVX    A,@DPTR
00C0 FE                MOV     R6,A
00C1 A3                INC     DPTR
00C2 E0                MOVX    A,@DPTR
00C3 FF                MOV     R7,A
00C4 C3                CLR     C
00C5 940A              SUBB    A,#0AH
00C7 EE                MOV     A,R6
00C8 9400              SUBB    A,#00H
00CA 4005              JC      ?C0084
                                           ; SOURCE LINE # 988
00CC EF                MOV     A,R7
00CD 2437              ADD     A,#037H
00CF 8007              SJMP    ?C0098
00D1         ?C0084:
                                           ; SOURCE LINE # 990
00D1 900000      R     MOV     DPTR,#i
00D4 A3                INC     DPTR
00D5 E0                MOVX    A,@DPTR
00D6 2430              ADD     A,#030H
00D8         ?C0098:
00D8 120000      R     LCALL   L?0108
00DB         ?C0085:
                                           ; SOURCE LINE # 991
00DB 120000      R     LCALL   L?0116
00DE 120000      R     LCALL   L?0124
00E1 120000      R     LCALL   L?0132
                                           ; SOURCE LINE # 992
                                           ; SOURCE LINE # 993
00E4         ?C0082:
00E4 900000      R     MOV     DPTR,#div
00E7 E0                MOVX    A,@DPTR
00E8 C4                SWAP    A
00E9 F8                MOV     R0,A
00EA 54F0              ANL     A,#0F0H
00EC C8                XCH     A,R0
00ED 68                XRL     A,R0
00EE F0                MOVX    @DPTR,A
00EF A3                INC     DPTR
00F0 E0                MOVX    A,@DPTR
00F1 C4                SWAP    A
00F2 540F              ANL     A,#0FH
00F4 48                ORL     A,R0
00F5 F0                MOVX    @DPTR,A
00F6 80B1              SJMP    ?C0080
00F8         ?C0081:
                                           ; SOURCE LINE # 994
00F8 120000      R     LCALL   L?0116
00FB C3                CLR     C
00FC 940A              SUBB    A,#0AH
00FE EE                MOV     A,R6
00FF 9400              SUBB    A,#00H
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 107 

0101 4005              JC      ?C0086
                                           ; SOURCE LINE # 995
0103 EF                MOV     A,R7
0104 2437              ADD     A,#037H
0106 8007              SJMP    ?C0099
0108         ?C0086:
                                           ; SOURCE LINE # 997
0108 900000      R     MOV     DPTR,#value
010B A3                INC     DPTR
010C E0                MOVX    A,@DPTR
010D 2430              ADD     A,#030H
010F         ?C0099:
010F FF                MOV     R7,A
0110 A3                INC     DPTR
0111 120000      R     LCALL   L?0110
0114         ?C0087:
                                           ; SOURCE LINE # 998
0114         ?C0100:
0114 900000      R     MOV     DPTR,#str
0117 120000      E     LCALL   ?C?PLDXDATA
011A E4                CLR     A
011B 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 999
011E         ?C0078:
                                           ; SOURCE LINE # 1000
011E 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 1001
0120 22                RET     
             ; FUNCTION _utoa (END)

             ; FUNCTION _strlen (BEGIN)
                                           ; SOURCE LINE # 1002
0000 900000      R     MOV     DPTR,#str
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 1003
                                           ; SOURCE LINE # 1004
;---- Variable 'i' assigned to Register 'R7' ----
0006 E4                CLR     A
0007 FF                MOV     R7,A
0008         ?C0089:
                                           ; SOURCE LINE # 1006
0008 900000      R     MOV     DPTR,#str
000B E4                CLR     A
000C 75F001            MOV     B,#01H
000F 120000      E     LCALL   ?C?PLDIXDATA
0012 120000      E     LCALL   ?C?CLDPTR
0015 6003              JZ      ?C0090
0017 0F                INC     R7
0018 80EE              SJMP    ?C0089
001A         ?C0090:
                                           ; SOURCE LINE # 1007
                                           ; SOURCE LINE # 1008
001A 22                RET     
             ; FUNCTION _strlen (END)

             ; FUNCTION _InitOSDWindow (BEGIN)
                                           ; SOURCE LINE # 1014
0000 900000      R     MOV     DPTR,#ptr
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 1015
                                           ; SOURCE LINE # 1018
0006 7DFF              MOV     R5,#0FFH
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 108 

0008 7F8A              MOV     R7,#08AH
000A 120000      E     LCALL   _ReadI2C
000D 900000      R     MOV     DPTR,#page
0010 EF                MOV     A,R7
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1019
0012 54FE              ANL     A,#0FEH
0014 FB                MOV     R3,A
0015 7DFF              MOV     R5,#0FFH
0017 7F8A              MOV     R7,#08AH
0019 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 1021
001C 7DE0              MOV     R5,#0E0H
001E 7F8A              MOV     R7,#08AH
0020 120000      E     LCALL   _ReadI2C
0023 EF                MOV     A,R7
0024 54EF              ANL     A,#0EFH
0026 120000      R     LCALL   L?0134
                                           ; SOURCE LINE # 1023
0029 E4                CLR     A
002A 900000      R     MOV     DPTR,#i
002D F0                MOVX    @DPTR,A
002E         ?C0092:
                                           ; SOURCE LINE # 1024
002E 120000      R     LCALL   L?0119
0031 FF                MOV     R7,A
0032 6042              JZ      ?C0093
                                           ; SOURCE LINE # 1025
0034 900000      R     MOV     DPTR,#i
0037 E0                MOVX    A,@DPTR
0038 2401              ADD     A,#01H
003A FD                MOV     R5,A
003B E4                CLR     A
003C 33                RLC     A
003D FC                MOV     R4,A
003E 900000      R     MOV     DPTR,#ptr
0041 120000      E     LCALL   ?C?PLDXDATA
0044 E9                MOV     A,R1
0045 2D                ADD     A,R5
0046 F9                MOV     R1,A
0047 EA                MOV     A,R2
0048 3C                ADDC    A,R4
0049 FA                MOV     R2,A
004A EF                MOV     A,R7
004B 120000      R     LCALL   L?0144
                                           ; SOURCE LINE # 1026
004E 900000      R     MOV     DPTR,#i
0051 E0                MOVX    A,@DPTR
0052 2401              ADD     A,#01H
0054 FF                MOV     R7,A
0055 E4                CLR     A
0056 33                RLC     A
0057 FE                MOV     R6,A
0058 900000      R     MOV     DPTR,#ptr
005B 120000      E     LCALL   ?C?PLDXDATA
005E E9                MOV     A,R1
005F 2F                ADD     A,R7
0060 F9                MOV     R1,A
0061 EA                MOV     A,R2
0062 3E                ADDC    A,R6
0063 FA                MOV     R2,A
0064 7405              MOV     A,#05H
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 109 

0066 120000      R     LCALL   L?0144
                                           ; SOURCE LINE # 1028
0069 120000      R     LCALL   L?0119
006C 04                INC     A
006D FF                MOV     R7,A
006E 900000      R     MOV     DPTR,#i
0071 E0                MOVX    A,@DPTR
0072 2F                ADD     A,R7
0073 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1029
0074 80B8              SJMP    ?C0092
0076         ?C0093:
                                           ; SOURCE LINE # 1031
0076 7DE0              MOV     R5,#0E0H
0078 7F8A              MOV     R7,#08AH
007A 120000      E     LCALL   _ReadI2C
007D EF                MOV     A,R7
007E 4410              ORL     A,#010H
0080 120000      R     LCALL   L?0134
                                           ; SOURCE LINE # 1032
0083 900000      R     MOV     DPTR,#page
0086 E0                MOVX    A,@DPTR
0087 FB                MOV     R3,A
0088 7DFF              MOV     R5,#0FFH
008A 7F8A              MOV     R7,#08AH
008C 020000      E     LJMP    _WriteI2C
                                           ; SOURCE LINE # 1033
008F         L?0134:
008F FB                MOV     R3,A
0090 7DE0              MOV     R5,#0E0H
0092 7F8A              MOV     R7,#08AH
0094 120000      E     LCALL   _WriteI2C
0097 22                RET     
0098         L?0144:
0098 900000      E     MOV     DPTR,#?_WriteI2Cn_?BYTE+04H
009B F0                MOVX    @DPTR,A
009C 7F8A              MOV     R7,#08AH
009E 120000      E     LCALL   _WriteI2Cn_
00A1 22                RET     
             ; FUNCTION _InitOSDWindow (END)

C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 110 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


_WriteI2CnD. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
DWORD. . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
CAM_R. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_ShowOSDWindow_TW88. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  winno. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  onoff. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  rd . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
TriggerModeType. . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
Init_Osd_DisplayMuteInfo . . . . . . .  PUBLIC   CODE   ARRAY    0091H  19
CAM_BAR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ABR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_CAR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ACR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_CBR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_BCR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
NumberStringType . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  11
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  width. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  BackColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  Radix. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  NumColor . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  MaxLen . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  PrePostCharLen . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  PrePostChar. . . . . . . . . . . . .  MEMBER   -----  ARRAY    0008H  3
_ClearDataCnt. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  addr . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  cnt. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
Init_Osd_DisplayInput_B. . . . . . . .  PUBLIC   CODE   ARRAY    00EFH  19
Init_Osd_BarWindow . . . . . . . . . .  PUBLIC   CODE   ARRAY    0139H  19
Change_OSDColorLookup. . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  j. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
FontData . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  27
  font . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  27
RIGHT_TRIG . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
LAST_TRIG_NON. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_strlen. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  str. . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0000H  3
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_WriteI2Cn_. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Init_Osd_MainMenu. . . . . . . . . . .  PUBLIC   CODE   ARRAY    0102H  55
RS_ready . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
NORMALL_MODE . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
AVMode . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
SourceModeType . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
_ShowOSDWindowAll. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  on . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  rd . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
CAM_NUM. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAMC_TRIG. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_Puts. . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
LAST_TRIG_RIGHT. . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
OSD_Color_LookUp_Data_Table. . . . . .  EXTERN   CODE   ARRAY    -----  -----
CAM_RAB_H. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
OSDStrInfo . . . . . . . . . . . . . .  PUBLIC   DATA   STRUCT   0000H  8
OSDStrInfo . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  8
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 111 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  cnt. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  addr . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  attr . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  str. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0004H  4
CAM_BA . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_AB . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
BYTE . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
TimeType . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  7
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  width. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  BackColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  Format . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  TimeColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  CursorColor. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
RAMFONTDATA. . . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
CAM_CA . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_AC . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
REVERSE_TRIG . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_BC . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_CB . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
FontTestWindow . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0053H  24
SourceModeTypeEnum . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
_utoa. . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  value. . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  str. . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0002H  3
  radix. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0005H  1
  cnt. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0006H  1
  str1 . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0007H  3
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    000AH  2
  div. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    000CH  2
struct_IdName. . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  17
  Id . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  Name . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0001H  16
EnumType . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  17
  Sz . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  ByLang . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  Str. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0002H  15
MenuType . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  4
  width. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  height . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  TitleColor . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  CursorColor. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
_WriteI2Cn . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CAM_RAB_T. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_ReadI2C . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CAM_RAC_T. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
WORD . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
CAM_RBC_T. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Init_Osd_DisplayTVChannel. . . . . . .  PUBLIC   CODE   ARRAY    00A4H  19
stopWatch. . . . . . . . . . . . . . .  EXTERN   DATA   U_INT    -----  2
LAST_TRIG_CAMC . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
LEFT_TRIG. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_AR . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_BR . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_RB . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
PARK_TRIG. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 112 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


CAM_CR . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Register . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
_WriteStringToAddr . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  addr . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  str. . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0002H  3
  cnt. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0005H  1
_WriteI2C. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
LAST_TRIG_REVERSE. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Init_Osd_DisplayVchipWindow. . . . . .  PUBLIC   CODE   ARRAY    007EH  19
_DrawAttrCnt . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  addr . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  color. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
  cnt. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0003H  1
No_TRIG. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
NumType. . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  5
  PrePostCharLen . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  PrePostChar. . . . . . . . . . . . .  MEMBER   -----  ARRAY    0001H  4
_DisplayRAMFont. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  scode. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  j. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
  takenTime. . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
_DownloadFont. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  cod. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  fontdata . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0001H  3
RegisterInfo . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  Min. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0000H  2
  Max. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0002H  2
  Default. . . . . . . . . . . . . . .  MEMBER   -----  INT      0004H  2
LAST_TRIG_LEFT . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_PCMDATA . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  22
  Support. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  HAN. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  VAN. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0003H  2
  IVF. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0005H  2
  CLOCK. . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0007H  2
  low. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0009H  2
  high . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000BH  2
  Hstart . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000DH  2
  Vstart . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000FH  2
  IPF. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0011H  2
  PPF. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0013H  2
  VBack. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0015H  1
WaitEndofDisplayArea . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ret. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
_GetOSDWindowX . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  winno. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  x. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
CAM_QUAD . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_GetOSDWindowY . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  winno. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  y. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
_DisplayROMFont. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  scode. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
DefineMenu . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  16
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 113 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  Icon . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0000H  2
  Desc . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0002H  3
  PreFnId. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  PostFnId . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  IconColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  DescColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
  Child. . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0009H  2
  Type . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000BH  1
  ActiveWithCursor . . . . . . . . . .  MEMBER   -----  U_CHAR   000CH  1
  Id . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000DH  1
  TypeData . . . . . . . . . . . . . .  MEMBER   -----  PTR      000EH  2
_SetOSDWindowX_TW88. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  winno. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  x. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  tmp. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0001H  2
  dat. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
_SetOSDWindowY_TW88. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  winno. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  y. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  tmp. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0001H  2
  dat. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
TRIGGER_NUM. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
SEQ. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
LongRegisterInfo . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  Min. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  Max. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  Default. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
Init_Osd_DisplayInput. . . . . . . . .  PUBLIC   CODE   ARRAY    00CAH  37
Init_Osd_DisplayLogo . . . . . . . . .  PUBLIC   CODE   ARRAY    006BH  19
PictureInfo. . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  4
  Register_Addr. . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  EEPROM_Addr. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  Control_Range. . . . . . . . . . . .  MEMBER   -----  PTR      0002H  2
CAM_RAC_T2 . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ABR_T3 . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_RBC_T2 . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ABR_T4 . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
ptrFont. . . . . . . . . . . . . . . .  PUBLIC   DATA   PTR      0008H  2
DownloadUDFont . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
CAM_A. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_B. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_C. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_Printf. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
VGA_TRIG . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_CAB. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_BAC. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ABC. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_InitOSDWindow . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ptr. . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0000H  3
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0003H  1
  page . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0004H  1
AWT_LAST_TRIGGER . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
Init_Osd_DisplayPCInfo . . . . . . . .  PUBLIC   CODE   ARRAY    00B7H  19


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2087    ----
C51 COMPILER V9.60.0.0   OSDBASIC                                                          06/22/2022 16:23:02 PAGE 114 

   CONSTANT SIZE    =    332    ----
   XDATA SIZE       =   ----      63
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     10    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
