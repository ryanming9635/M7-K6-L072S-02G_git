C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE DISPINFO
OBJECT MODULE PLACED IN .\Output\dispinfo.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE dispinfo.c LARGE OPTIMIZE(9,SIZE) BROWSE INCDIR(.\Include\) DEBUG OBJECT
                    -EXTEND CODE LISTINCLUDE SYMBOLS PRINT(.\Source\dispinfo.lst) TABS(2) OBJECT(.\Output\dispinfo.obj)

line level    source

   1          //
   2          #include "Config.h"
   1      =1  /*****************************************************************************/
   2      =1  /*                           System Configurations                           */
   3      =1  /*              rev 0.10 include auto test             */
   4      =1  // 0.11 change DTV, PC input initial download data correct for Charge Pump
   5      =1  // 0.12 correct phase measurement routine '>>3'
   6      =1  // 0.13 enable function for SPI control... only EXT MCU case
   7      =1  // 0.14 corrected PC measurement......
   8      =1  // 0.0a test function only for CVBS, SVIDEO
   9      =1  // 0.15 corrected DTV scaler setting for panel resolutions
  10      =1  // 0.0b panel for AND 640x480 TICON panel
  11      =1  // 0.16 corrected COMPONENT scaler setting for panel resolutions  11/21/2007
  12      =1  // 0.0c automatic chip test
  13      =1  // 0.17 add monitor function, osd grid for writing grid
  14      =1  // 0.18 add component, dtv pc for analogpanel, 12/06/2007
  15      =1  // 0.19 correct pal input for CES, 12/20/2007
  16      =1  // 0.1a CCFL control, 12/28/2007
  17      =1  // 0.19 Multi Grid for Banking on Internal MCU  01/17/2008
  18      =1  // 0.20 CCFL contol for backlight brightness  01/21/2008
  19      =1  // 0.21 CCFL contol for backlight brightness  01/25/2008
  20      =1  // 0.22 phase setting 02/07/2008
  21      =1  // 0.221 display input correction 04/03/2008
  22      =1  // 0.23 PC, DTV mode, no signal display
  23      =1  // 0.24 PC Auto Color adjustment
  24      =1  // 0.25 revised PC Auto Clock adjustment - find divide number and phase
  25      =1  // 0.26 Digital RGB for TW8826
  26      =1  // 0.27 Correct LVDS control          08/22/2008
  27      =1  // 0.28 Add WSVGA resolution          10/23/2008
  28      =1  // 0.29 Add NEW GRID              11/14/2008
  29      =1  // 0.30 Fix DTV input             12/10/2008
  30      =1  // 0.31 Add 1080i23, 24, 25A, 25B       01/20/2009
  31      =1  // 0.32 TCON setting FIX all mode       01/22/2009
  32      =1  // 0.33 autodetect is auto on/off by dip sw1  02/02/2009
  33      =1  // 0.34 Fix autocolor function and clamp position 02/08/2009
  34      =1  /*****************************************************************************/
  35      =1  #ifndef __CONFIG_H__
  36      =1  #define __CONFIG_H__
  37      =1  
  38      =1  //#define INTERNAL_MCU -- defined by Project Compiler session
  39      =1  #define   HS        
  40      =1  //#define   E_Wintek  
  41      =1  //#define   AWT 
  42      =1  //#define Holtz
  43      =1  
  44      =1  //#define QUAD
  45      =1  
  46      =1  #ifdef QUAD
           =1   #define AWT_ML072Q  //Pinchi 20150827 disable for HTRV
           =1 //  #define HTRV  //Pinchi 20140902 disable for AWT ML072Q
           =1 #else
  50      =1    #define AWT_ML072S
  51      =1  #endif
  52      =1  
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 2   

  53      =1  //--------------------------------------------------
  54      =1  //              Common Feature Define
  55      =1  //--------------------------------------------------
  56      =1  //#define FIRST_RUN_FROM_AC  //Pinchi 20150831 disable for Screen re-setting by Set4WideScreen()  //Pinchi
             - 20141029 add
  57      =1  #define SUPPORT_ML072Q_AUTO_DAY_NIGHT  //Pinchi 20150825 add for function define
  58      =1  #define SUPPORT_TRIGGER_EXIT_MENU  //Pinchi 20150827 add for exit OSD Menu by CAM trigger
  59      =1  #define SUPPORT_AC_ON_NORMAL_SCREEN  //Pinchi 20150901 add to set 4:3 screen when AC on
  60      =1  
  61      =1  #define FIX_DISPLAY_OFF_TRIGGER_ISSUE  //Pinchi 20150908 add to fix [Display] set OFF and trigger release 
             -then trigger again during display info the CAM will change from trigger CH to original CH
  62      =1  #define FIX_EXIT_STANDBY_NO_AUDIO  //Pinchi 20150908 add to fix no audio output when exit Standby mode
  63      =1  #ifdef AWT_ML072Q
           =1 #define FIX_2835_SCREEN_NOISE  //Pinchi 20160929 add to fix the screen noise of TW2835 by change DDR to ma
             -ke clock shift
           =1 #endif
  66      =1  
  67      =1  #define SUPPORT_NEW_TRIGGER_FUNCTION  /////修改新的Trigger方式減少trigger polling 時間 add by ryan@2018012
             -4
  68      =1  
  69      =1  //#define AWT_ML072QS_MSG  //Pinchi 20140925 add
  70      =1  //#define REDUCE_DELAY_TIME  //Pinchi 20141029 add
  71      =1  //#define DISPLAY_TECHWELL_LOGO  //Pinchi 2050903 add to disable the Techwell logo
  72      =1  
  73      =1  //#define SUPPORT_SVIDEO                     //andy Awt 20090914
  74      =1  //#define SUPPORT_COMPONENT     // support component analog to decoder//andy Awt 20090914
  75      =1  //#define SUPPORT_DTV           // support DTV input through component( to ADC ).//andy Awt 20090914
  76      =1  //#define SUPPORT_PC        // support PC function
  77      =1  //#define SUPPORT_DVI       // support DVI input
  78      =1  //#define SUPPORT_SDCARD
  79      =1  
  80      =1  #define SUPPORT_2835_CLK_TUNE_BACK_DOOR  //Pinchi 20160913 add to fine tune TW2835 clock by hot key
  81      =1  //#define SUPPORT_DISPLAY_TEST_VERSION  //Pinchi 20150929 add to display test software version on OSD
  82      =1  
  83      =1  //--------------------------------------------------
  84      =1  //              Model Feature Define
  85      =1  //--------------------------------------------------
  86      =1  #if (defined AWT_ML072Q) || (defined AWT_ML072S)
  87      =1  #define AWT_ML072QS_FW_RULE  //Pinchi 20140902 add
  88      =1  //#define AWT_NEW_SLIM_MODEL  //Pinchi 20150203 add for AWT new slim model
  89      =1  #define AWT_NO_SIGNAL_MSG  //Pinchi 20150319 add for display "NO VIDEO SIGNAL" by AWT request of 20150302
  90      =1  #define AWT_TW2835_DRAW_T_ICON  //Pinchi 20150415 add to draw T icon by TW2835 when CAM C trigger
  91      =1  #define SUPPORT_AC_ON_REDUCE_TIME  //Pinchi 20150903 add to reduce Power time when AC on
  92      =1  
  93      =1  //#define SUPPORT_TRIGGER_RELEASE_DELAY  //Pinchi 20150908 add to support delay time when CAM trigger rele
             -ase
  94      =1  
  95      =1  typedef enum  //Pinchi 20150326 add
  96      =1  {
  97      =1       LAST_TRIG_NON =  0x00,
  98      =1       LAST_TRIG_LEFT =   0x01,
  99      =1       LAST_TRIG_RIGHT =  0x02,
 100      =1       LAST_TRIG_REVERSE =0x03,
 101      =1       LAST_TRIG_CAMC =   0x04,
 102      =1  
 103      =1  } AWT_LAST_TRIGGER;
 104      =1  
 105      =1  #endif
 106      =1  
 107      =1  
 108      =1  #ifdef HTRV  //Pinchi 20150825 add
           =1 #define HTRV_ML072Q_FW_RULE  //Pinchi 20150827 add
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 3   

           =1 #define HTRV_REDUCE_SCREEN_CHANGE  //Pinchi 20150828 add to reduce screen double change
           =1 
           =1 #if 0  //Pinchi 20151209 add to remove 4:3 screen by HTRV request of 20151209
           =1 #define HTRV_SUPPORT_4_3_SCREEN
           =1 #else
           =1 #undef SUPPORT_AC_ON_NORMAL_SCREEN  //Pinchi 20151210 add
           =1 #endif
           =1 
           =1 #endif
 119      =1  
 120      =1  //#define SUPPORT_RS485
 121      =1  //-----------------------------------------------------------------------------
 122      =1  //    Firmware Version
 123      =1  //-----------------------------------------------------------------------------
 124      =1  #ifdef HTRV  //Pinchi 20150907 add
           =1 //#define FWVER     0x200 // Rev 2.00
           =1 //#define FWVER     0x210   // Rev 2.1  //Pinchi 20151209 update version for HTRV request to remove 4:3 scree
             -n
           =1 //#define FWVER     0x220   // Rev 2.2  //Pinchi 20160929 change for V2.2
           =1 #define FWVER     0x230     //Rev 2.3    ryan@20170727 update version by Encoder switches零件 EOL更換
           =1 #else
 130      =1  #define FWVER     0x210   // Rev 0.14
 131      =1  #endif
 132      =1  
 133      =1  //-----------------------------------------------------------------------------
 134      =1  //    Compiler
 135      =1  //-----------------------------------------------------------------------------
 136      =1  #define KEILC           // Keil C 5.0
 137      =1  //-----------------------------------------------------------------------------
 138      =1  //    MPU Clock
 139      =1  //-----------------------------------------------------------------------------
 140      =1  #ifndef INTERNAL_MCU
 141      =1  //#define CLOCK_11M         // 11.0592MHz
 142      =1  #define CLOCK_22M         // 22.1184MHz
 143      =1  #else                 // INTERNAL_MCU
           =1 #define CLOCK_27M         // 27MHz
           =1 #define REG_START_ADDRESS 0xc000    // register start 0xc000, for page0, 0xc100-page1 
           =1 #endif
 147      =1  //-----------------------------------------------------------------------------
 148      =1  //    TW88 Version
 149      =1  //-----------------------------------------------------------------------------
 150      =1  #define TW8816   ///AWT TW8806 change to TW8816 platform //ryan@20170921
 151      =1  //-----------------------------------------------------------------------------
 152      =1  //-----------------------------------------------------------------------------
 153      =1  //    Options for Backlight control
 154      =1  //-----------------------------------------------------------------------------
 155      =1  //#define BACKLIGHT_CCFL
 156      =1  //#define BACKLIGHT_LED
 157      =1  #define BACKLIGHT_PWM
 158      =1  
 159      =1  //-----------------------------------------------------------------------------
 160      =1  //    Panel Resolution
 161      =1  //-----------------------------------------------------------------------------
 162      =1  // ---- Select Default Panel
 163      =1  //
 164      =1  //#define UXGA            // 1600 x 1200
 165      =1  //#define SXGA              // 1280 x 1024
 166      =1  //#define XGA  // 1024 x 768
 167      =1  #ifdef XGA
           =1   #define LVDS          
           =1   #define PWIDTH  1024
           =1   #define PHEIGHT 768
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 4   

           =1 #endif
 172      =1  //#define SVGA            //  800 x 600
 173      =1  //#define VGA             //  640 x 480
 174      =1  #ifdef VGA
           =1   #define PWIDTH  640
           =1   #define PHEIGHT 480
           =1   //#define HITACHI_640_B_160   //--> 640 x 160
           =1   #define AND_640_480
           =1 #endif
 180      =1  //#define WXGA            // 1280 x 768 (15:9) // 1366 x 768 (16:9)
 181      =1  #ifdef WXGA
           =1     //#define WX_SHARP_LQ106K1LA
           =1   #define PWIDTH  1280
           =1   #define PHEIGHT 768
           =1 #endif
 186      =1  //#define WSVGA           // 1024 x 600 *** only video mode
 187      =1  #ifdef WSVGA
           =1   #define PWIDTH  1024
           =1   #define PHEIGHT 600
           =1   #define UNIDEN_1024_600
           =1 #endif
 192      =1  #define WVGA            //  800 x 480
 193      =1  #ifdef WVGA
 194      =1    #define PWIDTH  800
 195      =1    #define PHEIGHT 480//600
 196      =1    // If WVGA, you have to select panel.
 197      =1    //#define AU_10INCH
 198      =1    //#define WVGA_TPO
 199      =1    //#define SAMSUNG_10INCH
 200      =1    //#define SAMSUNG_TICONLESS_10INCH
 201      =1    //#define SHARP_TICONLESS_7INCH
 202      =1    //#define AU_TICONLESS_7INCH
 203      =1    //#define AU_G084SN05V8_8_4INCH 
 204      =1    #define HSD070IDW1_7INCH
 205      =1    //#define INNOLUX_AT080TN03
 206      =1    //#define AU_TICONLESS_7INCH_CCFL
 207      =1    //#define CMO     // CHIMEI panel
 208      =1    //#define AU_TICONLESS_10INCH
 209      =1    //#define HITACHI_T01
 210      =1    //#define HITACHI_TX23D12
 211      =1    //#define HITACHI_TX18D24
 212      =1    //#define HITACHI_TX18D16
 213      =1    //#define TMD_LTA070A320F
 214      =1    //#define TMD_LTA080B
 215      =1  #endif  //WVGA
 216      =1  //#define HVGA            //  480 x 320
 217      =1  //#define QVGA            //  320 x 240 *** only video mode
 218      =1  #ifdef QVGA
           =1   #define PWIDTH  320
           =1   #define PHEIGHT 240
           =1   //#define HITACHI_TX09D73
           =1   //#define AU_DELTARGB
           =1   //#define SHARP_LQ050Q5DR01
           =1   //#define SHARP_LQ035
           =1   //#define TMD
           =1 #endif
 227      =1  
 228      =1  //#define WQVGA           //  480 x 234 *** only video mode
 229      =1  #ifdef WQVGA
           =1   #define PWIDTH  480
           =1   #define PHEIGHT 240
           =1   // If WQVGA, you have to select panel 
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 5   

           =1     #define ANALOG_7INCH
           =1   //#define PWIDTH  400
           =1   //#define PHEIGHT 240
           =1   //#define SHARP_LQ043T3DX02   //  400 x 237
           =1   //#define LG_ANALOG
           =1   //#define TMD_ANALOG        //TMD_LTA05B352A
           =1   //#define T_51945GD       // Optorex Panel
           =1 #endif  // WQVGA
 241      =1  
 242      =1  //if LVDS pannel disable TICONLESS
 243      =1  
 244      =1  //-----------------------------------------------------------------------------
 245      =1  //---- Add Support One more panel with DIPSW#1
 246      =1  //---- Ex. Add Analog AU 7" Panel with Default Panel for evalution
 247      =1  //#define ADD_ANALOGPANEL   // Added Analog panel(AU7") from default set panel(expect WQVGA) with DIP #1 sw
             -itch.(DIP#1=L:ANALOG, H:DEFAULT)
 248      =1                // It can't support WQVGA and ADD_ANALOGPANEL same time!!
 249      =1    //#define ADD_ANALOG_7INCH
 250      =1    //#define ADD_TMD_LTA05B352A
 251      =1                    
 252      =1  //---- Support Wide panel function
 253      =1  #if (defined WXGA) || (defined WSVGA) || (defined WVGA) || (defined WQVGA)
 254      =1  #if 0///ryan@20180115//mask for NTSC sharpness issue
           =1 #define WIDE_SCREEN         // Can support 4 display mode, i.e. Normal, Wide, Full, Zoom
           =1 #endif
 257      =1  #endif                // Tested panasonic WVGA panel.
 258      =1  
 259      =1  //-----------------------------------------------------------------------------
 260      =1  //    Panel Vendor Specific
 261      =1  //-----------------------------------------------------------------------------
 262      =1  
 263      =1  //-----------------------------------------------------------------------------
 264      =1  //    TV Tuner
 265      =1  //-----------------------------------------------------------------------------
 266      =1  #define PHILIPS       0
 267      =1  #define ALPS        1   // ALPS, LG
 268      =1  #define TEMIC       2
 269      =1  #define TVAVA       3
 270      =1  #define LGTUNER       4
 271      =1  #define SAMSUNGMUTITUNER  5
 272      =1  
 273      =1  #define TVTunerDevice   4
 274      =1  //-----------------------------------------------------------------------------
 275      =1  //    IR Remote Controller Type
 276      =1  //-----------------------------------------------------------------------------
 277      =1  //#define REMO_RC5          // RC5 style
 278      =1  #define TECHWELL_REMOCON
 279      =1  //#define REMO_NEC          // NEC style
 280      =1  //#define PHILIPS_REMOCON // New remocon 
 281      =1  
 282      =1  //-----------------------------------------------------------------------------
 283      =1  //    I2C Device Access Address Mapping
 284      =1  //-----------------------------------------------------------------------------
 285      =1  
 286      =1  #define EEPROMI2CAddress  0xa0  // EEPROM (24C16)
 287      =1  #define TW88I2CAddress    0x8a  // TW880x
 288      =1  
 289      =1  #define MSPI2CAddress   0x80  // MSP
 290      =1  #define ALC106I2CAddress  0x4A  // MSP
 291      =1  //-----------------------------------------------------------------------------
 292      =1  //    Options for Possible Inputs
 293      =1  //-----------------------------------------------------------------------------
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 6   

 294      =1  
 295      =1  
 296      =1  //-----------------------------------------------------------------------------
 297      =1  //    Options for Possible Standards
 298      =1  //    Default:NTSC
 299      =1  //-----------------------------------------------------------------------------
 300      =1  #define SUPPORT_PAL     
 301      =1  #define SUPPORT_SECAM
 302      =1  #define SUPPORT_NTSC4   
 303      =1  #define SUPPORT_PALM  
 304      =1  #define SUPPORT_PALN    
 305      =1  #define SUPPORT_PAL60   
 306      =1  
 307      =1  //#define ID_CHECK_BY_FW        // in Video mode, check input system ID by firmware
 308      =1  
 309      =1  //-----------------------------------------------------------------------------
 310      =1  //    Options for Debugging/Release
 311      =1  //-----------------------------------------------------------------------------
 312      =1  //#define SUPPORT_PATTERN       // support LCD test pattern
 313      =1  
 314      =1  #ifndef WQVGA
 315      =1    #ifndef QVGA
 316      =1  #define SUPPORT_OSDPOSITIONMOVE
 317      =1    #endif
 318      =1  #endif
 319      =1  
 320      =1  #define SERIAL              // include serial communication routines
 321      =1  
 322      =1  //#define SUPPORT_DEBUG       // Support to use Read & Write in debug OSD Window by remocon.
 323      =1  
 324      =1  //#define DEBUG           // include debug information
 325      =1  #ifdef DEBUG
           =1   //#define DEBUG_MAIN
           =1   //#define DEBUG_TIME
           =1   //#define DEBUG_KEYREMO
           =1   //#define DEBUG_TW88
           =1   //#define DEBUG_DECODER
           =1   //#define DEBUG_I2C
           =1   //#define DEBUG_EEP
           =1   //#define DEBUG_OSD
           =1   //#define DEBUG_AUDIO
           =1   //#define DEBUG_SETPANEL
           =1   //#define DEBUG_DTV
           =1 //  #define DEBUG_PC
           =1   //#define DEBUG_PC_MEAS
           =1   //#define DEBUG_PC_COLOR
           =1   //#define DEBUG_COMPONENT
           =1   //#define DEBUG_BANK
           =1   //#define DEBUG_PAUSE
           =1   //#define DEBUG_MCU
           =1 #endif
 345      =1  
 346      =1  #define AUTOCALC_PC         // in PC mode, Enable Auto Calcuration
 347      =1  //#define SUPPORT_USERCOLORFROMTXT  // Use color setting of text file in Color mode=USER MODE which is as B
             -rightness(Reg10), Contast(Reg11),
 348      =1                    //    Sat_U(Reg13),Sat_V(Reg14),Sharpness(Reg12,Reg78)                  
 349      =1  //#define SUPPORT_GAMMA
 350      =1  
 351      =1  //#define CHIP_MANUAL_TEST      // DIPSW#1
 352      =1  
 353      =1  #ifndef INTERNAL_MCU
 354      =1  //#define NO_INITIALIZE       // After Power switch turn on with DIP SW4 Enable(Low), or pressed MENU button 
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 7   

             -for internal MCU
 355      =1                                      //     micom works to access only I2C bus by serial command.
 356      =1  #endif
 357      =1  
 358      =1  //#define SUPPORT_KRS_OSDDEMO   // For KRS Company Demo 
 359      =1  //#define SUPPORT_LINE_OSDDEMO
 360      =1  
 361      =1  //-----------------------------------------------------------------------------
 362      =1  //    Special Features
 363      =1  //-----------------------------------------------------------------------------
 364      =1  
 365      =1  #ifndef INTERNAL_MCU
 366      =1  //#define SUPPORT_DELTA_RGB
 367      =1  #endif
 368      =1  #define SUPPORT_SELECTKEY     // choose the keymap of using select key or left,right key.
 369      =1  //-----------------------------------------------------------------------------
 370      =1  
 371      =1  //#define HS_NEWOSDMENU     //Weylis -@121008 for Hor. Style OSD
 372      =1  //#define HS_NEWOSDMENU_2     //Weylis -@121008 for Hor. Style OSD(2 line)
 373      =1  
 374      =1  #endif  //__CONFIG_H__
 375      =1  
   3          
   4          #include "typedefs.h"
   1      =1  #ifndef __TYPEDEFS__
   2      =1  #define __TYPEDEFS__
   3      =1  
   4      =1  
   5      =1  #define DATA    data
   6      =1  #define PDATA   pdata
   7      =1  #define IDATA   data
   8      =1  #define CODE    code
   9      =1  #define CODE_P
  10      =1  #define PDATA_P
  11      =1  #define IDATA_P
  12      =1  #define DATA_P
  13      =1  
  14      =1  #define INTERRUPT( num, name ) name() interrupt num
  15      =1  
  16      =1  #define _between(x, a, b) (a<=x && x<=b)
  17      =1  #define _swap(a, b)     { a^=b; b^=a; a^=b; }
  18      =1  
  19      =1  typedef unsigned char Register;
  20      =1  typedef unsigned char BYTE;
  21      =1  typedef unsigned short  WORD;
  22      =1  typedef unsigned long DWORD;
  23      =1  
  24      =1  #define TRUE  1
  25      =1  #define FALSE 0
  26      =1  
  27      =1  //VInputStdDetectMode
  28      =1  #define AUTO  0
  29      =1  
  30      =1  //VInputStd
  31      =1  #define NTSC  1     
  32      =1  #define PAL   2
  33      =1  #define SECAM 3
  34      =1  #define NTSC4 4
  35      =1  #define PALM  5
  36      =1  #define PALN  6
  37      =1  #define PAL60 7
  38      =1  
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 8   

  39      =1  #define MAXINPUTSTD PAL60+1 // 
  40      =1  
  41      =1  #define UNKNOWN 0xfe
  42      =1  #define NOINPUT 0 //0xff
  43      =1  
  44      =1  #define NIL     0xff
  45      =1  
  46      =1  enum SourceModeTypeEnum
  47      =1  { 
  48      =1    AVMode,      // 0   0X00
  49      =1    //VGAMode,       // 1
  50      =1  #ifdef USE_CAMD 
           =1   CAM_D,         // 2
           =1 #endif
  53      =1    CAM_A,         // 3   0x01
  54      =1    CAM_B,         // 4   0x02
  55      =1    CAM_C,         // 5   0x03
  56      =1    CAM_R,         // 6   0x04
  57      =1    CAM_AB,        // 7   0x05
  58      =1    CAM_CR,        // 8   0x06
  59      =1    CAM_AR,        // 9   0x07
  60      =1    CAM_RB,        // 10    0x08
  61      =1    CAM_AC,        // 11    0x09
  62      =1    CAM_CB,        // 12    0x0a
  63      =1    CAM_RAB_T,     // 13    0x0b
  64      =1    CAM_RAB_H,     // 14    0x0c
  65      =1  
  66      =1    #ifdef HTRV
           =1   CAM_RC,
           =1   #endif
  69      =1    
  70      =1    CAM_QUAD,      // 15    0x0d
  71      =1    CAM_ABR_T3,    // 16    0x0e
  72      =1    CAM_ABR_T4,    // 17    0x0f
  73      =1    CAM_RAC_T,      //  0x10
  74      =1    CAM_RBC_T,      //  0x11
  75      =1    CAM_RAC_T2,     //  0x12
  76      =1    CAM_RBC_T2,     //  0x13
  77      =1    CAM_BA,       //  0x14
  78      =1    CAM_BC,       //  0x15
  79      =1    CAM_BR,       //  0x16
  80      =1    CAM_CA,       //  0x17
  81      =1    CAM_ABC,      //  0x18
  82      =1    CAM_ABR,      //  0x19
  83      =1    CAM_ACR,      //  0x1a
  84      =1    CAM_BAC,      //  0x1b
  85      =1    CAM_BAR,      //  0x1c
  86      =1    CAM_BCR,      //  0x1d
  87      =1    CAM_CAB,      //  0x1e
  88      =1    CAM_CAR,      //  0x1f
  89      =1    CAM_CBR,      //  0x20
  90      =1    SEQ,           // 18      0x10
  91      =1    CAM_NUM
  92      =1  };
  93      =1  
  94      =1  typedef unsigned char SourceModeType;
  95      =1  
  96      =1  #endif  /* __TYPEDEFS__ */
  97      =1  
   5          #include "Debug.h"
   1      =1  #ifndef __DEBUG__
   2      =1  #define __DEBUG__
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 9   

   3      =1  
   4      =1  #define DEBUG_ERR 1
   5      =1  #define DEBUG_WARN  2
   6      =1  #define DEBUG_INFO  3
   7      =1  #define DEBUG_BREAK 4
   8      =1  
   9      =1  #ifdef DEBUG_PAUSE
           =1 #define Pause(a)  { Printf("\r\n"); Printf(a); while(!RS_ready()); RS_rx(); }
           =1 #endif
  12      =1  //#define BURSTLOCK 7
  13      =1  
  14      =1  void DebugWindowControl (void) ;
  15      =1  void Draw_Debug_Char(void);
  16      =1  void DebugWindowCursor( BYTE flag ) ;
  17      =1  void DebugWindowData( BYTE flag ) ;
  18      =1  void Debug_Write(void);
  19      =1  void Debug_Read(void);
  20      =1  
  21      =1  
  22      =1  
  23      =1  #endif  // __DEBUG__
  24      =1  
  25      =1  #ifdef CHIP_MANUAL_TEST
           =1 BYTE DelaynCheck(void);
           =1 void ChipManualTest(void);
           =1 
           =1 #endif
   6          #include "main.h"
   1      =1  #ifndef __MAIN__
   2      =1  #define __MAIN__
   3      =1  
   4      =1  #define ON          1
   5      =1  #define OFF         0
   6      =1  #if 1//ryan@20171214
   7      =1  #define Hs_debug
   8      =1  #define Monitor_debug  
   9      =1  //#define Trigger_debug 
  10      =1  #endif
  11      =1  
  12      =1  
  13      =1  //#define DVR
  14      =1  #define Format_SDCard
  15      =1  #define BJTSwitch
  16      =1  
  17      =1  #define Panel_Enable()    P4=P4|0x08 //andy 980908
  18      =1  #define Panel_Disable()   P4=P4&0xf7
  19      =1  
  20      =1  #if 0
           =1 #define SetBacklight()      P4=P4|0x04
           =1 #define clrBacklight()      P4=P4&0xfb
           =1 #else
  24      =1  #define SetBacklight()    P4=P4&0xfb
  25      =1  #define clrBacklight()    P4=P4|0x04
  26      =1  #endif
  27      =1  
  28      =1  //InputSelection
  29      =1  struct struct_IdName {
  30      =1    BYTE  Id;
  31      =1    BYTE  Name[16];
  32      =1  };
  33      =1  
  34      =1  #define CH_TW2835       1
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 10  

  35      =1  #define CH_CAMD       2
  36      =1  #define CH_AV         3
  37      =1  #define PC          7
  38      =1  #define ChineseDefaultMenu  8
  39      =1  
  40      =1  #define SVIDEO        2
  41      =1  #define COMPONENT     3
  42      =1  //#define ANALOGDTV     4
  43      =1  #define DTV         4
  44      =1  #define TV          5
  45      =1  #define SCART       6
  46      =1  
  47      =1  #ifdef HS
  48      =1  #define CH_CAMB         4
  49      =1  #endif
  50      =1  
  51      =1  #define DIGITALVGA      8
  52      =1  
  53      =1  #define AIRTV       0 //9
  54      =1  #define CABLETV       1 //0xa
  55      =1  
  56      =1  #define TVTUNER       0xd   //10
  57      =1  #define MUTE        1 
  58      =1  #define MENU        2 
  59      =1  #define TVVOL       4 
  60      =1  #ifdef AWT_ML072S
  61      =1  #define VLOSSINFO     8 
  62      =1  #else
           =1 #define CC          8 
           =1 #endif
  65      =1  #define INPUTINFO     0x10
  66      =1  #define PCINFO        0x20
  67      =1  #define GAUGEINFO       0x40
  68      =1  //#define RATINGINFO      0x40
  69      =1  #define TVCHN       0x80
  70      =1  //#define MUTE        0x40
  71      =1  
  72      =1  #define YPBPR_480i      0
  73      =1  #define YPBPR_576i      1
  74      =1  #define YPBPR_480p      2
  75      =1  #define YPBPR_576p      3
  76      =1  #define YPBPR_1080i     4
  77      =1  #define YPBPR_720p      5
  78      =1  #define YPBPR_720p50    6
  79      =1  
  80      =1  //---------------------- Feature Define ----------------------------
  81      =1  #ifdef AWT_ML072Q
           =1 
           =1 //mask by ryan@20171018   #define AWT_ML720Q_NEW_TRIGGER_FUN    //Pinchi 20141031 add for AWT request each t
             -rigger can work by PRIORITY OFF
           =1 #define AWT_ADD_TRIGGER_DELAY_FUN 
           =1 #define AWT_SUPPORT_4_3_SCREEN    //ryan@20170907 
           =1 #endif
  87      =1  
  88      =1  #ifdef AWT_ML072S
  89      =1  #define AWT_ADD_TRIGGER_DELAY_FUN 
  90      =1  #endif
  91      =1  
  92      =1  //--------------------------- P0 Define -----------------------------
  93      =1  //#define SEL_MIX     P0_6  // 
  94      =1  //--------------------------- P1 Define -----------------------------
  95      =1  //#define SEL_DVI     P3_5  //LJY062001   
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 11  

  96      =1  
  97      =1  #define TW88HWReset     P3_4  //LJY001010 //LJY000721
  98      =1  #define PowerUp       P3_7
  99      =1  //======================= CDS Control ================================= 
 100      =1  //#define CDS_CTRL           P1_5
 101      =1  extern BYTE SelectModeType;
 102      =1  extern BYTE InputSelection;
 103      =1  extern BYTE SEQTime;
 104      =1  extern BYTE Priority;
 105      =1  extern BYTE PowerFlag;
 106      =1  //extern bit AutoDayNight;
 107      =1  extern bit SDCardCoverDetect;
 108      =1  
 109      =1  BYTE keyIn(void);
 110      =1  void TimerForRemocon(void);
 111      =1  void TimerForTick(void);
 112      =1  void DisableRemoconInt(void);
 113      =1  BYTE SetSupport_remocon(BYTE newd);
 114      =1  
 115      =1  void delay(BYTE cnt);
 116      =1  
 117      =1  BYTE RS_ready(void);
 118      =1  #ifdef Monitor_debug
 119      =1  BYTE RS_rx(void);
 120      =1  #endif
 121      =1  void RS_tx(BYTE tx_buf);
 122      =1  
 123      =1  BYTE RS2_rx(void);
 124      =1  void RS2_tx(BYTE tx_buf);
 125      =1  
 126      =1  void NewLine(void);
 127      =1  void PutsP(PDATA_P BYTE *ptr);
 128      =1  #ifdef Hs_debug
 129      =1  //void MonWriteI2C(BYTE addr, BYTE index, BYTE val);
 130      =1  //BYTE MonReadI2C(BYTE addr, BYTE index);
 131      =1  #endif
 132      =1  BYTE Asc1Bin(BYTE asc);
 133      =1  BYTE Asc2Bin(PDATA_P BYTE *s);
 134      =1  
 135      =1  void I2CDeviceInitialize( CODE_P BYTE *RegSet);
 136      =1  
 137      =1  //void RestartSystemClock(WORD clock_hm);
 138      =1  WORD GetTime_ms(void);
 139      =1  #if 0
           =1 BYTE GetTime_H(void);
           =1 BYTE GetTime_M(void);
           =1 #endif
 143      =1  void ChangeTime_H( char add );
 144      =1  void ChangeTime_M( char add );
 145      =1  //WORD GetWakeupTime(void);
 146      =1  //void SetWakeupTime(WORD wtime);
 147      =1  
 148      =1  
 149      =1  //WORD GetOffTime(void);
 150      =1  //void SetOffTime(WORD wtime);
 151      =1  //BYTE GetSleepTimer(void);
 152      =1  //void SetSleepTimer(BYTE stime);
 153      =1  WORD DiffTime_ms( WORD stime, WORD etime );
 154      =1  //void SetLastBlockedTime(void);
 155      =1  void SetLastCCTime(void);       //ljy010904...CC_FIX_CLEAR_ON_TIME
 156      =1  
 157      =1  void SetOSDLastKeyInTime(void);
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 12  

 158      =1  WORD GetOSDLastKeyInTime(void);
 159      =1  WORD GetIVF(void);
 160      =1  DWORD GetIHF(void);
 161      =1  BYTE ReadVInputSTD(void);
 162      =1  void SetVInputStd(BYTE newd);
 163      =1  BYTE GetVInputStd(void);
 164      =1  BYTE GetInputSelection(void);
 165      =1  #ifdef ADD_ANALOGPANEL
           =1 BYTE IsAnalogOn(void);
           =1 #endif
 168      =1  void InitVideoData(BYTE src);
 169      =1  void ChangeVInputStdDetectMode(BYTE val);
 170      =1  BYTE GetVInputStdInx(void);
 171      =1  
 172      =1  void MonWriteI2Cn_(BYTE addr, BYTE *val, BYTE cnt) ;
 173      =1  
 174      =1  void CheckNewTriggerFunc(void);
 175      =1  ///void Usage(void);
 176      =1  #ifdef Monitor_debug
 177      =1    void Prompt(void);
 178      =1  #endif
 179      =1  void DebugKeyIn(BYTE ikey);
 180      =1  void DVIPowerDown(bit flag);
 181      =1  void PowerDown_XTAL(bit flag);
 182      =1  
 183      =1  void ChangeInput(BYTE newsel);
 184      =1  
 185      =1  
 186      =1  void WaitPowerOn(void);
 187      =1  void PowerOff(void);
 188      =1  BYTE GetNextInputSelection(void);
 189      =1  
 190      =1  BYTE WantToStopTVScan(void);
 191      =1  
 192      =1  //BYTE IsTW8801(void);
 193      =1  //BYTE IsTW8803(void);
 194      =1  //BYTE ConvertVideoVSAT(BYTE reg);
 195      =1  
 196      =1  BYTE IsNoInput(void);
 197      =1  void LoadEEPROM (void);
 198      =1  void Hs_InitVars(void);
 199      =1  void AdjustAutoDayNight(BYTE val);
 200      =1  void ACCPowerControl(void);
 201      =1  void ON_LVDS(void);
 202      =1  void OFF_LVDS(void);
 203      =1  void main_loop(void);
 204      =1  struct RegisterInfo
 205      =1  {
 206      =1     int  Min;
 207      =1     int  Max;
 208      =1     int  Default;
 209      =1  };
 210      =1  struct LongRegisterInfo
 211      =1  {
 212      =1     WORD Min;
 213      =1     WORD Max;
 214      =1     WORD Default;
 215      =1  };
 216      =1  
 217      =1  
 218      =1  typedef enum   ///add enum  by ryan@20170907
 219      =1  {
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 13  

 220      =1    NORMALL_MODE,
 221      =1    REVERSE_TRIG,
 222      =1    LEFT_TRIG,
 223      =1    RIGHT_TRIG,
 224      =1  #ifdef USE_CAMD 
           =1   CAMD_TRIG,
           =1 #endif  
 227      =1    CAMC_TRIG,
 228      =1    VGA_TRIG,
 229      =1    PARK_TRIG,
 230      =1    No_TRIG,
 231      =1    TRIGGER_NUM
 232      =1  }TriggerModeType;
 233      =1  
 234      =1  
 235      =1  #endif  // __MAIN__
 236      =1  
   7          
   8          
   9          #include "osdbasic.h"
   1      =1  //osd_basic.h
   2      =1  //LJY11012001
   3      =1  #ifndef __OSD_BASIC__
   4      =1  #define __OSD_BASIC__
   5      =1  
   6      =1  // osd_basic.h
   7      =1  // char code
   8      =1  //#include "apilib.h"
   9      =1  
  10      =1  //ljy052903
  11      =1  //definition for internal OSD
  12      =1  #define FONT_WIDTH_TW88     12
  13      =1  #define FONT_HEIGHT_TW88    18
  14      =1  #define PIXS_PER_XSTEP_TW88   8
  15      =1  #define LINES_PER_YSTEP_TW88  4
  16      =1  #define MAX_OSDWINDOW_TW88    8
  17      =1  
  18      =1  // Using TW88 OSD for Menu
  19      =1  #define FONT_WIDTH      12
  20      =1  #define FONT_HEIGHT     18
  21      =1  #define PIXS_PER_XSTEP    8
  22      =1  #define LINES_PER_YSTEP   4
  23      =1  #define MAX_OSDWINDOW   4
  24      =1  
  25      =1  #define MAX_FONT_BYTES    27
  26      =1  #define RAMFONT   0xFE
  27      =1  #define ROMFONT   0xFF
  28      =1  #define NO_UDFONT     226 
  29      =1  
  30      =1  #define FONT_ROM  1
  31      =1  #define FONT_RAM  2
  32      =1  
  33      =1  
  34      =1  /////////////////////////////////
  35      =1  // Old Registers...
  36      =1  /*
  37      =1    #define TW88_WIN1ATTR   0x76
  38      =1    #define TW88_WIN1XSTART   0x77
  39      =1    #define TW88_WIN1YSTART   0x78
  40      =1    #define TW88_WIN1WIDTH    0x79
  41      =1    #define TW88_WIN1HEIGHT   0x7a
  42      =1    #define TW88_WIN1BRDATTR  0x7b
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 14  

  43      =1    #define TW88_WIN1BRDWIDTH 0x7c
  44      =1    #define TW88_WIN1BRDHEIGHT  0x7d
  45      =1    #define TW88_WIN1XSPACE   0x7e    // between characters.
  46      =1    #define TW88_WIN1YSPACE   0x7f
  47      =1    #define TW88_WIN1SADDR    0x80    // starting address of OSD ram for Windows 1
  48      =1  */
  49      =1  /////////////////////////////////
  50      =1  
  51      =1  // OSD
  52      =1  #define TW88_ENABLERAM    0x94  // TW8804C
  53      =1  #define TW88_FONTRAMADDR  0x99  // TW8804C
  54      =1  #define TW88_FONTRAMDATA  0x9a  // TW8804C
  55      =1  #define TW88_OSDRAMADDRHI 0x95  // TW8804C
  56      =1  #define TW88_OSDRAMADDRLO 0x96  // TW8804C
  57      =1  #define TW88_OSDRAMDATAHI 0x97  // TW8804C
  58      =1  #define TW88_OSDRAMDATALO 0x98  // TW8804C
  59      =1  #define TW88_MULTISTART   0x9b  // TW8804C
  60      =1  #define TW88_OSDLOCKUPSEL 0x9c
  61      =1  #define TW88_WINNUM     0x9e  // TW8804C
  62      =1  #define TW88_WINATTR    0x9f  //
  63      =1  #define TW88_WINXSTART    0xa1  //
  64      =1  #define TW88_WINYSTART    0xa2  //
  65      =1  #define TW88_WINSTART_HI  0xa0  //
  66      =1  #define TW88_WINWIDTH   0xa3  //
  67      =1  #define TW88_WINHEIGHT    0xa4  //
  68      =1  #define TW88_WINBRDATTR   0xa5  //
  69      =1  #define TW88_WINBRDWIDTH  0xa6  //
  70      =1  #define TW88_WINBRDHEIGHT 0xa7  //
  71      =1  #define TW88_WINSPACE   0xa8  // between characters.
  72      =1  #define TW88_WINZOOM    0xa9  //
  73      =1  #define TW88_WINSADDRHI   0xa9  // starting address of OSD ram for Windows 1
  74      =1  #define TW88_WINSADDRLO   0xaa  // starting address of OSD ram for Windows 1
  75      =1  
  76      =1  #define TW88_WINSHADOW    0xab  //
  77      =1  #define TW88_WINBLENDING  0xac  //
  78      =1  #define TW88_WINCHEFFECT  0xad  //
  79      =1  
  80      =1  
  81      =1  //Attributes for OSD
  82      =1  #define WINZOOMx1     0x01
  83      =1  #define WINZOOMx2     0x02
  84      =1  #define WINZOOMx3     0x03
  85      =1  #define WINZOOMx4     0x04
  86      =1  #define SHOW        0x08  
  87      =1  
  88      =1  #define EXTENDED_COLOR    0x80
  89      =1  #define BG_COLOR_BLACK    0x00  //For background color of window, border, and char. 
  90      =1  #define BG_COLOR_RED    0x40  
  91      =1  #define BG_COLOR_GREEN    0x20
  92      =1  #define BG_COLOR_YELLOW   0x60
  93      =1  #define BG_COLOR_BLUE   0x10
  94      =1  #define BG_COLOR_MAGENTA  0x50
  95      =1  #define BG_COLOR_CYAN   0x30
  96      =1  #define BG_COLOR_WHITE    0x70
  97      =1  #define BG_COLOR_TRANS    0x80  
  98      =1  #define BG_COLOR_MASK   0xf0  
  99      =1  
 100      =1  #define CH_COLOR_BLACK    0x00  //For color of char.
 101      =1  #define CH_COLOR_RED    0x04  
 102      =1  #define CH_COLOR_GREEN    0x02
 103      =1  #define CH_COLOR_YELLOW   0x06
 104      =1  #define CH_COLOR_BLUE   0x01
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 15  

 105      =1  #define CH_COLOR_MAGENTA  0x05
 106      =1  #define CH_COLOR_CYAN   0x03
 107      =1  #define CH_COLOR_WHITE    0x07
 108      =1  #define CH_BLINK      0x08  
 109      =1  #define CH_COLOR_MASK   0x0f  
 110      =1  
 111      =1  #define CL_BLACK      0x00  //For color of char.
 112      =1  #define CL_BLUE       0x01
 113      =1  #define CL_GREEN      0x02
 114      =1  #define CL_CYAN       0x03
 115      =1  #define CL_RED        0x04  
 116      =1  #define CL_MAGENTA      0x05
 117      =1  #define CL_YELLOW     0x06
 118      =1  #define CL_WHITE      0x07
 119      =1  #define CL_BLINK      0x08  
 120      =1  
 121      =1  // 0x76*(WindowNo*0x0b)
 122      =1  #define WINDOW_DISABLE    0x00
 123      =1  #define WINDOW_ENABLE   0x01
 124      =1  #define WINDOW_3D_ENABLE    0x04
 125      =1  #define WINDOW_3D_BOTTOM    0x08
 126      =1  #define WINDOW_3D_TOP     0x00
 127      =1  #define WINDOW_TRANS_ENABLE 0x80
 128      =1  
 129      =1  #define WINBDCOLOR_ENABLE 0x80
 130      =1  #define WINBDCOLOR_EXTENT 0x80
 131      =1  
 132      =1  
 133      =1  #define WINBLENDING_DISABLE 0x00
 134      =1  #define WINBLENDING_BACK    0x10
 135      =1  #define WINBLENDING_FORE    0x20
 136      =1  #define WINBLENDING_ALL     0x30
 137      =1  
 138      =1  #define WINSHADOW_ENABLE  0x80
 139      =1  // 0xc8*WindowNo
 140      =1  #define WIN_MULTICOLOR_ENABLE 0x20
 141      =1  #define WIN_CH_EFFECT_ENABLE  0x10
 142      =1  #define WIN_CH_EFFECT_SHADOW  0x08
 143      =1  
 144      =1  
 145      =1  
 146      =1  ///////// TW8804C /////////////
 147      =1  // Window Number
 148      =1  #define WINNUM1       1
 149      =1  #define WINNUM2       2
 150      =1  #define WINNUM3       3
 151      =1  #define WINNUM4       4
 152      =1  
 153      =1  // Index 0x9f Defination
 154      =1  #define WIN_BG_COLOR_EX   0x80
 155      =1  #define WIN_BG_COLOR_EX0  0x00
 156      =1  #define WIN_3D_TYPE     0x08
 157      =1  #define WIN_3D_TYPE0    0x00
 158      =1  #define WIN_3D_EN     0x04
 159      =1  #define WIN_3D_EN0      0x00
 160      =1  #define WIN_3D_LEVEL    0x02
 161      =1  #define WIN_EN        0x01
 162      =1  #define WIN_EN0       0x00
 163      =1  
 164      =1  // Index 0xa5 Defination
 165      =1  #define WIN_BD_EN     0x80
 166      =1  #define WIN_BD_EN0      0x00
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 16  

 167      =1  #define WIN_BD_WIDTH(a)   a
 168      =1  
 169      =1  // Index 0xa6 Defination
 170      =1  #define WIN_BD_COLOR_EX   0x80
 171      =1  #define WIN_BD_COLOR_EX0  0x00
 172      =1  #define WIN_H_BD_W(a)   a
 173      =1  
 174      =1  // Index 0xa7 Defination
 175      =1  #define WIN_V_BD_W(a)   a
 176      =1  
 177      =1  // Index 0xa8
 178      =1  #define WIN_CH_VSPACE(a)  (a<<4)
 179      =1  #define WIN_CH_HSPACE(a)  a
 180      =1  
 181      =1  // Index 0xa9 Defination
 182      =1  #define WIN_VZOOM(a)    (a-1)
 183      =1  #define WIN_HZOOM(a)    (a-1)
 184      =1  #define WIN_SADDR(a)    a
 185      =1  
 186      =1  // Index 0xab
 187      =1  #define WIN_SHADOW_EN   0x80
 188      =1  #define WIN_SHADOW_EN0    0x00
 189      =1  #define WIN_SHADOW_W(a)   a
 190      =1  
 191      =1  // ad
 192      =1  #define WIN_SHADOW_COLOR_EX   0x80
 193      =1  #define WIN_SHADOW_COLOR_EX0  0x00
 194      =1  #define WIN_MULTI_EN      0x40
 195      =1  #define WIN_MULTI_EN0     0x00
 196      =1  #define WIN_V_EXT_EN      0x20
 197      =1  #define WIN_V_EXT_EN0     0x00
 198      =1  #define WIN_CH_BDSH_SEL(a)    a
 199      =1  #define SEL_BORDER        0
 200      =1  #define SEL_SHADOW        1
 201      =1  #define WIN_CH_BDSH_COLOR_EX  0x08
 202      =1  #define WIN_CH_BDSH_COLOR_EX0 0x00
 203      =1  
 204      =1  #define OSD_Win_Num(a)      0x9e, a-1
 205      =1  #define OSD_Win_Start_Addr    0xa0
 206      =1  #define OSD_Win_Attr(a)       a
 207      =1  #define OSD_Win_Start(h,v)       (BYTE)(((WORD)h>>8) | (((WORD)v>>8)<<4)),(BYTE)h, (BYTE)v
 208      =1  #define OSD_Win_Width(a)      a
 209      =1  #define OSD_Win_Height(a)     a
 210      =1  #define OSD_Win_Border(a)     a
 211      =1  #define OSD_Win_HBorder(a)      a
 212      =1  #define OSD_Win_VBorder(a)      a
 213      =1  #define OSD_Win_CH_Space(a)     a
 214      =1  #define OSD_Win_ZM_SAddr(h,v,a)   ((h<<6)|(v<<4)|(a>>8)), (BYTE)a
 215      =1  #define OSD_Win_Shadow(a)     a
 216      =1  #define OSD_Win_Blending(a)     a
 217      =1  #define OSD_Win_CH_BorderShadow(a)  a
 218      =1  
 219      =1  
 220      =1  #define SetOSDWindowNum(winno)    WriteTW88(TW88_WINNUM, winno-1)
 221      =1  
 222      =1  //#define  OSD_Window_Attr(Trans_en,Color,3D_Type,3D_en,W_en)       (((( Trans_en | Color ) | 3D_Type) | 3
             -D_en) | W_en)
 223      =1  #define  OSD_Window_Attr(a,b,c,d,e)                 (((( a | b ) | c) | d) | e)
 224      =1  #define  OSD_WShadow_Attr(W_Shadow_en,Color,Width)          W_Shadow_en | Color | Width
 225      =1  //#define  OSD_Blending(en,level)                   en | (level & 0x0f)
 226      =1  //#define  OSD_Ch_Effect(Multi, Effect_En, ShadowBorder, Color)   Multi | Effect_En | ShadowBorder | Color 
             - 
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 17  

 227      =1  
 228      =1  
 229      =1  struct OSDStrInfo 
 230      =1  {
 231      =1    BYTE  cnt;
 232      =1    WORD  addr;
 233      =1    BYTE  attr;
 234      =1    DWORD str;
 235      =1  };
 236      =1  /*
 237      =1  struct BarInfo {
 238      =1    struct RegisterInfo BarCnt;
 239      =1    BYTE  winno;
 240      =1    BYTE  xoff;
 241      =1    BYTE  yoff;
 242      =1    BYTE  color;
 243      =1    int   bar_cnt;
 244      =1  };
 245      =1  */
 246      =1  struct FontData {
 247      =1    BYTE  font[27];
 248      =1  } ;
 249      =1  
 250      =1  //====================================================================
 251      =1  //  Internal OSD Function
 252      =1  void CopyCharToOSDRAM_TW88(BYTE Addr, BYTE attr, BYTE ch);
 253      =1  void CopyUDCharToOSDRAM_TW88(BYTE Addr, BYTE attr, BYTE ch);
 254      =1  //BYTE GetOSDWindowWidth_TW88(BYTE winno);
 255      =1  WORD GetOSDWindowSA_TW88(BYTE winno);
 256      =1  void SetOSDWindowX_TW88(BYTE winno, BYTE x);
 257      =1  void SetOSDWindowY_TW88(BYTE winno, BYTE y);
 258      =1  void SetOSDWindowWidth_TW88(BYTE winno, BYTE w);
 259      =1  void SetOSDWindowSA_TW88(BYTE winno, WORD sa);
 260      =1  
 261      =1  void SetOSDItalicsAndUnderline(BYTE italics, BYTE underline);
 262      =1  
 263      =1  void SetOSDHBorderWidth_TW88(BYTE winno, BYTE w);
 264      =1  //BYTE GetOSDWindowColor_TW88(BYTE winno);
 265      =1  void SetOSDWindowColor_TW88(BYTE CCWin, BYTE color);
 266      =1  void EnableOSDRAMAndChangeFont(BYTE type);
 267      =1  void WriteCharToOSDRAM(WORD addr, BYTE ch, BYTE attr);
 268      =1  
 269      =1  
 270      =1  void ShowOSDWindowAll(BYTE on);
 271      =1  void ShowOSDWindow_TW88(BYTE winno, BYTE onoff);
 272      =1  void ClearOSD_TW88(void);
 273      =1  //void CreateOSDWindow_TW88(BYTE winno, BYTE x, BYTE y, BYTE w, BYTE h, WORD sa, BYTE attr);
 274      =1  /*not yet!!
 275      =1  //ljy012304...CC_ADJUST_POS
 276      =1  void SetOSDWindowXS_TW88(BYTE winno, BYTE xs);
 277      =1  void SetOSDWindowYS_TW88(BYTE winno, BYTE ys);
 278      =1  */
 279      =1  
 280      =1  //====================================================================
 281      =1  //  OSDMenu Functions
 282      =1  
 283      =1  //--------------------------------------------------------------------
 284      =1  //  Functions used in only Menu
 285      =1  #define   CONVERT_CODE      0x80
 286      =1  
 287      =1  void InitOSDWindow(BYTE *ptr);
 288      =1  
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 18  

 289      =1  WORD GetOSDWindowX(BYTE winno);
 290      =1  WORD GetOSDWindowY(BYTE winno);
 291      =1  BYTE CreateOSDWindowOutline(BYTE winno, BYTE w, BYTE color);
 292      =1  void CreateOSDMenuWindow(BYTE, BYTE, BYTE, BYTE, BYTE, BYTE, BYTE);
 293      =1  void ClearOSDLine(BYTE winno, BYTE sx, BYTE sy, BYTE cnt, BYTE attr);
 294      =1  void WriteStringToAddr(WORD addr, BYTE *str, BYTE cnt);
 295      =1  void DrawAttrString(WORD addr, BYTE *str, BYTE cnt);
 296      =1  void DrawAttrCnt(WORD addr, BYTE color, BYTE cnt);
 297      =1  void ClearDataCnt(WORD, BYTE);
 298      =1  #define   SetOSDWindowX(A, B)       SetOSDWindowX_TW88(A, B)
 299      =1  #define   SetOSDWindowY(A, B)       SetOSDWindowY_TW88(A, B)
 300      =1  
 301      =1  //--------------------------------------------------------------------
 302      =1  //  Functions used in Menu and others
 303      =1  #define   ShowOSDWindow(A, B)       ShowOSDWindow_TW88(A, B)
 304      =1  #define   ClearOSD()              ClearOSD_TW88()
 305      =1  
 306      =1  //================================================================
 307      =1  //  Font
 308      =1  void DownloadUDFont(void);
 309      =1  #ifdef Hs_debug
 310      =1  void DisplayROMFont(BYTE);
 311      =1  void DisplayRAMFont(BYTE);
 312      =1  #endif
 313      =1  void DownloadFont(BYTE cod, CODE_P BYTE *fontdata);
 314      =1  //void DisplayGrid( void );
 315      =1  //void DisplayCone( void );
 316      =1  //void DisplayJapanese( void );
 317      =1  void TestRAMFont( void );
 318      =1  #ifdef BANKING
           =1 void DisplayMGrid( BYTE );
           =1 void DisplayMessage( void );
           =1 void DisplayChinese( void );
           =1 void DisplayJapanese( void );
           =1 void DisplayKorean( void );
           =1 void DisplayGridBank0( BYTE n );
           =1 void DisplayGridBank1( BYTE n );
           =1 #endif
 327      =1  
 328      =1  //================================================================
 329      =1  //  OSD COLOR
 330      =1  void Change_OSDColorLookup(void);
 331      =1  void Reset_OSDColorLookup(void);
 332      =1  
 333      =1  //====================================================================
 334      =1  //        Conversion
 335      =1  //====================================================================
 336      =1  BYTE utoa(WORD value, BYTE *str, BYTE radix);
 337      =1  BYTE ltoa_K(long value, BYTE *str, BYTE);
 338      =1  BYTE strlen( BYTE *str );
 339      =1  
 340      =1  #define CStrlen(A)        strlen(A)
 341      =1  
 342      =1  void WaitEndofDisplayArea(void);
 343      =1  
 344      =1  #endif  // __OSD_BASIC__
 345      =1  
  10          #include "printf.h"
   1      =1  #ifndef __PRINTF__
   2      =1  #define __PRINTF__
   3      =1  
   4      =1  #define _outchar(c) while(1) { if( !RS_Xbusy ) { SBUF = c; RS_Xbusy=1; break; } }
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 19  

   5      =1  #define Putch(c) _outchar(c)
   6      =1  
   7      =1  #ifdef SERIAL
   8      =1  
   9      =1   void Printf ( const char CODE_P *fmt, ... );
  10      =1   void Puts ( CODE_P char *ptr );
  11      =1  
  12      =1  #define TW2835Cmd(a)   Puts ( a )
  13      =1  
  14      =1  #else
           =1 
           =1  #undef  DEBUG
           =1  #define Printf(a,b)  //
           =1  #define Puts(a)      //
           =1 
           =1 #endif
  21      =1  
  22      =1  
  23      =1  #ifndef DEBUG
  24      =1  
  25      =1   #define dPuts(a)   //
  26      =1   #define wPuts(a)   //
  27      =1   #define ePuts(a)   //
  28      =1  
  29      =1  #else
           =1 
           =1  void dPrintf( const char CODE_P *fmt, ... );
           =1  void wPrintf( const char CODE_P *fmt, ... );
           =1  void ePrintf( const char CODE_P *fmt, ... );
           =1 
           =1  void dPuts( CODE_P char *ptr );
           =1  void wPuts( CODE_P char *ptr );
           =1  void ePuts( CODE_P char *ptr );
           =1 
           =1 #endif  // DEBUG
  40      =1  
  41      =1  BYTE Getch(void);
  42      =1  BYTE Getche(void);
  43      =1  
  44      =1  
  45      =1  #endif  //__PRINTF__
  11          #include "CPU.h"
   1      =1  #ifndef __CPU__
   2      =1  #define __CPU__
   3      =1  
   4      =1  /*
   5      =1  #ifdef INTERNAL_MCU
   6      =1  #define I2C_SCL   P2_0
   7      =1  #else
   8      =1  #define I2C_SCL   P1_0
   9      =1  #endif
  10      =1  #define I2C_SDA   P1_1
  11      =1  */
  12      =1  #define I2C_SCL     P1_0
  13      =1  #define I2C_SDA     P1_1
  14      =1  #ifdef SUPPORT_SDCARD  //ryan@20170824 
           =1 #define BUF_MAX     8
           =1 #define DVR_BUF_MAX   30
           =1 #else
  18      =1  #define BUF_MAX     20
  19      =1  #define DVR_BUF_MAX   8
  20      =1  #endif
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 20  

  21      =1  
  22      =1  #ifdef REMO_RC5
           =1 #define EnableRemoconInt()  { RemoDataReady = 0;  EX0 = 1;}
           =1 #endif
  25      =1  void  InitCPU(void);
  26      =1  void  InitVars(void);
  27      =1  void  InitTechwell(void);
  28      =1  void  main_init (void);
  29      =1  void  PowerDown( void );
  30      =1  #if 0
           =1 BYTE  OKSleepTime(void);
           =1 #endif
  33      =1  #ifdef REMO_RC5
           =1 void  InitForRemo(void);
           =1 #endif
  36      =1  void  PowerLED(BYTE flag);
  37      =1  void    Wait_ms(WORD Tms);
  38      =1  BYTE    TW2835Command(char,char,char,char,char);
  39      =1  
  40      =1  #ifdef Monitor_debug
  41      =1  BYTE RS_rx(void);
  42      =1  #endif
  43      =1  
  44      =1  #endif
  45      =1  
  12          #include "osdmenu.h"
   1      =1  //osdmenu.h
   2      =1  //LJY10292001
   3      =1  #ifndef __OSDMENU__
   4      =1  #define __OSDMENU__
   5      =1  
   6      =1  //=======================================================================
   7      =1  // 
   8      =1  //BYTE GetOSDDuration(void);
   9      =1  
  10      =1  void ResetVideoValue(void);
  11      =1  //#if defined( SUPPORT_PC ) || defined( SUPPORT_DTV )
  12      =1  //void ResetPCValue(void);
  13      =1  //#endif
  14      =1  BYTE GetOSDMenuLevel( void );
  15      =1  
  16      =1  void DrawMenulist(BYTE);
  17      =1  void Display_EnterPin(void);
  18      =1  void OSDHighMenu_sub(void);
  19      =1  void ResetOSDValue(void);
  20      =1  #ifdef E_Wintek
           =1 void ResetUESROSDValue(void);
           =1 #endif
  23      =1  //BYTE OnChangingValue(void);
  24      =1  //Not used yet *******************BYTE OnChangingTime(void);
  25      =1  
  26      =1  //WORD GetOSDclock(void);
  27      =1  
  28      =1  #ifdef HS_NEWOSDMENU
           =1 void InitOSDMenu(BYTE OSD_ID);
           =1 void OpenOSDMenu(BYTE OSD_ID);
           =1 #else
  32      =1  void InitOSDMenu(void);
  33      =1  void OpenOSDMenu(void);
  34      =1  #endif
  35      =1  BYTE CloseOSDMenu(void);
  36      =1  
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 21  

  37      =1  void OpenFORMATMenu(void);
  38      =1  void OSDHighMenu(void);
  39      =1  void OSDSelect(void);
  40      =1  void OSDCursorMove(BYTE flag );
  41      =1  void OSDLeftRight(BYTE flag );
  42      =1  void OSDValueUpDn(BYTE flag);
  43      =1  WORD SetItemValue( BYTE id, BYTE flag );
  44      =1  BYTE DoAction(BYTE id);
  45      =1  
  46      =1  BYTE SaveValue1(void);
  47      =1  void ClearValueWin(void);
  48      =1  
  49      =1  void OSDNumber( BYTE num );
  50      =1  
  51      =1  void Set4WideScreen(BYTE id);
  52      =1  
  53      =1  void SetRGBContrast( BYTE id, BYTE val );
  54      =1  BYTE SetPCColorTemp(BYTE flag);
  55      =1  void ResetPanelAttributeValue(void);
  56      =1  WORD GetItemValue( BYTE);
  57      =1  void DisplayViewBar( WORD,BYTE);
  58      =1  void DrawNum(WORD, CODE_P struct NumType *, WORD);
  59      =1  void DrawStringByLang( WORD, CODE_P struct EnumType *, WORD);
  60      =1  
  61      =1  void DisplayVolumebar(BYTE val);
  62      =1  BYTE GetOSDLang(void);
  63      =1  void InitOSDMenuXY(void);
  64      =1  
  65      =1  void Display_TVGuide_Window(void);
  66      =1  void Display_TVGuide_Status(void);
  67      =1  
  68      =1  void ChangeVchip_LevelCursor(BYTE);
  69      =1  void ChangeVchip_ContentCursor(BYTE);
  70      =1  void Select_VchipLevel(void);
  71      =1  void SetVideoMode(BYTE mode);
  72      =1  BYTE GetVideoDatawithOffset(BYTE offset);
  73      =1  void SetVideoContrast(BYTE newv);
  74      =1  void SetVideoBrightness(BYTE newv);
  75      =1  void SetVideoHue(BYTE newv) ;
  76      =1  void SetVideoSaturation(BYTE svtype, BYTE newv) ;
  77      =1  BYTE SetVideoSharpness(BYTE flag) ;
  78      =1  void SetVideoBacklight(BYTE newv) ;
  79      =1  //------------------------------------------------andy awt 981013
  80      =1  //void DaySelect(BYTE);
  81      =1  void CAMOutDSel(BYTE val);
  82      =1  void DVRAodioSel(BYTE  val);
  83      =1  
  84      =1  //------------------------------------------------andy awt 981013
  85      =1  
  86      =1  void DisplayLineOSD(void);  // OSD Line display Demo
  87      =1  #ifdef CENEC_OSDMENU_ACCM8
           =1 BYTE ChkOSDMENU_TOPWIN(void);  //Weylis 080930
           =1 BYTE ChkOSDMENU_WINDOW(void);
           =1 BYTE ChkOSDMENU(void);
           =1 #endif
  92      =1  
  93      =1  #ifdef AWT_ADD_TRIGGER_DELAY_FUN  //Pinchi 20150209 add
  94      =1  void AWT_DisplayViewBar(WORD addr , BYTE val);
  95      =1  #endif
  96      =1  struct MenuType {
  97      =1    BYTE  width,  height;
  98      =1    BYTE  TitleColor; 
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 22  

  99      =1    BYTE  CursorColor;
 100      =1  };
 101      =1  
 102      =1  struct NumType {
 103      =1    BYTE  PrePostCharLen;   // high nibble(pre) / low nibble(post)
 104      =1    BYTE  PrePostChar[4];
 105      =1  };
 106      =1  
 107      =1  struct NumberStringType {
 108      =1    BYTE  x, y;
 109      =1    BYTE    width;
 110      =1    BYTE  BackColor;
 111      =1    BYTE  Radix;
 112      =1    BYTE  NumColor;
 113      =1    BYTE    MaxLen;       // maximum length of string
 114      =1    BYTE  PrePostCharLen;   // high nibble(pre) / low nibble(post)
 115      =1    BYTE  PrePostChar[3];
 116      =1  };
 117      =1  
 118      =1  struct TimeType {
 119      =1    BYTE  x, y;
 120      =1    BYTE    width;
 121      =1    BYTE  BackColor;
 122      =1    BYTE  Format;       //_24H_TIME
 123      =1    BYTE  TimeColor;
 124      =1    BYTE    CursorColor;
 125      =1  };
 126      =1  
 127      =1  struct EnumType {
 128      =1    BYTE    Sz;//size
 129      =1    BYTE    ByLang;
 130      =1    BYTE  Str[15];      // doesn't matter the size !!!
 131      =1  };
 132      =1  
 133      =1  #define ICON_CH_SZ    2
 134      =1  //#define BAR_NUM_SZ    4
 135      =1  #define ICON_BUF_SZ   2
 136      =1  struct DefineMenu {
 137      =1    //WORD            Icon[ICON_BUF_SZ];  
 138      =1    BYTE        CODE  *Icon;
 139      =1    BYTE            **Desc;       
 140      =1    BYTE            PreFnId, 
 141      =1                  PostFnId;
 142      =1  //  void    (*CalltoFunction)(void);            // Un/Dn/Sel Function
 143      =1    BYTE            IconColor;      //NIL: not to display icon
 144      =1    BYTE            DescColor;      //NIL: not to display desc. (IconColor==NIL && DescColor==NIL)->Last Item
 145      =1    struct DefineMenu CODE  *Child;
 146      =1    BYTE            Type;       // MENU, CHOICEMENU, BAR, NUMBER, TIME, ACTION, ENUM_STRING
 147      =1    BYTE            ActiveWithCursor;
 148      =1    BYTE            Id;
 149      =1    BYTE        CODE  *TypeData;  //MenuType, BarType, NumType,,,
 150      =1  } ;
 151      =1  
 152      =1  struct PictureInfo {
 153      =1  
 154      =1    BYTE Register_Addr;
 155      =1    BYTE EEPROM_Addr;
 156      =1    struct RegisterInfo   CODE  *Control_Range;
 157      =1  };
 158      =1  
 159      =1  
 160      =1  //-------------------------------------------------------------------
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 23  

 161      =1  // OSD Window Information
 162      =1  //-------------------------------------------------------------------
 163      =1  // Window Number
 164      =1  #define OSDCURSORWINDOW     1
 165      =1  #define OSDMENUWINDOW       OSDCURSORWINDOW+1
 166      =1  #define OSDMENU_TOPWIN      OSDCURSORWINDOW+2
 167      =1  #define OSDMENU_TITLEWIN    OSDCURSORWINDOW+3
 168      =1  #define OSDBARWINDOW      OSDCURSORWINDOW
 169      =1  
 170      =1  #define TECHWELLOGO_OSDWIN    1 
 171      =1  #define TVINFO_OSDWIN       2 
 172      =1  #define FONTTEST_OSDWIN     2 
 173      =1  #define INPUTINFO_OSDWIN    3  
 174      =1  #define RATINGINFO_OSDWIN     1 
 175      =1  #define PCINFO_OSDWIN       3
 176      =1  #define VLOSSINFO_OSDWIN    4
 177      =1  
 178      =1  //-------------OSDMENU_TITLEWIN------------------------------------------------------
 179      =1  // Window Start address
 180      =1  #define OSDMENU_MAINADDR  0
 181      =1  //#define OSDMENU_SUBADDR     OSDMENU_MAINADDR+15    //25*9:196
 182      =1  //#define OSDMENU_SUBADDR     OSDMENU_MAINADDR+HS_WIDTH //0+40   //25*9:196
 183      =1  //#define OSDMENU_SUBADDR     OSDMENU_MAINADDR+10 //0+40   //25*9:196
 184      =1  #define OSDMENU_SUBADDR     OSDMENU_MAINADDR + 14 //0+40   //25*9:196  // Weylis 121008 清除 Icon 後面
 185      =1  
 186      =1  #define OSDMENU_BARADDR   200 //OSDMENU_SUBADDR+225    //256   //25x2:50
 187      =1  
 188      =1  #ifdef WQVGA
           =1 #define INPUTINFO1_ADDR   INPUTINFO_ADDR+17 //17x3:51
           =1 #else
 191      =1  #define INPUTINFO1_ADDR   INPUTINFO_ADDR+34 //17x2:51
 192      =1  #endif
 193      =1  
 194      =1  #define MUTEINFO_ADDR     INPUTINFO1_ADDR+51  // 4x1:4
 195      =1  #define TVCHINFO_ADDR     MUTEINFO_ADDR//324  // 3X1:3
 196      =1  #define LOGO_ADDR     0
 197      =1  #ifdef AWT_ML072S
 198      =1  #define RATINGINFO_ADDR   (34)  //addr:210(8x1:8)
 199      =1  #else
           =1 #define RATINGINFO_ADDR   0 //addr:210(8x1:8)
           =1 #endif
 202      =1  #define PCMEASUREINFO_ADDR  OSDMENU_BARADDR //10x1
 203      =1  #ifdef QUAD
           =1 #define INPUTINFO_ADDR    160 // 9x1:9
           =1 #else
 206      =1  #define INPUTINFO_ADDR    0///24  // 9x1:9
 207      =1    #ifdef AWT_ML072S
 208      =1    #define INPUTINFO_MIRROR_ADDR 0//83 //william-v1.0-970804
 209      =1    #else
           =1   #define INPUTINFO_MIRROR_ADDR 73//83  //william-v1.0-970804
           =1   #endif
 212      =1  #define INPUTINFO_WIDTH   40  // 9x1:9    //william-v1.0-971111
 213      =1  #endif
 214      =1  #define OSD_VLOSS_ADDR  33 
 215      =1  
 216      =1  
 217      =1  //--------------------------------------------------------------------
 218      =1  // OSD Menu Position Range
 219      =1  #if ((defined WQVGA) && (defined ANALOG_7INCH)) || ((defined QVGA) && (defined SHARP_LQ050Q5DR01))
           =1   #define OSD_PHR_ PHR_/2
           =1 #else
 222      =1    #define OSD_PHR_ PHR_
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 24  

 223      =1  #endif
 224      =1  
 225      =1  #define OSDHSTART_MAX (OSD_PHR_-(12+1)*25 - 56*2 -4)  //PHR - (pixelsize +Hspace)*MenuWidth - Hborder*2 - 
             -outlinewidth*2
 226      =1  #define OSDVSTART_MAX (PVR_-(18+11)*9 - 5*2 ) //  PVR - (Linesize+Vspace)*MENU_HEIGHT - Vborder*2  - outli
             -newidth*2
 227      =1  
 228      =1  #define OSDHSTART_MAX_A (OSD_PHR_-(12+2)*25 - 56*2 -8) //OSDHSTART_MAX  //PHR - (pixelsize +Hspace)*MenuWi
             -dth - Hborder*2 - outlinewidth*2
 229      =1  #define OSDVSTART_MAX_A OSDVSTART_MAX  //  PVR - (Linesize+Vspace)*MENU_HEIGHT - Vborder*2  - outlinewidth*
             -2
 230      =1  
 231      =1  #define OSDMENUX_MIN 1//0
 232      =1  #define OSDMENUX_MAX (OSDHSTART_MAX>>3)
 233      =1  #define OSDMENUX_50  (OSDHSTART_MAX>>4)
 234      =1  
 235      =1  #define OSDMENUY_MIN 2//0
 236      =1  #define OSDMENUY_MAX (OSDVSTART_MAX>>2)
 237      =1  #define OSDMENUY_50  (OSDVSTART_MAX>>3)
 238      =1  
 239      =1  #ifdef HS_NEWOSDMENU  //Weylis -@121008
           =1 // HS OSD Style
           =1 #define HS_WIDTH      40
           =1 #define HS_CHSPACE      14
           =1 //#define HS_CHSPACE      18
           =1 #define HS_ICONSPACE    1
           =1 #define HS_ICONSADDR    0
           =1 //#define HS_ICONSPACE    2
           =1 //#define HS_ICONSADDR    8
           =1 #endif
 249      =1  
 250      =1  //--------------------------------------------------------------------
 251      =1  // OSD Menu Width, Height 
 252      =1  #ifdef E_Wintek
           =1 #define ICON_HIGH       0x14
           =1 #else
 255      =1  #define ICON_HIGH       0x0a
 256      =1  #endif
 257      =1  
 258      =1  #define TOTAL_MAX_HIGHT     9
 259      =1  #define TOTAL_TOP_HEIGHT    5 // Include blank line!
 260      =1  #define TOPMENU_WIDTH     2
 261      =1  #define TOPMENU_HEIGHT      4 
 262      =1  
 263      =1  #if (defined QVGA) && (defined SHARP_LQ050Q5DR01)
           =1 #define MENU_WIDTH        17 //23//25 
           =1 #define TITLE_MAX_DESC      17 //25 //
           =1 #define BAR_LENGTH        0
           =1 #else
 268      =1  //#define MENU_WIDTH        23  //23//25 
 269      =1  //#define MENU_WIDTH        26  //ryan@20170821
 270      =1  #ifdef AWT_ML072S
 271      =1  #define MENU_WIDTH        19  
 272      =1  #else
           =1 #define MENU_WIDTH        24  //ryan@20170821
           =1 #endif
 275      =1  
 276      =1  #define TITLE_MAX_DESC      23  //25  //
 277      =1  #define BAR_LENGTH        5  //8
 278      =1  #endif
 279      =1  
 280      =1  #ifdef TW8816
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 25  

 281      =1  #define MENU_HEIGHT       8  //6 
 282      =1  #else
           =1 #define MENU_HEIGHT       7  //6 
           =1 #endif
 285      =1  //#define BARNUM_LENGTH       8  //11
 286      =1  
 287      =1  #ifdef AWT_ML072S
 288      =1  #define BARNUM_LENGTH       4//ryan@20170821
 289      =1  #else
           =1 #define BARNUM_LENGTH       9//ryan@20170821
           =1 #endif
 292      =1  
 293      =1  
 294      =1  #ifdef REFERENCE
           =1 #define BACK_COLOR        BG_COLOR_CYAN
           =1 #define DEFAULT_COLOR     BG_COLOR_CYAN   | CH_COLOR_WHITE
           =1 //#define ACTIVE_COLOR      BG_COLOR_YELLOW | CH_COLOR_WHITE
           =1 #define TITLE_BACK_COLOR    BG_COLOR_MAGENTA
           =1 #define TITLE_COLOR       TITLE_BACK_COLOR | CH_COLOR_YELLOW
           =1 #define COMMENT_COLOR     TITLE_BACK_COLOR | CH_COLOR_WHITE
           =1 #define CURSOR_COLOR      BG_COLOR_YELLOW | CH_COLOR_BLUE
           =1 #define OSD_INFO_COLOR      DEFAULT_COLOR
           =1 #define BAR_COLOR       DEFAULT_COLOR 
           =1 #define BAR_NUM_COLOR     DEFAULT_COLOR
           =1 #define NUM_COLOR       DEFAULT_COLOR
           =1 #define OSDMENU_OUTLINE_COLOR BG_COLOR_BLUE
           =1 #else
 308      =1  #define BACK_COLOR        BG_COLOR_CYAN
 309      =1  
 310      =1  #define DEFAULT_COLOR     BG_COLOR_CYAN | CH_COLOR_GREEN//ryan@20170828
 311      =1  
 312      =1  //#define ACTIVE_COLOR      BG_COLOR_YELLOW | CH_COLOR_WHITE
 313      =1  #define TITLE_BACK_COLOR    BG_COLOR_BLUE
 314      =1  #define TITLE_COLOR       TITLE_BACK_COLOR | CH_COLOR_YELLOW
 315      =1  #define COMMENT_COLOR     TITLE_BACK_COLOR | CH_COLOR_WHITE
 316      =1  #define CURSOR_COLOR      BG_COLOR_YELLOW  | CH_COLOR_BLUE
 317      =1  #define OSD_INFO_COLOR      BG_COLOR_CYAN    | CH_COLOR_GREEN
 318      =1  #define BAR_COLOR       DEFAULT_COLOR
 319      =1  #define BAR_NUM_COLOR     DEFAULT_COLOR
 320      =1  #define NUM_COLOR       DEFAULT_COLOR
 321      =1  #define VER_COLOR         BG_COLOR_CYAN   | CH_COLOR_YELLOW   /// V1.1 03/07/07 simonsung
 322      =1  #define OSDMENU_OUTLINE_COLOR   BG_COLOR_CYAN
 323      =1  #define OSD_VLOSS_COLOR     BG_COLOR_CYAN    | CH_COLOR_WHITE
 324      =1  
 325      =1  #endif
 326      =1  
 327      =1  #ifdef HS_NEWOSDMENU
           =1 #define COMMENT1_COLOR      BG_COLOR_CYAN | CH_COLOR_RED
           =1 #endif
 330      =1  
 331      =1  #define Trigger_COLOR       BG_COLOR_CYAN|CH_COLOR_RED      //william-v1.1-970827
 332      =1  #define Mirror_COLOR      BG_COLOR_CYAN|CH_COLOR_YELLOW     //william-v1.1-970827
 333      =1  #ifndef AWT_ML072S
           =1 #define Jump_COLOR        BG_COLOR_CYAN|CH_COLOR_GREEN      //william-v1.1-970827
           =1 #else
 336      =1  #define Jump_COLOR        BG_COLOR_CYAN|CH_COLOR_BLUE     //william-v1.1-970827
 337      =1  #endif
 338      =1  #define Gauge_COLOR1      BG_COLOR_BLACK|CH_COLOR_GREEN 
 339      =1  #define Gauge_COLOR2      BG_COLOR_BLACK|CH_COLOR_YELLOW  
 340      =1  #define Gauge_COLOR3      BG_COLOR_BLACK|CH_COLOR_RED
 341      =1  
 342      =1  //DisplayedOSD
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 26  

 343      =1  //    new   | MENU  TVINFO    CC    INPUTINFO   PCINFO    RATINGINFO
 344      =1  //  current   |
 345      =1  //============|=========================================================================
 346      =1  //  MENU    |     TVINFO    --    INPUTINFO   PCINFO    MENU + RATINGINFO 
 347      =1  //        |            
 348      =1  //------------|-------------------------------------------------------------------------
 349      =1  //  TVINFO    | MENU  TVINFO    --    INPUTINFO   PCINFO    TVINFO+RATING
 350      =1  //------------|-------------------------------------------------------------------------
 351      =1  //  CC      | MENU->  TVINFO->      INPUTINFO->   PCINFO    RATINGINFO
 352      =1  //        |  CC    CC          CC            
 353      =1  //------------|-------------------------------------------------------------------------
 354      =1  //  INPUTINFO | MENU  TVINFO    --    INPUTINFO   PCINFO    --
 355      =1  //------------|-------------------------------------------------------------------------
 356      =1  //  PCINFO    | MENU  x     x   INPUTINFO   PCINFO    x
 357      =1  //------------|-------------------------------------------------------------------------
 358      =1  //  RATINGINFO| MENU  TVINFO     RATING   INPUTINFO   x     RATINGINFO
 359      =1  //                  
 360      =1  
 361      =1  //=======================================================================================
 362      =1  // OSD Menu Constant define.
 363      =1  //=======================================================================================
 364      =1  //Time type
 365      =1  #define _24H_TIME   1
 366      =1  
 367      =1  //for previous, next, parent or child
 368      =1  #define YES       0xfe  
 369      =1  #define NO        0
 370      =1  
 371      =1  //#define OVERWRITE   0
 372      =1  //#define POPUP     1
 373      =1  
 374      =1  //CursorMove
 375      =1  #define VERT      0
 376      =1  #define HORI      1
 377      =1  
 378      =1  //Type of MenuItem
 379      =1  #define OSDMENU     1
 380      =1  #define CHOICEMENU    2
 381      =1  #define ACTION      3
 382      =1  #define BAR       4
 383      =1  #define NUMBER      5
 384      =1  #define CHOICE      6
 385      =1  #define ENUM_STRING   7 //YESNO     7
 386      =1  #define CHOICE1     8
 387      =1  #define TIME      9
 388      =1  #define NUMBER_STRING 10
 389      =1  #define TEXT_STR              11   // V1.1 02/28/07 simonsung
 390      =1  #define INFORMATION              12
 391      =1  #define TEXT_STR_exit 13
 392      =1  
 393      =1  #ifdef HTRV
           =1 #define GRAPH 16
           =1 #endif
 396      =1  
 397      =1  //Bar type
 398      =1  #define LEFT_FILLED   1
 399      =1  #define RIGHT_FILLED  2
 400      =1  #define NO_FILLED   3
 401      =1  
 402      =1  //OSDmenu up and down key
 403      =1  #define UP          1
 404      =1  #define DN          2
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 27  

 405      =1  #define RIGHT       3
 406      =1  #define LEFT          4
 407      =1  
 408      =1  // Action Id
 409      =1  #define DISP_INFO     0x16
 410      =1  
 411      =1  #define INPUTSELECTION    0x2f
 412      =1  
 413      =1  #define CHANGE_TO_COMPOSITE     (0x20|CH_TW2835)      // Low nibble need to start from 1 
 414      =1  #define CHANGE_TO_SVIDEO      (0x20|SVIDEO)       // so that it match with COMPOSITE...
 415      =1  #define CHANGE_TO_COMPONENT     (0x20|COMPONENT)    
 416      =1  #define CHANGE_TO_DTV       (0x20|DTV)    
 417      =1  #define CHANGE_TO_TV        (0x20|TV)         
 418      =1  #define CHANGE_TO_PC        (0x20|PC)         
 419      =1  #define CHANGE_TO_DIGITALVGA    (0x20|DIGITALVGA)     
 420      =1  #define CHANGE_TO_SCART       (0x20|SCART)        
 421      =1  
 422      =1  #define OSDPOSITIONMODE     0x10
 423      =1  #define OSD_VPOS      0x11
 424      =1  #define OSD_HPOS      0x12
 425      =1  #define OSD_HALFTONE    0x13
 426      =1  #define OSD_DURATION    0x14
 427      =1  #define RESET_OSDVALUE    0x15
 428      =1  #define OSDLANG       0x16
 429      =1  
 430      =1  #define PANEL_CONTRAST    0x58
 431      =1  #define PANEL_BRIGHTNESS  0x59
 432      =1  #define PANEL_HUE     0x5a
 433      =1  #define PANEL_SHARPNESS   0x5b
 434      =1  #define PANEL_SATURATION  0x5c
 435      =1  
 436      =1  #define PC_VPOS       0x43
 437      =1  #define PC_HPOS       0x44
 438      =1  #define PC_HSIZE      0x4d
 439      =1  
 440      =1  #define PC_CLOCK      0x45
 441      =1  #define PC_PHASE      0x46
 442      =1  
 443      =1  #define AUTOADJUST      0x47
 444      =1  #define AUTOADJUST2     0x48
 445      =1  //#define SAVE_AUTOADJUST   0x49
 446      =1  #define RESET_AUTOADJUST  0x4a
 447      =1  
 448      =1  #define PCCOLORADJUST   0x4b
 449      =1  #define SAVE_COLORADJUST  0x4c
 450      =1  //#define RESET_COLORADJUST 0x4d
 451      =1  
 452      =1  #define RESET_PCVALUE   0x4e
 453      =1  #define CameraOSD     0x4f
 454      =1  
 455      =1  #define PC_COLOR_MODE   0x3f
 456      =1  #define PC_COLOR_TEMP   0x30
 457      =1  #define PC_COLOR_MODE1    0x31
 458      =1  #define PC_COLOR_MODE2    0x32
 459      =1  #define PC_COLOR_MODE3    0x33
 460      =1  #define PC_COLOR_USER   0x34
 461      =1  #define PC_COLOR_R      0x35
 462      =1  #define PC_COLOR_G      0x36
 463      =1  #define PC_COLOR_B      0x37
 464      =1  
 465      =1  #define VIDEO_MODE      0x90
 466      =1  #define VIDEO_MODE1     0x91
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 28  

 467      =1  #define VIDEO_MODE2     0x92
 468      =1  #define VIDEO_MODE3     0x93
 469      =1  #define VIDEO_USER      0x94
 470      =1  #define VIDEO_CONTRAST    0x95
 471      =1  #define VIDEO_BRIGHTNESS  0x96
 472      =1  #define VIDEO_SATURATION  0x97
 473      =1  #define VIDEO_HUE     0x99
 474      =1  #define VIDEO_SHARPNESS   0x9a
 475      =1  #define VIDEO_BACKLIGHT   0x9c    // add new value 
 476      =1  #define RESET_VIDEOVALUE  0x9b
 477      =1  #define RESET_DVRVALUE    0x9e
 478      =1  #define RESET_MonitorVALUE    0x70
 479      =1  
 480      =1  
 481      =1  #ifdef AWT_ADD_TRIGGER_DELAY_FUN  //Pinchi 20150209 add
 482      =1  #define TRIGGER_CamADelay 0xb2
 483      =1  #define TRIGGER_CamBDelay 0xb3
 484      =1  #define TRIGGER_CamCDelay 0xb4
 485      =1  #define TRIGGER_CamRDelay 0xb5
 486      =1  #endif
 487      =1  
 488      =1  #ifdef HTRV
           =1 #define RESET_GAUGESETUP  0x9d   
           =1 #define Gauge_VStart      0x7a   
           =1 #endif
 492      =1  
 493      =1  #ifdef E_Wintek
           =1 #define RESET_USERVALUE 0x9d
           =1 #endif
 496      =1  #define VIDEOPICTURE    0x9f
 497      =1  
 498      =1  #define INPUTSTD      0x6f
 499      =1  #define CHANGE_TO_AUTO    0x60
 500      =1  #define CHANGE_TO_NTSC    (0x60 | NTSC)
 501      =1  #define CHANGE_TO_PAL   (0x60 | PAL)
 502      =1  #define CHANGE_TO_SECAM   (0x60 | SECAM)
 503      =1  #define CHANGE_TO_NTSC4   (0x60 | NTSC4)
 504      =1  #define CHANGE_TO_PALM    (0x60 | PALM)
 505      =1  #define CHANGE_TO_PALN    (0x60 | PALN)
 506      =1  #define CHANGE_TO_PAL60   (0x60 | PAL60)
 507      =1  
 508      =1  #if 0
           =1 #define CLOSED_CAPTION    0x7f
           =1 #define CLOSEDCAP_OFF   0x70
           =1 #define CLOSEDCAP_CC1   0x71
           =1 #define CLOSEDCAP_CC2   0x72
           =1 #define CLOSEDCAP_CC3   0x73
           =1 #define CLOSEDCAP_CC4   0x74
           =1 #define CLOSEDCAP_T1    0x75
           =1 #define CLOSEDCAP_T2    0x76
           =1 #define CLOSEDCAP_T3    0x77
           =1 #define CLOSEDCAP_T4    0x78
           =1 
           =1 #define TV_GUIDE      0x8f
           =1 #define NO_VCHIP_LOCK   0
           =1 #define VCHIP_TV_Y      1
           =1 #define VCHIP_TV_Y7     2
           =1 #define VCHIP_TV_G      3
           =1 #define VCHIP_TV_PG     4
           =1 #define VCHIP_TV_14     5
           =1 #define VCHIP_TV_MA     6
           =1 #define PASSWORD      0x87
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 29  

           =1 #define NEW_PASSWORD    0x88
           =1 #define CHK_PASSWORD    0x89
           =1 #define RET_CHK_PASSWORD  0x8a
           =1 #endif
 533      =1  
 534      =1  #define MPAA_RATING     0x9f
 535      =1  #define NO_MPAA_RATING    0
 536      =1  #define MPAA_G        1
 537      =1  #define MPAA_PG       2
 538      =1  #define MPAA_PG_13      3
 539      =1  #define MPAA_R        4
 540      =1  #define MPAA_NC_17      5
 541      =1  #define MPAA_X        6
 542      =1  
 543      =1  #define TVINSTALL     0xa0
 544      =1  #define SCAN_CHANNEL    0xa1
 545      =1  #define AIR_CABLE_TV    0xa3
 546      =1  #define STORE_CLEAR_TVCHN 0xa4
 547      =1  #define MTS         0xa5
 548      =1  #define EDIT_CHANNEL    0xa6
 549      =1  #define MTS_STEREO      0//0x10
 550      =1  #define MTS_MONO      1//0x11
 551      =1  
 552      =1  #define AUDIO_VOLUME    0xb7
 553      =1  
 554      =1  #if 0 //andy AWT8.4 20090811
           =1 
           =1 #define AUDIO_BALANCE   0xb9
           =1 #define AUDIO_BASS      0xba
           =1 #define AUDIO_TREBLE    0xbb
           =1 
           =1 #define AUDIO_LOUDNESS    0xbc
           =1 #define AUDIO_EFFECT    0xbd
           =1 #define AUDIO_MUTE      0xbe
           =1 #endif
 564      =1  
 565      =1  #define DayChoice           0xb8
 566      =1  #define CAMOSDONOFF         0xb9
 567      =1  #define GAUGEChoice         0xba
 568      =1  #define OsdLockChoice       0xbb
 569      =1  #define PRIORITYChoice      0xcA
 570      =1  #define DVRDisplay    0xcc
 571      =1  
 572      =1  #define CAMAONOFF       0xc1
 573      =1  #define CAMBONOFF         0xc2
 574      =1  #define CAMCONOFF       0xc3
 575      =1  #define CAMRONOFF     0xc4
 576      =1  
 577      =1  #define IMAGEChoice         0xc5 
 578      =1  #define REARChoice          0xc6
 579      =1  #define JUMPChoice          0xc7
 580      =1  #define CAMOUTChoice        0xc8 
 581      =1  #define STIME_STEP        0xc9
 582      =1  #define TriggerVGA        0xcb
 583      =1  #define IMAGE_A_Choice         0xcd
 584      =1  #define IMAGE_B_Choice         0xce
 585      =1  #define IMAGE_C_Choice         0xcf
 586      =1  
 587      =1  #define DELAYCAMA       0xd0
 588      =1  #define DELAYCAMB            0xd1
 589      =1  #define DELAYCAMC       0xd2
 590      =1  #define DELAYCAMR         0xd3
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 30  

 591      =1  #ifdef USE_CAMD
           =1 #define DELAYCAMD       0xd4
           =1 #endif
 594      =1  #define ReverseMode   0xd6
 595      =1  #ifdef AWT_ML072S //william @20130902 v1.0.1.2
 596      =1  #define JUMP_AV     0xd7
 597      =1  #endif
 598      =1  #define MANUAL_TUNE_CHANNEL 0xab
 599      =1  #define FINE_TUNE_CHANNEL 0xac
 600      =1  #define STORE_PALCHANNEL  0xad
 601      =1  
 602      =1  //#define CLEAR_TVCHN     0xb0
 603      =1  //#define STORE_TVCHN     0xb1
 604      =1  
 605      =1  #define WIDESCREEN      0xc0
 606      =1  #define WIDESCREEN_NORMAL 0 
 607      =1  #define WIDESCREEN_WIDE   1 
 608      =1  #define WIDESCREEN_PANO   2
 609      =1  #define WIDESCREEN_FULL   3 
 610      =1  #define WIDESCREEN_ZOOM   4 
 611      =1  
 612      =1  //#define SYSTEM_CLOCK    0xd1
 613      =1  //#define SYSTEM_CLOCK_H    0xd2
 614      =1  //#define WAKEUP_TIME     0xd3
 615      =1  //#define WAKEUP_TIME_H   0xd4
 616      =1  //#define WAKEUP_PR     0xd5
 617      =1  //#define OFF_TIME      0xd6
 618      =1  //#define OFF_TIME_H      0xd7
 619      =1  //#define SLEEP_TIMER     0xd8
 620      =1  
 621      =1  #define Resolution      0xe0
 622      =1  #define FPS         0xe1
 623      =1  #define Quality       0xe2
 624      =1  #define RecordMode      0xe3
 625      =1  #define RecordLength      0xe4
 626      =1  #define PreAlarmLength    0xe5
 627      =1  #define PostAlarmLength   0xe6
 628      =1  #define Apply       0xe7
 629      =1  #if 0 //william-awt ml073q-20120313
           =1 #define ManualRecordStart 0xe8
           =1 #define ManualRecordStop  0xe9
           =1 #define Snapshot        0xea
           =1 #endif
 634      =1  #define FormatSD      0xeb
 635      =1  #define AudioRecord     0xec
 636      =1  #define FirmwareUpdate    0xed
 637      =1  #define ChangePassword    0xee
 638      =1  #define OverWrite     0xef
 639      =1  
 640      =1  #define UpdateConfig      0xd0
 641      =1  #define SDCardDetect      0xd5
 642      =1  
 643      =1  #define Year        0x20
 644      =1  #define Month       0x21
 645      =1  #define Day         0x22
 646      =1  #define Hour        0x23
 647      =1  #define Minute        0x24
 648      =1  
 649      =1  #define DaylightSaving        0x25
 650      =1  #define TimeBeginesMonth      0x26
 651      =1  #define TimeBeginesWeek       0x27
 652      =1  #define TimeBeginesTime       0x28
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 31  

 653      =1  #define StandardTimeBeginesMonth  0x29
 654      =1  #define StandardTimeBeginesWeek   0x2a
 655      =1  #define StandardTimeBeginesTime   0x2b
 656      =1  #define TimeZone          0x2c
 657      =1  #define FirstNumber         0x2d
 658      =1  #define SecondNumber        0x2e
 659      =1  #define ThridNumber         0x2f
 660      =1  #define FourthNumber        0x38
 661      =1  #define WIFIIPNumber        0x39
 662      =1  #define WIFIMACNumber       0x3a
 663      =1  #define GETWAYNumber        0x3b
 664      =1  
 665      =1  #define OSDLANGI      0xd9
 666      =1  #define OSDLANGII     OSDLANGI+1
 667      =1  #define OSDLANGIII      OSDLANGI+2
 668      =1  #define OSDLANGIV     OSDLANGI+3
 669      =1  
 670      =1  #define TOHIGHMENU      0xf1
 671      =1  #define MOVECURSOR2FIRST  0xf2
 672      =1  #define RESET_ALL     0xf3
 673      =1  #define EXITMENU      0xf4
 674      =1  #define DVRParamApply   0xf5
 675      =1  #define DATETIMEApply   0xf6
 676      =1  
 677      =1  #define CHOICE1_VAL     0xfc
 678      =1  #define CHOICE_VAL      0xfd
 679      =1  #define BAR_VAL       0xfe
 680      =1  #define NUM_VAL       0xff
 681      =1  
 682      =1  #define CAMNumberChoice     0xa3 
 683      =1  #define PelcoChoice         0xa4
 684      =1  #define Baud_rateChoice   0xa5
 685      =1  
 686      =1  
 687      =1  #endif  // __OSDMENU__
 688      =1  
  13          #include "dispinfo.h"
   1      =1  #ifndef __DISPINFO__
   2      =1  #define __DISPINFO__
   3      =1  //==================================================================
   4      =1  //        Display Information
   5      =1  //==================================================================
   6      =1  #if (defined WQVGA) && (defined ANALOG_7INCH)
           =1 #define   INPUTINFO_ZOOM    WINZOOMx1
           =1 #define   LOGO_ZOOM     WINZOOMx3
           =1 
           =1 #else // (defined WQVGA) && (defined SHARP_LQ043T3DX02)
  11      =1  
  12      =1    #ifdef AWT_ML072S
  13      =1    #define   INPUTINFO_ZOOM    WINZOOMx4
  14      =1    #else
           =1   #define   INPUTINFO_ZOOM    WINZOOMx2
           =1   #endif
  17      =1  #define   LOGO_ZOOM     WINZOOMx2
  18      =1  #endif
  19      =1  //#define   VOL_ZOOM      WINZOOMx4
  20      =1  #define   MUTE_ZOOM     WINZOOMx3
  21      =1  #define   TVCHN_ZOOM      WINZOOMx4
  22      =1  #define   RATINGINFO_ZOOM   WINZOOMx3
  23      =1  #define     SCANTV_ZOOM     WINZOOMx2   //ljy012304
  24      =1  #define   PCINFO_ZOOM     WINZOOMx2
  25      =1  #define     BAR_ZOOM      WINZOOMx2
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 32  

  26      =1  
  27      =1  
  28      =1  #define DVRStatus_OSDWIN  4 
  29      =1  #define DVRStatus_ADDR  180
  30      =1  
  31      =1  extern  BYTE  DisplayedOSD;
  32      =1  
  33      =1  
  34      =1  void ClearDisplayedOSD( BYTE newd );
  35      =1  void SetDisplayedOSD( BYTE newd );
  36      =1  BYTE GetDisplayedOSD(void);
  37      =1  void ClearOSDInfo(void);
  38      =1  
  39      =1  void DisplayInput(void);
  40      =1  BYTE ClearInput(void);
  41      =1  BYTE ClearInput2s(void);
  42      =1  
  43      =1  //void DisplayLogo(void);
  44      =1  
  45      =1  void ClearLogo(void);
  46      =1  
  47      =1  void DisplayPCInfo(BYTE CODE *ptr);
  48      =1  void ClearPCInfo(void);
  49      =1  void DisplayAutoAdjust(void);
  50      =1  void ClearAutoAdjust(void);
  51      =1  
  52      =1  
  53      =1  void DisplayVol(void);
  54      =1  #if 0
           =1 void DisplayBrightness(void);
           =1 #endif
  57      =1  #if 0
           =1 void DisplayMuteInfo(void);
           =1 #endif
  60      =1  void ClearMuteInfo(void);
  61      =1  BYTE CheckAndClearOSD(void);
  62      =1  BYTE ClearVlossOsd(void);
  63      =1  #ifdef AWT_ML072S
  64      =1  void VlossHandler(void);
  65      =1  void Check_Vloss(void);
  66      =1  #endif
  67      =1  //==================================================================
  68      =1  //            TV Info
  69      =1  //==================================================================
  70      =1  
  71      =1  BYTE ClearTVInfo(void);
  72      =1  
  73      =1  #endif  // __DISPINFO__
  14          #include "tw88.h"
   1      =1  #ifndef __TW88__
   2      =1  #define __TW88__
   3      =1  
   4      =1  #include "main.h"
   1      =2  #ifndef __MAIN__
           =2 #define __MAIN__
           =2 
           =2 #define ON          1
           =2 #define OFF         0
           =2 #if 1//ryan@20171214
           =2 #define Hs_debug
           =2 #define Monitor_debug  
           =2 //#define Trigger_debug 
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 33  

           =2 #endif
           =2 
           =2 
           =2 //#define DVR
           =2 #define Format_SDCard
           =2 #define BJTSwitch
           =2 
           =2 #define Panel_Enable()    P4=P4|0x08 //andy 980908
           =2 #define Panel_Disable()   P4=P4&0xf7
           =2 
           =2 #if 0
           =2 #define SetBacklight()      P4=P4|0x04
           =2 #define clrBacklight()      P4=P4&0xfb
           =2 #else
           =2 #define SetBacklight()    P4=P4&0xfb
           =2 #define clrBacklight()    P4=P4|0x04
           =2 #endif
           =2 
           =2 //InputSelection
           =2 struct struct_IdName {
           =2   BYTE  Id;
           =2   BYTE  Name[16];
           =2 };
           =2 
           =2 #define CH_TW2835       1
           =2 #define CH_CAMD       2
           =2 #define CH_AV         3
           =2 #define PC          7
           =2 #define ChineseDefaultMenu  8
           =2 
           =2 #define SVIDEO        2
           =2 #define COMPONENT     3
           =2 //#define ANALOGDTV     4
           =2 #define DTV         4
           =2 #define TV          5
           =2 #define SCART       6
           =2 
           =2 #ifdef HS
           =2 #define CH_CAMB         4
           =2 #endif
           =2 
           =2 #define DIGITALVGA      8
           =2 
           =2 #define AIRTV       0 //9
           =2 #define CABLETV       1 //0xa
           =2 
           =2 #define TVTUNER       0xd   //10
           =2 #define MUTE        1 
           =2 #define MENU        2 
           =2 #define TVVOL       4 
           =2 #ifdef AWT_ML072S
           =2 #define VLOSSINFO     8 
           =2 #else
           =2 #define CC          8 
           =2 #endif
           =2 #define INPUTINFO     0x10
           =2 #define PCINFO        0x20
           =2 #define GAUGEINFO       0x40
           =2 //#define RATINGINFO      0x40
           =2 #define TVCHN       0x80
           =2 //#define MUTE        0x40
           =2 
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 34  

           =2 #define YPBPR_480i      0
           =2 #define YPBPR_576i      1
           =2 #define YPBPR_480p      2
           =2 #define YPBPR_576p      3
           =2 #define YPBPR_1080i     4
           =2 #define YPBPR_720p      5
           =2 #define YPBPR_720p50    6
           =2 
           =2 //---------------------- Feature Define ----------------------------
           =2 #ifdef AWT_ML072Q
           =2 
           =2 //mask by ryan@20171018   #define AWT_ML720Q_NEW_TRIGGER_FUN    //Pinchi 20141031 add for AWT request each t
             -rigger can work by PRIORITY OFF
           =2 #define AWT_ADD_TRIGGER_DELAY_FUN 
           =2 #define AWT_SUPPORT_4_3_SCREEN    //ryan@20170907 
           =2 #endif
           =2 
           =2 #ifdef AWT_ML072S
           =2 #define AWT_ADD_TRIGGER_DELAY_FUN 
           =2 #endif
           =2 
           =2 //--------------------------- P0 Define -----------------------------
           =2 //#define SEL_MIX     P0_6  // 
           =2 //--------------------------- P1 Define -----------------------------
           =2 //#define SEL_DVI     P3_5  //LJY062001   
           =2 
           =2 #define TW88HWReset     P3_4  //LJY001010 //LJY000721
           =2 #define PowerUp       P3_7
           =2 //======================= CDS Control ================================= 
           =2 //#define CDS_CTRL           P1_5
           =2 extern BYTE SelectModeType;
           =2 extern BYTE InputSelection;
           =2 extern BYTE SEQTime;
           =2 extern BYTE Priority;
           =2 extern BYTE PowerFlag;
           =2 //extern bit AutoDayNight;
           =2 extern bit SDCardCoverDetect;
           =2 
           =2 BYTE keyIn(void);
           =2 void TimerForRemocon(void);
           =2 void TimerForTick(void);
           =2 void DisableRemoconInt(void);
           =2 BYTE SetSupport_remocon(BYTE newd);
           =2 
           =2 void delay(BYTE cnt);
           =2 
           =2 BYTE RS_ready(void);
           =2 #ifdef Monitor_debug
           =2 BYTE RS_rx(void);
           =2 #endif
           =2 void RS_tx(BYTE tx_buf);
           =2 
           =2 BYTE RS2_rx(void);
           =2 void RS2_tx(BYTE tx_buf);
           =2 
           =2 void NewLine(void);
           =2 void PutsP(PDATA_P BYTE *ptr);
           =2 #ifdef Hs_debug
           =2 //void MonWriteI2C(BYTE addr, BYTE index, BYTE val);
           =2 //BYTE MonReadI2C(BYTE addr, BYTE index);
           =2 #endif
           =2 BYTE Asc1Bin(BYTE asc);
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 35  

           =2 BYTE Asc2Bin(PDATA_P BYTE *s);
           =2 
           =2 void I2CDeviceInitialize( CODE_P BYTE *RegSet);
           =2 
           =2 //void RestartSystemClock(WORD clock_hm);
           =2 WORD GetTime_ms(void);
           =2 #if 0
           =2 BYTE GetTime_H(void);
           =2 BYTE GetTime_M(void);
           =2 #endif
           =2 void ChangeTime_H( char add );
           =2 void ChangeTime_M( char add );
           =2 //WORD GetWakeupTime(void);
           =2 //void SetWakeupTime(WORD wtime);
           =2 
           =2 
           =2 //WORD GetOffTime(void);
           =2 //void SetOffTime(WORD wtime);
           =2 //BYTE GetSleepTimer(void);
           =2 //void SetSleepTimer(BYTE stime);
           =2 WORD DiffTime_ms( WORD stime, WORD etime );
           =2 //void SetLastBlockedTime(void);
           =2 void SetLastCCTime(void);       //ljy010904...CC_FIX_CLEAR_ON_TIME
           =2 
           =2 void SetOSDLastKeyInTime(void);
           =2 WORD GetOSDLastKeyInTime(void);
           =2 WORD GetIVF(void);
           =2 DWORD GetIHF(void);
           =2 BYTE ReadVInputSTD(void);
           =2 void SetVInputStd(BYTE newd);
           =2 BYTE GetVInputStd(void);
           =2 BYTE GetInputSelection(void);
           =2 #ifdef ADD_ANALOGPANEL
           =2 BYTE IsAnalogOn(void);
           =2 #endif
           =2 void InitVideoData(BYTE src);
           =2 void ChangeVInputStdDetectMode(BYTE val);
           =2 BYTE GetVInputStdInx(void);
           =2 
           =2 void MonWriteI2Cn_(BYTE addr, BYTE *val, BYTE cnt) ;
           =2 
           =2 void CheckNewTriggerFunc(void);
           =2 ///void Usage(void);
           =2 #ifdef Monitor_debug
           =2   void Prompt(void);
           =2 #endif
           =2 void DebugKeyIn(BYTE ikey);
           =2 void DVIPowerDown(bit flag);
           =2 void PowerDown_XTAL(bit flag);
           =2 
           =2 void ChangeInput(BYTE newsel);
           =2 
           =2 
           =2 void WaitPowerOn(void);
           =2 void PowerOff(void);
           =2 BYTE GetNextInputSelection(void);
           =2 
           =2 BYTE WantToStopTVScan(void);
           =2 
           =2 //BYTE IsTW8801(void);
           =2 //BYTE IsTW8803(void);
           =2 //BYTE ConvertVideoVSAT(BYTE reg);
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 36  

           =2 
           =2 BYTE IsNoInput(void);
           =2 void LoadEEPROM (void);
           =2 void Hs_InitVars(void);
           =2 void AdjustAutoDayNight(BYTE val);
           =2 void ACCPowerControl(void);
           =2 void ON_LVDS(void);
           =2 void OFF_LVDS(void);
           =2 void main_loop(void);
           =2 struct RegisterInfo
           =2 {
           =2    int  Min;
           =2    int  Max;
           =2    int  Default;
           =2 };
           =2 struct LongRegisterInfo
           =2 {
           =2    WORD Min;
           =2    WORD Max;
           =2    WORD Default;
           =2 };
           =2 
           =2 
           =2 typedef enum   ///add enum  by ryan@20170907
           =2 {
           =2   NORMALL_MODE,
           =2   REVERSE_TRIG,
           =2   LEFT_TRIG,
           =2   RIGHT_TRIG,
           =2 #ifdef USE_CAMD 
           =2   CAMD_TRIG,
           =2 #endif  
           =2   CAMC_TRIG,
           =2   VGA_TRIG,
           =2   PARK_TRIG,
           =2   No_TRIG,
           =2   TRIGGER_NUM
           =2 }TriggerModeType;
           =2 
           =2 
           =2 #endif  // __MAIN__
 236      =2  
   5      =1  
   6      =1  //Value for register 0x44
   7      =1  //#define DECODER_YCbCr   0x08    //xxxx bbxx
   8      =1  //#define RGB_RGB       0x0C
   9      =1  
  10      =1  #define TW88_FPLL0      0xf9
  11      =1  #define TW88_FPLL1      0xfa
  12      =1  #define TW88_FPLL2      0xfb
  13      =1  #define TW88_FSS      0xfc
  14      =1  #define TW88_FSS_PD     0xfd
  15      =1  #define TW88_PLL_DIV    0xfe
  16      =1  
  17      =1  //#define TW88_XSCALE     0x5d
  18      =1  //#define TW88_YSCALE     0x5e
  19      =1  
  20      =1  #define TW88_XUSCALELO    0x60
  21      =1  #define TW88_XDSCALELO    0x61
  22      =1  #define TW88_YUSCALELO    0x62
  23      =1  #define TW88_XYSCALEHI    0x63
  24      =1  #define TW88_XUSCALEFINE  0x69
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 37  

  25      =1  #define TW88_YUSCALEFINE  0x6a
  26      =1  
  27      =1  //Power Mgt
  28      =1  #define POWER_OFF     0
  29      =1  #define POWER_STANDBY   1
  30      =1  #define POWER_SUSPEND   2
  31      =1  #define POWER_ON      3
  32      =1  
  33      =1  //void TWChipsDetect(void);
  34      =1  void SetAutoDetectStd(void);
  35      =1  void ClearAutoDetectStd(BYTE);
  36      =1  void I2CDeviceInitialize( CODE_P BYTE *RegSet);
  37      =1  
  38      =1  
  39      =1  //0x63.. Register Group
  40      =1  #define GROUP_YCbCr     0x40
  41      =1  #define GROUP_RGB     0
  42      =1  #define SelectPanelAttrRegGroup(A)        WriteTW88(0x70, (ReadTW88(0x70) & 0xbf) | A)
  43      =1  
  44      =1  //#if defined TW8801 || defined TW8803
  45      =1  #define FB_MAIN   2
  46      =1  #define FB_NORMAL 1
  47      =1  #define FB_RGB    0
  48      =1  //void SetFBmode( BYTE mode );
  49      =1  //#endif // TW8801
  50      =1  
  51      =1  
  52      =1  //=============================================================================
  53      =1  //                               LCD Functions   
  54      =1  //=============================================================================
  55      =1  //BYTE GetLCDPowerState(void);
  56      =1  void SetLCDPowerState(BYTE dat);
  57      =1  
  58      =1  BYTE IsFreeRun(void);
  59      =1  #if defined( SUPPORT_PC ) || defined( SUPPORT_DTV )
           =1 void PanelFreeRun(BYTE on);
           =1 void PanelBlack(BYTE on);
           =1 #endif
  63      =1  #if 0
           =1 void PanelMute(BYTE on);
           =1 #endif
  66      =1  void LCDPowerON(BYTE mute); 
  67      =1  
  68      =1  #ifdef AWT_ML072S
  69      =1  void LCDPowerOFF(void);
  70      =1  #endif
  71      =1  
  72      =1  #ifdef Hs_debug
  73      =1  void LCDPower(void);
  74      =1  #endif
  75      =1  void DPMSmodeOFF(void);
  76      =1  void DPMSmodeON(void);
  77      =1  //=============================================================================
  78      =1  //                          Get PC Parameter Functions   
  79      =1  //=============================================================================
  80      =1  void GetInitPanelAttribute1(void);
  81      =1  //void GetInitPanelAttribute2(void);
  82      =1  void DefaultPanelAttributeForVideo(void);
  83      =1  void SetPVR(WORD pvr);
  84      =1  void SetPHR(WORD phr);
  85      =1  WORD GetPVR(void);
  86      =1  WORD GetPHR(void);
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 38  

  87      =1  WORD GetHPN(void);
  88      =1  WORD GetVPN(void);
  89      =1  
  90      =1  //WORD GetVactive(void);
  91      =1  
  92      =1  WORD GetHstart(void);
  93      =1  WORD GetHend(void);
  94      =1  WORD GetVstart(void);
  95      =1  WORD GetVend(void);
  96      =1  void TuneLineBuffer(BYTE field);
  97      =1  void TuneLineBuffer4Video(BYTE field);
  98      =1  
  99      =1  #if defined (SUPPORT_DTV)
           =1 void SetCoarstForDTV(BYTE en);
           =1 #endif
 102      =1  
 103      =1  WORD GetHactiveStart(void);
 104      =1  WORD GetHactiveEnd(void);
 105      =1  WORD GetVactiveStart(void);
 106      =1  //WORD GetVactiveLen(void);
 107      =1  BYTE GetVBackPorch(void);
 108      =1  void SetVBackPorch(BYTE val);
 109      =1  WORD GetPHP(void);
 110      =1  void SetPHP(WORD php);
 111      =1  void SetPVP(WORD period);
 112      =1  WORD GetPVP(void);
 113      =1  //void SetPanelRelatedRegisters(void);
 114      =1  //BYTE ChangedHPN(void);
 115      =1  //WORD GetVSUD(void);
 116      =1  
 117      =1  void SetDefaultPLL(void);
 118      =1  //void SetDefaultFPHSperiod(void);
 119      =1  //BYTE CalcPHP(DWORD ppf, BYTE tol);
 120      =1  //void ChangeFPHSperiod4DecoderInput(WORD vsud, BYTE tol);
 121      =1  
 122      =1  //-------------------------------------------------------------------
 123      =1  //                  Set Active Region Functions
 124      =1  //-------------------------------------------------------------------
 125      =1  void SetHactiveStart(WORD hstart);
 126      =1  void SetHactiveEnd(WORD hend);
 127      =1  void SetVactiveStart(WORD vstart);
 128      =1  //void SetVactiveLen(WORD van, WORD vstart);
 129      =1  void SetVactiveLen(WORD van);
 130      =1  //=============================================================================
 131      =1  //                     Set Measurement Window Functions   
 132      =1  //=============================================================================
 133      =1  void SetMeasureWindowH(WORD start, WORD stop);
 134      =1  void SetMeasureWindowV(WORD start, WORD stop);
 135      =1  //=============================================================================
 136      =1  //                          Video Input Functions   
 137      =1  //=============================================================================
 138      =1  BYTE IsVideoInput(void);
 139      =1  BYTE DetectDecoderInput(void);
 140      =1  //=============================================================================
 141      =1  //
 142      =1  //=============================================================================
 143      =1  #if defined( SUPPORT_PC ) || defined( SUPPORT_DTV )
           =1 void AutoPHPCalEnable(void);
           =1 void AutoPHPCalDisable(void);
           =1 #endif
 147      =1  void MakeStartInt(void);
 148      =1  void AVGAInput(void);
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 39  

 149      =1  void DVIInput(void);
 150      =1  //void DVGAInput(void);
 151      =1  void DisableDVGA(void);
 152      =1  
 153      =1  void COMPOSITE1Input(void);
 154      =1  void COMPOSITE2Input(void);
 155      =1  void COMPOSITE3Input(void);
 156      =1  void COMPOSITE4Input(void);
 157      =1  
 158      =1  void SVIDEOInput(void);
 159      =1  void COMPONENTInput(void);
 160      =1  void ANALOGDTVInput(void);
 161      =1  void DTVInput(void);
 162      =1  void TVInput(void);
 163      =1  void SCARTInput(void);
 164      =1  
 165      =1  //=============================================================================
 166      =1  //                          Measurement Functions
 167      =1  //=============================================================================
 168      =1  ///void SetPanelBitOrder(BYTE swap);
 169      =1  //void SetPanelSingleDouble(BYTE single);
 170      =1  
 171      =1  BYTE MeasureAndWait(BYTE flag);
 172      =1  
 173      =1  //WORD GetHCounter1(BYTE field);
 174      =1  //void SetHInitial(BYTE field, WORD counter);
 175      =1  //=============================================================================
 176      =1  //                          Invert Polarity Functions
 177      =1  //=============================================================================
 178      =1  void InvertHSYNCPolarity(void);
 179      =1  void InvertVSYNCPolarity(void);
 180      =1  //=============================================================================
 181      =1  //            Interrupt / SW Reset Control Functions
 182      =1  //=============================================================================
 183      =1  void SetInt(void);
 184      =1  //void ClearInt(void);
 185      =1  void SetEnDet(void);
 186      =1  void ClearEnDet(void);
 187      =1  void SWReset(void);
 188      =1  //void ClearSYNCLossStatus(void);
 189      =1  //void ClearSYNCChangeStatus(void);
 190      =1  //=============================================================================
 191      =1  //
 192      =1  //=============================================================================
 193      =1  BYTE IsBypassmode(void);
 194      =1  //BYTE IsInteraced(void);
 195      =1  void Clear_bypass(void);
 196      =1  void MaskOnSYNCInt(void);
 197      =1  void MaskOffSYNCInt(void);
 198      =1  //=============================================================================
 199      =1  //                                ZoomControl
 200      =1  //=============================================================================
 201      =1  void BypassZoom(void);
 202      =1  
 203      =1  void XscaleU(DWORD scale);
 204      =1  void XscaleD(DWORD scale);
 205      =1  void XScale2(DWORD scale);
 206      =1  void YScale2(DWORD scale);
 207      =1  WORD GetYScale(void);
 208      =1  //=============================================================================
 209      =1  //
 210      =1  //=============================================================================
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 40  

 211      =1  WORD GetHSYNCPulse(void);
 212      =1  WORD GetVSYNCPulse(void);
 213      =1  //#if defined TW8801 || defined TW8803
 214      =1  WORD GetRelativePosition(void);
 215      =1  //#endif
 216      =1  //=============================================================================
 217      =1  //                MISC2 for decoder
 218      =1  //=============================================================================
 219      =1  #define BLUE_DECODER    2
 220      =1  #define BLACK_DECODER   0
 221      =1  
 222      =1  BYTE ForceDecoderOutput(BYTE color);
 223      =1  BYTE ClearForcedDecoderOutput(void);
 224      =1  //=============================================================================
 225      =1  //                CC and EDS
 226      =1  //=============================================================================
 227      =1  BYTE GetCCStatus(void);
 228      =1  void DisableCC(void);
 229      =1  void EnableCC(void);
 230      =1  BYTE GetCCData(void);
 231      =1  BYTE IsCCEnabled(void);
 232      =1  void EnableEDS(void);
 233      =1  void DisableEDS(void);
 234      =1  void RecoverCCOverflow(void);
 235      =1  
 236      =1  #define CCFIFOHalfFull()      (ReadDecoder(CSTATUS) & 0x04)
 237      =1  //=============================================================================
 238      =1  //                Internal PLL
 239      =1  //=============================================================================
 240      =1  BYTE GetPOST(void);
 241      =1  void SetPLLS(BYTE plls);
 242      =1  BYTE GetREFDM(void);
 243      =1  void SetREFDM(BYTE refdm);
 244      =1  DWORD GetFBDN(void);
 245      =1  void SetFBDN(WORD fbdn, BYTE vcsel);
 246      =1  DWORD GetPPF(void);
 247      =1  void ChangeInternPLL(DWORD _PPF);
 248      =1  
 249      =1  //=============================================================================
 250      =1  //                Macros for attribute
 251      =1  //=============================================================================
 252      =1  //#define GetOSDTransReg()            ReadTW88(0xAE)
 253      =1  //#define SetOSDTransReg(AlphaV)          WriteTW88(0xAE, (BYTE)AlphaV )
 254      =1  
 255      =1  #define GetPanelContrastReg(gccolor)      ReadTW88(0x71+gccolor)
 256      =1  #define SetPanelContrastReg(sccolor, cval)    WriteTW88(0x71+sccolor,cval)
 257      =1  
 258      =1  #define GetPanelBrightnessReg(gbcolor)      ReadTW88(0x74+gbcolor);
 259      =1  #define SetPanelBrightnessReg(sbcolor, bval)  WriteTW88(0x74+sbcolor,bval);
 260      =1  
 261      =1  #define SetDTVBrightnessReg(bval)       WriteTW88(0x74,bval);
 262      =1  
 263      =1  #define GetPanelSaturationReg(gbcolor)      ReadTW88(0x72+gbcolor);
 264      =1  #define SetPanelSaturationReg(sbcolor, bval)  WriteTW88(0x72+sbcolor,bval);
 265      =1  
 266      =1  #define SetPanelSharpnessReg(bval)        WriteTW88(0x78,((bval&0x07)|0x38) );
 267      =1  
 268      =1  #define SetPanelHueReg(bval)          WriteTW88(0x70, (ReadTW88(0x70) & 0xc0 | (bval)) );
 269      =1  
 270      =1  #define GetVideoContrastReg()         ReadDecoder(CONTRAST)
 271      =1  #define SetVideoContrastReg(vcval)        WriteDecoder(CONTRAST, vcval)
 272      =1  
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 41  

 273      =1  #define GetVideoBrightnessReg()         ReadDecoder(BRIGHT)
 274      =1  #define SetVideoBrightnessReg(vbval)      WriteDecoder(BRIGHT, vbval )
 275      =1  
 276      =1  #define GetVideoSaturationReg(gvstype)      ReadDecoder(SAT_U+gvstype)
 277      =1  #define SetVideoSaturationReg(svstype, vsval) WriteDecoder(SAT_U+svstype, vsval)
 278      =1  
 279      =1  #define GetVideoHueReg()            ReadDecoder(HUE)
 280      =1  #define SetVideoHueReg(vhval)         WriteDecoder(HUE, vhval )
 281      =1  
 282      =1  #define GetVideoSharpnessRegDef         (ReadDecoder(SHARPNESS) & 0x0f) 
 283      =1  
 284      =1  #define GetVideoSharpnessReg()          GetVideoSharpnessRegDef
 285      =1  //#define SetVideoSharpnessReg(vshval)      WriteDecoder(SHARPNESS, vshval )
 286      =1  #define SetVideoSharpnessReg(vshval)      WriteDecoder(SHARPNESS, ((ReadDecoder(SHARPNESS) & 0xf0) | (vshval 
             -& 0x0f) ) );
 287      =1  
 288      =1  #ifdef TW9908
           =1 #define SetVideoVPeakingReg(vshval)
           =1 #else
 291      =1  #define SetVideoVPeakingReg(vshval)       WriteDecoder(V_PEAKING, ((ReadDecoder(V_PEAKING) & 0xf8) | (vshval 
             -& 0x07) ) );
 292      =1  #endif
 293      =1  
 294      =1  #define SetVideoHfilterReg(val)         WriteDecoder(HFILTER, ((ReadDecoder(HFILTER) & 0xf8) | (val & 0x07) )|
             -0x08 );
 295      =1  //----------------------------------------------------------------------------------
 296      =1  //color type
 297      =1  #define RED   0
 298      =1  #define GREEN 1
 299      =1  #define BLUE  2
 300      =1  #define WHITE 3
 301      =1  //saturation type
 302      =1  #define U_SAT 0
 303      =1  #define V_SAT 1
 304      =1  
 305      =1  //Alpha Blending Level
 306      =1  #define _0    0
 307      =1  #define _25   0x12
 308      =1  #define _37_5 0x13
 309      =1  #define _50   0x14
 310      =1  #define _100  0x18
 311      =1  
 312      =1  BYTE GetKey(BYTE repeat);
 313      =1  
 314      =1  /*
 315      =1  BYTE Mapping( int fromValue, struct RegisterInfo fromRange,
 316      =1                                   int * toValue, struct RegisterInfo toRange );
 317      =1  */
 318      =1  BYTE Mapping1( int fromValue, CODE_P struct RegisterInfo *fromRange,
 319      =1                                   int * toValue, CODE_P struct RegisterInfo *toRange );
 320      =1  #ifdef KEILC
 321      =1  #define Mapping2( A, B, C, D )      Mapping1( A, B, C, D )
 322      =1  #define Mapping3( A, B, C, D )      Mapping1( A, B, C, D )
 323      =1  #else
           =1 BYTE Mapping2( int fromValue, IDATA_P struct RegisterInfo *fromRange,
           =1                                  int * toValue, CODE_P struct RegisterInfo *toRange );
           =1 BYTE Mapping3( int fromValue, CODE_P struct RegisterInfo *fromRange,
           =1                                  int * toValue, IDATA_P struct RegisterInfo *toRange );
           =1 #endif
 329      =1  
 330      =1  BYTE GetAttributesFromNTSCSettings(BYTE index);
 331      =1  
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 42  

 332      =1  #endif  // __TW88__
 333      =1  
  15          #include "i2c.h"
   1      =1  #ifndef __I2C_H__
   2      =1  #define __I2C_H__
   3      =1  
   4      =1  
   5      =1  void I2CReadByte3(BYTE *);
   6      =1  void I2CRead8Byte(BYTE *);
   7      =1  #if 0
           =1 void I2CReadByteMSP(BYTE addr, BYTE index, BYTE *pd, BYTE cnt);
           =1 #endif
  10      =1  BYTE I2CWriteByte2(BYTE);
  11      =1  BYTE I2CWriteByte3(BYTE*);
  12      =1  BYTE I2CWrite8Byte(BYTE *);
  13      =1  
  14      =1  void I2CStart(void);
  15      =1  void I2CWriteData(BYTE value);
  16      =1  BYTE I2CReadData(void);
  17      =1  #if 0
           =1 BYTE I2CReadDataWithACK(void);
           =1 #endif
  20      =1  void I2CStop(void);
  21      =1  void I2Cdelay(void);
  22      =1  
  23      =1  
  24      =1  #define WriteTW88(a,b)    WriteI2C(TW88I2CAddress, a, b)
  25      =1  #define ReadTW88(a)     ReadI2C(TW88I2CAddress, a)
  26      =1  
  27      =1  BYTE WriteTW88_Wait (BYTE, BYTE);
  28      =1  void WriteADC   (BYTE, BYTE);
  29      =1  BYTE ReadADC    (BYTE);
  30      =1  BYTE ReadADC_TW88(BYTE index);
  31      =1  void WriteADC_TW88(BYTE index, BYTE dat);
  32      =1  
  33      =1  void WriteEEP   (WORD, BYTE);
  34      =1  BYTE ReadEEP    (WORD);
  35      =1  WORD ReadALC106(WORD index);
  36      =1  void WriteALC106(WORD index, WORD  dat);
  37      =1  WORD ReadI2CWORD(BYTE addr, BYTE index);
  38      =1  BYTE ReadI2C    (BYTE addr, BYTE index);
  39      =1  void WriteI2C   (BYTE addr, BYTE index, BYTE val);
  40      =1  
  41      =1  void WriteI2Cn_(BYTE addr, BYTE *val, BYTE cnt);
  42      =1  void WriteI2Cn (BYTE addr, BYTE index, BYTE *val, BYTE cnt);
  43      =1  void WriteI2CnD(BYTE addr, BYTE index, BYTE val, BYTE cnt);
  44      =1  
  45      =1  void ReadI2Cmn(BYTE addr, BYTE wcnt, BYTE rcnt, BYTE *rwdata);
  46      =1  
  47      =1  #define   WriteADC(a,b) WriteADC_TW88(a,b)
  48      =1  #define   ReadADC(a)    ReadADC_TW88(a)
  49      =1  
  50      =1  #endif  /* __I2C_H__ */
  16          #include "etc_eep.h"
   1      =1  #ifndef __ETC_EEP__
   2      =1  #define __ETC_EEP__
   3      =1  
   4      =1  
   5      =1  ////eeprom.h
   6      =1  
   7      =1  //=========================================================================
   8      =1  //  EEPROM structure
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 43  

   9      =1  //  0x00  BYTE  4 'TW88'
  10      =1  #define EEP_FWREV_MAJOR     0x04  //BYTE  1 F/W Rev.-major(Hex) 
  11      =1  #define EEP_FWREV_MINOR     0x05  //BYTE  1 F/W Rev.-minor(Hex)
  12      =1  #define EEP_DEBUGLEVEL      0x06  //BYTE  1 DebugLevel
  13      =1  //
  14      =1  #define EEP_AUTODETECT      0x07  //BYTE  1 Flag for Input Auto Detect  -0:Auto, 1:NTSC,....
  15      =1  #define EEP_AUTODETECTTYTE    0x08  //BYTE  1 Type of Auto-detect(will be value of register 0x1d)
  16      =1  //      ---------------------------------------------------------------
  17      =1  #define EEP_WIDEMODE      0x09  //BYTE  1   Wide Mode
  18      =1  
  19      =1  #define EEP_AUTORECOGNITION   0x0a  //BYTE  1 Auto Recognition
  20      =1  #define EEP_VIDEOMODE     0x0b  //BYTE  1   Video Mode
  21      =1  
  22      =1  #define EEP_OSDLANG       0x0c  //BYTE  1   OSDLang           // 0
  23      =1  
  24      =1  #define EEP_OSDPOSITIONMODE   0x0d  //BYTE  1 OSD Position Mode
  25      =1  #define EEP_CCD         0x0e  //BYTE  1 Closed Caption- 0: off, 1:on
  26      =1  
  27      =1  #define EEP_INPUTSELECTION    0x0f  //BYTE  1 InputSelection
  28      =1  
  29      =1  //
  30      =1  #define EEP_PC_CONTRAST     0x10
  31      =1  #define EEP_PC_BRIGHT     0x11
  32      =1  
  33      =1  #define EEP_CONTRAST      0x12  //BYTE  1 Contrast 
  34      =1  #define EEP_BRIGHTNESS      0x13  //BYTE  1 Brightness
  35      =1  #define EEP_SATURATION_U    0x14  //BYTE  1 Saturation :U
  36      =1  #define EEP_SATURATION_V    0x15  //BYTE  1 Saturation :V
  37      =1  #define EEP_SHARPNESS     0x16  //BYTE  1 Sharpness 
  38      =1  #define EEP_HUE         0x17  //BYTE  1 Hue                    
  39      =1  
  40      =1  //====================================HS AWT 981001
  41      =1  #define  EEP_AutoMode           0xa0
  42      =1  #define  EEP_IMAGEMode          0xa1
  43      =1  #define  EEP_RearMode           0xa2
  44      =1  #define  EEP_COSDMode           0xa3
  45      =1  #define  EEP_GAUGEMode          0xa4
  46      =1  #define  EEP_CAMAMode           0xa5 
  47      =1  #define  EEP_CAMBMode           0xa6
  48      =1  #define  EEP_CAMCMode           0xa7
  49      =1  #define  EEP_CAMRMode           0xa8
  50      =1  #define  EEP_CAMOutMode         0xa9  
  51      =1  #define  EEP_TimeStep           0xaa
  52      =1  #define  EEP_Powerflag          0xab   
  53      =1  #define  EEP_ONOFFChoice        0xac 
  54      =1  
  55      =1  #define  EEP_PRIORITY           0xad
  56      =1  #define  EEP_JUMPMode           0xae
  57      =1  #define  EEP_NowModeState       0xaf
  58      =1  #define  EEP_SelectMode         0xb0
  59      =1  #define  EEP_PriorityOffSelectMode  0xb1
  60      =1  #define  EEP_AudioRecord    0xb2
  61      =1  
  62      =1  #define  EEP_FirstNumber    0xb3
  63      =1  #define  EEP_SecondNumber   0xb4
  64      =1  #define  EEP_ThridNumber    0xb5
  65      =1  #define  EEP_FourthNumber   0xb6
  66      =1  
  67      =1  #define  EEP_CAMNUMBER     0xb7
  68      =1  #define  EEP_PELCO       0xb8
  69      =1  #define  EEP_Baud_rate     0xb9
  70      =1  #define  EEP_TriggerVGA    0xba
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 44  

  71      =1  #define  EEP_DVRDisplay    0xbb
  72      =1  #define  EEP_IMAGE_A_Mode    0xbc//andy A1.4 20100113
  73      =1  #define  EEP_IMAGE_B_Mode    0xbd//andy A1.4 20100113
  74      =1  #define  EEP_IMAGE_C_Mode    0xbe//andy A1.4 20100113
  75      =1  
  76      =1  #define  EEP_SDCardDetect    0xbf//andy A1.4 20100113
  77      =1  
  78      =1  #ifdef HTRV
           =1 #define  EEP_Gauge_VStart  0x211   //WILLIAM-970318
           =1 static  BYTE GaugeVStart;
           =1 #endif
  82      =1  
  83      =1  #define  EEP_DELAYCAMA           0xC0 
  84      =1  #define  EEP_DELAYCAMB           0xC1
  85      =1  #define  EEP_DELAYCAMC           0xC2
  86      =1  #define  EEP_DELAYCAMR           0xC3
  87      =1  #ifdef USE_CAMD
           =1 #define  EEP_DELAYCAMD           0xC4
           =1 #endif
  90      =1  //#define  EEP_SelectModeBuf         0xb2
  91      =1  #define  EEP_ReverseMode    0xc5
  92      =1  #define  EEP_JUMPAV_TIMESET 0xc6
  93      =1  #if 0
           =1 #define  EEP_Resolution     0xc0
           =1 #define  EEP_FPS        0xc1
           =1 #define  EEP_Quality      0xc2
           =1 #define  EEP_RecordMode     0xc3
           =1 #define  EEP_RecordLength   0xc4
           =1 #define  EEP_PreAlarmLength   0xc5
           =1 #define  EEP_PostAlarmLength  0xc6
           =1 #endif
 102      =1  //====================================HS AWT 981001
 103      =1  
 104      =1  #ifdef AWT_ADD_TRIGGER_DELAY_FUN  
 105      =1  #define  EEP_CamADelay    0x21b
 106      =1  #define  EEP_CamBDelay    0x21c
 107      =1  #define  EEP_CamCDelay    0x21d
 108      =1  #define  EEP_CamRDelay    0x21e
 109      =1  #endif
 110      =1  //====================================
 111      =1  //
 112      =1  //        ---------------------------------------------------------------
 113      =1  #define EEP_PCAUDIOPVOL   0x37  //BYTE  1   AudioVol
 114      =1  #define EEP_AUDIOPVOL     0x38  //BYTE  1   AudioVol
 115      =1  #define EEP_AUDIOBALANCE    0x39  //BYTE  1   AudioBalance
 116      =1  //
 117      =1  //        ---------------------------------------------------------------
 118      =1  
 119      =1  #define EEP_BLOCKMOVIE      0x40  //BYTE  1 BlockedMovie:Blocked rating for Movie 
 120      =1  #define EEP_BLOCKTV       0x41  //BYTE  1 BlockedTV:Blocked rating for TV     
 121      =1  #define EEP_FVSLD       0x42  //BYTE  6
 122      =1  //                            7    6       4    3    2    1    0
 123      =1  //  FVSLD Level                        ALL   FV(V)   S    L    D    
 124      =1  //  0x43    BYTE    1   TV-Y            X  
 125      =1  //  0x44  BYTE    1   TV-Y7           X    X 
 126      =1  //  0x45  BYTE    1   TV-G            X 
 127      =1  //  0x46  BYTE    1   TV-PG           X       X    X    X    X
 128      =1  //  0x47  BYTE    1   TV-14           X       X    X    X    X 
 129      =1  //  0x48  BYTE    1   TV-MA           X       X    X    X
 130      =1  //
 131      =1  #define EEP_VCHIPPASSWORD   0x49  //BYTE  4   OSDPassword         //Defualt:3366
 132      =1  //      ---------------------------------------------------------------
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 45  

 133      =1  //
 134      =1  //
 135      =1  //  0x61  WORD  2   PanelXRes
 136      =1  //  0x63  WORD  2 PanelYRes
 137      =1  //  0x65  BYTE  1 PanelHsyncMinPulseWidth
 138      =1  //  0x66  BYTE  1 PanelVsyncMinPulseWidth
 139      =1  //  0x67  WORD  2 PanelHminBackPorch
 140      =1  //  0x69  BYTE  1 PanelHsyncPolarity
 141      =1  //  0x6a  BYTE  1 PanelVsyncPolarity
 142      =1  //  0x6b  WORD  2 PanelDotClock
 143      =1  //  0x6d  BYTE  1 PanelPixsPerClock
 144      =1  //  0x6e  BYTE  1 PanelDEonly
 145      =1  //      ---------------------------------------------------------------
 146      =1  //
 147      =1  //  0x80  PC Data
 148      =1  //
 149      =1  //      ---------------------------------------------------------------
 150      =1  //
 151      =1  //  0x300 TV Data
 152      =1  //
 153      =1  //  --- NTSC_TV -------------------------------------------------------------
 154      =1  //  CNT_SAVEDAIR      BYTE  1   Total count of saved Air TV Channel.
 155      =1  //  IDX_CURAIR        BYTE  1   Index of Current Air TV Channel
 156      =1  //  CHN_CURAIR        BYTE    1   Current Air TV Channel.
 157      =1  //
 158      =1  //  FIRSTSAVED_AIRCHN   BYTE    1 First saved Air TV channel no (maximum 100)
 159      =1  //  ....
 160      =1  //
 161      =1  //  CNT_SAVEDCABLE      BYTE  1   Total count of saved Cable TV Channel.
 162      =1  //  IDX_CURCABLE      BYTE  1   Index of Current Cable TV Channel
 163      =1  //  CHN_CURCABLE      BYTE    1   Current Cable TV Channel.
 164      =1  //
 165      =1  //  FIRSTSAVED_CABLECHN   BYTE  1 First saved Cable TV channel no (maximum 100)
 166      =1  //
 167      =1  //  --- PAL_TV --------------------------------------------------------------
 168      =1  //  PR_CUR          BYTE  1   Current PR no.
 169      =1  //  FIRST_SAVEDPR     DWORD 4   Freq of PR0.  (TOTAL_PR)
 170      =1  //  FIRST_SAVEDPR+4     DWORD   4   Freq of PR1.
 171      =1  //  .....
 172      =1  //
 173      =1  
 174      =1  
 175      =1  
 176      =1  //
 177      =1  // Offset of EEPROM
 178      =1  //
 179      =1  /*
 180      =1  #define VIDEOCONTRAST   0x18    // for NTSC.(PAL:0x20,SECAM:0x28)
 181      =1  #define VIDEOBRIGHTNESS   0x19
 182      =1  #define VIDEOSATURATION_U 0x1a
 183      =1  #define VIDEOSATURATION_V 0x1b
 184      =1  #define VIDEOHUE      0x1c    // only for NTSC
 185      =1  #define VIDEOSHARPNESS    0x1d
 186      =1  */
 187      =1  #define CCCOLOR   0x52
 188      =1  #define VOLZOOM   0x53
 189      =1  
 190      =1  #define PANELINFO 0x61
 191      =1  
 192      =1  // PAL_TV
 193      =1  #define  PR_CUR         0x301 
 194      =1  #define  FIRST_SAVEDPR      0x308 
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 46  

 195      =1   #define TVFREQ_HIGH 0 
 196      =1   #define TVFREQ_LOW  1
 197      =1  #ifdef PAL_TV
           =1  #define TVFINETUNE  2
           =1     // NOT Finetune: 0 , Range: -32 ~ +32
           =1  #define TVPRSYSTEM  3  
           =1     // bit 7: Add:1 Ereased :0
           =1     // 
           =1  #define TVCHNAME    4
           =1 
           =1  #define BYTEPERCHANNEL 9 
           =1 #endif
 207      =1  // NTSC_TV
 208      =1  #define  EEP_TVInputSel     0x302
 209      =1  #define  CHN_CURAIR       0x303 
 210      =1  #define  FIRSTSAVED_AIRCHN    0x308 
 211      =1  #define  CHN_CURCABLE     0x403 
 212      =1  #define  FIRSTSAVED_CABLECHN  0x408 
 213      =1  #ifdef NTSC_TV
           =1  #define TVFINETUNE  0
           =1     // NOT Finetune: 0 , Range: -32 ~ +32
           =1  #define TVPRSYSTEM  1  
           =1     // bit 7: Add:1 Ereased :0
           =1     // 
           =1  #define BYTEPERCHANNEL 2
           =1 #endif
 221      =1  
 222      =1  
 223      =1  
 224      =1  
 225      =1  WORD GetFWRevEE(void);
 226      =1  void SaveFWRevEE(WORD);
 227      =1  
 228      =1  BYTE GetDebugLevelEE(void);
 229      =1  void SaveDebugLevelEE(BYTE);
 230      =1  
 231      =1  #ifdef WIDE_SCREEN
           =1 BYTE GetWideModeEE(void);
           =1 void SaveWideModeEE(BYTE dl);
           =1 #endif
 235      =1  
 236      =1  
 237      =1  //BYTE GetRange4CoarseEE(void);
 238      =1  //void SaveRange4CoarseEE(BYTE);
 239      =1  
 240      =1  BYTE GetPossibleAutoDetectStdEE(void);
 241      =1  void SetPossibleAutoDetectStdEE(void);
 242      =1  
 243      =1  //BYTE GetOSDXPositionEE(void);
 244      =1  //BYTE GetOSDYPositionEE(void);
 245      =1  BYTE GetClosedCaptionFlagEE(void);
 246      =1  
 247      =1  BYTE GetVideoDatafromEE(BYTE);
 248      =1  void SaveVideoDatatoEE(BYTE offset, BYTE ndata);
 249      =1  
 250      =1  //BYTE GetVideoBrightnessEE(void);
 251      =1  //BYTE GetVideoSaturationEE(BYTE);
 252      =1  //BYTE GetVideoHueEE(void);
 253      =1  //BYTE GetVideoSharpnessEE(void);
 254      =1  
 255      =1  //void SaveVideoContrastEE(BYTE ndata);
 256      =1  //void SaveVideoBrightnessEE(BYTE ndata);
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 47  

 257      =1  //void SaveVideoSaturationEE(BYTE, BYTE ndata);
 258      =1  //void SaveVideoHueEE(BYTE ndata);
 259      =1  //void SaveVideoSharpnessEE(BYTE ndata);
 260      =1  
 261      =1  BYTE GetOSDPositionModeEE(void);
 262      =1  void SaveOSDPositionModeEE(BYTE ndata);
 263      =1  //void SaveOSDXPositionEE(BYTE);
 264      =1  //void SaveOSDYPositionEE(BYTE);
 265      =1  
 266      =1  void SaveClosedCaptionFlagEE(BYTE);
 267      =1  
 268      =1  BYTE GetBlockedTVEE(void);      
 269      =1  void SaveBlockedTVEE(BYTE vi);    
 270      =1  BYTE GetBlockedTV_FLDSLEE( BYTE level ) ;
 271      =1  void SaveBlockedTV_FLDSLEE(BYTE level, BYTE vi) ;
 272      =1  
 273      =1  BYTE GetBlockedMovieEE(void);   
 274      =1  void SaveBlockedMovieEE(BYTE vi); 
 275      =1  #if 0
           =1 BYTE GetInputSelectionEE(void);
           =1 #endif
 278      =1  void SaveInputSelectionEE(BYTE val);
 279      =1  
 280      =1  //BYTE GetOSDDurationEE(void);
 281      =1  //void SaveOSDDurationEE(BYTE val);
 282      =1  
 283      =1  BYTE GetOSDLangEE(void);
 284      =1  void SaveOSDLangEE(BYTE val);
 285      =1  
 286      =1  //ljy100303...BYTE GetOSDZoomEE(void);
 287      =1  //ljy100303...void SaveOSDZoomEE(BYTE val);
 288      =1  
 289      =1  BYTE GetAudioVolEE(void);
 290      =1  void SetAudioVolEE( BYTE vol );
 291      =1  BYTE GetPCAudioVolEE(void);
 292      =1  void SetPCAudioVolEE( BYTE vol );
 293      =1  #if 0
           =1 BYTE GetAudioBalanceEE(void);
           =1 void SetAudioBalanceEE( BYTE vol );
           =1 BYTE GetAudioBassEE(void);
           =1 void SetAudioBassEE( BYTE vol );
           =1 BYTE GetAudioTrebleEE(void);
           =1 void SetAudioTrebleEE( BYTE vol );
           =1 #endif
 301      =1  //BYTE GetAudioEffectEE(void);
 302      =1  //void SetAudioEffectEE( BYTE vol );
 303      =1  
 304      =1  void ClearBasicEE(void);
 305      =1  
 306      =1  BYTE ValidPassword(DATA_P BYTE *numstr, BYTE index);
 307      =1  BYTE SetNewPassword(DATA_P BYTE *numstr, BYTE index);
 308      =1  
 309      =1  //WORD GetPanelXRes(void);
 310      =1  //WORD GetPanelYRes(void);
 311      =1  BYTE GetPanelHsyncMinPulseWidth(void);
 312      =1  BYTE GetPanelVsyncMinPulseWidth(void);
 313      =1  WORD GetPanelHMinBackPorch(void);
 314      =1  BYTE GetPanelHsyncPolarity(void);
 315      =1  BYTE GetPanelVsyncPolarity(void);
 316      =1  WORD GetPanelDotClock(void);
 317      =1  WORD GetPanelMaxClock(void);
 318      =1  BYTE GetPanelPixsPerClock(void);
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 48  

 319      =1  // Not used yet *************************  BYTE GetPanelDEonly(void);
 320      =1  
 321      =1  void AddTVChannelEE( BYTE tvtype, BYTE chn);
 322      =1  BYTE GetTVChannelEE( BYTE tvtype, BYTE inx);
 323      =1  void ResetTVChannelEE( BYTE tvtype );
 324      =1  BYTE GetTVChannelCntEE(BYTE tvtype);
 325      =1  BYTE GetTVChnIdxEE(BYTE tvtype);
 326      =1  BYTE GetCurTVChannelEE(BYTE tvtype);
 327      =1  void SetTVChnIdxEE(BYTE tvtype, BYTE newd);
 328      =1  void SetCurTVChannelEE(BYTE tvtype, BYTE newd);
 329      =1  BYTE InsertTVChannelEE(BYTE tvtype, BYTE newd);
 330      =1  BYTE RemoveTVChannelEE(BYTE tvtype, BYTE newd);
 331      =1  
 332      =1  void SetTVPrEE(void);
 333      =1  BYTE GetTVPrEE(void);
 334      =1  void SetTVFreqEE(BYTE, WORD);
 335      =1  WORD GetTVFreqEE(BYTE);
 336      =1  void SetFineTuneEE(BYTE, BYTE);
 337      =1  BYTE GetFineTuneEE(BYTE);
 338      =1  BYTE GetTVPrSystem(BYTE);
 339      =1  void SetTVPrSystem(BYTE, BYTE);
 340      =1  BYTE GetTVInputSelEE(void);
 341      =1  void SetTVInputSelEE(BYTE);
 342      =1  
 343      =1  #define GetVInputStdDetectModeEE()        ReadEEP(EEP_AUTODETECTTYTE)
 344      =1  #define SaveVInputStdDetectModeEE(A)      WriteEEP(EEP_AUTODETECTTYTE, A)
 345      =1  
 346      =1  #define GetAutoRecogntionEE()         ReadEEP(EEP_AUTORECOGNITION)
 347      =1  #define SaveAutoRecogntionEE(A)         WriteEEP(EEP_AUTORECOGNITION, A)
 348      =1  
 349      =1  #define SetVideoModeEE( ctid )          WriteEEP( EEP_VIDEOMODE, ctid )
 350      =1  #define GetVideoModeEE()            ReadEEP( EEP_VIDEOMODE )
 351      =1  
 352      =1  #define GetPanelContrastEE()          ReadEEP(0x10)
 353      =1  
 354      =1  #if defined( SUPPORT_PC ) || defined( SUPPORT_DTV )
           =1 //#define GetPanelHueEE()             ReadEEP(0x28)
           =1 //#define GetPanelSharpnessEE()         ReadEEP(0x29)
           =1 #define GetPanelBrightnessEE()          ReadEEP(0x11)
           =1 //#define GetPanelSaturationEE()          ReadEEP(0x2a)
           =1 
           =1 //#define SavePanelHueEE(A)           WriteEEP(0x28, A)
           =1 //#define SavePanelSharpnessEE(A)         WriteEEP(0x29, A)
           =1 #define SavePanelContrastEE(A)          WriteEEP(0x10, A)
           =1 #define SavePanelBrightnessEE(A)        WriteEEP(0x11, A)
           =1 //#define SavePanelSaturationEE(A)        WriteEEP(0x2a, A)
           =1 #endif
 366      =1  
 367      =1  /*
 368      =1  #define GetDigitalVideoContrastEE()       ReadEEP(0x2b)
 369      =1  #define GetDigitalVideoBrightnessEE()     ReadEEP(0x2c)
 370      =1  #define GetDigitalVideoHueEE()          ReadEEP(0x2d)
 371      =1  #define GetDigitalVideoSaturationEE(off)    ReadEEP(0x2e+off)
 372      =1  
 373      =1  #define SaveDigitalVideoContrastEE(A)     WriteEEP(0x2b, A)
 374      =1  #define SaveDigitalVideoBrightnessEE(A)     WriteEEP(0x2c, A)
 375      =1  #define SaveDigitalVideoHueEE(A)        WriteEEP(0x2d, A)
 376      =1  #define SaveDigitalVideoSaturationEE(off,A)   WriteEEP(0x2e+off, A)
 377      =1  */
 378      =1  
 379      =1  #endif  // __ETC_EEP__
  17          #include "audio.h"
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 49  

   1      =1  
   2      =1  #define MAX_SOUND_VOLUME 50
   3      =1  extern  BYTE  AudioVol;
   4      =1  extern  BYTE  PCAudioVol;
   5      =1  
   6      =1  //BYTE ResetMSP(void);
   7      =1  //void SetMSPSCARTPrescale(void);
   8      =1  //void SetMSPSourceSel(void);
   9      =1  //void SetMSPVol(void);
  10      =1  
  11      =1  //BYTE AudioAutoStdDetection(void);
  12      =1  //BYTE SteroMonoDetection(void);
  13      =1  
  14      =1  //BYTE TunerAudio(void);
  15      =1  //void ExtAudio(void);
  16      =1  //id PCAudio(void);
  17      =1  //id MuteOn(void);
  18      =1  //BYTE GetAudioVol(void);
  19      =1  BYTE ChangeVol(char);
  20      =1  //BYTE GetAudioBalance(void);
  21      =1  //BYTE ChangeBalance(char);
  22      =1  //BYTE GetAudioBass(void);
  23      =1  //BYTE ChangeBass(char);
  24      =1  //BYTE GetAudioTreble(void);
  25      =1  //BYTE ChangeTreble(char);
  26      =1  //BYTE GetAudioEffect(void);
  27      =1  //BYTE ChangeAudioEffect(char amount);
  28      =1  //void ToggleAudioMute(void);
  29      =1  //void CheckAndClearMuteOn(void);
  30      =1  
  31      =1  //BYTE IsAudioMuteOn(void);
  32      =1  //void SetAudioMute(BYTE on );
  33      =1  //void ChangeMTS(BYTE type);
  34      =1  //void AudioOff(void);
  35      =1  void AudioMute(bit mute);
  36      =1  extern void    Wait_ms(WORD Tms);
  37      =1  
  38      =1  //#define AudioOn()     SetMSPVol()
  39      =1  //void ResetAudioValue();
  18          #include "measure.h"
   1      =1  #ifndef __MEASURE__
   2      =1  #define __MEASURE__
   3      =1  
   4      =1  #define EE_DOS        0
   5      =1  
   6      =1  #define EE_SP1        1
   7      =1  #define EE_SP2        2
   8      =1  #define EE_SP3        3
   9      =1  
  10      =1  #define EE_VGA_60     4
  11      =1  #define EE_VGA_66     5
  12      =1  #define EE_VGA_70     6
  13      =1  #define EE_VGA_72     7
  14      =1  #define EE_VGA_75     8
  15      =1  #define EE_VGA_85     9
  16      =1  
  17      =1  #define EE_SVGA_56      10
  18      =1  #define EE_SVGA_60      11
  19      =1  #define EE_SVGA_70      12
  20      =1  #define EE_SVGA_72      13
  21      =1  #define EE_SVGA_75      14
  22      =1  #define EE_SVGA_85      15
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 50  

  23      =1  
  24      =1  #define EE_832_75     16
  25      =1  
  26      =1  #define EE_XGA_60     17
  27      =1  #define EE_XGA_70     18
  28      =1  #define EE_XGA_72     19
  29      =1  #define EE_XGA_75     20
  30      =1  #define EE_XGA_85     21
  31      =1  
  32      =1  #define EE_1152_60      22
  33      =1  #define EE_1152_70      23
  34      =1  #define EE_1152_75      24
  35      =1  
  36      =1  #define EE_SXGA_60      25
  37      =1  #define EE_SXGA_70      26
  38      =1  #define EE_SXGA_75      27
  39      =1  
  40      =1  #define EE_RGB_480P     28
  41      =1  #define EE_RGB_720P     29
  42      =1  #define EE_RGB_720P50   30
  43      =1  #define EE_RGB_1080I    31
  44      =1  #define EE_RGB_1080I50A   32
  45      =1  #define EE_RGB_1080I50B   33
  46      =1  #define EE_RGB_480I     34
  47      =1  #define EE_RGB_576I     35
  48      =1  #define EE_RGB_576P     36
  49      =1  
  50      =1  #define EE_YPbPr_480P   37
  51      =1  #define EE_YPbPr_720P   38
  52      =1  #define EE_YPbPr_720P50   39
  53      =1  #define EE_YPbPr_1080I    40
  54      =1  #define EE_YPbPr_1080I50A 41
  55      =1  #define EE_YPbPr_1080I50B 42
  56      =1  #define EE_YPbPr_480I   43
  57      =1  #define EE_YPbPr_576I   44
  58      =1  #define EE_YPbPr_576P   45
  59      =1  
  60      =1  #define EE_PC_MAX     46
  61      =1  
  62      =1  #define EE_PC_NO_SIGNAL   0xfe
  63      =1  #define EE_PC_UNKNOWN   0xff
  64      =1  
  65      =1  struct _PCMDATA {
  66      =1    CODE_P BYTE  Support;
  67      =1    CODE_P WORD  HAN;
  68      =1    CODE_P WORD  VAN;
  69      =1    CODE_P WORD  IVF;
  70      =1    CODE_P WORD  CLOCK;
  71      =1    CODE_P WORD  low;
  72      =1    CODE_P WORD  high;
  73      =1    CODE_P WORD  Hstart;
  74      =1    CODE_P WORD  Vstart;
  75      =1    CODE_P WORD  IPF;   // 0.1MHz
  76      =1    CODE_P WORD  PPF;   // 0.1MHz
  77      =1    CODE_P BYTE  VBack;
  78      =1  };
  79      =1  #ifndef AUTOCALC_PC
           =1 
           =1 #ifdef SUPPORT_DTV
           =1 struct _DTVMDATA {
           =1   CODE_P BYTE Reg62;
           =1   CODE_P BYTE RegBC;
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 51  

           =1   CODE_P BYTE RegBD;
           =1   CODE_P BYTE RegBE;
           =1   CODE_P WORD PHP;
           =1 };
           =1 #endif
           =1 #endif
  91      =1  #if defined XGA
           =1   #define MAX_PPF    90000000
           =1 #elif defined SXGA
           =1   #define MAX_PPF   135000000
           =1 #elif defined WXGA
           =1   #define MAX_PPF    90000000
           =1 #elif defined WVGA
  98      =1    #define MAX_PPF    90000000
  99      =1  #elif defined VGA
           =1   #define MAX_PPF    50000000
           =1 #elif defined SVGA
           =1   #define MAX_PPF    80000000
           =1 #elif defined QVGA
           =1   #define MAX_PPF    30000000
           =1 #elif defined WQVGA
           =1   #define MAX_PPF    30000000
           =1 #endif
 108      =1  
 109      =1  extern BYTE cLastSyncLoss;
 110      =1  extern BYTE PcMode;
 111      =1  
 112      =1  void CompLT170E2(void);
 113      =1  
 114      =1  WORD gap(WORD a, WORD b);
 115      =1  
 116      =1  //===================================================================
 117      =1  WORD GetHpnVpn(BYTE);
 118      =1  
 119      =1  WORD ConvertBasedOnInput(WORD dat);
 120      =1  
 121      =1  BYTE IsDTVInput(void);
 122      =1  
 123      =1  void SetVValueForPanel(WORD vstart);
 124      =1  BYTE SetHValueForPanel(void);
 125      =1  BYTE GetActiveRegion(void);
 126      =1  
 127      =1  BYTE DetectAndSetForVGAInput(BYTE);
 128      =1  #ifdef SUPPORT_DTV
           =1 BYTE DetectAndSetForDTVInput(BYTE);
           =1 #endif
 131      =1  void CheckPCinput(void);
 132      =1  void CheckDTVinput(void);
 133      =1  
 134      =1  WORD GetCoarseValue(void);
 135      =1  BYTE GetPhaseValue(void);
 136      =1  WORD SetPCCoarseValue(BYTE val);
 137      =1  BYTE SetPhaseValue(BYTE val);
 138      =1  
 139      =1  void DisplayResultAndSetActiveRange(void);
 140      =1  
 141      =1  //=============================================================================
 142      =1  //                    PC Screen Position Move Functions
 143      =1  //=============================================================================
 144      =1  void MoveActiveVpos(BYTE val);    // Up/Down
 145      =1  void MoveActiveHpos(BYTE val);    // Left/Right
 146      =1  
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 52  

 147      =1  BYTE GetVPosition(void);
 148      =1  BYTE SetVPosition(BYTE val);
 149      =1  BYTE GetHPosition(void);
 150      =1  BYTE SetHPosition(BYTE val);
 151      =1  
 152      =1  void ResetPCValue(void);
 153      =1  
 154      =1  CODE_P BYTE *GetPCInputSourceName(void);
 155      =1  BYTE AutoAdjust(void);
 156      =1  
 157      =1  #endif // __MEASURE__
  19          #include "pc_eep.h"
   1      =1  #ifndef __PC_EEP__
   2      =1  #define __PC_EEP__
   3      =1  
   4      =1  
   5      =1  // -----------------------------------------------------------------------------
   6      =1  #define PC_COLOR_DATA 0x80  // StartAddress of EEPROM for PC Color Temperature
   7      =1  #define PC_USERCOLOR  0x8A
   8      =1  #define SetPCColorTempModeEE( ctid )      WriteEEP( PC_COLOR_DATA, ctid )
   9      =1  #define GetPCColorTempModeEE()          ReadEEP( PC_COLOR_DATA )
  10      =1  
  11      =1  #define GetPCUserColorTempEE( ucolorr)      ReadEEP( PC_USERCOLOR+ucolorr )
  12      =1  #define SavePCUserColorTempEE( ucolorw, uval) WriteEEP( PC_USERCOLOR+ucolorw, uval )
  13      =1  #define GetPCColorEE(index)           ReadEEP(index)
  14      =1  
  15      =1  // -----------------------------------------------------------------------------
  16      =1  #define EE_ADC_GO   0x90  // ADC Gain Offset for PC
  17      =1  #define EE_ADC_GO_DTV 0x98  // ADC Gain Offset for DTV
  18      =1  
  19      =1  #define EE_PCDATA   0xC0  // StartAddress of EEPROM for PCDATA
  20      =1  #define LEN_PCDATA    5   // Length of PCDATA
  21      =1  
  22      =1  WORD GetHPNfromEE(BYTE mode);
  23      =1  
  24      =1  BYTE CheckPcDataEEValid(BYTE, WORD);
  25      =1  
  26      =1  WORD GetVactiveStartEE(BYTE mode);
  27      =1  WORD GetHactiveStartEE(BYTE mode);
  28      =1  
  29      =1  void GetPCDataEE(BYTE mode);
  30      =1  void SavePCDataEE(BYTE mode);
  31      =1  void SaveDefaultPCDataEE(void);
  32      =1  void SaveDefaultPCDataAllEE(void);
  33      =1  
  34      =1  void SaveHactiveEE(BYTE mode);
  35      =1  void SaveVactiveEE(BYTE mode);
  36      =1  void SaveVBackPorchEE(BYTE mode);
  37      =1  void SaveCoarseEE(BYTE mode);
  38      =1  void SavePhaseEE(BYTE mode);
  39      =1  /*
  40      =1  WORD GetHactiveStartEE(BYTE mode);
  41      =1  WORD GetVactiveStartEE(BYTE mode);
  42      =1  */
  43      =1  void DumpPCData(void);
  44      =1  
  45      =1  void SaveActiveVEE(WORD);
  46      =1  void SaveBackPorchEE(BYTE);
  47      =1  void SaveActiveHEE(WORD);
  48      =1  
  49      =1  void SaveADCGainOffsetEE(BYTE mod);
  50      =1  void GetADCGainOffsetEE(void);
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 53  

  51      =1  
  52      =1  void SaveADCGainOffsetForDTVEE(BYTE mod);
  53      =1  void GetADCGainOffsetForDTVEE(void);
  54      =1  
  55      =1  #endif  // __PC_EEP__
  20          #include "RegMap.h"
   1      =1  #ifndef __REGMAP__
   2      =1  #define __REGMAP__
   3      =1  
   4      =1  //-----------------------------------------------------------------------------
   5      =1  //        Individual Decoder Registers 
   6      =1  //-----------------------------------------------------------------------------
   7      =1  
   8      =1  #define MCU_STOP_MODE 0xc8  // bit 7 is mcu stop, bit5 is MCU debug
   9      =1  
  10      =1  #define LAD0      0xc9  // Low speed AD channel 0
  11      =1  #define LAD1      0xca  // Low speed AD channel 1
  12      =1  
  13      =1  #define REG_PAGE    0xff
  14      =1  #define STATUS0     0xd0
  15      =1  #define STATUS1     0xd1
  16      =1  #define IRQ_EN1     0xd2
  17      =1  #define IRQ_EN0     0xd3
  18      =1  
  19      =1  //-----------------------------------------------------------------------------
  20      =1  //        Individual Decoder Registers 
  21      =1  //-----------------------------------------------------------------------------
  22      =1  
  23      =1  #define DECODERADDRESS  TW88I2CAddress
  24      =1  
  25      =1  #define CVFMT     0x1e  // Component Video Format
  26      =1  #define FBSHIFT     0x38  // RGB Anti-Alias Filter/FB Shift Level
  27      =1  #define SHUE      0x3e  // RGB Hue
  28      =1  #define SCONTRAST   0x3b  // RGB Contrast
  29      =1  #define SBRIGHT     0x3a  // RGB Brightness
  30      =1  #define SCbGAIN     0x3c  // RGB Cb Gain
  31      =1  #define SCrGAIN     0x3d  // RGB Cb Gain
  32      =1  #define RGBCONTROL    0x36  // RGB Powerdown..
  33      =1  #define RGBMISC     0x39
  34      =1  #define FBCONTRL    0x3F
  35      =1  
  36      =1  //#define OSD_ADJ     0xce
  37      =1  #define PNLSHARPNESS  0x78  // Sharpness Control
  38      =1  #define OSDWINSTATUS  0x95
  39      =1  //-----------------------------------------------------------------------------
  40      =1  //        Common Registers
  41      =1  //-----------------------------------------------------------------------------
  42      =1  #define CSTATUS     0x01  // Chip Status
  43      =1  #define INFORM      0x02  // Input Format
  44      =1  #define ACNTL     0x06  // Analog Control
  45      =1  #define CROP_HI     0x07  // Cropping High
  46      =1  #define VDELAY_LO   0x08  // Vertical Delay Low
  47      =1  #define VACTIVE_LO    0x09  // Vertical Active Low
  48      =1  #define HDELAY_LO   0x0a  // Horizontal Delay Low
  49      =1  #define HACTIVE_LO    0x0b  // Horizontal Active Low
  50      =1  #define CNTRL1      0x0c  // Control 1
  51      =1  
  52      =1  #define BRIGHT      0x10  // Brightness Control
  53      =1  #define CONTRAST    0x11  // Contrast Control
  54      =1  #define SHARPNESS   0x12  // Sharpness Control
  55      =1  #define SAT_U     0x13  // Chroma(U) Gain
  56      =1  #define SAT_V     0x14  // Chroma(V) Gain
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 54  

  57      =1  #define HUE       0x15  // Hue Conrol
  58      =1  #define V_PEAKING   0x17  // Vertical Peaking
  59      =1  
  60      =1  #define CC_STATUS   0x1a  // CC/EDS Status
  61      =1  #define CC_DATA     0x1b  // CC/EDS Data
  62      =1  #define SDT       0x1c  // Standard Selection
  63      =1  #define SDTR      0x1d  // Standard Recognition
  64      =1  
  65      =1  #define V_CONTROL2    0x29  // Vertical Control II
  66      =1  #define HFILTER     0x2c
  67      =1  #define MISC1     0x2d  // Miscellaneous Control 1
  68      =1  #define MISC2     0x2e  // Miscellaneous Control 2
  69      =1  #define MISC3     0x2f  // Miscellaneous Control 2
  70      =1  
  71      =1  #define VBI_CNTL2   0x34  // VBI control 2 - WSSEN
  72      =1  #define CC_ODDLINE    0x35  // CC Odd Line
  73      =1  
  74      =1  #define LADC0     0xc9  //LADC Channel 0 Input Value 
  75      =1  #define LADC1     0xca  //LADC Channel 1 Input Value 
  76      =1  
  77      =1  #define WriteDecoder(index, val)    WriteTW88( index, val )
  78      =1  #define ReadDecoder(index)        ReadTW88( index )
  79      =1  
  80      =1  #endif // __REGMAP__
  81      =1  
  21          #include "panel.h"
   1      =1  //PanelConfig
   2      =1  
   3      =1    #if   defined SXGA
           =1             #define PHR_ 1280
           =1             #define PVR_ 1024
           =1   #elif defined XGA 
           =1             #define PHR_ 1024
           =1             #define PVR_ 768
           =1   #elif defined SVGA
           =1             #define PHR_ 800
           =1             #define PVR_ 600
           =1   #elif defined VGA
           =1             #define PHR_ 640
           =1             #define PVR_ 480
           =1   #elif defined QVGA
           =1             #define PHR_ 320
           =1             #define PVR_ 240
           =1   #elif defined WXGA
           =1             #define PHR_ 1280 //1366
           =1             #define PVR_ 768
           =1   #elif defined WSVGA
           =1             #define PHR_ 1024
           =1             #define PVR_ 600
           =1   #elif defined WVGA
  25      =1              #define PHR_ 800
  26      =1              #define PVR_ 480//600
  27      =1    #elif defined WQVGA
           =1         //    #define PHR_ 960 //480
           =1         //    #define PVR_ 237
           =1             #define PHR_ 480 //480
           =1             #define PVR_ 240
           =1   #endif
  33      =1  
  34      =1   
  35      =1  
  36      =1  /*
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 55  

  37      =1  #define ACTIVE_LOW      0
  38      =1  #define ACTIVE_HIGH     1
  39      =1  
  40      =1  CODE struct PanelConfig {
  41      =1    unsigned    x_res,          y_res;
  42      =1    unsigned char h_sync_min_pulse_width, v_sync_min_pulse_width;
  43      =1    unsigned    h_min_back_porch;
  44      =1    unsigned char h_sync_polarity,    v_sync_polarity;
  45      =1    unsigned    dot_clock,        max_clock;      // in unit Mhz*10
  46      =1    unsigned char pixs_per_clock;
  47      =1    unsigned char DE_only;
  48      =1  } PanelConfig=
  49      =1    {
  50      =1    //----------------------------------------------------
  51      =1    #ifdef WXGA
  52      =1    //LG  LM171W01 WXGA
  53      =1    1280,     768,
  54      =1    8,        1,
  55      =1    8,
  56      =1    ACTIVE_LOW,   ACTIVE_LOW,
  57      =1    #ifdef DOUBLE_PIXEL
  58      =1    320,      470,
  59      =1    2,
  60      =1    #else
  61      =1    650,      950,          //65Mhz
  62      =1    1,
  63      =1    #endif
  64      =1    0
  65      =1    //----------------------------------------------------
  66      =1    #elif defined XGA
  67      =1    //Samsung  LT150x1-151 XGA
  68      =1    1024,     768,
  69      =1    68,       1,
  70      =1    80,
  71      =1    ACTIVE_LOW,   ACTIVE_LOW,
  72      =1    #ifdef DOUBLE_PIXEL
  73      =1    325,      400,          //32.5Mhz
  74      =1    2,
  75      =1    #else
  76      =1    650,      800,
  77      =1    1,
  78      =1    #endif
  79      =1    0
  80      =1    //----------------------------------------------------
  81      =1    #elif defined SXGA
  82      =1    //Samsung  LT170E2-131  SXGA
  83      =1    1280,     1024,
  84      =1    1,        1,
  85      =1    1,
  86      =1    ACTIVE_LOW,   ACTIVE_LOW,
  87      =1    #ifdef DOUBLE_PIXEL
  88      =1    540,      540,          //54.5Mhz
  89      =1    2,
  90      =1    #else
  91      =1    1080,     1080,
  92      =1    1,
  93      =1    #endif
  94      =1    0
  95      =1    //----------------------------------------------------
  96      =1    #elif defined WSVGA           // Thosiba
  97      =1    1024,     600,
  98      =1    8,        3,
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 56  

  99      =1    1,//80,       
 100      =1    ACTIVE_LOW,   ACTIVE_LOW,
 101      =1    #ifdef DOUBLE_PIXEL
 102      =1    325,      450,
 103      =1    2,
 104      =1    #else
 105      =1    500,      550,          //50Mhz
 106      =1    1,
 107      =1    #endif
 108      =1    0
 109      =1    //----------------------------------------------------
 110      =1  
 111      =1    #elif defined SVGA
 112      =1    //NEC NL8060AC26-11 SVGA
 113      =1    800,      600,
 114      =1    2,        1,
 115      =1    13,
 116      =1    ACTIVE_LOW,   ACTIVE_LOW,
 117      =1    #ifdef DOUBLE_PIXEL
 118      =1    384,      500,          //38.4MHz
 119      =1    2,
 120      =1    #else
 121      =1    670,      1000,
 122      =1    1,
 123      =1    #endif
 124      =1    0
 125      =1    //----------------------------------------------------
 126      =1    #elif defined VGA
 127      =1    //NEC NL6448AC33  VGA         // OK with SetPanelRegisters
 128      =1    640,      480,
 129      =1    10,       1,
 130      =1    4,
 131      =1    ACTIVE_LOW,   ACTIVE_LOW,
 132      =1    #ifdef DOUBLE_PIXEL
 133      =1    130,      150,          //25.2MHz
 134      =1    2,
 135      =1    #else
 136      =1    250,      300,
 137      =1    1,
 138      =1    #endif
 139      =1    0
 140      =1    //----------------------------------------------------
 141      =1  
 142      =1    #elif defined WVGA
 143      =1    // Panasonic  EDTCB27QBF WVGA
 144      =1    800,      480,
 145      =1    4,        1,
 146      =1    7,
 147      =1    ACTIVE_LOW,   ACTIVE_LOW,
 148      =1    #ifdef DOUBLE_PIXEL
 149      =1    166,      200,          //33.2MHz
 150      =1    2,
 151      =1    #else
 152      =1    332,      360,          //33.2MHz
 153      =1    1,
 154      =1    #endif
 155      =1    0
 156      =1  
 157      =1    //----------------------------------------------------
 158      =1    #else
 159      =1    // Default : XGA panel
 160      =1    // Samsung  LT150x1-151 XGA
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 57  

 161      =1    1024,     768,
 162      =1    68,       1,
 163      =1    80,
 164      =1    ACTIVE_LOW,   ACTIVE_LOW,
 165      =1    #ifdef DOUBLE_PIXEL
 166      =1    325,      400,          //32.5Mhz
 167      =1    2,
 168      =1    #else
 169      =1    650,      800,          //32.5Mhz
 170      =1    1,
 171      =1    #endif
 172      =1    0
 173      =1    #endif
 174      =1    };
 175      =1  
 176      =1  */
  22          #include "HS_DisplayOSD.h"
   1      =1  #ifndef _HS_DisplayOSD_
   2      =1  #define _HS_DisplayOSD_
   3      =1  
   4      =1  
   5      =1  enum DisplayInformation
   6      =1  {
   7      =1    InfoOSDMENULOCKED,
   8      =1    InfoOSDMENUATCIVE,
   9      =1  #ifdef SUPPORT_SDCARD  //Pinchi 20150319 add
           =1   InfoFORMATSDCARD,
           =1   InfoFORMATSUCCESS,
           =1   InfoFORMATFAIL,
           =1   InfoRECORDERROR,
           =1   InfoPASSWORDERROR,
           =1   InfoFWUpdate,
           =1   InfoFWUpdateSUCCESS,
           =1   InfoFWUpdateFAIL,
           =1   InfoSDCARDReset,
           =1   InfoSDCARDNotReady,
           =1   InfoUpdateConfigStart,
           =1   InfoUpdateConfigFail,
           =1   InfoUpdateConfigSuccess,
           =1 #endif
  24      =1    InfoAutoDayNight_Auto,
  25      =1    InfoAutoDayNight_Day,
  26      =1    InfoAutoDayNight_Night,
  27      =1    InfoPLZRESETSYSTEM,
  28      =1  #ifdef AWT_NO_SIGNAL_MSG  //Pinchi 20150319 add for to display "NO VIDEO SIGNAL" by AWT request of 2015030
             -2
  29      =1    InfoNoVideoSignal,
  30      =1  #endif
  31      =1  
  32      =1  };
  33      =1  
  34      =1  //#define   InfoUpdateConfigStart 0x01
  35      =1  //#define   InfoUpdateConfigFail    0x02
  36      =1  //#define   InfoUpdateConfigSuccess 0x03
  37      =1  
  38      =1  #define   NORMAL_Record   0x01
  39      =1  #define   Manual_Record 0x02
  40      =1  #define   ALARM_Record  0x04
  41      =1  #define   GPS       0x08
  42      =1  #define   G_Sensor    0x10
  43      =1  #define   WIFI      0x20 
  44      =1  #define   WIFI_Signal   0x40
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 58  

  45      =1  #define   OverWrite_Record  0x80
  46      =1  
  47      =1  void DisplayGaugeOSD(void);
  48      =1  void ClearGAUGEINFO(void);
  49      =1  void DisplaylockOSD(void); 
  50      =1  void DisplayactvOSD(void); 
  51      =1  void DisplayNumber(BYTE addr,WORD val,BYTE type);
  52      =1  //#ifdef SUPPORT_SDCARD
  53      =1  void DisplayDVRStatus(void);
  54      =1  void DisplayFormatOSD(void);
  55      =1  void DisplayFormatOkOSD(void);
  56      =1  void DisplayFormatFailOSD(void);
  57      =1  void DisplayFWUpDate(void);
  58      =1  void DisplayFWUpDateOK(void);
  59      =1  void DisplayFWUpDateFail(void);
  60      =1  void DisplayFWVersion(void) ;
  61      =1  void DisplayDVRnotReady(void);
  62      =1  void DisplayInformation(BYTE info);
  63      =1  //#endif    //#ifdef SUPPORT_SDCARD
  64      =1  
  65      =1  #if 0 //def AWT_NO_SIGNAL_MSG  //Pinchi 20150319 add for to display "NO VIDEO SIGNAL" by AWT request of 20
             -150302
           =1 void AWT_Display_NoVideoSignal(BYTE bOnOff);
           =1 #endif
  68      =1  
  69      =1  #endif
  70      =1  
  23          #include "HS_keyremo.h"
   1      =1  #ifndef _HS_keyremo_
   2      =1  #define _HS_keyremo_
   3      =1  
   4      =1  //
   5      =1  // KeyRemo.h
   6      =1  // Default function for Key Input and Remocon Input
   7      =1  //
   8      =1  //=============================================================================
   9      =1  //                        Operation Key Mapping
  10      =1  //=============================================================================
  11      =1  
  12      =1  
  13      =1  
  14      =1  #define  SelectMode 0
  15      =1  #define  JumpMode 1
  16      =1  
  17      =1  #define COMPOSITE1          1
  18      =1  #define COMPOSITE2          2
  19      =1  #define COMPOSITE3          3
  20      =1  #define COMPOSITE4          4
  21      =1  
  22      =1  
  23      =1  #ifndef QUAD
  24      =1  
  25      =1  #define COMPOSITE1          1
  26      =1  #define COMPOSITE2          2
  27      =1  #define COMPOSITE3          3
  28      =1  #define COMPOSITE4          4
  29      =1  
  30      =1  #ifdef AWT_ML072S
  31      =1  #define SOURCE_A      1     
  32      =1  #define SOURCE_R            2   
  33      =1  #define SOURCE_AV           3
  34      =1  #define SOURCE_B            4 
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 59  

  35      =1  #else
           =1 #define SOURCE_A      1   
           =1 #define SOURCE_B            2   
           =1 #define SOURCE_R            3   
           =1 #define SOURCE_AV           4
           =1 #endif
  41      =1  
  42      =1  void CheckSourceMode(BYTE sorce);
  43      =1  #endif
  44      =1  
  45      =1  
  46      =1  
  47      =1  extern BYTE NowModeState;
  48      =1  extern BYTE TriggerFlag;
  49      =1  extern bit  ParkFlag;
  50      =1  extern BYTE  Attr_A,Attr_B,Attr_C,Attr_R; 
  51      =1  extern BYTE TimeStep;
  52      =1  extern BYTE SEQFlag;
  53      =1  extern BYTE SEQIndex;
  54      =1  extern BYTE TriggerMode;
  55      =1  extern bit AVFlag;
  56      =1  extern bit VGAAudio;
  57      =1  
  58      =1  
  59      =1  
  60      =1  //BYTE TW2835Command(char,char,char,char,char);
  61      =1  void SetSourceMode(BYTE Index,char ,char ,char ,char );
  62      =1  void SetJumpSource(BYTE Index,char ,char ,char ,char );  //Pinchi 20150825 add
  63      =1  void SetSelectMode(void);
  64      =1  //void PriorityOffSelectMode(void);
  65      =1  void SetJumpMode(void);
  66      =1  void SetNowMode(void);
  67      =1  void SetRearSource(void);
  68      =1  void SetLeftSource(void);
  69      =1  void SetRightSource(void);
  70      =1  void CheckMirror(void);
  71      =1  BYTE CheckTrigger(void);
  72      =1  void TriggerHandler(BYTE T_Flag);
  73      =1  void SEQMode(void);
  74      =1  
  75      =1  void SelectBoxHandler(void);
  76      =1  
  77      =1  extern void CheckNewTriggerFunc(void);
  78      =1  
  79      =1  #endif
  24          //----------------------------------------------------------------------
  25          //extern  CODE  BYTE InputSelectionString[][16];
  26          extern BYTE Gauge_Flag;
  27          
  28          extern  CODE  struct struct_IdName struct_InputSelection[];
  29          extern  CODE  struct struct_IdName struct_InputSelection_S[];
  30          extern  CODE  struct struct_IdName struct_VInputStd[];
  31          
  32          #ifdef AWT_ML072S
  33          BYTE vloss_flag=0,vloss_buf=0;
  34          #endif
  35          BYTE  DisplayedOSD = 0;
  36          BYTE  mirror_flag;
  37          extern  bit   TVChManual;
  38          //extern BYTE cLastSyncLoss;
  39          static  DATA WORD  OSDDisplayedTime;    //in ms
  40          
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 60  

  41          #ifdef SUPPORT_COMPONENT
              extern  BYTE  ComponentMode;
              #endif
  44          extern CODE BYTE Init_Osd_DisplayLogo[];
  45          extern CODE BYTE Init_Osd_DisplayInput[];
  46          #ifndef QUAD
  47          extern CODE BYTE Init_Osd_DisplayInput_M[];
  48          #endif
  49          #ifdef ADD_ANALOGPANEL
              extern CODE BYTE Init_Osd_DisplayLogo_A[];
              extern CODE BYTE Init_Osd_DisplayInput_A[];
              #endif
  53          
  54          extern CODE BYTE Init_Osd_BarWindow[];
  55          extern CODE BYTE Init_Osd_DisplayPCInfo[];
  56          extern CODE BYTE *StrVolume[];
  57          #ifdef E_Wintek
              extern CODE BYTE *StrVolume2[];
              #endif
  60          extern CODE BYTE *Str_Brightness[];
  61          extern bit SpeedDomeMode;
  62          //#ifndef QUAD
  63          extern BYTE displayhold_flag;  //Pinchi 20150319 enable
  64          //#endif
  65          
  66          #ifdef AWT_NO_SIGNAL_MSG  //Pinchi 20150320 add
  67          extern bit IsDrawNoVideoSignal;
  68          #endif
  69          
  70          #ifdef TW9908
              CODE BYTE TW9908String[]= { "   TW9908   "};
              CODE BYTE TW9905String[]= { "   TW9905   "};
              #endif
  74          
  75          CODE BYTE TW8806String[]= { "   TW8806   "};
  76          
  77          CODE BYTE TechwellString[]= { "Techwell,Inc" };
  78          
  79          #ifdef SUPPORT_COMPONENT
              CODE BYTE COMPONENT_STR[][15] = {
                  "YPbPr 480i", // 0
                  "YPbPr 576i", // 1
                  "YPbPr 480p", // 2
                  "YPbPr 576p", // 3
                  "YPbPr 1080i",  // 4
                  "YPbPr 720p", // 5
                "YPbPr 720p50", 
                  "YPbPr 1080i50",
              };
              #endif
  91          
  92          //================================================================
  93          //          Display information
  94          //================================================================
  95          #ifdef DISPLAY_TECHWELL_LOGO  //Pinchi 2050903 add
              /*
              void DisplayLogo(void)
              {
                BYTE CODE *str;
                //ClearOSDInfo();
              
                #ifdef TW9908
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 61  

                if( (ReadDecoder(0) & 0xf8) == 0x28 ) str = TW9905String;
                else                                  str = TW9908String;
                #else
                str = TW8806String;
                #endif
              
                InitOSDWindow(Init_Osd_DisplayLogo);
                #ifdef ADD_ANALOGPANEL
                if(IsAnalogOn())
                  InitOSDWindow(Init_Osd_DisplayLogo_A);
                #endif
                
                ClearDataCnt(LOGO_ADDR, 12*2); // Total 12*2 Char.
              
                DrawAttrCnt(LOGO_ADDR, CH_COLOR_WHITE, 12 );   
                DrawAttrCnt(LOGO_ADDR+12, CH_COLOR_RED, 12 );
              
                WriteStringToAddr(LOGO_ADDR, str, 12);
                WriteStringToAddr(LOGO_ADDR+12*1, TechwellString,12);
              
                ShowOSDWindow(TECHWELLOGO_OSDWIN,TRUE);
                
              }
              */
              void ClearLogo(void)
              {
                ShowOSDWindow(TECHWELLOGO_OSDWIN,FALSE);
                #ifdef DEBUG_OSD
                dPrintf("\r\n++(ClearLogo)");
                #endif
              }
              #endif
 135          
 136          void ClearDisplayedOSD( BYTE newd )
 137          {
 138   1        DisplayedOSD &= (~(newd));
 139   1      }
 140          
 141          void SetDisplayedOSD( BYTE newd )
 142          {
 143   1        DisplayedOSD |= newd;
 144   1      }
 145          
 146          BYTE GetDisplayedOSD(void)
 147          {
 148   1        return DisplayedOSD;
 149   1      }
 150          
 151          void ClearOSDInfo(void)
 152          {
 153   1        BYTE dt;
 154   1      
 155   1      #ifdef DISPLAY_TECHWELL_LOGO  //Pinchi 2050903 add
                ClearLogo();
              #endif
 158   1        dt = GetDisplayedOSD(); 
 159   1        #if 1 //def DEBUG_OSD
 160   1        Printf("\r\n++(ClearOSDInfo): DisplayedOSD:%2x",(WORD) GetDisplayedOSD());
 161   1        #endif
 162   1        #ifdef SUPPORT_PC
                if( dt & PCINFO)    ClearPCInfo();
                #endif
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 62  

 165   1      
 166   1          if( (dt & TVVOL) || ( dt & TVCHN) )
 167   1          {
 168   2          
 169   2          ClearTVInfo();
 170   2            #ifdef AWT_NO_SIGNAL_MSG  //ryan@20170906
 171   2            IsDrawNoVideoSignal = 0;
 172   2            #endif
 173   2          }
 174   1        if( dt & MUTE )     ClearMuteInfo();
 175   1        if( dt & INPUTINFO )  ClearInput();
 176   1        if( dt & MENU )     CloseOSDMenu();
 177   1        if( dt & GAUGEINFO )  ClearGAUGEINFO(); 
 178   1        if(dt& VLOSSINFO)   ClearVlossOsd();
 179   1      }
 180          
 181          
 182          #ifdef AWT_ML072S
 183          
 184          /*-------------------------------*/
 185          /*                VlossHandler                 */
 186          /*-------------------------------*/
 187          void VlossHandler(void)
 188          {
 189   1        CODE BYTE Str_VLOSS[] = {'V','L','o','s','s',0};
 190   1        CODE BYTE Str_VLOSS_M[] = {RAMFONT,0x5b,0x5b,ROMFONT,'o',RAMFONT,0x50,ROMFONT,'V',0};
 191   1      
 192   1      #ifdef HS
 193   1      return;
 194   1      #endif
 195   1        
 196   1          vloss_buf= ReadDecoder(0x01); 
 197   1        
 198   1          if(((vloss_buf&0x80)==0x80)&&(!(GetDisplayedOSD() & (VLOSSINFO)))) 
 199   1          {
 200   2          vloss_flag=1;
 201   2        if(mirror_flag==1)///no mirror
 202   2        {
 203   3        DrawAttrCnt(107/*OSD_VLOSS_ADDR*/, OSD_VLOSS_COLOR, 5 );  
 204   3        WriteStringToAddr(107/*OSD_VLOSS_ADDR*/, Str_VLOSS, 5); 
 205   3        SetDisplayedOSD(VLOSSINFO);
 206   3        ShowOSDWindowAll(1);
 207   3        ShowOSDWindow(RATINGINFO_OSDWIN/*VLOSSINFO_OSDWIN*/-1,TRUE);////vloss osd
 208   3        }
 209   2        else///mirror
 210   2        {
 211   3        DrawAttrCnt(106/*OSD_VLOSS_ADDR*/, OSD_VLOSS_COLOR, 5 );  
 212   3        WriteStringToAddr(106/*OSD_VLOSS_ADDR*/, Str_VLOSS_M, 9); 
 213   3        SetDisplayedOSD(VLOSSINFO);
 214   3        ShowOSDWindowAll(1);
 215   3        ShowOSDWindow(RATINGINFO_OSDWIN/*VLOSSINFO_OSDWIN*/-1,TRUE);////vloss osd
 216   3        }
 217   2      
 218   2        //  if( ReadEEP(EEP_GAUGEMode)==0 && ReadEEP(EEP_RearMode)==0&&(TriggerMode==REVERSE_TRIG))
 219   2          //  DisplayGaugeOSD();
 220   2      
 221   2      
 222   2        #ifdef Hs_debug
 223   2        Printf("\r\nvloss_flag==1");
 224   2        #endif
 225   2      
 226   2        
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 63  

 227   2            }
 228   1        else if(((vloss_buf&0x80)==0)&&(GetDisplayedOSD() & (VLOSSINFO)))
 229   1          {     
 230   2      //    DisplayedOSD &= (~(INPUTINFO));///reset input info for 2s
 231   2          ClearDisplayedOSD(INPUTINFO);///reset input info for 2s
 232   2          vloss_flag=0;
 233   2          //ClearVlossOsd();
 234   2          ClearDisplayedOSD(VLOSSINFO);
 235   2          
 236   2        if(mirror_flag==1)///no mirror
 237   2        ClearDataCnt(107, 5);
 238   2        else///mirror
 239   2        ClearDataCnt(106, 5);
 240   2        
 241   2          #ifdef Hs_debug
 242   2          Printf("\r\nvloss_flag==0");
 243   2          #endif
 244   2          }
 245   1      }
 246          #endif
 247          
 248          void DisplayInput(void)
 249          {
 250   1        BYTE inputs, len1, i, SystemAddr; //len2
 251   1      
 252   1      #ifdef  AWT_ML072S  //Pinchi 20140902 add for AWT ML072S
 253   1      //  CODE BYTE Str_CAM_E[] = {'C','A','M',0};
 254   1        //CODE BYTE *Str_CAM[] = {Str_CAM_E};
 255   1      //  BYTE len;
 256   1      //  BYTE *Str;
 257   1      
 258   1        CODE BYTE Str_CAM_A[] = {'C','A','M',' ','A',' ',' ',' ',0};
 259   1        CODE BYTE Str_CAM_B[] = {'C','A','M',' ','B',' ',' ',' ',' ',0};
 260   1        CODE BYTE Str_CAM_R[] = {'C','A','M',' ','R',' ',' ',' ',' ',0};
 261   1        CODE BYTE Str_AV[] = {'A','V',' ',' ',' ',' ',' ',' ',' ',0}; //william-ml072s-971230
 262   1      
 263   1        CODE BYTE Str_CAM_Mirror_A[] = {' ',RAMFONT,0x07,ROMFONT,' ','A',' ','M','A',RAMFONT,0x53,ROMFONT,0};
 264   1        CODE BYTE Str_CAM_Mirror_B[] = {' ',RAMFONT,0x07,ROMFONT,' ',RAMFONT,0x51,ROMFONT,' ','M','A',RAMFONT,0x5
             -3,ROMFONT,0};
 265   1        CODE BYTE Str_CAM_Mirror_R[] = {' ',' ',RAMFONT,0x07,ROMFONT,' ',RAMFONT,0x52,ROMFONT,' ','M','A',RAMFONT
             -,0x53,ROMFONT,0}; 
 266   1      /*  CODE BYTE Str_CAM_Mirror_A[] = {' ',' ','M',' ',' ','A',' ','M','A',RAMFONT,0x53,ROMFONT,0};
 267   1        CODE BYTE Str_CAM_Mirror_B[] = {' ',' ','M',' ',' ',RAMFONT,0x51,ROMFONT,' ','M','A',RAMFONT,0x53,ROMFONT
             -,0};
 268   1        CODE BYTE Str_CAM_Mirror_R[] = {' ',' ','M',' ',' ',RAMFONT,0x52,ROMFONT,' ','M','A',RAMFONT,0x53,ROMFONT
             -,0};  */
 269   1        CODE BYTE Str_Mirror_J[] = {RAMFONT,0x54,ROMFONT,0};
 270   1        #ifdef AWT_ML072S
 271   1      
 272   1      //  CODE BYTE Str_Mirror_S[] = {0x90,0x91,0};
 273   1        CODE BYTE Str_Mirror_S[] = {RAMFONT,0x55,ROMFONT,0};
 274   1          #ifndef HS
                  CODE BYTE Str_S[] = {0x90,0x91,0};  //william-ml072s-971230
                  #endif
 277   1        #else
                CODE BYTE Str_Mirror_S[] = {RAMFONT,0x55,ROMFONT,0};
                #endif
 280   1      #endif
 281   1      #ifdef DEBUG_OSD
                Printf("\r\n++(DisplayInput): DisplayedOSD:%2x",(WORD) GetDisplayedOSD());
              #endif  
 284   1        SystemAddr=INPUTINFO1_ADDR;
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 64  

 285   1      
 286   1        ClearOSDInfo();
 287   1      
 288   1        InitOSDWindow(Init_Osd_DisplayInput);
 289   1        ClearDataCnt(INPUTINFO_ADDR, 255); // Total 42 Char.
 290   1        DrawAttrCnt(INPUTINFO_ADDR, OSD_INFO_COLOR, 255 );  
 291   1        for(i=0;i<240;i++){WriteStringToAddr(i," ",1);}   //william-v1.0-970729
 292   1        DisplayedOSD |= INPUTINFO;
 293   1      
 294   1        inputs = GetInputSelection();
 295   1      
 296   1        #if defined( SUPPORT_PC ) || defined( SUPPORT_DTV )
                if( inputs==PC || inputs==DTV )
                  len2 = strlen( GetPCInputSourceName() );
                else
                #endif
 301   1        //  len2 = strlen( struct_VInputStd[GetVInputStdInx()].Name );  //Pinchi 20150902 disable for unuse
 302   1      
 303   1      #ifdef QUAD
              //  if(ReadEEP(EEP_COSDMode)==1||inputs==CH_TW2835)   //Display Off   william-991221
                #if 1  //Pinchi 20150901 change condition by AV and TW2835 is independent
                if (inputs == CH_TW2835)
                #else
                if ((ReadEEP(EEP_COSDMode)==1 && (SelectModeType != AVMode)) || inputs==CH_TW2835)  //Pinchi 20141024 modi
             -fy to display AV 2s
                #endif
                  return;
              
                for (i=1; ;i++)
                  if( struct_InputSelection[i].Id==inputs )  break;
              
                len1 = strlen(struct_InputSelection[i].Name); 
                WriteStringToAddr(INPUTINFO_ADDR, struct_InputSelection[i].Name, len1);
              
                if ((ReadEEP(EEP_COSDMode) == 1) && (SelectModeType == AVMode))  //Pinchi 20141024 modify to display AV 2
             -s
                {
                  displayhold_flag = 5;
                  Printf("\r\n[MSG]DisplayInput() => SelectModeType=AVMode to set time & displayhold_flag=%bx",displayhold
             -_flag);  //pinchi test
                }
              
              #else
 325   1          //if(ReadEEP(EEP_COSDMode)==1)    //Display Off   william-991221
 326   1          //  return; 
 327   1      
 328   1        for (i=1; ;i++)
 329   1          if( struct_InputSelection_S[i].Id==inputs )  break;
 330   1      
 331   1        len1 = strlen(struct_InputSelection_S[i].Name);
 332   1      
 333   1        switch(i)
 334   1        {
 335   2          case COMPOSITE1:
 336   2            mirror_flag=ReadEEP(EEP_CAMAMode);
 337   2      
 338   2            if(mirror_flag==1)
 339   2            {
 340   3              #ifndef AWT_ML072S      
                      DrawAttrCnt(32, Trigger_COLOR, 1 );   //wiliiam-v1.1-970827
                      #else
 343   3              DrawAttrCnt(INPUTINFO_ADDR, Trigger_COLOR, 10 );    //wiliiam-v1.1-970827
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 65  

 344   3              #endif
 345   3              DrawAttrCnt(24, OSD_INFO_COLOR, 8 );  
 346   3              WriteStringToAddr(24+2, Str_CAM_A, 8); 
 347   3      
 348   3              if (TriggerFlag)
 349   3                #ifndef AWT_ML072S
                        WriteStringToAddr(32,"T" ,1); 
                        #else
 352   3                WriteStringToAddr(INPUTINFO_ADDR+8,"T" ,1); 
 353   3                #endif
 354   3              
 355   3              else if(NowModeState==JumpMode)
 356   3              {
 357   4                if(SEQFlag)
 358   4                {
 359   5                  DrawAttrCnt(INPUTINFO_ADDR+8, Jump_COLOR,1 );
 360   5                  #ifndef AWT_ML072S
                          WriteStringToAddr(21,Str_S,2); 
                          #else
 363   5                  WriteStringToAddr(INPUTINFO_ADDR+8,"S" ,1); 
 364   5                  #endif
 365   5                }
 366   4                else  
 367   4                  {
 368   5                  DrawAttrCnt(INPUTINFO_ADDR+8, Jump_COLOR,1 );
 369   5                  WriteStringToAddr(INPUTINFO_ADDR+8,"J" ,1); 
 370   5                }
 371   4              }   
 372   3             }
 373   2            else  
 374   2            {
 375   3              //InitOSDWindow(Init_Osd_DisplayInput_M);
 376   3                //WriteTW88(TW88_WINBLENDING,0x04);   //wiliiam-v1.1-970827
 377   3              DrawAttrCnt(INPUTINFO_MIRROR_ADDR+25, Trigger_COLOR/*OSD_INFO_COLOR*/,9);    
 378   3              //DrawAttrCnt(INPUTINFO_MIRROR_ADDR, Mirror_COLOR, 3 );
 379   3              DrawAttrCnt(INPUTINFO_MIRROR_ADDR+1, OSD_INFO_COLOR, 8 );         
 380   3              WriteStringToAddr(INPUTINFO_MIRROR_ADDR+1, Str_CAM_Mirror_A, 12); 
 381   3              if (TriggerFlag)
 382   3                {
 383   4                WriteStringToAddr(INPUTINFO_MIRROR_ADDR+32-7,"T" ,1); 
 384   4                }
 385   3              else if(NowModeState==JumpMode)
 386   3              {
 387   4                if(SEQFlag)
 388   4                {
 389   5                      DrawAttrCnt(25, Jump_COLOR,1 );
 390   5                        #ifdef HS
 391   5                  WriteStringToAddr(25,Str_Mirror_S,2);               
 392   5                    #else
                          WriteStringToAddr(10,Str_Mirror_S,2); 
                            #endif
 395   5                }
 396   4                else  
 397   4                {
 398   5                  DrawAttrCnt(INPUTINFO_MIRROR_ADDR, Jump_COLOR,1 );
 399   5                  WriteStringToAddr(INPUTINFO_MIRROR_ADDR,Str_Mirror_J,3); 
 400   5                }
 401   4              }  
 402   3              if(SEQFlag && !TriggerFlag)
 403   3              {
 404   4                      //DrawAttrCnt(INPUTINFO_MIRROR_ADDR+10, Gauge_COLOR1, 2 );   
 405   4                      //WriteStringToAddr(INPUTINFO_MIRROR_ADDR+10,Str_reverse,2);  
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 66  

 406   4              } 
 407   3            }
 408   2          break;
 409   2      
 410   2         case COMPOSITE2:
 411   2          mirror_flag=ReadEEP(EEP_CAMBMode);
 412   2           if(mirror_flag==1)
 413   2            {
 414   3              #ifndef AWT_ML072S      
                      DrawAttrCnt(32, Trigger_COLOR, 1 );   //wiliiam-v1.1-970827
                      #else
 417   3              DrawAttrCnt(INPUTINFO_ADDR, Trigger_COLOR, 10 );    //wiliiam-v1.1-970827
 418   3              #endif
 419   3             //WriteTW88(TW88_WINBLENDING,0x04);  //wiliiam-v1.1-970827
 420   3               //DrawAttrCnt(INPUTINFO_ADDR, Trigger_COLOR, 10 );   //wiliiam-v1.1-970827
 421   3               DrawAttrCnt(INPUTINFO_ADDR, OSD_INFO_COLOR, 8 );  
 422   3                 WriteStringToAddr(24+2, Str_CAM_B, 9); 
 423   3             if(TriggerFlag)
 424   3                WriteStringToAddr(INPUTINFO_ADDR+8,"T" ,1); 
 425   3             else if(NowModeState==JumpMode)
 426   3            {
 427   4            if(SEQFlag)
 428   4              {
 429   5              DrawAttrCnt(INPUTINFO_ADDR+8, Jump_COLOR,1 );
 430   5              WriteStringToAddr(INPUTINFO_ADDR+8,"S" ,1); 
 431   5              }
 432   4            else  
 433   4               {
 434   5              DrawAttrCnt(INPUTINFO_ADDR+8, Jump_COLOR,1 );
 435   5              WriteStringToAddr(INPUTINFO_ADDR+8,"J" ,1); 
 436   5              }
 437   4                }
 438   3      
 439   3             }
 440   2           else 
 441   2            {
 442   3            DrawAttrCnt(INPUTINFO_MIRROR_ADDR+25, Trigger_COLOR/*OSD_INFO_COLOR*/,9);    
 443   3              //DrawAttrCnt(INPUTINFO_MIRROR_ADDR, Mirror_COLOR, 3 );
 444   3              DrawAttrCnt(INPUTINFO_MIRROR_ADDR+1, OSD_INFO_COLOR, 8 );         
 445   3              WriteStringToAddr(INPUTINFO_MIRROR_ADDR+1, Str_CAM_Mirror_B, 12+1); 
 446   3              /*
 447   3              DrawAttrCnt(INPUTINFO_MIRROR_ADDR, OSD_INFO_COLOR, 9 );    
 448   3             DrawAttrCnt(INPUTINFO_MIRROR_ADDR, Mirror_COLOR, 3 );
 449   3                  DrawAttrCnt(INPUTINFO_MIRROR_ADDR, Trigger_COLOR, 1 );    
 450   3                  WriteStringToAddr(INPUTINFO_MIRROR_ADDR, Str_CAM_Mirror_B, 20); 
 451   3              */
 452   3              if(TriggerFlag)
 453   3              WriteStringToAddr(INPUTINFO_MIRROR_ADDR+25,"T" ,1); 
 454   3            else if(NowModeState==JumpMode)
 455   3            {
 456   4            if(SEQFlag)
 457   4              {
 458   5              DrawAttrCnt(INPUTINFO_MIRROR_ADDR+25, Jump_COLOR,1 );
 459   5              WriteStringToAddr(INPUTINFO_MIRROR_ADDR+25,Str_Mirror_S,3); 
 460   5              }
 461   4            else  
 462   4                     {
 463   5              DrawAttrCnt(INPUTINFO_MIRROR_ADDR, Jump_COLOR,1 );
 464   5              WriteStringToAddr(INPUTINFO_MIRROR_ADDR,Str_Mirror_J,3); 
 465   5              }
 466   4                   } 
 467   3              }
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 67  

 468   2           break;
 469   2      
 470   2        //william-ml072s-v1.0-971230     
 471   2         case COMPOSITE3:
 472   2           mirror_flag=ReadEEP(EEP_CAMRMode);
 473   2      
 474   2           if(mirror_flag==1)
 475   2            {
 476   3             DrawAttrCnt(32, Trigger_COLOR,1 );   //wiliiam-v1.1-970827
 477   3             DrawAttrCnt(INPUTINFO_ADDR, OSD_INFO_COLOR, 8 );
 478   3                  WriteStringToAddr(24+2, Str_CAM_R, 9); 
 479   3      
 480   3              if(TriggerFlag)
 481   3                {
 482   4              #ifndef AWT_ML072S
                      WriteStringToAddr(32,"T" ,1);     
                      #else
 485   4              WriteStringToAddr(INPUTINFO_ADDR+8,"T" ,1); 
 486   4              #endif
 487   4                }
 488   3               else if(NowModeState==JumpMode)
 489   3            {
 490   4            if(SEQFlag)
 491   4              {
 492   5              DrawAttrCnt(INPUTINFO_ADDR+8, Jump_COLOR,1 );
 493   5              WriteStringToAddr(INPUTINFO_ADDR+8,"S" ,1); 
 494   5              }
 495   4            else  
 496   4                {
 497   5              DrawAttrCnt(INPUTINFO_ADDR+8, Jump_COLOR,1 );
 498   5              WriteStringToAddr(INPUTINFO_ADDR+8,"J" ,1); 
 499   5              }
 500   4                }
 501   3            }
 502   2           else 
 503   2            {
 504   3             //WriteTW88(TW88_WINBLENDING,0x04);  //wiliiam-v1.1-970827
 505   3            //InitOSDWindow(Init_Osd_DisplayInput_M);
 506   3             DrawAttrCnt(INPUTINFO_MIRROR_ADDR, OSD_INFO_COLOR,14 );    
 507   3      //       DrawAttrCnt(INPUTINFO_MIRROR_ADDR, Mirror_COLOR, 3 );
 508   3                  DrawAttrCnt(INPUTINFO_MIRROR_ADDR+25, Trigger_COLOR, 1 );
 509   3                  WriteStringToAddr(INPUTINFO_MIRROR_ADDR, Str_CAM_Mirror_R, 14); 
 510   3              
 511   3              if(TriggerFlag)
 512   3              WriteStringToAddr(INPUTINFO_MIRROR_ADDR+25,"T" ,1); 
 513   3              else if(NowModeState==JumpMode)
 514   3              {   
 515   4                if(SEQFlag)
 516   4                  {
 517   5                  DrawAttrCnt(INPUTINFO_MIRROR_ADDR+25, Jump_COLOR,1 );
 518   5                    #ifndef AWT_ML072S
                            WriteStringToAddr(INPUTINFO_MIRROR_ADDR+10,Str_Mirror_S,2); 
                            #else       
 521   5                    WriteStringToAddr(INPUTINFO_MIRROR_ADDR+25,Str_Mirror_S,3); 
 522   5                    #endif
 523   5                  }
 524   4                else  
 525   4                         {
 526   5                  DrawAttrCnt(INPUTINFO_MIRROR_ADDR, Jump_COLOR,1 );
 527   5                  WriteStringToAddr(INPUTINFO_MIRROR_ADDR,Str_Mirror_J,3); 
 528   5                  }
 529   4                  } 
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 68  

 530   3            }
 531   2           break;
 532   2      
 533   2         case COMPOSITE4:
 534   2          mirror_flag=1;
 535   2            //WriteTW88(TW88_WINBLENDING,0x04); //wiliiam-v1.1-970827
 536   2             DrawAttrCnt(INPUTINFO_ADDR, Trigger_COLOR,10 );    //wiliiam-v1.1-970827
 537   2             DrawAttrCnt(INPUTINFO_ADDR, OSD_INFO_COLOR, 8 );
 538   2             #ifndef AWT_ML072S
                     WriteStringToAddr(24, Str_AV, 9); 
                     #else
 541   2             WriteStringToAddr(INPUTINFO_ADDR+24+2, Str_AV, 9);
 542   2             #endif
 543   2             
 544   2                  if(SEQFlag && !TriggerFlag)
 545   2                {
 546   3                 //DrawAttrCnt(INPUTINFO_ADDR-3, Gauge_COLOR1, 2 );
 547   3                 //WriteStringToAddr(INPUTINFO_ADDR-3,Str_reverse,2);    
 548   3                 #ifdef AWT_ML072S
 549   3              DrawAttrCnt(INPUTINFO_ADDR+8, Jump_COLOR,1 );
 550   3              WriteStringToAddr(INPUTINFO_ADDR+8,"S",1); 
 551   3                 #endif
 552   3                }
 553   2            break;
 554   2      
 555   2        }
 556   1      
 557   1          displayhold_flag=4;
 558   1        
 559   1      #endif
 560   1      
 561   1      #if 0
                Str = Str_CAM[GetOSDLang()];
                len = strlen(Str);
                if(SpeedDomeMode==1)
                {
                  DrawAttrCnt(INPUTINFO_ADDR+len1,OSD_INFO_COLOR,len);
                  WriteStringToAddr(INPUTINFO_ADDR+len1,Str,len);
                }
                else
                {
                  ClearDataCnt(INPUTINFO_ADDR+len1, len); // Total 42 Char.
                  DrawAttrCnt(INPUTINFO_ADDR+len1, OSD_INFO_COLOR, len );
                }
              #endif
 575   1      
 576   1        ShowOSDWindow(INPUTINFO_OSDWIN-1,TRUE);
 577   1      
 578   1      
 579   1      #if 0
              if(ReadEEP(EEP_DVRDisplay)==0)
                ShowOSDWindow(DVRStatus_OSDWIN,TRUE);
              else
                ShowOSDWindow(DVRStatus_OSDWIN,FALSE);
              #endif
 585   1      
 586   1        //ShowOSDWindow(INPUTINFO_OSDWIN,TRUE);
 587   1        ShowOSDWindowAll(1);
 588   1        #ifdef AWT_ML072S
 589   1        VlossHandler();
 590   1        #endif
 591   1      
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 69  

 592   1        OSDDisplayedTime = GetTime_ms();  
 593   1      }
 594          
 595          
 596          
 597          //#ifdef _DisplayHandler
 598          #ifndef QUAD
 599          /*-------------------------------*/
 600          /*                DisplayHandler                 */
 601          /*-------------------------------*/
 602          #ifdef AWT_ML072S
 603          #else
              void DisplayHandler()
              {
                BYTE i,len1,inputs; //dat,mirror_flag 
                 //extern CODE BYTE Init_Osd_DisplayInput_S[];
                 //Ryan@970729
               CODE BYTE Str_CAM_A[] = {'C','A','M',' ','A',' ',' ',' ',' ',0};
               CODE BYTE Str_CAM_B[] = {'C','A','M',' ','B',' ',' ',' ',' ',0};
               CODE BYTE Str_CAM_R[] = {'C','A','M',' ','R',' ',' ',' ',' ',0};
               CODE BYTE Str_AV[] = {'A','V',' ',' ',' ',' ',' ',' ',' ',0};  //william-ml072s-971230
              //CODE BYTE Str_CAM_Mirror_A[] = {' ',' ',RAMFONT,0x41,ROMFONT,' ','A',' ','M','A',RAMFONT,0x36,ROMFONT,0}
             -;
              // CODE BYTE Str_CAM_Mirror_B[] = {' ',' ',RAMFONT,0x41,ROMFONT,' ',RAMFONT,0x35,ROMFONT,' ','M','A',RAMFO
             -NT,0x36,ROMFONT,0};
              // CODE BYTE Str_CAM_Mirror_R[] = {' ',' ',RAMFONT,0x41,ROMFONT,' ',RAMFONT,0x38,ROMFONT,' ','M','A',RAMFO
             -NT,0x36,ROMFONT,0};
               CODE BYTE Str_reverse[] = {0x90,0x91,0};
                // extern CODE BYTE Init_Osd_DisplayInput[];
                 ShowOSDWindowAll(0);  //0x09c  第4bit : OSD ON, 1: OSD OFF
                 // InitOSDWindow(Init_Osd_DisplayInput_S); 
              
              
                 ClearDataCnt(0,INPUTINFO_WIDTH*6);   
              
                DrawAttrCnt(0,0x00,INPUTINFO_WIDTH*6);  //2007.4.25 解畫倒車線出現藍色區塊//william-v1.43-970403
              
                for(i=0;i<240;i++){WriteStringToAddr(i," ",1);}   //william-v1.0-970729
                 inputs = GetInputSelection();
                for(i=1; ;i++)
                  {
                     if( struct_InputSelection[i].Id==inputs )  
                       break;
                  }
                 // len1 = strlen(struct_InputSelection[i].Name);
                 len1 = 20;
              //  WriteTW88( TW88_WINBLENDING,  0x00 );
              /////////////////////////////////////////////////////////////////////////
              switch(i)
              {
               case SOURCE_A:
                mirror_flag=ReadEEP(EEP_CAMAMode);
              //   if(ReadEEP(EEP_COSDMode)==0){
                 if(mirror_flag==1)
                  {
                    //InitOSDWindow(Init_Osd_DisplayInput_A);
                      WriteTW88(TW88_WINBLENDING,0x04);   //wiliiam-v1.1-970827
                  DrawAttrCnt(INPUTINFO_ADDR, Trigger_COLOR, 10 );    //wiliiam-v1.1-970827
                   DrawAttrCnt(INPUTINFO_ADDR, DEFAULT_COLOR, 8 );  
                        WriteStringToAddr(INPUTINFO_ADDR, Str_CAM_A, 9); 
                    if(TriggerFlag)
                      WriteStringToAddr(INPUTINFO_ADDR+8,"T" ,1); 
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 70  

                    if(SEQFlag && !TriggerFlag)
                      {
                       DrawAttrCnt(INPUTINFO_ADDR-3, Gauge_COLOR1, 2 );
                       WriteStringToAddr(INPUTINFO_ADDR-3,Str_reverse,2);    
                      }
                   }
                 else 
                  {
                  #ifdef _MIRROR
                  // InitOSDWindow(Init_Osd_DisplayInput_M);
                   WriteTW88(TW88_WINBLENDING,0x04);    //wiliiam-v1.1-970827
                   DrawAttrCnt(INPUTINFO_MIRROR_ADDR, DEFAULT_COLOR,9 );    
                   DrawAttrCnt(INPUTINFO_MIRROR_ADDR, Mirror_COLOR, 3 );
                        DrawAttrCnt(INPUTINFO_MIRROR_ADDR, Trigger_COLOR, 1 );   
                        WriteStringToAddr(INPUTINFO_MIRROR_ADDR, Str_CAM_Mirror_A, len1); 
                         if(TriggerFlag)
                       WriteStringToAddr(INPUTINFO_MIRROR_ADDR,"T" ,1); 
                    if(SEQFlag && !TriggerFlag)
                           {
                            DrawAttrCnt(INPUTINFO_MIRROR_ADDR+10, Gauge_COLOR1, 2 );   
                            WriteStringToAddr(INPUTINFO_MIRROR_ADDR+10,Str_reverse,2);  
                         } 
                    #endif
                         }
              //    }
              #if 0
                  vloss_buf= ReadDecoder(0x01); 
                  if((vloss_buf&0x80)!=0x00) 
                  {
                  vloss_flag=1;
                DrawAttrCnt(GAUGEINFO_ADDR+INPUTINFO_WIDTH*4,Gauge_COLOR3,30); 
                if(!mirror_flag)
                  WriteStringToAddr(GAUGEINFO_ADDR+INPUTINFO_WIDTH*4+9,Str_Mirror_Vloss,16);//william-v1.0-970725
                else
                  WriteStringToAddr(GAUGEINFO_ADDR+INPUTINFO_WIDTH*4+8,Str_Vloss,10);//william-v1.0-970725
                  }
                else 
                vloss_flag=0;
              #endif
                 break;
              
               case SOURCE_B:
                mirror_flag=ReadEEP(EEP_CAMBMode);
              //if(ReadEEP(EEP_COSDMode)==0){
                 if(mirror_flag==1)
                  {
                   WriteTW88(TW88_WINBLENDING,0x04);  //wiliiam-v1.1-970827
                //   InitOSDWindow(Init_Osd_DisplayInput_A);
                     DrawAttrCnt(INPUTINFO_ADDR, Trigger_COLOR, 10 );   //wiliiam-v1.1-970827
                     DrawAttrCnt(INPUTINFO_ADDR, DEFAULT_COLOR, 8 );  
                       WriteStringToAddr(INPUTINFO_ADDR, Str_CAM_B, 9); 
                   if(TriggerFlag)
                      WriteStringToAddr(INPUTINFO_ADDR+8,"T" ,1); 
                   if(SEQFlag && !TriggerFlag)
                     {
                       DrawAttrCnt(INPUTINFO_ADDR-3, Gauge_COLOR1, 2 );
                       WriteStringToAddr(INPUTINFO_ADDR-3,Str_reverse,2);    
                      }
              
                   }
                 else 
                  {
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 71  

                  #ifdef _MIRROR
                   WriteTW88(TW88_WINBLENDING,0x04);  //wiliiam-v1.1-970827
                //   InitOSDWindow(Init_Osd_DisplayInput_M);
                    DrawAttrCnt(INPUTINFO_MIRROR_ADDR, DEFAULT_COLOR, 9 );    
                   DrawAttrCnt(INPUTINFO_MIRROR_ADDR, Mirror_COLOR, 3 );
                        DrawAttrCnt(INPUTINFO_MIRROR_ADDR, Trigger_COLOR, 1 );    
                        WriteStringToAddr(INPUTINFO_MIRROR_ADDR, Str_CAM_Mirror_B, len1); 
                    if(TriggerFlag)
                    WriteStringToAddr(INPUTINFO_MIRROR_ADDR,"T" ,1); 
                    if(SEQFlag && !TriggerFlag)
                           {
                            DrawAttrCnt(INPUTINFO_MIRROR_ADDR+10, Gauge_COLOR1, 2 );   
                            WriteStringToAddr(INPUTINFO_MIRROR_ADDR+10,Str_reverse,2);  
                         } 
                    #endif
                    }
              //}
              #if 0
                  vloss_buf= ReadDecoder(0x01); 
                  if((vloss_buf&0x80)!=0x00) 
                  {
                  vloss_flag=1;
                DrawAttrCnt(GAUGEINFO_ADDR+INPUTINFO_WIDTH*4,Gauge_COLOR3,30); 
                if(!mirror_flag)
                  WriteStringToAddr(GAUGEINFO_ADDR+INPUTINFO_WIDTH*4+9,Str_Mirror_Vloss,16);//william-v1.0-970725
                else
                  WriteStringToAddr(GAUGEINFO_ADDR+INPUTINFO_WIDTH*4+8,Str_Vloss,10);//william-v1.0-970725
                  }
                else 
                vloss_flag=0;
              #endif
                 break;
              //william-ml072s-v1.0-971230   
               case SOURCE_AV:
                mirror_flag=1;
                  WriteTW88(TW88_WINBLENDING,0x04); //wiliiam-v1.1-970827
                   DrawAttrCnt(INPUTINFO_ADDR, Trigger_COLOR,10 );    //wiliiam-v1.1-970827
                   DrawAttrCnt(INPUTINFO_ADDR, DEFAULT_COLOR, 8 );
                        WriteStringToAddr(INPUTINFO_ADDR, Str_AV, 9); 
              #if 0
                  vloss_buf = ReadDecoder(0x01);  
                      if((vloss_buf&0x80)!=0x00) 
                        {
                     vloss_flag=1;
                         WriteStringToAddr(GAUGEINFO_ADDR+INPUTINFO_WIDTH*4+8,Str_Vloss,10);//william-v1.0-970725
                         }
                   else 
                   vloss_flag=0;
                     if(SEQFlag && !TGFlag1)
                      {
                       DrawAttrCnt(INPUTINFO_ADDR-3, Gauge_COLOR1, 2 );
                       WriteStringToAddr(INPUTINFO_ADDR-3,Str_reverse,2);    
                      }
              #endif     
                  break;
              //william-ml072s-v1.0-971230     
               case SOURCE_R:
                 mirror_flag=ReadEEP(EEP_CAMRMode);
               //    if(ReadEEP(EEP_COSDMode)==0){
                 if(mirror_flag==1)
                  {
                   WriteTW88(TW88_WINBLENDING,0x04);  //wiliiam-v1.1-970827
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 72  

                //   InitOSDWindow(Init_Osd_DisplayInput_A);
                   DrawAttrCnt(INPUTINFO_ADDR, Trigger_COLOR,10 );    //wiliiam-v1.1-970827
                   DrawAttrCnt(INPUTINFO_ADDR, DEFAULT_COLOR, 8 );
                        WriteStringToAddr(INPUTINFO_ADDR, Str_CAM_R, 9); 
                    if(TriggerFlag)
                    WriteStringToAddr(INPUTINFO_ADDR+8,"T" ,1); 
                    if(SEQFlag && !TriggerFlag)
                      {
                       DrawAttrCnt(INPUTINFO_ADDR-3, Gauge_COLOR1, 2 );
                       WriteStringToAddr(INPUTINFO_ADDR-3,Str_reverse,2);    
                      }
              
                  }
                 else 
                  {
                 #ifdef _MIRROR 
                   WriteTW88(TW88_WINBLENDING,0x04);  //wiliiam-v1.1-970827
                //   InitOSDWindow(Init_Osd_DisplayInput_M);
                   DrawAttrCnt(INPUTINFO_MIRROR_ADDR, DEFAULT_COLOR, 9 );    
                   DrawAttrCnt(INPUTINFO_MIRROR_ADDR, Mirror_COLOR, 3 );
                        DrawAttrCnt(INPUTINFO_MIRROR_ADDR, Trigger_COLOR, 1 );
                        WriteStringToAddr(INPUTINFO_MIRROR_ADDR, Str_CAM_Mirror_R, len1); 
                    if(TriggerFlag)
                    WriteStringToAddr(INPUTINFO_MIRROR_ADDR,"T" ,1); 
                    if(SEQFlag && !TriggerFlag)
                           {
                            DrawAttrCnt(INPUTINFO_MIRROR_ADDR+10, Gauge_COLOR1, 2 );   
                            WriteStringToAddr(INPUTINFO_MIRROR_ADDR+10,Str_reverse,2);  
                         } 
                #endif    
                  }
               //     }
               #if 0
                  vloss_buf = ReadDecoder(0x01);  
                      if((vloss_buf&0x80)!=0x00) 
                        {
                     vloss_flag=1;
                   DrawAttrCnt(GAUGEINFO_ADDR+INPUTINFO_WIDTH*4,Gauge_COLOR3,30); 
                          if(!mirror_flag)
                            WriteStringToAddr(GAUGEINFO_ADDR+INPUTINFO_WIDTH*4+9,Str_Mirror_Vloss,16);//william-v1.0-970
             -725
                       else
                         WriteStringToAddr(GAUGEINFO_ADDR+INPUTINFO_WIDTH*4+8,Str_Vloss,10);//william-v1.0-970725
                         }
                   else 
                vloss_flag=0;
              #endif
              
                 break;
              }   
              ////////////////////////////////////////////////////////////////////////////////////////
                 // DrawAttrCnt(INPUTINFO_ADDR, Gauge_COLOR1, 51 );    
                 // WriteStringToAddr(INPUTINFO_ADDR, struct_InputSelection[i].Name, len1); 
              //    ShowOSDWindow(INPUTINFO_OSDWIN-1,TRUE);
                 // ShowOSDWindowAll(1);//0x09c  第4bit : OSD ON, 1: OSD OFF
                 // DisplayedOSD |= INPUTINFO;
              
              #ifdef _gauge
              if(CkTMode==REVERSE_TRIG && ReadEEP(EEP_GAUGEMode)==0 ) 
              {
                 DrawAttrCnt(GAUGEINFO_ADDR,Gauge_COLOR1,40);       
                 WriteStringToAddr(GAUGEINFO_ADDR+5,GaugeString,/*22*/19);//william-v1.0-970724
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 73  

                 WriteStringToAddr(GAUGEINFO_ADDR+INPUTINFO_WIDTH+4,GaugeString5,/*23*/20);//william-v1.0-970724
              
                 DrawAttrCnt(GAUGEINFO_ADDR+INPUTINFO_WIDTH,Gauge_COLOR2,80);   
                 WriteStringToAddr(GAUGEINFO_ADDR+INPUTINFO_WIDTH*2+3,GaugeString3,3);
                 WriteStringToAddr(GAUGEINFO_ADDR+INPUTINFO_WIDTH*2+/*26*/23,GaugeString4,3);
                 if(mirror_flag)
                 WriteStringToAddr(GAUGEINFO_ADDR+INPUTINFO_WIDTH*3+2,GaugeString6,/*27*/24); //william-v1.0-970724
                 else
                 WriteStringToAddr(GAUGEINFO_ADDR+INPUTINFO_WIDTH*3+2,GaugeString7,/*27*/24); //william-v1.0-970724
              
                 DrawAttrCnt(GAUGEINFO_ADDR+INPUTINFO_WIDTH*3,Gauge_COLOR3,80);  
                 WriteStringToAddr(GAUGEINFO_ADDR+INPUTINFO_WIDTH*4+1,GaugeString3,3);
                 WriteStringToAddr(GAUGEINFO_ADDR+INPUTINFO_WIDTH*4+/*28*/25,GaugeString4,3);
                 //SetDisplayedOSD(GAUGEINFO);
              }   
              #endif
                
                 ShowOSDWindow(RATINGINFO_OSDWIN,TRUE);
                 ShowOSDWindowAll(1);  //0x09c  第4bit : OSD ON, 1: OSD OFF
                 
                 //displayhold_flag=0;
                 //vlossflash_flag=0;
              
              }
                #endif
 861          #endif
 862          
 863          BYTE ClearInput(void)
 864          {
 865   1        ShowOSDWindowAll(0);
 866   1        ShowOSDWindow(INPUTINFO_OSDWIN-1,FALSE);
 867   1        //ShowOSDWindow(INPUTINFO_OSDWIN,FALSE);
 868   1      
 869   1        DisplayedOSD &= (~(INPUTINFO));
 870   1        #ifdef DEBUG_OSD
                Printf("\r\n++(ClearInput) & DisplayedOSD()=%bx",GetDisplayedOSD());
                #endif
 873   1      
 874   1        return 1;
 875   1      //  ClearBlending();
 876   1      }
 877          
 878          BYTE ClearInput2s(void)
 879          {
 880   1        ///ShowOSDWindowAll(0);
 881   1        ShowOSDWindow(INPUTINFO_OSDWIN-1,FALSE);
 882   1        //ShowOSDWindow(INPUTINFO_OSDWIN,FALSE);
 883   1      
 884   1        //DisplayedOSD &= (~(INPUTINFO));
 885   1        #ifdef DEBUG_OSD
                Printf("\r\n++(ClearInput) & DisplayedOSD()=%bx",GetDisplayedOSD());
                #endif
 888   1      
 889   1        return 1;
 890   1      }
 891          
 892          BYTE ClearVlossOsd(void)
 893          {
 894   1        //ShowOSDWindowAll(0);
 895   1        ShowOSDWindow(VLOSSINFO_OSDWIN-1,FALSE);
 896   1      //  DisplayedOSD &= (~(VLOSSINFO));
 897   1        ClearDisplayedOSD(VLOSSINFO);
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 74  

 898   1        #ifdef DEBUG_OSD
                Printf("\r\n++(ClearVlossOsd) & DisplayedOSD()=%bx",GetDisplayedOSD());
                #endif
 901   1      
 902   1        return 1;
 903   1      }
 904          void DisplayVol(void)
 905          {
 906   1        BYTE CODE *Str ;
 907   1        BYTE len;
 908   1      
 909   1        #ifdef Hs_debug
 910   1        Printf("\r\n++(DisplayVol)");
 911   1        #endif
 912   1      
 913   1        WriteDecoder(0xff, 0x01);
 914   1        Wait_ms(5);
 915   1        //  WriteDecoder(0x82, 0x0c);
 916   1        WriteDecoder(0x82, 0x01);
 917   1        Wait_ms(5);
 918   1        WriteDecoder(0xff, 0x00);
 919   1        
 920   1        if(( DisplayedOSD & TVVOL ) == 0 ) 
 921   1        {
 922   2          ClearOSDInfo();
 923   2          #ifdef REFERENCE
                  Change_OSDColorLookup();
                  #endif
 926   2          delay(10);
 927   2      
 928   2          InitOSDWindow(Init_Osd_BarWindow);
 929   2      
 930   2          ClearDataCnt(OSDMENU_BARADDR, 50); // Total 25*2 Char.
 931   2          DrawAttrCnt(OSDMENU_BARADDR, BG_COLOR_CYAN | CH_COLOR_WHITE, 25 );   
 932   2          #ifdef TW8816
 933   2          DrawAttrCnt(OSDMENU_BARADDR+21, BG_COLOR_WHITE | CH_COLOR_CYAN, 25 );
 934   2          #else
                  DrawAttrCnt(OSDMENU_BARADDR+25, BG_COLOR_WHITE | CH_COLOR_CYAN, 25 );
                  #endif
 937   2      #ifdef E_Wintek
                  Str = StrVolume2[GetOSDLang()];
              #else
 940   2          Str = StrVolume[GetOSDLang()];
 941   2      #endif
 942   2          len=CStrlen(Str);
 943   2          WriteStringToAddr(OSDMENU_BARADDR, Str, len);  
 944   2      
 945   2          ShowOSDWindow(OSDBARWINDOW,TRUE);
 946   2          ShowOSDWindow(DVRStatus_OSDWIN,FALSE);
 947   2          ShowOSDWindowAll(1);
 948   2        }
 949   1        //if((NowModeState==SelectMode&&SelectModeType==VGAMode)||(NowModeState==JumpMode&&((ReadEEP(EEP_JUMPMode
             -)==14)||SelectModeType==VGAMode)))    //william-v1.1-20110114
 950   1        if(VGAAudio)
 951   1          DisplayVolumebar(PCAudioVol);
 952   1        else  
 953   1          DisplayVolumebar(AudioVol);
 954   1      
 955   1        DisplayedOSD |= TVVOL;
 956   1        OSDDisplayedTime = GetTime_ms();
 957   1      }
 958          
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 75  

 959          #if 0
              void DisplayBrightness(void)
              {
                BYTE CODE *Str ;
                BYTE len;
              
                //#ifdef DEBUG_OSD
                Printf("\r\n++(DisplayBrightness)");
                //#endif
                
                if(( DisplayedOSD & TVCHN ) == 0 ) 
                {
              
                ClearOSDInfo();
                #ifdef REFERENCE
                Change_OSDColorLookup();
                #endif
                delay(10);
              
              
                InitOSDWindow(Init_Osd_BarWindow);
              
                ClearDataCnt(OSDMENU_BARADDR, 50); // Total 25*2 Char.
                DrawAttrCnt(OSDMENU_BARADDR, BG_COLOR_CYAN | CH_COLOR_WHITE, 25 );   
                DrawAttrCnt(OSDMENU_BARADDR+25, BG_COLOR_WHITE | CH_COLOR_CYAN, 25 );
              #ifdef E_Wintek
                Str = Str_Brightness[GetOSDLang()];
              #else
                Str = Str_Brightness[GetOSDLang()];
              #endif
                len=CStrlen(Str);
                WriteStringToAddr(OSDMENU_BARADDR, Str, len);  
              
                ShowOSDWindow(OSDBARWINDOW,TRUE);
                ShowOSDWindow(DVRStatus_OSDWIN,FALSE);
                ShowOSDWindowAll(1);
              
                }
                //if(VGAAudio)
                //DisplayVolumebar(PCAudioVol);
                //else  
                DisplayVolumebar(GetItemValue(VIDEO_BRIGHTNESS));
              
                DisplayedOSD |= TVCHN;
                OSDDisplayedTime = GetTime_ms();
              
              }
              #endif
1007          #if 0
              void DisplayMuteInfo(void)
              {
                BYTE CODE *Str ;
                BYTE len;
                extern CODE BYTE Init_Osd_DisplayMuteInfo[];
                extern CODE BYTE *MuteOnStr[];
              
                ClearOSDInfo();
                InitOSDWindow(Init_Osd_DisplayMuteInfo);
              
                Str = MuteOnStr[GetOSDLang()];
                len = strlen(Str);
                WriteStringToAddr(MUTEINFO_ADDR, Str, len);  
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 76  

                DrawAttrCnt(MUTEINFO_ADDR, BACK_COLOR|CH_COLOR_RED, len );   
              
                ShowOSDWindow(TVINFO_OSDWIN,TRUE);
                ShowOSDWindowAll(1);
                DisplayedOSD |= MUTE;
              }
              #endif
1028          void ClearMuteInfo(void)
1029          {
1030   1        ShowOSDWindow(TVINFO_OSDWIN,FALSE);
1031   1        DisplayedOSD &= (~(MUTE));
1032   1      }
1033          
1034          BYTE CheckAndClearOSD(void)
1035          {
1036   1        WORD  ctime,  stime, diff;
1037   1        BYTE  dt;
1038   1        BYTE  Result=0;
1039   1      
1040   1        dt = GetDisplayedOSD();
1041   1        if ( dt & ( MENU | INPUTINFO | TVVOL |TVCHN) ) {
1042   2      
1043   2          if( dt & MENU ) { 
1044   3            stime = GetOSDLastKeyInTime();  
1045   3            diff =  20 * 100; //GetOSDDuration()
1046   3          }
1047   2          else { 
1048   3            stime = OSDDisplayedTime; 
1049   3            diff = 2 * 100; 
1050   3          }
1051   2        
1052   2          ctime = GetTime_ms();     
1053   2      
1054   2          if( DiffTime_ms( stime, ctime ) >= diff ) {
1055   3      
1056   3            if( dt & (TVVOL|TVCHN)) 
1057   3            {
1058   4              #if defined( SUPPORT_PC ) || defined( SUPPORT_DTV )
                      cLastSyncLoss=0;    //pc mode update SyncLoss
                      #endif
1061   4              Result = ClearTVInfo();
1062   4              DisplayInput();
1063   4      
1064   4              #ifdef AWT_NO_SIGNAL_MSG  //ryan@20170906
1065   4              IsDrawNoVideoSignal = 0;
1066   4              #endif
1067   4            
1068   4            }
1069   3      
1070   3            if( dt & MENU )     
1071   3            {
1072   4              #if defined( SUPPORT_PC ) || defined( SUPPORT_DTV )
                      cLastSyncLoss=0;    //pc mode update SyncLoss
                      #endif
1075   4              Result = CloseOSDMenu();
1076   4            #if 1  //Pinchi 20150901 add to setup 2s for Display OFF
1077   4              if (ReadEEP(EEP_COSDMode) == 1)
1078   4                displayhold_flag = 3;
1079   4            #endif
1080   4              DisplayInput();
1081   4            #ifdef AWT_NO_SIGNAL_MSG  //Pinchi 20150320 add
1082   4              IsDrawNoVideoSignal = 0;
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 77  

1083   4            #endif
1084   4            }
1085   3          #if 0   //william-981029
                    if( Result == 1){
                      if( DisplayInputHold ) DisplayInput();
                      else {
              
                        if( IsAudioMuteOn() ) DisplayMuteInfo();
                      }
                    }
                  #endif  
1094   3            
1095   3            return 1;
1096   3          }
1097   2        }
1098   1      
1099   1        return 0;
1100   1      }
1101          
1102          #if defined( SUPPORT_PC ) || defined (SUPPORT_TV)
              
              void SetWindowStart(WORD x, WORD y)
              {
                WriteDecoder(TW88_WINSTART_HI, (x>>8) | ((y>>8)<<4));
                WriteDecoder(TW88_WINXSTART, (BYTE)x);
                WriteDecoder(TW88_WINYSTART, (BYTE)y);
              }
              #endif
1111          
1112          #if defined( SUPPORT_PC ) || defined( SUPPORT_DTV )
              
              void SetWindowWidth(BYTE width)
              {
                WriteDecoder(TW88_WINWIDTH, width);
              }
              
              void DisplayPCInfo(BYTE CODE *ptr)
              {
                WORD xstart, ystart;
                BYTE len;
              
                #ifdef DEBUG_PC
                Printf("\r\n==== DisplayPCInfo (%s) ====", ptr);
                #endif
              
                Clear_bypass();               // HHY 1.52
              
                AutoPHPCalDisable();
                SetPHP( GetPHR() + 0x100 ); // for Sharp-NoTicon by RYU-101205  // Set PHP
              
                PanelFreeRun(1);              // FreeRun
                // WriteDecoder(0x06, 0x80);    // Soft Reset
                PanelBlack(1);
              
                len  = strlen(ptr);
              
                xstart = ( PHR_ - len*PCINFO_ZOOM*FONT_WIDTH ) / 2;
                ystart =  PVR_ / 3;
                
                InitOSDWindow(Init_Osd_DisplayPCInfo);
                SetWindowStart(xstart, ystart);
                SetWindowWidth(len);
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 78  

              
                ClearDataCnt(PCMEASUREINFO_ADDR, len);
                DrawAttrCnt(PCMEASUREINFO_ADDR, CH_COLOR_RED,len);   
              
                WriteStringToAddr(PCMEASUREINFO_ADDR, (BYTE CODE *)ptr, len);
                ShowOSDWindow(PCINFO_OSDWIN,TRUE);
                ShowOSDWindowAll(1);
                
                DisplayedOSD |=PCINFO;
              
              }
              
              void ClearPCInfo(void)
              {
                if( !(DisplayedOSD & PCINFO) )    return;     //ljy070803
              
                DisplayedOSD &= (~(PCINFO));
                ShowOSDWindow(PCINFO_OSDWIN,FALSE);
                dPuts("\r\n== ClearPCInfo ==");
              
              //  PanelMute(0);               // HHY 1.63
              }
              
              extern CODE BYTE AutoAdjustInfo[]; 
              
              void DisplayAutoAdjust(void)
              {
                InitOSDWindow(Init_Osd_BarWindow);
                ClearDataCnt(OSDMENU_BARADDR, 50); // Total 25*2 Char.
                DrawAttrCnt(OSDMENU_BARADDR, BG_COLOR_CYAN | CH_COLOR_WHITE, 50 );
                WriteStringToAddr(OSDMENU_BARADDR, AutoAdjustInfo, 25);
                ShowOSDWindow(OSDBARWINDOW,TRUE);
                ShowOSDWindowAll(1);
              }
              void ClearAutoAdjust(void)
              {
                ShowOSDWindow(OSDBARWINDOW,FALSE);
              }
              
              #endif  // SUPPORT_PC
1185          
1186          //==================================================================
1187          //            TV Info
1188          //==================================================================
1189          
1190          BYTE ClearTVInfo(void)
1191          {
1192   1        
1193   1        if( DisplayedOSD & TVVOL )    
1194   1        { 
1195   2          #ifdef AWT_ML072S///修正disable時會有雜點出現ryan@20171214
1196   2          ShowOSDWindowAll(0);   
1197   2          #endif
1198   2          ShowOSDWindow(OSDBARWINDOW, FALSE);
1199   2          DisplayedOSD &= (~(TVVOL));
1200   2      
1201   2      
1202   2        }
1203   1        else
1204   1        {
1205   2          ShowOSDWindow(TVINFO_OSDWIN, FALSE);
1206   2          DisplayedOSD &= (~(TVCHN));
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 79  

1207   2        }
1208   1        #ifndef QUAD
1209   1        CheckMirror();
1210   1        #endif
1211   1        return 1;
1212   1      }
1213          
*** WARNING C294 IN LINE 196 OF dispinfo.c: unreachable code
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 80  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com0071 (BEGIN)
0000         L?0114:
0000         L?0115:
0000 900000      E     MOV     DPTR,#SEQFlag
0003 E0                MOVX    A,@DPTR
0004 7B01              MOV     R3,#01H
0006 7D31              MOV     R5,#031H
0008 22                RET     
0009         L?0120:
0009         L?0121:
0009 900000      E     MOV     DPTR,#NowModeState
000C E0                MOVX    A,@DPTR
000D 6401              XRL     A,#01H
000F 22                RET     
0010         L?0123:
0010 7A00        R     MOV     R2,#HIGH ?SC_71
0012 7900        R     MOV     R1,#LOW ?SC_71
0014         L?0124:
0014 7BFF              MOV     R3,#0FFH
0016 900000      E     MOV     DPTR,#?_WriteStringToAddr?BYTE+05H
0019 7401              MOV     A,#01H
001B 22                RET     
             ; FUNCTION Com0071 (END)

             ; FUNCTION _ClearDisplayedOSD (BEGIN)
                                           ; SOURCE LINE # 136
;---- Variable 'newd' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 137
                                           ; SOURCE LINE # 138
0000 900000      R     MOV     DPTR,#DisplayedOSD
0003 E0                MOVX    A,@DPTR
0004 FE                MOV     R6,A
0005 EF                MOV     A,R7
0006 F4                CPL     A
0007 FF                MOV     R7,A
0008 EE                MOV     A,R6
0009 5F                ANL     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 139
000B 22                RET     
             ; FUNCTION _ClearDisplayedOSD (END)

             ; FUNCTION _SetDisplayedOSD (BEGIN)
                                           ; SOURCE LINE # 141
;---- Variable 'newd' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 142
                                           ; SOURCE LINE # 143
0000 900000      R     MOV     DPTR,#DisplayedOSD
0003 E0                MOVX    A,@DPTR
0004 4F                ORL     A,R7
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 144
0006 22                RET     
             ; FUNCTION _SetDisplayedOSD (END)

             ; FUNCTION GetDisplayedOSD (BEGIN)
                                           ; SOURCE LINE # 146
                                           ; SOURCE LINE # 147
                                           ; SOURCE LINE # 148
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 81  

0000 900000      R     MOV     DPTR,#DisplayedOSD
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 149
0005 22                RET     
             ; FUNCTION GetDisplayedOSD (END)

             ; FUNCTION ClearOSDInfo (BEGIN)
                                           ; SOURCE LINE # 151
                                           ; SOURCE LINE # 152
                                           ; SOURCE LINE # 158
0000 120000      R     LCALL   GetDisplayedOSD
0003 900000      R     MOV     DPTR,#dt
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 160
0008 120000      R     LCALL   GetDisplayedOSD
000B 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
000E E4                CLR     A
000F F0                MOVX    @DPTR,A
0010 A3                INC     DPTR
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
0013 7BFF              MOV     R3,#0FFH
0015 7A00        R     MOV     R2,#HIGH ?SC_0
0017 7900        R     MOV     R1,#LOW ?SC_0
0019 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 166
001C 900000      R     MOV     DPTR,#dt
001F E0                MOVX    A,@DPTR
0020 20E203            JB      ACC.2,?C0005
0023 30E705            JNB     ACC.7,?C0004
0026         ?C0005:
                                           ; SOURCE LINE # 167
                                           ; SOURCE LINE # 169
0026 120000      R     LCALL   ClearTVInfo
                                           ; SOURCE LINE # 171
0029 C200        E     CLR     IsDrawNoVideoSignal
                                           ; SOURCE LINE # 173
002B         ?C0004:
                                           ; SOURCE LINE # 174
002B 900000      R     MOV     DPTR,#dt
002E E0                MOVX    A,@DPTR
002F 30E003            JNB     ACC.0,?C0006
0032 120000      R     LCALL   ClearMuteInfo
0035         ?C0006:
                                           ; SOURCE LINE # 175
0035 900000      R     MOV     DPTR,#dt
0038 E0                MOVX    A,@DPTR
0039 30E403            JNB     ACC.4,?C0007
003C 120000      R     LCALL   ClearInput
003F         ?C0007:
                                           ; SOURCE LINE # 176
003F 900000      R     MOV     DPTR,#dt
0042 E0                MOVX    A,@DPTR
0043 30E103            JNB     ACC.1,?C0008
0046 120000      E     LCALL   CloseOSDMenu
0049         ?C0008:
                                           ; SOURCE LINE # 177
0049 900000      R     MOV     DPTR,#dt
004C E0                MOVX    A,@DPTR
004D 30E603            JNB     ACC.6,?C0009
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 82  

0050 120000      E     LCALL   ClearGAUGEINFO
0053         ?C0009:
                                           ; SOURCE LINE # 178
0053 900000      R     MOV     DPTR,#dt
0056 E0                MOVX    A,@DPTR
0057 30E303            JNB     ACC.3,?C0011
005A 120000      R     LCALL   ClearVlossOsd
                                           ; SOURCE LINE # 179
005D         ?C0011:
005D 22                RET     
             ; FUNCTION ClearOSDInfo (END)

             ; FUNCTION VlossHandler (BEGIN)
                                           ; SOURCE LINE # 187
                                           ; SOURCE LINE # 188
0000 22                RET     
                                           ; SOURCE LINE # 196
                                           ; SOURCE LINE # 198
                                           ; SOURCE LINE # 199
                                           ; SOURCE LINE # 200
                                           ; SOURCE LINE # 201
                                           ; SOURCE LINE # 202
                                           ; SOURCE LINE # 203
                                           ; SOURCE LINE # 204
                                           ; SOURCE LINE # 205
                                           ; SOURCE LINE # 206
                                           ; SOURCE LINE # 207
                                           ; SOURCE LINE # 208
                                           ; SOURCE LINE # 210
                                           ; SOURCE LINE # 211
                                           ; SOURCE LINE # 228
0001 120000      R     LCALL   GetDisplayedOSD
0004 EF                MOV     A,R7
0005 30E32E            JNB     ACC.3,?C0012
                                           ; SOURCE LINE # 229
                                           ; SOURCE LINE # 231
0008 7F10              MOV     R7,#010H
000A 120000      R     LCALL   _ClearDisplayedOSD
                                           ; SOURCE LINE # 232
000D E4                CLR     A
000E 900000      R     MOV     DPTR,#vloss_flag
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 234
0012 7F08              MOV     R7,#08H
0014 120000      R     LCALL   _ClearDisplayedOSD
                                           ; SOURCE LINE # 236
0017 900000      R     MOV     DPTR,#mirror_flag
001A E0                MOVX    A,@DPTR
001B 6401              XRL     A,#01H
001D 7D05              MOV     R5,#05H
001F 7005              JNZ     ?C0018
                                           ; SOURCE LINE # 237
0021 7F6B              MOV     R7,#06BH
0023 FE                MOV     R6,A
0024 8004              SJMP    ?C0090
0026         ?C0018:
                                           ; SOURCE LINE # 239
0026 7F6A              MOV     R7,#06AH
0028 7E00              MOV     R6,#00H
002A         ?C0090:
002A 120000      E     LCALL   _ClearDataCnt
002D         ?C0019:
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 83  

                                           ; SOURCE LINE # 242
002D 7BFF              MOV     R3,#0FFH
002F 7A00        R     MOV     R2,#HIGH ?SC_53
0031 7900        R     MOV     R1,#LOW ?SC_53
0033 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 244
                                           ; SOURCE LINE # 245
0036         ?C0012:
0036 22                RET     
             ; FUNCTION VlossHandler (END)

             ; FUNCTION DisplayInput (BEGIN)
                                           ; SOURCE LINE # 248
                                           ; SOURCE LINE # 249
                                           ; SOURCE LINE # 284
0000 900000      R     MOV     DPTR,#SystemAddr
0003 7422              MOV     A,#022H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 286
0006 120000      R     LCALL   ClearOSDInfo
                                           ; SOURCE LINE # 288
0009 7BFF              MOV     R3,#0FFH
000B 7A00        E     MOV     R2,#HIGH Init_Osd_DisplayInput
000D 7900        E     MOV     R1,#LOW Init_Osd_DisplayInput
000F 120000      E     LCALL   _InitOSDWindow
                                           ; SOURCE LINE # 289
0012 7DFF              MOV     R5,#0FFH
0014 E4                CLR     A
0015 FF                MOV     R7,A
0016 FE                MOV     R6,A
0017 120000      E     LCALL   _ClearDataCnt
                                           ; SOURCE LINE # 290
001A 7BFF              MOV     R3,#0FFH
001C 120000      R     LCALL   L?0122
                                           ; SOURCE LINE # 291
001F E4                CLR     A
0020 900000      R     MOV     DPTR,#i
0023 F0                MOVX    @DPTR,A
0024         ?C0020:
0024 900000      R     MOV     DPTR,#i
0027 E0                MOVX    A,@DPTR
0028 FF                MOV     R7,A
0029 C3                CLR     C
002A 94F0              SUBB    A,#0F0H
002C 7480              MOV     A,#080H
002E 9480              SUBB    A,#080H
0030 5015              JNC     ?C0021
0032 7E00              MOV     R6,#00H
0034 7A00        R     MOV     R2,#HIGH ?SC_69
0036 7900        R     MOV     R1,#LOW ?SC_69
0038 120000      R     LCALL   L?0124
003B F0                MOVX    @DPTR,A
003C 120000      E     LCALL   _WriteStringToAddr
003F 900000      R     MOV     DPTR,#i
0042 E0                MOVX    A,@DPTR
0043 04                INC     A
0044 F0                MOVX    @DPTR,A
0045 80DD              SJMP    ?C0020
0047         ?C0021:
                                           ; SOURCE LINE # 292
0047 900000      R     MOV     DPTR,#DisplayedOSD
004A E0                MOVX    A,@DPTR
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 84  

004B 4410              ORL     A,#010H
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 294
004E 120000      E     LCALL   GetInputSelection
;---- Variable 'inputs' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 328
0051 900000      R     MOV     DPTR,#i
0054 7401              MOV     A,#01H
0056 F0                MOVX    @DPTR,A
0057         ?C0023:
                                           ; SOURCE LINE # 329
0057 900000      R     MOV     DPTR,#i
005A E0                MOVX    A,@DPTR
005B FE                MOV     R6,A
005C 75F011            MOV     B,#011H
005F 900000      E     MOV     DPTR,#struct_InputSelection_S
0062 120000      E     LCALL   ?C?OFFXADD
0065 E4                CLR     A
0066 93                MOVC    A,@A+DPTR
0067 6F                XRL     A,R7
0068 6008              JZ      ?C0024
006A 900000      R     MOV     DPTR,#i
006D E0                MOVX    A,@DPTR
006E 04                INC     A
006F F0                MOVX    @DPTR,A
0070 80E5              SJMP    ?C0023
0072         ?C0024:
                                           ; SOURCE LINE # 331
0072 EE                MOV     A,R6
0073 75F011            MOV     B,#011H
0076 A4                MUL     AB
0077 2400        E     ADD     A,#LOW struct_InputSelection_S+01H
0079 F9                MOV     R1,A
007A 7400        E     MOV     A,#HIGH struct_InputSelection_S+01H
007C 35F0              ADDC    A,B
007E FA                MOV     R2,A
007F 7BFF              MOV     R3,#0FFH
0081 120000      E     LCALL   _strlen
0084 900000      R     MOV     DPTR,#len1
0087 EF                MOV     A,R7
0088 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 333
0089 A3                INC     DPTR
008A E0                MOVX    A,@DPTR
008B 24FE              ADD     A,#0FEH
008D 7003              JNZ     $ + 5H
008F 020000      R     LJMP    ?C0042
0092 14                DEC     A
0093 7003              JNZ     $ + 5H
0095 020000      R     LJMP    ?C0055
0098 14                DEC     A
0099 7003              JNZ     $ + 5H
009B 020000      R     LJMP    ?C0068
009E 2403              ADD     A,#03H
00A0 6003              JZ      $ + 5H
00A2 020000      R     LJMP    ?C0027
                                           ; SOURCE LINE # 334
                                           ; SOURCE LINE # 335
00A5         ?C0028:
                                           ; SOURCE LINE # 336
00A5 7FA5              MOV     R7,#0A5H
                                           ; SOURCE LINE # 338
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 85  

00A7 120000      R     LCALL   L?0118
00AA 703D              JNZ     ?C0029
                                           ; SOURCE LINE # 339
                                           ; SOURCE LINE # 343
00AC 7B0A              MOV     R3,#0AH
00AE 7D34              MOV     R5,#034H
                                           ; SOURCE LINE # 345
00B0 120000      R     LCALL   L?0128
00B3 7F18              MOV     R7,#018H
00B5 7E00              MOV     R6,#00H
00B7 120000      E     LCALL   _DrawAttrCnt
                                           ; SOURCE LINE # 346
00BA 7A00        R     MOV     R2,#HIGH Str_CAM_A
00BC 7900        R     MOV     R1,#LOW Str_CAM_A
00BE 7408              MOV     A,#08H
00C0 120000      R     LCALL   L?0127
                                           ; SOURCE LINE # 348
00C3 900000      E     MOV     DPTR,#TriggerFlag
00C6 E0                MOVX    A,@DPTR
00C7 6003              JZ      ?C0030
                                           ; SOURCE LINE # 352
00C9 020000      R     LJMP    ?C0098
00CC         ?C0030:
                                           ; SOURCE LINE # 355
00CC 120000      R     LCALL   L?0120
00CF 6003              JZ      $ + 5H
00D1 020000      R     LJMP    ?C0027
                                           ; SOURCE LINE # 356
                                           ; SOURCE LINE # 357
00D4 120000      R     LCALL   L?0114
00D7 7F08              MOV     R7,#08H
00D9 7E00              MOV     R6,#00H
00DB 6006              JZ      ?C0033
                                           ; SOURCE LINE # 358
                                           ; SOURCE LINE # 359
                                           ; SOURCE LINE # 363
00DD 120000      R     LCALL   L?0119
                                           ; SOURCE LINE # 365
00E0 020000      R     LJMP    ?C0099
00E3         ?C0033:
                                           ; SOURCE LINE # 367
                                           ; SOURCE LINE # 368
                                           ; SOURCE LINE # 369
00E3 120000      R     LCALL   L?0125
00E6         ?C0091:
                                           ; SOURCE LINE # 370
                                           ; SOURCE LINE # 371
                                           ; SOURCE LINE # 372
00E6 020000      R     LJMP    ?C0099
00E9         ?C0029:
                                           ; SOURCE LINE # 374
                                           ; SOURCE LINE # 377
                                           ; SOURCE LINE # 379
                                           ; SOURCE LINE # 380
00E9 120000      R     LCALL   L?0111
00EC 7A00        R     MOV     R2,#HIGH Str_CAM_Mirror_A
00EE 7900        R     MOV     R1,#LOW Str_CAM_Mirror_A
00F0 740C              MOV     A,#0CH
                                           ; SOURCE LINE # 381
00F2 120000      R     LCALL   L?0116
00F5 6005              JZ      ?C0036
                                           ; SOURCE LINE # 382
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 86  

                                           ; SOURCE LINE # 383
00F7 120000      R     LCALL   L?0123
                                           ; SOURCE LINE # 384
00FA 8016              SJMP    ?C0096
00FC         ?C0036:
                                           ; SOURCE LINE # 385
00FC 120000      R     LCALL   L?0120
00FF 7021              JNZ     ?C0037
                                           ; SOURCE LINE # 386
                                           ; SOURCE LINE # 387
0101 120000      R     LCALL   L?0114
0104 6013              JZ      ?C0039
                                           ; SOURCE LINE # 388
                                           ; SOURCE LINE # 389
                                           ; SOURCE LINE # 391
0106 120000      R     LCALL   L?0117
0109 7A00        R     MOV     R2,#HIGH Str_Mirror_S
010B 7900        R     MOV     R1,#LOW Str_Mirror_S
010D 900000      E     MOV     DPTR,#?_WriteStringToAddr?BYTE+05H
0110 7402              MOV     A,#02H
0112         ?C0096:
0112 F0                MOVX    @DPTR,A
0113 7F19              MOV     R7,#019H
0115 7E00              MOV     R6,#00H
                                           ; SOURCE LINE # 395
0117 8006              SJMP    ?C0097
0119         ?C0039:
                                           ; SOURCE LINE # 397
                                           ; SOURCE LINE # 398
                                           ; SOURCE LINE # 399
0119 120000      R     LCALL   L?0112
011C E4                CLR     A
011D FF                MOV     R7,A
011E FE                MOV     R6,A
011F         ?C0097:
011F 120000      E     LCALL   _WriteStringToAddr
                                           ; SOURCE LINE # 400
                                           ; SOURCE LINE # 401
0122         ?C0037:
                                           ; SOURCE LINE # 402
0122 900000      E     MOV     DPTR,#SEQFlag
0125 E0                MOVX    A,@DPTR
0126 7003              JNZ     $ + 5H
0128 020000      R     LJMP    ?C0027
012B 900000      E     MOV     DPTR,#TriggerFlag
012E E0                MOVX    A,@DPTR
                                           ; SOURCE LINE # 403
                                           ; SOURCE LINE # 406
                                           ; SOURCE LINE # 407
                                           ; SOURCE LINE # 408
012F 020000      R     LJMP    ?C0027
                                           ; SOURCE LINE # 410
0132         ?C0042:
                                           ; SOURCE LINE # 411
0132 7FA6              MOV     R7,#0A6H
                                           ; SOURCE LINE # 412
0134 120000      R     LCALL   L?0118
0137 702E              JNZ     ?C0043
                                           ; SOURCE LINE # 413
                                           ; SOURCE LINE # 417
0139 7B0A              MOV     R3,#0AH
013B FF                MOV     R7,A
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 87  

                                           ; SOURCE LINE # 421
013C 120000      R     LCALL   L?0110
                                           ; SOURCE LINE # 422
013F 7A00        R     MOV     R2,#HIGH Str_CAM_B
0141 7900        R     MOV     R1,#LOW Str_CAM_B
                                           ; SOURCE LINE # 423
0143 120000      R     LCALL   L?0109
0146 6003              JZ      ?C0044
                                           ; SOURCE LINE # 424
0148         ?C0094:
0148 020000      R     LJMP    ?C0098
014B         ?C0044:
                                           ; SOURCE LINE # 425
014B 120000      R     LCALL   L?0121
014E 6003              JZ      $ + 5H
0150 020000      R     LJMP    ?C0027
                                           ; SOURCE LINE # 426
                                           ; SOURCE LINE # 427
0153 120000      R     LCALL   L?0115
0156 7F08              MOV     R7,#08H
0158 7E00              MOV     R6,#00H
015A 6005              JZ      ?C0047
                                           ; SOURCE LINE # 428
                                           ; SOURCE LINE # 429
                                           ; SOURCE LINE # 430
015C 120000      R     LCALL   L?0119
                                           ; SOURCE LINE # 431
015F 8003              SJMP    ?C0092
0161         ?C0047:
                                           ; SOURCE LINE # 433
                                           ; SOURCE LINE # 434
                                           ; SOURCE LINE # 435
0161 120000      R     LCALL   L?0125
0164         ?C0092:
0164         ?C0095:
                                           ; SOURCE LINE # 436
                                           ; SOURCE LINE # 437
                                           ; SOURCE LINE # 439
0164 020000      R     LJMP    ?C0099
0167         ?C0043:
                                           ; SOURCE LINE # 441
                                           ; SOURCE LINE # 442
                                           ; SOURCE LINE # 444
                                           ; SOURCE LINE # 445
0167 120000      R     LCALL   L?0111
016A 7A00        R     MOV     R2,#HIGH Str_CAM_Mirror_B
016C 7900        R     MOV     R1,#LOW Str_CAM_Mirror_B
016E 740D              MOV     A,#0DH
                                           ; SOURCE LINE # 452
0170 120000      R     LCALL   L?0116
0173 6003              JZ      ?C0050
                                           ; SOURCE LINE # 453
0175 020000      R     LJMP    ?C0100
0178         ?C0050:
                                           ; SOURCE LINE # 454
0178 120000      R     LCALL   L?0121
017B 6003              JZ      $ + 5H
017D 020000      R     LJMP    ?C0027
                                           ; SOURCE LINE # 455
                                           ; SOURCE LINE # 456
0180 120000      R     LCALL   L?0115
0183 6003              JZ      ?C0053
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 88  

                                           ; SOURCE LINE # 457
                                           ; SOURCE LINE # 458
                                           ; SOURCE LINE # 459
                                           ; SOURCE LINE # 460
0185 020000      R     LJMP    ?C0101
0188         ?C0053:
                                           ; SOURCE LINE # 462
                                           ; SOURCE LINE # 463
                                           ; SOURCE LINE # 464
                                           ; SOURCE LINE # 465
                                           ; SOURCE LINE # 466
                                           ; SOURCE LINE # 467
                                           ; SOURCE LINE # 468
0188 020000      R     LJMP    ?C0102
                                           ; SOURCE LINE # 471
018B         ?C0055:
                                           ; SOURCE LINE # 472
018B 7FA8              MOV     R7,#0A8H
018D 7E00              MOV     R6,#00H
018F 120000      E     LCALL   _ReadEEP
0192 900000      R     MOV     DPTR,#mirror_flag
0195 EF                MOV     A,R7
0196 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 474
0197 6401              XRL     A,#01H
0199 703B              JNZ     ?C0056
                                           ; SOURCE LINE # 475
                                           ; SOURCE LINE # 476
019B 7B01              MOV     R3,#01H
019D 7F20              MOV     R7,#020H
                                           ; SOURCE LINE # 477
019F 120000      R     LCALL   L?0110
                                           ; SOURCE LINE # 478
01A2 7A00        R     MOV     R2,#HIGH Str_CAM_R
01A4 7900        R     MOV     R1,#LOW Str_CAM_R
                                           ; SOURCE LINE # 480
01A6 120000      R     LCALL   L?0109
01A9 6009              JZ      ?C0057
                                           ; SOURCE LINE # 481
                                           ; SOURCE LINE # 485
01AB         ?C0098:
01AB 7BFF              MOV     R3,#0FFH
01AD 7A00        R     MOV     R2,#HIGH ?SC_71
01AF 7900        R     MOV     R1,#LOW ?SC_71
                                           ; SOURCE LINE # 487
01B1 020000      R     LJMP    ?C0104
01B4         ?C0057:
                                           ; SOURCE LINE # 488
01B4 120000      R     LCALL   L?0121
01B7 6003              JZ      $ + 5H
01B9 020000      R     LJMP    ?C0027
                                           ; SOURCE LINE # 489
                                           ; SOURCE LINE # 490
01BC 120000      R     LCALL   L?0115
01BF 7F08              MOV     R7,#08H
01C1 7E00              MOV     R6,#00H
01C3 6005              JZ      ?C0060
                                           ; SOURCE LINE # 491
                                           ; SOURCE LINE # 492
                                           ; SOURCE LINE # 493
01C5 120000      R     LCALL   L?0129
                                           ; SOURCE LINE # 494
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 89  

01C8 8009              SJMP    ?C0093
01CA         ?C0060:
                                           ; SOURCE LINE # 496
                                           ; SOURCE LINE # 497
01CA 120000      E     LCALL   _DrawAttrCnt
                                           ; SOURCE LINE # 498
01CD 7BFF              MOV     R3,#0FFH
01CF 7A00        R     MOV     R2,#HIGH ?SC_75
01D1 7900        R     MOV     R1,#LOW ?SC_75
01D3         ?C0093:
01D3         ?C0099:
01D3         ?C0103:
                                           ; SOURCE LINE # 499
                                           ; SOURCE LINE # 500
                                           ; SOURCE LINE # 501
01D3 020000      R     LJMP    ?C0104
01D6         ?C0056:
                                           ; SOURCE LINE # 503
                                           ; SOURCE LINE # 506
01D6 7B0E              MOV     R3,#0EH
01D8 120000      R     LCALL   L?0122
                                           ; SOURCE LINE # 508
01DB 7B01              MOV     R3,#01H
01DD 7D34              MOV     R5,#034H
                                           ; SOURCE LINE # 509
01DF 120000      R     LCALL   L?0117
01E2 7A00        R     MOV     R2,#HIGH Str_CAM_Mirror_R
01E4 7900        R     MOV     R1,#LOW Str_CAM_Mirror_R
01E6 900000      E     MOV     DPTR,#?_WriteStringToAddr?BYTE+05H
01E9 740E              MOV     A,#0EH
01EB F0                MOVX    @DPTR,A
01EC E4                CLR     A
01ED FF                MOV     R7,A
01EE FE                MOV     R6,A
01EF 120000      E     LCALL   _WriteStringToAddr
                                           ; SOURCE LINE # 511
01F2 900000      E     MOV     DPTR,#TriggerFlag
01F5 E0                MOVX    A,@DPTR
01F6 6005              JZ      ?C0063
                                           ; SOURCE LINE # 512
01F8         ?C0100:
01F8 120000      R     LCALL   L?0123
01FB 801C              SJMP    ?C0105
01FD         ?C0063:
                                           ; SOURCE LINE # 513
01FD 120000      R     LCALL   L?0121
0200 7064              JNZ     ?C0027
                                           ; SOURCE LINE # 514
                                           ; SOURCE LINE # 515
0202 120000      R     LCALL   L?0115
0205 6017              JZ      ?C0066
                                           ; SOURCE LINE # 516
                                           ; SOURCE LINE # 517
0207         ?C0101:
0207 7F19              MOV     R7,#019H
0209 7E00              MOV     R6,#00H
020B 120000      E     LCALL   _DrawAttrCnt
                                           ; SOURCE LINE # 521
020E 7BFF              MOV     R3,#0FFH
0210 7A00        R     MOV     R2,#HIGH Str_Mirror_S
0212 7900        R     MOV     R1,#LOW Str_Mirror_S
0214 900000      E     MOV     DPTR,#?_WriteStringToAddr?BYTE+05H
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 90  

0217 7403              MOV     A,#03H
0219         ?C0105:
0219 F0                MOVX    @DPTR,A
021A 7F19              MOV     R7,#019H
                                           ; SOURCE LINE # 523
021C 8043              SJMP    ?C0106
021E         ?C0066:
                                           ; SOURCE LINE # 525
                                           ; SOURCE LINE # 526
021E         ?C0102:
                                           ; SOURCE LINE # 527
021E 120000      R     LCALL   L?0112
0221 E4                CLR     A
0222 FF                MOV     R7,A
0223 FE                MOV     R6,A
                                           ; SOURCE LINE # 528
                                           ; SOURCE LINE # 529
                                           ; SOURCE LINE # 530
                                           ; SOURCE LINE # 531
0224 803D              SJMP    ?C0107
                                           ; SOURCE LINE # 533
0226         ?C0068:
                                           ; SOURCE LINE # 534
0226 900000      R     MOV     DPTR,#mirror_flag
0229 7401              MOV     A,#01H
022B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 536
022C 7B0A              MOV     R3,#0AH
022E 7D34              MOV     R5,#034H
0230 E4                CLR     A
                                           ; SOURCE LINE # 537
0231 120000      R     LCALL   L?0128
0234 E4                CLR     A
0235 FF                MOV     R7,A
0236 FE                MOV     R6,A
0237 120000      E     LCALL   _DrawAttrCnt
                                           ; SOURCE LINE # 541
023A 7A00        R     MOV     R2,#HIGH Str_AV
023C 7900        R     MOV     R1,#LOW Str_AV
023E 7409              MOV     A,#09H
0240 120000      R     LCALL   L?0127
                                           ; SOURCE LINE # 544
0243 900000      E     MOV     DPTR,#SEQFlag
0246 E0                MOVX    A,@DPTR
0247 601D              JZ      ?C0027
0249 900000      E     MOV     DPTR,#TriggerFlag
024C E0                MOVX    A,@DPTR
024D 7017              JNZ     ?C0027
                                           ; SOURCE LINE # 545
                                           ; SOURCE LINE # 549
024F 7B01              MOV     R3,#01H
0251 7D31              MOV     R5,#031H
0253 7F08              MOV     R7,#08H
0255 FE                MOV     R6,A
                                           ; SOURCE LINE # 550
0256 120000      R     LCALL   L?0129
0259         ?C0104:
0259 900000      E     MOV     DPTR,#?_WriteStringToAddr?BYTE+05H
025C 7401              MOV     A,#01H
025E F0                MOVX    @DPTR,A
025F 7F08              MOV     R7,#08H
0261         ?C0106:
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 91  

0261 7E00              MOV     R6,#00H
0263         ?C0107:
0263 120000      E     LCALL   _WriteStringToAddr
                                           ; SOURCE LINE # 552
                                           ; SOURCE LINE # 553
                                           ; SOURCE LINE # 555
0266         ?C0027:
                                           ; SOURCE LINE # 557
0266 900000      E     MOV     DPTR,#displayhold_flag
0269 7404              MOV     A,#04H
026B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 576
026C 7D01              MOV     R5,#01H
026E 7F02              MOV     R7,#02H
0270 120000      E     LCALL   _ShowOSDWindow_TW88
                                           ; SOURCE LINE # 587
0273 7F01              MOV     R7,#01H
0275 120000      E     LCALL   _ShowOSDWindowAll
                                           ; SOURCE LINE # 589
0278 120000      R     LCALL   VlossHandler
                                           ; SOURCE LINE # 592
027B 120000      E     LCALL   GetTime_ms
027E 8E00        R     MOV     OSDDisplayedTime,R6
0280 8F00        R     MOV     OSDDisplayedTime+01H,R7
                                           ; SOURCE LINE # 593
0282 22                RET     
0283         L?0109:
0283 7BFF              MOV     R3,#0FFH
0285 900000      E     MOV     DPTR,#?_WriteStringToAddr?BYTE+05H
0288 7409              MOV     A,#09H
028A F0                MOVX    @DPTR,A
028B 7F1A              MOV     R7,#01AH
028D 7E00              MOV     R6,#00H
028F 120000      E     LCALL   _WriteStringToAddr
0292 900000      E     MOV     DPTR,#TriggerFlag
0295 E0                MOVX    A,@DPTR
0296 22                RET     
0297         L?0110:
0297 7D34              MOV     R5,#034H
0299 FE                MOV     R6,A
029A 120000      E     LCALL   _DrawAttrCnt
029D 7B08              MOV     R3,#08H
029F 7D32              MOV     R5,#032H
02A1 E4                CLR     A
02A2 FF                MOV     R7,A
02A3 FE                MOV     R6,A
02A4 120000      E     LCALL   _DrawAttrCnt
02A7 22                RET     
02A8         L?0111:
02A8 7B09              MOV     R3,#09H
02AA 7D34              MOV     R5,#034H
02AC 7F19              MOV     R7,#019H
02AE 7E00              MOV     R6,#00H
02B0 120000      E     LCALL   _DrawAttrCnt
02B3 7B08              MOV     R3,#08H
02B5 7D32              MOV     R5,#032H
02B7 7F01              MOV     R7,#01H
02B9 7E00              MOV     R6,#00H
02BB 120000      E     LCALL   _DrawAttrCnt
02BE 7BFF              MOV     R3,#0FFH
02C0 22                RET     
02C1         L?0112:
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 92  

02C1 E4                CLR     A
02C2 FF                MOV     R7,A
02C3 FE                MOV     R6,A
02C4 120000      E     LCALL   _DrawAttrCnt
02C7 7BFF              MOV     R3,#0FFH
02C9 7A00        R     MOV     R2,#HIGH Str_Mirror_J
02CB 7900        R     MOV     R1,#LOW Str_Mirror_J
02CD 900000      E     MOV     DPTR,#?_WriteStringToAddr?BYTE+05H
02D0 7403              MOV     A,#03H
02D2 F0                MOVX    @DPTR,A
02D3 22                RET     
02D4         L?0116:
02D4 900000      E     MOV     DPTR,#?_WriteStringToAddr?BYTE+05H
02D7 F0                MOVX    @DPTR,A
02D8 7F01              MOV     R7,#01H
02DA 7E00              MOV     R6,#00H
02DC 120000      E     LCALL   _WriteStringToAddr
02DF 900000      E     MOV     DPTR,#TriggerFlag
02E2 E0                MOVX    A,@DPTR
02E3 22                RET     
02E4         L?0117:
02E4 7F19              MOV     R7,#019H
02E6 7E00              MOV     R6,#00H
02E8 120000      E     LCALL   _DrawAttrCnt
02EB 7BFF              MOV     R3,#0FFH
02ED 22                RET     
02EE         L?0118:
02EE 7E00              MOV     R6,#00H
02F0 120000      E     LCALL   _ReadEEP
02F3 900000      R     MOV     DPTR,#mirror_flag
02F6 EF                MOV     A,R7
02F7 F0                MOVX    @DPTR,A
02F8 6401              XRL     A,#01H
02FA 22                RET     
02FB         L?0119:
02FB 120000      E     LCALL   _DrawAttrCnt
02FE 7BFF              MOV     R3,#0FFH
0300 7A00        R     MOV     R2,#HIGH ?SC_73
0302 7900        R     MOV     R1,#LOW ?SC_73
0304 22                RET     
0305         L?0122:
0305 7D32              MOV     R5,#032H
0307 E4                CLR     A
0308 FF                MOV     R7,A
0309 FE                MOV     R6,A
030A 120000      E     LCALL   _DrawAttrCnt
030D 22                RET     
030E         L?0125:
030E 120000      E     LCALL   _DrawAttrCnt
0311 7BFF              MOV     R3,#0FFH
0313 7A00        R     MOV     R2,#HIGH ?SC_75
0315 7900        R     MOV     R1,#LOW ?SC_75
0317 22                RET     
0318         L?0127:
0318 7BFF              MOV     R3,#0FFH
031A 900000      E     MOV     DPTR,#?_WriteStringToAddr?BYTE+05H
031D F0                MOVX    @DPTR,A
031E 7F1A              MOV     R7,#01AH
0320 7E00              MOV     R6,#00H
0322 120000      E     LCALL   _WriteStringToAddr
0325 22                RET     
0326         L?0128:
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 93  

0326 FF                MOV     R7,A
0327 FE                MOV     R6,A
0328 120000      E     LCALL   _DrawAttrCnt
032B 7B08              MOV     R3,#08H
032D 7D32              MOV     R5,#032H
032F 22                RET     
0330         L?0129:
0330 120000      E     LCALL   _DrawAttrCnt
0333 7BFF              MOV     R3,#0FFH
0335 7A00        R     MOV     R2,#HIGH ?SC_73
0337 7900        R     MOV     R1,#LOW ?SC_73
0339 22                RET     
             ; FUNCTION DisplayInput (END)

             ; FUNCTION ClearInput (BEGIN)
                                           ; SOURCE LINE # 863
                                           ; SOURCE LINE # 864
                                           ; SOURCE LINE # 865
0000 E4                CLR     A
0001 FF                MOV     R7,A
0002 120000      E     LCALL   _ShowOSDWindowAll
                                           ; SOURCE LINE # 866
0005 E4                CLR     A
0006 FD                MOV     R5,A
0007 7F02              MOV     R7,#02H
0009 120000      E     LCALL   _ShowOSDWindow_TW88
                                           ; SOURCE LINE # 869
000C 900000      R     MOV     DPTR,#DisplayedOSD
000F E0                MOVX    A,@DPTR
0010 54EF              ANL     A,#0EFH
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 874
0013 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 876
0015 22                RET     
             ; FUNCTION ClearInput (END)

             ; FUNCTION ClearInput2s (BEGIN)
                                           ; SOURCE LINE # 878
                                           ; SOURCE LINE # 879
                                           ; SOURCE LINE # 881
0000 E4                CLR     A
0001 FD                MOV     R5,A
0002 7F02              MOV     R7,#02H
0004 120000      E     LCALL   _ShowOSDWindow_TW88
                                           ; SOURCE LINE # 889
0007 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 890
0009 22                RET     
             ; FUNCTION ClearInput2s (END)

             ; FUNCTION ClearVlossOsd (BEGIN)
                                           ; SOURCE LINE # 892
                                           ; SOURCE LINE # 893
                                           ; SOURCE LINE # 895
0000 E4                CLR     A
0001 FD                MOV     R5,A
0002 7F03              MOV     R7,#03H
0004 120000      E     LCALL   _ShowOSDWindow_TW88
                                           ; SOURCE LINE # 897
0007 7F08              MOV     R7,#08H
0009 120000      R     LCALL   _ClearDisplayedOSD
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 94  

                                           ; SOURCE LINE # 902
000C 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 903
000E 22                RET     
             ; FUNCTION ClearVlossOsd (END)

             ; FUNCTION DisplayVol (BEGIN)
                                           ; SOURCE LINE # 904
                                           ; SOURCE LINE # 905
                                           ; SOURCE LINE # 910
0000 7BFF              MOV     R3,#0FFH
0002 7A00        R     MOV     R2,#HIGH ?SC_77
0004 7900        R     MOV     R1,#LOW ?SC_77
0006 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 913
0009 7DFF              MOV     R5,#0FFH
                                           ; SOURCE LINE # 914
000B 120000      R     LCALL   L?0126
                                           ; SOURCE LINE # 916
000E 7D82              MOV     R5,#082H
                                           ; SOURCE LINE # 917
0010 120000      R     LCALL   L?0126
                                           ; SOURCE LINE # 918
0013 E4                CLR     A
0014 FB                MOV     R3,A
0015 7DFF              MOV     R5,#0FFH
0017 7F8A              MOV     R7,#08AH
0019 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 920
001C 900000      R     MOV     DPTR,#DisplayedOSD
001F E0                MOVX    A,@DPTR
0020 5404              ANL     A,#04H
0022 707C              JNZ     ?C0074
                                           ; SOURCE LINE # 921
                                           ; SOURCE LINE # 922
0024 120000      R     LCALL   ClearOSDInfo
                                           ; SOURCE LINE # 926
0027 7F0A              MOV     R7,#0AH
0029 120000      E     LCALL   _delay
                                           ; SOURCE LINE # 928
002C 7BFF              MOV     R3,#0FFH
002E 7A00        E     MOV     R2,#HIGH Init_Osd_BarWindow
0030 7900        E     MOV     R1,#LOW Init_Osd_BarWindow
0032 120000      E     LCALL   _InitOSDWindow
                                           ; SOURCE LINE # 930
0035 7D32              MOV     R5,#032H
0037 7FC8              MOV     R7,#0C8H
0039 7E00              MOV     R6,#00H
003B 120000      E     LCALL   _ClearDataCnt
                                           ; SOURCE LINE # 931
003E 7B19              MOV     R3,#019H
0040 7D37              MOV     R5,#037H
0042 7FC8              MOV     R7,#0C8H
0044 7E00              MOV     R6,#00H
0046 120000      E     LCALL   _DrawAttrCnt
                                           ; SOURCE LINE # 933
0049 7B19              MOV     R3,#019H
004B 7D73              MOV     R5,#073H
004D 7FDD              MOV     R7,#0DDH
004F 7E00              MOV     R6,#00H
0051 120000      E     LCALL   _DrawAttrCnt
                                           ; SOURCE LINE # 940
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 95  

0054 120000      E     LCALL   GetOSDLang
0057 75F003            MOV     B,#03H
005A EF                MOV     A,R7
005B 900000      E     MOV     DPTR,#StrVolume
005E 120000      E     LCALL   ?C?OFFXADD
0061 120000      E     LCALL   ?C?PLDCODE
0064 AE02              MOV     R6,AR2
0066 AF01              MOV     R7,AR1
0068 900000      R     MOV     DPTR,#Str
006B EE                MOV     A,R6
006C F0                MOVX    @DPTR,A
006D A3                INC     DPTR
006E EF                MOV     A,R7
006F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 942
0070 7BFF              MOV     R3,#0FFH
0072 120000      E     LCALL   _strlen
;---- Variable 'len' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 943
0075 900000      R     MOV     DPTR,#Str
0078 E0                MOVX    A,@DPTR
0079 FC                MOV     R4,A
007A A3                INC     DPTR
007B E0                MOVX    A,@DPTR
007C AA04              MOV     R2,AR4
007E F9                MOV     R1,A
007F 7BFF              MOV     R3,#0FFH
0081 900000      E     MOV     DPTR,#?_WriteStringToAddr?BYTE+05H
0084 EF                MOV     A,R7
0085 F0                MOVX    @DPTR,A
0086 7FC8              MOV     R7,#0C8H
0088 7E00              MOV     R6,#00H
008A 120000      E     LCALL   _WriteStringToAddr
                                           ; SOURCE LINE # 945
008D 7D01              MOV     R5,#01H
008F 7F01              MOV     R7,#01H
0091 120000      E     LCALL   _ShowOSDWindow_TW88
                                           ; SOURCE LINE # 946
0094 E4                CLR     A
0095 FD                MOV     R5,A
0096 7F04              MOV     R7,#04H
0098 120000      E     LCALL   _ShowOSDWindow_TW88
                                           ; SOURCE LINE # 947
009B 7F01              MOV     R7,#01H
009D 120000      E     LCALL   _ShowOSDWindowAll
                                           ; SOURCE LINE # 948
00A0         ?C0074:
                                           ; SOURCE LINE # 950
00A0 300005      E     JNB     VGAAudio,?C0075
                                           ; SOURCE LINE # 951
00A3 900000      E     MOV     DPTR,#PCAudioVol
00A6 8003              SJMP    ?C0108
00A8         ?C0075:
                                           ; SOURCE LINE # 953
00A8 900000      E     MOV     DPTR,#AudioVol
00AB         ?C0108:
00AB E0                MOVX    A,@DPTR
00AC FF                MOV     R7,A
00AD 120000      E     LCALL   _DisplayVolumebar
00B0         ?C0076:
                                           ; SOURCE LINE # 955
00B0 900000      R     MOV     DPTR,#DisplayedOSD
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 96  

00B3 E0                MOVX    A,@DPTR
00B4 4404              ORL     A,#04H
00B6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 956
00B7 120000      E     LCALL   GetTime_ms
00BA 8E00        R     MOV     OSDDisplayedTime,R6
00BC 8F00        R     MOV     OSDDisplayedTime+01H,R7
                                           ; SOURCE LINE # 957
00BE 22                RET     
00BF         L?0126:
00BF 7B01              MOV     R3,#01H
00C1 7F8A              MOV     R7,#08AH
00C3 120000      E     LCALL   _WriteI2C
00C6 7F05              MOV     R7,#05H
00C8 7E00              MOV     R6,#00H
00CA 120000      E     LCALL   _Wait_ms
00CD 22                RET     
             ; FUNCTION DisplayVol (END)

             ; FUNCTION ClearMuteInfo (BEGIN)
                                           ; SOURCE LINE # 1028
                                           ; SOURCE LINE # 1029
                                           ; SOURCE LINE # 1030
0000 E4                CLR     A
0001 FD                MOV     R5,A
0002 7F02              MOV     R7,#02H
0004 120000      E     LCALL   _ShowOSDWindow_TW88
                                           ; SOURCE LINE # 1031
0007 900000      R     MOV     DPTR,#DisplayedOSD
000A E0                MOVX    A,@DPTR
000B 54FE              ANL     A,#0FEH
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1032
000E 22                RET     
             ; FUNCTION ClearMuteInfo (END)

             ; FUNCTION CheckAndClearOSD (BEGIN)
                                           ; SOURCE LINE # 1034
                                           ; SOURCE LINE # 1035
                                           ; SOURCE LINE # 1038
0000 E4                CLR     A
0001 900000      R     MOV     DPTR,#Result
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1040
0005 120000      R     LCALL   GetDisplayedOSD
0008 900000      R     MOV     DPTR,#dt
000B EF                MOV     A,R7
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1041
000D 5496              ANL     A,#096H
000F 7003              JNZ     $ + 5H
0011 020000      R     LJMP    ?C0079
                                           ; SOURCE LINE # 1043
0014 E0                MOVX    A,@DPTR
0015 30E115            JNB     ACC.1,?C0080
                                           ; SOURCE LINE # 1044
0018 120000      E     LCALL   GetOSDLastKeyInTime
001B 900000      R     MOV     DPTR,#stime
001E EE                MOV     A,R6
001F F0                MOVX    @DPTR,A
0020 A3                INC     DPTR
0021 EF                MOV     A,R7
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 97  

0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1045
0023 A3                INC     DPTR
0024 7407              MOV     A,#07H
0026 F0                MOVX    @DPTR,A
0027 A3                INC     DPTR
0028 74D0              MOV     A,#0D0H
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1046
002B 8011              SJMP    ?C0081
002D         ?C0080:
                                           ; SOURCE LINE # 1047
                                           ; SOURCE LINE # 1048
002D 900000      R     MOV     DPTR,#stime
0030 E500        R     MOV     A,OSDDisplayedTime
0032 F0                MOVX    @DPTR,A
0033 A3                INC     DPTR
0034 E500        R     MOV     A,OSDDisplayedTime+01H
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1049
0037 A3                INC     DPTR
0038 E4                CLR     A
0039 F0                MOVX    @DPTR,A
003A A3                INC     DPTR
003B 74C8              MOV     A,#0C8H
003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1050
003E         ?C0081:
                                           ; SOURCE LINE # 1052
003E 120000      E     LCALL   GetTime_ms
;---- Variable 'ctime' assigned to Register 'R4/R5' ----
0041 AD07              MOV     R5,AR7
0043 AC06              MOV     R4,AR6
                                           ; SOURCE LINE # 1054
0045 900000      R     MOV     DPTR,#stime
0048 E0                MOVX    A,@DPTR
0049 FE                MOV     R6,A
004A A3                INC     DPTR
004B E0                MOVX    A,@DPTR
004C FF                MOV     R7,A
004D 120000      E     LCALL   _DiffTime_ms
0050 D3                SETB    C
0051 900000      R     MOV     DPTR,#diff+01H
0054 E0                MOVX    A,@DPTR
0055 9F                SUBB    A,R7
0056 900000      R     MOV     DPTR,#diff
0059 E0                MOVX    A,@DPTR
005A 9E                SUBB    A,R6
005B 503E              JNC     ?C0079
                                           ; SOURCE LINE # 1056
005D 900000      R     MOV     DPTR,#dt
0060 E0                MOVX    A,@DPTR
0061 5484              ANL     A,#084H
0063 600D              JZ      ?C0083
                                           ; SOURCE LINE # 1057
                                           ; SOURCE LINE # 1061
0065 120000      R     LCALL   ClearTVInfo
0068 900000      R     MOV     DPTR,#Result
006B EF                MOV     A,R7
006C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1062
006D 120000      R     LCALL   DisplayInput
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 98  

                                           ; SOURCE LINE # 1065
0070 C200        E     CLR     IsDrawNoVideoSignal
                                           ; SOURCE LINE # 1068
0072         ?C0083:
                                           ; SOURCE LINE # 1070
0072 900000      R     MOV     DPTR,#dt
0075 E0                MOVX    A,@DPTR
0076 30E11F            JNB     ACC.1,?C0084
                                           ; SOURCE LINE # 1071
                                           ; SOURCE LINE # 1075
0079 120000      E     LCALL   CloseOSDMenu
007C 900000      R     MOV     DPTR,#Result
007F EF                MOV     A,R7
0080 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1077
0081 7FA3              MOV     R7,#0A3H
0083 7E00              MOV     R6,#00H
0085 120000      E     LCALL   _ReadEEP
0088 EF                MOV     A,R7
0089 6401              XRL     A,#01H
008B 7006              JNZ     ?C0085
                                           ; SOURCE LINE # 1078
008D 900000      E     MOV     DPTR,#displayhold_flag
0090 7403              MOV     A,#03H
0092 F0                MOVX    @DPTR,A
0093         ?C0085:
                                           ; SOURCE LINE # 1080
0093 120000      R     LCALL   DisplayInput
                                           ; SOURCE LINE # 1082
0096 C200        E     CLR     IsDrawNoVideoSignal
                                           ; SOURCE LINE # 1084
0098         ?C0084:
                                           ; SOURCE LINE # 1095
0098 7F01              MOV     R7,#01H
009A 22                RET     
                                           ; SOURCE LINE # 1096
                                           ; SOURCE LINE # 1097
009B         ?C0079:
                                           ; SOURCE LINE # 1099
009B 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 1100
009D         ?C0086:
009D 22                RET     
             ; FUNCTION CheckAndClearOSD (END)

             ; FUNCTION ClearTVInfo (BEGIN)
                                           ; SOURCE LINE # 1190
                                           ; SOURCE LINE # 1191
                                           ; SOURCE LINE # 1193
0000 900000      R     MOV     DPTR,#DisplayedOSD
0003 E0                MOVX    A,@DPTR
0004 30E20F            JNB     ACC.2,?C0087
                                           ; SOURCE LINE # 1194
                                           ; SOURCE LINE # 1196
0007 E4                CLR     A
0008 FF                MOV     R7,A
0009 120000      E     LCALL   _ShowOSDWindowAll
                                           ; SOURCE LINE # 1198
000C 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 1199
000E 120000      R     LCALL   L?0130
0011 54FB              ANL     A,#0FBH
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 99  

0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1202
0014 8008              SJMP    ?C0088
0016         ?C0087:
                                           ; SOURCE LINE # 1204
                                           ; SOURCE LINE # 1205
0016 7F02              MOV     R7,#02H
                                           ; SOURCE LINE # 1206
0018 120000      R     LCALL   L?0130
001B 547F              ANL     A,#07FH
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1207
001E         ?C0088:
                                           ; SOURCE LINE # 1209
001E 120000      E     LCALL   CheckMirror
                                           ; SOURCE LINE # 1211
0021 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 1212
0023 22                RET     
0024         L?0130:
0024 E4                CLR     A
0025 FD                MOV     R5,A
0026 120000      E     LCALL   _ShowOSDWindow_TW88
0029 900000      R     MOV     DPTR,#DisplayedOSD
002C E0                MOVX    A,@DPTR
002D 22                RET     
             ; FUNCTION ClearTVInfo (END)

C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 100 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


TW8806String . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    005EH  13
DWORD. . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
ClearGAUGEINFO . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CAM_R. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_ShowOSDWindow_TW88. . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
TriggerModeType. . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
CAM_BAR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ABR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_CAR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ACR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_CBR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_BCR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
DisplayedOSD . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0000H  1
DisplayVol . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  Str. . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0000H  2
  len. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
NumberStringType . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  11
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  width. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  BackColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  Radix. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  NumColor . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  MaxLen . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  PrePostCharLen . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  PrePostChar. . . . . . . . . . . . .  MEMBER   -----  ARRAY    0008H  3
GetOSDLang . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_ClearDataCnt. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_DisplayVolumebar. . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Init_Osd_BarWindow . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
_delay . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
FontData . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  27
  font . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  27
GetOSDLastKeyInTime. . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
ClearMuteInfo. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
RIGHT_TRIG . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
LAST_TRIG_NON. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
mirror_flag. . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0001H  1
_strlen. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
OSDDisplayedTime . . . . . . . . . . .  STATIC   DATA   U_INT    0000H  2
NORMALL_MODE . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
AVMode . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
displayhold_flag . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
SourceModeType . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
_ShowOSDWindowAll. . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CAM_NUM. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
ClearTVInfo. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
ClearInput2s . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
InfoAutoDayNight_Night . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
AudioVol . . . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
InfoNoVideoSignal. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
ClearVlossOsd. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
CAMC_TRIG. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
LAST_TRIG_RIGHT. . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
GetDisplayedOSD. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
CAM_RAB_H. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
OSDStrInfo . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  8
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 101 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  cnt. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  addr . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  attr . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  str. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0004H  4
CAM_BA . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_AB . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
BYTE . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
TimeType . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  7
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  width. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  BackColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  Format . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  TimeColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  CursorColor. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
CAM_CA . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_AC . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
StrVolume. . . . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
vloss_flag . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0002H  1
REVERSE_TRIG . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_BC . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_CB . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
TechwellString . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    006BH  13
SourceModeTypeEnum . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
_SetDisplayedOSD . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  newd . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
struct_IdName. . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  17
  Id . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  Name . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0001H  16
PCAudioVol . . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
EnumType . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  17
  Sz . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  ByLang . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  Str. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0002H  15
MenuType . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  4
  width. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  height . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  TitleColor . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  CursorColor. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
CAM_RAB_T. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_ReadI2C . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CAM_RAC_T. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
WORD . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
CAM_RBC_T. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
NowModeState . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
LAST_TRIG_CAMC . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
InfoAutoDayNight_Auto. . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
LEFT_TRIG. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_AR . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_BR . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_RB . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
PARK_TRIG. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_CR . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
InfoAutoDayNight_Day . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CheckAndClearOSD . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ctime. . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
  stime. . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 102 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  diff . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0002H  2
  dt . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0004H  1
  Result . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0005H  1
Register . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
_WriteStringToAddr . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_WriteI2C. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
LAST_TRIG_REVERSE. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_DiffTime_ms . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
VGAAudio . . . . . . . . . . . . . . .  EXTERN   DATA   BIT      -----  1
TriggerFlag. . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
_DrawAttrCnt . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
No_TRIG. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
NumType. . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  5
  PrePostCharLen . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  PrePostChar. . . . . . . . . . . . .  MEMBER   -----  ARRAY    0001H  4
_Wait_ms . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
vloss_buf. . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0003H  1
_ReadEEP . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
RegisterInfo . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  Min. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0000H  2
  Max. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0002H  2
  Default. . . . . . . . . . . . . . .  MEMBER   -----  INT      0004H  2
LAST_TRIG_LEFT . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_PCMDATA . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  22
  Support. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  HAN. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  VAN. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0003H  2
  IVF. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0005H  2
  CLOCK. . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0007H  2
  low. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0009H  2
  high . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000BH  2
  Hstart . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000DH  2
  Vstart . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000FH  2
  IPF. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0011H  2
  PPF. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0013H  2
  VBack. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0015H  1
VlossHandler . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  Str_VLOSS. . . . . . . . . . . . . .  STATIC   CODE   ARRAY    0078H  6
  Str_VLOSS_M. . . . . . . . . . . . .  STATIC   CODE   ARRAY    007EH  10
CAM_QUAD . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CheckMirror. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
ClearOSDInfo . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  dt . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
InfoOSDMENULOCKED. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
GetInputSelection. . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
SEQFlag. . . . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
DefineMenu . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  16
  Icon . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0000H  2
  Desc . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0002H  3
  PreFnId. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  PostFnId . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  IconColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  DescColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
  Child. . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0009H  2
  Type . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000BH  1
  ActiveWithCursor . . . . . . . . . .  MEMBER   -----  U_CHAR   000CH  1
  Id . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000DH  1
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 103 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  TypeData . . . . . . . . . . . . . .  MEMBER   -----  PTR      000EH  2
TRIGGER_NUM. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
IsDrawNoVideoSignal. . . . . . . . . .  EXTERN   DATA   BIT      -----  1
DisplayInformation . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
SEQ. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
InfoOSDMENUATCIVE. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
LongRegisterInfo . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  Min. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  Max. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  Default. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
Init_Osd_DisplayInput. . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
DisplayInput . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  inputs . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  len1 . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  SystemAddr . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
  Str_CAM_A. . . . . . . . . . . . . .  STATIC   CODE   ARRAY    0088H  9
  Str_CAM_B. . . . . . . . . . . . . .  STATIC   CODE   ARRAY    0091H  10
  Str_CAM_R. . . . . . . . . . . . . .  STATIC   CODE   ARRAY    009BH  10
  Str_AV . . . . . . . . . . . . . . .  STATIC   CODE   ARRAY    00A5H  10
  Str_CAM_Mirror_A . . . . . . . . . .  STATIC   CODE   ARRAY    00AFH  13
  Str_CAM_Mirror_B . . . . . . . . . .  STATIC   CODE   ARRAY    00BCH  15
  Str_CAM_Mirror_R . . . . . . . . . .  STATIC   CODE   ARRAY    00CBH  16
  Str_Mirror_J . . . . . . . . . . . .  STATIC   CODE   ARRAY    00DBH  4
  Str_Mirror_S . . . . . . . . . . . .  STATIC   CODE   ARRAY    00DFH  4
PictureInfo. . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  4
  Register_Addr. . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  EEPROM_Addr. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  Control_Range. . . . . . . . . . . .  MEMBER   -----  PTR      0002H  2
CAM_RAC_T2 . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ABR_T3 . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_RBC_T2 . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ABR_T4 . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_A. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_B. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
InfoPLZRESETSYSTEM . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
GetTime_ms . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CAM_C. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_Printf. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
VGA_TRIG . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_ClearDisplayedOSD . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  newd . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
CloseOSDMenu . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CAM_CAB. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_BAC. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ABC. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_InitOSDWindow . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
AWT_LAST_TRIGGER . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
struct_InputSelection_S. . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
ClearInput . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1500    ----
   CONSTANT SIZE    =    227    ----
   XDATA SIZE       =      4      12
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2    ----
C51 COMPILER V9.60.0.0   DISPINFO                                                          06/22/2022 16:23:01 PAGE 104 

   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
