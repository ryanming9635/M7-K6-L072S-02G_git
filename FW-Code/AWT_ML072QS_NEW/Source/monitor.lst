C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MONITOR
OBJECT MODULE PLACED IN .\Output\monitor.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE monitor.c LARGE OPTIMIZE(9,SIZE) BROWSE INCDIR(.\Include\) DEBUG OBJECTE
                    -XTEND CODE LISTINCLUDE SYMBOLS PRINT(.\Source\monitor.lst) TABS(2) OBJECT(.\Output\monitor.obj)

line level    source

   1          /* Monitor.c */
   2          
   3          #include "config.h"
   1      =1  /*****************************************************************************/
   2      =1  /*                           System Configurations                           */
   3      =1  /*              rev 0.10 include auto test             */
   4      =1  // 0.11 change DTV, PC input initial download data correct for Charge Pump
   5      =1  // 0.12 correct phase measurement routine '>>3'
   6      =1  // 0.13 enable function for SPI control... only EXT MCU case
   7      =1  // 0.14 corrected PC measurement......
   8      =1  // 0.0a test function only for CVBS, SVIDEO
   9      =1  // 0.15 corrected DTV scaler setting for panel resolutions
  10      =1  // 0.0b panel for AND 640x480 TICON panel
  11      =1  // 0.16 corrected COMPONENT scaler setting for panel resolutions  11/21/2007
  12      =1  // 0.0c automatic chip test
  13      =1  // 0.17 add monitor function, osd grid for writing grid
  14      =1  // 0.18 add component, dtv pc for analogpanel, 12/06/2007
  15      =1  // 0.19 correct pal input for CES, 12/20/2007
  16      =1  // 0.1a CCFL control, 12/28/2007
  17      =1  // 0.19 Multi Grid for Banking on Internal MCU  01/17/2008
  18      =1  // 0.20 CCFL contol for backlight brightness  01/21/2008
  19      =1  // 0.21 CCFL contol for backlight brightness  01/25/2008
  20      =1  // 0.22 phase setting 02/07/2008
  21      =1  // 0.221 display input correction 04/03/2008
  22      =1  // 0.23 PC, DTV mode, no signal display
  23      =1  // 0.24 PC Auto Color adjustment
  24      =1  // 0.25 revised PC Auto Clock adjustment - find divide number and phase
  25      =1  // 0.26 Digital RGB for TW8826
  26      =1  // 0.27 Correct LVDS control          08/22/2008
  27      =1  // 0.28 Add WSVGA resolution          10/23/2008
  28      =1  // 0.29 Add NEW GRID              11/14/2008
  29      =1  // 0.30 Fix DTV input             12/10/2008
  30      =1  // 0.31 Add 1080i23, 24, 25A, 25B       01/20/2009
  31      =1  // 0.32 TCON setting FIX all mode       01/22/2009
  32      =1  // 0.33 autodetect is auto on/off by dip sw1  02/02/2009
  33      =1  // 0.34 Fix autocolor function and clamp position 02/08/2009
  34      =1  /*****************************************************************************/
  35      =1  #ifndef __CONFIG_H__
  36      =1  #define __CONFIG_H__
  37      =1  
  38      =1  //#define INTERNAL_MCU -- defined by Project Compiler session
  39      =1  #define   HS        
  40      =1  //#define   E_Wintek  
  41      =1  //#define   AWT 
  42      =1  //#define Holtz
  43      =1  
  44      =1  //#define QUAD
  45      =1  
  46      =1  #ifdef QUAD
           =1   #define AWT_ML072Q  //Pinchi 20150827 disable for HTRV
           =1 //  #define HTRV  //Pinchi 20140902 disable for AWT ML072Q
           =1 #else
  50      =1    #define AWT_ML072S
  51      =1  #endif
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 2   

  52      =1  
  53      =1  //--------------------------------------------------
  54      =1  //              Common Feature Define
  55      =1  //--------------------------------------------------
  56      =1  //#define FIRST_RUN_FROM_AC  //Pinchi 20150831 disable for Screen re-setting by Set4WideScreen()  //Pinchi
             - 20141029 add
  57      =1  #define SUPPORT_ML072Q_AUTO_DAY_NIGHT  //Pinchi 20150825 add for function define
  58      =1  #define SUPPORT_TRIGGER_EXIT_MENU  //Pinchi 20150827 add for exit OSD Menu by CAM trigger
  59      =1  #define SUPPORT_AC_ON_NORMAL_SCREEN  //Pinchi 20150901 add to set 4:3 screen when AC on
  60      =1  
  61      =1  #define FIX_DISPLAY_OFF_TRIGGER_ISSUE  //Pinchi 20150908 add to fix [Display] set OFF and trigger release 
             -then trigger again during display info the CAM will change from trigger CH to original CH
  62      =1  #define FIX_EXIT_STANDBY_NO_AUDIO  //Pinchi 20150908 add to fix no audio output when exit Standby mode
  63      =1  #ifdef AWT_ML072Q
           =1 #define FIX_2835_SCREEN_NOISE  //Pinchi 20160929 add to fix the screen noise of TW2835 by change DDR to ma
             -ke clock shift
           =1 #endif
  66      =1  
  67      =1  #define SUPPORT_NEW_TRIGGER_FUNCTION  /////修改新的Trigger方式減少trigger polling 時間 add by ryan@2018012
             -4
  68      =1  
  69      =1  //#define AWT_ML072QS_MSG  //Pinchi 20140925 add
  70      =1  //#define REDUCE_DELAY_TIME  //Pinchi 20141029 add
  71      =1  //#define DISPLAY_TECHWELL_LOGO  //Pinchi 2050903 add to disable the Techwell logo
  72      =1  
  73      =1  //#define SUPPORT_SVIDEO                     //andy Awt 20090914
  74      =1  //#define SUPPORT_COMPONENT     // support component analog to decoder//andy Awt 20090914
  75      =1  //#define SUPPORT_DTV           // support DTV input through component( to ADC ).//andy Awt 20090914
  76      =1  //#define SUPPORT_PC        // support PC function
  77      =1  //#define SUPPORT_DVI       // support DVI input
  78      =1  //#define SUPPORT_SDCARD
  79      =1  
  80      =1  #define SUPPORT_2835_CLK_TUNE_BACK_DOOR  //Pinchi 20160913 add to fine tune TW2835 clock by hot key
  81      =1  //#define SUPPORT_DISPLAY_TEST_VERSION  //Pinchi 20150929 add to display test software version on OSD
  82      =1  
  83      =1  //--------------------------------------------------
  84      =1  //              Model Feature Define
  85      =1  //--------------------------------------------------
  86      =1  #if (defined AWT_ML072Q) || (defined AWT_ML072S)
  87      =1  #define AWT_ML072QS_FW_RULE  //Pinchi 20140902 add
  88      =1  //#define AWT_NEW_SLIM_MODEL  //Pinchi 20150203 add for AWT new slim model
  89      =1  #define AWT_NO_SIGNAL_MSG  //Pinchi 20150319 add for display "NO VIDEO SIGNAL" by AWT request of 20150302
  90      =1  #define AWT_TW2835_DRAW_T_ICON  //Pinchi 20150415 add to draw T icon by TW2835 when CAM C trigger
  91      =1  #define SUPPORT_AC_ON_REDUCE_TIME  //Pinchi 20150903 add to reduce Power time when AC on
  92      =1  
  93      =1  //#define SUPPORT_TRIGGER_RELEASE_DELAY  //Pinchi 20150908 add to support delay time when CAM trigger rele
             -ase
  94      =1  
  95      =1  typedef enum  //Pinchi 20150326 add
  96      =1  {
  97      =1       LAST_TRIG_NON =  0x00,
  98      =1       LAST_TRIG_LEFT =   0x01,
  99      =1       LAST_TRIG_RIGHT =  0x02,
 100      =1       LAST_TRIG_REVERSE =0x03,
 101      =1       LAST_TRIG_CAMC =   0x04,
 102      =1  
 103      =1  } AWT_LAST_TRIGGER;
 104      =1  
 105      =1  #endif
 106      =1  
 107      =1  
 108      =1  #ifdef HTRV  //Pinchi 20150825 add
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 3   

           =1 #define HTRV_ML072Q_FW_RULE  //Pinchi 20150827 add
           =1 #define HTRV_REDUCE_SCREEN_CHANGE  //Pinchi 20150828 add to reduce screen double change
           =1 
           =1 #if 0  //Pinchi 20151209 add to remove 4:3 screen by HTRV request of 20151209
           =1 #define HTRV_SUPPORT_4_3_SCREEN
           =1 #else
           =1 #undef SUPPORT_AC_ON_NORMAL_SCREEN  //Pinchi 20151210 add
           =1 #endif
           =1 
           =1 #endif
 119      =1  
 120      =1  //#define SUPPORT_RS485
 121      =1  //-----------------------------------------------------------------------------
 122      =1  //    Firmware Version
 123      =1  //-----------------------------------------------------------------------------
 124      =1  #ifdef HTRV  //Pinchi 20150907 add
           =1 //#define FWVER     0x200 // Rev 2.00
           =1 //#define FWVER     0x210   // Rev 2.1  //Pinchi 20151209 update version for HTRV request to remove 4:3 scree
             -n
           =1 //#define FWVER     0x220   // Rev 2.2  //Pinchi 20160929 change for V2.2
           =1 #define FWVER     0x230     //Rev 2.3    ryan@20170727 update version by Encoder switches零件 EOL更換
           =1 #else
 130      =1  #define FWVER     0x210   // Rev 0.14
 131      =1  #endif
 132      =1  
 133      =1  //-----------------------------------------------------------------------------
 134      =1  //    Compiler
 135      =1  //-----------------------------------------------------------------------------
 136      =1  #define KEILC           // Keil C 5.0
 137      =1  //-----------------------------------------------------------------------------
 138      =1  //    MPU Clock
 139      =1  //-----------------------------------------------------------------------------
 140      =1  #ifndef INTERNAL_MCU
 141      =1  //#define CLOCK_11M         // 11.0592MHz
 142      =1  #define CLOCK_22M         // 22.1184MHz
 143      =1  #else                 // INTERNAL_MCU
           =1 #define CLOCK_27M         // 27MHz
           =1 #define REG_START_ADDRESS 0xc000    // register start 0xc000, for page0, 0xc100-page1 
           =1 #endif
 147      =1  //-----------------------------------------------------------------------------
 148      =1  //    TW88 Version
 149      =1  //-----------------------------------------------------------------------------
 150      =1  #define TW8816   ///AWT TW8806 change to TW8816 platform //ryan@20170921
 151      =1  //-----------------------------------------------------------------------------
 152      =1  //-----------------------------------------------------------------------------
 153      =1  //    Options for Backlight control
 154      =1  //-----------------------------------------------------------------------------
 155      =1  //#define BACKLIGHT_CCFL
 156      =1  //#define BACKLIGHT_LED
 157      =1  #define BACKLIGHT_PWM
 158      =1  
 159      =1  //-----------------------------------------------------------------------------
 160      =1  //    Panel Resolution
 161      =1  //-----------------------------------------------------------------------------
 162      =1  // ---- Select Default Panel
 163      =1  //
 164      =1  //#define UXGA            // 1600 x 1200
 165      =1  //#define SXGA              // 1280 x 1024
 166      =1  //#define XGA  // 1024 x 768
 167      =1  #ifdef XGA
           =1   #define LVDS          
           =1   #define PWIDTH  1024
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 4   

           =1   #define PHEIGHT 768
           =1 #endif
 172      =1  //#define SVGA            //  800 x 600
 173      =1  //#define VGA             //  640 x 480
 174      =1  #ifdef VGA
           =1   #define PWIDTH  640
           =1   #define PHEIGHT 480
           =1   //#define HITACHI_640_B_160   //--> 640 x 160
           =1   #define AND_640_480
           =1 #endif
 180      =1  //#define WXGA            // 1280 x 768 (15:9) // 1366 x 768 (16:9)
 181      =1  #ifdef WXGA
           =1     //#define WX_SHARP_LQ106K1LA
           =1   #define PWIDTH  1280
           =1   #define PHEIGHT 768
           =1 #endif
 186      =1  //#define WSVGA           // 1024 x 600 *** only video mode
 187      =1  #ifdef WSVGA
           =1   #define PWIDTH  1024
           =1   #define PHEIGHT 600
           =1   #define UNIDEN_1024_600
           =1 #endif
 192      =1  #define WVGA            //  800 x 480
 193      =1  #ifdef WVGA
 194      =1    #define PWIDTH  800
 195      =1    #define PHEIGHT 480//600
 196      =1    // If WVGA, you have to select panel.
 197      =1    //#define AU_10INCH
 198      =1    //#define WVGA_TPO
 199      =1    //#define SAMSUNG_10INCH
 200      =1    //#define SAMSUNG_TICONLESS_10INCH
 201      =1    //#define SHARP_TICONLESS_7INCH
 202      =1    //#define AU_TICONLESS_7INCH
 203      =1    //#define AU_G084SN05V8_8_4INCH 
 204      =1    #define HSD070IDW1_7INCH
 205      =1    //#define INNOLUX_AT080TN03
 206      =1    //#define AU_TICONLESS_7INCH_CCFL
 207      =1    //#define CMO     // CHIMEI panel
 208      =1    //#define AU_TICONLESS_10INCH
 209      =1    //#define HITACHI_T01
 210      =1    //#define HITACHI_TX23D12
 211      =1    //#define HITACHI_TX18D24
 212      =1    //#define HITACHI_TX18D16
 213      =1    //#define TMD_LTA070A320F
 214      =1    //#define TMD_LTA080B
 215      =1  #endif  //WVGA
 216      =1  //#define HVGA            //  480 x 320
 217      =1  //#define QVGA            //  320 x 240 *** only video mode
 218      =1  #ifdef QVGA
           =1   #define PWIDTH  320
           =1   #define PHEIGHT 240
           =1   //#define HITACHI_TX09D73
           =1   //#define AU_DELTARGB
           =1   //#define SHARP_LQ050Q5DR01
           =1   //#define SHARP_LQ035
           =1   //#define TMD
           =1 #endif
 227      =1  
 228      =1  //#define WQVGA           //  480 x 234 *** only video mode
 229      =1  #ifdef WQVGA
           =1   #define PWIDTH  480
           =1   #define PHEIGHT 240
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 5   

           =1   // If WQVGA, you have to select panel 
           =1     #define ANALOG_7INCH
           =1   //#define PWIDTH  400
           =1   //#define PHEIGHT 240
           =1   //#define SHARP_LQ043T3DX02   //  400 x 237
           =1   //#define LG_ANALOG
           =1   //#define TMD_ANALOG        //TMD_LTA05B352A
           =1   //#define T_51945GD       // Optorex Panel
           =1 #endif  // WQVGA
 241      =1  
 242      =1  //if LVDS pannel disable TICONLESS
 243      =1  
 244      =1  //-----------------------------------------------------------------------------
 245      =1  //---- Add Support One more panel with DIPSW#1
 246      =1  //---- Ex. Add Analog AU 7" Panel with Default Panel for evalution
 247      =1  //#define ADD_ANALOGPANEL   // Added Analog panel(AU7") from default set panel(expect WQVGA) with DIP #1 sw
             -itch.(DIP#1=L:ANALOG, H:DEFAULT)
 248      =1                // It can't support WQVGA and ADD_ANALOGPANEL same time!!
 249      =1    //#define ADD_ANALOG_7INCH
 250      =1    //#define ADD_TMD_LTA05B352A
 251      =1                    
 252      =1  //---- Support Wide panel function
 253      =1  #if (defined WXGA) || (defined WSVGA) || (defined WVGA) || (defined WQVGA)
 254      =1  #if 0///ryan@20180115//mask for NTSC sharpness issue
           =1 #define WIDE_SCREEN         // Can support 4 display mode, i.e. Normal, Wide, Full, Zoom
           =1 #endif
 257      =1  #endif                // Tested panasonic WVGA panel.
 258      =1  
 259      =1  //-----------------------------------------------------------------------------
 260      =1  //    Panel Vendor Specific
 261      =1  //-----------------------------------------------------------------------------
 262      =1  
 263      =1  //-----------------------------------------------------------------------------
 264      =1  //    TV Tuner
 265      =1  //-----------------------------------------------------------------------------
 266      =1  #define PHILIPS       0
 267      =1  #define ALPS        1   // ALPS, LG
 268      =1  #define TEMIC       2
 269      =1  #define TVAVA       3
 270      =1  #define LGTUNER       4
 271      =1  #define SAMSUNGMUTITUNER  5
 272      =1  
 273      =1  #define TVTunerDevice   4
 274      =1  //-----------------------------------------------------------------------------
 275      =1  //    IR Remote Controller Type
 276      =1  //-----------------------------------------------------------------------------
 277      =1  //#define REMO_RC5          // RC5 style
 278      =1  #define TECHWELL_REMOCON
 279      =1  //#define REMO_NEC          // NEC style
 280      =1  //#define PHILIPS_REMOCON // New remocon 
 281      =1  
 282      =1  //-----------------------------------------------------------------------------
 283      =1  //    I2C Device Access Address Mapping
 284      =1  //-----------------------------------------------------------------------------
 285      =1  
 286      =1  #define EEPROMI2CAddress  0xa0  // EEPROM (24C16)
 287      =1  #define TW88I2CAddress    0x8a  // TW880x
 288      =1  
 289      =1  #define MSPI2CAddress   0x80  // MSP
 290      =1  #define ALC106I2CAddress  0x4A  // MSP
 291      =1  //-----------------------------------------------------------------------------
 292      =1  //    Options for Possible Inputs
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 6   

 293      =1  //-----------------------------------------------------------------------------
 294      =1  
 295      =1  
 296      =1  //-----------------------------------------------------------------------------
 297      =1  //    Options for Possible Standards
 298      =1  //    Default:NTSC
 299      =1  //-----------------------------------------------------------------------------
 300      =1  #define SUPPORT_PAL     
 301      =1  #define SUPPORT_SECAM
 302      =1  #define SUPPORT_NTSC4   
 303      =1  #define SUPPORT_PALM  
 304      =1  #define SUPPORT_PALN    
 305      =1  #define SUPPORT_PAL60   
 306      =1  
 307      =1  //#define ID_CHECK_BY_FW        // in Video mode, check input system ID by firmware
 308      =1  
 309      =1  //-----------------------------------------------------------------------------
 310      =1  //    Options for Debugging/Release
 311      =1  //-----------------------------------------------------------------------------
 312      =1  //#define SUPPORT_PATTERN       // support LCD test pattern
 313      =1  
 314      =1  #ifndef WQVGA
 315      =1    #ifndef QVGA
 316      =1  #define SUPPORT_OSDPOSITIONMOVE
 317      =1    #endif
 318      =1  #endif
 319      =1  
 320      =1  #define SERIAL              // include serial communication routines
 321      =1  
 322      =1  //#define SUPPORT_DEBUG       // Support to use Read & Write in debug OSD Window by remocon.
 323      =1  
 324      =1  //#define DEBUG           // include debug information
 325      =1  #ifdef DEBUG
           =1   //#define DEBUG_MAIN
           =1   //#define DEBUG_TIME
           =1   //#define DEBUG_KEYREMO
           =1   //#define DEBUG_TW88
           =1   //#define DEBUG_DECODER
           =1   //#define DEBUG_I2C
           =1   //#define DEBUG_EEP
           =1   //#define DEBUG_OSD
           =1   //#define DEBUG_AUDIO
           =1   //#define DEBUG_SETPANEL
           =1   //#define DEBUG_DTV
           =1 //  #define DEBUG_PC
           =1   //#define DEBUG_PC_MEAS
           =1   //#define DEBUG_PC_COLOR
           =1   //#define DEBUG_COMPONENT
           =1   //#define DEBUG_BANK
           =1   //#define DEBUG_PAUSE
           =1   //#define DEBUG_MCU
           =1 #endif
 345      =1  
 346      =1  #define AUTOCALC_PC         // in PC mode, Enable Auto Calcuration
 347      =1  //#define SUPPORT_USERCOLORFROMTXT  // Use color setting of text file in Color mode=USER MODE which is as B
             -rightness(Reg10), Contast(Reg11),
 348      =1                    //    Sat_U(Reg13),Sat_V(Reg14),Sharpness(Reg12,Reg78)                  
 349      =1  //#define SUPPORT_GAMMA
 350      =1  
 351      =1  //#define CHIP_MANUAL_TEST      // DIPSW#1
 352      =1  
 353      =1  #ifndef INTERNAL_MCU
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 7   

 354      =1  //#define NO_INITIALIZE       // After Power switch turn on with DIP SW4 Enable(Low), or pressed MENU button 
             -for internal MCU
 355      =1                                      //     micom works to access only I2C bus by serial command.
 356      =1  #endif
 357      =1  
 358      =1  //#define SUPPORT_KRS_OSDDEMO   // For KRS Company Demo 
 359      =1  //#define SUPPORT_LINE_OSDDEMO
 360      =1  
 361      =1  //-----------------------------------------------------------------------------
 362      =1  //    Special Features
 363      =1  //-----------------------------------------------------------------------------
 364      =1  
 365      =1  #ifndef INTERNAL_MCU
 366      =1  //#define SUPPORT_DELTA_RGB
 367      =1  #endif
 368      =1  #define SUPPORT_SELECTKEY     // choose the keymap of using select key or left,right key.
 369      =1  //-----------------------------------------------------------------------------
 370      =1  
 371      =1  //#define HS_NEWOSDMENU     //Weylis -@121008 for Hor. Style OSD
 372      =1  //#define HS_NEWOSDMENU_2     //Weylis -@121008 for Hor. Style OSD(2 line)
 373      =1  
 374      =1  #endif  //__CONFIG_H__
 375      =1  
   4          
   5          #ifdef SERIAL
   6          
   7          #include "typedefs.h"
   1      =1  #ifndef __TYPEDEFS__
   2      =1  #define __TYPEDEFS__
   3      =1  
   4      =1  
   5      =1  #define DATA    data
   6      =1  #define PDATA   pdata
   7      =1  #define IDATA   data
   8      =1  #define CODE    code
   9      =1  #define CODE_P
  10      =1  #define PDATA_P
  11      =1  #define IDATA_P
  12      =1  #define DATA_P
  13      =1  
  14      =1  #define INTERRUPT( num, name ) name() interrupt num
  15      =1  
  16      =1  #define _between(x, a, b) (a<=x && x<=b)
  17      =1  #define _swap(a, b)     { a^=b; b^=a; a^=b; }
  18      =1  
  19      =1  typedef unsigned char Register;
  20      =1  typedef unsigned char BYTE;
  21      =1  typedef unsigned short  WORD;
  22      =1  typedef unsigned long DWORD;
  23      =1  
  24      =1  #define TRUE  1
  25      =1  #define FALSE 0
  26      =1  
  27      =1  //VInputStdDetectMode
  28      =1  #define AUTO  0
  29      =1  
  30      =1  //VInputStd
  31      =1  #define NTSC  1     
  32      =1  #define PAL   2
  33      =1  #define SECAM 3
  34      =1  #define NTSC4 4
  35      =1  #define PALM  5
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 8   

  36      =1  #define PALN  6
  37      =1  #define PAL60 7
  38      =1  
  39      =1  #define MAXINPUTSTD PAL60+1 // 
  40      =1  
  41      =1  #define UNKNOWN 0xfe
  42      =1  #define NOINPUT 0 //0xff
  43      =1  
  44      =1  #define NIL     0xff
  45      =1  
  46      =1  enum SourceModeTypeEnum
  47      =1  { 
  48      =1    AVMode,      // 0   0X00
  49      =1    //VGAMode,       // 1
  50      =1  #ifdef USE_CAMD 
           =1   CAM_D,         // 2
           =1 #endif
  53      =1    CAM_A,         // 3   0x01
  54      =1    CAM_B,         // 4   0x02
  55      =1    CAM_C,         // 5   0x03
  56      =1    CAM_R,         // 6   0x04
  57      =1    CAM_AB,        // 7   0x05
  58      =1    CAM_CR,        // 8   0x06
  59      =1    CAM_AR,        // 9   0x07
  60      =1    CAM_RB,        // 10    0x08
  61      =1    CAM_AC,        // 11    0x09
  62      =1    CAM_CB,        // 12    0x0a
  63      =1    CAM_RAB_T,     // 13    0x0b
  64      =1    CAM_RAB_H,     // 14    0x0c
  65      =1  
  66      =1    #ifdef HTRV
           =1   CAM_RC,
           =1   #endif
  69      =1    
  70      =1    CAM_QUAD,      // 15    0x0d
  71      =1    CAM_ABR_T3,    // 16    0x0e
  72      =1    CAM_ABR_T4,    // 17    0x0f
  73      =1    CAM_RAC_T,      //  0x10
  74      =1    CAM_RBC_T,      //  0x11
  75      =1    CAM_RAC_T2,     //  0x12
  76      =1    CAM_RBC_T2,     //  0x13
  77      =1    CAM_BA,       //  0x14
  78      =1    CAM_BC,       //  0x15
  79      =1    CAM_BR,       //  0x16
  80      =1    CAM_CA,       //  0x17
  81      =1    CAM_ABC,      //  0x18
  82      =1    CAM_ABR,      //  0x19
  83      =1    CAM_ACR,      //  0x1a
  84      =1    CAM_BAC,      //  0x1b
  85      =1    CAM_BAR,      //  0x1c
  86      =1    CAM_BCR,      //  0x1d
  87      =1    CAM_CAB,      //  0x1e
  88      =1    CAM_CAR,      //  0x1f
  89      =1    CAM_CBR,      //  0x20
  90      =1    SEQ,           // 18      0x10
  91      =1    CAM_NUM
  92      =1  };
  93      =1  
  94      =1  typedef unsigned char SourceModeType;
  95      =1  
  96      =1  #endif  /* __TYPEDEFS__ */
  97      =1  
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 9   

   8          #include "main.h"
   1      =1  #ifndef __MAIN__
   2      =1  #define __MAIN__
   3      =1  
   4      =1  #define ON          1
   5      =1  #define OFF         0
   6      =1  #if 1//ryan@20171214
   7      =1  #define Hs_debug
   8      =1  #define Monitor_debug  
   9      =1  //#define Trigger_debug 
  10      =1  #endif
  11      =1  
  12      =1  
  13      =1  //#define DVR
  14      =1  #define Format_SDCard
  15      =1  #define BJTSwitch
  16      =1  
  17      =1  #define Panel_Enable()    P4=P4|0x08 //andy 980908
  18      =1  #define Panel_Disable()   P4=P4&0xf7
  19      =1  
  20      =1  #if 0
           =1 #define SetBacklight()      P4=P4|0x04
           =1 #define clrBacklight()      P4=P4&0xfb
           =1 #else
  24      =1  #define SetBacklight()    P4=P4&0xfb
  25      =1  #define clrBacklight()    P4=P4|0x04
  26      =1  #endif
  27      =1  
  28      =1  //InputSelection
  29      =1  struct struct_IdName {
  30      =1    BYTE  Id;
  31      =1    BYTE  Name[16];
  32      =1  };
  33      =1  
  34      =1  #define CH_TW2835       1
  35      =1  #define CH_CAMD       2
  36      =1  #define CH_AV         3
  37      =1  #define PC          7
  38      =1  #define ChineseDefaultMenu  8
  39      =1  
  40      =1  #define SVIDEO        2
  41      =1  #define COMPONENT     3
  42      =1  //#define ANALOGDTV     4
  43      =1  #define DTV         4
  44      =1  #define TV          5
  45      =1  #define SCART       6
  46      =1  
  47      =1  #ifdef HS
  48      =1  #define CH_CAMB         4
  49      =1  #endif
  50      =1  
  51      =1  #define DIGITALVGA      8
  52      =1  
  53      =1  #define AIRTV       0 //9
  54      =1  #define CABLETV       1 //0xa
  55      =1  
  56      =1  #define TVTUNER       0xd   //10
  57      =1  #define MUTE        1 
  58      =1  #define MENU        2 
  59      =1  #define TVVOL       4 
  60      =1  #ifdef AWT_ML072S
  61      =1  #define VLOSSINFO     8 
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 10  

  62      =1  #else
           =1 #define CC          8 
           =1 #endif
  65      =1  #define INPUTINFO     0x10
  66      =1  #define PCINFO        0x20
  67      =1  #define GAUGEINFO       0x40
  68      =1  //#define RATINGINFO      0x40
  69      =1  #define TVCHN       0x80
  70      =1  //#define MUTE        0x40
  71      =1  
  72      =1  #define YPBPR_480i      0
  73      =1  #define YPBPR_576i      1
  74      =1  #define YPBPR_480p      2
  75      =1  #define YPBPR_576p      3
  76      =1  #define YPBPR_1080i     4
  77      =1  #define YPBPR_720p      5
  78      =1  #define YPBPR_720p50    6
  79      =1  
  80      =1  //---------------------- Feature Define ----------------------------
  81      =1  #ifdef AWT_ML072Q
           =1 
           =1 //mask by ryan@20171018   #define AWT_ML720Q_NEW_TRIGGER_FUN    //Pinchi 20141031 add for AWT request each t
             -rigger can work by PRIORITY OFF
           =1 #define AWT_ADD_TRIGGER_DELAY_FUN 
           =1 #define AWT_SUPPORT_4_3_SCREEN    //ryan@20170907 
           =1 #endif
  87      =1  
  88      =1  #ifdef AWT_ML072S
  89      =1  #define AWT_ADD_TRIGGER_DELAY_FUN 
  90      =1  #endif
  91      =1  
  92      =1  //--------------------------- P0 Define -----------------------------
  93      =1  //#define SEL_MIX     P0_6  // 
  94      =1  //--------------------------- P1 Define -----------------------------
  95      =1  //#define SEL_DVI     P3_5  //LJY062001   
  96      =1  
  97      =1  #define TW88HWReset     P3_4  //LJY001010 //LJY000721
  98      =1  #define PowerUp       P3_7
  99      =1  //======================= CDS Control ================================= 
 100      =1  //#define CDS_CTRL           P1_5
 101      =1  extern BYTE SelectModeType;
 102      =1  extern BYTE InputSelection;
 103      =1  extern BYTE SEQTime;
 104      =1  extern BYTE Priority;
 105      =1  extern BYTE PowerFlag;
 106      =1  //extern bit AutoDayNight;
 107      =1  extern bit SDCardCoverDetect;
 108      =1  
 109      =1  BYTE keyIn(void);
 110      =1  void TimerForRemocon(void);
 111      =1  void TimerForTick(void);
 112      =1  void DisableRemoconInt(void);
 113      =1  BYTE SetSupport_remocon(BYTE newd);
 114      =1  
 115      =1  void delay(BYTE cnt);
 116      =1  
 117      =1  BYTE RS_ready(void);
 118      =1  #ifdef Monitor_debug
 119      =1  BYTE RS_rx(void);
 120      =1  #endif
 121      =1  void RS_tx(BYTE tx_buf);
 122      =1  
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 11  

 123      =1  BYTE RS2_rx(void);
 124      =1  void RS2_tx(BYTE tx_buf);
 125      =1  
 126      =1  void NewLine(void);
 127      =1  void PutsP(PDATA_P BYTE *ptr);
 128      =1  #ifdef Hs_debug
 129      =1  //void MonWriteI2C(BYTE addr, BYTE index, BYTE val);
 130      =1  //BYTE MonReadI2C(BYTE addr, BYTE index);
 131      =1  #endif
 132      =1  BYTE Asc1Bin(BYTE asc);
 133      =1  BYTE Asc2Bin(PDATA_P BYTE *s);
 134      =1  
 135      =1  void I2CDeviceInitialize( CODE_P BYTE *RegSet);
 136      =1  
 137      =1  //void RestartSystemClock(WORD clock_hm);
 138      =1  WORD GetTime_ms(void);
 139      =1  #if 0
           =1 BYTE GetTime_H(void);
           =1 BYTE GetTime_M(void);
           =1 #endif
 143      =1  void ChangeTime_H( char add );
 144      =1  void ChangeTime_M( char add );
 145      =1  //WORD GetWakeupTime(void);
 146      =1  //void SetWakeupTime(WORD wtime);
 147      =1  
 148      =1  
 149      =1  //WORD GetOffTime(void);
 150      =1  //void SetOffTime(WORD wtime);
 151      =1  //BYTE GetSleepTimer(void);
 152      =1  //void SetSleepTimer(BYTE stime);
 153      =1  WORD DiffTime_ms( WORD stime, WORD etime );
 154      =1  //void SetLastBlockedTime(void);
 155      =1  void SetLastCCTime(void);       //ljy010904...CC_FIX_CLEAR_ON_TIME
 156      =1  
 157      =1  void SetOSDLastKeyInTime(void);
 158      =1  WORD GetOSDLastKeyInTime(void);
 159      =1  WORD GetIVF(void);
 160      =1  DWORD GetIHF(void);
 161      =1  BYTE ReadVInputSTD(void);
 162      =1  void SetVInputStd(BYTE newd);
 163      =1  BYTE GetVInputStd(void);
 164      =1  BYTE GetInputSelection(void);
 165      =1  #ifdef ADD_ANALOGPANEL
           =1 BYTE IsAnalogOn(void);
           =1 #endif
 168      =1  void InitVideoData(BYTE src);
 169      =1  void ChangeVInputStdDetectMode(BYTE val);
 170      =1  BYTE GetVInputStdInx(void);
 171      =1  
 172      =1  void MonWriteI2Cn_(BYTE addr, BYTE *val, BYTE cnt) ;
 173      =1  
 174      =1  void CheckNewTriggerFunc(void);
 175      =1  ///void Usage(void);
 176      =1  #ifdef Monitor_debug
 177      =1    void Prompt(void);
 178      =1  #endif
 179      =1  void DebugKeyIn(BYTE ikey);
 180      =1  void DVIPowerDown(bit flag);
 181      =1  void PowerDown_XTAL(bit flag);
 182      =1  
 183      =1  void ChangeInput(BYTE newsel);
 184      =1  
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 12  

 185      =1  
 186      =1  void WaitPowerOn(void);
 187      =1  void PowerOff(void);
 188      =1  BYTE GetNextInputSelection(void);
 189      =1  
 190      =1  BYTE WantToStopTVScan(void);
 191      =1  
 192      =1  //BYTE IsTW8801(void);
 193      =1  //BYTE IsTW8803(void);
 194      =1  //BYTE ConvertVideoVSAT(BYTE reg);
 195      =1  
 196      =1  BYTE IsNoInput(void);
 197      =1  void LoadEEPROM (void);
 198      =1  void Hs_InitVars(void);
 199      =1  void AdjustAutoDayNight(BYTE val);
 200      =1  void ACCPowerControl(void);
 201      =1  void ON_LVDS(void);
 202      =1  void OFF_LVDS(void);
 203      =1  void main_loop(void);
 204      =1  struct RegisterInfo
 205      =1  {
 206      =1     int  Min;
 207      =1     int  Max;
 208      =1     int  Default;
 209      =1  };
 210      =1  struct LongRegisterInfo
 211      =1  {
 212      =1     WORD Min;
 213      =1     WORD Max;
 214      =1     WORD Default;
 215      =1  };
 216      =1  
 217      =1  
 218      =1  typedef enum   ///add enum  by ryan@20170907
 219      =1  {
 220      =1    NORMALL_MODE,
 221      =1    REVERSE_TRIG,
 222      =1    LEFT_TRIG,
 223      =1    RIGHT_TRIG,
 224      =1  #ifdef USE_CAMD 
           =1   CAMD_TRIG,
           =1 #endif  
 227      =1    CAMC_TRIG,
 228      =1    VGA_TRIG,
 229      =1    PARK_TRIG,
 230      =1    No_TRIG,
 231      =1    TRIGGER_NUM
 232      =1  }TriggerModeType;
 233      =1  
 234      =1  
 235      =1  #endif  // __MAIN__
 236      =1  
   9          #include "i2c.h"
   1      =1  #ifndef __I2C_H__
   2      =1  #define __I2C_H__
   3      =1  
   4      =1  
   5      =1  void I2CReadByte3(BYTE *);
   6      =1  void I2CRead8Byte(BYTE *);
   7      =1  #if 0
           =1 void I2CReadByteMSP(BYTE addr, BYTE index, BYTE *pd, BYTE cnt);
           =1 #endif
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 13  

  10      =1  BYTE I2CWriteByte2(BYTE);
  11      =1  BYTE I2CWriteByte3(BYTE*);
  12      =1  BYTE I2CWrite8Byte(BYTE *);
  13      =1  
  14      =1  void I2CStart(void);
  15      =1  void I2CWriteData(BYTE value);
  16      =1  BYTE I2CReadData(void);
  17      =1  #if 0
           =1 BYTE I2CReadDataWithACK(void);
           =1 #endif
  20      =1  void I2CStop(void);
  21      =1  void I2Cdelay(void);
  22      =1  
  23      =1  
  24      =1  #define WriteTW88(a,b)    WriteI2C(TW88I2CAddress, a, b)
  25      =1  #define ReadTW88(a)     ReadI2C(TW88I2CAddress, a)
  26      =1  
  27      =1  BYTE WriteTW88_Wait (BYTE, BYTE);
  28      =1  void WriteADC   (BYTE, BYTE);
  29      =1  BYTE ReadADC    (BYTE);
  30      =1  BYTE ReadADC_TW88(BYTE index);
  31      =1  void WriteADC_TW88(BYTE index, BYTE dat);
  32      =1  
  33      =1  void WriteEEP   (WORD, BYTE);
  34      =1  BYTE ReadEEP    (WORD);
  35      =1  WORD ReadALC106(WORD index);
  36      =1  void WriteALC106(WORD index, WORD  dat);
  37      =1  WORD ReadI2CWORD(BYTE addr, BYTE index);
  38      =1  BYTE ReadI2C    (BYTE addr, BYTE index);
  39      =1  void WriteI2C   (BYTE addr, BYTE index, BYTE val);
  40      =1  
  41      =1  void WriteI2Cn_(BYTE addr, BYTE *val, BYTE cnt);
  42      =1  void WriteI2Cn (BYTE addr, BYTE index, BYTE *val, BYTE cnt);
  43      =1  void WriteI2CnD(BYTE addr, BYTE index, BYTE val, BYTE cnt);
  44      =1  
  45      =1  void ReadI2Cmn(BYTE addr, BYTE wcnt, BYTE rcnt, BYTE *rwdata);
  46      =1  
  47      =1  #define   WriteADC(a,b) WriteADC_TW88(a,b)
  48      =1  #define   ReadADC(a)    ReadADC_TW88(a)
  49      =1  
  50      =1  #endif  /* __I2C_H__ */
  10          #include "dispinfo.h"
   1      =1  #ifndef __DISPINFO__
   2      =1  #define __DISPINFO__
   3      =1  //==================================================================
   4      =1  //        Display Information
   5      =1  //==================================================================
   6      =1  #if (defined WQVGA) && (defined ANALOG_7INCH)
           =1 #define   INPUTINFO_ZOOM    WINZOOMx1
           =1 #define   LOGO_ZOOM     WINZOOMx3
           =1 
           =1 #else // (defined WQVGA) && (defined SHARP_LQ043T3DX02)
  11      =1  
  12      =1    #ifdef AWT_ML072S
  13      =1    #define   INPUTINFO_ZOOM    WINZOOMx4
  14      =1    #else
           =1   #define   INPUTINFO_ZOOM    WINZOOMx2
           =1   #endif
  17      =1  #define   LOGO_ZOOM     WINZOOMx2
  18      =1  #endif
  19      =1  //#define   VOL_ZOOM      WINZOOMx4
  20      =1  #define   MUTE_ZOOM     WINZOOMx3
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 14  

  21      =1  #define   TVCHN_ZOOM      WINZOOMx4
  22      =1  #define   RATINGINFO_ZOOM   WINZOOMx3
  23      =1  #define     SCANTV_ZOOM     WINZOOMx2   //ljy012304
  24      =1  #define   PCINFO_ZOOM     WINZOOMx2
  25      =1  #define     BAR_ZOOM      WINZOOMx2
  26      =1  
  27      =1  
  28      =1  #define DVRStatus_OSDWIN  4 
  29      =1  #define DVRStatus_ADDR  180
  30      =1  
  31      =1  extern  BYTE  DisplayedOSD;
  32      =1  
  33      =1  
  34      =1  void ClearDisplayedOSD( BYTE newd );
  35      =1  void SetDisplayedOSD( BYTE newd );
  36      =1  BYTE GetDisplayedOSD(void);
  37      =1  void ClearOSDInfo(void);
  38      =1  
  39      =1  void DisplayInput(void);
  40      =1  BYTE ClearInput(void);
  41      =1  BYTE ClearInput2s(void);
  42      =1  
  43      =1  //void DisplayLogo(void);
  44      =1  
  45      =1  void ClearLogo(void);
  46      =1  
  47      =1  void DisplayPCInfo(BYTE CODE *ptr);
  48      =1  void ClearPCInfo(void);
  49      =1  void DisplayAutoAdjust(void);
  50      =1  void ClearAutoAdjust(void);
  51      =1  
  52      =1  
  53      =1  void DisplayVol(void);
  54      =1  #if 0
           =1 void DisplayBrightness(void);
           =1 #endif
  57      =1  #if 0
           =1 void DisplayMuteInfo(void);
           =1 #endif
  60      =1  void ClearMuteInfo(void);
  61      =1  BYTE CheckAndClearOSD(void);
  62      =1  BYTE ClearVlossOsd(void);
  63      =1  #ifdef AWT_ML072S
  64      =1  void VlossHandler(void);
  65      =1  void Check_Vloss(void);
  66      =1  #endif
  67      =1  //==================================================================
  68      =1  //            TV Info
  69      =1  //==================================================================
  70      =1  
  71      =1  BYTE ClearTVInfo(void);
  72      =1  
  73      =1  #endif  // __DISPINFO__
  11          #include "reg.h"
   1      =1  //
   2      =1  //Registers.h : Register declaration
   3      =1  //
   4      =1  
   5      =1  #ifndef __REGISTERS__
   6      =1  #define __REGISTERS__
   7      =1  
   8      =1  #ifdef INTERNAL_MCU
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 15  

           =1 /*  BYTE Registers  */
           =1 sfr P0    = 0x80;
           =1 sfr P1    = 0x90;
           =1 sfr P2    = 0xA0;
           =1 sfr P3    = 0xB0;
           =1 sfr PSW   = 0xD0;
           =1 sfr ACC   = 0xE0;
           =1 sfr B     = 0xF0;
           =1 sfr SP    = 0x81;
           =1 sfr DPL   = 0x82;
           =1 sfr DPH   = 0x83;
           =1 sfr PCON  = 0x87;
           =1 sfr TCON  = 0x88;
           =1 sfr TMOD  = 0x89;
           =1 sfr TL0   = 0x8A;
           =1 sfr TL1   = 0x8B;
           =1 sfr TH0   = 0x8C;
           =1 sfr TH1   = 0x8D;
           =1 sfr IE    = 0xA8;
           =1 sfr IP    = 0xB8;
           =1 sfr SCON  = 0x98;
           =1 sfr SBUF  = 0x99;
           =1 
           =1 //sfr P4    = 0xd8;
           =1 
           =1 /*  8052 Extensions  */
           =1 sfr EXIF  = 0x91;   // external interrupt 2,3,4,5 flags should be cleared by software
           =1 sfr T2CON = 0xC8;
           =1 sfr RCAP2L = 0xCA;
           =1 sfr RCAP2H = 0xCB;
           =1 sfr TL2   = 0xCC;
           =1 sfr TH2   = 0xCD;
           =1 sfr EICON = 0xD8;
           =1 sfr EIE   = 0xE8;
           =1 sfr EIP   = 0xF8;
           =1 
           =1 /*  TW88 Core Extension */
           =1 sfr BANKREG   = 0x9A;
           =1 sfr SPICONTROL  = 0x9B;
           =1 sfr T0HIGH    = 0x9C;
           =1 sfr T0LOW     = 0x9D;
           =1 sfr T1HIGH    = 0x9E;
           =1 sfr T1LOW     = 0x9F;
           =1 sfr T2HIGH    = 0x93;
           =1 sfr T2LOW     = 0x94;
           =1 
           =1 /*  BIT Registers  */
           =1 /*  PSW  */
           =1 sbit CY    = 0xD7;
           =1 sbit AC    = 0xD6;
           =1 sbit F0    = 0xD5;
           =1 sbit RS1   = 0xD4;
           =1 sbit RS0   = 0xD3;
           =1 sbit OV    = 0xD2;
           =1 sbit P     = 0xD0;
           =1 
           =1 /*  TCON  */
           =1 sbit TF1   = 0x8F;
           =1 sbit TR1   = 0x8E;
           =1 sbit TF0   = 0x8D;
           =1 sbit TR0   = 0x8C;
           =1 sbit IE1   = 0x8B;
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 16  

           =1 sbit IT1   = 0x8A;
           =1 sbit IE0   = 0x89;
           =1 sbit IT0   = 0x88;
           =1 
           =1 /*  IE  */
           =1 sbit EA    = 0xAF;
           =1 sbit ES    = 0xAC;
           =1 sbit ET1   = 0xAB;
           =1 sbit EX1   = 0xAA;
           =1 sbit ET0   = 0xA9;
           =1 sbit EX0   = 0xA8;
           =1 
           =1 /*  EIE  */
           =1 sbit EWDI  = 0xEC;    // Watch dog timer interrupt enable
           =1 sbit EX5   = 0xEB;    // external interrupt 5 enable
           =1 sbit EX4   = 0xEA;    // external interrupt 4 enable
           =1 sbit EX3   = 0xE9;    // external interrupt 3 enable
           =1 sbit EX2   = 0xE8;    // external interrupt 2 enable
           =1 
           =1 /*  IP  */
           =1 sbit PS    = 0xBC;
           =1 sbit PT1   = 0xBB;
           =1 sbit PX1   = 0xBA;
           =1 sbit PT0   = 0xB9;
           =1 sbit PX0   = 0xB8;
           =1 
           =1 /*  EIP  */
           =1 sbit PWDI  = 0xFC;    // Watch dog timer interrupt priority
           =1 sbit PX5   = 0xFB;    // external interrupt5 priority
           =1 sbit PX4   = 0xFA;    // external interrupt4 priority
           =1 sbit PX3   = 0xF9;    // external interrupt3 priority
           =1 sbit PX2   = 0xF8;    // external interrupt2 priority
           =1 
           =1 /*  P3  */
           =1 sbit RD    = 0xB7;
           =1 sbit WR    = 0xB6;
           =1 sbit T1    = 0xB5;
           =1 sbit T0    = 0xB4;
           =1 sbit INT1  = 0xB3;
           =1 sbit INT0  = 0xB2;
           =1 sbit TXD   = 0xB1;
           =1 sbit RXD   = 0xB0;
           =1 
           =1 /*  SCON  */
           =1 sbit SM0   = 0x9F;
           =1 sbit SM1   = 0x9E;
           =1 sbit SM2   = 0x9D;
           =1 sbit REN   = 0x9C;
           =1 sbit TB8   = 0x9B;
           =1 sbit RB8   = 0x9A;
           =1 sbit TI    = 0x99;
           =1 sbit RI    = 0x98;
           =1 
           =1 /*  8052 Extensions  */
           =1 /*  IE  */
           =1 sbit ET2   = 0xAD;
           =1 
           =1 /*  IP  */
           =1 sbit PT2   = 0xBD;
           =1 
           =1 /*  P1  */
           =1 sbit T2EX  = 0x91;
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 17  

           =1 sbit T2    = 0x90;
           =1              
           =1 /*  T2CON  */
           =1 sbit TF2   = 0xCF;
           =1 sbit EXF2  = 0xCE;
           =1 sbit RCLK  = 0xCD;
           =1 sbit TCLK  = 0xCC;
           =1 sbit EXEN2 = 0xCB;
           =1 sbit TR2   = 0xCA;
           =1 sbit C_T2  = 0xC9;
           =1 sbit CP_RL2= 0xC8;
           =1 
           =1 sfr CHPENR = 0xF6;
           =1 sfr CHPCON = 0xBF;
           =1 sfr SFRAL  = 0xC4;
           =1 sfr SFRAH  = 0xC5;
           =1 sfr SFRFD  = 0xC6;
           =1 sfr SFRCN  = 0xC7;
           =1 
           =1 sbit P0_0  = 0x80;
           =1 sbit P0_1  = 0x81;
           =1 sbit P0_2  = 0x82;
           =1 sbit P0_3  = 0x83;
           =1 sbit P0_4  = 0x84;
           =1 sbit P0_5  = 0x85;
           =1 sbit P0_6  = 0x86;
           =1 sbit P0_7  = 0x87;
           =1 
           =1 sbit P1_0  = 0x90;
           =1 sbit P1_1  = 0x91;
           =1 sbit P1_2  = 0x92;
           =1 sbit P1_3  = 0x93;
           =1 sbit P1_4  = 0x94;
           =1 sbit P1_5  = 0x95;
           =1 sbit P1_6  = 0x96;
           =1 sbit P1_7  = 0x97;
           =1 
           =1 sbit P2_0  = 0xa0;
           =1 sbit P2_1  = 0xa1;
           =1 sbit P2_2  = 0xa2;
           =1 sbit P2_3  = 0xa3;
           =1 sbit P2_4  = 0xa4;
           =1 sbit P2_5  = 0xa5;
           =1 sbit P2_6  = 0xa6;
           =1 sbit P2_7  = 0xa7;
           =1 
           =1 sbit P3_0  = 0xb0;
           =1 sbit P3_1  = 0xb1;
           =1 sbit P3_2  = 0xb2;
           =1 sbit P3_3  = 0xb3;
           =1 sbit P3_4  = 0xb4;
           =1 sbit P3_5  = 0xb5;
           =1 sbit P3_6  = 0xb6;
           =1 sbit P3_7  = 0xb7;
           =1 
           =1 #else // external MCU=WINBOND
 189      =1  /*  BYTE Registers  */
 190      =1  sfr P0    = 0x80;
 191      =1  sfr P1    = 0x90;
 192      =1  sfr P2    = 0xA0;
 193      =1  sfr P3    = 0xB0;
 194      =1  sfr PSW   = 0xD0;
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 18  

 195      =1  sfr ACC   = 0xE0;
 196      =1  sfr B     = 0xF0;
 197      =1  sfr SP    = 0x81;
 198      =1  sfr DPL   = 0x82;
 199      =1  sfr DPH   = 0x83;
 200      =1  sfr PCON  = 0x87;
 201      =1  sfr TCON  = 0x88;
 202      =1  sfr TMOD  = 0x89;
 203      =1  sfr TL0   = 0x8A;
 204      =1  sfr TL1   = 0x8B;
 205      =1  sfr TH0   = 0x8C;
 206      =1  sfr TH1   = 0x8D;
 207      =1  sfr CKCON = 0x8E;   //clock control register, default =0x01
 208      =1  sfr IE    = 0xA8;
 209      =1  sfr IP    = 0xB8;
 210      =1  sfr SCON  = 0x98;
 211      =1  sfr SBUF  = 0x99;
 212      =1  sfr P4 = 0xE8; //Megawin Ryan@970716
 213      =1  //sfr P4    = 0xa5;      //SST MCU
 214      =1  //sfr P4    = 0xd8;   //winbond<960820>
 215      =1  
 216      =1  /*  8052 Extensions  */
 217      =1  sfr ADCTL = 0xC5;   //william-20111017
 218      =1  sfr ADCV = 0xC6;    //william-20111017
 219      =1  sfr ADCVL = 0xE8;   //william-20111017
 220      =1  sfr T2CON = 0xC8;
 221      =1  sfr RCAP2L = 0xCA;
 222      =1  sfr RCAP2H = 0xCB;
 223      =1  sfr TL2   = 0xCC;
 224      =1  sfr TH2   = 0xCD;
 225      =1  
 226      =1  // for UART2
 227      =1  sfr S2CON  = 0xAA;
 228      =1  sfr S2BRT  = 0xBA;
 229      =1  sfr S2BUF  = 0x9A;
 230      =1  sfr AUXR2  = 0xA6;
 231      =1  sfr AUXIE  = 0xAD;
 232      =1  
 233      =1  sfr P1M0  = 0x91;
 234      =1  sfr P1M1  = 0x92;
 235      =1  sfr P0M0  = 0x93;
 236      =1  sfr P0M1  = 0x94;
 237      =1  sfr P2M0  = 0x95;
 238      =1  sfr P2M1  = 0x96;
 239      =1  sfr P3M0  = 0xB1;
 240      =1  sfr P3M1  = 0xB2;
 241      =1  
 242      =1  // for PCA
 243      =1  sfr CCON   = 0xD8;
 244      =1  sfr CMOD   = 0xD9;
 245      =1  sfr CCAPM0 = 0xDA;
 246      =1  sfr CCAPM1 = 0xDB;
 247      =1  sfr CCAPM2 = 0xDC;
 248      =1  sfr CCAPM3 = 0xDD;
 249      =1  sfr CCAPM4 = 0xDE;
 250      =1  sfr CCAPM5 = 0xDF;
 251      =1  sfr CL     = 0xE9;
 252      =1  sfr CH     = 0xF9;
 253      =1  sfr CCAP0L = 0xEA;
 254      =1  sfr CCAP0H = 0xFA;
 255      =1  sfr CCAP1L = 0xEB;
 256      =1  sfr CCAP1H = 0xFB;
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 19  

 257      =1  sfr CCAP2L = 0xEC;
 258      =1  sfr CCAP2H = 0xFC;
 259      =1  sfr CCAP3L = 0xED;
 260      =1  sfr CCAP3H = 0xFD;
 261      =1  sfr CCAP4L = 0xEE;
 262      =1  sfr CCAP4H = 0xFE;
 263      =1  sfr CCAP5L = 0xEF;
 264      =1  sfr CCAP5H = 0xFF;
 265      =1  sfr PCAPWM0= 0xF2;
 266      =1  sfr PCAPWM1= 0xF3;
 267      =1  sfr PCAPWM2= 0xF4;
 268      =1  sfr PCAPWM3= 0xF5;
 269      =1  sfr PCAPWM4= 0xF6;
 270      =1  sfr PCAPWM5= 0xF7;
 271      =1  
 272      =1  /*  BIT Registers  */
 273      =1  /*  PSW  */
 274      =1  sbit CY    = 0xD7;
 275      =1  sbit AC    = 0xD6;
 276      =1  sbit F0    = 0xD5;
 277      =1  sbit RS1   = 0xD4;
 278      =1  sbit RS0   = 0xD3;
 279      =1  sbit OV    = 0xD2;
 280      =1  sbit P     = 0xD0;
 281      =1  
 282      =1  /*  TCON  */
 283      =1  sbit TF1   = 0x8F;
 284      =1  sbit TR1   = 0x8E;
 285      =1  sbit TF0   = 0x8D;
 286      =1  sbit TR0   = 0x8C;
 287      =1  sbit IE1   = 0x8B;
 288      =1  sbit IT1   = 0x8A;
 289      =1  sbit IE0   = 0x89;
 290      =1  sbit IT0   = 0x88;
 291      =1  
 292      =1  /*  IE  */
 293      =1  sbit EA    = 0xAF;
 294      =1  sbit ES    = 0xAC;
 295      =1  sbit ET1   = 0xAB;
 296      =1  sbit EX1   = 0xAA;
 297      =1  sbit ET0   = 0xA9;
 298      =1  sbit EX0   = 0xA8;
 299      =1  
 300      =1  /*  IP  */
 301      =1  sbit PS    = 0xBC;
 302      =1  sbit PT1   = 0xBB;
 303      =1  sbit PX1   = 0xBA;
 304      =1  sbit PT0   = 0xB9;
 305      =1  sbit PX0   = 0xB8;
 306      =1  
 307      =1  /*  P3  */
 308      =1  sbit RD    = 0xB7;
 309      =1  sbit WR    = 0xB6;
 310      =1  sbit T1    = 0xB5;
 311      =1  sbit T0    = 0xB4;
 312      =1  sbit INT1  = 0xB3;
 313      =1  sbit INT0  = 0xB2;
 314      =1  sbit TXD   = 0xB1;
 315      =1  sbit RXD   = 0xB0;
 316      =1  
 317      =1  /*  SCON  */
 318      =1  sbit SM0   = 0x9F;
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 20  

 319      =1  sbit SM1   = 0x9E;
 320      =1  sbit SM2   = 0x9D;
 321      =1  sbit REN   = 0x9C;
 322      =1  sbit TB8   = 0x9B;
 323      =1  sbit RB8   = 0x9A;
 324      =1  sbit TI    = 0x99;
 325      =1  sbit RI    = 0x98;
 326      =1  
 327      =1  /*  8052 Extensions  */
 328      =1  /*  IE  */
 329      =1  sbit ET2   = 0xAD;
 330      =1  
 331      =1  /*  IP  */
 332      =1  sbit PT2   = 0xBD;
 333      =1  
 334      =1  /*  P1  */
 335      =1  sbit T2EX  = 0x91;
 336      =1  sbit T2    = 0x90;
 337      =1               
 338      =1  /*  T2CON  */
 339      =1  sbit TF2   = 0xCF;
 340      =1  sbit EXF2  = 0xCE;
 341      =1  sbit RCLK  = 0xCD;
 342      =1  sbit TCLK  = 0xCC;
 343      =1  sbit EXEN2 = 0xCB;
 344      =1  sbit TR2   = 0xCA;
 345      =1  sbit C_T2  = 0xC9;
 346      =1  sbit CP_RL2= 0xC8;
 347      =1  
 348      =1  sfr CHPENR = 0xF6;
 349      =1  sfr CHPCON = 0xBF;
 350      =1  sfr SFRAL  = 0xC4;
 351      =1  sfr SFRAH  = 0xC5;
 352      =1  sfr SFRFD  = 0xC6;
 353      =1  sfr SFRCN  = 0xC7;
 354      =1  
 355      =1  sbit P0_0  = 0x80;
 356      =1  sbit P0_1  = 0x81;
 357      =1  sbit P0_2  = 0x82;
 358      =1  sbit P0_3  = 0x83;
 359      =1  sbit P0_4  = 0x84;
 360      =1  sbit P0_5  = 0x85;
 361      =1  sbit P0_6  = 0x86;
 362      =1  sbit P0_7  = 0x87;
 363      =1  
 364      =1  sbit P1_0  = 0x90;
 365      =1  sbit P1_1  = 0x91;
 366      =1  sbit P1_2  = 0x92;
 367      =1  sbit P1_3  = 0x93;
 368      =1  sbit P1_4  = 0x94;
 369      =1  sbit P1_5  = 0x95;
 370      =1  sbit P1_6  = 0x96;
 371      =1  sbit P1_7  = 0x97;
 372      =1  
 373      =1  sbit P2_0  = 0xa0;
 374      =1  sbit P2_1  = 0xa1;
 375      =1  sbit P2_2  = 0xa2;
 376      =1  sbit P2_3  = 0xa3;
 377      =1  sbit P2_4  = 0xa4;
 378      =1  sbit P2_5  = 0xa5;
 379      =1  sbit P2_6  = 0xa6;
 380      =1  sbit P2_7  = 0xa7;
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 21  

 381      =1  
 382      =1  sbit P3_0  = 0xb0;
 383      =1  sbit P3_1  = 0xb1;
 384      =1  sbit P3_2  = 0xb2;
 385      =1  sbit P3_3  = 0xb3;
 386      =1  sbit P3_4  = 0xb4;
 387      =1  sbit P3_5  = 0xb5;
 388      =1  sbit P3_6  = 0xb6;
 389      =1  sbit P3_7  = 0xb7;
 390      =1  
 391      =1  sbit P4_0  = P4^0;
 392      =1  sbit P4_1  = P4^1;
 393      =1  sbit INT3  = P4^2;
 394      =1  sbit INT2  = P4^3;
 395      =1  
 396      =1  sfr P4M0  = 0xB3;
 397      =1  sfr P4M1  = 0xB4;
 398      =1  #endif  // INTERNAL_MCU
 399      =1  
 400      =1  #endif  //__REGISTERS__
 401      =1  
  12          #include "regmap.h"
   1      =1  #ifndef __REGMAP__
   2      =1  #define __REGMAP__
   3      =1  
   4      =1  //-----------------------------------------------------------------------------
   5      =1  //        Individual Decoder Registers 
   6      =1  //-----------------------------------------------------------------------------
   7      =1  
   8      =1  #define MCU_STOP_MODE 0xc8  // bit 7 is mcu stop, bit5 is MCU debug
   9      =1  
  10      =1  #define LAD0      0xc9  // Low speed AD channel 0
  11      =1  #define LAD1      0xca  // Low speed AD channel 1
  12      =1  
  13      =1  #define REG_PAGE    0xff
  14      =1  #define STATUS0     0xd0
  15      =1  #define STATUS1     0xd1
  16      =1  #define IRQ_EN1     0xd2
  17      =1  #define IRQ_EN0     0xd3
  18      =1  
  19      =1  //-----------------------------------------------------------------------------
  20      =1  //        Individual Decoder Registers 
  21      =1  //-----------------------------------------------------------------------------
  22      =1  
  23      =1  #define DECODERADDRESS  TW88I2CAddress
  24      =1  
  25      =1  #define CVFMT     0x1e  // Component Video Format
  26      =1  #define FBSHIFT     0x38  // RGB Anti-Alias Filter/FB Shift Level
  27      =1  #define SHUE      0x3e  // RGB Hue
  28      =1  #define SCONTRAST   0x3b  // RGB Contrast
  29      =1  #define SBRIGHT     0x3a  // RGB Brightness
  30      =1  #define SCbGAIN     0x3c  // RGB Cb Gain
  31      =1  #define SCrGAIN     0x3d  // RGB Cb Gain
  32      =1  #define RGBCONTROL    0x36  // RGB Powerdown..
  33      =1  #define RGBMISC     0x39
  34      =1  #define FBCONTRL    0x3F
  35      =1  
  36      =1  //#define OSD_ADJ     0xce
  37      =1  #define PNLSHARPNESS  0x78  // Sharpness Control
  38      =1  #define OSDWINSTATUS  0x95
  39      =1  //-----------------------------------------------------------------------------
  40      =1  //        Common Registers
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 22  

  41      =1  //-----------------------------------------------------------------------------
  42      =1  #define CSTATUS     0x01  // Chip Status
  43      =1  #define INFORM      0x02  // Input Format
  44      =1  #define ACNTL     0x06  // Analog Control
  45      =1  #define CROP_HI     0x07  // Cropping High
  46      =1  #define VDELAY_LO   0x08  // Vertical Delay Low
  47      =1  #define VACTIVE_LO    0x09  // Vertical Active Low
  48      =1  #define HDELAY_LO   0x0a  // Horizontal Delay Low
  49      =1  #define HACTIVE_LO    0x0b  // Horizontal Active Low
  50      =1  #define CNTRL1      0x0c  // Control 1
  51      =1  
  52      =1  #define BRIGHT      0x10  // Brightness Control
  53      =1  #define CONTRAST    0x11  // Contrast Control
  54      =1  #define SHARPNESS   0x12  // Sharpness Control
  55      =1  #define SAT_U     0x13  // Chroma(U) Gain
  56      =1  #define SAT_V     0x14  // Chroma(V) Gain
  57      =1  #define HUE       0x15  // Hue Conrol
  58      =1  #define V_PEAKING   0x17  // Vertical Peaking
  59      =1  
  60      =1  #define CC_STATUS   0x1a  // CC/EDS Status
  61      =1  #define CC_DATA     0x1b  // CC/EDS Data
  62      =1  #define SDT       0x1c  // Standard Selection
  63      =1  #define SDTR      0x1d  // Standard Recognition
  64      =1  
  65      =1  #define V_CONTROL2    0x29  // Vertical Control II
  66      =1  #define HFILTER     0x2c
  67      =1  #define MISC1     0x2d  // Miscellaneous Control 1
  68      =1  #define MISC2     0x2e  // Miscellaneous Control 2
  69      =1  #define MISC3     0x2f  // Miscellaneous Control 2
  70      =1  
  71      =1  #define VBI_CNTL2   0x34  // VBI control 2 - WSSEN
  72      =1  #define CC_ODDLINE    0x35  // CC Odd Line
  73      =1  
  74      =1  #define LADC0     0xc9  //LADC Channel 0 Input Value 
  75      =1  #define LADC1     0xca  //LADC Channel 1 Input Value 
  76      =1  
  77      =1  #define WriteDecoder(index, val)    WriteTW88( index, val )
  78      =1  #define ReadDecoder(index)        ReadTW88( index )
  79      =1  
  80      =1  #endif // __REGMAP__
  81      =1  
  13          #include "printf.h"
   1      =1  #ifndef __PRINTF__
   2      =1  #define __PRINTF__
   3      =1  
   4      =1  #define _outchar(c) while(1) { if( !RS_Xbusy ) { SBUF = c; RS_Xbusy=1; break; } }
   5      =1  #define Putch(c) _outchar(c)
   6      =1  
   7      =1  #ifdef SERIAL
   8      =1  
   9      =1   void Printf ( const char CODE_P *fmt, ... );
  10      =1   void Puts ( CODE_P char *ptr );
  11      =1  
  12      =1  #define TW2835Cmd(a)   Puts ( a )
  13      =1  
  14      =1  #else
           =1 
           =1  #undef  DEBUG
           =1  #define Printf(a,b)  //
           =1  #define Puts(a)      //
           =1 
           =1 #endif
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 23  

  21      =1  
  22      =1  
  23      =1  #ifndef DEBUG
  24      =1  
  25      =1   #define dPuts(a)   //
  26      =1   #define wPuts(a)   //
  27      =1   #define ePuts(a)   //
  28      =1  
  29      =1  #else
           =1 
           =1  void dPrintf( const char CODE_P *fmt, ... );
           =1  void wPrintf( const char CODE_P *fmt, ... );
           =1  void ePrintf( const char CODE_P *fmt, ... );
           =1 
           =1  void dPuts( CODE_P char *ptr );
           =1  void wPuts( CODE_P char *ptr );
           =1  void ePuts( CODE_P char *ptr );
           =1 
           =1 #endif  // DEBUG
  40      =1  
  41      =1  BYTE Getch(void);
  42      =1  BYTE Getche(void);
  43      =1  
  44      =1  
  45      =1  #endif  //__PRINTF__
  14          //#include "dispinfo.h"
  15          //#include "video.h"
  16          //#include "eeprom.h"
  17          //#include "measure.h"
  18          #include "tw88.h"
   1      =1  #ifndef __TW88__
   2      =1  #define __TW88__
   3      =1  
   4      =1  #include "main.h"
   1      =2  #ifndef __MAIN__
           =2 #define __MAIN__
           =2 
           =2 #define ON          1
           =2 #define OFF         0
           =2 #if 1//ryan@20171214
           =2 #define Hs_debug
           =2 #define Monitor_debug  
           =2 //#define Trigger_debug 
           =2 #endif
           =2 
           =2 
           =2 //#define DVR
           =2 #define Format_SDCard
           =2 #define BJTSwitch
           =2 
           =2 #define Panel_Enable()    P4=P4|0x08 //andy 980908
           =2 #define Panel_Disable()   P4=P4&0xf7
           =2 
           =2 #if 0
           =2 #define SetBacklight()      P4=P4|0x04
           =2 #define clrBacklight()      P4=P4&0xfb
           =2 #else
           =2 #define SetBacklight()    P4=P4&0xfb
           =2 #define clrBacklight()    P4=P4|0x04
           =2 #endif
           =2 
           =2 //InputSelection
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 24  

           =2 struct struct_IdName {
           =2   BYTE  Id;
           =2   BYTE  Name[16];
           =2 };
           =2 
           =2 #define CH_TW2835       1
           =2 #define CH_CAMD       2
           =2 #define CH_AV         3
           =2 #define PC          7
           =2 #define ChineseDefaultMenu  8
           =2 
           =2 #define SVIDEO        2
           =2 #define COMPONENT     3
           =2 //#define ANALOGDTV     4
           =2 #define DTV         4
           =2 #define TV          5
           =2 #define SCART       6
           =2 
           =2 #ifdef HS
           =2 #define CH_CAMB         4
           =2 #endif
           =2 
           =2 #define DIGITALVGA      8
           =2 
           =2 #define AIRTV       0 //9
           =2 #define CABLETV       1 //0xa
           =2 
           =2 #define TVTUNER       0xd   //10
           =2 #define MUTE        1 
           =2 #define MENU        2 
           =2 #define TVVOL       4 
           =2 #ifdef AWT_ML072S
           =2 #define VLOSSINFO     8 
           =2 #else
           =2 #define CC          8 
           =2 #endif
           =2 #define INPUTINFO     0x10
           =2 #define PCINFO        0x20
           =2 #define GAUGEINFO       0x40
           =2 //#define RATINGINFO      0x40
           =2 #define TVCHN       0x80
           =2 //#define MUTE        0x40
           =2 
           =2 #define YPBPR_480i      0
           =2 #define YPBPR_576i      1
           =2 #define YPBPR_480p      2
           =2 #define YPBPR_576p      3
           =2 #define YPBPR_1080i     4
           =2 #define YPBPR_720p      5
           =2 #define YPBPR_720p50    6
           =2 
           =2 //---------------------- Feature Define ----------------------------
           =2 #ifdef AWT_ML072Q
           =2 
           =2 //mask by ryan@20171018   #define AWT_ML720Q_NEW_TRIGGER_FUN    //Pinchi 20141031 add for AWT request each t
             -rigger can work by PRIORITY OFF
           =2 #define AWT_ADD_TRIGGER_DELAY_FUN 
           =2 #define AWT_SUPPORT_4_3_SCREEN    //ryan@20170907 
           =2 #endif
           =2 
           =2 #ifdef AWT_ML072S
           =2 #define AWT_ADD_TRIGGER_DELAY_FUN 
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 25  

           =2 #endif
           =2 
           =2 //--------------------------- P0 Define -----------------------------
           =2 //#define SEL_MIX     P0_6  // 
           =2 //--------------------------- P1 Define -----------------------------
           =2 //#define SEL_DVI     P3_5  //LJY062001   
           =2 
           =2 #define TW88HWReset     P3_4  //LJY001010 //LJY000721
           =2 #define PowerUp       P3_7
           =2 //======================= CDS Control ================================= 
           =2 //#define CDS_CTRL           P1_5
           =2 extern BYTE SelectModeType;
           =2 extern BYTE InputSelection;
           =2 extern BYTE SEQTime;
           =2 extern BYTE Priority;
           =2 extern BYTE PowerFlag;
           =2 //extern bit AutoDayNight;
           =2 extern bit SDCardCoverDetect;
           =2 
           =2 BYTE keyIn(void);
           =2 void TimerForRemocon(void);
           =2 void TimerForTick(void);
           =2 void DisableRemoconInt(void);
           =2 BYTE SetSupport_remocon(BYTE newd);
           =2 
           =2 void delay(BYTE cnt);
           =2 
           =2 BYTE RS_ready(void);
           =2 #ifdef Monitor_debug
           =2 BYTE RS_rx(void);
           =2 #endif
           =2 void RS_tx(BYTE tx_buf);
           =2 
           =2 BYTE RS2_rx(void);
           =2 void RS2_tx(BYTE tx_buf);
           =2 
           =2 void NewLine(void);
           =2 void PutsP(PDATA_P BYTE *ptr);
           =2 #ifdef Hs_debug
           =2 //void MonWriteI2C(BYTE addr, BYTE index, BYTE val);
           =2 //BYTE MonReadI2C(BYTE addr, BYTE index);
           =2 #endif
           =2 BYTE Asc1Bin(BYTE asc);
           =2 BYTE Asc2Bin(PDATA_P BYTE *s);
           =2 
           =2 void I2CDeviceInitialize( CODE_P BYTE *RegSet);
           =2 
           =2 //void RestartSystemClock(WORD clock_hm);
           =2 WORD GetTime_ms(void);
           =2 #if 0
           =2 BYTE GetTime_H(void);
           =2 BYTE GetTime_M(void);
           =2 #endif
           =2 void ChangeTime_H( char add );
           =2 void ChangeTime_M( char add );
           =2 //WORD GetWakeupTime(void);
           =2 //void SetWakeupTime(WORD wtime);
           =2 
           =2 
           =2 //WORD GetOffTime(void);
           =2 //void SetOffTime(WORD wtime);
           =2 //BYTE GetSleepTimer(void);
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 26  

           =2 //void SetSleepTimer(BYTE stime);
           =2 WORD DiffTime_ms( WORD stime, WORD etime );
           =2 //void SetLastBlockedTime(void);
           =2 void SetLastCCTime(void);       //ljy010904...CC_FIX_CLEAR_ON_TIME
           =2 
           =2 void SetOSDLastKeyInTime(void);
           =2 WORD GetOSDLastKeyInTime(void);
           =2 WORD GetIVF(void);
           =2 DWORD GetIHF(void);
           =2 BYTE ReadVInputSTD(void);
           =2 void SetVInputStd(BYTE newd);
           =2 BYTE GetVInputStd(void);
           =2 BYTE GetInputSelection(void);
           =2 #ifdef ADD_ANALOGPANEL
           =2 BYTE IsAnalogOn(void);
           =2 #endif
           =2 void InitVideoData(BYTE src);
           =2 void ChangeVInputStdDetectMode(BYTE val);
           =2 BYTE GetVInputStdInx(void);
           =2 
           =2 void MonWriteI2Cn_(BYTE addr, BYTE *val, BYTE cnt) ;
           =2 
           =2 void CheckNewTriggerFunc(void);
           =2 ///void Usage(void);
           =2 #ifdef Monitor_debug
           =2   void Prompt(void);
           =2 #endif
           =2 void DebugKeyIn(BYTE ikey);
           =2 void DVIPowerDown(bit flag);
           =2 void PowerDown_XTAL(bit flag);
           =2 
           =2 void ChangeInput(BYTE newsel);
           =2 
           =2 
           =2 void WaitPowerOn(void);
           =2 void PowerOff(void);
           =2 BYTE GetNextInputSelection(void);
           =2 
           =2 BYTE WantToStopTVScan(void);
           =2 
           =2 //BYTE IsTW8801(void);
           =2 //BYTE IsTW8803(void);
           =2 //BYTE ConvertVideoVSAT(BYTE reg);
           =2 
           =2 BYTE IsNoInput(void);
           =2 void LoadEEPROM (void);
           =2 void Hs_InitVars(void);
           =2 void AdjustAutoDayNight(BYTE val);
           =2 void ACCPowerControl(void);
           =2 void ON_LVDS(void);
           =2 void OFF_LVDS(void);
           =2 void main_loop(void);
           =2 struct RegisterInfo
           =2 {
           =2    int  Min;
           =2    int  Max;
           =2    int  Default;
           =2 };
           =2 struct LongRegisterInfo
           =2 {
           =2    WORD Min;
           =2    WORD Max;
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 27  

           =2    WORD Default;
           =2 };
           =2 
           =2 
           =2 typedef enum   ///add enum  by ryan@20170907
           =2 {
           =2   NORMALL_MODE,
           =2   REVERSE_TRIG,
           =2   LEFT_TRIG,
           =2   RIGHT_TRIG,
           =2 #ifdef USE_CAMD 
           =2   CAMD_TRIG,
           =2 #endif  
           =2   CAMC_TRIG,
           =2   VGA_TRIG,
           =2   PARK_TRIG,
           =2   No_TRIG,
           =2   TRIGGER_NUM
           =2 }TriggerModeType;
           =2 
           =2 
           =2 #endif  // __MAIN__
 236      =2  
   5      =1  
   6      =1  //Value for register 0x44
   7      =1  //#define DECODER_YCbCr   0x08    //xxxx bbxx
   8      =1  //#define RGB_RGB       0x0C
   9      =1  
  10      =1  #define TW88_FPLL0      0xf9
  11      =1  #define TW88_FPLL1      0xfa
  12      =1  #define TW88_FPLL2      0xfb
  13      =1  #define TW88_FSS      0xfc
  14      =1  #define TW88_FSS_PD     0xfd
  15      =1  #define TW88_PLL_DIV    0xfe
  16      =1  
  17      =1  //#define TW88_XSCALE     0x5d
  18      =1  //#define TW88_YSCALE     0x5e
  19      =1  
  20      =1  #define TW88_XUSCALELO    0x60
  21      =1  #define TW88_XDSCALELO    0x61
  22      =1  #define TW88_YUSCALELO    0x62
  23      =1  #define TW88_XYSCALEHI    0x63
  24      =1  #define TW88_XUSCALEFINE  0x69
  25      =1  #define TW88_YUSCALEFINE  0x6a
  26      =1  
  27      =1  //Power Mgt
  28      =1  #define POWER_OFF     0
  29      =1  #define POWER_STANDBY   1
  30      =1  #define POWER_SUSPEND   2
  31      =1  #define POWER_ON      3
  32      =1  
  33      =1  //void TWChipsDetect(void);
  34      =1  void SetAutoDetectStd(void);
  35      =1  void ClearAutoDetectStd(BYTE);
  36      =1  void I2CDeviceInitialize( CODE_P BYTE *RegSet);
  37      =1  
  38      =1  
  39      =1  //0x63.. Register Group
  40      =1  #define GROUP_YCbCr     0x40
  41      =1  #define GROUP_RGB     0
  42      =1  #define SelectPanelAttrRegGroup(A)        WriteTW88(0x70, (ReadTW88(0x70) & 0xbf) | A)
  43      =1  
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 28  

  44      =1  //#if defined TW8801 || defined TW8803
  45      =1  #define FB_MAIN   2
  46      =1  #define FB_NORMAL 1
  47      =1  #define FB_RGB    0
  48      =1  //void SetFBmode( BYTE mode );
  49      =1  //#endif // TW8801
  50      =1  
  51      =1  
  52      =1  //=============================================================================
  53      =1  //                               LCD Functions   
  54      =1  //=============================================================================
  55      =1  //BYTE GetLCDPowerState(void);
  56      =1  void SetLCDPowerState(BYTE dat);
  57      =1  
  58      =1  BYTE IsFreeRun(void);
  59      =1  #if defined( SUPPORT_PC ) || defined( SUPPORT_DTV )
           =1 void PanelFreeRun(BYTE on);
           =1 void PanelBlack(BYTE on);
           =1 #endif
  63      =1  #if 0
           =1 void PanelMute(BYTE on);
           =1 #endif
  66      =1  void LCDPowerON(BYTE mute); 
  67      =1  
  68      =1  #ifdef AWT_ML072S
  69      =1  void LCDPowerOFF(void);
  70      =1  #endif
  71      =1  
  72      =1  #ifdef Hs_debug
  73      =1  void LCDPower(void);
  74      =1  #endif
  75      =1  void DPMSmodeOFF(void);
  76      =1  void DPMSmodeON(void);
  77      =1  //=============================================================================
  78      =1  //                          Get PC Parameter Functions   
  79      =1  //=============================================================================
  80      =1  void GetInitPanelAttribute1(void);
  81      =1  //void GetInitPanelAttribute2(void);
  82      =1  void DefaultPanelAttributeForVideo(void);
  83      =1  void SetPVR(WORD pvr);
  84      =1  void SetPHR(WORD phr);
  85      =1  WORD GetPVR(void);
  86      =1  WORD GetPHR(void);
  87      =1  WORD GetHPN(void);
  88      =1  WORD GetVPN(void);
  89      =1  
  90      =1  //WORD GetVactive(void);
  91      =1  
  92      =1  WORD GetHstart(void);
  93      =1  WORD GetHend(void);
  94      =1  WORD GetVstart(void);
  95      =1  WORD GetVend(void);
  96      =1  void TuneLineBuffer(BYTE field);
  97      =1  void TuneLineBuffer4Video(BYTE field);
  98      =1  
  99      =1  #if defined (SUPPORT_DTV)
           =1 void SetCoarstForDTV(BYTE en);
           =1 #endif
 102      =1  
 103      =1  WORD GetHactiveStart(void);
 104      =1  WORD GetHactiveEnd(void);
 105      =1  WORD GetVactiveStart(void);
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 29  

 106      =1  //WORD GetVactiveLen(void);
 107      =1  BYTE GetVBackPorch(void);
 108      =1  void SetVBackPorch(BYTE val);
 109      =1  WORD GetPHP(void);
 110      =1  void SetPHP(WORD php);
 111      =1  void SetPVP(WORD period);
 112      =1  WORD GetPVP(void);
 113      =1  //void SetPanelRelatedRegisters(void);
 114      =1  //BYTE ChangedHPN(void);
 115      =1  //WORD GetVSUD(void);
 116      =1  
 117      =1  void SetDefaultPLL(void);
 118      =1  //void SetDefaultFPHSperiod(void);
 119      =1  //BYTE CalcPHP(DWORD ppf, BYTE tol);
 120      =1  //void ChangeFPHSperiod4DecoderInput(WORD vsud, BYTE tol);
 121      =1  
 122      =1  //-------------------------------------------------------------------
 123      =1  //                  Set Active Region Functions
 124      =1  //-------------------------------------------------------------------
 125      =1  void SetHactiveStart(WORD hstart);
 126      =1  void SetHactiveEnd(WORD hend);
 127      =1  void SetVactiveStart(WORD vstart);
 128      =1  //void SetVactiveLen(WORD van, WORD vstart);
 129      =1  void SetVactiveLen(WORD van);
 130      =1  //=============================================================================
 131      =1  //                     Set Measurement Window Functions   
 132      =1  //=============================================================================
 133      =1  void SetMeasureWindowH(WORD start, WORD stop);
 134      =1  void SetMeasureWindowV(WORD start, WORD stop);
 135      =1  //=============================================================================
 136      =1  //                          Video Input Functions   
 137      =1  //=============================================================================
 138      =1  BYTE IsVideoInput(void);
 139      =1  BYTE DetectDecoderInput(void);
 140      =1  //=============================================================================
 141      =1  //
 142      =1  //=============================================================================
 143      =1  #if defined( SUPPORT_PC ) || defined( SUPPORT_DTV )
           =1 void AutoPHPCalEnable(void);
           =1 void AutoPHPCalDisable(void);
           =1 #endif
 147      =1  void MakeStartInt(void);
 148      =1  void AVGAInput(void);
 149      =1  void DVIInput(void);
 150      =1  //void DVGAInput(void);
 151      =1  void DisableDVGA(void);
 152      =1  
 153      =1  void COMPOSITE1Input(void);
 154      =1  void COMPOSITE2Input(void);
 155      =1  void COMPOSITE3Input(void);
 156      =1  void COMPOSITE4Input(void);
 157      =1  
 158      =1  void SVIDEOInput(void);
 159      =1  void COMPONENTInput(void);
 160      =1  void ANALOGDTVInput(void);
 161      =1  void DTVInput(void);
 162      =1  void TVInput(void);
 163      =1  void SCARTInput(void);
 164      =1  
 165      =1  //=============================================================================
 166      =1  //                          Measurement Functions
 167      =1  //=============================================================================
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 30  

 168      =1  ///void SetPanelBitOrder(BYTE swap);
 169      =1  //void SetPanelSingleDouble(BYTE single);
 170      =1  
 171      =1  BYTE MeasureAndWait(BYTE flag);
 172      =1  
 173      =1  //WORD GetHCounter1(BYTE field);
 174      =1  //void SetHInitial(BYTE field, WORD counter);
 175      =1  //=============================================================================
 176      =1  //                          Invert Polarity Functions
 177      =1  //=============================================================================
 178      =1  void InvertHSYNCPolarity(void);
 179      =1  void InvertVSYNCPolarity(void);
 180      =1  //=============================================================================
 181      =1  //            Interrupt / SW Reset Control Functions
 182      =1  //=============================================================================
 183      =1  void SetInt(void);
 184      =1  //void ClearInt(void);
 185      =1  void SetEnDet(void);
 186      =1  void ClearEnDet(void);
 187      =1  void SWReset(void);
 188      =1  //void ClearSYNCLossStatus(void);
 189      =1  //void ClearSYNCChangeStatus(void);
 190      =1  //=============================================================================
 191      =1  //
 192      =1  //=============================================================================
 193      =1  BYTE IsBypassmode(void);
 194      =1  //BYTE IsInteraced(void);
 195      =1  void Clear_bypass(void);
 196      =1  void MaskOnSYNCInt(void);
 197      =1  void MaskOffSYNCInt(void);
 198      =1  //=============================================================================
 199      =1  //                                ZoomControl
 200      =1  //=============================================================================
 201      =1  void BypassZoom(void);
 202      =1  
 203      =1  void XscaleU(DWORD scale);
 204      =1  void XscaleD(DWORD scale);
 205      =1  void XScale2(DWORD scale);
 206      =1  void YScale2(DWORD scale);
 207      =1  WORD GetYScale(void);
 208      =1  //=============================================================================
 209      =1  //
 210      =1  //=============================================================================
 211      =1  WORD GetHSYNCPulse(void);
 212      =1  WORD GetVSYNCPulse(void);
 213      =1  //#if defined TW8801 || defined TW8803
 214      =1  WORD GetRelativePosition(void);
 215      =1  //#endif
 216      =1  //=============================================================================
 217      =1  //                MISC2 for decoder
 218      =1  //=============================================================================
 219      =1  #define BLUE_DECODER    2
 220      =1  #define BLACK_DECODER   0
 221      =1  
 222      =1  BYTE ForceDecoderOutput(BYTE color);
 223      =1  BYTE ClearForcedDecoderOutput(void);
 224      =1  //=============================================================================
 225      =1  //                CC and EDS
 226      =1  //=============================================================================
 227      =1  BYTE GetCCStatus(void);
 228      =1  void DisableCC(void);
 229      =1  void EnableCC(void);
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 31  

 230      =1  BYTE GetCCData(void);
 231      =1  BYTE IsCCEnabled(void);
 232      =1  void EnableEDS(void);
 233      =1  void DisableEDS(void);
 234      =1  void RecoverCCOverflow(void);
 235      =1  
 236      =1  #define CCFIFOHalfFull()      (ReadDecoder(CSTATUS) & 0x04)
 237      =1  //=============================================================================
 238      =1  //                Internal PLL
 239      =1  //=============================================================================
 240      =1  BYTE GetPOST(void);
 241      =1  void SetPLLS(BYTE plls);
 242      =1  BYTE GetREFDM(void);
 243      =1  void SetREFDM(BYTE refdm);
 244      =1  DWORD GetFBDN(void);
 245      =1  void SetFBDN(WORD fbdn, BYTE vcsel);
 246      =1  DWORD GetPPF(void);
 247      =1  void ChangeInternPLL(DWORD _PPF);
 248      =1  
 249      =1  //=============================================================================
 250      =1  //                Macros for attribute
 251      =1  //=============================================================================
 252      =1  //#define GetOSDTransReg()            ReadTW88(0xAE)
 253      =1  //#define SetOSDTransReg(AlphaV)          WriteTW88(0xAE, (BYTE)AlphaV )
 254      =1  
 255      =1  #define GetPanelContrastReg(gccolor)      ReadTW88(0x71+gccolor)
 256      =1  #define SetPanelContrastReg(sccolor, cval)    WriteTW88(0x71+sccolor,cval)
 257      =1  
 258      =1  #define GetPanelBrightnessReg(gbcolor)      ReadTW88(0x74+gbcolor);
 259      =1  #define SetPanelBrightnessReg(sbcolor, bval)  WriteTW88(0x74+sbcolor,bval);
 260      =1  
 261      =1  #define SetDTVBrightnessReg(bval)       WriteTW88(0x74,bval);
 262      =1  
 263      =1  #define GetPanelSaturationReg(gbcolor)      ReadTW88(0x72+gbcolor);
 264      =1  #define SetPanelSaturationReg(sbcolor, bval)  WriteTW88(0x72+sbcolor,bval);
 265      =1  
 266      =1  #define SetPanelSharpnessReg(bval)        WriteTW88(0x78,((bval&0x07)|0x38) );
 267      =1  
 268      =1  #define SetPanelHueReg(bval)          WriteTW88(0x70, (ReadTW88(0x70) & 0xc0 | (bval)) );
 269      =1  
 270      =1  #define GetVideoContrastReg()         ReadDecoder(CONTRAST)
 271      =1  #define SetVideoContrastReg(vcval)        WriteDecoder(CONTRAST, vcval)
 272      =1  
 273      =1  #define GetVideoBrightnessReg()         ReadDecoder(BRIGHT)
 274      =1  #define SetVideoBrightnessReg(vbval)      WriteDecoder(BRIGHT, vbval )
 275      =1  
 276      =1  #define GetVideoSaturationReg(gvstype)      ReadDecoder(SAT_U+gvstype)
 277      =1  #define SetVideoSaturationReg(svstype, vsval) WriteDecoder(SAT_U+svstype, vsval)
 278      =1  
 279      =1  #define GetVideoHueReg()            ReadDecoder(HUE)
 280      =1  #define SetVideoHueReg(vhval)         WriteDecoder(HUE, vhval )
 281      =1  
 282      =1  #define GetVideoSharpnessRegDef         (ReadDecoder(SHARPNESS) & 0x0f) 
 283      =1  
 284      =1  #define GetVideoSharpnessReg()          GetVideoSharpnessRegDef
 285      =1  //#define SetVideoSharpnessReg(vshval)      WriteDecoder(SHARPNESS, vshval )
 286      =1  #define SetVideoSharpnessReg(vshval)      WriteDecoder(SHARPNESS, ((ReadDecoder(SHARPNESS) & 0xf0) | (vshval 
             -& 0x0f) ) );
 287      =1  
 288      =1  #ifdef TW9908
           =1 #define SetVideoVPeakingReg(vshval)
           =1 #else
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 32  

 291      =1  #define SetVideoVPeakingReg(vshval)       WriteDecoder(V_PEAKING, ((ReadDecoder(V_PEAKING) & 0xf8) | (vshval 
             -& 0x07) ) );
 292      =1  #endif
 293      =1  
 294      =1  #define SetVideoHfilterReg(val)         WriteDecoder(HFILTER, ((ReadDecoder(HFILTER) & 0xf8) | (val & 0x07) )|
             -0x08 );
 295      =1  //----------------------------------------------------------------------------------
 296      =1  //color type
 297      =1  #define RED   0
 298      =1  #define GREEN 1
 299      =1  #define BLUE  2
 300      =1  #define WHITE 3
 301      =1  //saturation type
 302      =1  #define U_SAT 0
 303      =1  #define V_SAT 1
 304      =1  
 305      =1  //Alpha Blending Level
 306      =1  #define _0    0
 307      =1  #define _25   0x12
 308      =1  #define _37_5 0x13
 309      =1  #define _50   0x14
 310      =1  #define _100  0x18
 311      =1  
 312      =1  BYTE GetKey(BYTE repeat);
 313      =1  
 314      =1  /*
 315      =1  BYTE Mapping( int fromValue, struct RegisterInfo fromRange,
 316      =1                                   int * toValue, struct RegisterInfo toRange );
 317      =1  */
 318      =1  BYTE Mapping1( int fromValue, CODE_P struct RegisterInfo *fromRange,
 319      =1                                   int * toValue, CODE_P struct RegisterInfo *toRange );
 320      =1  #ifdef KEILC
 321      =1  #define Mapping2( A, B, C, D )      Mapping1( A, B, C, D )
 322      =1  #define Mapping3( A, B, C, D )      Mapping1( A, B, C, D )
 323      =1  #else
           =1 BYTE Mapping2( int fromValue, IDATA_P struct RegisterInfo *fromRange,
           =1                                  int * toValue, CODE_P struct RegisterInfo *toRange );
           =1 BYTE Mapping3( int fromValue, CODE_P struct RegisterInfo *fromRange,
           =1                                  int * toValue, IDATA_P struct RegisterInfo *toRange );
           =1 #endif
 329      =1  
 330      =1  BYTE GetAttributesFromNTSCSettings(BYTE index);
 331      =1  
 332      =1  #endif  // __TW88__
 333      =1  
  19          #include "etc_eep.h"
   1      =1  #ifndef __ETC_EEP__
   2      =1  #define __ETC_EEP__
   3      =1  
   4      =1  
   5      =1  ////eeprom.h
   6      =1  
   7      =1  //=========================================================================
   8      =1  //  EEPROM structure
   9      =1  //  0x00  BYTE  4 'TW88'
  10      =1  #define EEP_FWREV_MAJOR     0x04  //BYTE  1 F/W Rev.-major(Hex) 
  11      =1  #define EEP_FWREV_MINOR     0x05  //BYTE  1 F/W Rev.-minor(Hex)
  12      =1  #define EEP_DEBUGLEVEL      0x06  //BYTE  1 DebugLevel
  13      =1  //
  14      =1  #define EEP_AUTODETECT      0x07  //BYTE  1 Flag for Input Auto Detect  -0:Auto, 1:NTSC,....
  15      =1  #define EEP_AUTODETECTTYTE    0x08  //BYTE  1 Type of Auto-detect(will be value of register 0x1d)
  16      =1  //      ---------------------------------------------------------------
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 33  

  17      =1  #define EEP_WIDEMODE      0x09  //BYTE  1   Wide Mode
  18      =1  
  19      =1  #define EEP_AUTORECOGNITION   0x0a  //BYTE  1 Auto Recognition
  20      =1  #define EEP_VIDEOMODE     0x0b  //BYTE  1   Video Mode
  21      =1  
  22      =1  #define EEP_OSDLANG       0x0c  //BYTE  1   OSDLang           // 0
  23      =1  
  24      =1  #define EEP_OSDPOSITIONMODE   0x0d  //BYTE  1 OSD Position Mode
  25      =1  #define EEP_CCD         0x0e  //BYTE  1 Closed Caption- 0: off, 1:on
  26      =1  
  27      =1  #define EEP_INPUTSELECTION    0x0f  //BYTE  1 InputSelection
  28      =1  
  29      =1  //
  30      =1  #define EEP_PC_CONTRAST     0x10
  31      =1  #define EEP_PC_BRIGHT     0x11
  32      =1  
  33      =1  #define EEP_CONTRAST      0x12  //BYTE  1 Contrast 
  34      =1  #define EEP_BRIGHTNESS      0x13  //BYTE  1 Brightness
  35      =1  #define EEP_SATURATION_U    0x14  //BYTE  1 Saturation :U
  36      =1  #define EEP_SATURATION_V    0x15  //BYTE  1 Saturation :V
  37      =1  #define EEP_SHARPNESS     0x16  //BYTE  1 Sharpness 
  38      =1  #define EEP_HUE         0x17  //BYTE  1 Hue                    
  39      =1  
  40      =1  //====================================HS AWT 981001
  41      =1  #define  EEP_AutoMode           0xa0
  42      =1  #define  EEP_IMAGEMode          0xa1
  43      =1  #define  EEP_RearMode           0xa2
  44      =1  #define  EEP_COSDMode           0xa3
  45      =1  #define  EEP_GAUGEMode          0xa4
  46      =1  #define  EEP_CAMAMode           0xa5 
  47      =1  #define  EEP_CAMBMode           0xa6
  48      =1  #define  EEP_CAMCMode           0xa7
  49      =1  #define  EEP_CAMRMode           0xa8
  50      =1  #define  EEP_CAMOutMode         0xa9  
  51      =1  #define  EEP_TimeStep           0xaa
  52      =1  #define  EEP_Powerflag          0xab   
  53      =1  #define  EEP_ONOFFChoice        0xac 
  54      =1  
  55      =1  #define  EEP_PRIORITY           0xad
  56      =1  #define  EEP_JUMPMode           0xae
  57      =1  #define  EEP_NowModeState       0xaf
  58      =1  #define  EEP_SelectMode         0xb0
  59      =1  #define  EEP_PriorityOffSelectMode  0xb1
  60      =1  #define  EEP_AudioRecord    0xb2
  61      =1  
  62      =1  #define  EEP_FirstNumber    0xb3
  63      =1  #define  EEP_SecondNumber   0xb4
  64      =1  #define  EEP_ThridNumber    0xb5
  65      =1  #define  EEP_FourthNumber   0xb6
  66      =1  
  67      =1  #define  EEP_CAMNUMBER     0xb7
  68      =1  #define  EEP_PELCO       0xb8
  69      =1  #define  EEP_Baud_rate     0xb9
  70      =1  #define  EEP_TriggerVGA    0xba
  71      =1  #define  EEP_DVRDisplay    0xbb
  72      =1  #define  EEP_IMAGE_A_Mode    0xbc//andy A1.4 20100113
  73      =1  #define  EEP_IMAGE_B_Mode    0xbd//andy A1.4 20100113
  74      =1  #define  EEP_IMAGE_C_Mode    0xbe//andy A1.4 20100113
  75      =1  
  76      =1  #define  EEP_SDCardDetect    0xbf//andy A1.4 20100113
  77      =1  
  78      =1  #ifdef HTRV
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 34  

           =1 #define  EEP_Gauge_VStart  0x211   //WILLIAM-970318
           =1 static  BYTE GaugeVStart;
           =1 #endif
  82      =1  
  83      =1  #define  EEP_DELAYCAMA           0xC0 
  84      =1  #define  EEP_DELAYCAMB           0xC1
  85      =1  #define  EEP_DELAYCAMC           0xC2
  86      =1  #define  EEP_DELAYCAMR           0xC3
  87      =1  #ifdef USE_CAMD
           =1 #define  EEP_DELAYCAMD           0xC4
           =1 #endif
  90      =1  //#define  EEP_SelectModeBuf         0xb2
  91      =1  #define  EEP_ReverseMode    0xc5
  92      =1  #define  EEP_JUMPAV_TIMESET 0xc6
  93      =1  #if 0
           =1 #define  EEP_Resolution     0xc0
           =1 #define  EEP_FPS        0xc1
           =1 #define  EEP_Quality      0xc2
           =1 #define  EEP_RecordMode     0xc3
           =1 #define  EEP_RecordLength   0xc4
           =1 #define  EEP_PreAlarmLength   0xc5
           =1 #define  EEP_PostAlarmLength  0xc6
           =1 #endif
 102      =1  //====================================HS AWT 981001
 103      =1  
 104      =1  #ifdef AWT_ADD_TRIGGER_DELAY_FUN  
 105      =1  #define  EEP_CamADelay    0x21b
 106      =1  #define  EEP_CamBDelay    0x21c
 107      =1  #define  EEP_CamCDelay    0x21d
 108      =1  #define  EEP_CamRDelay    0x21e
 109      =1  #endif
 110      =1  //====================================
 111      =1  //
 112      =1  //        ---------------------------------------------------------------
 113      =1  #define EEP_PCAUDIOPVOL   0x37  //BYTE  1   AudioVol
 114      =1  #define EEP_AUDIOPVOL     0x38  //BYTE  1   AudioVol
 115      =1  #define EEP_AUDIOBALANCE    0x39  //BYTE  1   AudioBalance
 116      =1  //
 117      =1  //        ---------------------------------------------------------------
 118      =1  
 119      =1  #define EEP_BLOCKMOVIE      0x40  //BYTE  1 BlockedMovie:Blocked rating for Movie 
 120      =1  #define EEP_BLOCKTV       0x41  //BYTE  1 BlockedTV:Blocked rating for TV     
 121      =1  #define EEP_FVSLD       0x42  //BYTE  6
 122      =1  //                            7    6       4    3    2    1    0
 123      =1  //  FVSLD Level                        ALL   FV(V)   S    L    D    
 124      =1  //  0x43    BYTE    1   TV-Y            X  
 125      =1  //  0x44  BYTE    1   TV-Y7           X    X 
 126      =1  //  0x45  BYTE    1   TV-G            X 
 127      =1  //  0x46  BYTE    1   TV-PG           X       X    X    X    X
 128      =1  //  0x47  BYTE    1   TV-14           X       X    X    X    X 
 129      =1  //  0x48  BYTE    1   TV-MA           X       X    X    X
 130      =1  //
 131      =1  #define EEP_VCHIPPASSWORD   0x49  //BYTE  4   OSDPassword         //Defualt:3366
 132      =1  //      ---------------------------------------------------------------
 133      =1  //
 134      =1  //
 135      =1  //  0x61  WORD  2   PanelXRes
 136      =1  //  0x63  WORD  2 PanelYRes
 137      =1  //  0x65  BYTE  1 PanelHsyncMinPulseWidth
 138      =1  //  0x66  BYTE  1 PanelVsyncMinPulseWidth
 139      =1  //  0x67  WORD  2 PanelHminBackPorch
 140      =1  //  0x69  BYTE  1 PanelHsyncPolarity
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 35  

 141      =1  //  0x6a  BYTE  1 PanelVsyncPolarity
 142      =1  //  0x6b  WORD  2 PanelDotClock
 143      =1  //  0x6d  BYTE  1 PanelPixsPerClock
 144      =1  //  0x6e  BYTE  1 PanelDEonly
 145      =1  //      ---------------------------------------------------------------
 146      =1  //
 147      =1  //  0x80  PC Data
 148      =1  //
 149      =1  //      ---------------------------------------------------------------
 150      =1  //
 151      =1  //  0x300 TV Data
 152      =1  //
 153      =1  //  --- NTSC_TV -------------------------------------------------------------
 154      =1  //  CNT_SAVEDAIR      BYTE  1   Total count of saved Air TV Channel.
 155      =1  //  IDX_CURAIR        BYTE  1   Index of Current Air TV Channel
 156      =1  //  CHN_CURAIR        BYTE    1   Current Air TV Channel.
 157      =1  //
 158      =1  //  FIRSTSAVED_AIRCHN   BYTE    1 First saved Air TV channel no (maximum 100)
 159      =1  //  ....
 160      =1  //
 161      =1  //  CNT_SAVEDCABLE      BYTE  1   Total count of saved Cable TV Channel.
 162      =1  //  IDX_CURCABLE      BYTE  1   Index of Current Cable TV Channel
 163      =1  //  CHN_CURCABLE      BYTE    1   Current Cable TV Channel.
 164      =1  //
 165      =1  //  FIRSTSAVED_CABLECHN   BYTE  1 First saved Cable TV channel no (maximum 100)
 166      =1  //
 167      =1  //  --- PAL_TV --------------------------------------------------------------
 168      =1  //  PR_CUR          BYTE  1   Current PR no.
 169      =1  //  FIRST_SAVEDPR     DWORD 4   Freq of PR0.  (TOTAL_PR)
 170      =1  //  FIRST_SAVEDPR+4     DWORD   4   Freq of PR1.
 171      =1  //  .....
 172      =1  //
 173      =1  
 174      =1  
 175      =1  
 176      =1  //
 177      =1  // Offset of EEPROM
 178      =1  //
 179      =1  /*
 180      =1  #define VIDEOCONTRAST   0x18    // for NTSC.(PAL:0x20,SECAM:0x28)
 181      =1  #define VIDEOBRIGHTNESS   0x19
 182      =1  #define VIDEOSATURATION_U 0x1a
 183      =1  #define VIDEOSATURATION_V 0x1b
 184      =1  #define VIDEOHUE      0x1c    // only for NTSC
 185      =1  #define VIDEOSHARPNESS    0x1d
 186      =1  */
 187      =1  #define CCCOLOR   0x52
 188      =1  #define VOLZOOM   0x53
 189      =1  
 190      =1  #define PANELINFO 0x61
 191      =1  
 192      =1  // PAL_TV
 193      =1  #define  PR_CUR         0x301 
 194      =1  #define  FIRST_SAVEDPR      0x308 
 195      =1   #define TVFREQ_HIGH 0 
 196      =1   #define TVFREQ_LOW  1
 197      =1  #ifdef PAL_TV
           =1  #define TVFINETUNE  2
           =1     // NOT Finetune: 0 , Range: -32 ~ +32
           =1  #define TVPRSYSTEM  3  
           =1     // bit 7: Add:1 Ereased :0
           =1     // 
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 36  

           =1  #define TVCHNAME    4
           =1 
           =1  #define BYTEPERCHANNEL 9 
           =1 #endif
 207      =1  // NTSC_TV
 208      =1  #define  EEP_TVInputSel     0x302
 209      =1  #define  CHN_CURAIR       0x303 
 210      =1  #define  FIRSTSAVED_AIRCHN    0x308 
 211      =1  #define  CHN_CURCABLE     0x403 
 212      =1  #define  FIRSTSAVED_CABLECHN  0x408 
 213      =1  #ifdef NTSC_TV
           =1  #define TVFINETUNE  0
           =1     // NOT Finetune: 0 , Range: -32 ~ +32
           =1  #define TVPRSYSTEM  1  
           =1     // bit 7: Add:1 Ereased :0
           =1     // 
           =1  #define BYTEPERCHANNEL 2
           =1 #endif
 221      =1  
 222      =1  
 223      =1  
 224      =1  
 225      =1  WORD GetFWRevEE(void);
 226      =1  void SaveFWRevEE(WORD);
 227      =1  
 228      =1  BYTE GetDebugLevelEE(void);
 229      =1  void SaveDebugLevelEE(BYTE);
 230      =1  
 231      =1  #ifdef WIDE_SCREEN
           =1 BYTE GetWideModeEE(void);
           =1 void SaveWideModeEE(BYTE dl);
           =1 #endif
 235      =1  
 236      =1  
 237      =1  //BYTE GetRange4CoarseEE(void);
 238      =1  //void SaveRange4CoarseEE(BYTE);
 239      =1  
 240      =1  BYTE GetPossibleAutoDetectStdEE(void);
 241      =1  void SetPossibleAutoDetectStdEE(void);
 242      =1  
 243      =1  //BYTE GetOSDXPositionEE(void);
 244      =1  //BYTE GetOSDYPositionEE(void);
 245      =1  BYTE GetClosedCaptionFlagEE(void);
 246      =1  
 247      =1  BYTE GetVideoDatafromEE(BYTE);
 248      =1  void SaveVideoDatatoEE(BYTE offset, BYTE ndata);
 249      =1  
 250      =1  //BYTE GetVideoBrightnessEE(void);
 251      =1  //BYTE GetVideoSaturationEE(BYTE);
 252      =1  //BYTE GetVideoHueEE(void);
 253      =1  //BYTE GetVideoSharpnessEE(void);
 254      =1  
 255      =1  //void SaveVideoContrastEE(BYTE ndata);
 256      =1  //void SaveVideoBrightnessEE(BYTE ndata);
 257      =1  //void SaveVideoSaturationEE(BYTE, BYTE ndata);
 258      =1  //void SaveVideoHueEE(BYTE ndata);
 259      =1  //void SaveVideoSharpnessEE(BYTE ndata);
 260      =1  
 261      =1  BYTE GetOSDPositionModeEE(void);
 262      =1  void SaveOSDPositionModeEE(BYTE ndata);
 263      =1  //void SaveOSDXPositionEE(BYTE);
 264      =1  //void SaveOSDYPositionEE(BYTE);
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 37  

 265      =1  
 266      =1  void SaveClosedCaptionFlagEE(BYTE);
 267      =1  
 268      =1  BYTE GetBlockedTVEE(void);      
 269      =1  void SaveBlockedTVEE(BYTE vi);    
 270      =1  BYTE GetBlockedTV_FLDSLEE( BYTE level ) ;
 271      =1  void SaveBlockedTV_FLDSLEE(BYTE level, BYTE vi) ;
 272      =1  
 273      =1  BYTE GetBlockedMovieEE(void);   
 274      =1  void SaveBlockedMovieEE(BYTE vi); 
 275      =1  #if 0
           =1 BYTE GetInputSelectionEE(void);
           =1 #endif
 278      =1  void SaveInputSelectionEE(BYTE val);
 279      =1  
 280      =1  //BYTE GetOSDDurationEE(void);
 281      =1  //void SaveOSDDurationEE(BYTE val);
 282      =1  
 283      =1  BYTE GetOSDLangEE(void);
 284      =1  void SaveOSDLangEE(BYTE val);
 285      =1  
 286      =1  //ljy100303...BYTE GetOSDZoomEE(void);
 287      =1  //ljy100303...void SaveOSDZoomEE(BYTE val);
 288      =1  
 289      =1  BYTE GetAudioVolEE(void);
 290      =1  void SetAudioVolEE( BYTE vol );
 291      =1  BYTE GetPCAudioVolEE(void);
 292      =1  void SetPCAudioVolEE( BYTE vol );
 293      =1  #if 0
           =1 BYTE GetAudioBalanceEE(void);
           =1 void SetAudioBalanceEE( BYTE vol );
           =1 BYTE GetAudioBassEE(void);
           =1 void SetAudioBassEE( BYTE vol );
           =1 BYTE GetAudioTrebleEE(void);
           =1 void SetAudioTrebleEE( BYTE vol );
           =1 #endif
 301      =1  //BYTE GetAudioEffectEE(void);
 302      =1  //void SetAudioEffectEE( BYTE vol );
 303      =1  
 304      =1  void ClearBasicEE(void);
 305      =1  
 306      =1  BYTE ValidPassword(DATA_P BYTE *numstr, BYTE index);
 307      =1  BYTE SetNewPassword(DATA_P BYTE *numstr, BYTE index);
 308      =1  
 309      =1  //WORD GetPanelXRes(void);
 310      =1  //WORD GetPanelYRes(void);
 311      =1  BYTE GetPanelHsyncMinPulseWidth(void);
 312      =1  BYTE GetPanelVsyncMinPulseWidth(void);
 313      =1  WORD GetPanelHMinBackPorch(void);
 314      =1  BYTE GetPanelHsyncPolarity(void);
 315      =1  BYTE GetPanelVsyncPolarity(void);
 316      =1  WORD GetPanelDotClock(void);
 317      =1  WORD GetPanelMaxClock(void);
 318      =1  BYTE GetPanelPixsPerClock(void);
 319      =1  // Not used yet *************************  BYTE GetPanelDEonly(void);
 320      =1  
 321      =1  void AddTVChannelEE( BYTE tvtype, BYTE chn);
 322      =1  BYTE GetTVChannelEE( BYTE tvtype, BYTE inx);
 323      =1  void ResetTVChannelEE( BYTE tvtype );
 324      =1  BYTE GetTVChannelCntEE(BYTE tvtype);
 325      =1  BYTE GetTVChnIdxEE(BYTE tvtype);
 326      =1  BYTE GetCurTVChannelEE(BYTE tvtype);
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 38  

 327      =1  void SetTVChnIdxEE(BYTE tvtype, BYTE newd);
 328      =1  void SetCurTVChannelEE(BYTE tvtype, BYTE newd);
 329      =1  BYTE InsertTVChannelEE(BYTE tvtype, BYTE newd);
 330      =1  BYTE RemoveTVChannelEE(BYTE tvtype, BYTE newd);
 331      =1  
 332      =1  void SetTVPrEE(void);
 333      =1  BYTE GetTVPrEE(void);
 334      =1  void SetTVFreqEE(BYTE, WORD);
 335      =1  WORD GetTVFreqEE(BYTE);
 336      =1  void SetFineTuneEE(BYTE, BYTE);
 337      =1  BYTE GetFineTuneEE(BYTE);
 338      =1  BYTE GetTVPrSystem(BYTE);
 339      =1  void SetTVPrSystem(BYTE, BYTE);
 340      =1  BYTE GetTVInputSelEE(void);
 341      =1  void SetTVInputSelEE(BYTE);
 342      =1  
 343      =1  #define GetVInputStdDetectModeEE()        ReadEEP(EEP_AUTODETECTTYTE)
 344      =1  #define SaveVInputStdDetectModeEE(A)      WriteEEP(EEP_AUTODETECTTYTE, A)
 345      =1  
 346      =1  #define GetAutoRecogntionEE()         ReadEEP(EEP_AUTORECOGNITION)
 347      =1  #define SaveAutoRecogntionEE(A)         WriteEEP(EEP_AUTORECOGNITION, A)
 348      =1  
 349      =1  #define SetVideoModeEE( ctid )          WriteEEP( EEP_VIDEOMODE, ctid )
 350      =1  #define GetVideoModeEE()            ReadEEP( EEP_VIDEOMODE )
 351      =1  
 352      =1  #define GetPanelContrastEE()          ReadEEP(0x10)
 353      =1  
 354      =1  #if defined( SUPPORT_PC ) || defined( SUPPORT_DTV )
           =1 //#define GetPanelHueEE()             ReadEEP(0x28)
           =1 //#define GetPanelSharpnessEE()         ReadEEP(0x29)
           =1 #define GetPanelBrightnessEE()          ReadEEP(0x11)
           =1 //#define GetPanelSaturationEE()          ReadEEP(0x2a)
           =1 
           =1 //#define SavePanelHueEE(A)           WriteEEP(0x28, A)
           =1 //#define SavePanelSharpnessEE(A)         WriteEEP(0x29, A)
           =1 #define SavePanelContrastEE(A)          WriteEEP(0x10, A)
           =1 #define SavePanelBrightnessEE(A)        WriteEEP(0x11, A)
           =1 //#define SavePanelSaturationEE(A)        WriteEEP(0x2a, A)
           =1 #endif
 366      =1  
 367      =1  /*
 368      =1  #define GetDigitalVideoContrastEE()       ReadEEP(0x2b)
 369      =1  #define GetDigitalVideoBrightnessEE()     ReadEEP(0x2c)
 370      =1  #define GetDigitalVideoHueEE()          ReadEEP(0x2d)
 371      =1  #define GetDigitalVideoSaturationEE(off)    ReadEEP(0x2e+off)
 372      =1  
 373      =1  #define SaveDigitalVideoContrastEE(A)     WriteEEP(0x2b, A)
 374      =1  #define SaveDigitalVideoBrightnessEE(A)     WriteEEP(0x2c, A)
 375      =1  #define SaveDigitalVideoHueEE(A)        WriteEEP(0x2d, A)
 376      =1  #define SaveDigitalVideoSaturationEE(off,A)   WriteEEP(0x2e+off, A)
 377      =1  */
 378      =1  
 379      =1  #endif  // __ETC_EEP__
  20          #include "osdbasic.h"
   1      =1  //osd_basic.h
   2      =1  //LJY11012001
   3      =1  #ifndef __OSD_BASIC__
   4      =1  #define __OSD_BASIC__
   5      =1  
   6      =1  // osd_basic.h
   7      =1  // char code
   8      =1  //#include "apilib.h"
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 39  

   9      =1  
  10      =1  //ljy052903
  11      =1  //definition for internal OSD
  12      =1  #define FONT_WIDTH_TW88     12
  13      =1  #define FONT_HEIGHT_TW88    18
  14      =1  #define PIXS_PER_XSTEP_TW88   8
  15      =1  #define LINES_PER_YSTEP_TW88  4
  16      =1  #define MAX_OSDWINDOW_TW88    8
  17      =1  
  18      =1  // Using TW88 OSD for Menu
  19      =1  #define FONT_WIDTH      12
  20      =1  #define FONT_HEIGHT     18
  21      =1  #define PIXS_PER_XSTEP    8
  22      =1  #define LINES_PER_YSTEP   4
  23      =1  #define MAX_OSDWINDOW   4
  24      =1  
  25      =1  #define MAX_FONT_BYTES    27
  26      =1  #define RAMFONT   0xFE
  27      =1  #define ROMFONT   0xFF
  28      =1  #define NO_UDFONT     226 
  29      =1  
  30      =1  #define FONT_ROM  1
  31      =1  #define FONT_RAM  2
  32      =1  
  33      =1  
  34      =1  /////////////////////////////////
  35      =1  // Old Registers...
  36      =1  /*
  37      =1    #define TW88_WIN1ATTR   0x76
  38      =1    #define TW88_WIN1XSTART   0x77
  39      =1    #define TW88_WIN1YSTART   0x78
  40      =1    #define TW88_WIN1WIDTH    0x79
  41      =1    #define TW88_WIN1HEIGHT   0x7a
  42      =1    #define TW88_WIN1BRDATTR  0x7b
  43      =1    #define TW88_WIN1BRDWIDTH 0x7c
  44      =1    #define TW88_WIN1BRDHEIGHT  0x7d
  45      =1    #define TW88_WIN1XSPACE   0x7e    // between characters.
  46      =1    #define TW88_WIN1YSPACE   0x7f
  47      =1    #define TW88_WIN1SADDR    0x80    // starting address of OSD ram for Windows 1
  48      =1  */
  49      =1  /////////////////////////////////
  50      =1  
  51      =1  // OSD
  52      =1  #define TW88_ENABLERAM    0x94  // TW8804C
  53      =1  #define TW88_FONTRAMADDR  0x99  // TW8804C
  54      =1  #define TW88_FONTRAMDATA  0x9a  // TW8804C
  55      =1  #define TW88_OSDRAMADDRHI 0x95  // TW8804C
  56      =1  #define TW88_OSDRAMADDRLO 0x96  // TW8804C
  57      =1  #define TW88_OSDRAMDATAHI 0x97  // TW8804C
  58      =1  #define TW88_OSDRAMDATALO 0x98  // TW8804C
  59      =1  #define TW88_MULTISTART   0x9b  // TW8804C
  60      =1  #define TW88_OSDLOCKUPSEL 0x9c
  61      =1  #define TW88_WINNUM     0x9e  // TW8804C
  62      =1  #define TW88_WINATTR    0x9f  //
  63      =1  #define TW88_WINXSTART    0xa1  //
  64      =1  #define TW88_WINYSTART    0xa2  //
  65      =1  #define TW88_WINSTART_HI  0xa0  //
  66      =1  #define TW88_WINWIDTH   0xa3  //
  67      =1  #define TW88_WINHEIGHT    0xa4  //
  68      =1  #define TW88_WINBRDATTR   0xa5  //
  69      =1  #define TW88_WINBRDWIDTH  0xa6  //
  70      =1  #define TW88_WINBRDHEIGHT 0xa7  //
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 40  

  71      =1  #define TW88_WINSPACE   0xa8  // between characters.
  72      =1  #define TW88_WINZOOM    0xa9  //
  73      =1  #define TW88_WINSADDRHI   0xa9  // starting address of OSD ram for Windows 1
  74      =1  #define TW88_WINSADDRLO   0xaa  // starting address of OSD ram for Windows 1
  75      =1  
  76      =1  #define TW88_WINSHADOW    0xab  //
  77      =1  #define TW88_WINBLENDING  0xac  //
  78      =1  #define TW88_WINCHEFFECT  0xad  //
  79      =1  
  80      =1  
  81      =1  //Attributes for OSD
  82      =1  #define WINZOOMx1     0x01
  83      =1  #define WINZOOMx2     0x02
  84      =1  #define WINZOOMx3     0x03
  85      =1  #define WINZOOMx4     0x04
  86      =1  #define SHOW        0x08  
  87      =1  
  88      =1  #define EXTENDED_COLOR    0x80
  89      =1  #define BG_COLOR_BLACK    0x00  //For background color of window, border, and char. 
  90      =1  #define BG_COLOR_RED    0x40  
  91      =1  #define BG_COLOR_GREEN    0x20
  92      =1  #define BG_COLOR_YELLOW   0x60
  93      =1  #define BG_COLOR_BLUE   0x10
  94      =1  #define BG_COLOR_MAGENTA  0x50
  95      =1  #define BG_COLOR_CYAN   0x30
  96      =1  #define BG_COLOR_WHITE    0x70
  97      =1  #define BG_COLOR_TRANS    0x80  
  98      =1  #define BG_COLOR_MASK   0xf0  
  99      =1  
 100      =1  #define CH_COLOR_BLACK    0x00  //For color of char.
 101      =1  #define CH_COLOR_RED    0x04  
 102      =1  #define CH_COLOR_GREEN    0x02
 103      =1  #define CH_COLOR_YELLOW   0x06
 104      =1  #define CH_COLOR_BLUE   0x01
 105      =1  #define CH_COLOR_MAGENTA  0x05
 106      =1  #define CH_COLOR_CYAN   0x03
 107      =1  #define CH_COLOR_WHITE    0x07
 108      =1  #define CH_BLINK      0x08  
 109      =1  #define CH_COLOR_MASK   0x0f  
 110      =1  
 111      =1  #define CL_BLACK      0x00  //For color of char.
 112      =1  #define CL_BLUE       0x01
 113      =1  #define CL_GREEN      0x02
 114      =1  #define CL_CYAN       0x03
 115      =1  #define CL_RED        0x04  
 116      =1  #define CL_MAGENTA      0x05
 117      =1  #define CL_YELLOW     0x06
 118      =1  #define CL_WHITE      0x07
 119      =1  #define CL_BLINK      0x08  
 120      =1  
 121      =1  // 0x76*(WindowNo*0x0b)
 122      =1  #define WINDOW_DISABLE    0x00
 123      =1  #define WINDOW_ENABLE   0x01
 124      =1  #define WINDOW_3D_ENABLE    0x04
 125      =1  #define WINDOW_3D_BOTTOM    0x08
 126      =1  #define WINDOW_3D_TOP     0x00
 127      =1  #define WINDOW_TRANS_ENABLE 0x80
 128      =1  
 129      =1  #define WINBDCOLOR_ENABLE 0x80
 130      =1  #define WINBDCOLOR_EXTENT 0x80
 131      =1  
 132      =1  
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 41  

 133      =1  #define WINBLENDING_DISABLE 0x00
 134      =1  #define WINBLENDING_BACK    0x10
 135      =1  #define WINBLENDING_FORE    0x20
 136      =1  #define WINBLENDING_ALL     0x30
 137      =1  
 138      =1  #define WINSHADOW_ENABLE  0x80
 139      =1  // 0xc8*WindowNo
 140      =1  #define WIN_MULTICOLOR_ENABLE 0x20
 141      =1  #define WIN_CH_EFFECT_ENABLE  0x10
 142      =1  #define WIN_CH_EFFECT_SHADOW  0x08
 143      =1  
 144      =1  
 145      =1  
 146      =1  ///////// TW8804C /////////////
 147      =1  // Window Number
 148      =1  #define WINNUM1       1
 149      =1  #define WINNUM2       2
 150      =1  #define WINNUM3       3
 151      =1  #define WINNUM4       4
 152      =1  
 153      =1  // Index 0x9f Defination
 154      =1  #define WIN_BG_COLOR_EX   0x80
 155      =1  #define WIN_BG_COLOR_EX0  0x00
 156      =1  #define WIN_3D_TYPE     0x08
 157      =1  #define WIN_3D_TYPE0    0x00
 158      =1  #define WIN_3D_EN     0x04
 159      =1  #define WIN_3D_EN0      0x00
 160      =1  #define WIN_3D_LEVEL    0x02
 161      =1  #define WIN_EN        0x01
 162      =1  #define WIN_EN0       0x00
 163      =1  
 164      =1  // Index 0xa5 Defination
 165      =1  #define WIN_BD_EN     0x80
 166      =1  #define WIN_BD_EN0      0x00
 167      =1  #define WIN_BD_WIDTH(a)   a
 168      =1  
 169      =1  // Index 0xa6 Defination
 170      =1  #define WIN_BD_COLOR_EX   0x80
 171      =1  #define WIN_BD_COLOR_EX0  0x00
 172      =1  #define WIN_H_BD_W(a)   a
 173      =1  
 174      =1  // Index 0xa7 Defination
 175      =1  #define WIN_V_BD_W(a)   a
 176      =1  
 177      =1  // Index 0xa8
 178      =1  #define WIN_CH_VSPACE(a)  (a<<4)
 179      =1  #define WIN_CH_HSPACE(a)  a
 180      =1  
 181      =1  // Index 0xa9 Defination
 182      =1  #define WIN_VZOOM(a)    (a-1)
 183      =1  #define WIN_HZOOM(a)    (a-1)
 184      =1  #define WIN_SADDR(a)    a
 185      =1  
 186      =1  // Index 0xab
 187      =1  #define WIN_SHADOW_EN   0x80
 188      =1  #define WIN_SHADOW_EN0    0x00
 189      =1  #define WIN_SHADOW_W(a)   a
 190      =1  
 191      =1  // ad
 192      =1  #define WIN_SHADOW_COLOR_EX   0x80
 193      =1  #define WIN_SHADOW_COLOR_EX0  0x00
 194      =1  #define WIN_MULTI_EN      0x40
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 42  

 195      =1  #define WIN_MULTI_EN0     0x00
 196      =1  #define WIN_V_EXT_EN      0x20
 197      =1  #define WIN_V_EXT_EN0     0x00
 198      =1  #define WIN_CH_BDSH_SEL(a)    a
 199      =1  #define SEL_BORDER        0
 200      =1  #define SEL_SHADOW        1
 201      =1  #define WIN_CH_BDSH_COLOR_EX  0x08
 202      =1  #define WIN_CH_BDSH_COLOR_EX0 0x00
 203      =1  
 204      =1  #define OSD_Win_Num(a)      0x9e, a-1
 205      =1  #define OSD_Win_Start_Addr    0xa0
 206      =1  #define OSD_Win_Attr(a)       a
 207      =1  #define OSD_Win_Start(h,v)       (BYTE)(((WORD)h>>8) | (((WORD)v>>8)<<4)),(BYTE)h, (BYTE)v
 208      =1  #define OSD_Win_Width(a)      a
 209      =1  #define OSD_Win_Height(a)     a
 210      =1  #define OSD_Win_Border(a)     a
 211      =1  #define OSD_Win_HBorder(a)      a
 212      =1  #define OSD_Win_VBorder(a)      a
 213      =1  #define OSD_Win_CH_Space(a)     a
 214      =1  #define OSD_Win_ZM_SAddr(h,v,a)   ((h<<6)|(v<<4)|(a>>8)), (BYTE)a
 215      =1  #define OSD_Win_Shadow(a)     a
 216      =1  #define OSD_Win_Blending(a)     a
 217      =1  #define OSD_Win_CH_BorderShadow(a)  a
 218      =1  
 219      =1  
 220      =1  #define SetOSDWindowNum(winno)    WriteTW88(TW88_WINNUM, winno-1)
 221      =1  
 222      =1  //#define  OSD_Window_Attr(Trans_en,Color,3D_Type,3D_en,W_en)       (((( Trans_en | Color ) | 3D_Type) | 3
             -D_en) | W_en)
 223      =1  #define  OSD_Window_Attr(a,b,c,d,e)                 (((( a | b ) | c) | d) | e)
 224      =1  #define  OSD_WShadow_Attr(W_Shadow_en,Color,Width)          W_Shadow_en | Color | Width
 225      =1  //#define  OSD_Blending(en,level)                   en | (level & 0x0f)
 226      =1  //#define  OSD_Ch_Effect(Multi, Effect_En, ShadowBorder, Color)   Multi | Effect_En | ShadowBorder | Color 
             - 
 227      =1  
 228      =1  
 229      =1  struct OSDStrInfo 
 230      =1  {
 231      =1    BYTE  cnt;
 232      =1    WORD  addr;
 233      =1    BYTE  attr;
 234      =1    DWORD str;
 235      =1  };
 236      =1  /*
 237      =1  struct BarInfo {
 238      =1    struct RegisterInfo BarCnt;
 239      =1    BYTE  winno;
 240      =1    BYTE  xoff;
 241      =1    BYTE  yoff;
 242      =1    BYTE  color;
 243      =1    int   bar_cnt;
 244      =1  };
 245      =1  */
 246      =1  struct FontData {
 247      =1    BYTE  font[27];
 248      =1  } ;
 249      =1  
 250      =1  //====================================================================
 251      =1  //  Internal OSD Function
 252      =1  void CopyCharToOSDRAM_TW88(BYTE Addr, BYTE attr, BYTE ch);
 253      =1  void CopyUDCharToOSDRAM_TW88(BYTE Addr, BYTE attr, BYTE ch);
 254      =1  //BYTE GetOSDWindowWidth_TW88(BYTE winno);
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 43  

 255      =1  WORD GetOSDWindowSA_TW88(BYTE winno);
 256      =1  void SetOSDWindowX_TW88(BYTE winno, BYTE x);
 257      =1  void SetOSDWindowY_TW88(BYTE winno, BYTE y);
 258      =1  void SetOSDWindowWidth_TW88(BYTE winno, BYTE w);
 259      =1  void SetOSDWindowSA_TW88(BYTE winno, WORD sa);
 260      =1  
 261      =1  void SetOSDItalicsAndUnderline(BYTE italics, BYTE underline);
 262      =1  
 263      =1  void SetOSDHBorderWidth_TW88(BYTE winno, BYTE w);
 264      =1  //BYTE GetOSDWindowColor_TW88(BYTE winno);
 265      =1  void SetOSDWindowColor_TW88(BYTE CCWin, BYTE color);
 266      =1  void EnableOSDRAMAndChangeFont(BYTE type);
 267      =1  void WriteCharToOSDRAM(WORD addr, BYTE ch, BYTE attr);
 268      =1  
 269      =1  
 270      =1  void ShowOSDWindowAll(BYTE on);
 271      =1  void ShowOSDWindow_TW88(BYTE winno, BYTE onoff);
 272      =1  void ClearOSD_TW88(void);
 273      =1  //void CreateOSDWindow_TW88(BYTE winno, BYTE x, BYTE y, BYTE w, BYTE h, WORD sa, BYTE attr);
 274      =1  /*not yet!!
 275      =1  //ljy012304...CC_ADJUST_POS
 276      =1  void SetOSDWindowXS_TW88(BYTE winno, BYTE xs);
 277      =1  void SetOSDWindowYS_TW88(BYTE winno, BYTE ys);
 278      =1  */
 279      =1  
 280      =1  //====================================================================
 281      =1  //  OSDMenu Functions
 282      =1  
 283      =1  //--------------------------------------------------------------------
 284      =1  //  Functions used in only Menu
 285      =1  #define   CONVERT_CODE      0x80
 286      =1  
 287      =1  void InitOSDWindow(BYTE *ptr);
 288      =1  
 289      =1  WORD GetOSDWindowX(BYTE winno);
 290      =1  WORD GetOSDWindowY(BYTE winno);
 291      =1  BYTE CreateOSDWindowOutline(BYTE winno, BYTE w, BYTE color);
 292      =1  void CreateOSDMenuWindow(BYTE, BYTE, BYTE, BYTE, BYTE, BYTE, BYTE);
 293      =1  void ClearOSDLine(BYTE winno, BYTE sx, BYTE sy, BYTE cnt, BYTE attr);
 294      =1  void WriteStringToAddr(WORD addr, BYTE *str, BYTE cnt);
 295      =1  void DrawAttrString(WORD addr, BYTE *str, BYTE cnt);
 296      =1  void DrawAttrCnt(WORD addr, BYTE color, BYTE cnt);
 297      =1  void ClearDataCnt(WORD, BYTE);
 298      =1  #define   SetOSDWindowX(A, B)       SetOSDWindowX_TW88(A, B)
 299      =1  #define   SetOSDWindowY(A, B)       SetOSDWindowY_TW88(A, B)
 300      =1  
 301      =1  //--------------------------------------------------------------------
 302      =1  //  Functions used in Menu and others
 303      =1  #define   ShowOSDWindow(A, B)       ShowOSDWindow_TW88(A, B)
 304      =1  #define   ClearOSD()              ClearOSD_TW88()
 305      =1  
 306      =1  //================================================================
 307      =1  //  Font
 308      =1  void DownloadUDFont(void);
 309      =1  #ifdef Hs_debug
 310      =1  void DisplayROMFont(BYTE);
 311      =1  void DisplayRAMFont(BYTE);
 312      =1  #endif
 313      =1  void DownloadFont(BYTE cod, CODE_P BYTE *fontdata);
 314      =1  //void DisplayGrid( void );
 315      =1  //void DisplayCone( void );
 316      =1  //void DisplayJapanese( void );
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 44  

 317      =1  void TestRAMFont( void );
 318      =1  #ifdef BANKING
           =1 void DisplayMGrid( BYTE );
           =1 void DisplayMessage( void );
           =1 void DisplayChinese( void );
           =1 void DisplayJapanese( void );
           =1 void DisplayKorean( void );
           =1 void DisplayGridBank0( BYTE n );
           =1 void DisplayGridBank1( BYTE n );
           =1 #endif
 327      =1  
 328      =1  //================================================================
 329      =1  //  OSD COLOR
 330      =1  void Change_OSDColorLookup(void);
 331      =1  void Reset_OSDColorLookup(void);
 332      =1  
 333      =1  //====================================================================
 334      =1  //        Conversion
 335      =1  //====================================================================
 336      =1  BYTE utoa(WORD value, BYTE *str, BYTE radix);
 337      =1  BYTE ltoa_K(long value, BYTE *str, BYTE);
 338      =1  BYTE strlen( BYTE *str );
 339      =1  
 340      =1  #define CStrlen(A)        strlen(A)
 341      =1  
 342      =1  void WaitEndofDisplayArea(void);
 343      =1  
 344      =1  #endif  // __OSD_BASIC__
 345      =1  
  21          #include "monitor.h"
   1      =1  /* monitor.h */
   2      =1  
   3      =1  
   4      =1  void Mon_tx(BYTE ch);
   5      =1  
   6      =1  void MonHelp(void);
   7      =1  BYTE MonGetCommand(void);
   8      =1  
   9      =1  void Monitor(void);
  10      =1  
  11      =1  void Prompt(void);
  12      =1  
  13      =1  BYTE GetMonAddress(void);
  14      =1  #ifdef Monitor_debug
  15      =1  void SetMonAddress(BYTE addr);
  16      =1  #endif
  17      =1  void MonReadI2C(void);
  18      =1  void MonWriteI2C(void);
  19      =1  
  22          #include "cpu.h"
   1      =1  #ifndef __CPU__
   2      =1  #define __CPU__
   3      =1  
   4      =1  /*
   5      =1  #ifdef INTERNAL_MCU
   6      =1  #define I2C_SCL   P2_0
   7      =1  #else
   8      =1  #define I2C_SCL   P1_0
   9      =1  #endif
  10      =1  #define I2C_SDA   P1_1
  11      =1  */
  12      =1  #define I2C_SCL     P1_0
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 45  

  13      =1  #define I2C_SDA     P1_1
  14      =1  #ifdef SUPPORT_SDCARD  //ryan@20170824 
           =1 #define BUF_MAX     8
           =1 #define DVR_BUF_MAX   30
           =1 #else
  18      =1  #define BUF_MAX     20
  19      =1  #define DVR_BUF_MAX   8
  20      =1  #endif
  21      =1  
  22      =1  #ifdef REMO_RC5
           =1 #define EnableRemoconInt()  { RemoDataReady = 0;  EX0 = 1;}
           =1 #endif
  25      =1  void  InitCPU(void);
  26      =1  void  InitVars(void);
  27      =1  void  InitTechwell(void);
  28      =1  void  main_init (void);
  29      =1  void  PowerDown( void );
  30      =1  #if 0
           =1 BYTE  OKSleepTime(void);
           =1 #endif
  33      =1  #ifdef REMO_RC5
           =1 void  InitForRemo(void);
           =1 #endif
  36      =1  void  PowerLED(BYTE flag);
  37      =1  void    Wait_ms(WORD Tms);
  38      =1  BYTE    TW2835Command(char,char,char,char,char);
  39      =1  
  40      =1  #ifdef Monitor_debug
  41      =1  BYTE RS_rx(void);
  42      =1  #endif
  43      =1  
  44      =1  #endif
  45      =1  
  23          #include "Measure.h"
   1      =1  #ifndef __MEASURE__
   2      =1  #define __MEASURE__
   3      =1  
   4      =1  #define EE_DOS        0
   5      =1  
   6      =1  #define EE_SP1        1
   7      =1  #define EE_SP2        2
   8      =1  #define EE_SP3        3
   9      =1  
  10      =1  #define EE_VGA_60     4
  11      =1  #define EE_VGA_66     5
  12      =1  #define EE_VGA_70     6
  13      =1  #define EE_VGA_72     7
  14      =1  #define EE_VGA_75     8
  15      =1  #define EE_VGA_85     9
  16      =1  
  17      =1  #define EE_SVGA_56      10
  18      =1  #define EE_SVGA_60      11
  19      =1  #define EE_SVGA_70      12
  20      =1  #define EE_SVGA_72      13
  21      =1  #define EE_SVGA_75      14
  22      =1  #define EE_SVGA_85      15
  23      =1  
  24      =1  #define EE_832_75     16
  25      =1  
  26      =1  #define EE_XGA_60     17
  27      =1  #define EE_XGA_70     18
  28      =1  #define EE_XGA_72     19
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 46  

  29      =1  #define EE_XGA_75     20
  30      =1  #define EE_XGA_85     21
  31      =1  
  32      =1  #define EE_1152_60      22
  33      =1  #define EE_1152_70      23
  34      =1  #define EE_1152_75      24
  35      =1  
  36      =1  #define EE_SXGA_60      25
  37      =1  #define EE_SXGA_70      26
  38      =1  #define EE_SXGA_75      27
  39      =1  
  40      =1  #define EE_RGB_480P     28
  41      =1  #define EE_RGB_720P     29
  42      =1  #define EE_RGB_720P50   30
  43      =1  #define EE_RGB_1080I    31
  44      =1  #define EE_RGB_1080I50A   32
  45      =1  #define EE_RGB_1080I50B   33
  46      =1  #define EE_RGB_480I     34
  47      =1  #define EE_RGB_576I     35
  48      =1  #define EE_RGB_576P     36
  49      =1  
  50      =1  #define EE_YPbPr_480P   37
  51      =1  #define EE_YPbPr_720P   38
  52      =1  #define EE_YPbPr_720P50   39
  53      =1  #define EE_YPbPr_1080I    40
  54      =1  #define EE_YPbPr_1080I50A 41
  55      =1  #define EE_YPbPr_1080I50B 42
  56      =1  #define EE_YPbPr_480I   43
  57      =1  #define EE_YPbPr_576I   44
  58      =1  #define EE_YPbPr_576P   45
  59      =1  
  60      =1  #define EE_PC_MAX     46
  61      =1  
  62      =1  #define EE_PC_NO_SIGNAL   0xfe
  63      =1  #define EE_PC_UNKNOWN   0xff
  64      =1  
  65      =1  struct _PCMDATA {
  66      =1    CODE_P BYTE  Support;
  67      =1    CODE_P WORD  HAN;
  68      =1    CODE_P WORD  VAN;
  69      =1    CODE_P WORD  IVF;
  70      =1    CODE_P WORD  CLOCK;
  71      =1    CODE_P WORD  low;
  72      =1    CODE_P WORD  high;
  73      =1    CODE_P WORD  Hstart;
  74      =1    CODE_P WORD  Vstart;
  75      =1    CODE_P WORD  IPF;   // 0.1MHz
  76      =1    CODE_P WORD  PPF;   // 0.1MHz
  77      =1    CODE_P BYTE  VBack;
  78      =1  };
  79      =1  #ifndef AUTOCALC_PC
           =1 
           =1 #ifdef SUPPORT_DTV
           =1 struct _DTVMDATA {
           =1   CODE_P BYTE Reg62;
           =1   CODE_P BYTE RegBC;
           =1   CODE_P BYTE RegBD;
           =1   CODE_P BYTE RegBE;
           =1   CODE_P WORD PHP;
           =1 };
           =1 #endif
           =1 #endif
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 47  

  91      =1  #if defined XGA
           =1   #define MAX_PPF    90000000
           =1 #elif defined SXGA
           =1   #define MAX_PPF   135000000
           =1 #elif defined WXGA
           =1   #define MAX_PPF    90000000
           =1 #elif defined WVGA
  98      =1    #define MAX_PPF    90000000
  99      =1  #elif defined VGA
           =1   #define MAX_PPF    50000000
           =1 #elif defined SVGA
           =1   #define MAX_PPF    80000000
           =1 #elif defined QVGA
           =1   #define MAX_PPF    30000000
           =1 #elif defined WQVGA
           =1   #define MAX_PPF    30000000
           =1 #endif
 108      =1  
 109      =1  extern BYTE cLastSyncLoss;
 110      =1  extern BYTE PcMode;
 111      =1  
 112      =1  void CompLT170E2(void);
 113      =1  
 114      =1  WORD gap(WORD a, WORD b);
 115      =1  
 116      =1  //===================================================================
 117      =1  WORD GetHpnVpn(BYTE);
 118      =1  
 119      =1  WORD ConvertBasedOnInput(WORD dat);
 120      =1  
 121      =1  BYTE IsDTVInput(void);
 122      =1  
 123      =1  void SetVValueForPanel(WORD vstart);
 124      =1  BYTE SetHValueForPanel(void);
 125      =1  BYTE GetActiveRegion(void);
 126      =1  
 127      =1  BYTE DetectAndSetForVGAInput(BYTE);
 128      =1  #ifdef SUPPORT_DTV
           =1 BYTE DetectAndSetForDTVInput(BYTE);
           =1 #endif
 131      =1  void CheckPCinput(void);
 132      =1  void CheckDTVinput(void);
 133      =1  
 134      =1  WORD GetCoarseValue(void);
 135      =1  BYTE GetPhaseValue(void);
 136      =1  WORD SetPCCoarseValue(BYTE val);
 137      =1  BYTE SetPhaseValue(BYTE val);
 138      =1  
 139      =1  void DisplayResultAndSetActiveRange(void);
 140      =1  
 141      =1  //=============================================================================
 142      =1  //                    PC Screen Position Move Functions
 143      =1  //=============================================================================
 144      =1  void MoveActiveVpos(BYTE val);    // Up/Down
 145      =1  void MoveActiveHpos(BYTE val);    // Left/Right
 146      =1  
 147      =1  BYTE GetVPosition(void);
 148      =1  BYTE SetVPosition(BYTE val);
 149      =1  BYTE GetHPosition(void);
 150      =1  BYTE SetHPosition(BYTE val);
 151      =1  
 152      =1  void ResetPCValue(void);
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 48  

 153      =1  
 154      =1  CODE_P BYTE *GetPCInputSourceName(void);
 155      =1  BYTE AutoAdjust(void);
 156      =1  
 157      =1  #endif // __MEASURE__
  24          #include "Adc.h"
   1      =1  #ifndef __ADC__
   2      =1  #define __ADC__
   3      =1  
   4      =1  //=============================================================================
   5      =1  //                             ADC Functions
   6      =1  //=============================================================================
   7      =1  
   8      =1  void ADCPowerDown(bit flag);
   9      =1  void SelectADCmux(BYTE sel);
  10      =1  void SetADCMode(BYTE mode);
  11      =1  
  12      =1  void EnableADC(void);
  13      =1  void DisableADC(void);
  14      =1  
  15      =1  WORD GetCoarse(void);
  16      =1  void SetCoarse(WORD i);
  17      =1  void SetPhase(BYTE j);
  18      =1  BYTE GetPhaseCurrent(void);
  19      =1  BYTE SetVCORange(DWORD _IPF);
  20      =1  
  21      =1  //void SetADCGainOffset(BYTE gain, BYTE offset);
  22      =1  void AutoColorAdjust(void);
  23      =1  
  24      =1  void AutoColorAdjustForDTV(BYTE flag);
  25      =1  
  26      =1  #endif  // __ADC__
  27      =1  
  28      =1  
  29      =1  
  30      =1  
  31      =1  
  32      =1  
  33      =1  
  34      =1  
  35      =1  
  36      =1  
  37      =1  
  38      =1  
  39      =1  
  40      =1  
  41      =1  
  42      =1  
  43      =1  
  44      =1  
  45      =1  
  46      =1  
  47      =1  
  48      =1  
  49      =1  
  50      =1  
  51      =1  
  52      =1  
  25          
  26          #include "spi.h"
   1      =1  //spi.h
   2      =1  void WriteSPI(BYTE addr, WORD dat);
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 49  

   3      =1  void DeltaRGBPanelInit(void);
   4      =1  void SPIdelay(BYTE d);
   5      =1  WORD ReadSPI(BYTE addr);
   6      =1  
  27          
  28            IDATA BYTE MonAddress = 0x8a;   // initialize value should be placed to IDATA area
  29            BYTE MonIndex;
  30            BYTE MonRdata, MonWdata;
  31          
  32          BYTE monstr[30];    // buffer for input string
  33          BYTE *argv[7];
  34          BYTE argc=0;
  35          bit echo=1;
  36          
  37          static bit indirect=0;
  38          
  39          //extern      bit AutoDetect;
  40          extern   BYTE InputSelection;
  41          extern        BYTE  DebugLevel;
  42          extern  CODE  struct struct_IdName struct_InputSelection[];
  43          extern      bit NoInitAccess;
  44                bit AccessEnable;
  45          
  46          //void Loader(BYTE);
  47          
  48          //=============================================================================
  49          //
  50          //=============================================================================
  51          
  52          #ifdef Monitor_debug
  53          void Prompt(void)
  54          {
  55   1      
  56   1        if ( MonAddress == TW88I2CAddress )
  57   1          Printf("\r\nMCU_I2C[%02x]>", (WORD)MonAddress);
  58   1        else
  59   1          Printf("\r\nI2C[%02x]>", (WORD)MonAddress);
  60   1      }
  61          
  62          
  63          void Mon_tx(BYTE ch)
  64          {
  65   1        RS_tx(ch);
  66   1      }
  67          
  68          
  69          
  70          //=============================================================================
  71          //    Convert ASCII to Binery                                             
  72          //=============================================================================
  73          
  74          DWORD a2i(BYTE *str)
  75          {
  76   1        DWORD num=0;
  77   1        BYTE i;
  78   1      
  79   1        for(i=0; ; i++, str++) {
  80   2          if( *str=='\0' || *str==' ' ) break;
  81   2          num = num*10 + *str - '0';
  82   2        }
  83   1        return num;
  84   1      }
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 50  

  85          
  86          BYTE Asc1Bin(BYTE asc)
  87          {
  88   1        if(asc>='0' && asc <='9') return (asc - '0');
  89   1        if(asc>='a' && asc <='f') return (asc - 'a' + 0x0a);
  90   1        if(asc>='A' && asc <='F') return (asc - 'A' + 0x0a);
  91   1      
  92   1        #ifndef  Hs_debug
                return ('0');  //Pinchi 20150302 add for compiler warning
                #endif
  95   1      }
  96          
  97          BYTE Asc2Bin(PDATA_P BYTE *s)
  98          {
  99   1        WORD bin;
 100   1      
 101   1        bin = 0;
 102   1        while(*s != '\0' && *s !=' ') {
 103   2          bin = bin<<4;
 104   2          bin = bin + Asc1Bin(*s);
 105   2          s++;
 106   2        }
 107   1        return (bin);
 108   1      }
 109          
 110          
 111          //=============================================================================
 112          BYTE toupper(BYTE ch)
 113          {
 114   1        if( ch>='a' && ch<='z' )
 115   1          return (ch - 'a' + 'A');
 116   1      
 117   1        #ifndef  Hs_debug
                return ('A');  //Pinchi 20150302 add for compiler warning
                #endif
 120   1      }
 121          
 122          
 123          int stricmp(BYTE *ptr1, BYTE *ptr2)
 124          {
 125   1        int   i;
 126   1        int   ret;
 127   1        
 128   1        for(i=0; *ptr1; i++) {
 129   2          ret = toupper(*ptr1++) - toupper(*ptr2++);
 130   2          if( ret ) return ret;
 131   2        }
 132   1        return 0;
 133   1      }
 134          #endif
 135          //=============================================================================
 136          //
 137          //=============================================================================
 138          #ifdef Monitor_debug
 139          void SetMonAddress(BYTE addr)
 140          {
 141   1        MonAddress = addr;
 142   1      }
 143          #endif
 144          
 145          #ifdef Monitor_debug
 146          void MonReadI2C(void)
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 51  

 147          {
 148   1        if( argc>=2 ) MonIndex = Asc2Bin( argv[1] );
 149   1        else  {
 150   2          Printf("   --> Missing parameter !!!");
 151   2          return;
 152   2        }
 153   1      
 154   1        if ( MonAddress == TW88I2CAddress )
 155   1          MonRdata = ReadTW88(MonIndex);
 156   1        else
 157   1          MonRdata = ReadI2C(MonAddress, MonIndex);
 158   1      
 159   1        if( echo )
 160   1          Printf("\r\nRead %2xh:%2xh", (WORD)MonIndex, (WORD)MonRdata); 
 161   1        
 162   1        MonWdata = MonRdata;
 163   1      }
 164          
 165          
 166          void MonWriteI2C(void)
 167          {
 168   1        if( argc<3 ) {
 169   2          Printf("   --> Missing parameter !!!");
 170   2          return;
 171   2        }
 172   1        
 173   1        MonIndex = Asc2Bin( argv[1] );
 174   1        MonWdata = Asc2Bin( argv[2] );
 175   1        
 176   1        if( echo ) {
 177   2          Printf("\r\nWrite %2xh:%2xh ", (WORD)MonIndex, (WORD)MonWdata);
 178   2          if ( MonAddress == TW88I2CAddress ) {
 179   3            WriteTW88(MonIndex, MonWdata);
 180   3            MonRdata = ReadTW88(MonIndex);
 181   3          }
 182   2          else {
 183   3            WriteI2C(MonAddress, MonIndex, MonWdata);
 184   3            MonRdata = ReadI2C(MonAddress, MonIndex);
 185   3          }
 186   2            Printf("==> Read %2xh:%2xh", (WORD)MonIndex, (WORD)MonRdata);
 187   2        }
 188   1        else {
 189   2          if ( MonAddress == TW88I2CAddress ) {
 190   3            WriteTW88(MonIndex, MonWdata);
 191   3          }
 192   2          else {
 193   3            WriteI2C(MonAddress, MonIndex, MonWdata);
 194   3          }
 195   2        }
 196   1      }
 197          
 198          #endif
 199          
 200          
 201          #ifdef Monitor_debug
 202          void MonIncDecI2C(BYTE inc)
 203          {
 204   1      
 205   1        switch(inc){
 206   2        case 0:  MonWdata--;  break;
 207   2        case 1:  MonWdata++;  break;
 208   2        case 10: MonWdata-=0x10;  break;
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 52  

 209   2        case 11: MonWdata+=0x10;  break;
 210   2        }
 211   1      
 212   1      
 213   1        if ( MonAddress == TW88I2CAddress ) {
 214   2          WriteTW88(MonIndex, MonWdata);
 215   2          MonRdata = ReadTW88(MonIndex);
 216   2        }
 217   1        else {
 218   2          WriteI2C(MonAddress, MonIndex, MonWdata);
 219   2          MonRdata = ReadI2C(MonAddress, MonIndex);
 220   2        }
 221   1      
 222   1        if( echo ) {
 223   2          Printf("Write %2xh:%2xh ", (WORD)MonIndex, (WORD)MonWdata);
 224   2          Printf("==> Read %2xh:%2xh", (WORD)MonIndex, (WORD)MonRdata);
 225   2        }
 226   1      
 227   1        Prompt();
 228   1      
 229   1      }
 230          
 231          void MonDumpI2C(void)
 232          {
 233   1        BYTE ToMonIndex;
 234   1        int  cnt=8;
 235   1      
 236   1        if( argc>=2 ) MonIndex = Asc2Bin(argv[1]);
 237   1        if( argc>=3 ) ToMonIndex = Asc2Bin(argv[2]);
 238   1        else ToMonIndex = MonIndex+cnt;
 239   1        if ( ToMonIndex < MonIndex ) ToMonIndex = 0xFF;
 240   1        cnt = ToMonIndex - MonIndex + 1;
 241   1      
 242   1        if( echo ) {
 243   2          if ( MonAddress == TW88I2CAddress ) {
 244   3            for ( ; cnt > 0; cnt-- ) {
 245   4              MonRdata = ReadTW88(MonIndex);
 246   4              Printf("\r\n==> Read %2xh:%2xh", (WORD)MonIndex, (WORD)MonRdata);
 247   4              MonIndex++;
 248   4            }
 249   3          }
 250   2          else {
 251   3            for ( ; cnt > 0; cnt-- ) {
 252   4              MonRdata = ReadI2C(MonAddress, MonIndex);
 253   4              Printf("\r\n==> Read %2xh:%2xh", (WORD)MonIndex, (WORD)MonRdata);
 254   4              MonIndex++;
 255   4            }
 256   3          }
 257   2        }
 258   1        else {
 259   2          if ( MonAddress == TW88I2CAddress ) {
 260   3            for ( ; cnt > 0; cnt-- ) {
 261   4              MonRdata = ReadTW88(MonIndex);
 262   4              MonIndex++;
 263   4            }
 264   3          }
 265   2          else {
 266   3            for ( ; cnt > 0; cnt-- ) {
 267   4              MonRdata = ReadI2C(MonAddress, MonIndex);
 268   4              MonIndex++;
 269   4            }
 270   3          }
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 53  

 271   2        }
 272   1      }
 273          
 274          //-----------------------------------------------------------------------------
 275          
 276          void MonNewReadI2C(void)
 277          {
 278   1        BYTE Slave;
 279   1      
 280   1        if( argc>=3 ) MonIndex = Asc2Bin( argv[2] );
 281   1        else  {
 282   2          Printf("   --> Missing parameter !!!");
 283   2          return;
 284   2        }
 285   1        Slave = Asc2Bin(argv[1]);
 286   1      
 287   1        if ( Slave == TW88I2CAddress )
 288   1          MonRdata = ReadTW88(MonIndex);
 289   1        else
 290   1          MonRdata = ReadI2C(Slave, MonIndex);
 291   1      
 292   1        if( echo )
 293   1          Printf("\r\n<R>%2x[%2x]=%2x", (WORD)Slave, (WORD)MonIndex, (WORD)MonRdata);
 294   1        
 295   1        MonWdata = MonRdata;
 296   1      }
 297          
 298          void MonNewWriteI2C(void)
 299          {
 300   1        BYTE Slave;
 301   1      
 302   1        if( argc<4 ) {
 303   2          Printf("   --> Missing parameter !!!");
 304   2          return;
 305   2        }
 306   1        
 307   1        MonIndex = Asc2Bin( argv[2] );
 308   1        MonWdata = Asc2Bin( argv[3] );
 309   1        Slave = Asc2Bin(argv[1]);
 310   1        
 311   1        if ( Slave == TW88I2CAddress ) {
 312   2          WriteTW88(MonIndex, MonWdata);
 313   2          MonRdata = ReadTW88(MonIndex);
 314   2        }
 315   1        else {
 316   2          WriteI2C(Slave, MonIndex, MonWdata);
 317   2          MonRdata = ReadI2C(Slave, MonIndex);
 318   2          }
 319   1      
 320   1        if( echo )
 321   1          Printf("\r\n<R>%2x[%2x]=%2x", (WORD)Slave, (WORD)MonIndex, (WORD)MonRdata);
 322   1      
 323   1      }
 324          
 325          void MonNewDumpI2C(void)
 326          {
 327   1        BYTE  ToMonIndex, Slave;
 328   1        WORD  i;
 329   1        
 330   1        if( argc>=2 ) MonIndex = Asc2Bin(argv[2]);
 331   1        if( argc>=3 ) ToMonIndex = Asc2Bin(argv[3]);
 332   1        Slave = Asc2Bin(argv[1]);
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 54  

 333   1      
 334   1        if( echo ) {
 335   2          if ( Slave == TW88I2CAddress ) {
 336   3            for(i=MonIndex; i<=ToMonIndex; i++) {
 337   4              MonRdata = ReadTW88(i);
 338   4                  Printf("\r\n<R>%2x[%2x]=%2x", (WORD)Slave, (WORD)i, (WORD)MonRdata);
 339   4            }
 340   3          }
 341   2          else {
 342   3            for(i=MonIndex; i<=ToMonIndex; i++) {
 343   4              MonRdata = ReadI2C(Slave, i);
 344   4                  Printf("\r\n<R>%2x[%2x]=%2x", (WORD)Slave, (WORD)i, (WORD)MonRdata);
 345   4            }
 346   3          }
 347   2        }
 348   1        else {
 349   2          if ( Slave == TW88I2CAddress ) {
 350   3            for(i=MonIndex; i<=ToMonIndex; i++) {
 351   4              MonRdata = ReadTW88(i);
 352   4            }
 353   3          }
 354   2          else {
 355   3            for(i=MonIndex; i<=ToMonIndex; i++) {
 356   4              MonRdata = ReadI2C(Slave, i);
 357   4            }
 358   3          }
 359   2        }
 360   1      }
 361          
 362          
 363          void MonWriteBit(void)
 364          {
 365   1        BYTE mask, i, FromBit, ToBit,  MonMask, val;
 366   1        BYTE Slave;
 367   1        // b 88 index startbit|endbit data
 368   1      
 369   1        if( argc<5 ) {
 370   2          Printf("   --> Missing parameter !!!");
 371   2          return;
 372   2        }
 373   1        Slave = Asc2Bin(argv[1]);
 374   1      
 375   1        MonIndex = Asc2Bin( argv[2] );
 376   1        FromBit  = (Asc2Bin( argv[3] ) >> 4) & 0x0f;
 377   1        ToBit  = Asc2Bin( argv[3] )  & 0x0f;
 378   1        MonMask  = Asc2Bin( argv[4] );
 379   1      
 380   1        if( FromBit<ToBit || FromBit>7 || ToBit>7) {
 381   2          Printf("\r\n   --> Wrong range of bit operation !!!");
 382   2          return;
 383   2        }
 384   1        
 385   1        mask = 0xff; 
 386   1        val=0x7f;
 387   1        for(i=7; i>FromBit; i--) {
 388   2          mask &= val;
 389   2          val = val>>1;
 390   2        }
 391   1      
 392   1        val=0xfe;
 393   1        for(i=0; i<ToBit; i++) {
 394   2          mask &= val;
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 55  

 395   2          val = val<<1;
 396   2        }
 397   1      
 398   1        if ( Slave == TW88I2CAddress ) {
 399   2          MonRdata = ReadTW88(MonIndex);
 400   2          MonWdata = (MonRdata & (~mask)) | (MonMask & mask);
 401   2              
 402   2          WriteTW88(MonIndex, MonWdata);
 403   2          MonRdata = ReadTW88(MonIndex);
 404   2        }
 405   1        else {
 406   2          MonRdata = ReadI2C(Slave, MonIndex);
 407   2          MonWdata = (MonRdata & (~mask)) | (MonMask & mask);
 408   2              
 409   2          WriteI2C(Slave, MonIndex, MonWdata);
 410   2          MonRdata = ReadI2C(Slave, MonIndex);
 411   2        }
 412   1      
 413   1        if( echo )
 414   1          Printf("\r\n<R>%2x[%2x]=%2x", (WORD)Slave, (WORD)MonIndex, (WORD)MonRdata);
 415   1      
 416   1      }
 417          #endif
 418          
 419          #if defined( SUPPORT_PC ) || defined( SUPPORT_DTV )
              void PclkAccess(void)
              {
                DWORD pclk;
              
                if( argc > 2 ) {
                  Printf("   --> Too many parameter !!!");
                  return;
                }
              
                if( argc==2 ) {
                  pclk = (DWORD)a2i(argv[1]) * 1000000;
                  Printf("\r\n --> Set Pclk:  %ld Hz ", pclk);
              //    Printf("\r\n Not Suuport ");
                  ChangeInternPLL(pclk);
                }
                
                if( argc==1)   GetPPF();
                
              }
              #endif
 440          
 441          #ifdef  Monitor_debug
 442          void MonTxDump(void)
 443          {
 444   1        WORD  count;
 445   1      
 446   1        if ( argc < 2 ) {
 447   2          Puts("\r\nInsufficient parameters...");
 448   2          return;
 449   2        }
 450   1        count = (WORD)a2i(argv[1]);
 451   1        do {
 452   2          RS_tx((count&0x1F)+0x20);
 453   2          count--;
 454   2        } while ( count != 0 );
 455   1      }
 456          #endif
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 56  

 457          //=============================================================================
 458          //      Help Message
 459          //=============================================================================
 460          #ifdef Monitor_debug
 461          void MonHelp(void)
 462          {
 463   1        Printf("\r\n=======================================================");
 464   1        Printf("\r\n>>>     Welcome to Techwell Monitor  Rev 1.00     <<<");
 465   1        Printf("\r\n=======================================================");
 466   1        Printf("\r\n   R ii             ; Read data");
 467   1        Printf("\r\n   W ii dd          ; Write data");
 468   1        Printf("\r\n   D [ii] [cc]      ; Dump");
 469   1        Printf("\r\n   C aa             ; Change I2C address");
 470   1        Printf("\r\n   M ?              ; Current Input");
 471   1        Printf("\r\n   M dd             ; Change Input");
 472   1        Printf("\r\n   Access [0,1]     ; Program TW88xx Access OFF/ON");
 473   1        Printf("\r\n   AutoDetect [0,1] ; PC Automode OFF/ON");
 474   1        Printf("\r\n   PCAuto       ; RUN PC Auto Adjust");
 475   1        Printf("\r\n   Debug [0..255]   ; Debuging display level");
 476   1        Printf("\r\n   Echo On/Off      ; Terminal Echoing On/Off");
 477   1        Printf("\r\n   Delta            ; Init DeltaRGB Panel");
 478   1        Printf("\r\n   Delta w ii dh dl; SPI Write to DeltaRGB Panel");
 479   1        Printf("\r\n");
 480   1        Printf("\r\n=======================================================");
 481   1        Printf("\r\n");
 482   1      }
 483          
 484          //=============================================================================
 485          //
 486          //=============================================================================
 487          BYTE MonGetCommand(void)
 488          {
 489   1        static BYTE comment=0;
 490   1        static BYTE incnt=0, last_argc=0;
 491   1        BYTE i, ch;
 492   1        BYTE ret=0;
 493   1      
 494   1        if( !RS_ready() ) return 0;
 495   1      #ifdef Monitor_debug
 496   1        ch = RS_rx();
 497   1      #endif
 498   1        //----- if comment, echo back and ignore -----
 499   1        if( comment ) {
 500   2          if( ch=='\r' || ch==0x1b ) comment = 0;
 501   2          else { 
 502   3            Mon_tx(ch);
 503   3            return 0;
 504   3          }
 505   2        }
 506   1        else if( ch==';' ) {
 507   2          comment = 1;
 508   2          Mon_tx(ch);
 509   2          return 0;
 510   2        }
 511   1      
 512   1        //=====================================
 513   1        switch( ch ) {
 514   2      
 515   2        case 0x1b:
 516   2          argc = 0;
 517   2          incnt = 0;
 518   2          comment = 0;
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 57  

 519   2          Prompt();
 520   2          return 0;
 521   2      
 522   2        //--- end of string
 523   2        case '\r':
 524   2      
 525   2          if( incnt==0 ) {
 526   3            Prompt();
 527   3            break;
 528   3          }
 529   2      
 530   2          monstr[incnt++] = '\0';
 531   2          argc=0;
 532   2      
 533   2          for(i=0; i<incnt; i++) if( monstr[i]!=' ' ) break;
 534   2      
 535   2          if( !monstr[i] ) {
 536   3            incnt = 0;
 537   3            comment = 0;
 538   3            Prompt();
 539   3            return 0;
 540   3          }
 541   2          argv[0] = &monstr[i];
 542   2          for(; i<incnt; i++) {
 543   3            if( monstr[i]==' ' || monstr[i]=='\0' ) {
 544   4              monstr[i]='\0';
 545   4                 //Printf("(%s) ",  argv[argc]);
 546   4              i++;
 547   4              while( monstr[i]==' ' ) i++;
 548   4              argc++;
 549   4              if( monstr[i] ){
 550   5                 argv[argc] = &monstr[i];
 551   5              }
 552   4            }
 553   3          }
 554   2      
 555   2          ret = 1;
 556   2          last_argc = argc;
 557   2          incnt = 0;
 558   2          
 559   2          break;
 560   2      
 561   2        //--- repeat command
 562   2        case '/':
 563   2          argc = last_argc;
 564   2          ret = 1;
 565   2          break;
 566   2      
 567   2        //--- back space
 568   2        case 0x08:
 569   2          if( incnt ) {
 570   3            incnt--;
 571   3            Mon_tx(ch);
 572   3            Mon_tx(' ');
 573   3            Mon_tx(ch);
 574   3          }
 575   2          break;
 576   2      
 577   2        //--- decreamental write
 578   2        case ',':
 579   2          if( incnt ) {
 580   3            Mon_tx(ch);
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 58  

 581   3            monstr[incnt++] = ch;
 582   3          }
 583   2          else
 584   2            MonIncDecI2C(0);
 585   2          break;
 586   2      
 587   2        case '<':
 588   2          if( incnt ) {
 589   3            Mon_tx(ch);
 590   3            monstr[incnt++] = ch;
 591   3          }
 592   2          else
 593   2            MonIncDecI2C(10);
 594   2          break;
 595   2        //--- increamental write
 596   2        case '.':
 597   2          if( incnt ) {
 598   3            Mon_tx(ch);
 599   3            monstr[incnt++] = ch;
 600   3          }
 601   2          else
 602   2            MonIncDecI2C(1);
 603   2          break;
 604   2      
 605   2        case '>':
 606   2          if( incnt ) {
 607   3            Mon_tx(ch);
 608   3            monstr[incnt++] = ch;
 609   3          }
 610   2          else
 611   2            MonIncDecI2C(11);
 612   2          break;
 613   2      
 614   2        default:
 615   2          Mon_tx(ch);
 616   2          monstr[incnt++] = ch;
 617   2          break;
 618   2        }
 619   1      
 620   1        if( ret ) {
 621   2          comment = 0;
 622   2          last_argc = argc;
 623   2          return ret;
 624   2        }
 625   1        else {
 626   2          return ret;
 627   2        }
 628   1      }
 629          #endif
 630          //*****************************************************************************
 631          //        Monitoring Command
 632          //*****************************************************************************
 633          #ifdef Monitor_debug
 634          void Monitor(void)
 635          {
 636   1        if( !MonGetCommand() ) return;
 637   1      
 638   1        //--------------------------------------------------
 639   1        // Check Indirect command
 640   1        /*
 641   1        if( !stricmp( argv[0], "I" ) )      indirect=1; 
 642   1        else if( !stricmp( argv[0], "O" ) )   indirect=1; 
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 59  

 643   1      
 644   1        else if( !stricmp( argv[0], "," ) )   indirect=0; 
 645   1        else if( !stricmp( argv[0], ">" ) )   indirect=0; 
 646   1        else if( !stricmp( argv[0], "<" ) )   indirect=0; 
 647   1        else if( !stricmp( argv[0], "." ) )   indirect=0; 
 648   1        else  indirect=0; 
 649   1        */
 650   1        indirect = 0;
 651   1      
 652   1        //---------------- Write Register -------------------
 653   1        if( !stricmp( argv[0], "W" ) ) {
 654   2          MonWriteI2C();
 655   2        }
 656   1        else if( !stricmp( argv[0], ")" ) ) {
 657   2          indirect=0;
 658   2          MonNewWriteI2C();
 659   2        }
 660   1        /*
 661   1        else if( !stricmp( argv[0], "O" ) ) {     // inderect addressing for 8806
 662   1          MonIndex = Asc2Bin( argv[1] );
 663   1          MonWdata = Asc2Bin( argv[2] );
 664   1          WriteI2C(MonAddress, 0xc5, MonIndex);
 665   1          WriteI2C(MonAddress, 0xc6, MonWdata);
 666   1          MonRdata = ReadI2C(MonAddress, 0xc6);
 667   1          Printf("\r\n==> Read %2xh:%2xh", (WORD)MonIndex, (WORD)MonRdata);
 668   1        }
 669   1        */
 670   1        //---------------- Read Register --------------------
 671   1        else if ( !stricmp( argv[0], "R" ) ) {
 672   2          MonReadI2C();
 673   2        }
 674   1        else if ( !stricmp( argv[0], "(" ) ) {
 675   2          indirect=0;
 676   2          MonNewReadI2C();
 677   2        }
 678   1        /*
 679   1        else if( !stricmp( argv[0], "i" ) ) {
 680   1          MonIndex = Asc2Bin( argv[1] );
 681   1          WriteI2C(MonAddress, 0xc5, MonIndex);
 682   1          MonRdata = ReadI2C(MonAddress, 0xc6);
 683   1          Printf("\r\n==> Read %2xh:%2xh", (WORD)MonIndex, (WORD)MonRdata);
 684   1      
 685   1        }
 686   1        */
 687   1        //---------------- Dump Register --------------------
 688   1        else if( !stricmp( argv[0], "D" ) ) {
 689   2          Puts("\r\ndump start");
 690   2          MonDumpI2C();
 691   2        }
 692   1        else if( !stricmp( argv[0], "&" ) ) {
 693   2          indirect=0;
 694   2          MonNewDumpI2C();
 695   2        }
 696   1      
 697   1        //---------------- Bit Operation --------------------
 698   1        else if( !stricmp( argv[0], "B" ) ) {// Write bits - B AA II bb DD
 699   2          MonWriteBit();
 700   2        }
 701   1        /*  no indirect addressing in TW8816
 702   1          //---------------------------------------------------
 703   1        else if( !stricmp( argv[0], "@" ) ) { // Indirect address bit access
 704   1      
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 60  

 705   1                BYTE Slave, mask, FromBit, ToBit,  MonMask, val,i;
 706   1                // @ 8a iaddr idata index  startbit|endbit  data
 707   1                // 0  1   2    3     4     5                 6
 708   1      
 709   1                if( argc<7 ) {
 710   1                  Printf("   --> Missing parameter !!!");
 711   1                  return;
 712   1                }
 713   1      
 714   1                Slave = Asc2Bin(argv[1]);
 715   1                
 716   1                FromBit = Asc2Bin( argv[5] );
 717   1                FromBit  = ( FromBit >> 4) & 0x0f;
 718   1                ToBit = Asc2Bin( argv[5] );
 719   1                ToBit  =  ToBit & 0x0f;
 720   1                MonMask  = Asc2Bin( argv[6] );
 721   1      
 722   1                if( FromBit<ToBit || FromBit>7 || ToBit>7) {
 723   1                  Printf("\r\n   --> Wrong range of bit operation !!!");
 724   1                  return;
 725   1                }
 726   1        
 727   1                mask = 0xff; 
 728   1                val=0x7f;
 729   1                for(i=7; i>FromBit; i--) {
 730   1                  mask &= val;
 731   1                  val = val>>1;
 732   1                }
 733   1      
 734   1                val=0xfe;
 735   1                for(i=0; i<ToBit; i++) {
 736   1                  mask &= val;
 737   1                  val = val<<1;
 738   1                }
 739   1      
 740   1                // @ 8a iaddr idata index  startbit|endbit  data
 741   1                // 0  1   2    3     4     5                 6
 742   1                MonIndex = Asc2Bin(argv[2]);
 743   1                MonWdata = Asc2Bin(argv[4]);
 744   1                WriteI2C( Slave, MonIndex, MonWdata);
 745   1      
 746   1                MonRdata = ReadI2C(Slave, Asc2Bin( argv[3]));
 747   1                MonWdata = (MonRdata & (~mask)) | (MonMask & mask);
 748   1                MonIndex = Asc2Bin(argv[3]);
 749   1                WriteI2C(Slave, MonIndex, MonWdata);
 750   1      
 751   1                MonRdata = ReadI2C(Slave, MonIndex);
 752   1      
 753   1                Printf("\r\n<R>%2x[%2x]=%2x", (WORD)Slave, (WORD)MonIndex, (WORD)MonRdata);
 754   1      
 755   1        }
 756   1        //------------------------------------------------------------------        
 757   1        else if( !stricmp( argv[0], "!" ) ) //  Indirect address write access
 758   1        {
 759   1                BYTE Slave;
 760   1                // @ 8a iaddr idata index data
 761   1                if( argc<6 ) {
 762   1                  Printf("   --> Missing parameter !!!");
 763   1                  return;
 764   1                }
 765   1      
 766   1                Slave = Asc2Bin(argv[1]);
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 61  

 767   1      
 768   1                MonIndex = Asc2Bin(argv[2]);
 769   1                MonWdata = Asc2Bin(argv[4]);
 770   1                WriteI2C(Slave, MonIndex, MonWdata);
 771   1      
 772   1                MonIndex = Asc2Bin(argv[3]);
 773   1                MonWdata = Asc2Bin(argv[5]);
 774   1                WriteI2C(Slave, MonIndex, MonWdata);
 775   1      
 776   1                MonRdata = ReadI2C(Slave, MonIndex);
 777   1      
 778   1                Printf("\r\n<R>%2x[%2x]=%2x", (WORD)Slave, (WORD)MonIndex, (WORD)MonRdata);
 779   1      
 780   1        }
 781   1        */    
 782   1      
 783   1        //---------------- Change I2C -----------------------
 784   1        else if( !stricmp( argv[0], "C" ) ) {
 785   2          MonAddress = Asc2Bin( argv[1] );
 786   2        }
 787   1      
 788   1        //---------------- Help -----------------------------
 789   1        else if( !stricmp( argv[0], "H" ) || !stricmp( argv[0], "HELP" ) || !stricmp( argv[0], "?" ) ) {
 790   2          MonHelp();
 791   2      
 792   2        }
 793   1        //---------------------------------------------------
 794   1        else if( !stricmp( argv[0], "*" ) ) {
 795   2            
 796   2              if( argc==1 ) {
 797   3                Printf("\r\n  * 0 : Program default Loader");
 798   3                Printf("\r\n  * 1 : Program external Loader");
 799   3                Printf("\r\n  * 2 : Execute Loader");
 800   3              }
 801   2              else { 
 802   3                BYTE mode;
 803   3                mode = Asc2Bin(argv[1]);
 804   3                //Loader(mode);
 805   3              }
 806   2        }
 807   1      
 808   1        //---------------------------------------------------
 809   1      #if defined( SUPPORT_PC ) || defined( SUPPORT_DTV )
                else if( !stricmp( argv[0], "PCLK" ) ) {
                  PclkAccess();     
                }
              #endif  
 814   1        #ifdef Hs_debug  //Pinchi 20150316 add
 815   1        //---------------------------------------------------
 816   1        else if( !stricmp( argv[0], "POWER" ) ) {
 817   2          LCDPower();
 818   2        }
 819   1        #endif
 820   1        //---------------------------------------------------
 821   1      #if defined( SUPPORT_PC ) || defined( SUPPORT_DTV )
                else if( !stricmp( argv[0], "M" ) ) {
                  if( argc==2 ) {
                    if( !stricmp( argv[1], "?" ) ) {
                      BYTE i;
                      Printf("\r\nCurrent Input:%d \r\n", (WORD)InputSelection);
                      for(i=1; struct_InputSelection[i].Id!=0 ; i++)
                          Printf("%s:%d  ",struct_InputSelection[i].Name,(WORD)struct_InputSelection[i].Id );
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 62  

                      Printf("\r\n");
                    }
                    else
                      ChangeInput(Asc2Bin( argv[1] ));
                  }
                  else
                    ChangeInput(GetNextInputSelection());
                } 
                //---------------------------------------------------
                else if( !stricmp( argv[0], "ACCESS" ) ) {
                  if( argc==2 ) {
                    AccessEnable = Asc2Bin(argv[1]);
                  }
                  Printf("\r\nTW88xx AUTO ACCESS = %d", (WORD)AccessEnable);
                }
                #if 0
                //---------------------------------------------------
                else if( !stricmp( argv[0], "AUTODETECT" ) ) {
                  if( argc==2 ) {
                    AutoDetect = Asc2Bin(argv[1]);
                  }
                  Printf("\r\nPC Auto Detect = %d", (WORD)AutoDetect);
                } 
                #endif
                //---------------------------------------------------
                else if( !stricmp( argv[0], "PCAUTO" ) ) {
                  Puts("\r\nPC Auto Measurement");
                  AutoAdjust();
                } 
                //---------------------------------------------------
                else if( !stricmp( argv[0], "PCCOLOR" ) ) {
                  Puts("\r\nPC Color Auto Measurement");
                  AutoColorAdjust();
                } 
                //---------------------------------------------------
                else if( !stricmp( argv[0], "7" ) ) {
                  Puts("\r\nGet HPN / VPN");
                  GetHpnVpn(DebugLevel);
                } 
              #endif
 869   1        //---------------- Debug Level ---------------------
 870   1        else if ( !stricmp( argv[0], "DEBUG" ) ) {
 871   2          if( argc==2 ) {
 872   3            DebugLevel = Asc2Bin(argv[1]);
 873   3            SaveDebugLevelEE(DebugLevel);
 874   3          }
 875   2          Printf("\r\nDebug Level = %2x", (WORD)DebugLevel);
 876   2        }
 877   1        
 878   1        //---------------- Display on/off -------------------
 879   1        else if ( !stricmp( argv[0], "echo" ) ) {
 880   2          if( !stricmp( argv[1], "off" ) ) {
 881   3            echo = 0;
 882   3            Printf("\r\necho off");
 883   3          }
 884   2          else {
 885   3            echo = 1;
 886   3            Printf("\r\necho on");
 887   3          }
 888   2        }
 889   1        //---------------- RESET/ TEST / POWER_DOWN -------------------
 890   1        else if ( !stricmp( argv[0], "reset" ) ) {
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 63  

 891   2          if( !stricmp( argv[1], "0" ) ) {
 892   3            P3_4 = 0;
 893   3            Printf("\r\nTW_reset_pin => 0");
 894   3          }
 895   2          else if( !stricmp( argv[1], "1" ) ) {
 896   3            P3_4 = 1;
 897   3            Printf("\r\nTW_reset_pin => 1");
 898   3          }
 899   2          else {
 900   3            Printf("\r\nTW_reset_pin = %d", (WORD)P3_4);
 901   3          }
 902   2        }
 903   1        else if ( !stricmp( argv[0], "test" ) ) {
 904   2          if( !stricmp( argv[1], "0" ) ) {
 905   3            //P0_7 = 0;
 906   3            Printf("\r\nTW_test_pin => 0");
 907   3          }
 908   2          else if( !stricmp( argv[1], "1" ) ) {
 909   3            //P0_7 = 1;
 910   3            Printf("\r\nTW_test_pin => 1");
 911   3          }
 912   2          else {
 913   3            Printf("\r\nTW_test_pin = %d", (WORD)P0_7);
 914   3          }
 915   2        }
 916   1        else if ( !stricmp( argv[0], "pdn" ) ) {
 917   2          if( !stricmp( argv[1], "0" ) ) {
 918   3            P3_7 = 0;
 919   3            Printf("\r\nTW_PowerDown_pin => 0");
 920   3          }
 921   2          else if( !stricmp( argv[1], "1" ) ) {
 922   3            P3_7 = 1;
 923   3            Printf("\r\nTW_PowerDown_pin => 1");
 924   3          }
 925   2          else {
 926   3            Printf("\r\nTW_PowerDown_pin = %d", (WORD)P3_7);
 927   3          }
 928   2        }
 929   1        //---------------- OSD test for parallel -----------------------------------
 930   1        else if( !stricmp( argv[0], "OSD" ) ) {
 931   2          if( !stricmp( argv[1], "logo" ) ) {
 932   3      //      DisplayLogo();
 933   3          }
 934   2          else if( !stricmp( argv[1], "end" ) ) {
 935   3              Puts("\r\nIf you'd like to exit, press any Key....");
 936   3            while ( !RS_ready() ){
 937   4              P2 = ReadTW88( 0x95 );
 938   4            }
 939   3          }
 940   2          else if( !stricmp( argv[1], "input" ) ) {
 941   3            DisplayInput();
 942   3          }
 943   2          else if( !stricmp( argv[1], "off" ) ) {
 944   3            ShowOSDWindowAll(OFF);
 945   3          }
 946   2          //else if( !stricmp( argv[1], "grid" ) ) {
 947   2          //  DisplayGrid();
 948   2          //}
 949   2      #if 0   
              #ifndef BANKING
                  else if( !stricmp( argv[1], "cone" ) ) {
                    DisplayCone();
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 64  

                    DisplayJapanese();
                  }
              #endif    
              #endif
 957   2          #ifdef BANKING
                  else if( !stricmp( argv[1], "agrid" ) ) {
                      BYTE i, j, k;
                      Puts("\r\nIf you'd like to exit, press any Key....");
                    j = 0;
                    k = 0;
                    DisplayMessage();
                    if ( argc == 3 )
                      i = Asc2Bin(argv[2]);
                    else i = 0;
                    while ( !RS_ready() ){
                      if ( j < 9 )
                        DisplayGridBank0(j);
                      else
                        DisplayGridBank1(j);
                      if ( i )
                        delay(10*i);
                      if (k==0) {
                        if (j==16) {
                          k = 1;
                          j--;
                        }
                        else j++;
                      }
                      else {
                        if ( j==0 ) {
                          k = 0;
                          j++;
                        }
                        else j--;
                      }
                    }
                  }
                  else if( !stricmp( argv[1], "cgrid" ) ) {
                      BYTE i, j, k;
                      Puts("\r\nIf you'd like to exit, press any Key....");
                    j = 0;
                    k = 0;
                    DisplayChinese();
                    if ( argc == 3 )
                      i = Asc2Bin(argv[2]);
                    else i = 0;
                    while ( !RS_ready() ){
                      if ( j < 9 )
                        DisplayGridBank0(j);
                      else
                        DisplayGridBank1(j);
                      if ( i )
                        delay(10*i);
                      if (k==0) {
                        if (j==16) {
                          k = 1;
                          j--;
                        }
                        else j++;
                      }
                      else {
                        if ( j==0 ) {
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 65  

                          k = 0;
                          j++;
                        }
                        else j--;
                      }
                    }
                  }
                  else if( !stricmp( argv[1], "jgrid" ) ) {
                      BYTE i, j, k;
                      Puts("\r\nIf you'd like to exit, press any Key....");
                    j = 0;
                    k = 0;
                    DisplayJapanese();
                    if ( argc == 3 )
                      i = Asc2Bin(argv[2]);
                    else i = 0;
                    while ( !RS_ready() ){
                      if ( j < 9 )
                        DisplayGridBank0(j);
                      else
                        DisplayGridBank1(j);
                      if ( i )
                        delay(10*i);
                      if (k==0) {
                        if (j==16) {
                          k = 1;
                          j--;
                        }
                        else j++;
                      }
                      else {
                        if ( j==0 ) {
                          k = 0;
                          j++;
                        }
                        else j--;
                      }
                    }
                  }
                  else if( !stricmp( argv[1], "kgrid" ) ) {
                      BYTE i, j, k;
                      Puts("\r\nIf you'd like to exit, press any Key....");
                    j = 0;
                    k = 0;
                    DisplayKorean();
                    if ( argc == 3 )
                      i = Asc2Bin(argv[2]);
                    else i = 0;
                    while ( !RS_ready() ){
                      if ( j < 9 )
                        DisplayGridBank0(j);
                      else
                        DisplayGridBank1(j);
                      if ( i )
                        delay(10*i);
                      if (k==0) {
                        if (j==16) {
                          k = 1;
                          j--;
                        }
                        else j++;
                      }
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 66  

                      else {
                        if ( j==0 ) {
                          k = 0;
                          j++;
                        }
                        else j--;
                      }
                    }
                  }
                  #endif
1087   2        }
1088   1        
1089   1        //---------------- serial tx test with some number -----------------------------------
1090   1        else if( !stricmp( argv[0], "TX" ) ) {
1091   2          MonTxDump();
1092   2        }
1093   1        #ifdef Hs_debug  //Pinchi 20150316 add
1094   1        //---------------- OSD FONTtest for parallel -----------------------------------
1095   1        else if( !stricmp( argv[0], "FONT" ) ) {
1096   2          if ( !stricmp( argv[1], "RAM" ) ) {
1097   3            DisplayRAMFont( Asc2Bin(argv[2]) );
1098   3          }
1099   2          else if ( !stricmp( argv[1], "ROM" ) ) {
1100   3            DisplayROMFont(Asc2Bin(argv[2]));
1101   3          }
1102   2          else {
1103   3            Puts("\r\n Font ROM # or Font RAM # for testing");
1104   3          }
1105   2        }
1106   1        #endif
1107   1        //---------------- Delta RGB Panel Test -------------------------
1108   1        #ifdef SUPPORT_DELTA_RGB
              
                else if( !stricmp( argv[0], "delta" ) ) {
                  if( argc==1 ) DeltaRGBPanelInit();
                  else {
                    
                    if( !stricmp( argv[1], "w" ) ) {
              
                      WORD val;
                      val= Asc2Bin(argv[3])<<8 | Asc2Bin(argv[4]);
                      Printf("\r\n SPI Write: Addr:%2x  Data:%4x", (WORD)Asc2Bin(argv[2]), val);
                      WriteSPI(Asc2Bin(argv[2]), val );
                    }
                    else if( !stricmp( argv[1], "r" ) ) {
                      WORD val;
                      val = ReadSPI(Asc2Bin(argv[2]));
                      Printf("\r\n SPI Read: Addr:%2x  Data:%4x", (WORD)Asc2Bin(argv[2]), val);
                    }
                  }
                }
                #endif
1129   1        //----------------------------------------------------
1130   1        else {
1131   2          Printf("\r\nInvalid command...");
1132   2        }
1133   1      
1134   1        Prompt();
1135   1      
1136   1      }
1137          
1138          #endif
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 67  

1139          //-------------------------------------------------------------------------
1140          
1141          #endif
*** WARNING C291 IN LINE 95 OF monitor.c: not every exit path returns a value
*** WARNING C291 IN LINE 120 OF monitor.c: not every exit path returns a value
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 68  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com011B (BEGIN)
0000         L?0284:
0000 7BFF              MOV     R3,#0FFH
0002 7A00        R     MOV     R2,#HIGH ?SC_152
0004 7900        R     MOV     R1,#LOW ?SC_152
0006         L?0285:
0006 E0                MOVX    A,@DPTR
0007 FF                MOV     R7,A
0008 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
000B E4                CLR     A
000C F0                MOVX    @DPTR,A
000D A3                INC     DPTR
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
0010 900000      R     MOV     DPTR,#MonIndex
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 900000      E     MOV     DPTR,#?_Printf?BYTE+05H
0018 E4                CLR     A
0019 F0                MOVX    @DPTR,A
001A A3                INC     DPTR
001B EF                MOV     A,R7
001C F0                MOVX    @DPTR,A
001D 900000      R     MOV     DPTR,#MonRdata
0020 E0                MOVX    A,@DPTR
0021 900000      E     MOV     DPTR,#?_Printf?BYTE+07H
0024         L?0286:
0024 FF                MOV     R7,A
0025 E4                CLR     A
0026 F0                MOVX    @DPTR,A
0027 A3                INC     DPTR
0028 EF                MOV     A,R7
0029 F0                MOVX    @DPTR,A
002A 22                RET     
002B         L?0292:
002B 7BFF              MOV     R3,#0FFH
002D 7A00        R     MOV     R2,#HIGH ?SC_95
002F 7900        R     MOV     R1,#LOW ?SC_95
0031 900000      R     MOV     DPTR,#MonIndex
0034 E0                MOVX    A,@DPTR
0035 FF                MOV     R7,A
0036 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
0039 E4                CLR     A
003A F0                MOVX    @DPTR,A
003B A3                INC     DPTR
003C EF                MOV     A,R7
003D F0                MOVX    @DPTR,A
003E         L?0293:
003E 900000      R     MOV     DPTR,#MonRdata
0041         L?0294:
0041 E0                MOVX    A,@DPTR
0042 900000      E     MOV     DPTR,#?_Printf?BYTE+05H
0045         L?0295:
0045 FF                MOV     R7,A
0046 E4                CLR     A
0047 F0                MOVX    @DPTR,A
0048 A3                INC     DPTR
0049 EF                MOV     A,R7
004A F0                MOVX    @DPTR,A
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 69  

004B 22                RET     
004C         L?0300:
004C 900000      R     MOV     DPTR,#argv+06H
004F 120000      E     LCALL   ?C?PLDXDATA
0052 120000      R     LCALL   _Asc2Bin
0055 900000      R     MOV     DPTR,#MonIndex
0058 EF                MOV     A,R7
0059         L?0301:
0059 F0                MOVX    @DPTR,A
005A         L?0302:
005A 900000      R     MOV     DPTR,#argv+09H
005D         L?0303:
005D 120000      E     LCALL   ?C?PLDXDATA
0060 020000      R     LJMP    _Asc2Bin
0063         L?0305:
0063         L?0306:
0063 900000      R     MOV     DPTR,#ToMonIndex
0066 E0                MOVX    A,@DPTR
0067 FF                MOV     R7,A
0068 900000      R     MOV     DPTR,#i
006B E0                MOVX    A,@DPTR
006C FC                MOV     R4,A
006D A3                INC     DPTR
006E E0                MOVX    A,@DPTR
006F FD                MOV     R5,A
0070 D3                SETB    C
0071 9F                SUBB    A,R7
0072 EC                MOV     A,R4
0073 9400              SUBB    A,#00H
0075 22                RET     
0076         L?0308:
0076         L?0309:
0076 D3                SETB    C
0077 900000      R     MOV     DPTR,#cnt+01H
007A E0                MOVX    A,@DPTR
007B 9400              SUBB    A,#00H
007D 900000      R     MOV     DPTR,#cnt
0080 E0                MOVX    A,@DPTR
0081 6480              XRL     A,#080H
0083 9480              SUBB    A,#080H
0085 22                RET     
0086         L?0310:
0086         L?0311:
0086 900000      R     MOV     DPTR,#MonIndex
0089 E0                MOVX    A,@DPTR
008A 900000      R     MOV     DPTR,#i
008D         L?0312:
008D FF                MOV     R7,A
008E E4                CLR     A
008F F0                MOVX    @DPTR,A
0090 A3                INC     DPTR
0091 EF                MOV     A,R7
0092 F0                MOVX    @DPTR,A
0093 22                RET     
0094         L?0313:
0094         L?0314:
0094 7400        R     MOV     A,#LOW monstr
0096 2E                ADD     A,R6
0097         L?0315:
0097 F582              MOV     DPL,A
0099 E4                CLR     A
009A 3400        R     ADDC    A,#HIGH monstr
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 70  

009C F583              MOV     DPH,A
009E 22                RET     
009F         L?0317:
009F 900000      R     MOV     DPTR,#MonIndex
00A2         L?0318:
00A2 E0                MOVX    A,@DPTR
00A3 FD                MOV     R5,A
00A4 900000      R     MOV     DPTR,#MonWdata
00A7 E0                MOVX    A,@DPTR
00A8 FB                MOV     R3,A
00A9 22                RET     
00AA         L?0319:
00AA         L?0320:
00AA 900000      R     MOV     DPTR,#MonIndex
00AD E0                MOVX    A,@DPTR
00AE FD                MOV     R5,A
00AF 7F8A              MOV     R7,#08AH
00B1 22                RET     
00B2         L?0321:
00B2         L?0322:
00B2 900000      R     MOV     DPTR,#argc
00B5 E0                MOVX    A,@DPTR
00B6 C3                CLR     C
00B7 9402              SUBB    A,#02H
00B9 7480              MOV     A,#080H
00BB 9480              SUBB    A,#080H
00BD 22                RET     
00BE         L?0323:
00BE         L?0324:
00BE 900000      R     MOV     DPTR,#argc
00C1 E0                MOVX    A,@DPTR
00C2 C3                CLR     C
00C3 9403              SUBB    A,#03H
00C5 7480              MOV     A,#080H
00C7 9480              SUBB    A,#080H
00C9 22                RET     
00CA         L?0326:
00CA 900000      R     MOV     DPTR,#MonRdata
00CD EF                MOV     A,R7
00CE F0                MOVX    @DPTR,A
00CF 900000      R     MOV     DPTR,#MonIndex
00D2 E0                MOVX    A,@DPTR
00D3 04                INC     A
00D4 F0                MOVX    @DPTR,A
00D5 900000      R     MOV     DPTR,#cnt
00D8         L?0327:
00D8 74FF              MOV     A,#0FFH
00DA F5F0              MOV     B,A
00DC 020000      E     LJMP    ?C?IILDX
00DF         L?0328:
00DF         L?0329:
00DF 900000      R     MOV     DPTR,#Slave
00E2         L?0330:
00E2 E0                MOVX    A,@DPTR
00E3 FF                MOV     R7,A
00E4 900000      R     MOV     DPTR,#MonIndex
00E7 E0                MOVX    A,@DPTR
00E8 FD                MOV     R5,A
00E9 22                RET     
00EA         L?0331:
00EA 900000      R     MOV     DPTR,#MonRdata
00ED EF                MOV     A,R7
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 71  

00EE F0                MOVX    @DPTR,A
00EF 900000      R     MOV     DPTR,#i
00F2         L?0332:
00F2 E4                CLR     A
00F3 75F001            MOV     B,#01H
00F6 020000      E     LJMP    ?C?IILDX
00F9         L?0334:
00F9         L?0335:
00F9 E4                CLR     A
00FA FF                MOV     R7,A
00FB 33                RLC     A
00FC 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
00FF CF                XCH     A,R7
0100 F0                MOVX    @DPTR,A
0101 A3                INC     DPTR
0102 EF                MOV     A,R7
0103 F0                MOVX    @DPTR,A
0104 22                RET     
0105         L?0336:
0105         L?0337:
0105 7BFF              MOV     R3,#0FFH
0107 7A00        R     MOV     R2,#HIGH ?SC_30
0109 7900        R     MOV     R1,#LOW ?SC_30
010B 22                RET     
010C         L?0338:
010C         L?0339:
010C E500        R     MOV     A,MonAddress
010E 648A              XRL     A,#08AH
0110 900000      R     MOV     DPTR,#MonIndex
0113 22                RET     
0114         L?0341:
0114 900000      R     MOV     DPTR,#i
0117 E0                MOVX    A,@DPTR
0118 2400        R     ADD     A,#LOW monstr
011A F9                MOV     R1,A
011B E4                CLR     A
011C 3400        R     ADDC    A,#HIGH monstr
011E FA                MOV     R2,A
011F 7B01              MOV     R3,#01H
0121 22                RET     
0122         L?0343:
0122 900000      R     MOV     DPTR,#str
0125         L?0344:
0125 120000      E     LCALL   ?C?PLDXDATA
0128 020000      E     LJMP    ?C?CLDPTR
012B         L?0345:
012B 900000      R     MOV     DPTR,#incnt
012E E0                MOVX    A,@DPTR
012F FF                MOV     R7,A
0130 900000      R     MOV     DPTR,#i
0133 E0                MOVX    A,@DPTR
0134 FE                MOV     R6,A
0135 C3                CLR     C
0136 9F                SUBB    A,R7
0137 22                RET     
0138         L?0346:
0138         L?0347:
0138 900000      R     MOV     DPTR,#MonIndex
013B E0                MOVX    A,@DPTR
013C FD                MOV     R5,A
013D AF00        R     MOV     R7,MonAddress
013F 22                RET     
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 72  

0140         L?0348:
0140 7BFF              MOV     R3,#0FFH
0142 900000      R     MOV     DPTR,#MonIndex
0145 E0                MOVX    A,@DPTR
0146 22                RET     
0147         L?0349:
0147         L?0350:
0147 900000      R     MOV     DPTR,#i
014A E0                MOVX    A,@DPTR
014B 04                INC     A
014C F0                MOVX    @DPTR,A
014D 22                RET     
014E         L?0351:
014E F0                MOVX    @DPTR,A
014F 900000      R     MOV     DPTR,#argc
0152 E0                MOVX    A,@DPTR
0153 900000      R     MOV     DPTR,#last_argc
0156 F0                MOVX    @DPTR,A
0157 22                RET     
             ; FUNCTION Com011B (END)

             ; FUNCTION Prompt (BEGIN)
                                           ; SOURCE LINE # 53
                                           ; SOURCE LINE # 54
                                           ; SOURCE LINE # 56
0000 E500        R     MOV     A,MonAddress
0002 648A              XRL     A,#08AH
0004 7BFF              MOV     R3,#0FFH
0006 7009              JNZ     ?C0001
                                           ; SOURCE LINE # 57
0008 7A00        R     MOV     R2,#HIGH ?SC_0
000A 7900        R     MOV     R1,#LOW ?SC_0
000C 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
000F 8008              SJMP    ?C0238
0011         ?C0001:
                                           ; SOURCE LINE # 59
0011 7A00        R     MOV     R2,#HIGH ?SC_17
0013 7900        R     MOV     R1,#LOW ?SC_17
0015 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
0018 E4                CLR     A
0019         ?C0238:
0019 F0                MOVX    @DPTR,A
001A A3                INC     DPTR
001B E500        R     MOV     A,MonAddress
001D F0                MOVX    @DPTR,A
001E 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 60
0021         ?C0003:
0021 22                RET     
             ; FUNCTION Prompt (END)

             ; FUNCTION _Mon_tx (BEGIN)
                                           ; SOURCE LINE # 63
;---- Variable 'ch' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 64
                                           ; SOURCE LINE # 65
0000 020000      E     LJMP    _RS_tx
             ; FUNCTION _Mon_tx (END)

             ; FUNCTION _a2i (BEGIN)
                                           ; SOURCE LINE # 74
0000 900000      R     MOV     DPTR,#str
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 73  

0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 75
                                           ; SOURCE LINE # 76
0006 900000      R     MOV     DPTR,#num
0009 120000      E     LCALL   ?C?LSTKXDATA
000C 00                DB      00H
000D 00                DB      00H
000E 00                DB      00H
000F 00                DB      00H
                                           ; SOURCE LINE # 79
0010 E4                CLR     A
0011 900000      R     MOV     DPTR,#i
0014 F0                MOVX    @DPTR,A
0015         ?C0005:
                                           ; SOURCE LINE # 80
0015 120000      R     LCALL   L?0343
0018 6050              JZ      ?C0006
001A 6420              XRL     A,#020H
001C 604C              JZ      ?C0006
                                           ; SOURCE LINE # 81
001E E4                CLR     A
001F 7F0A              MOV     R7,#0AH
0021 FE                MOV     R6,A
0022 FD                MOV     R5,A
0023 FC                MOV     R4,A
0024 900000      R     MOV     DPTR,#num
0027 120000      E     LCALL   ?C?LLDXDATA0
002A 120000      E     LCALL   ?C?LMUL
002D A804              MOV     R0,AR4
002F C005              PUSH    AR5
0031 C006              PUSH    AR6
0033 C007              PUSH    AR7
0035 120000      R     LCALL   L?0343
0038 FF                MOV     R7,A
0039 E4                CLR     A
003A FC                MOV     R4,A
003B FD                MOV     R5,A
003C FE                MOV     R6,A
003D D003              POP     AR3
003F D002              POP     AR2
0041 D001              POP     AR1
0043 120000      E     LCALL   ?C?LADD
0046 EF                MOV     A,R7
0047 24D0              ADD     A,#0D0H
0049 FF                MOV     R7,A
004A EE                MOV     A,R6
004B 34FF              ADDC    A,#0FFH
004D FE                MOV     R6,A
004E ED                MOV     A,R5
004F 34FF              ADDC    A,#0FFH
0051 FD                MOV     R5,A
0052 EC                MOV     A,R4
0053 34FF              ADDC    A,#0FFH
0055 FC                MOV     R4,A
0056 900000      R     MOV     DPTR,#num
0059 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 82
005C 900000      R     MOV     DPTR,#i
005F E0                MOVX    A,@DPTR
0060 04                INC     A
0061 F0                MOVX    @DPTR,A
0062 900000      R     MOV     DPTR,#str+01H
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 74  

0065 120000      R     LCALL   L?0332
0068 80AB              SJMP    ?C0005
006A         ?C0006:
                                           ; SOURCE LINE # 83
006A 900000      R     MOV     DPTR,#num
006D 020000      E     LJMP    ?C?LLDXDATA
             ; FUNCTION _a2i (END)

             ; FUNCTION _Asc1Bin (BEGIN)
                                           ; SOURCE LINE # 86
;---- Variable 'asc' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 87
                                           ; SOURCE LINE # 88
0000 EF                MOV     A,R7
0001 C3                CLR     C
0002 9430              SUBB    A,#030H
0004 400C              JC      ?C0011
0006 EF                MOV     A,R7
0007 D3                SETB    C
0008 9439              SUBB    A,#039H
000A 5006              JNC     ?C0011
000C C3                CLR     C
000D EF                MOV     A,R7
000E 9430              SUBB    A,#030H
0010 FF                MOV     R7,A
0011 22                RET     
0012         ?C0011:
                                           ; SOURCE LINE # 89
0012 EF                MOV     A,R7
0013 C3                CLR     C
0014 9461              SUBB    A,#061H
0016 400B              JC      ?C0013
0018 EF                MOV     A,R7
0019 D3                SETB    C
001A 9466              SUBB    A,#066H
001C 5005              JNC     ?C0013
001E EF                MOV     A,R7
001F 24A9              ADD     A,#0A9H
0021 FF                MOV     R7,A
0022 22                RET     
0023         ?C0013:
                                           ; SOURCE LINE # 90
0023 EF                MOV     A,R7
0024 C3                CLR     C
0025 9441              SUBB    A,#041H
0027 400A              JC      ?C0012
0029 EF                MOV     A,R7
002A D3                SETB    C
002B 9446              SUBB    A,#046H
002D 5004              JNC     ?C0012
002F EF                MOV     A,R7
0030 24C9              ADD     A,#0C9H
0032 FF                MOV     R7,A
                                           ; SOURCE LINE # 95
0033         ?C0012:
0033 22                RET     
             ; FUNCTION _Asc1Bin (END)

             ; FUNCTION L?0289 (BEGIN)
0000         L?0290:
0000 900000      R     MOV     DPTR,#argv+03H
0003 120000      E     LCALL   ?C?PLDXDATA
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 75  

             ; FUNCTION _Asc2Bin (BEGIN)
                                           ; SOURCE LINE # 97
;---- Variable 's' assigned to Register 'R1/R2/R3' ----
                                           ; SOURCE LINE # 98
                                           ; SOURCE LINE # 101
;---- Variable 'bin' assigned to Register 'R4/R5' ----
0006 E4                CLR     A
0007 FD                MOV     R5,A
0008 FC                MOV     R4,A
0009         ?C0015:
                                           ; SOURCE LINE # 102
0009 120000      E     LCALL   ?C?CLDPTR
000C 6028              JZ      ?C0016
000E 6420              XRL     A,#020H
0010 6024              JZ      ?C0016
                                           ; SOURCE LINE # 103
0012 ED                MOV     A,R5
0013 C4                SWAP    A
0014 F8                MOV     R0,A
0015 540F              ANL     A,#0FH
0017 C8                XCH     A,R0
0018 68                XRL     A,R0
0019 FD                MOV     R5,A
001A EC                MOV     A,R4
001B C4                SWAP    A
001C 54F0              ANL     A,#0F0H
001E 48                ORL     A,R0
001F FC                MOV     R4,A
                                           ; SOURCE LINE # 104
0020 120000      E     LCALL   ?C?CLDPTR
0023 FF                MOV     R7,A
0024 120000      R     LCALL   _Asc1Bin
0027 EF                MOV     A,R7
0028 2D                ADD     A,R5
0029 FD                MOV     R5,A
002A E4                CLR     A
002B 3C                ADDC    A,R4
002C FC                MOV     R4,A
                                           ; SOURCE LINE # 105
002D 7401              MOV     A,#01H
002F 29                ADD     A,R1
0030 F9                MOV     R1,A
0031 E4                CLR     A
0032 3A                ADDC    A,R2
0033 FA                MOV     R2,A
                                           ; SOURCE LINE # 106
0034 80D3              SJMP    ?C0015
0036         ?C0016:
                                           ; SOURCE LINE # 107
0036 AF05              MOV     R7,AR5
                                           ; SOURCE LINE # 108
0038 22                RET     
             ; FUNCTION _Asc2Bin (END)

             ; FUNCTION L?0340 (BEGIN)
0000 E4                CLR     A
0001 75F001            MOV     B,#01H
0004 120000      E     LCALL   ?C?PLDIXDATA
0007 120000      E     LCALL   ?C?CLDPTR
000A FF                MOV     R7,A
             ; FUNCTION _toupper (BEGIN)
                                           ; SOURCE LINE # 112
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 76  

;---- Variable 'ch' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 113
                                           ; SOURCE LINE # 114
000B EF                MOV     A,R7
000C C3                CLR     C
000D 9461              SUBB    A,#061H
000F 400A              JC      ?C0019
0011 EF                MOV     A,R7
0012 D3                SETB    C
0013 947A              SUBB    A,#07AH
0015 5004              JNC     ?C0019
                                           ; SOURCE LINE # 115
0017 EF                MOV     A,R7
0018 24E0              ADD     A,#0E0H
001A FF                MOV     R7,A
                                           ; SOURCE LINE # 120
001B         ?C0019:
001B 22                RET     
             ; FUNCTION _toupper (END)

             ; FUNCTION _stricmp (BEGIN)
                                           ; SOURCE LINE # 123
0000 900000      R     MOV     DPTR,#ptr1
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 124
                                           ; SOURCE LINE # 128
0006 E4                CLR     A
0007 900000      R     MOV     DPTR,#i
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C F0                MOVX    @DPTR,A
000D         ?C0020:
000D 900000      R     MOV     DPTR,#ptr1
0010 120000      R     LCALL   L?0344
0013 6023              JZ      ?C0021
                                           ; SOURCE LINE # 129
0015 900000      R     MOV     DPTR,#ptr2
0018 120000      R     LCALL   L?0340
001B EF                MOV     A,R7
001C FD                MOV     R5,A
001D 7C00              MOV     R4,#00H
001F 900000      R     MOV     DPTR,#ptr1
0022 120000      R     LCALL   L?0340
0025 C3                CLR     C
0026 EF                MOV     A,R7
0027 9D                SUBB    A,R5
0028 FF                MOV     R7,A
0029 E4                CLR     A
002A 9C                SUBB    A,R4
002B FE                MOV     R6,A
;---- Variable 'ret' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 130
002C 4F                ORL     A,R7
002D 6001              JZ      ?C0022
002F 22                RET     
                                           ; SOURCE LINE # 131
0030         ?C0022:
0030 900000      R     MOV     DPTR,#i
0033 120000      R     LCALL   L?0332
0036 80D5              SJMP    ?C0020
0038         ?C0021:
                                           ; SOURCE LINE # 132
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 77  

0038 E4                CLR     A
0039 FE                MOV     R6,A
003A FF                MOV     R7,A
                                           ; SOURCE LINE # 133
003B         ?C0024:
003B 22                RET     
             ; FUNCTION _stricmp (END)

             ; FUNCTION _SetMonAddress (BEGIN)
                                           ; SOURCE LINE # 139
;---- Variable 'addr' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 140
                                           ; SOURCE LINE # 141
0000 8F00        R     MOV     MonAddress,R7
                                           ; SOURCE LINE # 142
0002 22                RET     
             ; FUNCTION _SetMonAddress (END)

             ; FUNCTION MonReadI2C (BEGIN)
                                           ; SOURCE LINE # 146
                                           ; SOURCE LINE # 147
                                           ; SOURCE LINE # 148
0000 120000      R     LCALL   L?0321
0003 400A              JC      ?C0026
0005 120000      R     LCALL   L?0289
0008 900000      R     MOV     DPTR,#MonIndex
000B EF                MOV     A,R7
000C F0                MOVX    @DPTR,A
000D 8006              SJMP    ?C0027
000F         ?C0026:
                                           ; SOURCE LINE # 149
                                           ; SOURCE LINE # 150
000F 120000      R     LCALL   L?0336
0012 020000      E     LJMP    _Printf
                                           ; SOURCE LINE # 152
0015         ?C0027:
                                           ; SOURCE LINE # 154
0015 120000      R     LCALL   L?0338
0018 7006              JNZ     ?C0029
                                           ; SOURCE LINE # 155
001A E0                MOVX    A,@DPTR
001B FD                MOV     R5,A
001C 7F8A              MOV     R7,#08AH
001E 8004              SJMP    ?C0239
0020         ?C0029:
                                           ; SOURCE LINE # 157
0020 E0                MOVX    A,@DPTR
0021 FD                MOV     R5,A
0022 AF00        R     MOV     R7,MonAddress
0024         ?C0239:
0024 120000      E     LCALL   _ReadI2C
0027 900000      R     MOV     DPTR,#MonRdata
002A EF                MOV     A,R7
002B F0                MOVX    @DPTR,A
002C         ?C0030:
                                           ; SOURCE LINE # 159
002C 300013      R     JNB     echo,?C0031
                                           ; SOURCE LINE # 160
002F 7A00        R     MOV     R2,#HIGH ?SC_59
0031 7900        R     MOV     R1,#LOW ?SC_59
0033 120000      R     LCALL   L?0348
0036 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 78  

0039 120000      R     LCALL   L?0286
003C 120000      R     LCALL   L?0293
003F 120000      E     LCALL   _Printf
0042         ?C0031:
                                           ; SOURCE LINE # 162
0042 900000      R     MOV     DPTR,#MonRdata
0045 E0                MOVX    A,@DPTR
0046 900000      R     MOV     DPTR,#MonWdata
0049 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 163
004A         ?C0028:
004A 22                RET     
             ; FUNCTION MonReadI2C (END)

             ; FUNCTION MonWriteI2C (BEGIN)
                                           ; SOURCE LINE # 166
                                           ; SOURCE LINE # 167
                                           ; SOURCE LINE # 168
0000 120000      R     LCALL   L?0323
0003 5006              JNC     ?C0032
                                           ; SOURCE LINE # 169
0005 120000      R     LCALL   L?0336
0008 020000      R     LJMP    ?C0241
                                           ; SOURCE LINE # 171
000B         ?C0032:
                                           ; SOURCE LINE # 173
000B 120000      R     LCALL   L?0289
000E 900000      R     MOV     DPTR,#MonIndex
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 174
0013 900000      R     MOV     DPTR,#argv+06H
0016 120000      R     LCALL   L?0303
0019 900000      R     MOV     DPTR,#MonWdata
001C EF                MOV     A,R7
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 176
001E 300041      R     JNB     echo,?C0034
                                           ; SOURCE LINE # 177
0021 7A00        R     MOV     R2,#HIGH ?SC_76
0023 7900        R     MOV     R1,#LOW ?SC_76
0025 120000      R     LCALL   L?0348
0028 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
002B 120000      R     LCALL   L?0295
002E 900000      R     MOV     DPTR,#MonWdata
0031 120000      R     LCALL   L?0294
0034 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 178
0037 120000      R     LCALL   L?0338
003A 700D              JNZ     ?C0035
                                           ; SOURCE LINE # 179
003C 120000      R     LCALL   L?0318
003F 7F8A              MOV     R7,#08AH
0041 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 180
0044 120000      R     LCALL   L?0319
                                           ; SOURCE LINE # 181
0047 800B              SJMP    ?C0240
0049         ?C0035:
                                           ; SOURCE LINE # 182
                                           ; SOURCE LINE # 183
0049 120000      R     LCALL   L?0318
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 79  

004C AF00        R     MOV     R7,MonAddress
004E 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 184
0051 120000      R     LCALL   L?0346
0054         ?C0240:
0054 120000      E     LCALL   _ReadI2C
0057 900000      R     MOV     DPTR,#MonRdata
005A EF                MOV     A,R7
005B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 185
005C         ?C0036:
                                           ; SOURCE LINE # 186
005C 120000      R     LCALL   L?0292
005F         ?C0241:
005F 020000      E     LJMP    _Printf
                                           ; SOURCE LINE # 187
0062         ?C0034:
                                           ; SOURCE LINE # 188
                                           ; SOURCE LINE # 189
0062 120000      R     LCALL   L?0339
0065 7007              JNZ     ?C0038
                                           ; SOURCE LINE # 190
0067 120000      R     LCALL   L?0318
006A 7F8A              MOV     R7,#08AH
                                           ; SOURCE LINE # 191
006C 8005              SJMP    ?C0242
006E         ?C0038:
                                           ; SOURCE LINE # 192
                                           ; SOURCE LINE # 193
006E 120000      R     LCALL   L?0318
0071 AF00        R     MOV     R7,MonAddress
0073         ?C0242:
0073 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 194
                                           ; SOURCE LINE # 195
                                           ; SOURCE LINE # 196
0076         ?C0033:
0076 22                RET     
             ; FUNCTION MonWriteI2C (END)

             ; FUNCTION _MonIncDecI2C (BEGIN)
                                           ; SOURCE LINE # 202
;---- Variable 'inc' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 203
                                           ; SOURCE LINE # 205
0000 EF                MOV     A,R7
0001 14                DEC     A
0002 6013              JZ      ?C0042
0004 24F7              ADD     A,#0F7H
0006 6017              JZ      ?C0043
0008 14                DEC     A
0009 601D              JZ      ?C0044
000B 240B              ADD     A,#0BH
000D 7020              JNZ     ?C0040
                                           ; SOURCE LINE # 206
000F         ?C0041:
000F 900000      R     MOV     DPTR,#MonWdata
0012 E0                MOVX    A,@DPTR
0013 14                DEC     A
0014 F0                MOVX    @DPTR,A
0015 8018              SJMP    ?C0040
                                           ; SOURCE LINE # 207
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 80  

0017         ?C0042:
0017 900000      R     MOV     DPTR,#MonWdata
001A E0                MOVX    A,@DPTR
001B 04                INC     A
001C F0                MOVX    @DPTR,A
001D 8010              SJMP    ?C0040
                                           ; SOURCE LINE # 208
001F         ?C0043:
001F 900000      R     MOV     DPTR,#MonWdata
0022 E0                MOVX    A,@DPTR
0023 24F0              ADD     A,#0F0H
0025 F0                MOVX    @DPTR,A
0026 8007              SJMP    ?C0040
                                           ; SOURCE LINE # 209
0028         ?C0044:
0028 900000      R     MOV     DPTR,#MonWdata
002B E0                MOVX    A,@DPTR
002C 2410              ADD     A,#010H
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 210
002F         ?C0040:
                                           ; SOURCE LINE # 213
002F 120000      R     LCALL   L?0339
0032 700D              JNZ     ?C0045
                                           ; SOURCE LINE # 214
0034 120000      R     LCALL   L?0318
0037 7F8A              MOV     R7,#08AH
0039 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 215
003C 120000      R     LCALL   L?0319
                                           ; SOURCE LINE # 216
003F 800B              SJMP    ?C0243
0041         ?C0045:
                                           ; SOURCE LINE # 217
                                           ; SOURCE LINE # 218
0041 120000      R     LCALL   L?0318
0044 AF00        R     MOV     R7,MonAddress
0046 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 219
0049 120000      R     LCALL   L?0346
004C         ?C0243:
004C 120000      E     LCALL   _ReadI2C
004F 900000      R     MOV     DPTR,#MonRdata
0052 EF                MOV     A,R7
0053 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 220
0054         ?C0046:
                                           ; SOURCE LINE # 222
0054 30001F      R     JNB     echo,?C0047
                                           ; SOURCE LINE # 223
0057 7BFF              MOV     R3,#0FFH
0059 7A00        R     MOV     R2,#HIGH ?SC_114
005B 7900        R     MOV     R1,#LOW ?SC_114
005D 900000      R     MOV     DPTR,#MonIndex
0060 E0                MOVX    A,@DPTR
0061 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
0064 120000      R     LCALL   L?0312
0067 900000      R     MOV     DPTR,#MonWdata
006A 120000      R     LCALL   L?0294
006D 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 224
0070 120000      R     LCALL   L?0292
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 81  

0073 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 225
0076         ?C0047:
                                           ; SOURCE LINE # 227
0076 020000      R     LJMP    Prompt
             ; FUNCTION _MonIncDecI2C (END)

             ; FUNCTION MonDumpI2C (BEGIN)
                                           ; SOURCE LINE # 231
                                           ; SOURCE LINE # 232
                                           ; SOURCE LINE # 234
0000 900000      R     MOV     DPTR,#cnt
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 7408              MOV     A,#08H
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 236
0009 120000      R     LCALL   L?0321
000C 4008              JC      ?C0049
000E 120000      R     LCALL   L?0290
0011 900000      R     MOV     DPTR,#MonIndex
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
0016         ?C0049:
                                           ; SOURCE LINE # 237
0016 120000      R     LCALL   L?0323
0019 400D              JC      ?C0050
001B 900000      R     MOV     DPTR,#argv+06H
001E 120000      R     LCALL   L?0303
0021 900000      R     MOV     DPTR,#ToMonIndex
0024 EF                MOV     A,R7
0025 F0                MOVX    @DPTR,A
0026 800F              SJMP    ?C0051
0028         ?C0050:
                                           ; SOURCE LINE # 238
0028 900000      R     MOV     DPTR,#cnt
002B A3                INC     DPTR
002C E0                MOVX    A,@DPTR
002D FF                MOV     R7,A
002E 900000      R     MOV     DPTR,#MonIndex
0031 E0                MOVX    A,@DPTR
0032 2F                ADD     A,R7
0033 900000      R     MOV     DPTR,#ToMonIndex
0036 F0                MOVX    @DPTR,A
0037         ?C0051:
                                           ; SOURCE LINE # 239
0037 900000      R     MOV     DPTR,#MonIndex
003A E0                MOVX    A,@DPTR
003B FF                MOV     R7,A
003C 900000      R     MOV     DPTR,#ToMonIndex
003F E0                MOVX    A,@DPTR
0040 C3                CLR     C
0041 9F                SUBB    A,R7
0042 5003              JNC     ?C0052
0044 74FF              MOV     A,#0FFH
0046 F0                MOVX    @DPTR,A
0047         ?C0052:
                                           ; SOURCE LINE # 240
0047 900000      R     MOV     DPTR,#ToMonIndex
004A E0                MOVX    A,@DPTR
004B C3                CLR     C
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 82  

004C 9F                SUBB    A,R7
004D FF                MOV     R7,A
004E E4                CLR     A
004F 9400              SUBB    A,#00H
0051 CF                XCH     A,R7
0052 2401              ADD     A,#01H
0054 CF                XCH     A,R7
0055 3400              ADDC    A,#00H
0057 A3                INC     DPTR
0058 F0                MOVX    @DPTR,A
0059 A3                INC     DPTR
005A EF                MOV     A,R7
005B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 242
005C 30001E      R     JNB     echo,?C0053
                                           ; SOURCE LINE # 243
005F E500        R     MOV     A,MonAddress
0061 648A              XRL     A,#08AH
0063 700C              JNZ     ?C0059
                                           ; SOURCE LINE # 244
0065         ?C0055:
0065 120000      R     LCALL   L?0308
0068 4039              JC      ?C0071
                                           ; SOURCE LINE # 245
006A 7F8A              MOV     R7,#08AH
                                           ; SOURCE LINE # 246
                                           ; SOURCE LINE # 247
                                           ; SOURCE LINE # 248
006C 120000      R     LCALL   L?0296
006F 80F4              SJMP    ?C0055
                                           ; SOURCE LINE # 249
                                           ; SOURCE LINE # 250
                                           ; SOURCE LINE # 251
0071         ?C0059:
0071 120000      R     LCALL   L?0308
0074 402D              JC      ?C0071
                                           ; SOURCE LINE # 252
0076 AF00        R     MOV     R7,MonAddress
                                           ; SOURCE LINE # 253
                                           ; SOURCE LINE # 254
                                           ; SOURCE LINE # 255
0078 120000      R     LCALL   L?0296
007B 80F4              SJMP    ?C0059
                                           ; SOURCE LINE # 256
                                           ; SOURCE LINE # 257
007D         ?C0053:
                                           ; SOURCE LINE # 258
                                           ; SOURCE LINE # 259
007D E500        R     MOV     A,MonAddress
007F 648A              XRL     A,#08AH
0081 7010              JNZ     ?C0068
                                           ; SOURCE LINE # 260
0083         ?C0064:
0083 120000      R     LCALL   L?0309
0086 401B              JC      ?C0071
                                           ; SOURCE LINE # 261
0088 120000      R     LCALL   L?0320
008B 120000      E     LCALL   _ReadI2C
                                           ; SOURCE LINE # 262
                                           ; SOURCE LINE # 263
008E 120000      R     LCALL   L?0326
0091 80F0              SJMP    ?C0064
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 83  

                                           ; SOURCE LINE # 264
                                           ; SOURCE LINE # 265
                                           ; SOURCE LINE # 266
0093         ?C0068:
0093 120000      R     LCALL   L?0309
0096 400B              JC      ?C0071
                                           ; SOURCE LINE # 267
0098 120000      R     LCALL   L?0347
009B 120000      E     LCALL   _ReadI2C
                                           ; SOURCE LINE # 268
                                           ; SOURCE LINE # 269
009E 120000      R     LCALL   L?0326
00A1 80F0              SJMP    ?C0068
                                           ; SOURCE LINE # 270
                                           ; SOURCE LINE # 271
                                           ; SOURCE LINE # 272
00A3         ?C0071:
00A3 22                RET     
00A4         L?0296:
00A4 900000      R     MOV     DPTR,#MonIndex
00A7 E0                MOVX    A,@DPTR
00A8 FD                MOV     R5,A
00A9 120000      E     LCALL   _ReadI2C
00AC 900000      R     MOV     DPTR,#MonRdata
00AF EF                MOV     A,R7
00B0 F0                MOVX    @DPTR,A
00B1 7BFF              MOV     R3,#0FFH
00B3 7A00        R     MOV     R2,#HIGH ?SC_131
00B5 7900        R     MOV     R1,#LOW ?SC_131
00B7 900000      R     MOV     DPTR,#MonIndex
00BA E0                MOVX    A,@DPTR
00BB FD                MOV     R5,A
00BC 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
00BF E4                CLR     A
00C0 F0                MOVX    @DPTR,A
00C1 A3                INC     DPTR
00C2 ED                MOV     A,R5
00C3 F0                MOVX    @DPTR,A
00C4 A3                INC     DPTR
00C5 E4                CLR     A
00C6 F0                MOVX    @DPTR,A
00C7 A3                INC     DPTR
00C8 EF                MOV     A,R7
00C9 F0                MOVX    @DPTR,A
00CA 120000      E     LCALL   _Printf
00CD 900000      R     MOV     DPTR,#MonIndex
00D0 E0                MOVX    A,@DPTR
00D1 04                INC     A
00D2 F0                MOVX    @DPTR,A
00D3 900000      R     MOV     DPTR,#cnt
00D6 74FF              MOV     A,#0FFH
00D8 F5F0              MOV     B,A
00DA 120000      E     LCALL   ?C?IILDX
00DD 22                RET     
             ; FUNCTION MonDumpI2C (END)

             ; FUNCTION MonNewReadI2C (BEGIN)
                                           ; SOURCE LINE # 276
                                           ; SOURCE LINE # 277
                                           ; SOURCE LINE # 280
0000 120000      R     LCALL   L?0324
0003 400D              JC      ?C0072
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 84  

0005 900000      R     MOV     DPTR,#argv+06H
0008 120000      R     LCALL   L?0303
000B 900000      R     MOV     DPTR,#MonIndex
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
0010 8006              SJMP    ?C0073
0012         ?C0072:
                                           ; SOURCE LINE # 281
                                           ; SOURCE LINE # 282
0012 120000      R     LCALL   L?0337
0015 020000      E     LJMP    _Printf
                                           ; SOURCE LINE # 284
0018         ?C0073:
                                           ; SOURCE LINE # 285
0018 120000      R     LCALL   L?0290
001B 900000      R     MOV     DPTR,#Slave
001E EF                MOV     A,R7
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 287
0020 648A              XRL     A,#08AH
0022 7005              JNZ     ?C0075
                                           ; SOURCE LINE # 288
0024 120000      R     LCALL   L?0320
0027 8006              SJMP    ?C0244
0029         ?C0075:
                                           ; SOURCE LINE # 290
0029 900000      R     MOV     DPTR,#Slave
002C 120000      R     LCALL   L?0330
002F         ?C0244:
002F 120000      E     LCALL   _ReadI2C
0032 900000      R     MOV     DPTR,#MonRdata
0035 EF                MOV     A,R7
0036 F0                MOVX    @DPTR,A
0037         ?C0076:
                                           ; SOURCE LINE # 292
0037 300009      R     JNB     echo,?C0077
                                           ; SOURCE LINE # 293
003A 900000      R     MOV     DPTR,#Slave
003D 120000      R     LCALL   L?0284
0040 120000      E     LCALL   _Printf
0043         ?C0077:
                                           ; SOURCE LINE # 295
0043 900000      R     MOV     DPTR,#MonRdata
0046 E0                MOVX    A,@DPTR
0047 900000      R     MOV     DPTR,#MonWdata
004A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 296
004B         ?C0074:
004B 22                RET     
             ; FUNCTION MonNewReadI2C (END)

             ; FUNCTION MonNewWriteI2C (BEGIN)
                                           ; SOURCE LINE # 298
                                           ; SOURCE LINE # 299
                                           ; SOURCE LINE # 302
0000 900000      R     MOV     DPTR,#argc
0003 E0                MOVX    A,@DPTR
0004 C3                CLR     C
0005 9404              SUBB    A,#04H
0007 7480              MOV     A,#080H
0009 9480              SUBB    A,#080H
000B 5006              JNC     ?C0078
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 85  

                                           ; SOURCE LINE # 303
000D 120000      R     LCALL   L?0337
0010 020000      R     LJMP    ?C0246
                                           ; SOURCE LINE # 305
0013         ?C0078:
                                           ; SOURCE LINE # 307
                                           ; SOURCE LINE # 308
0013 120000      R     LCALL   L?0300
0016 900000      R     MOV     DPTR,#MonWdata
0019 EF                MOV     A,R7
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 309
001B 120000      R     LCALL   L?0290
001E 900000      R     MOV     DPTR,#Slave
0021 EF                MOV     A,R7
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 311
0023 648A              XRL     A,#08AH
0025 700D              JNZ     ?C0080
                                           ; SOURCE LINE # 312
0027 120000      R     LCALL   L?0317
002A 7F8A              MOV     R7,#08AH
002C 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 313
002F 120000      R     LCALL   L?0320
                                           ; SOURCE LINE # 314
0032 8011              SJMP    ?C0245
0034         ?C0080:
                                           ; SOURCE LINE # 315
                                           ; SOURCE LINE # 316
0034 900000      R     MOV     DPTR,#Slave
0037 E0                MOVX    A,@DPTR
0038 FF                MOV     R7,A
0039 120000      R     LCALL   L?0317
003C 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 317
003F 900000      R     MOV     DPTR,#Slave
0042 120000      R     LCALL   L?0330
0045         ?C0245:
0045 120000      E     LCALL   _ReadI2C
0048 900000      R     MOV     DPTR,#MonRdata
004B EF                MOV     A,R7
004C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 318
004D         ?C0081:
                                           ; SOURCE LINE # 320
004D 300009      R     JNB     echo,?C0079
                                           ; SOURCE LINE # 321
0050 900000      R     MOV     DPTR,#Slave
0053 120000      R     LCALL   L?0284
0056         ?C0246:
0056 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 323
0059         ?C0079:
0059 22                RET     
             ; FUNCTION MonNewWriteI2C (END)

             ; FUNCTION MonNewDumpI2C (BEGIN)
                                           ; SOURCE LINE # 325
                                           ; SOURCE LINE # 326
                                           ; SOURCE LINE # 330
0000 120000      R     LCALL   L?0322
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 86  

0003 400B              JC      ?C0083
0005 900000      R     MOV     DPTR,#argv+06H
0008 120000      R     LCALL   L?0303
000B 900000      R     MOV     DPTR,#MonIndex
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
0010         ?C0083:
                                           ; SOURCE LINE # 331
0010 120000      R     LCALL   L?0324
0013 4008              JC      ?C0084
0015 120000      R     LCALL   L?0302
0018 900000      R     MOV     DPTR,#ToMonIndex
001B EF                MOV     A,R7
001C F0                MOVX    @DPTR,A
001D         ?C0084:
                                           ; SOURCE LINE # 332
001D 120000      R     LCALL   L?0290
0020 900000      R     MOV     DPTR,#Slave
0023 EF                MOV     A,R7
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 334
0025 300026      R     JNB     echo,?C0085
                                           ; SOURCE LINE # 335
0028 E0                MOVX    A,@DPTR
0029 648A              XRL     A,#08AH
002B 700F              JNZ     ?C0086
                                           ; SOURCE LINE # 336
002D 120000      R     LCALL   L?0310
0030         ?C0087:
0030 120000      R     LCALL   L?0305
0033 5048              JNC     ?C0103
                                           ; SOURCE LINE # 337
0035 7F8A              MOV     R7,#08AH
                                           ; SOURCE LINE # 338
                                           ; SOURCE LINE # 339
0037 120000      R     LCALL   L?0299
003A 80F4              SJMP    ?C0087
                                           ; SOURCE LINE # 340
003C         ?C0086:
                                           ; SOURCE LINE # 341
                                           ; SOURCE LINE # 342
003C 120000      R     LCALL   L?0310
003F         ?C0091:
003F 120000      R     LCALL   L?0305
0042 5039              JNC     ?C0103
                                           ; SOURCE LINE # 343
0044 900000      R     MOV     DPTR,#Slave
0047 E0                MOVX    A,@DPTR
0048 FF                MOV     R7,A
                                           ; SOURCE LINE # 344
                                           ; SOURCE LINE # 345
0049 120000      R     LCALL   L?0299
004C 80F1              SJMP    ?C0091
                                           ; SOURCE LINE # 346
                                           ; SOURCE LINE # 347
004E         ?C0085:
                                           ; SOURCE LINE # 348
                                           ; SOURCE LINE # 349
004E 900000      R     MOV     DPTR,#Slave
0051 E0                MOVX    A,@DPTR
0052 648A              XRL     A,#08AH
0054 7012              JNZ     ?C0095
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 87  

                                           ; SOURCE LINE # 350
0056 120000      R     LCALL   L?0311
0059         ?C0096:
0059 120000      R     LCALL   L?0306
005C 501F              JNC     ?C0103
                                           ; SOURCE LINE # 351
005E 7F8A              MOV     R7,#08AH
0060 120000      E     LCALL   _ReadI2C
                                           ; SOURCE LINE # 352
0063 120000      R     LCALL   L?0331
0066 80F1              SJMP    ?C0096
                                           ; SOURCE LINE # 353
0068         ?C0095:
                                           ; SOURCE LINE # 354
                                           ; SOURCE LINE # 355
0068 120000      R     LCALL   L?0311
006B         ?C0100:
006B 120000      R     LCALL   L?0306
006E 500D              JNC     ?C0103
                                           ; SOURCE LINE # 356
0070 900000      R     MOV     DPTR,#Slave
0073 E0                MOVX    A,@DPTR
0074 FF                MOV     R7,A
0075 120000      E     LCALL   _ReadI2C
                                           ; SOURCE LINE # 357
0078 120000      R     LCALL   L?0331
007B 80EE              SJMP    ?C0100
                                           ; SOURCE LINE # 358
                                           ; SOURCE LINE # 359
                                           ; SOURCE LINE # 360
007D         ?C0103:
007D 22                RET     
007E         L?0299:
007E 120000      E     LCALL   _ReadI2C
0081 900000      R     MOV     DPTR,#MonRdata
0084 EF                MOV     A,R7
0085 F0                MOVX    @DPTR,A
0086 7BFF              MOV     R3,#0FFH
0088 7A00        R     MOV     R2,#HIGH ?SC_152
008A 7900        R     MOV     R1,#LOW ?SC_152
008C 900000      R     MOV     DPTR,#Slave
008F E0                MOVX    A,@DPTR
0090 FD                MOV     R5,A
0091 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
0094 E4                CLR     A
0095 F0                MOVX    @DPTR,A
0096 A3                INC     DPTR
0097 ED                MOV     A,R5
0098 F0                MOVX    @DPTR,A
0099 900000      R     MOV     DPTR,#i
009C E0                MOVX    A,@DPTR
009D FD                MOV     R5,A
009E A3                INC     DPTR
009F E0                MOVX    A,@DPTR
00A0 900000      E     MOV     DPTR,#?_Printf?BYTE+05H
00A3 CD                XCH     A,R5
00A4 F0                MOVX    @DPTR,A
00A5 A3                INC     DPTR
00A6 ED                MOV     A,R5
00A7 F0                MOVX    @DPTR,A
00A8 A3                INC     DPTR
00A9 E4                CLR     A
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 88  

00AA F0                MOVX    @DPTR,A
00AB A3                INC     DPTR
00AC EF                MOV     A,R7
00AD F0                MOVX    @DPTR,A
00AE 120000      E     LCALL   _Printf
00B1 900000      R     MOV     DPTR,#i
00B4 E4                CLR     A
00B5 75F001            MOV     B,#01H
00B8 120000      E     LCALL   ?C?IILDX
00BB 22                RET     
             ; FUNCTION MonNewDumpI2C (END)

             ; FUNCTION MonWriteBit (BEGIN)
                                           ; SOURCE LINE # 363
                                           ; SOURCE LINE # 364
                                           ; SOURCE LINE # 369
0000 900000      R     MOV     DPTR,#argc
0003 E0                MOVX    A,@DPTR
0004 C3                CLR     C
0005 9405              SUBB    A,#05H
0007 7480              MOV     A,#080H
0009 9480              SUBB    A,#080H
000B 5006              JNC     ?C0104
                                           ; SOURCE LINE # 370
000D 120000      R     LCALL   L?0337
0010 020000      R     LJMP    ?C0249
                                           ; SOURCE LINE # 372
0013         ?C0104:
                                           ; SOURCE LINE # 373
0013 120000      R     LCALL   L?0290
0016 900000      R     MOV     DPTR,#Slave
0019 EF                MOV     A,R7
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 375
                                           ; SOURCE LINE # 376
001B 120000      R     LCALL   L?0300
001E EF                MOV     A,R7
001F C4                SWAP    A
0020 540F              ANL     A,#0FH
0022 900000      R     MOV     DPTR,#FromBit
                                           ; SOURCE LINE # 377
0025 120000      R     LCALL   L?0301
0028 EF                MOV     A,R7
0029 540F              ANL     A,#0FH
002B 900000      R     MOV     DPTR,#ToBit
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 378
002F 900000      R     MOV     DPTR,#argv+0CH
0032 120000      R     LCALL   L?0303
0035 900000      R     MOV     DPTR,#MonMask
0038 EF                MOV     A,R7
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 380
003A 900000      R     MOV     DPTR,#ToBit
003D E0                MOVX    A,@DPTR
003E FF                MOV     R7,A
003F 900000      R     MOV     DPTR,#FromBit
0042 E0                MOVX    A,@DPTR
0043 FE                MOV     R6,A
0044 C3                CLR     C
0045 9F                SUBB    A,R7
0046 4013              JC      ?C0107
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 89  

0048 EE                MOV     A,R6
0049 D3                SETB    C
004A 9407              SUBB    A,#07H
004C 7480              MOV     A,#080H
004E 9480              SUBB    A,#080H
0050 5009              JNC     ?C0107
0052 EF                MOV     A,R7
0053 9407              SUBB    A,#07H
0055 7480              MOV     A,#080H
0057 9480              SUBB    A,#080H
0059 4009              JC      ?C0106
005B         ?C0107:
                                           ; SOURCE LINE # 381
005B 7BFF              MOV     R3,#0FFH
005D 7A00        R     MOV     R2,#HIGH ?SC_170
005F 7900        R     MOV     R1,#LOW ?SC_170
0061         ?C0248:
0061 020000      R     LJMP    ?C0249
                                           ; SOURCE LINE # 383
0064         ?C0106:
                                           ; SOURCE LINE # 385
0064 900000      R     MOV     DPTR,#mask
0067 74FF              MOV     A,#0FFH
0069 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 386
;---- Variable 'val' assigned to Register 'R4' ----
006A 7C7F              MOV     R4,#07FH
                                           ; SOURCE LINE # 387
;---- Variable 'i' assigned to Register 'R6' ----
006C 7E07              MOV     R6,#07H
006E         ?C0108:
006E 900000      R     MOV     DPTR,#FromBit
0071 E0                MOVX    A,@DPTR
0072 FD                MOV     R5,A
0073 EE                MOV     A,R6
0074 D3                SETB    C
0075 9D                SUBB    A,R5
0076 400C              JC      ?C0109
                                           ; SOURCE LINE # 388
0078 900000      R     MOV     DPTR,#mask
007B E0                MOVX    A,@DPTR
007C 5C                ANL     A,R4
007D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 389
007E EC                MOV     A,R4
007F 13                RRC     A
0080 FC                MOV     R4,A
                                           ; SOURCE LINE # 390
0081 1E                DEC     R6
0082 80EA              SJMP    ?C0108
0084         ?C0109:
                                           ; SOURCE LINE # 392
0084 7CFE              MOV     R4,#0FEH
                                           ; SOURCE LINE # 393
0086 E4                CLR     A
0087 FE                MOV     R6,A
0088         ?C0111:
0088 900000      R     MOV     DPTR,#ToBit
008B E0                MOVX    A,@DPTR
008C FF                MOV     R7,A
008D EE                MOV     A,R6
008E C3                CLR     C
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 90  

008F 9F                SUBB    A,R7
0090 500D              JNC     ?C0112
                                           ; SOURCE LINE # 394
0092 900000      R     MOV     DPTR,#mask
0095 E0                MOVX    A,@DPTR
0096 5C                ANL     A,R4
0097 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 395
0098 EC                MOV     A,R4
0099 25E0              ADD     A,ACC
009B FC                MOV     R4,A
                                           ; SOURCE LINE # 396
009C 0E                INC     R6
009D 80E9              SJMP    ?C0111
009F         ?C0112:
                                           ; SOURCE LINE # 398
009F 900000      R     MOV     DPTR,#Slave
00A2 E0                MOVX    A,@DPTR
00A3 648A              XRL     A,#08AH
00A5 7011              JNZ     ?C0114
                                           ; SOURCE LINE # 399
00A7 120000      R     LCALL   L?0320
                                           ; SOURCE LINE # 400
00AA 120000      R     LCALL   L?0325
                                           ; SOURCE LINE # 402
00AD 120000      R     LCALL   L?0320
00B0 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 403
00B3 120000      R     LCALL   L?0320
                                           ; SOURCE LINE # 404
00B6 800F              SJMP    ?C0247
00B8         ?C0114:
                                           ; SOURCE LINE # 405
                                           ; SOURCE LINE # 406
00B8 120000      R     LCALL   L?0328
                                           ; SOURCE LINE # 407
00BB 120000      R     LCALL   L?0325
                                           ; SOURCE LINE # 409
00BE 120000      R     LCALL   L?0328
00C1 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 410
00C4 120000      R     LCALL   L?0329
00C7         ?C0247:
00C7 120000      E     LCALL   _ReadI2C
00CA 900000      R     MOV     DPTR,#MonRdata
00CD EF                MOV     A,R7
00CE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 411
00CF         ?C0115:
                                           ; SOURCE LINE # 413
00CF 30000F      R     JNB     echo,?C0105
                                           ; SOURCE LINE # 414
00D2 7BFF              MOV     R3,#0FFH
00D4 7A00        R     MOV     R2,#HIGH ?SC_152
00D6 7900        R     MOV     R1,#LOW ?SC_152
00D8 900000      R     MOV     DPTR,#Slave
00DB 120000      R     LCALL   L?0285
00DE         ?C0249:
00DE 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 416
00E1         ?C0105:
00E1 22                RET     
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 91  

00E2         L?0325:
00E2 120000      E     LCALL   _ReadI2C
00E5 900000      R     MOV     DPTR,#MonRdata
00E8 EF                MOV     A,R7
00E9 F0                MOVX    @DPTR,A
00EA 900000      R     MOV     DPTR,#mask
00ED E0                MOVX    A,@DPTR
00EE FE                MOV     R6,A
00EF F4                CPL     A
00F0 5F                ANL     A,R7
00F1 FF                MOV     R7,A
00F2 900000      R     MOV     DPTR,#MonMask
00F5 E0                MOVX    A,@DPTR
00F6 5E                ANL     A,R6
00F7 4F                ORL     A,R7
00F8 900000      R     MOV     DPTR,#MonWdata
00FB F0                MOVX    @DPTR,A
00FC FB                MOV     R3,A
00FD 22                RET     
             ; FUNCTION MonWriteBit (END)

             ; FUNCTION MonTxDump (BEGIN)
                                           ; SOURCE LINE # 442
                                           ; SOURCE LINE # 443
                                           ; SOURCE LINE # 446
0000 120000      R     LCALL   L?0322
0003 5009              JNC     ?C0117
                                           ; SOURCE LINE # 447
0005 7BFF              MOV     R3,#0FFH
0007 7A00        R     MOV     R2,#HIGH ?SC_212
0009 7900        R     MOV     R1,#LOW ?SC_212
000B 020000      E     LJMP    _Puts
                                           ; SOURCE LINE # 449
000E         ?C0117:
                                           ; SOURCE LINE # 450
000E 900000      R     MOV     DPTR,#argv+03H
0011 120000      E     LCALL   ?C?PLDXDATA
0014 120000      R     LCALL   _a2i
0017 900000      R     MOV     DPTR,#count
001A EE                MOV     A,R6
001B F0                MOVX    @DPTR,A
001C A3                INC     DPTR
001D EF                MOV     A,R7
001E F0                MOVX    @DPTR,A
001F         ?C0121:
                                           ; SOURCE LINE # 451
                                           ; SOURCE LINE # 452
001F 900000      R     MOV     DPTR,#count
0022 A3                INC     DPTR
0023 E0                MOVX    A,@DPTR
0024 541F              ANL     A,#01FH
0026 2420              ADD     A,#020H
0028 FF                MOV     R7,A
0029 120000      E     LCALL   _RS_tx
                                           ; SOURCE LINE # 453
002C 900000      R     MOV     DPTR,#count
002F 120000      R     LCALL   L?0327
                                           ; SOURCE LINE # 454
0032 900000      R     MOV     DPTR,#count
0035 E0                MOVX    A,@DPTR
0036 7002              JNZ     ?C0237
0038 A3                INC     DPTR
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 92  

0039 E0                MOVX    A,@DPTR
003A         ?C0237:
003A 70E3              JNZ     ?C0121
                                           ; SOURCE LINE # 455
003C         ?C0118:
003C 22                RET     
             ; FUNCTION MonTxDump (END)

             ; FUNCTION MonHelp (BEGIN)
                                           ; SOURCE LINE # 461
                                           ; SOURCE LINE # 462
                                           ; SOURCE LINE # 463
0000 7BFF              MOV     R3,#0FFH
0002 7A00        R     MOV     R2,#HIGH ?SC_241
0004 7900        R     MOV     R1,#LOW ?SC_241
0006 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 464
0009 7A00        R     MOV     R2,#HIGH ?SC_299
000B 7900        R     MOV     R1,#LOW ?SC_299
                                           ; SOURCE LINE # 465
                                           ; SOURCE LINE # 466
000D 120000      R     LCALL   L?0298
0010 7A00        R     MOV     R2,#HIGH ?SC_355
0012 7900        R     MOV     R1,#LOW ?SC_355
0014 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 467
0017 7A00        R     MOV     R2,#HIGH ?SC_389
0019 7900        R     MOV     R1,#LOW ?SC_389
                                           ; SOURCE LINE # 468
001B 120000      R     LCALL   L?0316
001E 7A00        R     MOV     R2,#HIGH ?SC_424
0020 7900        R     MOV     R1,#LOW ?SC_424
0022 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 469
0025 7A00        R     MOV     R2,#HIGH ?SC_453
0027 7900        R     MOV     R1,#LOW ?SC_453
                                           ; SOURCE LINE # 470
0029 120000      R     LCALL   L?0316
002C 7A00        R     MOV     R2,#HIGH ?SC_496
002E 7900        R     MOV     R1,#LOW ?SC_496
0030 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 471
0033 7A00        R     MOV     R2,#HIGH ?SC_534
0035 7900        R     MOV     R1,#LOW ?SC_534
                                           ; SOURCE LINE # 472
0037 120000      R     LCALL   L?0333
003A 7A00        R     MOV     R2,#HIGH ?SC_571
003C 7900        R     MOV     R1,#LOW ?SC_571
003E 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 473
0041 7A00        R     MOV     R2,#HIGH ?SC_624
0043 7900        R     MOV     R1,#LOW ?SC_624
                                           ; SOURCE LINE # 474
0045 120000      R     LCALL   L?0333
0048 7A00        R     MOV     R2,#HIGH ?SC_667
004A 7900        R     MOV     R1,#LOW ?SC_667
004C 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 475
004F 7BFF              MOV     R3,#0FFH
0051 7A00        R     MOV     R2,#HIGH ?SC_705
0053 7900        R     MOV     R1,#LOW ?SC_705
0055 120000      E     LCALL   _Printf
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 93  

                                           ; SOURCE LINE # 476
0058 7BFF              MOV     R3,#0FFH
005A 7A00        R     MOV     R2,#HIGH ?SC_752
005C 7900        R     MOV     R1,#LOW ?SC_752
005E 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 477
0061 7BFF              MOV     R3,#0FFH
0063 7A00        R     MOV     R2,#HIGH ?SC_800
0065 7900        R     MOV     R1,#LOW ?SC_800
0067 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 478
006A 7BFF              MOV     R3,#0FFH
006C 7A00        R     MOV     R2,#HIGH ?SC_844
006E 7900        R     MOV     R1,#LOW ?SC_844
0070 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 479
0073 7A00        R     MOV     R2,#HIGH ?SC_895
0075 7900        R     MOV     R1,#LOW ?SC_895
                                           ; SOURCE LINE # 480
                                           ; SOURCE LINE # 481
0077 120000      R     LCALL   L?0298
007A 7A00        R     MOV     R2,#HIGH ?SC_895
007C 7900        R     MOV     R1,#LOW ?SC_895
007E 020000      E     LJMP    _Printf
                                           ; SOURCE LINE # 482
0081         L?0298:
0081 7BFF              MOV     R3,#0FFH
0083 120000      E     LCALL   _Printf
0086 7BFF              MOV     R3,#0FFH
0088 7A00        R     MOV     R2,#HIGH ?SC_241
008A 7900        R     MOV     R1,#LOW ?SC_241
008C 120000      E     LCALL   _Printf
008F 7BFF              MOV     R3,#0FFH
0091 22                RET     
0092         L?0316:
0092 7BFF              MOV     R3,#0FFH
0094 120000      E     LCALL   _Printf
0097 7BFF              MOV     R3,#0FFH
0099 22                RET     
009A         L?0333:
009A 7BFF              MOV     R3,#0FFH
009C 120000      E     LCALL   _Printf
009F 7BFF              MOV     R3,#0FFH
00A1 22                RET     
             ; FUNCTION MonHelp (END)

             ; FUNCTION MonGetCommand (BEGIN)
                                           ; SOURCE LINE # 487
                                           ; SOURCE LINE # 488
                                           ; SOURCE LINE # 492
0000 E4                CLR     A
0001 900000      R     MOV     DPTR,#ret
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 494
0005 120000      E     LCALL   RS_ready
0008 EF                MOV     A,R7
0009 7002              JNZ     ?C0123
000B FF                MOV     R7,A
000C 22                RET     
000D         ?C0123:
                                           ; SOURCE LINE # 496
000D 120000      E     LCALL   RS_rx
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 94  

0010 900000      R     MOV     DPTR,#ch
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 499
0015 900000      R     MOV     DPTR,#comment
0018 E0                MOVX    A,@DPTR
0019 601C              JZ      ?C0125
                                           ; SOURCE LINE # 500
001B 900000      R     MOV     DPTR,#ch
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 640D              XRL     A,#0DH
0022 6005              JZ      ?C0127
0024 EF                MOV     A,R7
0025 641B              XRL     A,#01BH
0027 7007              JNZ     ?C0126
0029         ?C0127:
0029 E4                CLR     A
002A 900000      R     MOV     DPTR,#comment
002D F0                MOVX    @DPTR,A
002E 801B              SJMP    ?C0129
0030         ?C0126:
                                           ; SOURCE LINE # 501
                                           ; SOURCE LINE # 502
0030 900000      R     MOV     DPTR,#ch
0033 E0                MOVX    A,@DPTR
0034 FF                MOV     R7,A
                                           ; SOURCE LINE # 503
0035 800E              SJMP    ?C0250
                                           ; SOURCE LINE # 504
                                           ; SOURCE LINE # 505
0037         ?C0125:
                                           ; SOURCE LINE # 506
0037 900000      R     MOV     DPTR,#ch
003A E0                MOVX    A,@DPTR
003B FF                MOV     R7,A
003C B43B0C            CJNE    A,#03BH,?C0129
                                           ; SOURCE LINE # 507
003F 900000      R     MOV     DPTR,#comment
0042 7401              MOV     A,#01H
0044 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 508
0045         ?C0250:
0045 120000      R     LCALL   _Mon_tx
                                           ; SOURCE LINE # 509
0048 7F00              MOV     R7,#00H
004A 22                RET     
                                           ; SOURCE LINE # 510
004B         ?C0129:
                                           ; SOURCE LINE # 513
004B 900000      R     MOV     DPTR,#ch
004E E0                MOVX    A,@DPTR
004F 120000      E     LCALL   ?C?CCASE
0052 0000        R     DW      ?C0149
0054 08                DB      08H
0055 0000        R     DW      ?C0133
0057 0D                DB      0DH
0058 0000        R     DW      ?C0132
005A 1B                DB      01BH
005B 0000        R     DW      ?C0151
005D 2C                DB      02CH
005E 0000        R     DW      ?C0157
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 95  

0060 2E                DB      02EH
0061 0000        R     DW      ?C0148
0063 2F                DB      02FH
0064 0000        R     DW      ?C0154
0066 3C                DB      03CH
0067 0000        R     DW      ?C0160
0069 3E                DB      03EH
006A 0000              DW      00H
006C 0000        R     DW      ?C0163
                                           ; SOURCE LINE # 515
006E         ?C0132:
                                           ; SOURCE LINE # 516
006E E4                CLR     A
006F 900000      R     MOV     DPTR,#argc
0072 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 517
                                           ; SOURCE LINE # 518
                                           ; SOURCE LINE # 519
                                           ; SOURCE LINE # 520
0073 803A              SJMP    ?C0251
                                           ; SOURCE LINE # 523
0075         ?C0133:
                                           ; SOURCE LINE # 525
0075 900000      R     MOV     DPTR,#incnt
0078 E0                MOVX    A,@DPTR
0079 7006              JNZ     ?C0134
                                           ; SOURCE LINE # 526
007B 120000      R     LCALL   Prompt
                                           ; SOURCE LINE # 527
007E 020000      R     LJMP    ?C0131
                                           ; SOURCE LINE # 528
0081         ?C0134:
                                           ; SOURCE LINE # 530
0081 900000      R     MOV     DPTR,#incnt
0084 E0                MOVX    A,@DPTR
0085 FF                MOV     R7,A
0086 04                INC     A
0087 F0                MOVX    @DPTR,A
0088 7400        R     MOV     A,#LOW monstr
008A 2F                ADD     A,R7
008B 120000      R     LCALL   L?0315
008E E4                CLR     A
008F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 531
0090 900000      R     MOV     DPTR,#argc
0093 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 533
0094 900000      R     MOV     DPTR,#i
0097 F0                MOVX    @DPTR,A
0098         ?C0135:
0098 120000      R     LCALL   L?0345
009B 500C              JNC     ?C0136
009D 120000      R     LCALL   L?0313
00A0 E0                MOVX    A,@DPTR
00A1 B42005            CJNE    A,#020H,?C0136
00A4 120000      R     LCALL   L?0349
00A7 80EF              SJMP    ?C0135
00A9         ?C0136:
                                           ; SOURCE LINE # 535
00A9 120000      R     LCALL   L?0313
00AC E0                MOVX    A,@DPTR
00AD 700E              JNZ     ?C0139
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 96  

                                           ; SOURCE LINE # 536
00AF         ?C0251:
00AF 900000      R     MOV     DPTR,#incnt
00B2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 537
00B3 900000      R     MOV     DPTR,#comment
00B6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 538
00B7 120000      R     LCALL   Prompt
                                           ; SOURCE LINE # 539
00BA 7F00              MOV     R7,#00H
00BC 22                RET     
                                           ; SOURCE LINE # 540
00BD         ?C0139:
                                           ; SOURCE LINE # 541
00BD 120000      R     LCALL   L?0341
00C0 900000      R     MOV     DPTR,#argv
00C3 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 542
00C6         ?C0140:
00C6 120000      R     LCALL   L?0345
00C9 504B              JNC     ?C0141
                                           ; SOURCE LINE # 543
00CB 120000      R     LCALL   L?0314
00CE E0                MOVX    A,@DPTR
00CF FF                MOV     R7,A
00D0 6420              XRL     A,#020H
00D2 6003              JZ      ?C0144
00D4 EF                MOV     A,R7
00D5 703A              JNZ     ?C0142
00D7         ?C0144:
                                           ; SOURCE LINE # 544
00D7 120000      R     LCALL   L?0314
00DA E4                CLR     A
00DB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 546
00DC 800E              SJMP    ?C0252
00DE         ?C0145:
                                           ; SOURCE LINE # 547
00DE 900000      R     MOV     DPTR,#i
00E1 E0                MOVX    A,@DPTR
00E2 2400        R     ADD     A,#LOW monstr
00E4 120000      R     LCALL   L?0315
00E7 E0                MOVX    A,@DPTR
00E8 FF                MOV     R7,A
00E9 B42005            CJNE    A,#020H,?C0146
00EC         ?C0252:
00EC 120000      R     LCALL   L?0349
00EF 80ED              SJMP    ?C0145
00F1         ?C0146:
                                           ; SOURCE LINE # 548
00F1 900000      R     MOV     DPTR,#argc
00F4 E0                MOVX    A,@DPTR
00F5 04                INC     A
00F6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 549
00F7 EF                MOV     A,R7
00F8 6017              JZ      ?C0142
                                           ; SOURCE LINE # 550
00FA 120000      R     LCALL   L?0341
00FD 900000      R     MOV     DPTR,#argc
0100 E0                MOVX    A,@DPTR
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 97  

0101 75F003            MOV     B,#03H
0104 A4                MUL     AB
0105 2400        R     ADD     A,#LOW argv
0107 F582              MOV     DPL,A
0109 E4                CLR     A
010A 3400        R     ADDC    A,#HIGH argv
010C F583              MOV     DPH,A
010E 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 551
                                           ; SOURCE LINE # 552
                                           ; SOURCE LINE # 553
0111         ?C0142:
0111 120000      R     LCALL   L?0350
0114 80B0              SJMP    ?C0140
0116         ?C0141:
                                           ; SOURCE LINE # 555
0116 900000      R     MOV     DPTR,#ret
0119 7401              MOV     A,#01H
                                           ; SOURCE LINE # 556
011B 120000      R     LCALL   L?0351
                                           ; SOURCE LINE # 557
011E E4                CLR     A
011F 900000      R     MOV     DPTR,#incnt
0122 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 559
0123 020000      R     LJMP    ?C0131
                                           ; SOURCE LINE # 562
0126         ?C0148:
                                           ; SOURCE LINE # 563
0126 900000      R     MOV     DPTR,#last_argc
0129 E0                MOVX    A,@DPTR
012A 900000      R     MOV     DPTR,#argc
012D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 564
012E 900000      R     MOV     DPTR,#ret
0131 7401              MOV     A,#01H
0133 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 565
0134 8061              SJMP    ?C0131
                                           ; SOURCE LINE # 568
0136         ?C0149:
                                           ; SOURCE LINE # 569
0136 900000      R     MOV     DPTR,#incnt
0139 E0                MOVX    A,@DPTR
013A 605B              JZ      ?C0131
                                           ; SOURCE LINE # 570
013C 14                DEC     A
013D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 571
013E 120000      R     LCALL   L?0342
                                           ; SOURCE LINE # 572
0141 7F20              MOV     R7,#020H
0143 120000      R     LCALL   _Mon_tx
                                           ; SOURCE LINE # 573
0146 120000      R     LCALL   L?0342
                                           ; SOURCE LINE # 574
                                           ; SOURCE LINE # 575
0149 804C              SJMP    ?C0131
                                           ; SOURCE LINE # 578
014B         ?C0151:
                                           ; SOURCE LINE # 579
014B 900000      R     MOV     DPTR,#incnt
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 98  

014E E0                MOVX    A,@DPTR
014F 6002              JZ      ?C0152
                                           ; SOURCE LINE # 580
                                           ; SOURCE LINE # 581
                                           ; SOURCE LINE # 582
0151 802B              SJMP    ?C0259
0153         ?C0152:
                                           ; SOURCE LINE # 584
0153 E4                CLR     A
0154 FF                MOV     R7,A
                                           ; SOURCE LINE # 585
0155 8022              SJMP    ?C0258
                                           ; SOURCE LINE # 587
0157         ?C0154:
                                           ; SOURCE LINE # 588
0157 900000      R     MOV     DPTR,#incnt
015A E0                MOVX    A,@DPTR
015B 6002              JZ      ?C0155
                                           ; SOURCE LINE # 589
015D         ?C0253:
                                           ; SOURCE LINE # 590
                                           ; SOURCE LINE # 591
015D 801F              SJMP    ?C0259
015F         ?C0155:
                                           ; SOURCE LINE # 593
015F 7F0A              MOV     R7,#0AH
0161         ?C0254:
                                           ; SOURCE LINE # 594
0161 8016              SJMP    ?C0258
                                           ; SOURCE LINE # 596
0163         ?C0157:
                                           ; SOURCE LINE # 597
0163 900000      R     MOV     DPTR,#incnt
0166 E0                MOVX    A,@DPTR
0167 6002              JZ      ?C0158
                                           ; SOURCE LINE # 598
0169         ?C0255:
                                           ; SOURCE LINE # 599
                                           ; SOURCE LINE # 600
0169 8013              SJMP    ?C0259
016B         ?C0158:
                                           ; SOURCE LINE # 602
016B 7F01              MOV     R7,#01H
016D         ?C0256:
                                           ; SOURCE LINE # 603
016D 800A              SJMP    ?C0258
                                           ; SOURCE LINE # 605
016F         ?C0160:
                                           ; SOURCE LINE # 606
016F 900000      R     MOV     DPTR,#incnt
0172 E0                MOVX    A,@DPTR
0173 6002              JZ      ?C0161
                                           ; SOURCE LINE # 607
0175         ?C0257:
                                           ; SOURCE LINE # 608
                                           ; SOURCE LINE # 609
0175 8007              SJMP    ?C0259
0177         ?C0161:
                                           ; SOURCE LINE # 611
0177 7F0B              MOV     R7,#0BH
0179         ?C0258:
0179 120000      R     LCALL   _MonIncDecI2C
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 99  

                                           ; SOURCE LINE # 612
017C 8019              SJMP    ?C0131
                                           ; SOURCE LINE # 614
017E         ?C0163:
                                           ; SOURCE LINE # 615
017E         ?C0259:
017E 900000      R     MOV     DPTR,#ch
0181 E0                MOVX    A,@DPTR
0182 FF                MOV     R7,A
0183 120000      R     LCALL   _Mon_tx
                                           ; SOURCE LINE # 616
0186 900000      R     MOV     DPTR,#ch
0189 E0                MOVX    A,@DPTR
018A FF                MOV     R7,A
018B 900000      R     MOV     DPTR,#incnt
018E E0                MOVX    A,@DPTR
018F FE                MOV     R6,A
0190 04                INC     A
0191 F0                MOVX    @DPTR,A
0192 120000      R     LCALL   L?0314
0195 EF                MOV     A,R7
0196 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 617
                                           ; SOURCE LINE # 618
0197         ?C0131:
                                           ; SOURCE LINE # 620
0197 900000      R     MOV     DPTR,#ret
019A E0                MOVX    A,@DPTR
019B FF                MOV     R7,A
019C 6008              JZ      ?C0164
                                           ; SOURCE LINE # 621
019E E4                CLR     A
019F 900000      R     MOV     DPTR,#comment
                                           ; SOURCE LINE # 622
01A2 120000      R     LCALL   L?0351
                                           ; SOURCE LINE # 623
01A5 22                RET     
                                           ; SOURCE LINE # 624
01A6         ?C0164:
                                           ; SOURCE LINE # 625
                                           ; SOURCE LINE # 626
01A6 900000      R     MOV     DPTR,#ret
01A9 E0                MOVX    A,@DPTR
01AA FF                MOV     R7,A
                                           ; SOURCE LINE # 627
                                           ; SOURCE LINE # 628
01AB         ?C0124:
01AB 22                RET     
01AC         L?0342:
01AC 900000      R     MOV     DPTR,#ch
01AF E0                MOVX    A,@DPTR
01B0 FF                MOV     R7,A
01B1 120000      R     LCALL   _Mon_tx
01B4 22                RET     
             ; FUNCTION MonGetCommand (END)

             ; FUNCTION Monitor (BEGIN)
                                           ; SOURCE LINE # 634
                                           ; SOURCE LINE # 635
                                           ; SOURCE LINE # 636
0000 120000      R     LCALL   MonGetCommand
0003 EF                MOV     A,R7
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 100 

0004 7003              JNZ     $ + 5H
0006 020000      R     LJMP    ?C0167
                                           ; SOURCE LINE # 650
0009 C200        R     CLR     indirect
                                           ; SOURCE LINE # 653
000B 7A00        R     MOV     R2,#HIGH ?SC_898
000D 7900        R     MOV     R1,#LOW ?SC_898
000F 120000      R     LCALL   L?0273
0012 7006              JNZ     ?C0168
                                           ; SOURCE LINE # 654
0014 120000      R     LCALL   MonWriteI2C
                                           ; SOURCE LINE # 655
0017 020000      R     LJMP    ?C0169
001A         ?C0168:
                                           ; SOURCE LINE # 656
001A 7A00        R     MOV     R2,#HIGH ?SC_900
001C 7900        R     MOV     R1,#LOW ?SC_900
001E 120000      R     LCALL   L?0273
0021 7008              JNZ     ?C0170
                                           ; SOURCE LINE # 657
0023 C200        R     CLR     indirect
                                           ; SOURCE LINE # 658
0025 120000      R     LCALL   MonNewWriteI2C
                                           ; SOURCE LINE # 659
0028 020000      R     LJMP    ?C0169
002B         ?C0170:
                                           ; SOURCE LINE # 671
002B 7A00        R     MOV     R2,#HIGH ?SC_902
002D 7900        R     MOV     R1,#LOW ?SC_902
002F 120000      R     LCALL   L?0274
0032 7006              JNZ     ?C0172
                                           ; SOURCE LINE # 672
0034 120000      R     LCALL   MonReadI2C
                                           ; SOURCE LINE # 673
0037 020000      R     LJMP    ?C0169
003A         ?C0172:
                                           ; SOURCE LINE # 674
003A 7A00        R     MOV     R2,#HIGH ?SC_904
003C 7900        R     MOV     R1,#LOW ?SC_904
003E 120000      R     LCALL   L?0274
0041 7008              JNZ     ?C0174
                                           ; SOURCE LINE # 675
0043 C200        R     CLR     indirect
                                           ; SOURCE LINE # 676
0045 120000      R     LCALL   MonNewReadI2C
                                           ; SOURCE LINE # 677
0048 020000      R     LJMP    ?C0169
004B         ?C0174:
                                           ; SOURCE LINE # 688
004B 7A00        R     MOV     R2,#HIGH ?SC_906
004D 7900        R     MOV     R1,#LOW ?SC_906
004F 120000      R     LCALL   L?0275
0052 700F              JNZ     ?C0176
                                           ; SOURCE LINE # 689
0054 7BFF              MOV     R3,#0FFH
0056 7A00        R     MOV     R2,#HIGH ?SC_908
0058 7900        R     MOV     R1,#LOW ?SC_908
005A 120000      E     LCALL   _Puts
                                           ; SOURCE LINE # 690
005D 120000      R     LCALL   MonDumpI2C
                                           ; SOURCE LINE # 691
0060 020000      R     LJMP    ?C0169
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 101 

0063         ?C0176:
                                           ; SOURCE LINE # 692
0063 7A00        R     MOV     R2,#HIGH ?SC_921
0065 7900        R     MOV     R1,#LOW ?SC_921
0067 120000      R     LCALL   L?0275
006A 7008              JNZ     ?C0178
                                           ; SOURCE LINE # 693
006C C200        R     CLR     indirect
                                           ; SOURCE LINE # 694
006E 120000      R     LCALL   MonNewDumpI2C
                                           ; SOURCE LINE # 695
0071 020000      R     LJMP    ?C0169
0074         ?C0178:
                                           ; SOURCE LINE # 698
0074 7A00        R     MOV     R2,#HIGH ?SC_923
0076 7900        R     MOV     R1,#LOW ?SC_923
0078 120000      R     LCALL   L?0276
007B 7006              JNZ     ?C0180
                                           ; SOURCE LINE # 699
007D 120000      R     LCALL   MonWriteBit
                                           ; SOURCE LINE # 700
0080 020000      R     LJMP    ?C0169
0083         ?C0180:
                                           ; SOURCE LINE # 784
0083 7A00        R     MOV     R2,#HIGH ?SC_925
0085 7900        R     MOV     R1,#LOW ?SC_925
0087 120000      R     LCALL   L?0276
008A 7008              JNZ     ?C0182
                                           ; SOURCE LINE # 785
008C 120000      R     LCALL   L?0290
008F 8F00        R     MOV     MonAddress,R7
                                           ; SOURCE LINE # 786
0091 020000      R     LJMP    ?C0169
0094         ?C0182:
                                           ; SOURCE LINE # 789
0094 7A00        R     MOV     R2,#HIGH ?SC_927
0096 7900        R     MOV     R1,#LOW ?SC_927
0098 120000      R     LCALL   L?0278
009B 6012              JZ      ?C0185
009D 7A00        R     MOV     R2,#HIGH ?SC_929
009F 7900        R     MOV     R1,#LOW ?SC_929
00A1 120000      R     LCALL   L?0278
00A4 6009              JZ      ?C0185
00A6 7A00        R     MOV     R2,#HIGH ?SC_934
00A8 7900        R     MOV     R1,#LOW ?SC_934
00AA 120000      R     LCALL   L?0280
00AD 7006              JNZ     ?C0184
00AF         ?C0185:
                                           ; SOURCE LINE # 790
00AF 120000      R     LCALL   MonHelp
                                           ; SOURCE LINE # 792
00B2 020000      R     LJMP    ?C0169
00B5         ?C0184:
                                           ; SOURCE LINE # 794
00B5 7A00        R     MOV     R2,#HIGH ?SC_936
00B7 7900        R     MOV     R1,#LOW ?SC_936
00B9 120000      R     LCALL   L?0280
00BC 702E              JNZ     ?C0187
                                           ; SOURCE LINE # 796
00BE 900000      R     MOV     DPTR,#argc
00C1 E0                MOVX    A,@DPTR
00C2 6401              XRL     A,#01H
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 102 

00C4 701B              JNZ     ?C0188
                                           ; SOURCE LINE # 797
00C6 7BFF              MOV     R3,#0FFH
00C8 7A00        R     MOV     R2,#HIGH ?SC_938
00CA 7900        R     MOV     R1,#LOW ?SC_938
00CC 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 798
00CF 7BFF              MOV     R3,#0FFH
00D1 7A00        R     MOV     R2,#HIGH ?SC_971
00D3 7900        R     MOV     R1,#LOW ?SC_971
00D5 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 799
00D8 7BFF              MOV     R3,#0FFH
00DA 7A00        R     MOV     R2,#HIGH ?SC_1005
00DC 7900        R     MOV     R1,#LOW ?SC_1005
                                           ; SOURCE LINE # 800
00DE 020000      R     LJMP    ?C0272
00E1         ?C0188:
                                           ; SOURCE LINE # 801
                                           ; SOURCE LINE # 803
00E1 120000      R     LCALL   L?0290
00E4 900000      R     MOV     DPTR,#mode
00E7 EF                MOV     A,R7
00E8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 805
                                           ; SOURCE LINE # 806
00E9 020000      R     LJMP    ?C0169
00EC         ?C0187:
                                           ; SOURCE LINE # 816
00EC 7A00        R     MOV     R2,#HIGH ?SC_1030
00EE 7900        R     MOV     R1,#LOW ?SC_1030
00F0 120000      R     LCALL   L?0282
00F3 7006              JNZ     ?C0191
                                           ; SOURCE LINE # 817
00F5 120000      E     LCALL   LCDPower
                                           ; SOURCE LINE # 818
00F8 020000      R     LJMP    ?C0169
00FB         ?C0191:
                                           ; SOURCE LINE # 870
00FB 7A00        R     MOV     R2,#HIGH ?SC_1036
00FD 7900        R     MOV     R1,#LOW ?SC_1036
00FF 120000      R     LCALL   L?0282
0102 7029              JNZ     ?C0193
                                           ; SOURCE LINE # 871
0104 900000      R     MOV     DPTR,#argc
0107 E0                MOVX    A,@DPTR
0108 6402              XRL     A,#02H
010A 700B              JNZ     ?C0194
                                           ; SOURCE LINE # 872
010C 120000      R     LCALL   L?0290
010F 900000      E     MOV     DPTR,#DebugLevel
0112 EF                MOV     A,R7
0113 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 873
0114 120000      E     LCALL   _SaveDebugLevelEE
                                           ; SOURCE LINE # 874
0117         ?C0194:
                                           ; SOURCE LINE # 875
0117 7BFF              MOV     R3,#0FFH
0119 7A00        R     MOV     R2,#HIGH ?SC_1042
011B 7900        R     MOV     R1,#LOW ?SC_1042
011D 900000      E     MOV     DPTR,#DebugLevel
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 103 

0120 E0                MOVX    A,@DPTR
0121 FF                MOV     R7,A
0122 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
0125 E4                CLR     A
0126 F0                MOVX    @DPTR,A
0127 A3                INC     DPTR
0128 EF                MOV     A,R7
0129 F0                MOVX    @DPTR,A
012A         ?C0260:
                                           ; SOURCE LINE # 876
012A 020000      R     LJMP    ?C0272
012D         ?C0193:
                                           ; SOURCE LINE # 879
012D 7A00        R     MOV     R2,#HIGH ?SC_1062
012F 7900        R     MOV     R1,#LOW ?SC_1062
0131 120000      R     LCALL   L?0287
0134 701B              JNZ     ?C0196
                                           ; SOURCE LINE # 880
0136 120000      R     LCALL   L?0281
0139 700B              JNZ     ?C0197
                                           ; SOURCE LINE # 881
013B C200        R     CLR     echo
                                           ; SOURCE LINE # 882
013D 7BFF              MOV     R3,#0FFH
013F 7A00        R     MOV     R2,#HIGH ?SC_1071
0141 7900        R     MOV     R1,#LOW ?SC_1071
0143         ?C0261:
                                           ; SOURCE LINE # 883
0143 020000      R     LJMP    ?C0272
0146         ?C0197:
                                           ; SOURCE LINE # 884
                                           ; SOURCE LINE # 885
0146 D200        R     SETB    echo
                                           ; SOURCE LINE # 886
0148 7BFF              MOV     R3,#0FFH
014A 7A00        R     MOV     R2,#HIGH ?SC_1082
014C 7900        R     MOV     R1,#LOW ?SC_1082
014E         ?C0262:
                                           ; SOURCE LINE # 887
                                           ; SOURCE LINE # 888
014E 020000      R     LJMP    ?C0272
0151         ?C0196:
                                           ; SOURCE LINE # 890
0151 7A00        R     MOV     R2,#HIGH ?SC_1092
0153 7900        R     MOV     R1,#LOW ?SC_1092
0155 120000      R     LCALL   L?0287
0158 702E              JNZ     ?C0200
                                           ; SOURCE LINE # 891
015A 120000      R     LCALL   L?0277
015D 700B              JNZ     ?C0201
                                           ; SOURCE LINE # 892
015F C2B4              CLR     P3_4
                                           ; SOURCE LINE # 893
0161 7BFF              MOV     R3,#0FFH
0163 7A00        R     MOV     R2,#HIGH ?SC_1100
0165 7900        R     MOV     R1,#LOW ?SC_1100
0167         ?C0263:
                                           ; SOURCE LINE # 894
0167 020000      R     LJMP    ?C0272
016A         ?C0201:
                                           ; SOURCE LINE # 895
016A 120000      R     LCALL   L?0279
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 104 

016D 700B              JNZ     ?C0203
                                           ; SOURCE LINE # 896
016F D2B4              SETB    P3_4
                                           ; SOURCE LINE # 897
0171 7BFF              MOV     R3,#0FFH
0173 7A00        R     MOV     R2,#HIGH ?SC_1122
0175 7900        R     MOV     R1,#LOW ?SC_1122
0177         ?C0264:
                                           ; SOURCE LINE # 898
0177 020000      R     LJMP    ?C0272
017A         ?C0203:
                                           ; SOURCE LINE # 899
                                           ; SOURCE LINE # 900
017A 7BFF              MOV     R3,#0FFH
017C 7A00        R     MOV     R2,#HIGH ?SC_1142
017E 7900        R     MOV     R1,#LOW ?SC_1142
0180 A2B4              MOV     C,P3_4
0182 120000      R     LCALL   L?0334
0185         ?C0265:
                                           ; SOURCE LINE # 901
                                           ; SOURCE LINE # 902
0185 020000      R     LJMP    ?C0272
0188         ?C0200:
                                           ; SOURCE LINE # 903
0188 7A00        R     MOV     R2,#HIGH ?SC_1162
018A 7900        R     MOV     R1,#LOW ?SC_1162
018C 120000      R     LCALL   L?0291
018F 7028              JNZ     ?C0206
                                           ; SOURCE LINE # 904
0191 120000      R     LCALL   L?0277
0194 7009              JNZ     ?C0207
                                           ; SOURCE LINE # 906
0196 7BFF              MOV     R3,#0FFH
0198 7A00        R     MOV     R2,#HIGH ?SC_1167
019A 7900        R     MOV     R1,#LOW ?SC_1167
019C         ?C0266:
                                           ; SOURCE LINE # 907
019C 020000      R     LJMP    ?C0272
019F         ?C0207:
                                           ; SOURCE LINE # 908
019F 120000      R     LCALL   L?0279
01A2 7BFF              MOV     R3,#0FFH
01A4 7007              JNZ     ?C0209
                                           ; SOURCE LINE # 910
01A6 7A00        R     MOV     R2,#HIGH ?SC_1186
01A8 7900        R     MOV     R1,#LOW ?SC_1186
01AA         ?C0267:
                                           ; SOURCE LINE # 911
01AA 020000      R     LJMP    ?C0272
01AD         ?C0209:
                                           ; SOURCE LINE # 912
                                           ; SOURCE LINE # 913
01AD 7A00        R     MOV     R2,#HIGH ?SC_1205
01AF 7900        R     MOV     R1,#LOW ?SC_1205
01B1 A287              MOV     C,P0_7
01B3 120000      R     LCALL   L?0334
01B6         ?C0268:
                                           ; SOURCE LINE # 914
                                           ; SOURCE LINE # 915
01B6 020000      R     LJMP    ?C0272
01B9         ?C0206:
                                           ; SOURCE LINE # 916
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 105 

01B9 7A00        R     MOV     R2,#HIGH ?SC_1224
01BB 7900        R     MOV     R1,#LOW ?SC_1224
01BD 120000      R     LCALL   L?0291
01C0 7036              JNZ     ?C0212
                                           ; SOURCE LINE # 917
01C2 7A00        R     MOV     R2,#HIGH ?SC_1098
01C4 7900        R     MOV     R1,#LOW ?SC_1098
01C6 120000      R     LCALL   L?0288
01C9 700B              JNZ     ?C0213
                                           ; SOURCE LINE # 918
01CB C2B7              CLR     P3_7
                                           ; SOURCE LINE # 919
01CD 7BFF              MOV     R3,#0FFH
01CF 7A00        R     MOV     R2,#HIGH ?SC_1228
01D1 7900        R     MOV     R1,#LOW ?SC_1228
01D3         ?C0269:
                                           ; SOURCE LINE # 920
01D3 020000      R     LJMP    ?C0272
01D6         ?C0213:
                                           ; SOURCE LINE # 921
01D6 7A00        R     MOV     R2,#HIGH ?SC_1120
01D8 7900        R     MOV     R1,#LOW ?SC_1120
01DA 120000      R     LCALL   L?0288
01DD 700B              JNZ     ?C0215
                                           ; SOURCE LINE # 922
01DF D2B7              SETB    P3_7
                                           ; SOURCE LINE # 923
01E1 7BFF              MOV     R3,#0FFH
01E3 7A00        R     MOV     R2,#HIGH ?SC_1252
01E5 7900        R     MOV     R1,#LOW ?SC_1252
01E7         ?C0270:
                                           ; SOURCE LINE # 924
01E7 020000      R     LJMP    ?C0272
01EA         ?C0215:
                                           ; SOURCE LINE # 925
                                           ; SOURCE LINE # 926
01EA 7BFF              MOV     R3,#0FFH
01EC 7A00        R     MOV     R2,#HIGH ?SC_1276
01EE 7900        R     MOV     R1,#LOW ?SC_1276
01F0 A2B7              MOV     C,P3_7
01F2 120000      R     LCALL   L?0335
01F5         ?C0271:
                                           ; SOURCE LINE # 927
                                           ; SOURCE LINE # 928
01F5 020000      R     LJMP    ?C0272
01F8         ?C0212:
                                           ; SOURCE LINE # 930
01F8 7A00        R     MOV     R2,#HIGH ?SC_1300
01FA 7900        R     MOV     R1,#LOW ?SC_1300
01FC 120000      R     LCALL   L?0304
01FF 704D              JNZ     ?C0218
                                           ; SOURCE LINE # 931
0201 7A00        R     MOV     R2,#HIGH ?SC_1304
0203 7900        R     MOV     R1,#LOW ?SC_1304
0205 120000      R     LCALL   L?0297
0208 7003              JNZ     $ + 5H
020A 020000      R     LJMP    ?C0169
                                           ; SOURCE LINE # 933
                                           ; SOURCE LINE # 934
020D 7A00        R     MOV     R2,#HIGH ?SC_1309
020F 7900        R     MOV     R1,#LOW ?SC_1309
0211 120000      R     LCALL   L?0297
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 106 

0214 701D              JNZ     ?C0221
                                           ; SOURCE LINE # 935
0216 7BFF              MOV     R3,#0FFH
0218 7A00        R     MOV     R2,#HIGH ?SC_1313
021A 7900        R     MOV     R1,#LOW ?SC_1313
021C 120000      E     LCALL   _Puts
021F         ?C0222:
                                           ; SOURCE LINE # 936
021F 120000      E     LCALL   RS_ready
0222 EF                MOV     A,R7
0223 6003              JZ      $ + 5H
0225 020000      R     LJMP    ?C0169
                                           ; SOURCE LINE # 937
0228 7D95              MOV     R5,#095H
022A 7F8A              MOV     R7,#08AH
022C 120000      E     LCALL   _ReadI2C
022F 8FA0              MOV     P2,R7
                                           ; SOURCE LINE # 938
0231 80EC              SJMP    ?C0222
                                           ; SOURCE LINE # 939
0233         ?C0221:
                                           ; SOURCE LINE # 940
0233 7A00        R     MOV     R2,#HIGH ?SC_1356
0235 7900        R     MOV     R1,#LOW ?SC_1356
0237 120000      R     LCALL   L?0307
023A 7006              JNZ     ?C0225
                                           ; SOURCE LINE # 941
023C 120000      E     LCALL   DisplayInput
                                           ; SOURCE LINE # 942
023F 020000      R     LJMP    ?C0169
0242         ?C0225:
                                           ; SOURCE LINE # 943
0242 120000      R     LCALL   L?0281
0245 707A              JNZ     ?C0169
                                           ; SOURCE LINE # 944
0247 FF                MOV     R7,A
0248 120000      E     LCALL   _ShowOSDWindowAll
                                           ; SOURCE LINE # 945
                                           ; SOURCE LINE # 1087
024B 020000      R     LJMP    ?C0169
024E         ?C0218:
                                           ; SOURCE LINE # 1090
024E 7A00        R     MOV     R2,#HIGH ?SC_1362
0250 7900        R     MOV     R1,#LOW ?SC_1362
0252 120000      R     LCALL   L?0304
0255 7005              JNZ     ?C0229
                                           ; SOURCE LINE # 1091
0257 120000      R     LCALL   MonTxDump
                                           ; SOURCE LINE # 1092
025A 8065              SJMP    ?C0169
025C         ?C0229:
                                           ; SOURCE LINE # 1095
025C 7BFF              MOV     R3,#0FFH
025E 7A00        R     MOV     R2,#HIGH ?SC_1365
0260 7900        R     MOV     R1,#LOW ?SC_1365
0262 900000      R     MOV     DPTR,#?_stricmp?BYTE+03H
0265 120000      E     LCALL   ?C?PSTXDATA
0268 900000      R     MOV     DPTR,#argv
026B 120000      E     LCALL   ?C?PLDXDATA
026E 120000      R     LCALL   _stricmp
0271 EF                MOV     A,R7
0272 4E                ORL     A,R6
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 107 

0273 7043              JNZ     ?C0231
                                           ; SOURCE LINE # 1096
0275 7A00        R     MOV     R2,#HIGH ?SC_1370
0277 7900        R     MOV     R1,#LOW ?SC_1370
0279 120000      R     LCALL   L?0307
027C 700B              JNZ     ?C0232
                                           ; SOURCE LINE # 1097
027E 900000      R     MOV     DPTR,#argv+06H
0281 120000      R     LCALL   L?0303
0284 120000      E     LCALL   _DisplayRAMFont
                                           ; SOURCE LINE # 1098
0287 8038              SJMP    ?C0169
0289         ?C0232:
                                           ; SOURCE LINE # 1099
0289 7BFF              MOV     R3,#0FFH
028B 7A00        R     MOV     R2,#HIGH ?SC_1374
028D 7900        R     MOV     R1,#LOW ?SC_1374
028F 900000      R     MOV     DPTR,#?_stricmp?BYTE+03H
0292 120000      E     LCALL   ?C?PSTXDATA
0295 900000      R     MOV     DPTR,#argv+03H
0298 120000      E     LCALL   ?C?PLDXDATA
029B 120000      R     LCALL   _stricmp
029E EF                MOV     A,R7
029F 4E                ORL     A,R6
02A0 700B              JNZ     ?C0234
                                           ; SOURCE LINE # 1100
02A2 900000      R     MOV     DPTR,#argv+06H
02A5 120000      R     LCALL   L?0303
02A8 120000      E     LCALL   _DisplayROMFont
                                           ; SOURCE LINE # 1101
02AB 8014              SJMP    ?C0169
02AD         ?C0234:
                                           ; SOURCE LINE # 1102
                                           ; SOURCE LINE # 1103
02AD 7BFF              MOV     R3,#0FFH
02AF 7A00        R     MOV     R2,#HIGH ?SC_1378
02B1 7900        R     MOV     R1,#LOW ?SC_1378
02B3 120000      E     LCALL   _Puts
                                           ; SOURCE LINE # 1104
                                           ; SOURCE LINE # 1105
02B6 8009              SJMP    ?C0169
02B8         ?C0231:
                                           ; SOURCE LINE # 1130
                                           ; SOURCE LINE # 1131
02B8 7BFF              MOV     R3,#0FFH
02BA 7A00        R     MOV     R2,#HIGH ?SC_1418
02BC 7900        R     MOV     R1,#LOW ?SC_1418
02BE         ?C0272:
02BE 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 1132
02C1         ?C0169:
                                           ; SOURCE LINE # 1134
02C1 120000      R     LCALL   Prompt
                                           ; SOURCE LINE # 1136
02C4         ?C0167:
02C4 22                RET     
02C5         L?0273:
02C5 7BFF              MOV     R3,#0FFH
02C7 900000      R     MOV     DPTR,#?_stricmp?BYTE+03H
02CA 120000      E     LCALL   ?C?PSTXDATA
02CD 900000      R     MOV     DPTR,#argv
02D0 120000      E     LCALL   ?C?PLDXDATA
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 108 

02D3 120000      R     LCALL   _stricmp
02D6 EF                MOV     A,R7
02D7 4E                ORL     A,R6
02D8 22                RET     
02D9         L?0274:
02D9 7BFF              MOV     R3,#0FFH
02DB 900000      R     MOV     DPTR,#?_stricmp?BYTE+03H
02DE 120000      E     LCALL   ?C?PSTXDATA
02E1 900000      R     MOV     DPTR,#argv
02E4 120000      E     LCALL   ?C?PLDXDATA
02E7 120000      R     LCALL   _stricmp
02EA EF                MOV     A,R7
02EB 4E                ORL     A,R6
02EC 22                RET     
02ED         L?0275:
02ED 7BFF              MOV     R3,#0FFH
02EF 900000      R     MOV     DPTR,#?_stricmp?BYTE+03H
02F2 120000      E     LCALL   ?C?PSTXDATA
02F5 900000      R     MOV     DPTR,#argv
02F8 120000      E     LCALL   ?C?PLDXDATA
02FB 120000      R     LCALL   _stricmp
02FE EF                MOV     A,R7
02FF 4E                ORL     A,R6
0300 22                RET     
0301         L?0276:
0301 7BFF              MOV     R3,#0FFH
0303 900000      R     MOV     DPTR,#?_stricmp?BYTE+03H
0306 120000      E     LCALL   ?C?PSTXDATA
0309 900000      R     MOV     DPTR,#argv
030C 120000      E     LCALL   ?C?PLDXDATA
030F 120000      R     LCALL   _stricmp
0312 EF                MOV     A,R7
0313 4E                ORL     A,R6
0314 22                RET     
0315         L?0277:
0315 7BFF              MOV     R3,#0FFH
0317 7A00        R     MOV     R2,#HIGH ?SC_1098
0319 7900        R     MOV     R1,#LOW ?SC_1098
031B 900000      R     MOV     DPTR,#?_stricmp?BYTE+03H
031E 120000      E     LCALL   ?C?PSTXDATA
0321 900000      R     MOV     DPTR,#argv+03H
0324 120000      E     LCALL   ?C?PLDXDATA
0327 120000      R     LCALL   _stricmp
032A EF                MOV     A,R7
032B 4E                ORL     A,R6
032C 22                RET     
032D         L?0278:
032D 7BFF              MOV     R3,#0FFH
032F 900000      R     MOV     DPTR,#?_stricmp?BYTE+03H
0332 120000      E     LCALL   ?C?PSTXDATA
0335 900000      R     MOV     DPTR,#argv
0338 120000      E     LCALL   ?C?PLDXDATA
033B 120000      R     LCALL   _stricmp
033E EF                MOV     A,R7
033F 4E                ORL     A,R6
0340 22                RET     
0341         L?0279:
0341 7BFF              MOV     R3,#0FFH
0343 7A00        R     MOV     R2,#HIGH ?SC_1120
0345 7900        R     MOV     R1,#LOW ?SC_1120
0347 900000      R     MOV     DPTR,#?_stricmp?BYTE+03H
034A 120000      E     LCALL   ?C?PSTXDATA
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 109 

034D 900000      R     MOV     DPTR,#argv+03H
0350 120000      E     LCALL   ?C?PLDXDATA
0353 120000      R     LCALL   _stricmp
0356 EF                MOV     A,R7
0357 4E                ORL     A,R6
0358 22                RET     
0359         L?0280:
0359 7BFF              MOV     R3,#0FFH
035B 900000      R     MOV     DPTR,#?_stricmp?BYTE+03H
035E 120000      E     LCALL   ?C?PSTXDATA
0361 900000      R     MOV     DPTR,#argv
0364 120000      E     LCALL   ?C?PLDXDATA
0367 120000      R     LCALL   _stricmp
036A EF                MOV     A,R7
036B 4E                ORL     A,R6
036C 22                RET     
036D         L?0281:
036D 7BFF              MOV     R3,#0FFH
036F 7A00        R     MOV     R2,#HIGH ?SC_1067
0371 7900        R     MOV     R1,#LOW ?SC_1067
0373 900000      R     MOV     DPTR,#?_stricmp?BYTE+03H
0376 120000      E     LCALL   ?C?PSTXDATA
0379 900000      R     MOV     DPTR,#argv+03H
037C 120000      E     LCALL   ?C?PLDXDATA
037F 120000      R     LCALL   _stricmp
0382 EF                MOV     A,R7
0383 4E                ORL     A,R6
0384 22                RET     
0385         L?0282:
0385 7BFF              MOV     R3,#0FFH
0387 900000      R     MOV     DPTR,#?_stricmp?BYTE+03H
038A 120000      E     LCALL   ?C?PSTXDATA
038D 900000      R     MOV     DPTR,#argv
0390 120000      E     LCALL   ?C?PLDXDATA
0393 120000      R     LCALL   _stricmp
0396 EF                MOV     A,R7
0397 4E                ORL     A,R6
0398 22                RET     
0399         L?0287:
0399 7BFF              MOV     R3,#0FFH
039B 900000      R     MOV     DPTR,#?_stricmp?BYTE+03H
039E 120000      E     LCALL   ?C?PSTXDATA
03A1 900000      R     MOV     DPTR,#argv
03A4 120000      E     LCALL   ?C?PLDXDATA
03A7 120000      R     LCALL   _stricmp
03AA EF                MOV     A,R7
03AB 4E                ORL     A,R6
03AC 22                RET     
03AD         L?0288:
03AD 7BFF              MOV     R3,#0FFH
03AF 900000      R     MOV     DPTR,#?_stricmp?BYTE+03H
03B2 120000      E     LCALL   ?C?PSTXDATA
03B5 900000      R     MOV     DPTR,#argv+03H
03B8 120000      E     LCALL   ?C?PLDXDATA
03BB 120000      R     LCALL   _stricmp
03BE EF                MOV     A,R7
03BF 4E                ORL     A,R6
03C0 22                RET     
03C1         L?0291:
03C1 7BFF              MOV     R3,#0FFH
03C3 900000      R     MOV     DPTR,#?_stricmp?BYTE+03H
03C6 120000      E     LCALL   ?C?PSTXDATA
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 110 

03C9 900000      R     MOV     DPTR,#argv
03CC 120000      E     LCALL   ?C?PLDXDATA
03CF 120000      R     LCALL   _stricmp
03D2 EF                MOV     A,R7
03D3 4E                ORL     A,R6
03D4 22                RET     
03D5         L?0297:
03D5 7BFF              MOV     R3,#0FFH
03D7 900000      R     MOV     DPTR,#?_stricmp?BYTE+03H
03DA 120000      E     LCALL   ?C?PSTXDATA
03DD 900000      R     MOV     DPTR,#argv+03H
03E0 120000      E     LCALL   ?C?PLDXDATA
03E3 120000      R     LCALL   _stricmp
03E6 EF                MOV     A,R7
03E7 4E                ORL     A,R6
03E8 22                RET     
03E9         L?0304:
03E9 7BFF              MOV     R3,#0FFH
03EB 900000      R     MOV     DPTR,#?_stricmp?BYTE+03H
03EE 120000      E     LCALL   ?C?PSTXDATA
03F1 900000      R     MOV     DPTR,#argv
03F4 120000      E     LCALL   ?C?PLDXDATA
03F7 120000      R     LCALL   _stricmp
03FA EF                MOV     A,R7
03FB 4E                ORL     A,R6
03FC 22                RET     
03FD         L?0307:
03FD 7BFF              MOV     R3,#0FFH
03FF 900000      R     MOV     DPTR,#?_stricmp?BYTE+03H
0402 120000      E     LCALL   ?C?PSTXDATA
0405 900000      R     MOV     DPTR,#argv+03H
0408 120000      E     LCALL   ?C?PLDXDATA
040B 120000      R     LCALL   _stricmp
040E EF                MOV     A,R7
040F 4E                ORL     A,R6
0410 22                RET     
             ; FUNCTION Monitor (END)

C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 111 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


P2 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A0H  1
DWORD. . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
_SaveDebugLevelEE. . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
MonDumpI2C . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ToMonIndex . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  cnt. . . . . . . . . . . . . . . . .  AUTO     XDATA  INT      0001H  2
P4 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E8H  1
CAM_R. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
TriggerModeType. . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
Prompt . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_stricmp . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ptr1 . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0000H  3
  ptr2 . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0003H  3
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  INT      0006H  2
  ret. . . . . . . . . . . . . . . . .  * REG *  DATA   INT      0006H  2
CAM_BAR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ABR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_CAR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ACR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_CBR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_BCR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
MonTxDump. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  count. . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
MonGetCommand. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  comment. . . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0000H  1
  incnt. . . . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0001H  1
  last_argc. . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0002H  1
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  ch . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  ret. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
_toupper . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     000BH  -----
  ch . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_MonIncDecI2C. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  inc. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
MonNewReadI2C. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  Slave. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
FontData . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  27
  font . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  27
P3_4 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B4H  1
P0_7 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0087H  1
RIGHT_TRIG . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
P3_7 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B7H  1
LAST_TRIG_NON. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
MonRdata . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0003H  1
RS_ready . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
argc . . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0004H  1
NORMALL_MODE . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
AVMode . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
MonWdata . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0005H  1
AccessEnable . . . . . . . . . . . . .  PUBLIC   DATA   BIT      0000H  1
echo . . . . . . . . . . . . . . . . .  PUBLIC   DATA   BIT      0001H  1
SourceModeType . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
_ShowOSDWindowAll. . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CAM_NUM. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_SetMonAddress . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  addr . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
MonNewWriteI2C . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 112 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  Slave. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
monstr . . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    0006H  30
MonIndex . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0024H  1
CAMC_TRIG. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_Puts. . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
LAST_TRIG_RIGHT. . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
MonNewDumpI2C. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ToMonIndex . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  Slave. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0002H  2
CAM_RAB_H. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
OSDStrInfo . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  8
  cnt. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  addr . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  attr . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  str. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0004H  4
argv . . . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    0025H  21
CAM_BA . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_AB . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
BYTE . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
CAM_CA . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_AC . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
MonHelp. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
REVERSE_TRIG . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_BC . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_CB . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
SourceModeTypeEnum . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
struct_IdName. . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  17
  Id . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  Name . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0001H  16
CAM_RAB_T. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_ReadI2C . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CAM_RAC_T. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
WORD . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
CAM_RBC_T. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
LAST_TRIG_CAMC . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
LEFT_TRIG. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_AR . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_BR . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_RB . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
PARK_TRIG. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_CR . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Register . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
_WriteI2C. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
LAST_TRIG_REVERSE. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
No_TRIG. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_DisplayRAMFont. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
indirect . . . . . . . . . . . . . . .  STATIC   DATA   BIT      0002H  1
RegisterInfo . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  Min. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0000H  2
  Max. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0002H  2
  Default. . . . . . . . . . . . . . .  MEMBER   -----  INT      0004H  2
LAST_TRIG_LEFT . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
MonWriteBit. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  mask . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
  FromBit. . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 113 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  ToBit. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
  MonMask. . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0003H  1
  val. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0004H  1
  Slave. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0004H  1
_PCMDATA . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  22
  Support. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  HAN. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  VAN. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0003H  2
  IVF. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0005H  2
  CLOCK. . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0007H  2
  low. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0009H  2
  high . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000BH  2
  Hstart . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000DH  2
  Vstart . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000FH  2
  IPF. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0011H  2
  PPF. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0013H  2
  VBack. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0015H  1
CAM_QUAD . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_DisplayROMFont. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
LCDPower . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_Asc1Bin . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  asc. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
DebugLevel . . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
_Asc2Bin . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0006H  -----
  s. . . . . . . . . . . . . . . . . .  * REG *  DATA   PTR      0001H  3
  bin. . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
TRIGGER_NUM. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
MonReadI2C . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
SEQ. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Monitor. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  mode . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
LongRegisterInfo . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  Min. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  Max. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  Default. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
DisplayInput . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CAM_RAC_T2 . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ABR_T3 . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
RS_rx. . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CAM_RBC_T2 . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ABR_T4 . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_RS_tx . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CAM_A. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_B. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_C. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
MonAddress . . . . . . . . . . . . . .  PUBLIC   DATA   U_CHAR   0000H  1
_Printf. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
VGA_TRIG . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_Mon_tx. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ch . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
CAM_CAB. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_BAC. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ABC. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
MonWriteI2C. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
AWT_LAST_TRIGGER . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
_a2i . . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  str. . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0000H  3
C51 COMPILER V9.60.0.0   MONITOR                                                           06/22/2022 16:23:04 PAGE 114 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  num. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0003H  4
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0007H  1


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3539    ----
   CONSTANT SIZE    =   1439    ----
   XDATA SIZE       =     58      36
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
