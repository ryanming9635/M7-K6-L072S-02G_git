C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE HS_KEYREMO
OBJECT MODULE PLACED IN .\Output\HS_keyremo.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE HS_keyremo.c LARGE OPTIMIZE(9,SIZE) BROWSE INCDIR(.\Include\) DEBUG OBJE
                    -CTEXTEND CODE LISTINCLUDE SYMBOLS PRINT(.\Source\HS_keyremo.lst) TABS(2) OBJECT(.\Output\HS_keyremo.obj)

line level    source

   1          //
   2          // HS_KeyRemo.h
   3          // Default function for Key Input and Remocon Input For HiSharp Function
   4          //
   5          //=============================================================================
   6          //                        Operation Key Mapping
   7          //=============================================================================
   8          
   9          #include <math.h>
   1      =1  /*--------------------------------------------------------------------------
   2      =1  MATH.H
   3      =1  
   4      =1  Prototypes for mathematic functions.
   5      =1  Copyright (c) 1988-2008 Keil Elektronik GmbH and Keil Software, Inc.
   6      =1  Copyright (c) 2008-2016 ARM Germany GmbH
   7      =1  All rights reserved.
   8      =1  --------------------------------------------------------------------------*/
   9      =1  
  10      =1  #ifndef __MATH_H__
  11      =1  #define __MATH_H__
  12      =1  
  13      =1  #if defined __CX2__ && (__CX2__ >= 558 || __CX2__ == 556 && __CX2_MINOR__ >= 207)
           =1 #ifndef HUGE_VAL
           =1 #define HUGE_VAL __inf__
           =1 #endif // HUGE_VAL
           =1 
           =1 #ifndef NAN
           =1 #define NAN __nan__
           =1 #endif // NAN
           =1 
           =1 #pragma SAVE
           =1 #pragma FUNCTIONS(STATIC)
           =1 /* intrinsic functions are reentrant, but need static attribute */
           =1 extern int    abs  (int   val);
           =1 #pragma RESTORE
           =1 #endif
  28      =1  
  29      =1  #pragma SAVE
  30      =1  #pragma REGPARMS
  31      =1  #if !defined (__CX2__)
  32      =1  extern char  cabs  (char  val);
  33      =1  extern int    abs  (int   val);
  34      =1  extern long  labs  (long  val);
  35      =1  #endif
  36      =1  
  37      =1  extern float fabs  (float val);
  38      =1  extern float sqrt  (float val);
  39      =1  extern float exp   (float val);
  40      =1  extern float log   (float val);
  41      =1  extern float log10 (float val);
  42      =1  extern float sin   (float val);
  43      =1  extern float cos   (float val);
  44      =1  extern float tan   (float val);
  45      =1  extern float asin  (float val);
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 2   

  46      =1  extern float acos  (float val);
  47      =1  extern float atan  (float val);
  48      =1  extern float sinh  (float val);
  49      =1  extern float cosh  (float val);
  50      =1  extern float tanh  (float val);
  51      =1  extern float atan2 (float y, float x);
  52      =1  
  53      =1  extern float ceil  (float val);
  54      =1  extern float floor (float val);
  55      =1  extern float modf  (float val, float *n);
  56      =1  extern float fmod  (float x, float y);
  57      =1  extern float pow   (float x, float y);
  58      =1  
  59      =1  #if defined (__CX2__)
           =1 extern float frexp (float val, int *exp);
           =1 extern float ldexp (float val, int exp);
           =1 #endif
  63      =1  
  64      =1  #pragma RESTORE
  65      =1  
  66      =1  #endif
  10          #include "Config.h"
   1      =1  /*****************************************************************************/
   2      =1  /*                           System Configurations                           */
   3      =1  /*              rev 0.10 include auto test             */
   4      =1  // 0.11 change DTV, PC input initial download data correct for Charge Pump
   5      =1  // 0.12 correct phase measurement routine '>>3'
   6      =1  // 0.13 enable function for SPI control... only EXT MCU case
   7      =1  // 0.14 corrected PC measurement......
   8      =1  // 0.0a test function only for CVBS, SVIDEO
   9      =1  // 0.15 corrected DTV scaler setting for panel resolutions
  10      =1  // 0.0b panel for AND 640x480 TICON panel
  11      =1  // 0.16 corrected COMPONENT scaler setting for panel resolutions  11/21/2007
  12      =1  // 0.0c automatic chip test
  13      =1  // 0.17 add monitor function, osd grid for writing grid
  14      =1  // 0.18 add component, dtv pc for analogpanel, 12/06/2007
  15      =1  // 0.19 correct pal input for CES, 12/20/2007
  16      =1  // 0.1a CCFL control, 12/28/2007
  17      =1  // 0.19 Multi Grid for Banking on Internal MCU  01/17/2008
  18      =1  // 0.20 CCFL contol for backlight brightness  01/21/2008
  19      =1  // 0.21 CCFL contol for backlight brightness  01/25/2008
  20      =1  // 0.22 phase setting 02/07/2008
  21      =1  // 0.221 display input correction 04/03/2008
  22      =1  // 0.23 PC, DTV mode, no signal display
  23      =1  // 0.24 PC Auto Color adjustment
  24      =1  // 0.25 revised PC Auto Clock adjustment - find divide number and phase
  25      =1  // 0.26 Digital RGB for TW8826
  26      =1  // 0.27 Correct LVDS control          08/22/2008
  27      =1  // 0.28 Add WSVGA resolution          10/23/2008
  28      =1  // 0.29 Add NEW GRID              11/14/2008
  29      =1  // 0.30 Fix DTV input             12/10/2008
  30      =1  // 0.31 Add 1080i23, 24, 25A, 25B       01/20/2009
  31      =1  // 0.32 TCON setting FIX all mode       01/22/2009
  32      =1  // 0.33 autodetect is auto on/off by dip sw1  02/02/2009
  33      =1  // 0.34 Fix autocolor function and clamp position 02/08/2009
  34      =1  /*****************************************************************************/
  35      =1  #ifndef __CONFIG_H__
  36      =1  #define __CONFIG_H__
  37      =1  
  38      =1  //#define INTERNAL_MCU -- defined by Project Compiler session
  39      =1  #define   HS        
  40      =1  //#define   E_Wintek  
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 3   

  41      =1  //#define   AWT 
  42      =1  //#define Holtz
  43      =1  
  44      =1  //#define QUAD
  45      =1  
  46      =1  #ifdef QUAD
           =1   #define AWT_ML072Q  //Pinchi 20150827 disable for HTRV
           =1 //  #define HTRV  //Pinchi 20140902 disable for AWT ML072Q
           =1 #else
  50      =1    #define AWT_ML072S
  51      =1  #endif
  52      =1  
  53      =1  //--------------------------------------------------
  54      =1  //              Common Feature Define
  55      =1  //--------------------------------------------------
  56      =1  //#define FIRST_RUN_FROM_AC  //Pinchi 20150831 disable for Screen re-setting by Set4WideScreen()  //Pinchi
             - 20141029 add
  57      =1  #define SUPPORT_ML072Q_AUTO_DAY_NIGHT  //Pinchi 20150825 add for function define
  58      =1  #define SUPPORT_TRIGGER_EXIT_MENU  //Pinchi 20150827 add for exit OSD Menu by CAM trigger
  59      =1  #define SUPPORT_AC_ON_NORMAL_SCREEN  //Pinchi 20150901 add to set 4:3 screen when AC on
  60      =1  
  61      =1  #define FIX_DISPLAY_OFF_TRIGGER_ISSUE  //Pinchi 20150908 add to fix [Display] set OFF and trigger release 
             -then trigger again during display info the CAM will change from trigger CH to original CH
  62      =1  #define FIX_EXIT_STANDBY_NO_AUDIO  //Pinchi 20150908 add to fix no audio output when exit Standby mode
  63      =1  #ifdef AWT_ML072Q
           =1 #define FIX_2835_SCREEN_NOISE  //Pinchi 20160929 add to fix the screen noise of TW2835 by change DDR to ma
             -ke clock shift
           =1 #endif
  66      =1  
  67      =1  #define SUPPORT_NEW_TRIGGER_FUNCTION  /////修改新的Trigger方式減少trigger polling 時間 add by ryan@2018012
             -4
  68      =1  
  69      =1  //#define AWT_ML072QS_MSG  //Pinchi 20140925 add
  70      =1  //#define REDUCE_DELAY_TIME  //Pinchi 20141029 add
  71      =1  //#define DISPLAY_TECHWELL_LOGO  //Pinchi 2050903 add to disable the Techwell logo
  72      =1  
  73      =1  //#define SUPPORT_SVIDEO                     //andy Awt 20090914
  74      =1  //#define SUPPORT_COMPONENT     // support component analog to decoder//andy Awt 20090914
  75      =1  //#define SUPPORT_DTV           // support DTV input through component( to ADC ).//andy Awt 20090914
  76      =1  //#define SUPPORT_PC        // support PC function
  77      =1  //#define SUPPORT_DVI       // support DVI input
  78      =1  //#define SUPPORT_SDCARD
  79      =1  
  80      =1  #define SUPPORT_2835_CLK_TUNE_BACK_DOOR  //Pinchi 20160913 add to fine tune TW2835 clock by hot key
  81      =1  //#define SUPPORT_DISPLAY_TEST_VERSION  //Pinchi 20150929 add to display test software version on OSD
  82      =1  
  83      =1  //--------------------------------------------------
  84      =1  //              Model Feature Define
  85      =1  //--------------------------------------------------
  86      =1  #if (defined AWT_ML072Q) || (defined AWT_ML072S)
  87      =1  #define AWT_ML072QS_FW_RULE  //Pinchi 20140902 add
  88      =1  //#define AWT_NEW_SLIM_MODEL  //Pinchi 20150203 add for AWT new slim model
  89      =1  #define AWT_NO_SIGNAL_MSG  //Pinchi 20150319 add for display "NO VIDEO SIGNAL" by AWT request of 20150302
  90      =1  #define AWT_TW2835_DRAW_T_ICON  //Pinchi 20150415 add to draw T icon by TW2835 when CAM C trigger
  91      =1  #define SUPPORT_AC_ON_REDUCE_TIME  //Pinchi 20150903 add to reduce Power time when AC on
  92      =1  
  93      =1  //#define SUPPORT_TRIGGER_RELEASE_DELAY  //Pinchi 20150908 add to support delay time when CAM trigger rele
             -ase
  94      =1  
  95      =1  typedef enum  //Pinchi 20150326 add
  96      =1  {
  97      =1       LAST_TRIG_NON =  0x00,
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 4   

  98      =1       LAST_TRIG_LEFT =   0x01,
  99      =1       LAST_TRIG_RIGHT =  0x02,
 100      =1       LAST_TRIG_REVERSE =0x03,
 101      =1       LAST_TRIG_CAMC =   0x04,
 102      =1  
 103      =1  } AWT_LAST_TRIGGER;
 104      =1  
 105      =1  #endif
 106      =1  
 107      =1  
 108      =1  #ifdef HTRV  //Pinchi 20150825 add
           =1 #define HTRV_ML072Q_FW_RULE  //Pinchi 20150827 add
           =1 #define HTRV_REDUCE_SCREEN_CHANGE  //Pinchi 20150828 add to reduce screen double change
           =1 
           =1 #if 0  //Pinchi 20151209 add to remove 4:3 screen by HTRV request of 20151209
           =1 #define HTRV_SUPPORT_4_3_SCREEN
           =1 #else
           =1 #undef SUPPORT_AC_ON_NORMAL_SCREEN  //Pinchi 20151210 add
           =1 #endif
           =1 
           =1 #endif
 119      =1  
 120      =1  //#define SUPPORT_RS485
 121      =1  //-----------------------------------------------------------------------------
 122      =1  //    Firmware Version
 123      =1  //-----------------------------------------------------------------------------
 124      =1  #ifdef HTRV  //Pinchi 20150907 add
           =1 //#define FWVER     0x200 // Rev 2.00
           =1 //#define FWVER     0x210   // Rev 2.1  //Pinchi 20151209 update version for HTRV request to remove 4:3 scree
             -n
           =1 //#define FWVER     0x220   // Rev 2.2  //Pinchi 20160929 change for V2.2
           =1 #define FWVER     0x230     //Rev 2.3    ryan@20170727 update version by Encoder switches零件 EOL更換
           =1 #else
 130      =1  #define FWVER     0x210   // Rev 0.14
 131      =1  #endif
 132      =1  
 133      =1  //-----------------------------------------------------------------------------
 134      =1  //    Compiler
 135      =1  //-----------------------------------------------------------------------------
 136      =1  #define KEILC           // Keil C 5.0
 137      =1  //-----------------------------------------------------------------------------
 138      =1  //    MPU Clock
 139      =1  //-----------------------------------------------------------------------------
 140      =1  #ifndef INTERNAL_MCU
 141      =1  //#define CLOCK_11M         // 11.0592MHz
 142      =1  #define CLOCK_22M         // 22.1184MHz
 143      =1  #else                 // INTERNAL_MCU
           =1 #define CLOCK_27M         // 27MHz
           =1 #define REG_START_ADDRESS 0xc000    // register start 0xc000, for page0, 0xc100-page1 
           =1 #endif
 147      =1  //-----------------------------------------------------------------------------
 148      =1  //    TW88 Version
 149      =1  //-----------------------------------------------------------------------------
 150      =1  #define TW8816   ///AWT TW8806 change to TW8816 platform //ryan@20170921
 151      =1  //-----------------------------------------------------------------------------
 152      =1  //-----------------------------------------------------------------------------
 153      =1  //    Options for Backlight control
 154      =1  //-----------------------------------------------------------------------------
 155      =1  //#define BACKLIGHT_CCFL
 156      =1  //#define BACKLIGHT_LED
 157      =1  #define BACKLIGHT_PWM
 158      =1  
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 5   

 159      =1  //-----------------------------------------------------------------------------
 160      =1  //    Panel Resolution
 161      =1  //-----------------------------------------------------------------------------
 162      =1  // ---- Select Default Panel
 163      =1  //
 164      =1  //#define UXGA            // 1600 x 1200
 165      =1  //#define SXGA              // 1280 x 1024
 166      =1  //#define XGA  // 1024 x 768
 167      =1  #ifdef XGA
           =1   #define LVDS          
           =1   #define PWIDTH  1024
           =1   #define PHEIGHT 768
           =1 #endif
 172      =1  //#define SVGA            //  800 x 600
 173      =1  //#define VGA             //  640 x 480
 174      =1  #ifdef VGA
           =1   #define PWIDTH  640
           =1   #define PHEIGHT 480
           =1   //#define HITACHI_640_B_160   //--> 640 x 160
           =1   #define AND_640_480
           =1 #endif
 180      =1  //#define WXGA            // 1280 x 768 (15:9) // 1366 x 768 (16:9)
 181      =1  #ifdef WXGA
           =1     //#define WX_SHARP_LQ106K1LA
           =1   #define PWIDTH  1280
           =1   #define PHEIGHT 768
           =1 #endif
 186      =1  //#define WSVGA           // 1024 x 600 *** only video mode
 187      =1  #ifdef WSVGA
           =1   #define PWIDTH  1024
           =1   #define PHEIGHT 600
           =1   #define UNIDEN_1024_600
           =1 #endif
 192      =1  #define WVGA            //  800 x 480
 193      =1  #ifdef WVGA
 194      =1    #define PWIDTH  800
 195      =1    #define PHEIGHT 480//600
 196      =1    // If WVGA, you have to select panel.
 197      =1    //#define AU_10INCH
 198      =1    //#define WVGA_TPO
 199      =1    //#define SAMSUNG_10INCH
 200      =1    //#define SAMSUNG_TICONLESS_10INCH
 201      =1    //#define SHARP_TICONLESS_7INCH
 202      =1    //#define AU_TICONLESS_7INCH
 203      =1    //#define AU_G084SN05V8_8_4INCH 
 204      =1    #define HSD070IDW1_7INCH
 205      =1    //#define INNOLUX_AT080TN03
 206      =1    //#define AU_TICONLESS_7INCH_CCFL
 207      =1    //#define CMO     // CHIMEI panel
 208      =1    //#define AU_TICONLESS_10INCH
 209      =1    //#define HITACHI_T01
 210      =1    //#define HITACHI_TX23D12
 211      =1    //#define HITACHI_TX18D24
 212      =1    //#define HITACHI_TX18D16
 213      =1    //#define TMD_LTA070A320F
 214      =1    //#define TMD_LTA080B
 215      =1  #endif  //WVGA
 216      =1  //#define HVGA            //  480 x 320
 217      =1  //#define QVGA            //  320 x 240 *** only video mode
 218      =1  #ifdef QVGA
           =1   #define PWIDTH  320
           =1   #define PHEIGHT 240
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 6   

           =1   //#define HITACHI_TX09D73
           =1   //#define AU_DELTARGB
           =1   //#define SHARP_LQ050Q5DR01
           =1   //#define SHARP_LQ035
           =1   //#define TMD
           =1 #endif
 227      =1  
 228      =1  //#define WQVGA           //  480 x 234 *** only video mode
 229      =1  #ifdef WQVGA
           =1   #define PWIDTH  480
           =1   #define PHEIGHT 240
           =1   // If WQVGA, you have to select panel 
           =1     #define ANALOG_7INCH
           =1   //#define PWIDTH  400
           =1   //#define PHEIGHT 240
           =1   //#define SHARP_LQ043T3DX02   //  400 x 237
           =1   //#define LG_ANALOG
           =1   //#define TMD_ANALOG        //TMD_LTA05B352A
           =1   //#define T_51945GD       // Optorex Panel
           =1 #endif  // WQVGA
 241      =1  
 242      =1  //if LVDS pannel disable TICONLESS
 243      =1  
 244      =1  //-----------------------------------------------------------------------------
 245      =1  //---- Add Support One more panel with DIPSW#1
 246      =1  //---- Ex. Add Analog AU 7" Panel with Default Panel for evalution
 247      =1  //#define ADD_ANALOGPANEL   // Added Analog panel(AU7") from default set panel(expect WQVGA) with DIP #1 sw
             -itch.(DIP#1=L:ANALOG, H:DEFAULT)
 248      =1                // It can't support WQVGA and ADD_ANALOGPANEL same time!!
 249      =1    //#define ADD_ANALOG_7INCH
 250      =1    //#define ADD_TMD_LTA05B352A
 251      =1                    
 252      =1  //---- Support Wide panel function
 253      =1  #if (defined WXGA) || (defined WSVGA) || (defined WVGA) || (defined WQVGA)
 254      =1  #if 0///ryan@20180115//mask for NTSC sharpness issue
           =1 #define WIDE_SCREEN         // Can support 4 display mode, i.e. Normal, Wide, Full, Zoom
           =1 #endif
 257      =1  #endif                // Tested panasonic WVGA panel.
 258      =1  
 259      =1  //-----------------------------------------------------------------------------
 260      =1  //    Panel Vendor Specific
 261      =1  //-----------------------------------------------------------------------------
 262      =1  
 263      =1  //-----------------------------------------------------------------------------
 264      =1  //    TV Tuner
 265      =1  //-----------------------------------------------------------------------------
 266      =1  #define PHILIPS       0
 267      =1  #define ALPS        1   // ALPS, LG
 268      =1  #define TEMIC       2
 269      =1  #define TVAVA       3
 270      =1  #define LGTUNER       4
 271      =1  #define SAMSUNGMUTITUNER  5
 272      =1  
 273      =1  #define TVTunerDevice   4
 274      =1  //-----------------------------------------------------------------------------
 275      =1  //    IR Remote Controller Type
 276      =1  //-----------------------------------------------------------------------------
 277      =1  //#define REMO_RC5          // RC5 style
 278      =1  #define TECHWELL_REMOCON
 279      =1  //#define REMO_NEC          // NEC style
 280      =1  //#define PHILIPS_REMOCON // New remocon 
 281      =1  
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 7   

 282      =1  //-----------------------------------------------------------------------------
 283      =1  //    I2C Device Access Address Mapping
 284      =1  //-----------------------------------------------------------------------------
 285      =1  
 286      =1  #define EEPROMI2CAddress  0xa0  // EEPROM (24C16)
 287      =1  #define TW88I2CAddress    0x8a  // TW880x
 288      =1  
 289      =1  #define MSPI2CAddress   0x80  // MSP
 290      =1  #define ALC106I2CAddress  0x4A  // MSP
 291      =1  //-----------------------------------------------------------------------------
 292      =1  //    Options for Possible Inputs
 293      =1  //-----------------------------------------------------------------------------
 294      =1  
 295      =1  
 296      =1  //-----------------------------------------------------------------------------
 297      =1  //    Options for Possible Standards
 298      =1  //    Default:NTSC
 299      =1  //-----------------------------------------------------------------------------
 300      =1  #define SUPPORT_PAL     
 301      =1  #define SUPPORT_SECAM
 302      =1  #define SUPPORT_NTSC4   
 303      =1  #define SUPPORT_PALM  
 304      =1  #define SUPPORT_PALN    
 305      =1  #define SUPPORT_PAL60   
 306      =1  
 307      =1  //#define ID_CHECK_BY_FW        // in Video mode, check input system ID by firmware
 308      =1  
 309      =1  //-----------------------------------------------------------------------------
 310      =1  //    Options for Debugging/Release
 311      =1  //-----------------------------------------------------------------------------
 312      =1  //#define SUPPORT_PATTERN       // support LCD test pattern
 313      =1  
 314      =1  #ifndef WQVGA
 315      =1    #ifndef QVGA
 316      =1  #define SUPPORT_OSDPOSITIONMOVE
 317      =1    #endif
 318      =1  #endif
 319      =1  
 320      =1  #define SERIAL              // include serial communication routines
 321      =1  
 322      =1  //#define SUPPORT_DEBUG       // Support to use Read & Write in debug OSD Window by remocon.
 323      =1  
 324      =1  //#define DEBUG           // include debug information
 325      =1  #ifdef DEBUG
           =1   //#define DEBUG_MAIN
           =1   //#define DEBUG_TIME
           =1   //#define DEBUG_KEYREMO
           =1   //#define DEBUG_TW88
           =1   //#define DEBUG_DECODER
           =1   //#define DEBUG_I2C
           =1   //#define DEBUG_EEP
           =1   //#define DEBUG_OSD
           =1   //#define DEBUG_AUDIO
           =1   //#define DEBUG_SETPANEL
           =1   //#define DEBUG_DTV
           =1 //  #define DEBUG_PC
           =1   //#define DEBUG_PC_MEAS
           =1   //#define DEBUG_PC_COLOR
           =1   //#define DEBUG_COMPONENT
           =1   //#define DEBUG_BANK
           =1   //#define DEBUG_PAUSE
           =1   //#define DEBUG_MCU
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 8   

           =1 #endif
 345      =1  
 346      =1  #define AUTOCALC_PC         // in PC mode, Enable Auto Calcuration
 347      =1  //#define SUPPORT_USERCOLORFROMTXT  // Use color setting of text file in Color mode=USER MODE which is as B
             -rightness(Reg10), Contast(Reg11),
 348      =1                    //    Sat_U(Reg13),Sat_V(Reg14),Sharpness(Reg12,Reg78)                  
 349      =1  //#define SUPPORT_GAMMA
 350      =1  
 351      =1  //#define CHIP_MANUAL_TEST      // DIPSW#1
 352      =1  
 353      =1  #ifndef INTERNAL_MCU
 354      =1  //#define NO_INITIALIZE       // After Power switch turn on with DIP SW4 Enable(Low), or pressed MENU button 
             -for internal MCU
 355      =1                                      //     micom works to access only I2C bus by serial command.
 356      =1  #endif
 357      =1  
 358      =1  //#define SUPPORT_KRS_OSDDEMO   // For KRS Company Demo 
 359      =1  //#define SUPPORT_LINE_OSDDEMO
 360      =1  
 361      =1  //-----------------------------------------------------------------------------
 362      =1  //    Special Features
 363      =1  //-----------------------------------------------------------------------------
 364      =1  
 365      =1  #ifndef INTERNAL_MCU
 366      =1  //#define SUPPORT_DELTA_RGB
 367      =1  #endif
 368      =1  #define SUPPORT_SELECTKEY     // choose the keymap of using select key or left,right key.
 369      =1  //-----------------------------------------------------------------------------
 370      =1  
 371      =1  //#define HS_NEWOSDMENU     //Weylis -@121008 for Hor. Style OSD
 372      =1  //#define HS_NEWOSDMENU_2     //Weylis -@121008 for Hor. Style OSD(2 line)
 373      =1  
 374      =1  #endif  //__CONFIG_H__
 375      =1  
  11          #include "reg.h"
   1      =1  //
   2      =1  //Registers.h : Register declaration
   3      =1  //
   4      =1  
   5      =1  #ifndef __REGISTERS__
   6      =1  #define __REGISTERS__
   7      =1  
   8      =1  #ifdef INTERNAL_MCU
           =1 /*  BYTE Registers  */
           =1 sfr P0    = 0x80;
           =1 sfr P1    = 0x90;
           =1 sfr P2    = 0xA0;
           =1 sfr P3    = 0xB0;
           =1 sfr PSW   = 0xD0;
           =1 sfr ACC   = 0xE0;
           =1 sfr B     = 0xF0;
           =1 sfr SP    = 0x81;
           =1 sfr DPL   = 0x82;
           =1 sfr DPH   = 0x83;
           =1 sfr PCON  = 0x87;
           =1 sfr TCON  = 0x88;
           =1 sfr TMOD  = 0x89;
           =1 sfr TL0   = 0x8A;
           =1 sfr TL1   = 0x8B;
           =1 sfr TH0   = 0x8C;
           =1 sfr TH1   = 0x8D;
           =1 sfr IE    = 0xA8;
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 9   

           =1 sfr IP    = 0xB8;
           =1 sfr SCON  = 0x98;
           =1 sfr SBUF  = 0x99;
           =1 
           =1 //sfr P4    = 0xd8;
           =1 
           =1 /*  8052 Extensions  */
           =1 sfr EXIF  = 0x91;   // external interrupt 2,3,4,5 flags should be cleared by software
           =1 sfr T2CON = 0xC8;
           =1 sfr RCAP2L = 0xCA;
           =1 sfr RCAP2H = 0xCB;
           =1 sfr TL2   = 0xCC;
           =1 sfr TH2   = 0xCD;
           =1 sfr EICON = 0xD8;
           =1 sfr EIE   = 0xE8;
           =1 sfr EIP   = 0xF8;
           =1 
           =1 /*  TW88 Core Extension */
           =1 sfr BANKREG   = 0x9A;
           =1 sfr SPICONTROL  = 0x9B;
           =1 sfr T0HIGH    = 0x9C;
           =1 sfr T0LOW     = 0x9D;
           =1 sfr T1HIGH    = 0x9E;
           =1 sfr T1LOW     = 0x9F;
           =1 sfr T2HIGH    = 0x93;
           =1 sfr T2LOW     = 0x94;
           =1 
           =1 /*  BIT Registers  */
           =1 /*  PSW  */
           =1 sbit CY    = 0xD7;
           =1 sbit AC    = 0xD6;
           =1 sbit F0    = 0xD5;
           =1 sbit RS1   = 0xD4;
           =1 sbit RS0   = 0xD3;
           =1 sbit OV    = 0xD2;
           =1 sbit P     = 0xD0;
           =1 
           =1 /*  TCON  */
           =1 sbit TF1   = 0x8F;
           =1 sbit TR1   = 0x8E;
           =1 sbit TF0   = 0x8D;
           =1 sbit TR0   = 0x8C;
           =1 sbit IE1   = 0x8B;
           =1 sbit IT1   = 0x8A;
           =1 sbit IE0   = 0x89;
           =1 sbit IT0   = 0x88;
           =1 
           =1 /*  IE  */
           =1 sbit EA    = 0xAF;
           =1 sbit ES    = 0xAC;
           =1 sbit ET1   = 0xAB;
           =1 sbit EX1   = 0xAA;
           =1 sbit ET0   = 0xA9;
           =1 sbit EX0   = 0xA8;
           =1 
           =1 /*  EIE  */
           =1 sbit EWDI  = 0xEC;    // Watch dog timer interrupt enable
           =1 sbit EX5   = 0xEB;    // external interrupt 5 enable
           =1 sbit EX4   = 0xEA;    // external interrupt 4 enable
           =1 sbit EX3   = 0xE9;    // external interrupt 3 enable
           =1 sbit EX2   = 0xE8;    // external interrupt 2 enable
           =1 
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 10  

           =1 /*  IP  */
           =1 sbit PS    = 0xBC;
           =1 sbit PT1   = 0xBB;
           =1 sbit PX1   = 0xBA;
           =1 sbit PT0   = 0xB9;
           =1 sbit PX0   = 0xB8;
           =1 
           =1 /*  EIP  */
           =1 sbit PWDI  = 0xFC;    // Watch dog timer interrupt priority
           =1 sbit PX5   = 0xFB;    // external interrupt5 priority
           =1 sbit PX4   = 0xFA;    // external interrupt4 priority
           =1 sbit PX3   = 0xF9;    // external interrupt3 priority
           =1 sbit PX2   = 0xF8;    // external interrupt2 priority
           =1 
           =1 /*  P3  */
           =1 sbit RD    = 0xB7;
           =1 sbit WR    = 0xB6;
           =1 sbit T1    = 0xB5;
           =1 sbit T0    = 0xB4;
           =1 sbit INT1  = 0xB3;
           =1 sbit INT0  = 0xB2;
           =1 sbit TXD   = 0xB1;
           =1 sbit RXD   = 0xB0;
           =1 
           =1 /*  SCON  */
           =1 sbit SM0   = 0x9F;
           =1 sbit SM1   = 0x9E;
           =1 sbit SM2   = 0x9D;
           =1 sbit REN   = 0x9C;
           =1 sbit TB8   = 0x9B;
           =1 sbit RB8   = 0x9A;
           =1 sbit TI    = 0x99;
           =1 sbit RI    = 0x98;
           =1 
           =1 /*  8052 Extensions  */
           =1 /*  IE  */
           =1 sbit ET2   = 0xAD;
           =1 
           =1 /*  IP  */
           =1 sbit PT2   = 0xBD;
           =1 
           =1 /*  P1  */
           =1 sbit T2EX  = 0x91;
           =1 sbit T2    = 0x90;
           =1              
           =1 /*  T2CON  */
           =1 sbit TF2   = 0xCF;
           =1 sbit EXF2  = 0xCE;
           =1 sbit RCLK  = 0xCD;
           =1 sbit TCLK  = 0xCC;
           =1 sbit EXEN2 = 0xCB;
           =1 sbit TR2   = 0xCA;
           =1 sbit C_T2  = 0xC9;
           =1 sbit CP_RL2= 0xC8;
           =1 
           =1 sfr CHPENR = 0xF6;
           =1 sfr CHPCON = 0xBF;
           =1 sfr SFRAL  = 0xC4;
           =1 sfr SFRAH  = 0xC5;
           =1 sfr SFRFD  = 0xC6;
           =1 sfr SFRCN  = 0xC7;
           =1 
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 11  

           =1 sbit P0_0  = 0x80;
           =1 sbit P0_1  = 0x81;
           =1 sbit P0_2  = 0x82;
           =1 sbit P0_3  = 0x83;
           =1 sbit P0_4  = 0x84;
           =1 sbit P0_5  = 0x85;
           =1 sbit P0_6  = 0x86;
           =1 sbit P0_7  = 0x87;
           =1 
           =1 sbit P1_0  = 0x90;
           =1 sbit P1_1  = 0x91;
           =1 sbit P1_2  = 0x92;
           =1 sbit P1_3  = 0x93;
           =1 sbit P1_4  = 0x94;
           =1 sbit P1_5  = 0x95;
           =1 sbit P1_6  = 0x96;
           =1 sbit P1_7  = 0x97;
           =1 
           =1 sbit P2_0  = 0xa0;
           =1 sbit P2_1  = 0xa1;
           =1 sbit P2_2  = 0xa2;
           =1 sbit P2_3  = 0xa3;
           =1 sbit P2_4  = 0xa4;
           =1 sbit P2_5  = 0xa5;
           =1 sbit P2_6  = 0xa6;
           =1 sbit P2_7  = 0xa7;
           =1 
           =1 sbit P3_0  = 0xb0;
           =1 sbit P3_1  = 0xb1;
           =1 sbit P3_2  = 0xb2;
           =1 sbit P3_3  = 0xb3;
           =1 sbit P3_4  = 0xb4;
           =1 sbit P3_5  = 0xb5;
           =1 sbit P3_6  = 0xb6;
           =1 sbit P3_7  = 0xb7;
           =1 
           =1 #else // external MCU=WINBOND
 189      =1  /*  BYTE Registers  */
 190      =1  sfr P0    = 0x80;
 191      =1  sfr P1    = 0x90;
 192      =1  sfr P2    = 0xA0;
 193      =1  sfr P3    = 0xB0;
 194      =1  sfr PSW   = 0xD0;
 195      =1  sfr ACC   = 0xE0;
 196      =1  sfr B     = 0xF0;
 197      =1  sfr SP    = 0x81;
 198      =1  sfr DPL   = 0x82;
 199      =1  sfr DPH   = 0x83;
 200      =1  sfr PCON  = 0x87;
 201      =1  sfr TCON  = 0x88;
 202      =1  sfr TMOD  = 0x89;
 203      =1  sfr TL0   = 0x8A;
 204      =1  sfr TL1   = 0x8B;
 205      =1  sfr TH0   = 0x8C;
 206      =1  sfr TH1   = 0x8D;
 207      =1  sfr CKCON = 0x8E;   //clock control register, default =0x01
 208      =1  sfr IE    = 0xA8;
 209      =1  sfr IP    = 0xB8;
 210      =1  sfr SCON  = 0x98;
 211      =1  sfr SBUF  = 0x99;
 212      =1  sfr P4 = 0xE8; //Megawin Ryan@970716
 213      =1  //sfr P4    = 0xa5;      //SST MCU
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 12  

 214      =1  //sfr P4    = 0xd8;   //winbond<960820>
 215      =1  
 216      =1  /*  8052 Extensions  */
 217      =1  sfr ADCTL = 0xC5;   //william-20111017
 218      =1  sfr ADCV = 0xC6;    //william-20111017
 219      =1  sfr ADCVL = 0xE8;   //william-20111017
 220      =1  sfr T2CON = 0xC8;
 221      =1  sfr RCAP2L = 0xCA;
 222      =1  sfr RCAP2H = 0xCB;
 223      =1  sfr TL2   = 0xCC;
 224      =1  sfr TH2   = 0xCD;
 225      =1  
 226      =1  // for UART2
 227      =1  sfr S2CON  = 0xAA;
 228      =1  sfr S2BRT  = 0xBA;
 229      =1  sfr S2BUF  = 0x9A;
 230      =1  sfr AUXR2  = 0xA6;
 231      =1  sfr AUXIE  = 0xAD;
 232      =1  
 233      =1  sfr P1M0  = 0x91;
 234      =1  sfr P1M1  = 0x92;
 235      =1  sfr P0M0  = 0x93;
 236      =1  sfr P0M1  = 0x94;
 237      =1  sfr P2M0  = 0x95;
 238      =1  sfr P2M1  = 0x96;
 239      =1  sfr P3M0  = 0xB1;
 240      =1  sfr P3M1  = 0xB2;
 241      =1  
 242      =1  // for PCA
 243      =1  sfr CCON   = 0xD8;
 244      =1  sfr CMOD   = 0xD9;
 245      =1  sfr CCAPM0 = 0xDA;
 246      =1  sfr CCAPM1 = 0xDB;
 247      =1  sfr CCAPM2 = 0xDC;
 248      =1  sfr CCAPM3 = 0xDD;
 249      =1  sfr CCAPM4 = 0xDE;
 250      =1  sfr CCAPM5 = 0xDF;
 251      =1  sfr CL     = 0xE9;
 252      =1  sfr CH     = 0xF9;
 253      =1  sfr CCAP0L = 0xEA;
 254      =1  sfr CCAP0H = 0xFA;
 255      =1  sfr CCAP1L = 0xEB;
 256      =1  sfr CCAP1H = 0xFB;
 257      =1  sfr CCAP2L = 0xEC;
 258      =1  sfr CCAP2H = 0xFC;
 259      =1  sfr CCAP3L = 0xED;
 260      =1  sfr CCAP3H = 0xFD;
 261      =1  sfr CCAP4L = 0xEE;
 262      =1  sfr CCAP4H = 0xFE;
 263      =1  sfr CCAP5L = 0xEF;
 264      =1  sfr CCAP5H = 0xFF;
 265      =1  sfr PCAPWM0= 0xF2;
 266      =1  sfr PCAPWM1= 0xF3;
 267      =1  sfr PCAPWM2= 0xF4;
 268      =1  sfr PCAPWM3= 0xF5;
 269      =1  sfr PCAPWM4= 0xF6;
 270      =1  sfr PCAPWM5= 0xF7;
 271      =1  
 272      =1  /*  BIT Registers  */
 273      =1  /*  PSW  */
 274      =1  sbit CY    = 0xD7;
 275      =1  sbit AC    = 0xD6;
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 13  

 276      =1  sbit F0    = 0xD5;
 277      =1  sbit RS1   = 0xD4;
 278      =1  sbit RS0   = 0xD3;
 279      =1  sbit OV    = 0xD2;
 280      =1  sbit P     = 0xD0;
 281      =1  
 282      =1  /*  TCON  */
 283      =1  sbit TF1   = 0x8F;
 284      =1  sbit TR1   = 0x8E;
 285      =1  sbit TF0   = 0x8D;
 286      =1  sbit TR0   = 0x8C;
 287      =1  sbit IE1   = 0x8B;
 288      =1  sbit IT1   = 0x8A;
 289      =1  sbit IE0   = 0x89;
 290      =1  sbit IT0   = 0x88;
 291      =1  
 292      =1  /*  IE  */
 293      =1  sbit EA    = 0xAF;
 294      =1  sbit ES    = 0xAC;
 295      =1  sbit ET1   = 0xAB;
 296      =1  sbit EX1   = 0xAA;
 297      =1  sbit ET0   = 0xA9;
 298      =1  sbit EX0   = 0xA8;
 299      =1  
 300      =1  /*  IP  */
 301      =1  sbit PS    = 0xBC;
 302      =1  sbit PT1   = 0xBB;
 303      =1  sbit PX1   = 0xBA;
 304      =1  sbit PT0   = 0xB9;
 305      =1  sbit PX0   = 0xB8;
 306      =1  
 307      =1  /*  P3  */
 308      =1  sbit RD    = 0xB7;
 309      =1  sbit WR    = 0xB6;
 310      =1  sbit T1    = 0xB5;
 311      =1  sbit T0    = 0xB4;
 312      =1  sbit INT1  = 0xB3;
 313      =1  sbit INT0  = 0xB2;
 314      =1  sbit TXD   = 0xB1;
 315      =1  sbit RXD   = 0xB0;
 316      =1  
 317      =1  /*  SCON  */
 318      =1  sbit SM0   = 0x9F;
 319      =1  sbit SM1   = 0x9E;
 320      =1  sbit SM2   = 0x9D;
 321      =1  sbit REN   = 0x9C;
 322      =1  sbit TB8   = 0x9B;
 323      =1  sbit RB8   = 0x9A;
 324      =1  sbit TI    = 0x99;
 325      =1  sbit RI    = 0x98;
 326      =1  
 327      =1  /*  8052 Extensions  */
 328      =1  /*  IE  */
 329      =1  sbit ET2   = 0xAD;
 330      =1  
 331      =1  /*  IP  */
 332      =1  sbit PT2   = 0xBD;
 333      =1  
 334      =1  /*  P1  */
 335      =1  sbit T2EX  = 0x91;
 336      =1  sbit T2    = 0x90;
 337      =1               
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 14  

 338      =1  /*  T2CON  */
 339      =1  sbit TF2   = 0xCF;
 340      =1  sbit EXF2  = 0xCE;
 341      =1  sbit RCLK  = 0xCD;
 342      =1  sbit TCLK  = 0xCC;
 343      =1  sbit EXEN2 = 0xCB;
 344      =1  sbit TR2   = 0xCA;
 345      =1  sbit C_T2  = 0xC9;
 346      =1  sbit CP_RL2= 0xC8;
 347      =1  
 348      =1  sfr CHPENR = 0xF6;
 349      =1  sfr CHPCON = 0xBF;
 350      =1  sfr SFRAL  = 0xC4;
 351      =1  sfr SFRAH  = 0xC5;
 352      =1  sfr SFRFD  = 0xC6;
 353      =1  sfr SFRCN  = 0xC7;
 354      =1  
 355      =1  sbit P0_0  = 0x80;
 356      =1  sbit P0_1  = 0x81;
 357      =1  sbit P0_2  = 0x82;
 358      =1  sbit P0_3  = 0x83;
 359      =1  sbit P0_4  = 0x84;
 360      =1  sbit P0_5  = 0x85;
 361      =1  sbit P0_6  = 0x86;
 362      =1  sbit P0_7  = 0x87;
 363      =1  
 364      =1  sbit P1_0  = 0x90;
 365      =1  sbit P1_1  = 0x91;
 366      =1  sbit P1_2  = 0x92;
 367      =1  sbit P1_3  = 0x93;
 368      =1  sbit P1_4  = 0x94;
 369      =1  sbit P1_5  = 0x95;
 370      =1  sbit P1_6  = 0x96;
 371      =1  sbit P1_7  = 0x97;
 372      =1  
 373      =1  sbit P2_0  = 0xa0;
 374      =1  sbit P2_1  = 0xa1;
 375      =1  sbit P2_2  = 0xa2;
 376      =1  sbit P2_3  = 0xa3;
 377      =1  sbit P2_4  = 0xa4;
 378      =1  sbit P2_5  = 0xa5;
 379      =1  sbit P2_6  = 0xa6;
 380      =1  sbit P2_7  = 0xa7;
 381      =1  
 382      =1  sbit P3_0  = 0xb0;
 383      =1  sbit P3_1  = 0xb1;
 384      =1  sbit P3_2  = 0xb2;
 385      =1  sbit P3_3  = 0xb3;
 386      =1  sbit P3_4  = 0xb4;
 387      =1  sbit P3_5  = 0xb5;
 388      =1  sbit P3_6  = 0xb6;
 389      =1  sbit P3_7  = 0xb7;
 390      =1  
 391      =1  sbit P4_0  = P4^0;
 392      =1  sbit P4_1  = P4^1;
 393      =1  sbit INT3  = P4^2;
 394      =1  sbit INT2  = P4^3;
 395      =1  
 396      =1  sfr P4M0  = 0xB3;
 397      =1  sfr P4M1  = 0xB4;
 398      =1  #endif  // INTERNAL_MCU
 399      =1  
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 15  

 400      =1  #endif  //__REGISTERS__
 401      =1  
  12          #include "typedefs.h"
   1      =1  #ifndef __TYPEDEFS__
   2      =1  #define __TYPEDEFS__
   3      =1  
   4      =1  
   5      =1  #define DATA    data
   6      =1  #define PDATA   pdata
   7      =1  #define IDATA   data
   8      =1  #define CODE    code
   9      =1  #define CODE_P
  10      =1  #define PDATA_P
  11      =1  #define IDATA_P
  12      =1  #define DATA_P
  13      =1  
  14      =1  #define INTERRUPT( num, name ) name() interrupt num
  15      =1  
  16      =1  #define _between(x, a, b) (a<=x && x<=b)
  17      =1  #define _swap(a, b)     { a^=b; b^=a; a^=b; }
  18      =1  
  19      =1  typedef unsigned char Register;
  20      =1  typedef unsigned char BYTE;
  21      =1  typedef unsigned short  WORD;
  22      =1  typedef unsigned long DWORD;
  23      =1  
  24      =1  #define TRUE  1
  25      =1  #define FALSE 0
  26      =1  
  27      =1  //VInputStdDetectMode
  28      =1  #define AUTO  0
  29      =1  
  30      =1  //VInputStd
  31      =1  #define NTSC  1     
  32      =1  #define PAL   2
  33      =1  #define SECAM 3
  34      =1  #define NTSC4 4
  35      =1  #define PALM  5
  36      =1  #define PALN  6
  37      =1  #define PAL60 7
  38      =1  
  39      =1  #define MAXINPUTSTD PAL60+1 // 
  40      =1  
  41      =1  #define UNKNOWN 0xfe
  42      =1  #define NOINPUT 0 //0xff
  43      =1  
  44      =1  #define NIL     0xff
  45      =1  
  46      =1  enum SourceModeTypeEnum
  47      =1  { 
  48      =1    AVMode,      // 0   0X00
  49      =1    //VGAMode,       // 1
  50      =1  #ifdef USE_CAMD 
           =1   CAM_D,         // 2
           =1 #endif
  53      =1    CAM_A,         // 3   0x01
  54      =1    CAM_B,         // 4   0x02
  55      =1    CAM_C,         // 5   0x03
  56      =1    CAM_R,         // 6   0x04
  57      =1    CAM_AB,        // 7   0x05
  58      =1    CAM_CR,        // 8   0x06
  59      =1    CAM_AR,        // 9   0x07
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 16  

  60      =1    CAM_RB,        // 10    0x08
  61      =1    CAM_AC,        // 11    0x09
  62      =1    CAM_CB,        // 12    0x0a
  63      =1    CAM_RAB_T,     // 13    0x0b
  64      =1    CAM_RAB_H,     // 14    0x0c
  65      =1  
  66      =1    #ifdef HTRV
           =1   CAM_RC,
           =1   #endif
  69      =1    
  70      =1    CAM_QUAD,      // 15    0x0d
  71      =1    CAM_ABR_T3,    // 16    0x0e
  72      =1    CAM_ABR_T4,    // 17    0x0f
  73      =1    CAM_RAC_T,      //  0x10
  74      =1    CAM_RBC_T,      //  0x11
  75      =1    CAM_RAC_T2,     //  0x12
  76      =1    CAM_RBC_T2,     //  0x13
  77      =1    CAM_BA,       //  0x14
  78      =1    CAM_BC,       //  0x15
  79      =1    CAM_BR,       //  0x16
  80      =1    CAM_CA,       //  0x17
  81      =1    CAM_ABC,      //  0x18
  82      =1    CAM_ABR,      //  0x19
  83      =1    CAM_ACR,      //  0x1a
  84      =1    CAM_BAC,      //  0x1b
  85      =1    CAM_BAR,      //  0x1c
  86      =1    CAM_BCR,      //  0x1d
  87      =1    CAM_CAB,      //  0x1e
  88      =1    CAM_CAR,      //  0x1f
  89      =1    CAM_CBR,      //  0x20
  90      =1    SEQ,           // 18      0x10
  91      =1    CAM_NUM
  92      =1  };
  93      =1  
  94      =1  typedef unsigned char SourceModeType;
  95      =1  
  96      =1  #endif  /* __TYPEDEFS__ */
  97      =1  
  13          #include "main.h"
   1      =1  #ifndef __MAIN__
   2      =1  #define __MAIN__
   3      =1  
   4      =1  #define ON          1
   5      =1  #define OFF         0
   6      =1  #if 1//ryan@20171214
   7      =1  #define Hs_debug
   8      =1  #define Monitor_debug  
   9      =1  //#define Trigger_debug 
  10      =1  #endif
  11      =1  
  12      =1  
  13      =1  //#define DVR
  14      =1  #define Format_SDCard
  15      =1  #define BJTSwitch
  16      =1  
  17      =1  #define Panel_Enable()    P4=P4|0x08 //andy 980908
  18      =1  #define Panel_Disable()   P4=P4&0xf7
  19      =1  
  20      =1  #if 0
           =1 #define SetBacklight()      P4=P4|0x04
           =1 #define clrBacklight()      P4=P4&0xfb
           =1 #else
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 17  

  24      =1  #define SetBacklight()    P4=P4&0xfb
  25      =1  #define clrBacklight()    P4=P4|0x04
  26      =1  #endif
  27      =1  
  28      =1  //InputSelection
  29      =1  struct struct_IdName {
  30      =1    BYTE  Id;
  31      =1    BYTE  Name[16];
  32      =1  };
  33      =1  
  34      =1  #define CH_TW2835       1
  35      =1  #define CH_CAMD       2
  36      =1  #define CH_AV         3
  37      =1  #define PC          7
  38      =1  #define ChineseDefaultMenu  8
  39      =1  
  40      =1  #define SVIDEO        2
  41      =1  #define COMPONENT     3
  42      =1  //#define ANALOGDTV     4
  43      =1  #define DTV         4
  44      =1  #define TV          5
  45      =1  #define SCART       6
  46      =1  
  47      =1  #ifdef HS
  48      =1  #define CH_CAMB         4
  49      =1  #endif
  50      =1  
  51      =1  #define DIGITALVGA      8
  52      =1  
  53      =1  #define AIRTV       0 //9
  54      =1  #define CABLETV       1 //0xa
  55      =1  
  56      =1  #define TVTUNER       0xd   //10
  57      =1  #define MUTE        1 
  58      =1  #define MENU        2 
  59      =1  #define TVVOL       4 
  60      =1  #ifdef AWT_ML072S
  61      =1  #define VLOSSINFO     8 
  62      =1  #else
           =1 #define CC          8 
           =1 #endif
  65      =1  #define INPUTINFO     0x10
  66      =1  #define PCINFO        0x20
  67      =1  #define GAUGEINFO       0x40
  68      =1  //#define RATINGINFO      0x40
  69      =1  #define TVCHN       0x80
  70      =1  //#define MUTE        0x40
  71      =1  
  72      =1  #define YPBPR_480i      0
  73      =1  #define YPBPR_576i      1
  74      =1  #define YPBPR_480p      2
  75      =1  #define YPBPR_576p      3
  76      =1  #define YPBPR_1080i     4
  77      =1  #define YPBPR_720p      5
  78      =1  #define YPBPR_720p50    6
  79      =1  
  80      =1  //---------------------- Feature Define ----------------------------
  81      =1  #ifdef AWT_ML072Q
           =1 
           =1 //mask by ryan@20171018   #define AWT_ML720Q_NEW_TRIGGER_FUN    //Pinchi 20141031 add for AWT request each t
             -rigger can work by PRIORITY OFF
           =1 #define AWT_ADD_TRIGGER_DELAY_FUN 
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 18  

           =1 #define AWT_SUPPORT_4_3_SCREEN    //ryan@20170907 
           =1 #endif
  87      =1  
  88      =1  #ifdef AWT_ML072S
  89      =1  #define AWT_ADD_TRIGGER_DELAY_FUN 
  90      =1  #endif
  91      =1  
  92      =1  //--------------------------- P0 Define -----------------------------
  93      =1  //#define SEL_MIX     P0_6  // 
  94      =1  //--------------------------- P1 Define -----------------------------
  95      =1  //#define SEL_DVI     P3_5  //LJY062001   
  96      =1  
  97      =1  #define TW88HWReset     P3_4  //LJY001010 //LJY000721
  98      =1  #define PowerUp       P3_7
  99      =1  //======================= CDS Control ================================= 
 100      =1  //#define CDS_CTRL           P1_5
 101      =1  extern BYTE SelectModeType;
 102      =1  extern BYTE InputSelection;
 103      =1  extern BYTE SEQTime;
 104      =1  extern BYTE Priority;
 105      =1  extern BYTE PowerFlag;
 106      =1  //extern bit AutoDayNight;
 107      =1  extern bit SDCardCoverDetect;
 108      =1  
 109      =1  BYTE keyIn(void);
 110      =1  void TimerForRemocon(void);
 111      =1  void TimerForTick(void);
 112      =1  void DisableRemoconInt(void);
 113      =1  BYTE SetSupport_remocon(BYTE newd);
 114      =1  
 115      =1  void delay(BYTE cnt);
 116      =1  
 117      =1  BYTE RS_ready(void);
 118      =1  #ifdef Monitor_debug
 119      =1  BYTE RS_rx(void);
 120      =1  #endif
 121      =1  void RS_tx(BYTE tx_buf);
 122      =1  
 123      =1  BYTE RS2_rx(void);
 124      =1  void RS2_tx(BYTE tx_buf);
 125      =1  
 126      =1  void NewLine(void);
 127      =1  void PutsP(PDATA_P BYTE *ptr);
 128      =1  #ifdef Hs_debug
 129      =1  //void MonWriteI2C(BYTE addr, BYTE index, BYTE val);
 130      =1  //BYTE MonReadI2C(BYTE addr, BYTE index);
 131      =1  #endif
 132      =1  BYTE Asc1Bin(BYTE asc);
 133      =1  BYTE Asc2Bin(PDATA_P BYTE *s);
 134      =1  
 135      =1  void I2CDeviceInitialize( CODE_P BYTE *RegSet);
 136      =1  
 137      =1  //void RestartSystemClock(WORD clock_hm);
 138      =1  WORD GetTime_ms(void);
 139      =1  #if 0
           =1 BYTE GetTime_H(void);
           =1 BYTE GetTime_M(void);
           =1 #endif
 143      =1  void ChangeTime_H( char add );
 144      =1  void ChangeTime_M( char add );
 145      =1  //WORD GetWakeupTime(void);
 146      =1  //void SetWakeupTime(WORD wtime);
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 19  

 147      =1  
 148      =1  
 149      =1  //WORD GetOffTime(void);
 150      =1  //void SetOffTime(WORD wtime);
 151      =1  //BYTE GetSleepTimer(void);
 152      =1  //void SetSleepTimer(BYTE stime);
 153      =1  WORD DiffTime_ms( WORD stime, WORD etime );
 154      =1  //void SetLastBlockedTime(void);
 155      =1  void SetLastCCTime(void);       //ljy010904...CC_FIX_CLEAR_ON_TIME
 156      =1  
 157      =1  void SetOSDLastKeyInTime(void);
 158      =1  WORD GetOSDLastKeyInTime(void);
 159      =1  WORD GetIVF(void);
 160      =1  DWORD GetIHF(void);
 161      =1  BYTE ReadVInputSTD(void);
 162      =1  void SetVInputStd(BYTE newd);
 163      =1  BYTE GetVInputStd(void);
 164      =1  BYTE GetInputSelection(void);
 165      =1  #ifdef ADD_ANALOGPANEL
           =1 BYTE IsAnalogOn(void);
           =1 #endif
 168      =1  void InitVideoData(BYTE src);
 169      =1  void ChangeVInputStdDetectMode(BYTE val);
 170      =1  BYTE GetVInputStdInx(void);
 171      =1  
 172      =1  void MonWriteI2Cn_(BYTE addr, BYTE *val, BYTE cnt) ;
 173      =1  
 174      =1  void CheckNewTriggerFunc(void);
 175      =1  ///void Usage(void);
 176      =1  #ifdef Monitor_debug
 177      =1    void Prompt(void);
 178      =1  #endif
 179      =1  void DebugKeyIn(BYTE ikey);
 180      =1  void DVIPowerDown(bit flag);
 181      =1  void PowerDown_XTAL(bit flag);
 182      =1  
 183      =1  void ChangeInput(BYTE newsel);
 184      =1  
 185      =1  
 186      =1  void WaitPowerOn(void);
 187      =1  void PowerOff(void);
 188      =1  BYTE GetNextInputSelection(void);
 189      =1  
 190      =1  BYTE WantToStopTVScan(void);
 191      =1  
 192      =1  //BYTE IsTW8801(void);
 193      =1  //BYTE IsTW8803(void);
 194      =1  //BYTE ConvertVideoVSAT(BYTE reg);
 195      =1  
 196      =1  BYTE IsNoInput(void);
 197      =1  void LoadEEPROM (void);
 198      =1  void Hs_InitVars(void);
 199      =1  void AdjustAutoDayNight(BYTE val);
 200      =1  void ACCPowerControl(void);
 201      =1  void ON_LVDS(void);
 202      =1  void OFF_LVDS(void);
 203      =1  void main_loop(void);
 204      =1  struct RegisterInfo
 205      =1  {
 206      =1     int  Min;
 207      =1     int  Max;
 208      =1     int  Default;
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 20  

 209      =1  };
 210      =1  struct LongRegisterInfo
 211      =1  {
 212      =1     WORD Min;
 213      =1     WORD Max;
 214      =1     WORD Default;
 215      =1  };
 216      =1  
 217      =1  
 218      =1  typedef enum   ///add enum  by ryan@20170907
 219      =1  {
 220      =1    NORMALL_MODE,
 221      =1    REVERSE_TRIG,
 222      =1    LEFT_TRIG,
 223      =1    RIGHT_TRIG,
 224      =1  #ifdef USE_CAMD 
           =1   CAMD_TRIG,
           =1 #endif  
 227      =1    CAMC_TRIG,
 228      =1    VGA_TRIG,
 229      =1    PARK_TRIG,
 230      =1    No_TRIG,
 231      =1    TRIGGER_NUM
 232      =1  }TriggerModeType;
 233      =1  
 234      =1  
 235      =1  #endif  // __MAIN__
 236      =1  
  14          #include "tw88.h"
   1      =1  #ifndef __TW88__
   2      =1  #define __TW88__
   3      =1  
   4      =1  #include "main.h"
   1      =2  #ifndef __MAIN__
           =2 #define __MAIN__
           =2 
           =2 #define ON          1
           =2 #define OFF         0
           =2 #if 1//ryan@20171214
           =2 #define Hs_debug
           =2 #define Monitor_debug  
           =2 //#define Trigger_debug 
           =2 #endif
           =2 
           =2 
           =2 //#define DVR
           =2 #define Format_SDCard
           =2 #define BJTSwitch
           =2 
           =2 #define Panel_Enable()    P4=P4|0x08 //andy 980908
           =2 #define Panel_Disable()   P4=P4&0xf7
           =2 
           =2 #if 0
           =2 #define SetBacklight()      P4=P4|0x04
           =2 #define clrBacklight()      P4=P4&0xfb
           =2 #else
           =2 #define SetBacklight()    P4=P4&0xfb
           =2 #define clrBacklight()    P4=P4|0x04
           =2 #endif
           =2 
           =2 //InputSelection
           =2 struct struct_IdName {
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 21  

           =2   BYTE  Id;
           =2   BYTE  Name[16];
           =2 };
           =2 
           =2 #define CH_TW2835       1
           =2 #define CH_CAMD       2
           =2 #define CH_AV         3
           =2 #define PC          7
           =2 #define ChineseDefaultMenu  8
           =2 
           =2 #define SVIDEO        2
           =2 #define COMPONENT     3
           =2 //#define ANALOGDTV     4
           =2 #define DTV         4
           =2 #define TV          5
           =2 #define SCART       6
           =2 
           =2 #ifdef HS
           =2 #define CH_CAMB         4
           =2 #endif
           =2 
           =2 #define DIGITALVGA      8
           =2 
           =2 #define AIRTV       0 //9
           =2 #define CABLETV       1 //0xa
           =2 
           =2 #define TVTUNER       0xd   //10
           =2 #define MUTE        1 
           =2 #define MENU        2 
           =2 #define TVVOL       4 
           =2 #ifdef AWT_ML072S
           =2 #define VLOSSINFO     8 
           =2 #else
           =2 #define CC          8 
           =2 #endif
           =2 #define INPUTINFO     0x10
           =2 #define PCINFO        0x20
           =2 #define GAUGEINFO       0x40
           =2 //#define RATINGINFO      0x40
           =2 #define TVCHN       0x80
           =2 //#define MUTE        0x40
           =2 
           =2 #define YPBPR_480i      0
           =2 #define YPBPR_576i      1
           =2 #define YPBPR_480p      2
           =2 #define YPBPR_576p      3
           =2 #define YPBPR_1080i     4
           =2 #define YPBPR_720p      5
           =2 #define YPBPR_720p50    6
           =2 
           =2 //---------------------- Feature Define ----------------------------
           =2 #ifdef AWT_ML072Q
           =2 
           =2 //mask by ryan@20171018   #define AWT_ML720Q_NEW_TRIGGER_FUN    //Pinchi 20141031 add for AWT request each t
             -rigger can work by PRIORITY OFF
           =2 #define AWT_ADD_TRIGGER_DELAY_FUN 
           =2 #define AWT_SUPPORT_4_3_SCREEN    //ryan@20170907 
           =2 #endif
           =2 
           =2 #ifdef AWT_ML072S
           =2 #define AWT_ADD_TRIGGER_DELAY_FUN 
           =2 #endif
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 22  

           =2 
           =2 //--------------------------- P0 Define -----------------------------
           =2 //#define SEL_MIX     P0_6  // 
           =2 //--------------------------- P1 Define -----------------------------
           =2 //#define SEL_DVI     P3_5  //LJY062001   
           =2 
           =2 #define TW88HWReset     P3_4  //LJY001010 //LJY000721
           =2 #define PowerUp       P3_7
           =2 //======================= CDS Control ================================= 
           =2 //#define CDS_CTRL           P1_5
           =2 extern BYTE SelectModeType;
           =2 extern BYTE InputSelection;
           =2 extern BYTE SEQTime;
           =2 extern BYTE Priority;
           =2 extern BYTE PowerFlag;
           =2 //extern bit AutoDayNight;
           =2 extern bit SDCardCoverDetect;
           =2 
           =2 BYTE keyIn(void);
           =2 void TimerForRemocon(void);
           =2 void TimerForTick(void);
           =2 void DisableRemoconInt(void);
           =2 BYTE SetSupport_remocon(BYTE newd);
           =2 
           =2 void delay(BYTE cnt);
           =2 
           =2 BYTE RS_ready(void);
           =2 #ifdef Monitor_debug
           =2 BYTE RS_rx(void);
           =2 #endif
           =2 void RS_tx(BYTE tx_buf);
           =2 
           =2 BYTE RS2_rx(void);
           =2 void RS2_tx(BYTE tx_buf);
           =2 
           =2 void NewLine(void);
           =2 void PutsP(PDATA_P BYTE *ptr);
           =2 #ifdef Hs_debug
           =2 //void MonWriteI2C(BYTE addr, BYTE index, BYTE val);
           =2 //BYTE MonReadI2C(BYTE addr, BYTE index);
           =2 #endif
           =2 BYTE Asc1Bin(BYTE asc);
           =2 BYTE Asc2Bin(PDATA_P BYTE *s);
           =2 
           =2 void I2CDeviceInitialize( CODE_P BYTE *RegSet);
           =2 
           =2 //void RestartSystemClock(WORD clock_hm);
           =2 WORD GetTime_ms(void);
           =2 #if 0
           =2 BYTE GetTime_H(void);
           =2 BYTE GetTime_M(void);
           =2 #endif
           =2 void ChangeTime_H( char add );
           =2 void ChangeTime_M( char add );
           =2 //WORD GetWakeupTime(void);
           =2 //void SetWakeupTime(WORD wtime);
           =2 
           =2 
           =2 //WORD GetOffTime(void);
           =2 //void SetOffTime(WORD wtime);
           =2 //BYTE GetSleepTimer(void);
           =2 //void SetSleepTimer(BYTE stime);
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 23  

           =2 WORD DiffTime_ms( WORD stime, WORD etime );
           =2 //void SetLastBlockedTime(void);
           =2 void SetLastCCTime(void);       //ljy010904...CC_FIX_CLEAR_ON_TIME
           =2 
           =2 void SetOSDLastKeyInTime(void);
           =2 WORD GetOSDLastKeyInTime(void);
           =2 WORD GetIVF(void);
           =2 DWORD GetIHF(void);
           =2 BYTE ReadVInputSTD(void);
           =2 void SetVInputStd(BYTE newd);
           =2 BYTE GetVInputStd(void);
           =2 BYTE GetInputSelection(void);
           =2 #ifdef ADD_ANALOGPANEL
           =2 BYTE IsAnalogOn(void);
           =2 #endif
           =2 void InitVideoData(BYTE src);
           =2 void ChangeVInputStdDetectMode(BYTE val);
           =2 BYTE GetVInputStdInx(void);
           =2 
           =2 void MonWriteI2Cn_(BYTE addr, BYTE *val, BYTE cnt) ;
           =2 
           =2 void CheckNewTriggerFunc(void);
           =2 ///void Usage(void);
           =2 #ifdef Monitor_debug
           =2   void Prompt(void);
           =2 #endif
           =2 void DebugKeyIn(BYTE ikey);
           =2 void DVIPowerDown(bit flag);
           =2 void PowerDown_XTAL(bit flag);
           =2 
           =2 void ChangeInput(BYTE newsel);
           =2 
           =2 
           =2 void WaitPowerOn(void);
           =2 void PowerOff(void);
           =2 BYTE GetNextInputSelection(void);
           =2 
           =2 BYTE WantToStopTVScan(void);
           =2 
           =2 //BYTE IsTW8801(void);
           =2 //BYTE IsTW8803(void);
           =2 //BYTE ConvertVideoVSAT(BYTE reg);
           =2 
           =2 BYTE IsNoInput(void);
           =2 void LoadEEPROM (void);
           =2 void Hs_InitVars(void);
           =2 void AdjustAutoDayNight(BYTE val);
           =2 void ACCPowerControl(void);
           =2 void ON_LVDS(void);
           =2 void OFF_LVDS(void);
           =2 void main_loop(void);
           =2 struct RegisterInfo
           =2 {
           =2    int  Min;
           =2    int  Max;
           =2    int  Default;
           =2 };
           =2 struct LongRegisterInfo
           =2 {
           =2    WORD Min;
           =2    WORD Max;
           =2    WORD Default;
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 24  

           =2 };
           =2 
           =2 
           =2 typedef enum   ///add enum  by ryan@20170907
           =2 {
           =2   NORMALL_MODE,
           =2   REVERSE_TRIG,
           =2   LEFT_TRIG,
           =2   RIGHT_TRIG,
           =2 #ifdef USE_CAMD 
           =2   CAMD_TRIG,
           =2 #endif  
           =2   CAMC_TRIG,
           =2   VGA_TRIG,
           =2   PARK_TRIG,
           =2   No_TRIG,
           =2   TRIGGER_NUM
           =2 }TriggerModeType;
           =2 
           =2 
           =2 #endif  // __MAIN__
 236      =2  
   5      =1  
   6      =1  //Value for register 0x44
   7      =1  //#define DECODER_YCbCr   0x08    //xxxx bbxx
   8      =1  //#define RGB_RGB       0x0C
   9      =1  
  10      =1  #define TW88_FPLL0      0xf9
  11      =1  #define TW88_FPLL1      0xfa
  12      =1  #define TW88_FPLL2      0xfb
  13      =1  #define TW88_FSS      0xfc
  14      =1  #define TW88_FSS_PD     0xfd
  15      =1  #define TW88_PLL_DIV    0xfe
  16      =1  
  17      =1  //#define TW88_XSCALE     0x5d
  18      =1  //#define TW88_YSCALE     0x5e
  19      =1  
  20      =1  #define TW88_XUSCALELO    0x60
  21      =1  #define TW88_XDSCALELO    0x61
  22      =1  #define TW88_YUSCALELO    0x62
  23      =1  #define TW88_XYSCALEHI    0x63
  24      =1  #define TW88_XUSCALEFINE  0x69
  25      =1  #define TW88_YUSCALEFINE  0x6a
  26      =1  
  27      =1  //Power Mgt
  28      =1  #define POWER_OFF     0
  29      =1  #define POWER_STANDBY   1
  30      =1  #define POWER_SUSPEND   2
  31      =1  #define POWER_ON      3
  32      =1  
  33      =1  //void TWChipsDetect(void);
  34      =1  void SetAutoDetectStd(void);
  35      =1  void ClearAutoDetectStd(BYTE);
  36      =1  void I2CDeviceInitialize( CODE_P BYTE *RegSet);
  37      =1  
  38      =1  
  39      =1  //0x63.. Register Group
  40      =1  #define GROUP_YCbCr     0x40
  41      =1  #define GROUP_RGB     0
  42      =1  #define SelectPanelAttrRegGroup(A)        WriteTW88(0x70, (ReadTW88(0x70) & 0xbf) | A)
  43      =1  
  44      =1  //#if defined TW8801 || defined TW8803
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 25  

  45      =1  #define FB_MAIN   2
  46      =1  #define FB_NORMAL 1
  47      =1  #define FB_RGB    0
  48      =1  //void SetFBmode( BYTE mode );
  49      =1  //#endif // TW8801
  50      =1  
  51      =1  
  52      =1  //=============================================================================
  53      =1  //                               LCD Functions   
  54      =1  //=============================================================================
  55      =1  //BYTE GetLCDPowerState(void);
  56      =1  void SetLCDPowerState(BYTE dat);
  57      =1  
  58      =1  BYTE IsFreeRun(void);
  59      =1  #if defined( SUPPORT_PC ) || defined( SUPPORT_DTV )
           =1 void PanelFreeRun(BYTE on);
           =1 void PanelBlack(BYTE on);
           =1 #endif
  63      =1  #if 0
           =1 void PanelMute(BYTE on);
           =1 #endif
  66      =1  void LCDPowerON(BYTE mute); 
  67      =1  
  68      =1  #ifdef AWT_ML072S
  69      =1  void LCDPowerOFF(void);
  70      =1  #endif
  71      =1  
  72      =1  #ifdef Hs_debug
  73      =1  void LCDPower(void);
  74      =1  #endif
  75      =1  void DPMSmodeOFF(void);
  76      =1  void DPMSmodeON(void);
  77      =1  //=============================================================================
  78      =1  //                          Get PC Parameter Functions   
  79      =1  //=============================================================================
  80      =1  void GetInitPanelAttribute1(void);
  81      =1  //void GetInitPanelAttribute2(void);
  82      =1  void DefaultPanelAttributeForVideo(void);
  83      =1  void SetPVR(WORD pvr);
  84      =1  void SetPHR(WORD phr);
  85      =1  WORD GetPVR(void);
  86      =1  WORD GetPHR(void);
  87      =1  WORD GetHPN(void);
  88      =1  WORD GetVPN(void);
  89      =1  
  90      =1  //WORD GetVactive(void);
  91      =1  
  92      =1  WORD GetHstart(void);
  93      =1  WORD GetHend(void);
  94      =1  WORD GetVstart(void);
  95      =1  WORD GetVend(void);
  96      =1  void TuneLineBuffer(BYTE field);
  97      =1  void TuneLineBuffer4Video(BYTE field);
  98      =1  
  99      =1  #if defined (SUPPORT_DTV)
           =1 void SetCoarstForDTV(BYTE en);
           =1 #endif
 102      =1  
 103      =1  WORD GetHactiveStart(void);
 104      =1  WORD GetHactiveEnd(void);
 105      =1  WORD GetVactiveStart(void);
 106      =1  //WORD GetVactiveLen(void);
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 26  

 107      =1  BYTE GetVBackPorch(void);
 108      =1  void SetVBackPorch(BYTE val);
 109      =1  WORD GetPHP(void);
 110      =1  void SetPHP(WORD php);
 111      =1  void SetPVP(WORD period);
 112      =1  WORD GetPVP(void);
 113      =1  //void SetPanelRelatedRegisters(void);
 114      =1  //BYTE ChangedHPN(void);
 115      =1  //WORD GetVSUD(void);
 116      =1  
 117      =1  void SetDefaultPLL(void);
 118      =1  //void SetDefaultFPHSperiod(void);
 119      =1  //BYTE CalcPHP(DWORD ppf, BYTE tol);
 120      =1  //void ChangeFPHSperiod4DecoderInput(WORD vsud, BYTE tol);
 121      =1  
 122      =1  //-------------------------------------------------------------------
 123      =1  //                  Set Active Region Functions
 124      =1  //-------------------------------------------------------------------
 125      =1  void SetHactiveStart(WORD hstart);
 126      =1  void SetHactiveEnd(WORD hend);
 127      =1  void SetVactiveStart(WORD vstart);
 128      =1  //void SetVactiveLen(WORD van, WORD vstart);
 129      =1  void SetVactiveLen(WORD van);
 130      =1  //=============================================================================
 131      =1  //                     Set Measurement Window Functions   
 132      =1  //=============================================================================
 133      =1  void SetMeasureWindowH(WORD start, WORD stop);
 134      =1  void SetMeasureWindowV(WORD start, WORD stop);
 135      =1  //=============================================================================
 136      =1  //                          Video Input Functions   
 137      =1  //=============================================================================
 138      =1  BYTE IsVideoInput(void);
 139      =1  BYTE DetectDecoderInput(void);
 140      =1  //=============================================================================
 141      =1  //
 142      =1  //=============================================================================
 143      =1  #if defined( SUPPORT_PC ) || defined( SUPPORT_DTV )
           =1 void AutoPHPCalEnable(void);
           =1 void AutoPHPCalDisable(void);
           =1 #endif
 147      =1  void MakeStartInt(void);
 148      =1  void AVGAInput(void);
 149      =1  void DVIInput(void);
 150      =1  //void DVGAInput(void);
 151      =1  void DisableDVGA(void);
 152      =1  
 153      =1  void COMPOSITE1Input(void);
 154      =1  void COMPOSITE2Input(void);
 155      =1  void COMPOSITE3Input(void);
 156      =1  void COMPOSITE4Input(void);
 157      =1  
 158      =1  void SVIDEOInput(void);
 159      =1  void COMPONENTInput(void);
 160      =1  void ANALOGDTVInput(void);
 161      =1  void DTVInput(void);
 162      =1  void TVInput(void);
 163      =1  void SCARTInput(void);
 164      =1  
 165      =1  //=============================================================================
 166      =1  //                          Measurement Functions
 167      =1  //=============================================================================
 168      =1  ///void SetPanelBitOrder(BYTE swap);
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 27  

 169      =1  //void SetPanelSingleDouble(BYTE single);
 170      =1  
 171      =1  BYTE MeasureAndWait(BYTE flag);
 172      =1  
 173      =1  //WORD GetHCounter1(BYTE field);
 174      =1  //void SetHInitial(BYTE field, WORD counter);
 175      =1  //=============================================================================
 176      =1  //                          Invert Polarity Functions
 177      =1  //=============================================================================
 178      =1  void InvertHSYNCPolarity(void);
 179      =1  void InvertVSYNCPolarity(void);
 180      =1  //=============================================================================
 181      =1  //            Interrupt / SW Reset Control Functions
 182      =1  //=============================================================================
 183      =1  void SetInt(void);
 184      =1  //void ClearInt(void);
 185      =1  void SetEnDet(void);
 186      =1  void ClearEnDet(void);
 187      =1  void SWReset(void);
 188      =1  //void ClearSYNCLossStatus(void);
 189      =1  //void ClearSYNCChangeStatus(void);
 190      =1  //=============================================================================
 191      =1  //
 192      =1  //=============================================================================
 193      =1  BYTE IsBypassmode(void);
 194      =1  //BYTE IsInteraced(void);
 195      =1  void Clear_bypass(void);
 196      =1  void MaskOnSYNCInt(void);
 197      =1  void MaskOffSYNCInt(void);
 198      =1  //=============================================================================
 199      =1  //                                ZoomControl
 200      =1  //=============================================================================
 201      =1  void BypassZoom(void);
 202      =1  
 203      =1  void XscaleU(DWORD scale);
 204      =1  void XscaleD(DWORD scale);
 205      =1  void XScale2(DWORD scale);
 206      =1  void YScale2(DWORD scale);
 207      =1  WORD GetYScale(void);
 208      =1  //=============================================================================
 209      =1  //
 210      =1  //=============================================================================
 211      =1  WORD GetHSYNCPulse(void);
 212      =1  WORD GetVSYNCPulse(void);
 213      =1  //#if defined TW8801 || defined TW8803
 214      =1  WORD GetRelativePosition(void);
 215      =1  //#endif
 216      =1  //=============================================================================
 217      =1  //                MISC2 for decoder
 218      =1  //=============================================================================
 219      =1  #define BLUE_DECODER    2
 220      =1  #define BLACK_DECODER   0
 221      =1  
 222      =1  BYTE ForceDecoderOutput(BYTE color);
 223      =1  BYTE ClearForcedDecoderOutput(void);
 224      =1  //=============================================================================
 225      =1  //                CC and EDS
 226      =1  //=============================================================================
 227      =1  BYTE GetCCStatus(void);
 228      =1  void DisableCC(void);
 229      =1  void EnableCC(void);
 230      =1  BYTE GetCCData(void);
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 28  

 231      =1  BYTE IsCCEnabled(void);
 232      =1  void EnableEDS(void);
 233      =1  void DisableEDS(void);
 234      =1  void RecoverCCOverflow(void);
 235      =1  
 236      =1  #define CCFIFOHalfFull()      (ReadDecoder(CSTATUS) & 0x04)
 237      =1  //=============================================================================
 238      =1  //                Internal PLL
 239      =1  //=============================================================================
 240      =1  BYTE GetPOST(void);
 241      =1  void SetPLLS(BYTE plls);
 242      =1  BYTE GetREFDM(void);
 243      =1  void SetREFDM(BYTE refdm);
 244      =1  DWORD GetFBDN(void);
 245      =1  void SetFBDN(WORD fbdn, BYTE vcsel);
 246      =1  DWORD GetPPF(void);
 247      =1  void ChangeInternPLL(DWORD _PPF);
 248      =1  
 249      =1  //=============================================================================
 250      =1  //                Macros for attribute
 251      =1  //=============================================================================
 252      =1  //#define GetOSDTransReg()            ReadTW88(0xAE)
 253      =1  //#define SetOSDTransReg(AlphaV)          WriteTW88(0xAE, (BYTE)AlphaV )
 254      =1  
 255      =1  #define GetPanelContrastReg(gccolor)      ReadTW88(0x71+gccolor)
 256      =1  #define SetPanelContrastReg(sccolor, cval)    WriteTW88(0x71+sccolor,cval)
 257      =1  
 258      =1  #define GetPanelBrightnessReg(gbcolor)      ReadTW88(0x74+gbcolor);
 259      =1  #define SetPanelBrightnessReg(sbcolor, bval)  WriteTW88(0x74+sbcolor,bval);
 260      =1  
 261      =1  #define SetDTVBrightnessReg(bval)       WriteTW88(0x74,bval);
 262      =1  
 263      =1  #define GetPanelSaturationReg(gbcolor)      ReadTW88(0x72+gbcolor);
 264      =1  #define SetPanelSaturationReg(sbcolor, bval)  WriteTW88(0x72+sbcolor,bval);
 265      =1  
 266      =1  #define SetPanelSharpnessReg(bval)        WriteTW88(0x78,((bval&0x07)|0x38) );
 267      =1  
 268      =1  #define SetPanelHueReg(bval)          WriteTW88(0x70, (ReadTW88(0x70) & 0xc0 | (bval)) );
 269      =1  
 270      =1  #define GetVideoContrastReg()         ReadDecoder(CONTRAST)
 271      =1  #define SetVideoContrastReg(vcval)        WriteDecoder(CONTRAST, vcval)
 272      =1  
 273      =1  #define GetVideoBrightnessReg()         ReadDecoder(BRIGHT)
 274      =1  #define SetVideoBrightnessReg(vbval)      WriteDecoder(BRIGHT, vbval )
 275      =1  
 276      =1  #define GetVideoSaturationReg(gvstype)      ReadDecoder(SAT_U+gvstype)
 277      =1  #define SetVideoSaturationReg(svstype, vsval) WriteDecoder(SAT_U+svstype, vsval)
 278      =1  
 279      =1  #define GetVideoHueReg()            ReadDecoder(HUE)
 280      =1  #define SetVideoHueReg(vhval)         WriteDecoder(HUE, vhval )
 281      =1  
 282      =1  #define GetVideoSharpnessRegDef         (ReadDecoder(SHARPNESS) & 0x0f) 
 283      =1  
 284      =1  #define GetVideoSharpnessReg()          GetVideoSharpnessRegDef
 285      =1  //#define SetVideoSharpnessReg(vshval)      WriteDecoder(SHARPNESS, vshval )
 286      =1  #define SetVideoSharpnessReg(vshval)      WriteDecoder(SHARPNESS, ((ReadDecoder(SHARPNESS) & 0xf0) | (vshval 
             -& 0x0f) ) );
 287      =1  
 288      =1  #ifdef TW9908
           =1 #define SetVideoVPeakingReg(vshval)
           =1 #else
 291      =1  #define SetVideoVPeakingReg(vshval)       WriteDecoder(V_PEAKING, ((ReadDecoder(V_PEAKING) & 0xf8) | (vshval 
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 29  

             -& 0x07) ) );
 292      =1  #endif
 293      =1  
 294      =1  #define SetVideoHfilterReg(val)         WriteDecoder(HFILTER, ((ReadDecoder(HFILTER) & 0xf8) | (val & 0x07) )|
             -0x08 );
 295      =1  //----------------------------------------------------------------------------------
 296      =1  //color type
 297      =1  #define RED   0
 298      =1  #define GREEN 1
 299      =1  #define BLUE  2
 300      =1  #define WHITE 3
 301      =1  //saturation type
 302      =1  #define U_SAT 0
 303      =1  #define V_SAT 1
 304      =1  
 305      =1  //Alpha Blending Level
 306      =1  #define _0    0
 307      =1  #define _25   0x12
 308      =1  #define _37_5 0x13
 309      =1  #define _50   0x14
 310      =1  #define _100  0x18
 311      =1  
 312      =1  BYTE GetKey(BYTE repeat);
 313      =1  
 314      =1  /*
 315      =1  BYTE Mapping( int fromValue, struct RegisterInfo fromRange,
 316      =1                                   int * toValue, struct RegisterInfo toRange );
 317      =1  */
 318      =1  BYTE Mapping1( int fromValue, CODE_P struct RegisterInfo *fromRange,
 319      =1                                   int * toValue, CODE_P struct RegisterInfo *toRange );
 320      =1  #ifdef KEILC
 321      =1  #define Mapping2( A, B, C, D )      Mapping1( A, B, C, D )
 322      =1  #define Mapping3( A, B, C, D )      Mapping1( A, B, C, D )
 323      =1  #else
           =1 BYTE Mapping2( int fromValue, IDATA_P struct RegisterInfo *fromRange,
           =1                                  int * toValue, CODE_P struct RegisterInfo *toRange );
           =1 BYTE Mapping3( int fromValue, CODE_P struct RegisterInfo *fromRange,
           =1                                  int * toValue, IDATA_P struct RegisterInfo *toRange );
           =1 #endif
 329      =1  
 330      =1  BYTE GetAttributesFromNTSCSettings(BYTE index);
 331      =1  
 332      =1  #endif  // __TW88__
 333      =1  
  15          #include "i2c.h"
   1      =1  #ifndef __I2C_H__
   2      =1  #define __I2C_H__
   3      =1  
   4      =1  
   5      =1  void I2CReadByte3(BYTE *);
   6      =1  void I2CRead8Byte(BYTE *);
   7      =1  #if 0
           =1 void I2CReadByteMSP(BYTE addr, BYTE index, BYTE *pd, BYTE cnt);
           =1 #endif
  10      =1  BYTE I2CWriteByte2(BYTE);
  11      =1  BYTE I2CWriteByte3(BYTE*);
  12      =1  BYTE I2CWrite8Byte(BYTE *);
  13      =1  
  14      =1  void I2CStart(void);
  15      =1  void I2CWriteData(BYTE value);
  16      =1  BYTE I2CReadData(void);
  17      =1  #if 0
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 30  

           =1 BYTE I2CReadDataWithACK(void);
           =1 #endif
  20      =1  void I2CStop(void);
  21      =1  void I2Cdelay(void);
  22      =1  
  23      =1  
  24      =1  #define WriteTW88(a,b)    WriteI2C(TW88I2CAddress, a, b)
  25      =1  #define ReadTW88(a)     ReadI2C(TW88I2CAddress, a)
  26      =1  
  27      =1  BYTE WriteTW88_Wait (BYTE, BYTE);
  28      =1  void WriteADC   (BYTE, BYTE);
  29      =1  BYTE ReadADC    (BYTE);
  30      =1  BYTE ReadADC_TW88(BYTE index);
  31      =1  void WriteADC_TW88(BYTE index, BYTE dat);
  32      =1  
  33      =1  void WriteEEP   (WORD, BYTE);
  34      =1  BYTE ReadEEP    (WORD);
  35      =1  WORD ReadALC106(WORD index);
  36      =1  void WriteALC106(WORD index, WORD  dat);
  37      =1  WORD ReadI2CWORD(BYTE addr, BYTE index);
  38      =1  BYTE ReadI2C    (BYTE addr, BYTE index);
  39      =1  void WriteI2C   (BYTE addr, BYTE index, BYTE val);
  40      =1  
  41      =1  void WriteI2Cn_(BYTE addr, BYTE *val, BYTE cnt);
  42      =1  void WriteI2Cn (BYTE addr, BYTE index, BYTE *val, BYTE cnt);
  43      =1  void WriteI2CnD(BYTE addr, BYTE index, BYTE val, BYTE cnt);
  44      =1  
  45      =1  void ReadI2Cmn(BYTE addr, BYTE wcnt, BYTE rcnt, BYTE *rwdata);
  46      =1  
  47      =1  #define   WriteADC(a,b) WriteADC_TW88(a,b)
  48      =1  #define   ReadADC(a)    ReadADC_TW88(a)
  49      =1  
  50      =1  #endif  /* __I2C_H__ */
  16          #include "adc.h"
   1      =1  #ifndef __ADC__
   2      =1  #define __ADC__
   3      =1  
   4      =1  //=============================================================================
   5      =1  //                             ADC Functions
   6      =1  //=============================================================================
   7      =1  
   8      =1  void ADCPowerDown(bit flag);
   9      =1  void SelectADCmux(BYTE sel);
  10      =1  void SetADCMode(BYTE mode);
  11      =1  
  12      =1  void EnableADC(void);
  13      =1  void DisableADC(void);
  14      =1  
  15      =1  WORD GetCoarse(void);
  16      =1  void SetCoarse(WORD i);
  17      =1  void SetPhase(BYTE j);
  18      =1  BYTE GetPhaseCurrent(void);
  19      =1  BYTE SetVCORange(DWORD _IPF);
  20      =1  
  21      =1  //void SetADCGainOffset(BYTE gain, BYTE offset);
  22      =1  void AutoColorAdjust(void);
  23      =1  
  24      =1  void AutoColorAdjustForDTV(BYTE flag);
  25      =1  
  26      =1  #endif  // __ADC__
  27      =1  
  28      =1  
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 31  

  29      =1  
  30      =1  
  31      =1  
  32      =1  
  33      =1  
  34      =1  
  35      =1  
  36      =1  
  37      =1  
  38      =1  
  39      =1  
  40      =1  
  41      =1  
  42      =1  
  43      =1  
  44      =1  
  45      =1  
  46      =1  
  47      =1  
  48      =1  
  49      =1  
  50      =1  
  51      =1  
  52      =1  
  17          #include "osdbasic.h"
   1      =1  //osd_basic.h
   2      =1  //LJY11012001
   3      =1  #ifndef __OSD_BASIC__
   4      =1  #define __OSD_BASIC__
   5      =1  
   6      =1  // osd_basic.h
   7      =1  // char code
   8      =1  //#include "apilib.h"
   9      =1  
  10      =1  //ljy052903
  11      =1  //definition for internal OSD
  12      =1  #define FONT_WIDTH_TW88     12
  13      =1  #define FONT_HEIGHT_TW88    18
  14      =1  #define PIXS_PER_XSTEP_TW88   8
  15      =1  #define LINES_PER_YSTEP_TW88  4
  16      =1  #define MAX_OSDWINDOW_TW88    8
  17      =1  
  18      =1  // Using TW88 OSD for Menu
  19      =1  #define FONT_WIDTH      12
  20      =1  #define FONT_HEIGHT     18
  21      =1  #define PIXS_PER_XSTEP    8
  22      =1  #define LINES_PER_YSTEP   4
  23      =1  #define MAX_OSDWINDOW   4
  24      =1  
  25      =1  #define MAX_FONT_BYTES    27
  26      =1  #define RAMFONT   0xFE
  27      =1  #define ROMFONT   0xFF
  28      =1  #define NO_UDFONT     226 
  29      =1  
  30      =1  #define FONT_ROM  1
  31      =1  #define FONT_RAM  2
  32      =1  
  33      =1  
  34      =1  /////////////////////////////////
  35      =1  // Old Registers...
  36      =1  /*
  37      =1    #define TW88_WIN1ATTR   0x76
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 32  

  38      =1    #define TW88_WIN1XSTART   0x77
  39      =1    #define TW88_WIN1YSTART   0x78
  40      =1    #define TW88_WIN1WIDTH    0x79
  41      =1    #define TW88_WIN1HEIGHT   0x7a
  42      =1    #define TW88_WIN1BRDATTR  0x7b
  43      =1    #define TW88_WIN1BRDWIDTH 0x7c
  44      =1    #define TW88_WIN1BRDHEIGHT  0x7d
  45      =1    #define TW88_WIN1XSPACE   0x7e    // between characters.
  46      =1    #define TW88_WIN1YSPACE   0x7f
  47      =1    #define TW88_WIN1SADDR    0x80    // starting address of OSD ram for Windows 1
  48      =1  */
  49      =1  /////////////////////////////////
  50      =1  
  51      =1  // OSD
  52      =1  #define TW88_ENABLERAM    0x94  // TW8804C
  53      =1  #define TW88_FONTRAMADDR  0x99  // TW8804C
  54      =1  #define TW88_FONTRAMDATA  0x9a  // TW8804C
  55      =1  #define TW88_OSDRAMADDRHI 0x95  // TW8804C
  56      =1  #define TW88_OSDRAMADDRLO 0x96  // TW8804C
  57      =1  #define TW88_OSDRAMDATAHI 0x97  // TW8804C
  58      =1  #define TW88_OSDRAMDATALO 0x98  // TW8804C
  59      =1  #define TW88_MULTISTART   0x9b  // TW8804C
  60      =1  #define TW88_OSDLOCKUPSEL 0x9c
  61      =1  #define TW88_WINNUM     0x9e  // TW8804C
  62      =1  #define TW88_WINATTR    0x9f  //
  63      =1  #define TW88_WINXSTART    0xa1  //
  64      =1  #define TW88_WINYSTART    0xa2  //
  65      =1  #define TW88_WINSTART_HI  0xa0  //
  66      =1  #define TW88_WINWIDTH   0xa3  //
  67      =1  #define TW88_WINHEIGHT    0xa4  //
  68      =1  #define TW88_WINBRDATTR   0xa5  //
  69      =1  #define TW88_WINBRDWIDTH  0xa6  //
  70      =1  #define TW88_WINBRDHEIGHT 0xa7  //
  71      =1  #define TW88_WINSPACE   0xa8  // between characters.
  72      =1  #define TW88_WINZOOM    0xa9  //
  73      =1  #define TW88_WINSADDRHI   0xa9  // starting address of OSD ram for Windows 1
  74      =1  #define TW88_WINSADDRLO   0xaa  // starting address of OSD ram for Windows 1
  75      =1  
  76      =1  #define TW88_WINSHADOW    0xab  //
  77      =1  #define TW88_WINBLENDING  0xac  //
  78      =1  #define TW88_WINCHEFFECT  0xad  //
  79      =1  
  80      =1  
  81      =1  //Attributes for OSD
  82      =1  #define WINZOOMx1     0x01
  83      =1  #define WINZOOMx2     0x02
  84      =1  #define WINZOOMx3     0x03
  85      =1  #define WINZOOMx4     0x04
  86      =1  #define SHOW        0x08  
  87      =1  
  88      =1  #define EXTENDED_COLOR    0x80
  89      =1  #define BG_COLOR_BLACK    0x00  //For background color of window, border, and char. 
  90      =1  #define BG_COLOR_RED    0x40  
  91      =1  #define BG_COLOR_GREEN    0x20
  92      =1  #define BG_COLOR_YELLOW   0x60
  93      =1  #define BG_COLOR_BLUE   0x10
  94      =1  #define BG_COLOR_MAGENTA  0x50
  95      =1  #define BG_COLOR_CYAN   0x30
  96      =1  #define BG_COLOR_WHITE    0x70
  97      =1  #define BG_COLOR_TRANS    0x80  
  98      =1  #define BG_COLOR_MASK   0xf0  
  99      =1  
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 33  

 100      =1  #define CH_COLOR_BLACK    0x00  //For color of char.
 101      =1  #define CH_COLOR_RED    0x04  
 102      =1  #define CH_COLOR_GREEN    0x02
 103      =1  #define CH_COLOR_YELLOW   0x06
 104      =1  #define CH_COLOR_BLUE   0x01
 105      =1  #define CH_COLOR_MAGENTA  0x05
 106      =1  #define CH_COLOR_CYAN   0x03
 107      =1  #define CH_COLOR_WHITE    0x07
 108      =1  #define CH_BLINK      0x08  
 109      =1  #define CH_COLOR_MASK   0x0f  
 110      =1  
 111      =1  #define CL_BLACK      0x00  //For color of char.
 112      =1  #define CL_BLUE       0x01
 113      =1  #define CL_GREEN      0x02
 114      =1  #define CL_CYAN       0x03
 115      =1  #define CL_RED        0x04  
 116      =1  #define CL_MAGENTA      0x05
 117      =1  #define CL_YELLOW     0x06
 118      =1  #define CL_WHITE      0x07
 119      =1  #define CL_BLINK      0x08  
 120      =1  
 121      =1  // 0x76*(WindowNo*0x0b)
 122      =1  #define WINDOW_DISABLE    0x00
 123      =1  #define WINDOW_ENABLE   0x01
 124      =1  #define WINDOW_3D_ENABLE    0x04
 125      =1  #define WINDOW_3D_BOTTOM    0x08
 126      =1  #define WINDOW_3D_TOP     0x00
 127      =1  #define WINDOW_TRANS_ENABLE 0x80
 128      =1  
 129      =1  #define WINBDCOLOR_ENABLE 0x80
 130      =1  #define WINBDCOLOR_EXTENT 0x80
 131      =1  
 132      =1  
 133      =1  #define WINBLENDING_DISABLE 0x00
 134      =1  #define WINBLENDING_BACK    0x10
 135      =1  #define WINBLENDING_FORE    0x20
 136      =1  #define WINBLENDING_ALL     0x30
 137      =1  
 138      =1  #define WINSHADOW_ENABLE  0x80
 139      =1  // 0xc8*WindowNo
 140      =1  #define WIN_MULTICOLOR_ENABLE 0x20
 141      =1  #define WIN_CH_EFFECT_ENABLE  0x10
 142      =1  #define WIN_CH_EFFECT_SHADOW  0x08
 143      =1  
 144      =1  
 145      =1  
 146      =1  ///////// TW8804C /////////////
 147      =1  // Window Number
 148      =1  #define WINNUM1       1
 149      =1  #define WINNUM2       2
 150      =1  #define WINNUM3       3
 151      =1  #define WINNUM4       4
 152      =1  
 153      =1  // Index 0x9f Defination
 154      =1  #define WIN_BG_COLOR_EX   0x80
 155      =1  #define WIN_BG_COLOR_EX0  0x00
 156      =1  #define WIN_3D_TYPE     0x08
 157      =1  #define WIN_3D_TYPE0    0x00
 158      =1  #define WIN_3D_EN     0x04
 159      =1  #define WIN_3D_EN0      0x00
 160      =1  #define WIN_3D_LEVEL    0x02
 161      =1  #define WIN_EN        0x01
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 34  

 162      =1  #define WIN_EN0       0x00
 163      =1  
 164      =1  // Index 0xa5 Defination
 165      =1  #define WIN_BD_EN     0x80
 166      =1  #define WIN_BD_EN0      0x00
 167      =1  #define WIN_BD_WIDTH(a)   a
 168      =1  
 169      =1  // Index 0xa6 Defination
 170      =1  #define WIN_BD_COLOR_EX   0x80
 171      =1  #define WIN_BD_COLOR_EX0  0x00
 172      =1  #define WIN_H_BD_W(a)   a
 173      =1  
 174      =1  // Index 0xa7 Defination
 175      =1  #define WIN_V_BD_W(a)   a
 176      =1  
 177      =1  // Index 0xa8
 178      =1  #define WIN_CH_VSPACE(a)  (a<<4)
 179      =1  #define WIN_CH_HSPACE(a)  a
 180      =1  
 181      =1  // Index 0xa9 Defination
 182      =1  #define WIN_VZOOM(a)    (a-1)
 183      =1  #define WIN_HZOOM(a)    (a-1)
 184      =1  #define WIN_SADDR(a)    a
 185      =1  
 186      =1  // Index 0xab
 187      =1  #define WIN_SHADOW_EN   0x80
 188      =1  #define WIN_SHADOW_EN0    0x00
 189      =1  #define WIN_SHADOW_W(a)   a
 190      =1  
 191      =1  // ad
 192      =1  #define WIN_SHADOW_COLOR_EX   0x80
 193      =1  #define WIN_SHADOW_COLOR_EX0  0x00
 194      =1  #define WIN_MULTI_EN      0x40
 195      =1  #define WIN_MULTI_EN0     0x00
 196      =1  #define WIN_V_EXT_EN      0x20
 197      =1  #define WIN_V_EXT_EN0     0x00
 198      =1  #define WIN_CH_BDSH_SEL(a)    a
 199      =1  #define SEL_BORDER        0
 200      =1  #define SEL_SHADOW        1
 201      =1  #define WIN_CH_BDSH_COLOR_EX  0x08
 202      =1  #define WIN_CH_BDSH_COLOR_EX0 0x00
 203      =1  
 204      =1  #define OSD_Win_Num(a)      0x9e, a-1
 205      =1  #define OSD_Win_Start_Addr    0xa0
 206      =1  #define OSD_Win_Attr(a)       a
 207      =1  #define OSD_Win_Start(h,v)       (BYTE)(((WORD)h>>8) | (((WORD)v>>8)<<4)),(BYTE)h, (BYTE)v
 208      =1  #define OSD_Win_Width(a)      a
 209      =1  #define OSD_Win_Height(a)     a
 210      =1  #define OSD_Win_Border(a)     a
 211      =1  #define OSD_Win_HBorder(a)      a
 212      =1  #define OSD_Win_VBorder(a)      a
 213      =1  #define OSD_Win_CH_Space(a)     a
 214      =1  #define OSD_Win_ZM_SAddr(h,v,a)   ((h<<6)|(v<<4)|(a>>8)), (BYTE)a
 215      =1  #define OSD_Win_Shadow(a)     a
 216      =1  #define OSD_Win_Blending(a)     a
 217      =1  #define OSD_Win_CH_BorderShadow(a)  a
 218      =1  
 219      =1  
 220      =1  #define SetOSDWindowNum(winno)    WriteTW88(TW88_WINNUM, winno-1)
 221      =1  
 222      =1  //#define  OSD_Window_Attr(Trans_en,Color,3D_Type,3D_en,W_en)       (((( Trans_en | Color ) | 3D_Type) | 3
             -D_en) | W_en)
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 35  

 223      =1  #define  OSD_Window_Attr(a,b,c,d,e)                 (((( a | b ) | c) | d) | e)
 224      =1  #define  OSD_WShadow_Attr(W_Shadow_en,Color,Width)          W_Shadow_en | Color | Width
 225      =1  //#define  OSD_Blending(en,level)                   en | (level & 0x0f)
 226      =1  //#define  OSD_Ch_Effect(Multi, Effect_En, ShadowBorder, Color)   Multi | Effect_En | ShadowBorder | Color 
             - 
 227      =1  
 228      =1  
 229      =1  struct OSDStrInfo 
 230      =1  {
 231      =1    BYTE  cnt;
 232      =1    WORD  addr;
 233      =1    BYTE  attr;
 234      =1    DWORD str;
 235      =1  };
 236      =1  /*
 237      =1  struct BarInfo {
 238      =1    struct RegisterInfo BarCnt;
 239      =1    BYTE  winno;
 240      =1    BYTE  xoff;
 241      =1    BYTE  yoff;
 242      =1    BYTE  color;
 243      =1    int   bar_cnt;
 244      =1  };
 245      =1  */
 246      =1  struct FontData {
 247      =1    BYTE  font[27];
 248      =1  } ;
 249      =1  
 250      =1  //====================================================================
 251      =1  //  Internal OSD Function
 252      =1  void CopyCharToOSDRAM_TW88(BYTE Addr, BYTE attr, BYTE ch);
 253      =1  void CopyUDCharToOSDRAM_TW88(BYTE Addr, BYTE attr, BYTE ch);
 254      =1  //BYTE GetOSDWindowWidth_TW88(BYTE winno);
 255      =1  WORD GetOSDWindowSA_TW88(BYTE winno);
 256      =1  void SetOSDWindowX_TW88(BYTE winno, BYTE x);
 257      =1  void SetOSDWindowY_TW88(BYTE winno, BYTE y);
 258      =1  void SetOSDWindowWidth_TW88(BYTE winno, BYTE w);
 259      =1  void SetOSDWindowSA_TW88(BYTE winno, WORD sa);
 260      =1  
 261      =1  void SetOSDItalicsAndUnderline(BYTE italics, BYTE underline);
 262      =1  
 263      =1  void SetOSDHBorderWidth_TW88(BYTE winno, BYTE w);
 264      =1  //BYTE GetOSDWindowColor_TW88(BYTE winno);
 265      =1  void SetOSDWindowColor_TW88(BYTE CCWin, BYTE color);
 266      =1  void EnableOSDRAMAndChangeFont(BYTE type);
 267      =1  void WriteCharToOSDRAM(WORD addr, BYTE ch, BYTE attr);
 268      =1  
 269      =1  
 270      =1  void ShowOSDWindowAll(BYTE on);
 271      =1  void ShowOSDWindow_TW88(BYTE winno, BYTE onoff);
 272      =1  void ClearOSD_TW88(void);
 273      =1  //void CreateOSDWindow_TW88(BYTE winno, BYTE x, BYTE y, BYTE w, BYTE h, WORD sa, BYTE attr);
 274      =1  /*not yet!!
 275      =1  //ljy012304...CC_ADJUST_POS
 276      =1  void SetOSDWindowXS_TW88(BYTE winno, BYTE xs);
 277      =1  void SetOSDWindowYS_TW88(BYTE winno, BYTE ys);
 278      =1  */
 279      =1  
 280      =1  //====================================================================
 281      =1  //  OSDMenu Functions
 282      =1  
 283      =1  //--------------------------------------------------------------------
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 36  

 284      =1  //  Functions used in only Menu
 285      =1  #define   CONVERT_CODE      0x80
 286      =1  
 287      =1  void InitOSDWindow(BYTE *ptr);
 288      =1  
 289      =1  WORD GetOSDWindowX(BYTE winno);
 290      =1  WORD GetOSDWindowY(BYTE winno);
 291      =1  BYTE CreateOSDWindowOutline(BYTE winno, BYTE w, BYTE color);
 292      =1  void CreateOSDMenuWindow(BYTE, BYTE, BYTE, BYTE, BYTE, BYTE, BYTE);
 293      =1  void ClearOSDLine(BYTE winno, BYTE sx, BYTE sy, BYTE cnt, BYTE attr);
 294      =1  void WriteStringToAddr(WORD addr, BYTE *str, BYTE cnt);
 295      =1  void DrawAttrString(WORD addr, BYTE *str, BYTE cnt);
 296      =1  void DrawAttrCnt(WORD addr, BYTE color, BYTE cnt);
 297      =1  void ClearDataCnt(WORD, BYTE);
 298      =1  #define   SetOSDWindowX(A, B)       SetOSDWindowX_TW88(A, B)
 299      =1  #define   SetOSDWindowY(A, B)       SetOSDWindowY_TW88(A, B)
 300      =1  
 301      =1  //--------------------------------------------------------------------
 302      =1  //  Functions used in Menu and others
 303      =1  #define   ShowOSDWindow(A, B)       ShowOSDWindow_TW88(A, B)
 304      =1  #define   ClearOSD()              ClearOSD_TW88()
 305      =1  
 306      =1  //================================================================
 307      =1  //  Font
 308      =1  void DownloadUDFont(void);
 309      =1  #ifdef Hs_debug
 310      =1  void DisplayROMFont(BYTE);
 311      =1  void DisplayRAMFont(BYTE);
 312      =1  #endif
 313      =1  void DownloadFont(BYTE cod, CODE_P BYTE *fontdata);
 314      =1  //void DisplayGrid( void );
 315      =1  //void DisplayCone( void );
 316      =1  //void DisplayJapanese( void );
 317      =1  void TestRAMFont( void );
 318      =1  #ifdef BANKING
           =1 void DisplayMGrid( BYTE );
           =1 void DisplayMessage( void );
           =1 void DisplayChinese( void );
           =1 void DisplayJapanese( void );
           =1 void DisplayKorean( void );
           =1 void DisplayGridBank0( BYTE n );
           =1 void DisplayGridBank1( BYTE n );
           =1 #endif
 327      =1  
 328      =1  //================================================================
 329      =1  //  OSD COLOR
 330      =1  void Change_OSDColorLookup(void);
 331      =1  void Reset_OSDColorLookup(void);
 332      =1  
 333      =1  //====================================================================
 334      =1  //        Conversion
 335      =1  //====================================================================
 336      =1  BYTE utoa(WORD value, BYTE *str, BYTE radix);
 337      =1  BYTE ltoa_K(long value, BYTE *str, BYTE);
 338      =1  BYTE strlen( BYTE *str );
 339      =1  
 340      =1  #define CStrlen(A)        strlen(A)
 341      =1  
 342      =1  void WaitEndofDisplayArea(void);
 343      =1  
 344      =1  #endif  // __OSD_BASIC__
 345      =1  
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 37  

  18          #include "dispinfo.h"
   1      =1  #ifndef __DISPINFO__
   2      =1  #define __DISPINFO__
   3      =1  //==================================================================
   4      =1  //        Display Information
   5      =1  //==================================================================
   6      =1  #if (defined WQVGA) && (defined ANALOG_7INCH)
           =1 #define   INPUTINFO_ZOOM    WINZOOMx1
           =1 #define   LOGO_ZOOM     WINZOOMx3
           =1 
           =1 #else // (defined WQVGA) && (defined SHARP_LQ043T3DX02)
  11      =1  
  12      =1    #ifdef AWT_ML072S
  13      =1    #define   INPUTINFO_ZOOM    WINZOOMx4
  14      =1    #else
           =1   #define   INPUTINFO_ZOOM    WINZOOMx2
           =1   #endif
  17      =1  #define   LOGO_ZOOM     WINZOOMx2
  18      =1  #endif
  19      =1  //#define   VOL_ZOOM      WINZOOMx4
  20      =1  #define   MUTE_ZOOM     WINZOOMx3
  21      =1  #define   TVCHN_ZOOM      WINZOOMx4
  22      =1  #define   RATINGINFO_ZOOM   WINZOOMx3
  23      =1  #define     SCANTV_ZOOM     WINZOOMx2   //ljy012304
  24      =1  #define   PCINFO_ZOOM     WINZOOMx2
  25      =1  #define     BAR_ZOOM      WINZOOMx2
  26      =1  
  27      =1  
  28      =1  #define DVRStatus_OSDWIN  4 
  29      =1  #define DVRStatus_ADDR  180
  30      =1  
  31      =1  extern  BYTE  DisplayedOSD;
  32      =1  
  33      =1  
  34      =1  void ClearDisplayedOSD( BYTE newd );
  35      =1  void SetDisplayedOSD( BYTE newd );
  36      =1  BYTE GetDisplayedOSD(void);
  37      =1  void ClearOSDInfo(void);
  38      =1  
  39      =1  void DisplayInput(void);
  40      =1  BYTE ClearInput(void);
  41      =1  BYTE ClearInput2s(void);
  42      =1  
  43      =1  //void DisplayLogo(void);
  44      =1  
  45      =1  void ClearLogo(void);
  46      =1  
  47      =1  void DisplayPCInfo(BYTE CODE *ptr);
  48      =1  void ClearPCInfo(void);
  49      =1  void DisplayAutoAdjust(void);
  50      =1  void ClearAutoAdjust(void);
  51      =1  
  52      =1  
  53      =1  void DisplayVol(void);
  54      =1  #if 0
           =1 void DisplayBrightness(void);
           =1 #endif
  57      =1  #if 0
           =1 void DisplayMuteInfo(void);
           =1 #endif
  60      =1  void ClearMuteInfo(void);
  61      =1  BYTE CheckAndClearOSD(void);
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 38  

  62      =1  BYTE ClearVlossOsd(void);
  63      =1  #ifdef AWT_ML072S
  64      =1  void VlossHandler(void);
  65      =1  void Check_Vloss(void);
  66      =1  #endif
  67      =1  //==================================================================
  68      =1  //            TV Info
  69      =1  //==================================================================
  70      =1  
  71      =1  BYTE ClearTVInfo(void);
  72      =1  
  73      =1  #endif  // __DISPINFO__
  19          #include "debug.h"
   1      =1  #ifndef __DEBUG__
   2      =1  #define __DEBUG__
   3      =1  
   4      =1  #define DEBUG_ERR 1
   5      =1  #define DEBUG_WARN  2
   6      =1  #define DEBUG_INFO  3
   7      =1  #define DEBUG_BREAK 4
   8      =1  
   9      =1  #ifdef DEBUG_PAUSE
           =1 #define Pause(a)  { Printf("\r\n"); Printf(a); while(!RS_ready()); RS_rx(); }
           =1 #endif
  12      =1  //#define BURSTLOCK 7
  13      =1  
  14      =1  void DebugWindowControl (void) ;
  15      =1  void Draw_Debug_Char(void);
  16      =1  void DebugWindowCursor( BYTE flag ) ;
  17      =1  void DebugWindowData( BYTE flag ) ;
  18      =1  void Debug_Write(void);
  19      =1  void Debug_Read(void);
  20      =1  
  21      =1  
  22      =1  
  23      =1  #endif  // __DEBUG__
  24      =1  
  25      =1  #ifdef CHIP_MANUAL_TEST
           =1 BYTE DelaynCheck(void);
           =1 void ChipManualTest(void);
           =1 
           =1 #endif
  20          #include "etc_eep.h"
   1      =1  #ifndef __ETC_EEP__
   2      =1  #define __ETC_EEP__
   3      =1  
   4      =1  
   5      =1  ////eeprom.h
   6      =1  
   7      =1  //=========================================================================
   8      =1  //  EEPROM structure
   9      =1  //  0x00  BYTE  4 'TW88'
  10      =1  #define EEP_FWREV_MAJOR     0x04  //BYTE  1 F/W Rev.-major(Hex) 
  11      =1  #define EEP_FWREV_MINOR     0x05  //BYTE  1 F/W Rev.-minor(Hex)
  12      =1  #define EEP_DEBUGLEVEL      0x06  //BYTE  1 DebugLevel
  13      =1  //
  14      =1  #define EEP_AUTODETECT      0x07  //BYTE  1 Flag for Input Auto Detect  -0:Auto, 1:NTSC,....
  15      =1  #define EEP_AUTODETECTTYTE    0x08  //BYTE  1 Type of Auto-detect(will be value of register 0x1d)
  16      =1  //      ---------------------------------------------------------------
  17      =1  #define EEP_WIDEMODE      0x09  //BYTE  1   Wide Mode
  18      =1  
  19      =1  #define EEP_AUTORECOGNITION   0x0a  //BYTE  1 Auto Recognition
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 39  

  20      =1  #define EEP_VIDEOMODE     0x0b  //BYTE  1   Video Mode
  21      =1  
  22      =1  #define EEP_OSDLANG       0x0c  //BYTE  1   OSDLang           // 0
  23      =1  
  24      =1  #define EEP_OSDPOSITIONMODE   0x0d  //BYTE  1 OSD Position Mode
  25      =1  #define EEP_CCD         0x0e  //BYTE  1 Closed Caption- 0: off, 1:on
  26      =1  
  27      =1  #define EEP_INPUTSELECTION    0x0f  //BYTE  1 InputSelection
  28      =1  
  29      =1  //
  30      =1  #define EEP_PC_CONTRAST     0x10
  31      =1  #define EEP_PC_BRIGHT     0x11
  32      =1  
  33      =1  #define EEP_CONTRAST      0x12  //BYTE  1 Contrast 
  34      =1  #define EEP_BRIGHTNESS      0x13  //BYTE  1 Brightness
  35      =1  #define EEP_SATURATION_U    0x14  //BYTE  1 Saturation :U
  36      =1  #define EEP_SATURATION_V    0x15  //BYTE  1 Saturation :V
  37      =1  #define EEP_SHARPNESS     0x16  //BYTE  1 Sharpness 
  38      =1  #define EEP_HUE         0x17  //BYTE  1 Hue                    
  39      =1  
  40      =1  //====================================HS AWT 981001
  41      =1  #define  EEP_AutoMode           0xa0
  42      =1  #define  EEP_IMAGEMode          0xa1
  43      =1  #define  EEP_RearMode           0xa2
  44      =1  #define  EEP_COSDMode           0xa3
  45      =1  #define  EEP_GAUGEMode          0xa4
  46      =1  #define  EEP_CAMAMode           0xa5 
  47      =1  #define  EEP_CAMBMode           0xa6
  48      =1  #define  EEP_CAMCMode           0xa7
  49      =1  #define  EEP_CAMRMode           0xa8
  50      =1  #define  EEP_CAMOutMode         0xa9  
  51      =1  #define  EEP_TimeStep           0xaa
  52      =1  #define  EEP_Powerflag          0xab   
  53      =1  #define  EEP_ONOFFChoice        0xac 
  54      =1  
  55      =1  #define  EEP_PRIORITY           0xad
  56      =1  #define  EEP_JUMPMode           0xae
  57      =1  #define  EEP_NowModeState       0xaf
  58      =1  #define  EEP_SelectMode         0xb0
  59      =1  #define  EEP_PriorityOffSelectMode  0xb1
  60      =1  #define  EEP_AudioRecord    0xb2
  61      =1  
  62      =1  #define  EEP_FirstNumber    0xb3
  63      =1  #define  EEP_SecondNumber   0xb4
  64      =1  #define  EEP_ThridNumber    0xb5
  65      =1  #define  EEP_FourthNumber   0xb6
  66      =1  
  67      =1  #define  EEP_CAMNUMBER     0xb7
  68      =1  #define  EEP_PELCO       0xb8
  69      =1  #define  EEP_Baud_rate     0xb9
  70      =1  #define  EEP_TriggerVGA    0xba
  71      =1  #define  EEP_DVRDisplay    0xbb
  72      =1  #define  EEP_IMAGE_A_Mode    0xbc//andy A1.4 20100113
  73      =1  #define  EEP_IMAGE_B_Mode    0xbd//andy A1.4 20100113
  74      =1  #define  EEP_IMAGE_C_Mode    0xbe//andy A1.4 20100113
  75      =1  
  76      =1  #define  EEP_SDCardDetect    0xbf//andy A1.4 20100113
  77      =1  
  78      =1  #ifdef HTRV
           =1 #define  EEP_Gauge_VStart  0x211   //WILLIAM-970318
           =1 static  BYTE GaugeVStart;
           =1 #endif
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 40  

  82      =1  
  83      =1  #define  EEP_DELAYCAMA           0xC0 
  84      =1  #define  EEP_DELAYCAMB           0xC1
  85      =1  #define  EEP_DELAYCAMC           0xC2
  86      =1  #define  EEP_DELAYCAMR           0xC3
  87      =1  #ifdef USE_CAMD
           =1 #define  EEP_DELAYCAMD           0xC4
           =1 #endif
  90      =1  //#define  EEP_SelectModeBuf         0xb2
  91      =1  #define  EEP_ReverseMode    0xc5
  92      =1  #define  EEP_JUMPAV_TIMESET 0xc6
  93      =1  #if 0
           =1 #define  EEP_Resolution     0xc0
           =1 #define  EEP_FPS        0xc1
           =1 #define  EEP_Quality      0xc2
           =1 #define  EEP_RecordMode     0xc3
           =1 #define  EEP_RecordLength   0xc4
           =1 #define  EEP_PreAlarmLength   0xc5
           =1 #define  EEP_PostAlarmLength  0xc6
           =1 #endif
 102      =1  //====================================HS AWT 981001
 103      =1  
 104      =1  #ifdef AWT_ADD_TRIGGER_DELAY_FUN  
 105      =1  #define  EEP_CamADelay    0x21b
 106      =1  #define  EEP_CamBDelay    0x21c
 107      =1  #define  EEP_CamCDelay    0x21d
 108      =1  #define  EEP_CamRDelay    0x21e
 109      =1  #endif
 110      =1  //====================================
 111      =1  //
 112      =1  //        ---------------------------------------------------------------
 113      =1  #define EEP_PCAUDIOPVOL   0x37  //BYTE  1   AudioVol
 114      =1  #define EEP_AUDIOPVOL     0x38  //BYTE  1   AudioVol
 115      =1  #define EEP_AUDIOBALANCE    0x39  //BYTE  1   AudioBalance
 116      =1  //
 117      =1  //        ---------------------------------------------------------------
 118      =1  
 119      =1  #define EEP_BLOCKMOVIE      0x40  //BYTE  1 BlockedMovie:Blocked rating for Movie 
 120      =1  #define EEP_BLOCKTV       0x41  //BYTE  1 BlockedTV:Blocked rating for TV     
 121      =1  #define EEP_FVSLD       0x42  //BYTE  6
 122      =1  //                            7    6       4    3    2    1    0
 123      =1  //  FVSLD Level                        ALL   FV(V)   S    L    D    
 124      =1  //  0x43    BYTE    1   TV-Y            X  
 125      =1  //  0x44  BYTE    1   TV-Y7           X    X 
 126      =1  //  0x45  BYTE    1   TV-G            X 
 127      =1  //  0x46  BYTE    1   TV-PG           X       X    X    X    X
 128      =1  //  0x47  BYTE    1   TV-14           X       X    X    X    X 
 129      =1  //  0x48  BYTE    1   TV-MA           X       X    X    X
 130      =1  //
 131      =1  #define EEP_VCHIPPASSWORD   0x49  //BYTE  4   OSDPassword         //Defualt:3366
 132      =1  //      ---------------------------------------------------------------
 133      =1  //
 134      =1  //
 135      =1  //  0x61  WORD  2   PanelXRes
 136      =1  //  0x63  WORD  2 PanelYRes
 137      =1  //  0x65  BYTE  1 PanelHsyncMinPulseWidth
 138      =1  //  0x66  BYTE  1 PanelVsyncMinPulseWidth
 139      =1  //  0x67  WORD  2 PanelHminBackPorch
 140      =1  //  0x69  BYTE  1 PanelHsyncPolarity
 141      =1  //  0x6a  BYTE  1 PanelVsyncPolarity
 142      =1  //  0x6b  WORD  2 PanelDotClock
 143      =1  //  0x6d  BYTE  1 PanelPixsPerClock
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 41  

 144      =1  //  0x6e  BYTE  1 PanelDEonly
 145      =1  //      ---------------------------------------------------------------
 146      =1  //
 147      =1  //  0x80  PC Data
 148      =1  //
 149      =1  //      ---------------------------------------------------------------
 150      =1  //
 151      =1  //  0x300 TV Data
 152      =1  //
 153      =1  //  --- NTSC_TV -------------------------------------------------------------
 154      =1  //  CNT_SAVEDAIR      BYTE  1   Total count of saved Air TV Channel.
 155      =1  //  IDX_CURAIR        BYTE  1   Index of Current Air TV Channel
 156      =1  //  CHN_CURAIR        BYTE    1   Current Air TV Channel.
 157      =1  //
 158      =1  //  FIRSTSAVED_AIRCHN   BYTE    1 First saved Air TV channel no (maximum 100)
 159      =1  //  ....
 160      =1  //
 161      =1  //  CNT_SAVEDCABLE      BYTE  1   Total count of saved Cable TV Channel.
 162      =1  //  IDX_CURCABLE      BYTE  1   Index of Current Cable TV Channel
 163      =1  //  CHN_CURCABLE      BYTE    1   Current Cable TV Channel.
 164      =1  //
 165      =1  //  FIRSTSAVED_CABLECHN   BYTE  1 First saved Cable TV channel no (maximum 100)
 166      =1  //
 167      =1  //  --- PAL_TV --------------------------------------------------------------
 168      =1  //  PR_CUR          BYTE  1   Current PR no.
 169      =1  //  FIRST_SAVEDPR     DWORD 4   Freq of PR0.  (TOTAL_PR)
 170      =1  //  FIRST_SAVEDPR+4     DWORD   4   Freq of PR1.
 171      =1  //  .....
 172      =1  //
 173      =1  
 174      =1  
 175      =1  
 176      =1  //
 177      =1  // Offset of EEPROM
 178      =1  //
 179      =1  /*
 180      =1  #define VIDEOCONTRAST   0x18    // for NTSC.(PAL:0x20,SECAM:0x28)
 181      =1  #define VIDEOBRIGHTNESS   0x19
 182      =1  #define VIDEOSATURATION_U 0x1a
 183      =1  #define VIDEOSATURATION_V 0x1b
 184      =1  #define VIDEOHUE      0x1c    // only for NTSC
 185      =1  #define VIDEOSHARPNESS    0x1d
 186      =1  */
 187      =1  #define CCCOLOR   0x52
 188      =1  #define VOLZOOM   0x53
 189      =1  
 190      =1  #define PANELINFO 0x61
 191      =1  
 192      =1  // PAL_TV
 193      =1  #define  PR_CUR         0x301 
 194      =1  #define  FIRST_SAVEDPR      0x308 
 195      =1   #define TVFREQ_HIGH 0 
 196      =1   #define TVFREQ_LOW  1
 197      =1  #ifdef PAL_TV
           =1  #define TVFINETUNE  2
           =1     // NOT Finetune: 0 , Range: -32 ~ +32
           =1  #define TVPRSYSTEM  3  
           =1     // bit 7: Add:1 Ereased :0
           =1     // 
           =1  #define TVCHNAME    4
           =1 
           =1  #define BYTEPERCHANNEL 9 
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 42  

           =1 #endif
 207      =1  // NTSC_TV
 208      =1  #define  EEP_TVInputSel     0x302
 209      =1  #define  CHN_CURAIR       0x303 
 210      =1  #define  FIRSTSAVED_AIRCHN    0x308 
 211      =1  #define  CHN_CURCABLE     0x403 
 212      =1  #define  FIRSTSAVED_CABLECHN  0x408 
 213      =1  #ifdef NTSC_TV
           =1  #define TVFINETUNE  0
           =1     // NOT Finetune: 0 , Range: -32 ~ +32
           =1  #define TVPRSYSTEM  1  
           =1     // bit 7: Add:1 Ereased :0
           =1     // 
           =1  #define BYTEPERCHANNEL 2
           =1 #endif
 221      =1  
 222      =1  
 223      =1  
 224      =1  
 225      =1  WORD GetFWRevEE(void);
 226      =1  void SaveFWRevEE(WORD);
 227      =1  
 228      =1  BYTE GetDebugLevelEE(void);
 229      =1  void SaveDebugLevelEE(BYTE);
 230      =1  
 231      =1  #ifdef WIDE_SCREEN
           =1 BYTE GetWideModeEE(void);
           =1 void SaveWideModeEE(BYTE dl);
           =1 #endif
 235      =1  
 236      =1  
 237      =1  //BYTE GetRange4CoarseEE(void);
 238      =1  //void SaveRange4CoarseEE(BYTE);
 239      =1  
 240      =1  BYTE GetPossibleAutoDetectStdEE(void);
 241      =1  void SetPossibleAutoDetectStdEE(void);
 242      =1  
 243      =1  //BYTE GetOSDXPositionEE(void);
 244      =1  //BYTE GetOSDYPositionEE(void);
 245      =1  BYTE GetClosedCaptionFlagEE(void);
 246      =1  
 247      =1  BYTE GetVideoDatafromEE(BYTE);
 248      =1  void SaveVideoDatatoEE(BYTE offset, BYTE ndata);
 249      =1  
 250      =1  //BYTE GetVideoBrightnessEE(void);
 251      =1  //BYTE GetVideoSaturationEE(BYTE);
 252      =1  //BYTE GetVideoHueEE(void);
 253      =1  //BYTE GetVideoSharpnessEE(void);
 254      =1  
 255      =1  //void SaveVideoContrastEE(BYTE ndata);
 256      =1  //void SaveVideoBrightnessEE(BYTE ndata);
 257      =1  //void SaveVideoSaturationEE(BYTE, BYTE ndata);
 258      =1  //void SaveVideoHueEE(BYTE ndata);
 259      =1  //void SaveVideoSharpnessEE(BYTE ndata);
 260      =1  
 261      =1  BYTE GetOSDPositionModeEE(void);
 262      =1  void SaveOSDPositionModeEE(BYTE ndata);
 263      =1  //void SaveOSDXPositionEE(BYTE);
 264      =1  //void SaveOSDYPositionEE(BYTE);
 265      =1  
 266      =1  void SaveClosedCaptionFlagEE(BYTE);
 267      =1  
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 43  

 268      =1  BYTE GetBlockedTVEE(void);      
 269      =1  void SaveBlockedTVEE(BYTE vi);    
 270      =1  BYTE GetBlockedTV_FLDSLEE( BYTE level ) ;
 271      =1  void SaveBlockedTV_FLDSLEE(BYTE level, BYTE vi) ;
 272      =1  
 273      =1  BYTE GetBlockedMovieEE(void);   
 274      =1  void SaveBlockedMovieEE(BYTE vi); 
 275      =1  #if 0
           =1 BYTE GetInputSelectionEE(void);
           =1 #endif
 278      =1  void SaveInputSelectionEE(BYTE val);
 279      =1  
 280      =1  //BYTE GetOSDDurationEE(void);
 281      =1  //void SaveOSDDurationEE(BYTE val);
 282      =1  
 283      =1  BYTE GetOSDLangEE(void);
 284      =1  void SaveOSDLangEE(BYTE val);
 285      =1  
 286      =1  //ljy100303...BYTE GetOSDZoomEE(void);
 287      =1  //ljy100303...void SaveOSDZoomEE(BYTE val);
 288      =1  
 289      =1  BYTE GetAudioVolEE(void);
 290      =1  void SetAudioVolEE( BYTE vol );
 291      =1  BYTE GetPCAudioVolEE(void);
 292      =1  void SetPCAudioVolEE( BYTE vol );
 293      =1  #if 0
           =1 BYTE GetAudioBalanceEE(void);
           =1 void SetAudioBalanceEE( BYTE vol );
           =1 BYTE GetAudioBassEE(void);
           =1 void SetAudioBassEE( BYTE vol );
           =1 BYTE GetAudioTrebleEE(void);
           =1 void SetAudioTrebleEE( BYTE vol );
           =1 #endif
 301      =1  //BYTE GetAudioEffectEE(void);
 302      =1  //void SetAudioEffectEE( BYTE vol );
 303      =1  
 304      =1  void ClearBasicEE(void);
 305      =1  
 306      =1  BYTE ValidPassword(DATA_P BYTE *numstr, BYTE index);
 307      =1  BYTE SetNewPassword(DATA_P BYTE *numstr, BYTE index);
 308      =1  
 309      =1  //WORD GetPanelXRes(void);
 310      =1  //WORD GetPanelYRes(void);
 311      =1  BYTE GetPanelHsyncMinPulseWidth(void);
 312      =1  BYTE GetPanelVsyncMinPulseWidth(void);
 313      =1  WORD GetPanelHMinBackPorch(void);
 314      =1  BYTE GetPanelHsyncPolarity(void);
 315      =1  BYTE GetPanelVsyncPolarity(void);
 316      =1  WORD GetPanelDotClock(void);
 317      =1  WORD GetPanelMaxClock(void);
 318      =1  BYTE GetPanelPixsPerClock(void);
 319      =1  // Not used yet *************************  BYTE GetPanelDEonly(void);
 320      =1  
 321      =1  void AddTVChannelEE( BYTE tvtype, BYTE chn);
 322      =1  BYTE GetTVChannelEE( BYTE tvtype, BYTE inx);
 323      =1  void ResetTVChannelEE( BYTE tvtype );
 324      =1  BYTE GetTVChannelCntEE(BYTE tvtype);
 325      =1  BYTE GetTVChnIdxEE(BYTE tvtype);
 326      =1  BYTE GetCurTVChannelEE(BYTE tvtype);
 327      =1  void SetTVChnIdxEE(BYTE tvtype, BYTE newd);
 328      =1  void SetCurTVChannelEE(BYTE tvtype, BYTE newd);
 329      =1  BYTE InsertTVChannelEE(BYTE tvtype, BYTE newd);
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 44  

 330      =1  BYTE RemoveTVChannelEE(BYTE tvtype, BYTE newd);
 331      =1  
 332      =1  void SetTVPrEE(void);
 333      =1  BYTE GetTVPrEE(void);
 334      =1  void SetTVFreqEE(BYTE, WORD);
 335      =1  WORD GetTVFreqEE(BYTE);
 336      =1  void SetFineTuneEE(BYTE, BYTE);
 337      =1  BYTE GetFineTuneEE(BYTE);
 338      =1  BYTE GetTVPrSystem(BYTE);
 339      =1  void SetTVPrSystem(BYTE, BYTE);
 340      =1  BYTE GetTVInputSelEE(void);
 341      =1  void SetTVInputSelEE(BYTE);
 342      =1  
 343      =1  #define GetVInputStdDetectModeEE()        ReadEEP(EEP_AUTODETECTTYTE)
 344      =1  #define SaveVInputStdDetectModeEE(A)      WriteEEP(EEP_AUTODETECTTYTE, A)
 345      =1  
 346      =1  #define GetAutoRecogntionEE()         ReadEEP(EEP_AUTORECOGNITION)
 347      =1  #define SaveAutoRecogntionEE(A)         WriteEEP(EEP_AUTORECOGNITION, A)
 348      =1  
 349      =1  #define SetVideoModeEE( ctid )          WriteEEP( EEP_VIDEOMODE, ctid )
 350      =1  #define GetVideoModeEE()            ReadEEP( EEP_VIDEOMODE )
 351      =1  
 352      =1  #define GetPanelContrastEE()          ReadEEP(0x10)
 353      =1  
 354      =1  #if defined( SUPPORT_PC ) || defined( SUPPORT_DTV )
           =1 //#define GetPanelHueEE()             ReadEEP(0x28)
           =1 //#define GetPanelSharpnessEE()         ReadEEP(0x29)
           =1 #define GetPanelBrightnessEE()          ReadEEP(0x11)
           =1 //#define GetPanelSaturationEE()          ReadEEP(0x2a)
           =1 
           =1 //#define SavePanelHueEE(A)           WriteEEP(0x28, A)
           =1 //#define SavePanelSharpnessEE(A)         WriteEEP(0x29, A)
           =1 #define SavePanelContrastEE(A)          WriteEEP(0x10, A)
           =1 #define SavePanelBrightnessEE(A)        WriteEEP(0x11, A)
           =1 //#define SavePanelSaturationEE(A)        WriteEEP(0x2a, A)
           =1 #endif
 366      =1  
 367      =1  /*
 368      =1  #define GetDigitalVideoContrastEE()       ReadEEP(0x2b)
 369      =1  #define GetDigitalVideoBrightnessEE()     ReadEEP(0x2c)
 370      =1  #define GetDigitalVideoHueEE()          ReadEEP(0x2d)
 371      =1  #define GetDigitalVideoSaturationEE(off)    ReadEEP(0x2e+off)
 372      =1  
 373      =1  #define SaveDigitalVideoContrastEE(A)     WriteEEP(0x2b, A)
 374      =1  #define SaveDigitalVideoBrightnessEE(A)     WriteEEP(0x2c, A)
 375      =1  #define SaveDigitalVideoHueEE(A)        WriteEEP(0x2d, A)
 376      =1  #define SaveDigitalVideoSaturationEE(off,A)   WriteEEP(0x2e+off, A)
 377      =1  */
 378      =1  
 379      =1  #endif  // __ETC_EEP__
  21          #include "measure.h"
   1      =1  #ifndef __MEASURE__
   2      =1  #define __MEASURE__
   3      =1  
   4      =1  #define EE_DOS        0
   5      =1  
   6      =1  #define EE_SP1        1
   7      =1  #define EE_SP2        2
   8      =1  #define EE_SP3        3
   9      =1  
  10      =1  #define EE_VGA_60     4
  11      =1  #define EE_VGA_66     5
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 45  

  12      =1  #define EE_VGA_70     6
  13      =1  #define EE_VGA_72     7
  14      =1  #define EE_VGA_75     8
  15      =1  #define EE_VGA_85     9
  16      =1  
  17      =1  #define EE_SVGA_56      10
  18      =1  #define EE_SVGA_60      11
  19      =1  #define EE_SVGA_70      12
  20      =1  #define EE_SVGA_72      13
  21      =1  #define EE_SVGA_75      14
  22      =1  #define EE_SVGA_85      15
  23      =1  
  24      =1  #define EE_832_75     16
  25      =1  
  26      =1  #define EE_XGA_60     17
  27      =1  #define EE_XGA_70     18
  28      =1  #define EE_XGA_72     19
  29      =1  #define EE_XGA_75     20
  30      =1  #define EE_XGA_85     21
  31      =1  
  32      =1  #define EE_1152_60      22
  33      =1  #define EE_1152_70      23
  34      =1  #define EE_1152_75      24
  35      =1  
  36      =1  #define EE_SXGA_60      25
  37      =1  #define EE_SXGA_70      26
  38      =1  #define EE_SXGA_75      27
  39      =1  
  40      =1  #define EE_RGB_480P     28
  41      =1  #define EE_RGB_720P     29
  42      =1  #define EE_RGB_720P50   30
  43      =1  #define EE_RGB_1080I    31
  44      =1  #define EE_RGB_1080I50A   32
  45      =1  #define EE_RGB_1080I50B   33
  46      =1  #define EE_RGB_480I     34
  47      =1  #define EE_RGB_576I     35
  48      =1  #define EE_RGB_576P     36
  49      =1  
  50      =1  #define EE_YPbPr_480P   37
  51      =1  #define EE_YPbPr_720P   38
  52      =1  #define EE_YPbPr_720P50   39
  53      =1  #define EE_YPbPr_1080I    40
  54      =1  #define EE_YPbPr_1080I50A 41
  55      =1  #define EE_YPbPr_1080I50B 42
  56      =1  #define EE_YPbPr_480I   43
  57      =1  #define EE_YPbPr_576I   44
  58      =1  #define EE_YPbPr_576P   45
  59      =1  
  60      =1  #define EE_PC_MAX     46
  61      =1  
  62      =1  #define EE_PC_NO_SIGNAL   0xfe
  63      =1  #define EE_PC_UNKNOWN   0xff
  64      =1  
  65      =1  struct _PCMDATA {
  66      =1    CODE_P BYTE  Support;
  67      =1    CODE_P WORD  HAN;
  68      =1    CODE_P WORD  VAN;
  69      =1    CODE_P WORD  IVF;
  70      =1    CODE_P WORD  CLOCK;
  71      =1    CODE_P WORD  low;
  72      =1    CODE_P WORD  high;
  73      =1    CODE_P WORD  Hstart;
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 46  

  74      =1    CODE_P WORD  Vstart;
  75      =1    CODE_P WORD  IPF;   // 0.1MHz
  76      =1    CODE_P WORD  PPF;   // 0.1MHz
  77      =1    CODE_P BYTE  VBack;
  78      =1  };
  79      =1  #ifndef AUTOCALC_PC
           =1 
           =1 #ifdef SUPPORT_DTV
           =1 struct _DTVMDATA {
           =1   CODE_P BYTE Reg62;
           =1   CODE_P BYTE RegBC;
           =1   CODE_P BYTE RegBD;
           =1   CODE_P BYTE RegBE;
           =1   CODE_P WORD PHP;
           =1 };
           =1 #endif
           =1 #endif
  91      =1  #if defined XGA
           =1   #define MAX_PPF    90000000
           =1 #elif defined SXGA
           =1   #define MAX_PPF   135000000
           =1 #elif defined WXGA
           =1   #define MAX_PPF    90000000
           =1 #elif defined WVGA
  98      =1    #define MAX_PPF    90000000
  99      =1  #elif defined VGA
           =1   #define MAX_PPF    50000000
           =1 #elif defined SVGA
           =1   #define MAX_PPF    80000000
           =1 #elif defined QVGA
           =1   #define MAX_PPF    30000000
           =1 #elif defined WQVGA
           =1   #define MAX_PPF    30000000
           =1 #endif
 108      =1  
 109      =1  extern BYTE cLastSyncLoss;
 110      =1  extern BYTE PcMode;
 111      =1  
 112      =1  void CompLT170E2(void);
 113      =1  
 114      =1  WORD gap(WORD a, WORD b);
 115      =1  
 116      =1  //===================================================================
 117      =1  WORD GetHpnVpn(BYTE);
 118      =1  
 119      =1  WORD ConvertBasedOnInput(WORD dat);
 120      =1  
 121      =1  BYTE IsDTVInput(void);
 122      =1  
 123      =1  void SetVValueForPanel(WORD vstart);
 124      =1  BYTE SetHValueForPanel(void);
 125      =1  BYTE GetActiveRegion(void);
 126      =1  
 127      =1  BYTE DetectAndSetForVGAInput(BYTE);
 128      =1  #ifdef SUPPORT_DTV
           =1 BYTE DetectAndSetForDTVInput(BYTE);
           =1 #endif
 131      =1  void CheckPCinput(void);
 132      =1  void CheckDTVinput(void);
 133      =1  
 134      =1  WORD GetCoarseValue(void);
 135      =1  BYTE GetPhaseValue(void);
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 47  

 136      =1  WORD SetPCCoarseValue(BYTE val);
 137      =1  BYTE SetPhaseValue(BYTE val);
 138      =1  
 139      =1  void DisplayResultAndSetActiveRange(void);
 140      =1  
 141      =1  //=============================================================================
 142      =1  //                    PC Screen Position Move Functions
 143      =1  //=============================================================================
 144      =1  void MoveActiveVpos(BYTE val);    // Up/Down
 145      =1  void MoveActiveHpos(BYTE val);    // Left/Right
 146      =1  
 147      =1  BYTE GetVPosition(void);
 148      =1  BYTE SetVPosition(BYTE val);
 149      =1  BYTE GetHPosition(void);
 150      =1  BYTE SetHPosition(BYTE val);
 151      =1  
 152      =1  void ResetPCValue(void);
 153      =1  
 154      =1  CODE_P BYTE *GetPCInputSourceName(void);
 155      =1  BYTE AutoAdjust(void);
 156      =1  
 157      =1  #endif // __MEASURE__
  22          #include "Printf.h"
   1      =1  #ifndef __PRINTF__
   2      =1  #define __PRINTF__
   3      =1  
   4      =1  #define _outchar(c) while(1) { if( !RS_Xbusy ) { SBUF = c; RS_Xbusy=1; break; } }
   5      =1  #define Putch(c) _outchar(c)
   6      =1  
   7      =1  #ifdef SERIAL
   8      =1  
   9      =1   void Printf ( const char CODE_P *fmt, ... );
  10      =1   void Puts ( CODE_P char *ptr );
  11      =1  
  12      =1  #define TW2835Cmd(a)   Puts ( a )
  13      =1  
  14      =1  #else
           =1 
           =1  #undef  DEBUG
           =1  #define Printf(a,b)  //
           =1  #define Puts(a)      //
           =1 
           =1 #endif
  21      =1  
  22      =1  
  23      =1  #ifndef DEBUG
  24      =1  
  25      =1   #define dPuts(a)   //
  26      =1   #define wPuts(a)   //
  27      =1   #define ePuts(a)   //
  28      =1  
  29      =1  #else
           =1 
           =1  void dPrintf( const char CODE_P *fmt, ... );
           =1  void wPrintf( const char CODE_P *fmt, ... );
           =1  void ePrintf( const char CODE_P *fmt, ... );
           =1 
           =1  void dPuts( CODE_P char *ptr );
           =1  void wPuts( CODE_P char *ptr );
           =1  void ePuts( CODE_P char *ptr );
           =1 
           =1 #endif  // DEBUG
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 48  

  40      =1  
  41      =1  BYTE Getch(void);
  42      =1  BYTE Getche(void);
  43      =1  
  44      =1  
  45      =1  #endif  //__PRINTF__
  23          #include "audio.h"
   1      =1  
   2      =1  #define MAX_SOUND_VOLUME 50
   3      =1  extern  BYTE  AudioVol;
   4      =1  extern  BYTE  PCAudioVol;
   5      =1  
   6      =1  //BYTE ResetMSP(void);
   7      =1  //void SetMSPSCARTPrescale(void);
   8      =1  //void SetMSPSourceSel(void);
   9      =1  //void SetMSPVol(void);
  10      =1  
  11      =1  //BYTE AudioAutoStdDetection(void);
  12      =1  //BYTE SteroMonoDetection(void);
  13      =1  
  14      =1  //BYTE TunerAudio(void);
  15      =1  //void ExtAudio(void);
  16      =1  //id PCAudio(void);
  17      =1  //id MuteOn(void);
  18      =1  //BYTE GetAudioVol(void);
  19      =1  BYTE ChangeVol(char);
  20      =1  //BYTE GetAudioBalance(void);
  21      =1  //BYTE ChangeBalance(char);
  22      =1  //BYTE GetAudioBass(void);
  23      =1  //BYTE ChangeBass(char);
  24      =1  //BYTE GetAudioTreble(void);
  25      =1  //BYTE ChangeTreble(char);
  26      =1  //BYTE GetAudioEffect(void);
  27      =1  //BYTE ChangeAudioEffect(char amount);
  28      =1  //void ToggleAudioMute(void);
  29      =1  //void CheckAndClearMuteOn(void);
  30      =1  
  31      =1  //BYTE IsAudioMuteOn(void);
  32      =1  //void SetAudioMute(BYTE on );
  33      =1  //void ChangeMTS(BYTE type);
  34      =1  //void AudioOff(void);
  35      =1  void AudioMute(bit mute);
  36      =1  extern void    Wait_ms(WORD Tms);
  37      =1  
  38      =1  //#define AudioOn()     SetMSPVol()
  39      =1  //void ResetAudioValue();
  24          #include "osdmenu.h"
   1      =1  //osdmenu.h
   2      =1  //LJY10292001
   3      =1  #ifndef __OSDMENU__
   4      =1  #define __OSDMENU__
   5      =1  
   6      =1  //=======================================================================
   7      =1  // 
   8      =1  //BYTE GetOSDDuration(void);
   9      =1  
  10      =1  void ResetVideoValue(void);
  11      =1  //#if defined( SUPPORT_PC ) || defined( SUPPORT_DTV )
  12      =1  //void ResetPCValue(void);
  13      =1  //#endif
  14      =1  BYTE GetOSDMenuLevel( void );
  15      =1  
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 49  

  16      =1  void DrawMenulist(BYTE);
  17      =1  void Display_EnterPin(void);
  18      =1  void OSDHighMenu_sub(void);
  19      =1  void ResetOSDValue(void);
  20      =1  #ifdef E_Wintek
           =1 void ResetUESROSDValue(void);
           =1 #endif
  23      =1  //BYTE OnChangingValue(void);
  24      =1  //Not used yet *******************BYTE OnChangingTime(void);
  25      =1  
  26      =1  //WORD GetOSDclock(void);
  27      =1  
  28      =1  #ifdef HS_NEWOSDMENU
           =1 void InitOSDMenu(BYTE OSD_ID);
           =1 void OpenOSDMenu(BYTE OSD_ID);
           =1 #else
  32      =1  void InitOSDMenu(void);
  33      =1  void OpenOSDMenu(void);
  34      =1  #endif
  35      =1  BYTE CloseOSDMenu(void);
  36      =1  
  37      =1  void OpenFORMATMenu(void);
  38      =1  void OSDHighMenu(void);
  39      =1  void OSDSelect(void);
  40      =1  void OSDCursorMove(BYTE flag );
  41      =1  void OSDLeftRight(BYTE flag );
  42      =1  void OSDValueUpDn(BYTE flag);
  43      =1  WORD SetItemValue( BYTE id, BYTE flag );
  44      =1  BYTE DoAction(BYTE id);
  45      =1  
  46      =1  BYTE SaveValue1(void);
  47      =1  void ClearValueWin(void);
  48      =1  
  49      =1  void OSDNumber( BYTE num );
  50      =1  
  51      =1  void Set4WideScreen(BYTE id);
  52      =1  
  53      =1  void SetRGBContrast( BYTE id, BYTE val );
  54      =1  BYTE SetPCColorTemp(BYTE flag);
  55      =1  void ResetPanelAttributeValue(void);
  56      =1  WORD GetItemValue( BYTE);
  57      =1  void DisplayViewBar( WORD,BYTE);
  58      =1  void DrawNum(WORD, CODE_P struct NumType *, WORD);
  59      =1  void DrawStringByLang( WORD, CODE_P struct EnumType *, WORD);
  60      =1  
  61      =1  void DisplayVolumebar(BYTE val);
  62      =1  BYTE GetOSDLang(void);
  63      =1  void InitOSDMenuXY(void);
  64      =1  
  65      =1  void Display_TVGuide_Window(void);
  66      =1  void Display_TVGuide_Status(void);
  67      =1  
  68      =1  void ChangeVchip_LevelCursor(BYTE);
  69      =1  void ChangeVchip_ContentCursor(BYTE);
  70      =1  void Select_VchipLevel(void);
  71      =1  void SetVideoMode(BYTE mode);
  72      =1  BYTE GetVideoDatawithOffset(BYTE offset);
  73      =1  void SetVideoContrast(BYTE newv);
  74      =1  void SetVideoBrightness(BYTE newv);
  75      =1  void SetVideoHue(BYTE newv) ;
  76      =1  void SetVideoSaturation(BYTE svtype, BYTE newv) ;
  77      =1  BYTE SetVideoSharpness(BYTE flag) ;
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 50  

  78      =1  void SetVideoBacklight(BYTE newv) ;
  79      =1  //------------------------------------------------andy awt 981013
  80      =1  //void DaySelect(BYTE);
  81      =1  void CAMOutDSel(BYTE val);
  82      =1  void DVRAodioSel(BYTE  val);
  83      =1  
  84      =1  //------------------------------------------------andy awt 981013
  85      =1  
  86      =1  void DisplayLineOSD(void);  // OSD Line display Demo
  87      =1  #ifdef CENEC_OSDMENU_ACCM8
           =1 BYTE ChkOSDMENU_TOPWIN(void);  //Weylis 080930
           =1 BYTE ChkOSDMENU_WINDOW(void);
           =1 BYTE ChkOSDMENU(void);
           =1 #endif
  92      =1  
  93      =1  #ifdef AWT_ADD_TRIGGER_DELAY_FUN  //Pinchi 20150209 add
  94      =1  void AWT_DisplayViewBar(WORD addr , BYTE val);
  95      =1  #endif
  96      =1  struct MenuType {
  97      =1    BYTE  width,  height;
  98      =1    BYTE  TitleColor; 
  99      =1    BYTE  CursorColor;
 100      =1  };
 101      =1  
 102      =1  struct NumType {
 103      =1    BYTE  PrePostCharLen;   // high nibble(pre) / low nibble(post)
 104      =1    BYTE  PrePostChar[4];
 105      =1  };
 106      =1  
 107      =1  struct NumberStringType {
 108      =1    BYTE  x, y;
 109      =1    BYTE    width;
 110      =1    BYTE  BackColor;
 111      =1    BYTE  Radix;
 112      =1    BYTE  NumColor;
 113      =1    BYTE    MaxLen;       // maximum length of string
 114      =1    BYTE  PrePostCharLen;   // high nibble(pre) / low nibble(post)
 115      =1    BYTE  PrePostChar[3];
 116      =1  };
 117      =1  
 118      =1  struct TimeType {
 119      =1    BYTE  x, y;
 120      =1    BYTE    width;
 121      =1    BYTE  BackColor;
 122      =1    BYTE  Format;       //_24H_TIME
 123      =1    BYTE  TimeColor;
 124      =1    BYTE    CursorColor;
 125      =1  };
 126      =1  
 127      =1  struct EnumType {
 128      =1    BYTE    Sz;//size
 129      =1    BYTE    ByLang;
 130      =1    BYTE  Str[15];      // doesn't matter the size !!!
 131      =1  };
 132      =1  
 133      =1  #define ICON_CH_SZ    2
 134      =1  //#define BAR_NUM_SZ    4
 135      =1  #define ICON_BUF_SZ   2
 136      =1  struct DefineMenu {
 137      =1    //WORD            Icon[ICON_BUF_SZ];  
 138      =1    BYTE        CODE  *Icon;
 139      =1    BYTE            **Desc;       
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 51  

 140      =1    BYTE            PreFnId, 
 141      =1                  PostFnId;
 142      =1  //  void    (*CalltoFunction)(void);            // Un/Dn/Sel Function
 143      =1    BYTE            IconColor;      //NIL: not to display icon
 144      =1    BYTE            DescColor;      //NIL: not to display desc. (IconColor==NIL && DescColor==NIL)->Last Item
 145      =1    struct DefineMenu CODE  *Child;
 146      =1    BYTE            Type;       // MENU, CHOICEMENU, BAR, NUMBER, TIME, ACTION, ENUM_STRING
 147      =1    BYTE            ActiveWithCursor;
 148      =1    BYTE            Id;
 149      =1    BYTE        CODE  *TypeData;  //MenuType, BarType, NumType,,,
 150      =1  } ;
 151      =1  
 152      =1  struct PictureInfo {
 153      =1  
 154      =1    BYTE Register_Addr;
 155      =1    BYTE EEPROM_Addr;
 156      =1    struct RegisterInfo   CODE  *Control_Range;
 157      =1  };
 158      =1  
 159      =1  
 160      =1  //-------------------------------------------------------------------
 161      =1  // OSD Window Information
 162      =1  //-------------------------------------------------------------------
 163      =1  // Window Number
 164      =1  #define OSDCURSORWINDOW     1
 165      =1  #define OSDMENUWINDOW       OSDCURSORWINDOW+1
 166      =1  #define OSDMENU_TOPWIN      OSDCURSORWINDOW+2
 167      =1  #define OSDMENU_TITLEWIN    OSDCURSORWINDOW+3
 168      =1  #define OSDBARWINDOW      OSDCURSORWINDOW
 169      =1  
 170      =1  #define TECHWELLOGO_OSDWIN    1 
 171      =1  #define TVINFO_OSDWIN       2 
 172      =1  #define FONTTEST_OSDWIN     2 
 173      =1  #define INPUTINFO_OSDWIN    3  
 174      =1  #define RATINGINFO_OSDWIN     1 
 175      =1  #define PCINFO_OSDWIN       3
 176      =1  #define VLOSSINFO_OSDWIN    4
 177      =1  
 178      =1  //-------------OSDMENU_TITLEWIN------------------------------------------------------
 179      =1  // Window Start address
 180      =1  #define OSDMENU_MAINADDR  0
 181      =1  //#define OSDMENU_SUBADDR     OSDMENU_MAINADDR+15    //25*9:196
 182      =1  //#define OSDMENU_SUBADDR     OSDMENU_MAINADDR+HS_WIDTH //0+40   //25*9:196
 183      =1  //#define OSDMENU_SUBADDR     OSDMENU_MAINADDR+10 //0+40   //25*9:196
 184      =1  #define OSDMENU_SUBADDR     OSDMENU_MAINADDR + 14 //0+40   //25*9:196  // Weylis 121008 清除 Icon 後面
 185      =1  
 186      =1  #define OSDMENU_BARADDR   200 //OSDMENU_SUBADDR+225    //256   //25x2:50
 187      =1  
 188      =1  #ifdef WQVGA
           =1 #define INPUTINFO1_ADDR   INPUTINFO_ADDR+17 //17x3:51
           =1 #else
 191      =1  #define INPUTINFO1_ADDR   INPUTINFO_ADDR+34 //17x2:51
 192      =1  #endif
 193      =1  
 194      =1  #define MUTEINFO_ADDR     INPUTINFO1_ADDR+51  // 4x1:4
 195      =1  #define TVCHINFO_ADDR     MUTEINFO_ADDR//324  // 3X1:3
 196      =1  #define LOGO_ADDR     0
 197      =1  #ifdef AWT_ML072S
 198      =1  #define RATINGINFO_ADDR   (34)  //addr:210(8x1:8)
 199      =1  #else
           =1 #define RATINGINFO_ADDR   0 //addr:210(8x1:8)
           =1 #endif
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 52  

 202      =1  #define PCMEASUREINFO_ADDR  OSDMENU_BARADDR //10x1
 203      =1  #ifdef QUAD
           =1 #define INPUTINFO_ADDR    160 // 9x1:9
           =1 #else
 206      =1  #define INPUTINFO_ADDR    0///24  // 9x1:9
 207      =1    #ifdef AWT_ML072S
 208      =1    #define INPUTINFO_MIRROR_ADDR 0//83 //william-v1.0-970804
 209      =1    #else
           =1   #define INPUTINFO_MIRROR_ADDR 73//83  //william-v1.0-970804
           =1   #endif
 212      =1  #define INPUTINFO_WIDTH   40  // 9x1:9    //william-v1.0-971111
 213      =1  #endif
 214      =1  #define OSD_VLOSS_ADDR  33 
 215      =1  
 216      =1  
 217      =1  //--------------------------------------------------------------------
 218      =1  // OSD Menu Position Range
 219      =1  #if ((defined WQVGA) && (defined ANALOG_7INCH)) || ((defined QVGA) && (defined SHARP_LQ050Q5DR01))
           =1   #define OSD_PHR_ PHR_/2
           =1 #else
 222      =1    #define OSD_PHR_ PHR_
 223      =1  #endif
 224      =1  
 225      =1  #define OSDHSTART_MAX (OSD_PHR_-(12+1)*25 - 56*2 -4)  //PHR - (pixelsize +Hspace)*MenuWidth - Hborder*2 - 
             -outlinewidth*2
 226      =1  #define OSDVSTART_MAX (PVR_-(18+11)*9 - 5*2 ) //  PVR - (Linesize+Vspace)*MENU_HEIGHT - Vborder*2  - outli
             -newidth*2
 227      =1  
 228      =1  #define OSDHSTART_MAX_A (OSD_PHR_-(12+2)*25 - 56*2 -8) //OSDHSTART_MAX  //PHR - (pixelsize +Hspace)*MenuWi
             -dth - Hborder*2 - outlinewidth*2
 229      =1  #define OSDVSTART_MAX_A OSDVSTART_MAX  //  PVR - (Linesize+Vspace)*MENU_HEIGHT - Vborder*2  - outlinewidth*
             -2
 230      =1  
 231      =1  #define OSDMENUX_MIN 1//0
 232      =1  #define OSDMENUX_MAX (OSDHSTART_MAX>>3)
 233      =1  #define OSDMENUX_50  (OSDHSTART_MAX>>4)
 234      =1  
 235      =1  #define OSDMENUY_MIN 2//0
 236      =1  #define OSDMENUY_MAX (OSDVSTART_MAX>>2)
 237      =1  #define OSDMENUY_50  (OSDVSTART_MAX>>3)
 238      =1  
 239      =1  #ifdef HS_NEWOSDMENU  //Weylis -@121008
           =1 // HS OSD Style
           =1 #define HS_WIDTH      40
           =1 #define HS_CHSPACE      14
           =1 //#define HS_CHSPACE      18
           =1 #define HS_ICONSPACE    1
           =1 #define HS_ICONSADDR    0
           =1 //#define HS_ICONSPACE    2
           =1 //#define HS_ICONSADDR    8
           =1 #endif
 249      =1  
 250      =1  //--------------------------------------------------------------------
 251      =1  // OSD Menu Width, Height 
 252      =1  #ifdef E_Wintek
           =1 #define ICON_HIGH       0x14
           =1 #else
 255      =1  #define ICON_HIGH       0x0a
 256      =1  #endif
 257      =1  
 258      =1  #define TOTAL_MAX_HIGHT     9
 259      =1  #define TOTAL_TOP_HEIGHT    5 // Include blank line!
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 53  

 260      =1  #define TOPMENU_WIDTH     2
 261      =1  #define TOPMENU_HEIGHT      4 
 262      =1  
 263      =1  #if (defined QVGA) && (defined SHARP_LQ050Q5DR01)
           =1 #define MENU_WIDTH        17 //23//25 
           =1 #define TITLE_MAX_DESC      17 //25 //
           =1 #define BAR_LENGTH        0
           =1 #else
 268      =1  //#define MENU_WIDTH        23  //23//25 
 269      =1  //#define MENU_WIDTH        26  //ryan@20170821
 270      =1  #ifdef AWT_ML072S
 271      =1  #define MENU_WIDTH        19  
 272      =1  #else
           =1 #define MENU_WIDTH        24  //ryan@20170821
           =1 #endif
 275      =1  
 276      =1  #define TITLE_MAX_DESC      23  //25  //
 277      =1  #define BAR_LENGTH        5  //8
 278      =1  #endif
 279      =1  
 280      =1  #ifdef TW8816
 281      =1  #define MENU_HEIGHT       8  //6 
 282      =1  #else
           =1 #define MENU_HEIGHT       7  //6 
           =1 #endif
 285      =1  //#define BARNUM_LENGTH       8  //11
 286      =1  
 287      =1  #ifdef AWT_ML072S
 288      =1  #define BARNUM_LENGTH       4//ryan@20170821
 289      =1  #else
           =1 #define BARNUM_LENGTH       9//ryan@20170821
           =1 #endif
 292      =1  
 293      =1  
 294      =1  #ifdef REFERENCE
           =1 #define BACK_COLOR        BG_COLOR_CYAN
           =1 #define DEFAULT_COLOR     BG_COLOR_CYAN   | CH_COLOR_WHITE
           =1 //#define ACTIVE_COLOR      BG_COLOR_YELLOW | CH_COLOR_WHITE
           =1 #define TITLE_BACK_COLOR    BG_COLOR_MAGENTA
           =1 #define TITLE_COLOR       TITLE_BACK_COLOR | CH_COLOR_YELLOW
           =1 #define COMMENT_COLOR     TITLE_BACK_COLOR | CH_COLOR_WHITE
           =1 #define CURSOR_COLOR      BG_COLOR_YELLOW | CH_COLOR_BLUE
           =1 #define OSD_INFO_COLOR      DEFAULT_COLOR
           =1 #define BAR_COLOR       DEFAULT_COLOR 
           =1 #define BAR_NUM_COLOR     DEFAULT_COLOR
           =1 #define NUM_COLOR       DEFAULT_COLOR
           =1 #define OSDMENU_OUTLINE_COLOR BG_COLOR_BLUE
           =1 #else
 308      =1  #define BACK_COLOR        BG_COLOR_CYAN
 309      =1  
 310      =1  #define DEFAULT_COLOR     BG_COLOR_CYAN | CH_COLOR_GREEN//ryan@20170828
 311      =1  
 312      =1  //#define ACTIVE_COLOR      BG_COLOR_YELLOW | CH_COLOR_WHITE
 313      =1  #define TITLE_BACK_COLOR    BG_COLOR_BLUE
 314      =1  #define TITLE_COLOR       TITLE_BACK_COLOR | CH_COLOR_YELLOW
 315      =1  #define COMMENT_COLOR     TITLE_BACK_COLOR | CH_COLOR_WHITE
 316      =1  #define CURSOR_COLOR      BG_COLOR_YELLOW  | CH_COLOR_BLUE
 317      =1  #define OSD_INFO_COLOR      BG_COLOR_CYAN    | CH_COLOR_GREEN
 318      =1  #define BAR_COLOR       DEFAULT_COLOR
 319      =1  #define BAR_NUM_COLOR     DEFAULT_COLOR
 320      =1  #define NUM_COLOR       DEFAULT_COLOR
 321      =1  #define VER_COLOR         BG_COLOR_CYAN   | CH_COLOR_YELLOW   /// V1.1 03/07/07 simonsung
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 54  

 322      =1  #define OSDMENU_OUTLINE_COLOR   BG_COLOR_CYAN
 323      =1  #define OSD_VLOSS_COLOR     BG_COLOR_CYAN    | CH_COLOR_WHITE
 324      =1  
 325      =1  #endif
 326      =1  
 327      =1  #ifdef HS_NEWOSDMENU
           =1 #define COMMENT1_COLOR      BG_COLOR_CYAN | CH_COLOR_RED
           =1 #endif
 330      =1  
 331      =1  #define Trigger_COLOR       BG_COLOR_CYAN|CH_COLOR_RED      //william-v1.1-970827
 332      =1  #define Mirror_COLOR      BG_COLOR_CYAN|CH_COLOR_YELLOW     //william-v1.1-970827
 333      =1  #ifndef AWT_ML072S
           =1 #define Jump_COLOR        BG_COLOR_CYAN|CH_COLOR_GREEN      //william-v1.1-970827
           =1 #else
 336      =1  #define Jump_COLOR        BG_COLOR_CYAN|CH_COLOR_BLUE     //william-v1.1-970827
 337      =1  #endif
 338      =1  #define Gauge_COLOR1      BG_COLOR_BLACK|CH_COLOR_GREEN 
 339      =1  #define Gauge_COLOR2      BG_COLOR_BLACK|CH_COLOR_YELLOW  
 340      =1  #define Gauge_COLOR3      BG_COLOR_BLACK|CH_COLOR_RED
 341      =1  
 342      =1  //DisplayedOSD
 343      =1  //    new   | MENU  TVINFO    CC    INPUTINFO   PCINFO    RATINGINFO
 344      =1  //  current   |
 345      =1  //============|=========================================================================
 346      =1  //  MENU    |     TVINFO    --    INPUTINFO   PCINFO    MENU + RATINGINFO 
 347      =1  //        |            
 348      =1  //------------|-------------------------------------------------------------------------
 349      =1  //  TVINFO    | MENU  TVINFO    --    INPUTINFO   PCINFO    TVINFO+RATING
 350      =1  //------------|-------------------------------------------------------------------------
 351      =1  //  CC      | MENU->  TVINFO->      INPUTINFO->   PCINFO    RATINGINFO
 352      =1  //        |  CC    CC          CC            
 353      =1  //------------|-------------------------------------------------------------------------
 354      =1  //  INPUTINFO | MENU  TVINFO    --    INPUTINFO   PCINFO    --
 355      =1  //------------|-------------------------------------------------------------------------
 356      =1  //  PCINFO    | MENU  x     x   INPUTINFO   PCINFO    x
 357      =1  //------------|-------------------------------------------------------------------------
 358      =1  //  RATINGINFO| MENU  TVINFO     RATING   INPUTINFO   x     RATINGINFO
 359      =1  //                  
 360      =1  
 361      =1  //=======================================================================================
 362      =1  // OSD Menu Constant define.
 363      =1  //=======================================================================================
 364      =1  //Time type
 365      =1  #define _24H_TIME   1
 366      =1  
 367      =1  //for previous, next, parent or child
 368      =1  #define YES       0xfe  
 369      =1  #define NO        0
 370      =1  
 371      =1  //#define OVERWRITE   0
 372      =1  //#define POPUP     1
 373      =1  
 374      =1  //CursorMove
 375      =1  #define VERT      0
 376      =1  #define HORI      1
 377      =1  
 378      =1  //Type of MenuItem
 379      =1  #define OSDMENU     1
 380      =1  #define CHOICEMENU    2
 381      =1  #define ACTION      3
 382      =1  #define BAR       4
 383      =1  #define NUMBER      5
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 55  

 384      =1  #define CHOICE      6
 385      =1  #define ENUM_STRING   7 //YESNO     7
 386      =1  #define CHOICE1     8
 387      =1  #define TIME      9
 388      =1  #define NUMBER_STRING 10
 389      =1  #define TEXT_STR              11   // V1.1 02/28/07 simonsung
 390      =1  #define INFORMATION              12
 391      =1  #define TEXT_STR_exit 13
 392      =1  
 393      =1  #ifdef HTRV
           =1 #define GRAPH 16
           =1 #endif
 396      =1  
 397      =1  //Bar type
 398      =1  #define LEFT_FILLED   1
 399      =1  #define RIGHT_FILLED  2
 400      =1  #define NO_FILLED   3
 401      =1  
 402      =1  //OSDmenu up and down key
 403      =1  #define UP          1
 404      =1  #define DN          2
 405      =1  #define RIGHT       3
 406      =1  #define LEFT          4
 407      =1  
 408      =1  // Action Id
 409      =1  #define DISP_INFO     0x16
 410      =1  
 411      =1  #define INPUTSELECTION    0x2f
 412      =1  
 413      =1  #define CHANGE_TO_COMPOSITE     (0x20|CH_TW2835)      // Low nibble need to start from 1 
 414      =1  #define CHANGE_TO_SVIDEO      (0x20|SVIDEO)       // so that it match with COMPOSITE...
 415      =1  #define CHANGE_TO_COMPONENT     (0x20|COMPONENT)    
 416      =1  #define CHANGE_TO_DTV       (0x20|DTV)    
 417      =1  #define CHANGE_TO_TV        (0x20|TV)         
 418      =1  #define CHANGE_TO_PC        (0x20|PC)         
 419      =1  #define CHANGE_TO_DIGITALVGA    (0x20|DIGITALVGA)     
 420      =1  #define CHANGE_TO_SCART       (0x20|SCART)        
 421      =1  
 422      =1  #define OSDPOSITIONMODE     0x10
 423      =1  #define OSD_VPOS      0x11
 424      =1  #define OSD_HPOS      0x12
 425      =1  #define OSD_HALFTONE    0x13
 426      =1  #define OSD_DURATION    0x14
 427      =1  #define RESET_OSDVALUE    0x15
 428      =1  #define OSDLANG       0x16
 429      =1  
 430      =1  #define PANEL_CONTRAST    0x58
 431      =1  #define PANEL_BRIGHTNESS  0x59
 432      =1  #define PANEL_HUE     0x5a
 433      =1  #define PANEL_SHARPNESS   0x5b
 434      =1  #define PANEL_SATURATION  0x5c
 435      =1  
 436      =1  #define PC_VPOS       0x43
 437      =1  #define PC_HPOS       0x44
 438      =1  #define PC_HSIZE      0x4d
 439      =1  
 440      =1  #define PC_CLOCK      0x45
 441      =1  #define PC_PHASE      0x46
 442      =1  
 443      =1  #define AUTOADJUST      0x47
 444      =1  #define AUTOADJUST2     0x48
 445      =1  //#define SAVE_AUTOADJUST   0x49
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 56  

 446      =1  #define RESET_AUTOADJUST  0x4a
 447      =1  
 448      =1  #define PCCOLORADJUST   0x4b
 449      =1  #define SAVE_COLORADJUST  0x4c
 450      =1  //#define RESET_COLORADJUST 0x4d
 451      =1  
 452      =1  #define RESET_PCVALUE   0x4e
 453      =1  #define CameraOSD     0x4f
 454      =1  
 455      =1  #define PC_COLOR_MODE   0x3f
 456      =1  #define PC_COLOR_TEMP   0x30
 457      =1  #define PC_COLOR_MODE1    0x31
 458      =1  #define PC_COLOR_MODE2    0x32
 459      =1  #define PC_COLOR_MODE3    0x33
 460      =1  #define PC_COLOR_USER   0x34
 461      =1  #define PC_COLOR_R      0x35
 462      =1  #define PC_COLOR_G      0x36
 463      =1  #define PC_COLOR_B      0x37
 464      =1  
 465      =1  #define VIDEO_MODE      0x90
 466      =1  #define VIDEO_MODE1     0x91
 467      =1  #define VIDEO_MODE2     0x92
 468      =1  #define VIDEO_MODE3     0x93
 469      =1  #define VIDEO_USER      0x94
 470      =1  #define VIDEO_CONTRAST    0x95
 471      =1  #define VIDEO_BRIGHTNESS  0x96
 472      =1  #define VIDEO_SATURATION  0x97
 473      =1  #define VIDEO_HUE     0x99
 474      =1  #define VIDEO_SHARPNESS   0x9a
 475      =1  #define VIDEO_BACKLIGHT   0x9c    // add new value 
 476      =1  #define RESET_VIDEOVALUE  0x9b
 477      =1  #define RESET_DVRVALUE    0x9e
 478      =1  #define RESET_MonitorVALUE    0x70
 479      =1  
 480      =1  
 481      =1  #ifdef AWT_ADD_TRIGGER_DELAY_FUN  //Pinchi 20150209 add
 482      =1  #define TRIGGER_CamADelay 0xb2
 483      =1  #define TRIGGER_CamBDelay 0xb3
 484      =1  #define TRIGGER_CamCDelay 0xb4
 485      =1  #define TRIGGER_CamRDelay 0xb5
 486      =1  #endif
 487      =1  
 488      =1  #ifdef HTRV
           =1 #define RESET_GAUGESETUP  0x9d   
           =1 #define Gauge_VStart      0x7a   
           =1 #endif
 492      =1  
 493      =1  #ifdef E_Wintek
           =1 #define RESET_USERVALUE 0x9d
           =1 #endif
 496      =1  #define VIDEOPICTURE    0x9f
 497      =1  
 498      =1  #define INPUTSTD      0x6f
 499      =1  #define CHANGE_TO_AUTO    0x60
 500      =1  #define CHANGE_TO_NTSC    (0x60 | NTSC)
 501      =1  #define CHANGE_TO_PAL   (0x60 | PAL)
 502      =1  #define CHANGE_TO_SECAM   (0x60 | SECAM)
 503      =1  #define CHANGE_TO_NTSC4   (0x60 | NTSC4)
 504      =1  #define CHANGE_TO_PALM    (0x60 | PALM)
 505      =1  #define CHANGE_TO_PALN    (0x60 | PALN)
 506      =1  #define CHANGE_TO_PAL60   (0x60 | PAL60)
 507      =1  
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 57  

 508      =1  #if 0
           =1 #define CLOSED_CAPTION    0x7f
           =1 #define CLOSEDCAP_OFF   0x70
           =1 #define CLOSEDCAP_CC1   0x71
           =1 #define CLOSEDCAP_CC2   0x72
           =1 #define CLOSEDCAP_CC3   0x73
           =1 #define CLOSEDCAP_CC4   0x74
           =1 #define CLOSEDCAP_T1    0x75
           =1 #define CLOSEDCAP_T2    0x76
           =1 #define CLOSEDCAP_T3    0x77
           =1 #define CLOSEDCAP_T4    0x78
           =1 
           =1 #define TV_GUIDE      0x8f
           =1 #define NO_VCHIP_LOCK   0
           =1 #define VCHIP_TV_Y      1
           =1 #define VCHIP_TV_Y7     2
           =1 #define VCHIP_TV_G      3
           =1 #define VCHIP_TV_PG     4
           =1 #define VCHIP_TV_14     5
           =1 #define VCHIP_TV_MA     6
           =1 #define PASSWORD      0x87
           =1 #define NEW_PASSWORD    0x88
           =1 #define CHK_PASSWORD    0x89
           =1 #define RET_CHK_PASSWORD  0x8a
           =1 #endif
 533      =1  
 534      =1  #define MPAA_RATING     0x9f
 535      =1  #define NO_MPAA_RATING    0
 536      =1  #define MPAA_G        1
 537      =1  #define MPAA_PG       2
 538      =1  #define MPAA_PG_13      3
 539      =1  #define MPAA_R        4
 540      =1  #define MPAA_NC_17      5
 541      =1  #define MPAA_X        6
 542      =1  
 543      =1  #define TVINSTALL     0xa0
 544      =1  #define SCAN_CHANNEL    0xa1
 545      =1  #define AIR_CABLE_TV    0xa3
 546      =1  #define STORE_CLEAR_TVCHN 0xa4
 547      =1  #define MTS         0xa5
 548      =1  #define EDIT_CHANNEL    0xa6
 549      =1  #define MTS_STEREO      0//0x10
 550      =1  #define MTS_MONO      1//0x11
 551      =1  
 552      =1  #define AUDIO_VOLUME    0xb7
 553      =1  
 554      =1  #if 0 //andy AWT8.4 20090811
           =1 
           =1 #define AUDIO_BALANCE   0xb9
           =1 #define AUDIO_BASS      0xba
           =1 #define AUDIO_TREBLE    0xbb
           =1 
           =1 #define AUDIO_LOUDNESS    0xbc
           =1 #define AUDIO_EFFECT    0xbd
           =1 #define AUDIO_MUTE      0xbe
           =1 #endif
 564      =1  
 565      =1  #define DayChoice           0xb8
 566      =1  #define CAMOSDONOFF         0xb9
 567      =1  #define GAUGEChoice         0xba
 568      =1  #define OsdLockChoice       0xbb
 569      =1  #define PRIORITYChoice      0xcA
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 58  

 570      =1  #define DVRDisplay    0xcc
 571      =1  
 572      =1  #define CAMAONOFF       0xc1
 573      =1  #define CAMBONOFF         0xc2
 574      =1  #define CAMCONOFF       0xc3
 575      =1  #define CAMRONOFF     0xc4
 576      =1  
 577      =1  #define IMAGEChoice         0xc5 
 578      =1  #define REARChoice          0xc6
 579      =1  #define JUMPChoice          0xc7
 580      =1  #define CAMOUTChoice        0xc8 
 581      =1  #define STIME_STEP        0xc9
 582      =1  #define TriggerVGA        0xcb
 583      =1  #define IMAGE_A_Choice         0xcd
 584      =1  #define IMAGE_B_Choice         0xce
 585      =1  #define IMAGE_C_Choice         0xcf
 586      =1  
 587      =1  #define DELAYCAMA       0xd0
 588      =1  #define DELAYCAMB            0xd1
 589      =1  #define DELAYCAMC       0xd2
 590      =1  #define DELAYCAMR         0xd3
 591      =1  #ifdef USE_CAMD
           =1 #define DELAYCAMD       0xd4
           =1 #endif
 594      =1  #define ReverseMode   0xd6
 595      =1  #ifdef AWT_ML072S //william @20130902 v1.0.1.2
 596      =1  #define JUMP_AV     0xd7
 597      =1  #endif
 598      =1  #define MANUAL_TUNE_CHANNEL 0xab
 599      =1  #define FINE_TUNE_CHANNEL 0xac
 600      =1  #define STORE_PALCHANNEL  0xad
 601      =1  
 602      =1  //#define CLEAR_TVCHN     0xb0
 603      =1  //#define STORE_TVCHN     0xb1
 604      =1  
 605      =1  #define WIDESCREEN      0xc0
 606      =1  #define WIDESCREEN_NORMAL 0 
 607      =1  #define WIDESCREEN_WIDE   1 
 608      =1  #define WIDESCREEN_PANO   2
 609      =1  #define WIDESCREEN_FULL   3 
 610      =1  #define WIDESCREEN_ZOOM   4 
 611      =1  
 612      =1  //#define SYSTEM_CLOCK    0xd1
 613      =1  //#define SYSTEM_CLOCK_H    0xd2
 614      =1  //#define WAKEUP_TIME     0xd3
 615      =1  //#define WAKEUP_TIME_H   0xd4
 616      =1  //#define WAKEUP_PR     0xd5
 617      =1  //#define OFF_TIME      0xd6
 618      =1  //#define OFF_TIME_H      0xd7
 619      =1  //#define SLEEP_TIMER     0xd8
 620      =1  
 621      =1  #define Resolution      0xe0
 622      =1  #define FPS         0xe1
 623      =1  #define Quality       0xe2
 624      =1  #define RecordMode      0xe3
 625      =1  #define RecordLength      0xe4
 626      =1  #define PreAlarmLength    0xe5
 627      =1  #define PostAlarmLength   0xe6
 628      =1  #define Apply       0xe7
 629      =1  #if 0 //william-awt ml073q-20120313
           =1 #define ManualRecordStart 0xe8
           =1 #define ManualRecordStop  0xe9
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 59  

           =1 #define Snapshot        0xea
           =1 #endif
 634      =1  #define FormatSD      0xeb
 635      =1  #define AudioRecord     0xec
 636      =1  #define FirmwareUpdate    0xed
 637      =1  #define ChangePassword    0xee
 638      =1  #define OverWrite     0xef
 639      =1  
 640      =1  #define UpdateConfig      0xd0
 641      =1  #define SDCardDetect      0xd5
 642      =1  
 643      =1  #define Year        0x20
 644      =1  #define Month       0x21
 645      =1  #define Day         0x22
 646      =1  #define Hour        0x23
 647      =1  #define Minute        0x24
 648      =1  
 649      =1  #define DaylightSaving        0x25
 650      =1  #define TimeBeginesMonth      0x26
 651      =1  #define TimeBeginesWeek       0x27
 652      =1  #define TimeBeginesTime       0x28
 653      =1  #define StandardTimeBeginesMonth  0x29
 654      =1  #define StandardTimeBeginesWeek   0x2a
 655      =1  #define StandardTimeBeginesTime   0x2b
 656      =1  #define TimeZone          0x2c
 657      =1  #define FirstNumber         0x2d
 658      =1  #define SecondNumber        0x2e
 659      =1  #define ThridNumber         0x2f
 660      =1  #define FourthNumber        0x38
 661      =1  #define WIFIIPNumber        0x39
 662      =1  #define WIFIMACNumber       0x3a
 663      =1  #define GETWAYNumber        0x3b
 664      =1  
 665      =1  #define OSDLANGI      0xd9
 666      =1  #define OSDLANGII     OSDLANGI+1
 667      =1  #define OSDLANGIII      OSDLANGI+2
 668      =1  #define OSDLANGIV     OSDLANGI+3
 669      =1  
 670      =1  #define TOHIGHMENU      0xf1
 671      =1  #define MOVECURSOR2FIRST  0xf2
 672      =1  #define RESET_ALL     0xf3
 673      =1  #define EXITMENU      0xf4
 674      =1  #define DVRParamApply   0xf5
 675      =1  #define DATETIMEApply   0xf6
 676      =1  
 677      =1  #define CHOICE1_VAL     0xfc
 678      =1  #define CHOICE_VAL      0xfd
 679      =1  #define BAR_VAL       0xfe
 680      =1  #define NUM_VAL       0xff
 681      =1  
 682      =1  #define CAMNumberChoice     0xa3 
 683      =1  #define PelcoChoice         0xa4
 684      =1  #define Baud_rateChoice   0xa5
 685      =1  
 686      =1  
 687      =1  #endif  // __OSDMENU__
 688      =1  
  25          #include "pc_eep.h"
   1      =1  #ifndef __PC_EEP__
   2      =1  #define __PC_EEP__
   3      =1  
   4      =1  
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 60  

   5      =1  // -----------------------------------------------------------------------------
   6      =1  #define PC_COLOR_DATA 0x80  // StartAddress of EEPROM for PC Color Temperature
   7      =1  #define PC_USERCOLOR  0x8A
   8      =1  #define SetPCColorTempModeEE( ctid )      WriteEEP( PC_COLOR_DATA, ctid )
   9      =1  #define GetPCColorTempModeEE()          ReadEEP( PC_COLOR_DATA )
  10      =1  
  11      =1  #define GetPCUserColorTempEE( ucolorr)      ReadEEP( PC_USERCOLOR+ucolorr )
  12      =1  #define SavePCUserColorTempEE( ucolorw, uval) WriteEEP( PC_USERCOLOR+ucolorw, uval )
  13      =1  #define GetPCColorEE(index)           ReadEEP(index)
  14      =1  
  15      =1  // -----------------------------------------------------------------------------
  16      =1  #define EE_ADC_GO   0x90  // ADC Gain Offset for PC
  17      =1  #define EE_ADC_GO_DTV 0x98  // ADC Gain Offset for DTV
  18      =1  
  19      =1  #define EE_PCDATA   0xC0  // StartAddress of EEPROM for PCDATA
  20      =1  #define LEN_PCDATA    5   // Length of PCDATA
  21      =1  
  22      =1  WORD GetHPNfromEE(BYTE mode);
  23      =1  
  24      =1  BYTE CheckPcDataEEValid(BYTE, WORD);
  25      =1  
  26      =1  WORD GetVactiveStartEE(BYTE mode);
  27      =1  WORD GetHactiveStartEE(BYTE mode);
  28      =1  
  29      =1  void GetPCDataEE(BYTE mode);
  30      =1  void SavePCDataEE(BYTE mode);
  31      =1  void SaveDefaultPCDataEE(void);
  32      =1  void SaveDefaultPCDataAllEE(void);
  33      =1  
  34      =1  void SaveHactiveEE(BYTE mode);
  35      =1  void SaveVactiveEE(BYTE mode);
  36      =1  void SaveVBackPorchEE(BYTE mode);
  37      =1  void SaveCoarseEE(BYTE mode);
  38      =1  void SavePhaseEE(BYTE mode);
  39      =1  /*
  40      =1  WORD GetHactiveStartEE(BYTE mode);
  41      =1  WORD GetVactiveStartEE(BYTE mode);
  42      =1  */
  43      =1  void DumpPCData(void);
  44      =1  
  45      =1  void SaveActiveVEE(WORD);
  46      =1  void SaveBackPorchEE(BYTE);
  47      =1  void SaveActiveHEE(WORD);
  48      =1  
  49      =1  void SaveADCGainOffsetEE(BYTE mod);
  50      =1  void GetADCGainOffsetEE(void);
  51      =1  
  52      =1  void SaveADCGainOffsetForDTVEE(BYTE mod);
  53      =1  void GetADCGainOffsetForDTVEE(void);
  54      =1  
  55      =1  #endif  // __PC_EEP__
  26          #include "KeyRemo.h"
   1      =1  //
   2      =1  // KeyRemo.h
   3      =1  // Default function for Key Input and Remocon Input
   4      =1  //
   5      =1  //=============================================================================
   6      =1  //                        Operation Key Mapping
   7      =1  //=============================================================================
   8      =1  
   9      =1  
  10      =1  
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 61  

  11      =1  
  12      =1  #define ResetKey()    { P2 = 0xff;}
  13      =1  //#define ReadKey()   (~P1 & 0xfc);
  14      =1  
  15      =1  #ifdef QUAD
           =1 #define EVENTKEY    0x02
           =1 #endif
  18      =1  #define POWERKEY    0x04 //andy AWT 980907
  19      =1  #define MENUKEY     0x08
  20      =1  
  21      =1  #ifdef AWT_NEW_SLIM_MODEL  //Pinchi 20150203 add for AWT new slim model
           =1 #define UPKEY       0x10
           =1 #define DOWNKEY     0x20
           =1 #define SELECTKEY     0x40
           =1 #define INPUTSOURCEKEY  0x80
           =1 #define VersionKEY    0xC0
           =1 #define UnLockKEY     0xC0
           =1 #else
  29      =1  #define INPUTSOURCEKEY  0x10
  30      =1  #define UPKEY       0x20
  31      =1  #define DOWNKEY       0x40
  32      =1  #define SELECTKEY     0x80
  33      =1    #if 1//Pinchi 20160929 add
  34      =1    #define Tune2835ClkKEY 0x90
  35      =1    #define Enter2835TuneKEY 0x0C
  36      =1    #else
           =1   #define VersionKEY      0x90
           =1   #endif
  39      =1  #endif
  40      =1  
  41      =1  #define REMO_CUSTOM   0
  42      =1  
  43      =1  #define REMO_NUM0   0
  44      =1  #define REMO_NUM1   1
  45      =1  #define REMO_NUM2   2
  46      =1  #define REMO_NUM3   3
  47      =1  #define REMO_NUM4   4
  48      =1  #define REMO_NUM5   5
  49      =1  #define REMO_NUM6   6
  50      =1  #define REMO_NUM7   7
  51      =1  #define REMO_NUM8   8
  52      =1  #define REMO_NUM9   9
  53      =1  
  54      =1  #define REMO_STANDBY  12
  55      =1  #define REMO_CHNUP    32
  56      =1  #define REMO_CHNDN    33
  57      =1  #define REMO_VOLUP    16
  58      =1  #define REMO_VOLDN    17
  59      =1  #define REMO_SELECT   21
  60      =1  #define REMO_MENU   63
  61      =1  #define REMO_MUTE   13
  62      =1  #define REMO_INPUT    56
  63      =1  
  64      =1  #define REMO_AUTO   10
  65      =1  #define REMO_INFO   58
  66      =1  #define REMO_AUDIO    38
  67      =1  #define REMO_ASPECT   62
  68      =1  #define REMO_CC     15
  69      =1  #define REMO_EXIT   0x16
  70      =1  
  71      =1  #define REMO_TTXRED     0x37
  72      =1  #define REMO_TTXGREEN   0x36
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 62  

  73      =1  #define REMO_TTXYELLOW    0x32
  74      =1  #define REMO_TTXCYAN    0x34
  75      =1  
  76      =1  
  77      =1  
  78      =1  //=============================================================================
  79      =1  //                                 RC5 type
  80      =1  //=============================================================================
  81      =1  #ifdef REMO_RC5
           =1 
           =1 #ifdef TECHWELL_REMOCON
           =1 #define REMO_CUSTOM   0
           =1 
           =1 #define REMO_NUM0   0
           =1 #define REMO_NUM1   1
           =1 #define REMO_NUM2   2
           =1 #define REMO_NUM3   3
           =1 #define REMO_NUM4   4
           =1 #define REMO_NUM5   5
           =1 #define REMO_NUM6   6
           =1 #define REMO_NUM7   7
           =1 #define REMO_NUM8   8
           =1 #define REMO_NUM9   9
           =1 
           =1 #define REMO_STANDBY  12
           =1 #define REMO_CHNUP    32
           =1 #define REMO_CHNDN    33
           =1 #define REMO_VOLUP    16
           =1 #define REMO_VOLDN    17
           =1 #define REMO_SELECT   21
           =1 #define REMO_MENU   63
           =1 //#define REMO_TV     63
           =1 //#define REMO_VCR    60
           =1 //#define REMO_SVIDEO   56
           =1 #define REMO_MUTE   13
           =1 #define REMO_INPUT    56
           =1 
           =1 #define REMO_AUTO   10
           =1 #define REMO_INFO   58
           =1 #define REMO_AUDIO    38
           =1 #define REMO_ASPECT   62
           =1 #define REMO_CC     15
           =1 #define REMO_EXIT   0x16
           =1 
           =1 #define REMO_TTXRED     0x37
           =1 #define REMO_TTXGREEN   0x36
           =1 #define REMO_TTXYELLOW    0x32
           =1 #define REMO_TTXCYAN    0x34
           =1 
           =1 #ifdef SUPPORT_DEBUG
           =1 #define REMO_DEBUG    0x2b
           =1 #define REMO_READ   0x29
           =1 #define REMO_WRITE    0x2a
           =1 #define REMO_RESERVED 0x30
           =1 #endif
           =1 
           =1 #else 
           =1 #define REMO_CUSTOM   0
           =1 
           =1 #define REMO_NUM0   0
           =1 #define REMO_NUM1   1
           =1 #define REMO_NUM2   2
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 63  

           =1 #define REMO_NUM3   3
           =1 #define REMO_NUM4   4
           =1 #define REMO_NUM5   5
           =1 #define REMO_NUM6   6
           =1 #define REMO_NUM7   7
           =1 #define REMO_NUM8   8
           =1 #define REMO_NUM9   9
           =1 
           =1 #define REMO_STANDBY  12
           =1 #define REMO_CHNUP    32
           =1 #define REMO_CHNDN    33
           =1 #define REMO_VOLUP    16
           =1 #define REMO_VOLDN    17
           =1 #define REMO_SELECT   18
           =1 #define REMO_MENU   48
           =1 #define REMO_TV     63
           =1 #define REMO_VCR    60
           =1 #define REMO_SVIDEO   56
           =1 #define REMO_MUTE   13
           =1 #define REMO_INPUT    0xff
           =1 
           =1 #define REMO_INFO   0x0a //??
           =1 #endif
           =1 
           =1 //=============================================================================
           =1 //                                 NEC type
           =1 //=============================================================================
           =1 #elif defined REMO_NEC
           =1 /*
           =1 // Techwell Origin
           =1 #define REMO_CUSTOM1  0x20
           =1 #define REMO_CUSTOM2  0xdf
           =1 
           =1 
           =1 #define REMO_NUM0   0x08
           =1 #define REMO_NUM1   0x88
           =1 #define REMO_NUM2   0x48
           =1 #define REMO_NUM3   0xc8
           =1 #define REMO_NUM4   0x28
           =1 #define REMO_NUM5   0xa8
           =1 #define REMO_NUM6   0x68
           =1 #define REMO_NUM7   0xe8
           =1 #define REMO_NUM8   0x18
           =1 #define REMO_NUM9   0x98
           =1 
           =1 #define REMO_STANDBY  0x10
           =1 #define REMO_CHNUP    0x00
           =1 #define REMO_CHNDN    0x80
           =1 #define REMO_VOLUP    0x40
           =1 #define REMO_VOLDN    0xc0
           =1 #define REMO_SELECT   0x70
           =1 #define REMO_MENU   0x9c
           =1 #define REMO_MUTE   0x90
           =1 #define REMO_INPUT    0xd0
           =1 */
           =1 
           =1 // Techwell New Remocon after 4/7/2005
           =1 #ifdef PHILIPS_REMOCON
           =1 #define REMO_CUSTOM1  0x02
           =1 #define REMO_CUSTOM2  0xfd
           =1 
           =1 #define REMO_NUM0   0x00
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 64  

           =1 #define REMO_NUM1   0x80
           =1 #define REMO_NUM2   0x40
           =1 #define REMO_NUM3   0xc0
           =1 #define REMO_NUM4   0x20
           =1 #define REMO_NUM5   0xa0
           =1 #define REMO_NUM6   0x60
           =1 #define REMO_NUM7   0xe0
           =1 #define REMO_NUM8   0x10
           =1 #define REMO_NUM9   0x90
           =1 
           =1 #define REMO_STANDBY  0x48
           =1 #define REMO_CHNUP    0xd8
           =1 #define REMO_CHNDN    0xf8
           =1 #define REMO_VOLUP    0x58
           =1 #define REMO_VOLDN    0x78
           =1 #define REMO_SELECT   0xe8
           =1 #define REMO_MENU   0x01
           =1 #define REMO_MUTE   0x08
           =1 #define REMO_INPUT    0xf0
           =1 
           =1 #define REMO_INFO   0x38
           =1 
           =1 
           =1 
           =1 #define REMO_TTXRED     0x4E
           =1 #define REMO_TTXGREEN   0x8E
           =1 #define REMO_TTXYELLOW    0xC6
           =1 #define REMO_TTXCYAN    0x86
           =1 
           =1 #else
           =1 // RYU For Test
           =1 #define REMO_CUSTOM1    0x04
           =1 #define REMO_CUSTOM2    0xfb
           =1 
           =1 #define REMO_NUM0   0xf8
           =1 #define REMO_NUM1   0x48
           =1 #define REMO_NUM2   0xc8
           =1 #define REMO_NUM3   0x28
           =1 #define REMO_NUM4   0xa8
           =1 #define REMO_NUM5   0x18
           =1 #define REMO_NUM6   0x98
           =1 #define REMO_NUM7   0x58
           =1 #define REMO_NUM8   0xd8
           =1 #define REMO_NUM9   0x78
           =1 
           =1 #define REMO_STANDBY  0x00
           =1 #define REMO_CHNUP    0x40  //
           =1 #define REMO_CHNDN    0x70  //
           =1 #define REMO_VOLUP    0x90  //
           =1 #define REMO_VOLDN    0xe0  //
           =1 #define REMO_SELECT   0x11//??
           =1 #define REMO_MENU   0x10
           =1 
           =1 #define REMO_MUTE   0x60
           =1 #define REMO_INPUT    0xc0
           =1 #define REMO_AUTO   0x30
           =1 #define REMO_AUTOSCAN 0x80
           =1 #define REMO_TV     0x20
           =1 #define REMO_EXIT   0xa0
           =1 #define REMO_INFO   0x08
           =1 #define REMO_ASPECT   0x62
           =1 
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 65  

           =1 #define REMO_TTXRED   0xb8
           =1 #define REMO_TTXGREEN 0x02
           =1 #define REMO_TTXYELLOW  0x82
           =1 #define REMO_TTXCYAN  0x42
           =1 
           =1 #ifdef SUPPORT_DEBUG
           =1 #define REMO_DEBUG    0xb8
           =1 #define REMO_READ   0x02
           =1 #define REMO_WRITE    0x82
           =1 #endif
           =1 
           =1 #endif //PHILIPS_REMOCON
           =1 
           =1 #endif // REMO_NEC
 273      =1  
 274      =1  
 275      =1  
 276      =1  BYTE ActionRemo(BYTE, BYTE);
 277      =1  BYTE CheckKeyIn(void);
 278      =1  BYTE GetKey(BYTE repeat);
 279      =1  BYTE IsRemoDataReady(BYTE *, BYTE *);
 280      =1  
 281      =1  
  27          #include "CPU.h"
   1      =1  #ifndef __CPU__
   2      =1  #define __CPU__
   3      =1  
   4      =1  /*
   5      =1  #ifdef INTERNAL_MCU
   6      =1  #define I2C_SCL   P2_0
   7      =1  #else
   8      =1  #define I2C_SCL   P1_0
   9      =1  #endif
  10      =1  #define I2C_SDA   P1_1
  11      =1  */
  12      =1  #define I2C_SCL     P1_0
  13      =1  #define I2C_SDA     P1_1
  14      =1  #ifdef SUPPORT_SDCARD  //ryan@20170824 
           =1 #define BUF_MAX     8
           =1 #define DVR_BUF_MAX   30
           =1 #else
  18      =1  #define BUF_MAX     20
  19      =1  #define DVR_BUF_MAX   8
  20      =1  #endif
  21      =1  
  22      =1  #ifdef REMO_RC5
           =1 #define EnableRemoconInt()  { RemoDataReady = 0;  EX0 = 1;}
           =1 #endif
  25      =1  void  InitCPU(void);
  26      =1  void  InitVars(void);
  27      =1  void  InitTechwell(void);
  28      =1  void  main_init (void);
  29      =1  void  PowerDown( void );
  30      =1  #if 0
           =1 BYTE  OKSleepTime(void);
           =1 #endif
  33      =1  #ifdef REMO_RC5
           =1 void  InitForRemo(void);
           =1 #endif
  36      =1  void  PowerLED(BYTE flag);
  37      =1  void    Wait_ms(WORD Tms);
  38      =1  BYTE    TW2835Command(char,char,char,char,char);
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 66  

  39      =1  
  40      =1  #ifdef Monitor_debug
  41      =1  BYTE RS_rx(void);
  42      =1  #endif
  43      =1  
  44      =1  #endif
  45      =1  
  28          #include "rgbmix.h"     
   1      =1  #ifndef __RGBMIX__
   2      =1  #define __RGBMIX__
   3      =1  
   4      =1  #include "RegMap.h"
   1      =2  #ifndef __REGMAP__
   2      =2  #define __REGMAP__
   3      =2  
   4      =2  //-----------------------------------------------------------------------------
   5      =2  //        Individual Decoder Registers 
   6      =2  //-----------------------------------------------------------------------------
   7      =2  
   8      =2  #define MCU_STOP_MODE 0xc8  // bit 7 is mcu stop, bit5 is MCU debug
   9      =2  
  10      =2  #define LAD0      0xc9  // Low speed AD channel 0
  11      =2  #define LAD1      0xca  // Low speed AD channel 1
  12      =2  
  13      =2  #define REG_PAGE    0xff
  14      =2  #define STATUS0     0xd0
  15      =2  #define STATUS1     0xd1
  16      =2  #define IRQ_EN1     0xd2
  17      =2  #define IRQ_EN0     0xd3
  18      =2  
  19      =2  //-----------------------------------------------------------------------------
  20      =2  //        Individual Decoder Registers 
  21      =2  //-----------------------------------------------------------------------------
  22      =2  
  23      =2  #define DECODERADDRESS  TW88I2CAddress
  24      =2  
  25      =2  #define CVFMT     0x1e  // Component Video Format
  26      =2  #define FBSHIFT     0x38  // RGB Anti-Alias Filter/FB Shift Level
  27      =2  #define SHUE      0x3e  // RGB Hue
  28      =2  #define SCONTRAST   0x3b  // RGB Contrast
  29      =2  #define SBRIGHT     0x3a  // RGB Brightness
  30      =2  #define SCbGAIN     0x3c  // RGB Cb Gain
  31      =2  #define SCrGAIN     0x3d  // RGB Cb Gain
  32      =2  #define RGBCONTROL    0x36  // RGB Powerdown..
  33      =2  #define RGBMISC     0x39
  34      =2  #define FBCONTRL    0x3F
  35      =2  
  36      =2  //#define OSD_ADJ     0xce
  37      =2  #define PNLSHARPNESS  0x78  // Sharpness Control
  38      =2  #define OSDWINSTATUS  0x95
  39      =2  //-----------------------------------------------------------------------------
  40      =2  //        Common Registers
  41      =2  //-----------------------------------------------------------------------------
  42      =2  #define CSTATUS     0x01  // Chip Status
  43      =2  #define INFORM      0x02  // Input Format
  44      =2  #define ACNTL     0x06  // Analog Control
  45      =2  #define CROP_HI     0x07  // Cropping High
  46      =2  #define VDELAY_LO   0x08  // Vertical Delay Low
  47      =2  #define VACTIVE_LO    0x09  // Vertical Active Low
  48      =2  #define HDELAY_LO   0x0a  // Horizontal Delay Low
  49      =2  #define HACTIVE_LO    0x0b  // Horizontal Active Low
  50      =2  #define CNTRL1      0x0c  // Control 1
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 67  

  51      =2  
  52      =2  #define BRIGHT      0x10  // Brightness Control
  53      =2  #define CONTRAST    0x11  // Contrast Control
  54      =2  #define SHARPNESS   0x12  // Sharpness Control
  55      =2  #define SAT_U     0x13  // Chroma(U) Gain
  56      =2  #define SAT_V     0x14  // Chroma(V) Gain
  57      =2  #define HUE       0x15  // Hue Conrol
  58      =2  #define V_PEAKING   0x17  // Vertical Peaking
  59      =2  
  60      =2  #define CC_STATUS   0x1a  // CC/EDS Status
  61      =2  #define CC_DATA     0x1b  // CC/EDS Data
  62      =2  #define SDT       0x1c  // Standard Selection
  63      =2  #define SDTR      0x1d  // Standard Recognition
  64      =2  
  65      =2  #define V_CONTROL2    0x29  // Vertical Control II
  66      =2  #define HFILTER     0x2c
  67      =2  #define MISC1     0x2d  // Miscellaneous Control 1
  68      =2  #define MISC2     0x2e  // Miscellaneous Control 2
  69      =2  #define MISC3     0x2f  // Miscellaneous Control 2
  70      =2  
  71      =2  #define VBI_CNTL2   0x34  // VBI control 2 - WSSEN
  72      =2  #define CC_ODDLINE    0x35  // CC Odd Line
  73      =2  
  74      =2  #define LADC0     0xc9  //LADC Channel 0 Input Value 
  75      =2  #define LADC1     0xca  //LADC Channel 1 Input Value 
  76      =2  
  77      =2  #define WriteDecoder(index, val)    WriteTW88( index, val )
  78      =2  #define ReadDecoder(index)        ReadTW88( index )
  79      =2  
  80      =2  #endif // __REGMAP__
  81      =2  
   5      =1  
   6      =1  //#define SetDigitalVideoContrastReg(vcval)       WriteTW88(0x3b, vcval)
   7      =1  //#define SetDigitalVideoBrightnessReg(vbval)       WriteTW88(0x3c, vbval )
   8      =1  //#define SetDigitalVideoHueReg(vhval)          WriteTW88(0x32, vhval )
   9      =1  //#define SetDigitalVideoSaturationReg(gain, vhval)   WriteTW88(0x3d+gain, (ReadTW88(0x3d+gain)&0x80) + vhv
             -al )
  10      =1  #define SetDigitalVideoContrastReg(vcval)       WriteI2C(DECODERADDRESS, SCONTRAST, vcval)
  11      =1  #define SetDigitalVideoBrightnessReg(vbval)       WriteI2C(DECODERADDRESS, SBRIGHT, vbval )
  12      =1  #define SetDigitalVideoHueReg(vhval)          WriteI2C(DECODERADDRESS, SHUE,  vhval )
  13      =1  #define SetDigitalVideoSaturationReg(gain, vhval)   WriteI2C(DECODERADDRESS, SCbGAIN+gain, (ReadI2C(DECODER
             -ADDRESS, SCbGAIN+gain)&0x80) + vhval )
  14      =1  
  15      =1  #endif // __RGBMIX__
  29          #include "panel.h"
   1      =1  //PanelConfig
   2      =1  
   3      =1    #if   defined SXGA
           =1             #define PHR_ 1280
           =1             #define PVR_ 1024
           =1   #elif defined XGA 
           =1             #define PHR_ 1024
           =1             #define PVR_ 768
           =1   #elif defined SVGA
           =1             #define PHR_ 800
           =1             #define PVR_ 600
           =1   #elif defined VGA
           =1             #define PHR_ 640
           =1             #define PVR_ 480
           =1   #elif defined QVGA
           =1             #define PHR_ 320
           =1             #define PVR_ 240
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 68  

           =1   #elif defined WXGA
           =1             #define PHR_ 1280 //1366
           =1             #define PVR_ 768
           =1   #elif defined WSVGA
           =1             #define PHR_ 1024
           =1             #define PVR_ 600
           =1   #elif defined WVGA
  25      =1              #define PHR_ 800
  26      =1              #define PVR_ 480//600
  27      =1    #elif defined WQVGA
           =1         //    #define PHR_ 960 //480
           =1         //    #define PVR_ 237
           =1             #define PHR_ 480 //480
           =1             #define PVR_ 240
           =1   #endif
  33      =1  
  34      =1   
  35      =1  
  36      =1  /*
  37      =1  #define ACTIVE_LOW      0
  38      =1  #define ACTIVE_HIGH     1
  39      =1  
  40      =1  CODE struct PanelConfig {
  41      =1    unsigned    x_res,          y_res;
  42      =1    unsigned char h_sync_min_pulse_width, v_sync_min_pulse_width;
  43      =1    unsigned    h_min_back_porch;
  44      =1    unsigned char h_sync_polarity,    v_sync_polarity;
  45      =1    unsigned    dot_clock,        max_clock;      // in unit Mhz*10
  46      =1    unsigned char pixs_per_clock;
  47      =1    unsigned char DE_only;
  48      =1  } PanelConfig=
  49      =1    {
  50      =1    //----------------------------------------------------
  51      =1    #ifdef WXGA
  52      =1    //LG  LM171W01 WXGA
  53      =1    1280,     768,
  54      =1    8,        1,
  55      =1    8,
  56      =1    ACTIVE_LOW,   ACTIVE_LOW,
  57      =1    #ifdef DOUBLE_PIXEL
  58      =1    320,      470,
  59      =1    2,
  60      =1    #else
  61      =1    650,      950,          //65Mhz
  62      =1    1,
  63      =1    #endif
  64      =1    0
  65      =1    //----------------------------------------------------
  66      =1    #elif defined XGA
  67      =1    //Samsung  LT150x1-151 XGA
  68      =1    1024,     768,
  69      =1    68,       1,
  70      =1    80,
  71      =1    ACTIVE_LOW,   ACTIVE_LOW,
  72      =1    #ifdef DOUBLE_PIXEL
  73      =1    325,      400,          //32.5Mhz
  74      =1    2,
  75      =1    #else
  76      =1    650,      800,
  77      =1    1,
  78      =1    #endif
  79      =1    0
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 69  

  80      =1    //----------------------------------------------------
  81      =1    #elif defined SXGA
  82      =1    //Samsung  LT170E2-131  SXGA
  83      =1    1280,     1024,
  84      =1    1,        1,
  85      =1    1,
  86      =1    ACTIVE_LOW,   ACTIVE_LOW,
  87      =1    #ifdef DOUBLE_PIXEL
  88      =1    540,      540,          //54.5Mhz
  89      =1    2,
  90      =1    #else
  91      =1    1080,     1080,
  92      =1    1,
  93      =1    #endif
  94      =1    0
  95      =1    //----------------------------------------------------
  96      =1    #elif defined WSVGA           // Thosiba
  97      =1    1024,     600,
  98      =1    8,        3,
  99      =1    1,//80,       
 100      =1    ACTIVE_LOW,   ACTIVE_LOW,
 101      =1    #ifdef DOUBLE_PIXEL
 102      =1    325,      450,
 103      =1    2,
 104      =1    #else
 105      =1    500,      550,          //50Mhz
 106      =1    1,
 107      =1    #endif
 108      =1    0
 109      =1    //----------------------------------------------------
 110      =1  
 111      =1    #elif defined SVGA
 112      =1    //NEC NL8060AC26-11 SVGA
 113      =1    800,      600,
 114      =1    2,        1,
 115      =1    13,
 116      =1    ACTIVE_LOW,   ACTIVE_LOW,
 117      =1    #ifdef DOUBLE_PIXEL
 118      =1    384,      500,          //38.4MHz
 119      =1    2,
 120      =1    #else
 121      =1    670,      1000,
 122      =1    1,
 123      =1    #endif
 124      =1    0
 125      =1    //----------------------------------------------------
 126      =1    #elif defined VGA
 127      =1    //NEC NL6448AC33  VGA         // OK with SetPanelRegisters
 128      =1    640,      480,
 129      =1    10,       1,
 130      =1    4,
 131      =1    ACTIVE_LOW,   ACTIVE_LOW,
 132      =1    #ifdef DOUBLE_PIXEL
 133      =1    130,      150,          //25.2MHz
 134      =1    2,
 135      =1    #else
 136      =1    250,      300,
 137      =1    1,
 138      =1    #endif
 139      =1    0
 140      =1    //----------------------------------------------------
 141      =1  
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 70  

 142      =1    #elif defined WVGA
 143      =1    // Panasonic  EDTCB27QBF WVGA
 144      =1    800,      480,
 145      =1    4,        1,
 146      =1    7,
 147      =1    ACTIVE_LOW,   ACTIVE_LOW,
 148      =1    #ifdef DOUBLE_PIXEL
 149      =1    166,      200,          //33.2MHz
 150      =1    2,
 151      =1    #else
 152      =1    332,      360,          //33.2MHz
 153      =1    1,
 154      =1    #endif
 155      =1    0
 156      =1  
 157      =1    //----------------------------------------------------
 158      =1    #else
 159      =1    // Default : XGA panel
 160      =1    // Samsung  LT150x1-151 XGA
 161      =1    1024,     768,
 162      =1    68,       1,
 163      =1    80,
 164      =1    ACTIVE_LOW,   ACTIVE_LOW,
 165      =1    #ifdef DOUBLE_PIXEL
 166      =1    325,      400,          //32.5Mhz
 167      =1    2,
 168      =1    #else
 169      =1    650,      800,          //32.5Mhz
 170      =1    1,
 171      =1    #endif
 172      =1    0
 173      =1    #endif
 174      =1    };
 175      =1  
 176      =1  */
  30          //#include "HS_IOdef"
  31          #include "HS_DisplayOSD.h"
   1      =1  #ifndef _HS_DisplayOSD_
   2      =1  #define _HS_DisplayOSD_
   3      =1  
   4      =1  
   5      =1  enum DisplayInformation
   6      =1  {
   7      =1    InfoOSDMENULOCKED,
   8      =1    InfoOSDMENUATCIVE,
   9      =1  #ifdef SUPPORT_SDCARD  //Pinchi 20150319 add
           =1   InfoFORMATSDCARD,
           =1   InfoFORMATSUCCESS,
           =1   InfoFORMATFAIL,
           =1   InfoRECORDERROR,
           =1   InfoPASSWORDERROR,
           =1   InfoFWUpdate,
           =1   InfoFWUpdateSUCCESS,
           =1   InfoFWUpdateFAIL,
           =1   InfoSDCARDReset,
           =1   InfoSDCARDNotReady,
           =1   InfoUpdateConfigStart,
           =1   InfoUpdateConfigFail,
           =1   InfoUpdateConfigSuccess,
           =1 #endif
  24      =1    InfoAutoDayNight_Auto,
  25      =1    InfoAutoDayNight_Day,
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 71  

  26      =1    InfoAutoDayNight_Night,
  27      =1    InfoPLZRESETSYSTEM,
  28      =1  #ifdef AWT_NO_SIGNAL_MSG  //Pinchi 20150319 add for to display "NO VIDEO SIGNAL" by AWT request of 2015030
             -2
  29      =1    InfoNoVideoSignal,
  30      =1  #endif
  31      =1  
  32      =1  };
  33      =1  
  34      =1  //#define   InfoUpdateConfigStart 0x01
  35      =1  //#define   InfoUpdateConfigFail    0x02
  36      =1  //#define   InfoUpdateConfigSuccess 0x03
  37      =1  
  38      =1  #define   NORMAL_Record   0x01
  39      =1  #define   Manual_Record 0x02
  40      =1  #define   ALARM_Record  0x04
  41      =1  #define   GPS       0x08
  42      =1  #define   G_Sensor    0x10
  43      =1  #define   WIFI      0x20 
  44      =1  #define   WIFI_Signal   0x40
  45      =1  #define   OverWrite_Record  0x80
  46      =1  
  47      =1  void DisplayGaugeOSD(void);
  48      =1  void ClearGAUGEINFO(void);
  49      =1  void DisplaylockOSD(void); 
  50      =1  void DisplayactvOSD(void); 
  51      =1  void DisplayNumber(BYTE addr,WORD val,BYTE type);
  52      =1  //#ifdef SUPPORT_SDCARD
  53      =1  void DisplayDVRStatus(void);
  54      =1  void DisplayFormatOSD(void);
  55      =1  void DisplayFormatOkOSD(void);
  56      =1  void DisplayFormatFailOSD(void);
  57      =1  void DisplayFWUpDate(void);
  58      =1  void DisplayFWUpDateOK(void);
  59      =1  void DisplayFWUpDateFail(void);
  60      =1  void DisplayFWVersion(void) ;
  61      =1  void DisplayDVRnotReady(void);
  62      =1  void DisplayInformation(BYTE info);
  63      =1  //#endif    //#ifdef SUPPORT_SDCARD
  64      =1  
  65      =1  #if 0 //def AWT_NO_SIGNAL_MSG  //Pinchi 20150319 add for to display "NO VIDEO SIGNAL" by AWT request of 20
             -150302
           =1 void AWT_Display_NoVideoSignal(BYTE bOnOff);
           =1 #endif
  68      =1  
  69      =1  #endif
  70      =1  
  32          #include "HS_keyremo.h"
   1      =1  #ifndef _HS_keyremo_
   2      =1  #define _HS_keyremo_
   3      =1  
   4      =1  //
   5      =1  // KeyRemo.h
   6      =1  // Default function for Key Input and Remocon Input
   7      =1  //
   8      =1  //=============================================================================
   9      =1  //                        Operation Key Mapping
  10      =1  //=============================================================================
  11      =1  
  12      =1  
  13      =1  
  14      =1  #define  SelectMode 0
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 72  

  15      =1  #define  JumpMode 1
  16      =1  
  17      =1  #define COMPOSITE1          1
  18      =1  #define COMPOSITE2          2
  19      =1  #define COMPOSITE3          3
  20      =1  #define COMPOSITE4          4
  21      =1  
  22      =1  
  23      =1  #ifndef QUAD
  24      =1  
  25      =1  #define COMPOSITE1          1
  26      =1  #define COMPOSITE2          2
  27      =1  #define COMPOSITE3          3
  28      =1  #define COMPOSITE4          4
  29      =1  
  30      =1  #ifdef AWT_ML072S
  31      =1  #define SOURCE_A      1     
  32      =1  #define SOURCE_R            2   
  33      =1  #define SOURCE_AV           3
  34      =1  #define SOURCE_B            4 
  35      =1  #else
           =1 #define SOURCE_A      1   
           =1 #define SOURCE_B            2   
           =1 #define SOURCE_R            3   
           =1 #define SOURCE_AV           4
           =1 #endif
  41      =1  
  42      =1  void CheckSourceMode(BYTE sorce);
  43      =1  #endif
  44      =1  
  45      =1  
  46      =1  
  47      =1  extern BYTE NowModeState;
  48      =1  extern BYTE TriggerFlag;
  49      =1  extern bit  ParkFlag;
  50      =1  extern BYTE  Attr_A,Attr_B,Attr_C,Attr_R; 
  51      =1  extern BYTE TimeStep;
  52      =1  extern BYTE SEQFlag;
  53      =1  extern BYTE SEQIndex;
  54      =1  extern BYTE TriggerMode;
  55      =1  extern bit AVFlag;
  56      =1  extern bit VGAAudio;
  57      =1  
  58      =1  
  59      =1  
  60      =1  //BYTE TW2835Command(char,char,char,char,char);
  61      =1  void SetSourceMode(BYTE Index,char ,char ,char ,char );
  62      =1  void SetJumpSource(BYTE Index,char ,char ,char ,char );  //Pinchi 20150825 add
  63      =1  void SetSelectMode(void);
  64      =1  //void PriorityOffSelectMode(void);
  65      =1  void SetJumpMode(void);
  66      =1  void SetNowMode(void);
  67      =1  void SetRearSource(void);
  68      =1  void SetLeftSource(void);
  69      =1  void SetRightSource(void);
  70      =1  void CheckMirror(void);
  71      =1  BYTE CheckTrigger(void);
  72      =1  void TriggerHandler(BYTE T_Flag);
  73      =1  void SEQMode(void);
  74      =1  
  75      =1  void SelectBoxHandler(void);
  76      =1  
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 73  

  77      =1  extern void CheckNewTriggerFunc(void);
  78      =1  
  79      =1  #endif
  33          #include "HS_DVRProtocol.h"
   1      =1  
   2      =1  #ifndef _HS_DVRProtocol_
   3      =1  #define _HS_DVRProtocol_
   4      =1  
   5      =1  //==================================================
   6      =1  //
   7      =1  //==================================================
   8      =1  
   9      =1  #define bSetDVRParam  0x0001
  10      =1  #define bSetDVRDefault  0x0002
  11      =1  #define bSetDATETIME  0x0004
  12      =1  #define bGetDVRParam  0x0008
  13      =1  #define bGetDVRStatus 0x0010
  14      =1  #define bGetDATETIME  0x0020
  15      =1  #define bBOOKMARK   0x0040
  16      =1  #define bSetSystem    0x0080
  17      =1  #define bHalt_Start   0x0100
  18      =1  #define bSetFormatSD    0x0200  
  19      =1  #define bGetDVRVersion  0x0400  
  20      =1  #define bFW_Update_Start 0x0800
  21      =1  #define bUpdate_CONFIG  0x1000
  22      =1  #define bDoorClose    0x2000
  23      =1  #define bDoorOpen     0x4000
  24      =1  
  25      =1  
  26      =1  enum HS_DvrCommand
  27      =1  {
  28      =1    CMD_NULL,
  29      =1    SetDVRParam,  // 1
  30      =1    SetDVRDefault,
  31      =1    SetDATETIME,
  32      =1    GetDVRParam,
  33      =1    GetDVRStatus,
  34      =1    GetDATETIME, 
  35      =1    SetFormatSD, 
  36      =1    SendAlarm, 
  37      =1    GetDVRVersion=0x09, 
  38      =1    SendDVRStatus=0x14,
  39      =1    GetLCDMode=0x15,
  40      =1    SendDVRParam=0x16,
  41      =1    SendDVRParamDT=0x17,
  42      =1    SetFormatSDDone=0x18,
  43      =1    GetInformation=0x19,
  44      =1    SetSystem=0x1a,
  45      =1    GPSReset=0x1b,
  46      =1    Halt_Start=0xc8,
  47      =1    Halt_OK=0xc9,
  48      =1    FW_Update_Start=0xca,
  49      =1    FW_Update_OK=0xcb,
  50      =1    MANUALRECSTART=0xdc,
  51      =1    MANUALRECSTOP=0xdd,
  52      =1    SNAPSHOT=0xde,
  53      =1    BOOKMARK=0xdf,
  54      =1    Update_CONFIG=0xe0,
  55      =1    Update_CONFIG_OK=0xe1,
  56      =1    DoorOpen=0xe2,
  57      =1    DoorClose=0xe3,
  58      =1    CMD_UNKNOWN=0xff,
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 74  

  59      =1    CMD_NUM
  60      =1  };
  61      =1  
  62      =1  //RS485 TX or RX define
  63      =1  enum
  64      =1  {
  65      =1    RS485_TX,   //RS485 Transmit  
  66      =1    RS485_RX    //Rs485 Receive
  67      =1  };
  68      =1  
  69      =1  enum
  70      =1  {
  71      =1    Baud_rate2400,    
  72      =1    Baud_rate4800,  
  73      =1    Baud_rate9600
  74      =1  };
  75      =1  
  76      =1  
  77      =1  //Camera Command ID define
  78      =1  enum
  79      =1  {
  80      =1  //  CAM_CLEAR,        //Clear 
  81      =1    CAM_ZOOM_OUT_START,     //Zoom Out  Start
  82      =1  //  CAM_ZOOM_OUT_END,     //Zoom Out  End
  83      =1    CAM_ZOOM_IN_START,      //Zoom In Start
  84      =1  //  CAM_ZOOM_IN_END,      //Zoom In End
  85      =1  //  CAM_IRIS_CLOSE_START,   //IRIS Close Start
  86      =1  //  CAM_IRIS_CLOSE_END,   //IRIS Close End
  87      =1  //  CAM_IRIS_OPEN_START,      //IRIS Open Start
  88      =1  //  CAM_IRIS_OPEN_END,      //IRIS Open End
  89      =1  //  CAM_FOCUS_FAR_START,    //Focus Far Start
  90      =1  //  CAM_FOCUS_FAR_END,    //Focus Far End
  91      =1  //  CAM_FOCUS_NEAR_START,   //Focus Near Start
  92      =1  //  CAM_FOCUS_NEAR_END,   //Focus Near End
  93      =1    CAM_SET,        //Set 
  94      =1    CAM_CALL,       //Call 
  95      =1  //  CAM_FOCUS_SPEED,    //Focus Speed
  96      =1  //  CAM_ZOOM_SPEED,   //Zoom Speed
  97      =1    CAM_PTZ_RIGHT,      //PTZ Right 
  98      =1    CAM_PTZ_LEFT,     //PTZ Left
  99      =1    CAM_PTZ_UP,     //PTZ Up
 100      =1    CAM_PTZ_DOWN,     //PTZ Down
 101      =1    CAM_MENU_ENTER,     //PTZ Down
 102      =1    CAM_Iris_Open,
 103      =1  
 104      =1  //  CAM_PTZ_RIGHT_UP,   //PTZ Right with Up
 105      =1  //  CAM_PTZ_RIGHT_DOWN, //PTZ Right with Down
 106      =1  //  CAM_PTZ_LEFT_UP,    //PTZ Left with Up
 107      =1  //  CAM_PTZ_LEFT_DOWN,  //PTZ Left with Down
 108      =1    CAM_PTZ_STOP      //PTZ Control Stop
 109      =1  };
 110      =1  
 111      =1  void Hs_DvrTxCmdPaser(BYTE Cmd_Id );
 112      =1  void Hs_Protocol_Init(void);
 113      =1  BYTE DvrReceivePaser(void);
 114      =1  void DVRCommandReSend(void);
 115      =1  
 116      =1  #if 0
           =1 BYTE TW2835ReceivePaser(void);
           =1 #endif
 119      =1  extern bit   DVR_Ready;
 120      =1  void CAM_TxCommand_toRS485(BYTE Com_ID);
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 75  

 121      =1  void Send_PelcoP_Command(void);
 122      =1  void Send_PelcoD_Command(void);
 123      =1  void Send_GE_Command(void);
 124      =1  
 125      =1  #endif
 126      =1  
  34          
  35          #include "HS_IOdef.h"
   1      =1  #ifndef _HS_IOdef_
   2      =1  #define _HS_IOdef_
   3      =1  
   4      =1  
   5      =1  #include "Reg.h"
   1      =2  //
   2      =2  //Registers.h : Register declaration
   3      =2  //
   4      =2  
   5      =2  #ifndef __REGISTERS__
           =2 #define __REGISTERS__
           =2 
           =2 #ifdef INTERNAL_MCU
           =2 /*  BYTE Registers  */
           =2 sfr P0    = 0x80;
           =2 sfr P1    = 0x90;
           =2 sfr P2    = 0xA0;
           =2 sfr P3    = 0xB0;
           =2 sfr PSW   = 0xD0;
           =2 sfr ACC   = 0xE0;
           =2 sfr B     = 0xF0;
           =2 sfr SP    = 0x81;
           =2 sfr DPL   = 0x82;
           =2 sfr DPH   = 0x83;
           =2 sfr PCON  = 0x87;
           =2 sfr TCON  = 0x88;
           =2 sfr TMOD  = 0x89;
           =2 sfr TL0   = 0x8A;
           =2 sfr TL1   = 0x8B;
           =2 sfr TH0   = 0x8C;
           =2 sfr TH1   = 0x8D;
           =2 sfr IE    = 0xA8;
           =2 sfr IP    = 0xB8;
           =2 sfr SCON  = 0x98;
           =2 sfr SBUF  = 0x99;
           =2 
           =2 //sfr P4    = 0xd8;
           =2 
           =2 /*  8052 Extensions  */
           =2 sfr EXIF  = 0x91;   // external interrupt 2,3,4,5 flags should be cleared by software
           =2 sfr T2CON = 0xC8;
           =2 sfr RCAP2L = 0xCA;
           =2 sfr RCAP2H = 0xCB;
           =2 sfr TL2   = 0xCC;
           =2 sfr TH2   = 0xCD;
           =2 sfr EICON = 0xD8;
           =2 sfr EIE   = 0xE8;
           =2 sfr EIP   = 0xF8;
           =2 
           =2 /*  TW88 Core Extension */
           =2 sfr BANKREG   = 0x9A;
           =2 sfr SPICONTROL  = 0x9B;
           =2 sfr T0HIGH    = 0x9C;
           =2 sfr T0LOW     = 0x9D;
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 76  

           =2 sfr T1HIGH    = 0x9E;
           =2 sfr T1LOW     = 0x9F;
           =2 sfr T2HIGH    = 0x93;
           =2 sfr T2LOW     = 0x94;
           =2 
           =2 /*  BIT Registers  */
           =2 /*  PSW  */
           =2 sbit CY    = 0xD7;
           =2 sbit AC    = 0xD6;
           =2 sbit F0    = 0xD5;
           =2 sbit RS1   = 0xD4;
           =2 sbit RS0   = 0xD3;
           =2 sbit OV    = 0xD2;
           =2 sbit P     = 0xD0;
           =2 
           =2 /*  TCON  */
           =2 sbit TF1   = 0x8F;
           =2 sbit TR1   = 0x8E;
           =2 sbit TF0   = 0x8D;
           =2 sbit TR0   = 0x8C;
           =2 sbit IE1   = 0x8B;
           =2 sbit IT1   = 0x8A;
           =2 sbit IE0   = 0x89;
           =2 sbit IT0   = 0x88;
           =2 
           =2 /*  IE  */
           =2 sbit EA    = 0xAF;
           =2 sbit ES    = 0xAC;
           =2 sbit ET1   = 0xAB;
           =2 sbit EX1   = 0xAA;
           =2 sbit ET0   = 0xA9;
           =2 sbit EX0   = 0xA8;
           =2 
           =2 /*  EIE  */
           =2 sbit EWDI  = 0xEC;    // Watch dog timer interrupt enable
           =2 sbit EX5   = 0xEB;    // external interrupt 5 enable
           =2 sbit EX4   = 0xEA;    // external interrupt 4 enable
           =2 sbit EX3   = 0xE9;    // external interrupt 3 enable
           =2 sbit EX2   = 0xE8;    // external interrupt 2 enable
           =2 
           =2 /*  IP  */
           =2 sbit PS    = 0xBC;
           =2 sbit PT1   = 0xBB;
           =2 sbit PX1   = 0xBA;
           =2 sbit PT0   = 0xB9;
           =2 sbit PX0   = 0xB8;
           =2 
           =2 /*  EIP  */
           =2 sbit PWDI  = 0xFC;    // Watch dog timer interrupt priority
           =2 sbit PX5   = 0xFB;    // external interrupt5 priority
           =2 sbit PX4   = 0xFA;    // external interrupt4 priority
           =2 sbit PX3   = 0xF9;    // external interrupt3 priority
           =2 sbit PX2   = 0xF8;    // external interrupt2 priority
           =2 
           =2 /*  P3  */
           =2 sbit RD    = 0xB7;
           =2 sbit WR    = 0xB6;
           =2 sbit T1    = 0xB5;
           =2 sbit T0    = 0xB4;
           =2 sbit INT1  = 0xB3;
           =2 sbit INT0  = 0xB2;
           =2 sbit TXD   = 0xB1;
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 77  

           =2 sbit RXD   = 0xB0;
           =2 
           =2 /*  SCON  */
           =2 sbit SM0   = 0x9F;
           =2 sbit SM1   = 0x9E;
           =2 sbit SM2   = 0x9D;
           =2 sbit REN   = 0x9C;
           =2 sbit TB8   = 0x9B;
           =2 sbit RB8   = 0x9A;
           =2 sbit TI    = 0x99;
           =2 sbit RI    = 0x98;
           =2 
           =2 /*  8052 Extensions  */
           =2 /*  IE  */
           =2 sbit ET2   = 0xAD;
           =2 
           =2 /*  IP  */
           =2 sbit PT2   = 0xBD;
           =2 
           =2 /*  P1  */
           =2 sbit T2EX  = 0x91;
           =2 sbit T2    = 0x90;
           =2              
           =2 /*  T2CON  */
           =2 sbit TF2   = 0xCF;
           =2 sbit EXF2  = 0xCE;
           =2 sbit RCLK  = 0xCD;
           =2 sbit TCLK  = 0xCC;
           =2 sbit EXEN2 = 0xCB;
           =2 sbit TR2   = 0xCA;
           =2 sbit C_T2  = 0xC9;
           =2 sbit CP_RL2= 0xC8;
           =2 
           =2 sfr CHPENR = 0xF6;
           =2 sfr CHPCON = 0xBF;
           =2 sfr SFRAL  = 0xC4;
           =2 sfr SFRAH  = 0xC5;
           =2 sfr SFRFD  = 0xC6;
           =2 sfr SFRCN  = 0xC7;
           =2 
           =2 sbit P0_0  = 0x80;
           =2 sbit P0_1  = 0x81;
           =2 sbit P0_2  = 0x82;
           =2 sbit P0_3  = 0x83;
           =2 sbit P0_4  = 0x84;
           =2 sbit P0_5  = 0x85;
           =2 sbit P0_6  = 0x86;
           =2 sbit P0_7  = 0x87;
           =2 
           =2 sbit P1_0  = 0x90;
           =2 sbit P1_1  = 0x91;
           =2 sbit P1_2  = 0x92;
           =2 sbit P1_3  = 0x93;
           =2 sbit P1_4  = 0x94;
           =2 sbit P1_5  = 0x95;
           =2 sbit P1_6  = 0x96;
           =2 sbit P1_7  = 0x97;
           =2 
           =2 sbit P2_0  = 0xa0;
           =2 sbit P2_1  = 0xa1;
           =2 sbit P2_2  = 0xa2;
           =2 sbit P2_3  = 0xa3;
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 78  

           =2 sbit P2_4  = 0xa4;
           =2 sbit P2_5  = 0xa5;
           =2 sbit P2_6  = 0xa6;
           =2 sbit P2_7  = 0xa7;
           =2 
           =2 sbit P3_0  = 0xb0;
           =2 sbit P3_1  = 0xb1;
           =2 sbit P3_2  = 0xb2;
           =2 sbit P3_3  = 0xb3;
           =2 sbit P3_4  = 0xb4;
           =2 sbit P3_5  = 0xb5;
           =2 sbit P3_6  = 0xb6;
           =2 sbit P3_7  = 0xb7;
           =2 
           =2 #else // external MCU=WINBOND
           =2 /*  BYTE Registers  */
           =2 sfr P0    = 0x80;
           =2 sfr P1    = 0x90;
           =2 sfr P2    = 0xA0;
           =2 sfr P3    = 0xB0;
           =2 sfr PSW   = 0xD0;
           =2 sfr ACC   = 0xE0;
           =2 sfr B     = 0xF0;
           =2 sfr SP    = 0x81;
           =2 sfr DPL   = 0x82;
           =2 sfr DPH   = 0x83;
           =2 sfr PCON  = 0x87;
           =2 sfr TCON  = 0x88;
           =2 sfr TMOD  = 0x89;
           =2 sfr TL0   = 0x8A;
           =2 sfr TL1   = 0x8B;
           =2 sfr TH0   = 0x8C;
           =2 sfr TH1   = 0x8D;
           =2 sfr CKCON = 0x8E;   //clock control register, default =0x01
           =2 sfr IE    = 0xA8;
           =2 sfr IP    = 0xB8;
           =2 sfr SCON  = 0x98;
           =2 sfr SBUF  = 0x99;
           =2 sfr P4 = 0xE8; //Megawin Ryan@970716
           =2 //sfr P4    = 0xa5;      //SST MCU
           =2 //sfr P4    = 0xd8;   //winbond<960820>
           =2 
           =2 /*  8052 Extensions  */
           =2 sfr ADCTL = 0xC5;   //william-20111017
           =2 sfr ADCV = 0xC6;    //william-20111017
           =2 sfr ADCVL = 0xE8;   //william-20111017
           =2 sfr T2CON = 0xC8;
           =2 sfr RCAP2L = 0xCA;
           =2 sfr RCAP2H = 0xCB;
           =2 sfr TL2   = 0xCC;
           =2 sfr TH2   = 0xCD;
           =2 
           =2 // for UART2
           =2 sfr S2CON  = 0xAA;
           =2 sfr S2BRT  = 0xBA;
           =2 sfr S2BUF  = 0x9A;
           =2 sfr AUXR2  = 0xA6;
           =2 sfr AUXIE  = 0xAD;
           =2 
           =2 sfr P1M0  = 0x91;
           =2 sfr P1M1  = 0x92;
           =2 sfr P0M0  = 0x93;
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 79  

           =2 sfr P0M1  = 0x94;
           =2 sfr P2M0  = 0x95;
           =2 sfr P2M1  = 0x96;
           =2 sfr P3M0  = 0xB1;
           =2 sfr P3M1  = 0xB2;
           =2 
           =2 // for PCA
           =2 sfr CCON   = 0xD8;
           =2 sfr CMOD   = 0xD9;
           =2 sfr CCAPM0 = 0xDA;
           =2 sfr CCAPM1 = 0xDB;
           =2 sfr CCAPM2 = 0xDC;
           =2 sfr CCAPM3 = 0xDD;
           =2 sfr CCAPM4 = 0xDE;
           =2 sfr CCAPM5 = 0xDF;
           =2 sfr CL     = 0xE9;
           =2 sfr CH     = 0xF9;
           =2 sfr CCAP0L = 0xEA;
           =2 sfr CCAP0H = 0xFA;
           =2 sfr CCAP1L = 0xEB;
           =2 sfr CCAP1H = 0xFB;
           =2 sfr CCAP2L = 0xEC;
           =2 sfr CCAP2H = 0xFC;
           =2 sfr CCAP3L = 0xED;
           =2 sfr CCAP3H = 0xFD;
           =2 sfr CCAP4L = 0xEE;
           =2 sfr CCAP4H = 0xFE;
           =2 sfr CCAP5L = 0xEF;
           =2 sfr CCAP5H = 0xFF;
           =2 sfr PCAPWM0= 0xF2;
           =2 sfr PCAPWM1= 0xF3;
           =2 sfr PCAPWM2= 0xF4;
           =2 sfr PCAPWM3= 0xF5;
           =2 sfr PCAPWM4= 0xF6;
           =2 sfr PCAPWM5= 0xF7;
           =2 
           =2 /*  BIT Registers  */
           =2 /*  PSW  */
           =2 sbit CY    = 0xD7;
           =2 sbit AC    = 0xD6;
           =2 sbit F0    = 0xD5;
           =2 sbit RS1   = 0xD4;
           =2 sbit RS0   = 0xD3;
           =2 sbit OV    = 0xD2;
           =2 sbit P     = 0xD0;
           =2 
           =2 /*  TCON  */
           =2 sbit TF1   = 0x8F;
           =2 sbit TR1   = 0x8E;
           =2 sbit TF0   = 0x8D;
           =2 sbit TR0   = 0x8C;
           =2 sbit IE1   = 0x8B;
           =2 sbit IT1   = 0x8A;
           =2 sbit IE0   = 0x89;
           =2 sbit IT0   = 0x88;
           =2 
           =2 /*  IE  */
           =2 sbit EA    = 0xAF;
           =2 sbit ES    = 0xAC;
           =2 sbit ET1   = 0xAB;
           =2 sbit EX1   = 0xAA;
           =2 sbit ET0   = 0xA9;
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 80  

           =2 sbit EX0   = 0xA8;
           =2 
           =2 /*  IP  */
           =2 sbit PS    = 0xBC;
           =2 sbit PT1   = 0xBB;
           =2 sbit PX1   = 0xBA;
           =2 sbit PT0   = 0xB9;
           =2 sbit PX0   = 0xB8;
           =2 
           =2 /*  P3  */
           =2 sbit RD    = 0xB7;
           =2 sbit WR    = 0xB6;
           =2 sbit T1    = 0xB5;
           =2 sbit T0    = 0xB4;
           =2 sbit INT1  = 0xB3;
           =2 sbit INT0  = 0xB2;
           =2 sbit TXD   = 0xB1;
           =2 sbit RXD   = 0xB0;
           =2 
           =2 /*  SCON  */
           =2 sbit SM0   = 0x9F;
           =2 sbit SM1   = 0x9E;
           =2 sbit SM2   = 0x9D;
           =2 sbit REN   = 0x9C;
           =2 sbit TB8   = 0x9B;
           =2 sbit RB8   = 0x9A;
           =2 sbit TI    = 0x99;
           =2 sbit RI    = 0x98;
           =2 
           =2 /*  8052 Extensions  */
           =2 /*  IE  */
           =2 sbit ET2   = 0xAD;
           =2 
           =2 /*  IP  */
           =2 sbit PT2   = 0xBD;
           =2 
           =2 /*  P1  */
           =2 sbit T2EX  = 0x91;
           =2 sbit T2    = 0x90;
           =2              
           =2 /*  T2CON  */
           =2 sbit TF2   = 0xCF;
           =2 sbit EXF2  = 0xCE;
           =2 sbit RCLK  = 0xCD;
           =2 sbit TCLK  = 0xCC;
           =2 sbit EXEN2 = 0xCB;
           =2 sbit TR2   = 0xCA;
           =2 sbit C_T2  = 0xC9;
           =2 sbit CP_RL2= 0xC8;
           =2 
           =2 sfr CHPENR = 0xF6;
           =2 sfr CHPCON = 0xBF;
           =2 sfr SFRAL  = 0xC4;
           =2 sfr SFRAH  = 0xC5;
           =2 sfr SFRFD  = 0xC6;
           =2 sfr SFRCN  = 0xC7;
           =2 
           =2 sbit P0_0  = 0x80;
           =2 sbit P0_1  = 0x81;
           =2 sbit P0_2  = 0x82;
           =2 sbit P0_3  = 0x83;
           =2 sbit P0_4  = 0x84;
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 81  

           =2 sbit P0_5  = 0x85;
           =2 sbit P0_6  = 0x86;
           =2 sbit P0_7  = 0x87;
           =2 
           =2 sbit P1_0  = 0x90;
           =2 sbit P1_1  = 0x91;
           =2 sbit P1_2  = 0x92;
           =2 sbit P1_3  = 0x93;
           =2 sbit P1_4  = 0x94;
           =2 sbit P1_5  = 0x95;
           =2 sbit P1_6  = 0x96;
           =2 sbit P1_7  = 0x97;
           =2 
           =2 sbit P2_0  = 0xa0;
           =2 sbit P2_1  = 0xa1;
           =2 sbit P2_2  = 0xa2;
           =2 sbit P2_3  = 0xa3;
           =2 sbit P2_4  = 0xa4;
           =2 sbit P2_5  = 0xa5;
           =2 sbit P2_6  = 0xa6;
           =2 sbit P2_7  = 0xa7;
           =2 
           =2 sbit P3_0  = 0xb0;
           =2 sbit P3_1  = 0xb1;
           =2 sbit P3_2  = 0xb2;
           =2 sbit P3_3  = 0xb3;
           =2 sbit P3_4  = 0xb4;
           =2 sbit P3_5  = 0xb5;
           =2 sbit P3_6  = 0xb6;
           =2 sbit P3_7  = 0xb7;
           =2 
           =2 sbit P4_0  = P4^0;
           =2 sbit P4_1  = P4^1;
           =2 sbit INT3  = P4^2;
           =2 sbit INT2  = P4^3;
           =2 
           =2 sfr P4M0  = 0xB3;
           =2 sfr P4M1  = 0xB4;
           =2 #endif  // INTERNAL_MCU
           =2 
           =2 #endif  //__REGISTERS__
 401      =2  
   6      =1  
   7      =1  #ifdef AWT_ML072S
   8      =1    #ifdef HS
   9      =1  #define LEFT_T      P0_0
  10      =1  #define Right_T     P0_1
  11      =1    #else 
           =1 #define LEFT_T      P0_1
           =1 #define Right_T     P0_0
           =1   #endif
  15      =1  #else
           =1 #define LEFT_T      P0_0
           =1 #define Right_T     P0_1
           =1 #endif
  19      =1  #define REVERSE_T     P0_2
  20      =1  //#define VGA_T     P0_4
  21      =1  
  22      =1  #ifdef  AWT_ML072Q  //Pinchi 20140902 add for AWT ML072Q
           =1   #ifdef AWT_NEW_SLIM_MODEL  //Pinchi 20150203 add for AWT new slim model
           =1   #define AV_T      P0_3
           =1   #define CAMC_T    P0_4
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 82  

           =1   #else
           =1   #define CAMC_T    P0_3
           =1   #endif
           =1 #else  //AWT_ML072S & HTRV
  30      =1  #define PARK_T      P0_3
  31      =1  #endif
  32      =1  
  33      =1  #ifdef USE_CAMD  //Pinchi 20150826 add
           =1 #define CAMD_T      P0_5
           =1 #endif
  36      =1  
  37      =1  #ifdef SUPPORT_SDCARD  //Pinchi 20150826 add 
           =1 #define SB_ADC      P1_6
           =1 #define ACC_B     P0_6
           =1 #define PPWR      P3_6
           =1 #define Door_Det    P1_7
           =1 #endif
  43      =1  
  44      =1  #define Audio_Select1   P1_4
  45      =1  #define Audio_Select2   P1_5
  46      =1  #define Audio_Mute    P1_7
  47      =1  //#define AVOutPutSelect  P1_7
  48      =1  //#define RS232Select     P4_0
  49      =1  
  50      =1  //#define GPS_PWR   P3_2
  51      =1  //#define GM8126_WD1  P2_0
  52      =1  //#define GM8126_WD2  P3_5
  53      =1  
  54      =1  #endif
  55      =1  
  36          
  37          #if 0//mask by ryan@20170907
              typedef enum
              {
                NORMALL_MODE,
                REVERSE_TRIG,
                LEFT_TRIG,
                RIGHT_TRIG,
              #ifdef USE_CAMD 
                CAMD_TRIG,
              #endif  
                CAMC_TRIG,
                VGA_TRIG,
                PARK_TRIG,
                No_TRIG,
                TRIGGER_NUM
              }TriggerModeType;
              #endif
  54          
  55          typedef enum
  56          {
  57            No_SELECT,
  58            REVERSE_SELECT,
  59            LEFT_SELECT,
  60            RIGHT_SELECT,
  61            CAMC_SELECT,
  62            JUMP_SELECT,
  63            EVENT_SELECT,
  64            //PARK_SELECT,
  65            //NORMALL_SELECT,
  66            SELECT_NUM
  67          }SELECTModeType;
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 83  

  68          
  69          #if 0
              code unsigned char SEQTable[]={0x00,0x01,0x02,0x03,0xFF};             // 0xFF:return (FD SEQ Mode)
              code unsigned char ParkTable[]={0xFE,0x04,0x05,0x06,0x07,0x0C,0x0D,0x08,0x0e,0x00,0x01,0x02,0x03,0xFF};   
             - //2007.4.10 Justin
              code unsigned char LeftTable[]={0x00,0x06,0x09};  
              code unsigned char RightTable[]={0x01,0x07,0x0A};
              code unsigned char ReverseTable[]={0x13,0x06,0x07,0x08,0x0e};       
              code unsigned char JumpTable[]={0x0B,0xFD,0x04,0x05,0x06,0x07,0x0c,0x0d,0x08,0x0e,0x00,0x01,0x02,0x03};   
             -//2007.4.10 Justi
              
                      BYTE  SourceMode=0;            
                            BYTE  CkPARK=0,CkTMode=0,AVFlag=0,TGFlag=0,TGFlag1=0,TDisplayFlag=0;
                            BYTE  Attr_A=0x02,Attr_B=0x02,Attr_C=0x02,Attr_R=0x03; 
                            BYTE  ParkIndex=0,ParkIndex1=0,JumpIndex=0,ReverseIndex=0,RightIndex=0,LeftIndex=0,SEQIndex=
             -0;
                            BYTE  SEQFlag=0,TimeStep,SEQTime=0;
                            BYTE  ParkTime=0,RightTime=0,LeftTime=0,ReverseTime=0,RtFlag=0,LtFlag=0,ReverseFlag=0,ParkFl
             -ag=0;
              extern CODE   BYTE  Init_Osd_MainMenu[];//WILLIAM-V1.43-970403
                        BYTE  PRIORITY;
              #endif
  86          
  87          #if 0  //Pinchi 20140905 disable for pin define in HS_IOdef.h
              #define LEFT_T     P0_0
              #define Right_T    P0_1
              #define REVERSE_T  P0_2
              #ifdef AWT_ML072S
              #define PARK_T     P0_3
              #else
              #define PARK_T     P0_4
              #endif
              //#define VGA_T      P0_4
              #define CAMC_T     P0_3
              #define CAMD_T     P0_5
              #endif
 100          
 101          BYTE  Attr_A=0x02,Attr_B=0x02,Attr_C=0x02,Attr_R=0x03;
 102          
 103          BYTE Gauge_Flag=0;//add by yran@20171211
 104          
 105          #ifdef USE_CAMD 
              CODE unsigned char ParkTable[]={0x00,0x00,0x00,/*0x00,*/0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x0c,0x0d,0x08,
             -0x0e,0x0b,0x09,0x0a,0x10,0x11,0x12,0x13,0x16,0x17,0x18,0x1c,0x14,0x09,0x15,0x19,0x1a,0x1b,0x1f,0x20,0x21};
              #else
 108            #ifdef HTRV
                CODE unsigned char ParkTable[]={0x00,0x00,/*0x00,0x00,*/0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x0c,0x0d,0x08
             -,0x0e,0x22,0x0b,0x09,0x0a,0x10,0x11,0x12,0x13,0x16,0x17,0x18,0x1c,0x14,0x09,0x15,0x19,0x1a,0x1b,0x1f,0x20,0x21};
                #else
 111            CODE unsigned char ParkTable[]={0x00,0x00,/*0x00,0x00,*/0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x0c,0x0d,0x08
             -,0x0e,0x0b,0x09,0x0a,0x10,0x11,0x12,0x13,0x16,0x17,0x18,0x1c,0x14,0x09,0x15,0x19,0x1a,0x1b,0x1f,0x20,0x21};
 112            #endif
 113          #endif                 // 0   1            2    3    4       5    6    7      8 9   10     11   12  13   14   15     16 17  
             - 18    19      20   21    22    23   24    25    26   27    28   29    30    31    32
 114          
 115          #ifdef USE_CAMD 
              CODE unsigned char JumpTable[]={CAM_QUAD,SEQ,CAM_AB,CAM_CR,CAM_AR,CAM_RB,CAM_AC,CAM_CB,CAM_RAB_T,CAM_RAB_H
             -,CAM_RC,CAM_A,CAM_B,CAM_C,CAM_R,CAM_D};
              #else
 118            #ifdef HTRV
                CODE unsigned char JumpTable[]={CAM_QUAD,SEQ,CAM_AB,CAM_CR,CAM_AR,CAM_RB,CAM_AC,CAM_CB,CAM_RAB_T,CAM_RAB_
             -H,CAM_RC,CAM_A,CAM_B,CAM_C,CAM_R};
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 84  

                #else
 121            CODE unsigned char JumpTable[]={CAM_QUAD,SEQ,CAM_AB,CAM_CR,CAM_AR,CAM_RB,CAM_AC,CAM_CB,CAM_RAB_T,CAM_RAB_
             -H,CAM_A,CAM_B,CAM_C,CAM_R};
 122            #endif
 123          #endif
 124          
 125          #ifdef HTRV
                #if 1  //Pinchi 20150825 add for HTRV
                CODE unsigned char RearTable[]={CAM_R,CAM_AR,CAM_RB,CAM_RAB_T,CAM_RAB_H,CAM_RC};
                #else
                CODE unsigned char RearTable[]={CAM_R,CAM_AR,CAM_RB,CAM_CR,CAM_RAB_T,CAM_RAC_T,CAM_RBC_T,CAM_RAB_H,CAM_RC
             -,CAM_RAC_T2,CAM_RBC_T2};
                #endif
              #else
 132          CODE unsigned char RearTable[]={CAM_R,CAM_AR,CAM_RB,CAM_CR,CAM_RAB_T,CAM_RAC_T,CAM_RBC_T,CAM_RAB_H,CAM_RAC
             -_T2,CAM_RBC_T2};
 133          #endif
 134            
 135          #ifdef AWT_ML072Q
              CODE unsigned char LeftTable[]={CAM_A,CAM_AB,CAM_AC,CAM_AR,CAM_ABC,CAM_ABR,CAM_ACR};  
              CODE unsigned char RightTable[]={CAM_B,CAM_BA,CAM_BC,CAM_BR,CAM_BAC,CAM_BAR,CAM_BCR};
              CODE unsigned char TriggerC_Table[]={CAM_C,CAM_CA,CAM_CB,CAM_CR,CAM_CAB,CAM_CAR,CAM_CBR};
              #else
 140          CODE unsigned char RightTable[]={CAM_B,CAM_RB,CAM_ABR_T4,CAM_BA};
 141          CODE unsigned char LeftTable[]={CAM_A,CAM_AR,CAM_ABR_T3,CAM_AB};
 142          #endif
 143          
 144          #ifdef USE_CAMD 
              CODE unsigned char SEQTable[]={CAM_A,CAM_B,CAM_C,CAM_R,CAM_D};  //SEQ   
              #else
 147          CODE unsigned char SEQTable[]={CAM_A,CAM_B,CAM_C,CAM_R};  //SEQ   
 148          #endif
 149          
 150          CODE unsigned char JumpTable_S[]={CAM_A,CAM_B,CAM_C,/*CAM_R,*/SEQ};
 151          
 152          //CODE unsigned char PriorityOffSelTable[]={CAM_A,CAM_B,CAM_C,CAM_R,CAM_D,VGAMode}; //Priority Off table
 153          //CODE unsigned char PriorityOffParkTable[]={CAM_A,CAM_B,CAM_C,CAM_R,CAM_D,VGAMode,AVMode}; //Priority Off
             - table
 154          
 155          BYTE TriggerFlag;
 156          BYTE NowModeState;
 157          BYTE TimeStep;
 158          BYTE SEQFlag;
 159          BYTE SEQIndex;
 160          //extern SourceModeType SelectModeType;
 161          BYTE TriggerMode;
 162          BYTE SelectBoxMode=0;
 163          BYTE SelectBoxADC;
 164          bit ParkFlag;
 165          bit AVFlag=0;
 166          bit VGAAudio=0;
 167          
 168          extern bit ChangeKey;
 169          
 170          extern BYTE CAM_QUAD_TO;
 171          
 172          extern BYTE TR_JUMP_HOLD;//ryan@20170912
 173          extern BYTE TR_JUMP_Flag;//ryan@20170912
 174          extern BYTE RELEASE_TR_JUMP_Flag;//ryan@20170912
 175          BYTE AV_MODE_DELAY=0xff;
 176          
 177          extern bit  JUMPAVFlag;
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 85  

 178          extern BYTE TriggerStatus;
 179          extern BYTE BookMarkState;
 180          extern BYTE ReverseModeFlag;//william-v1.43-970402
 181          
 182          #ifdef HTRV  //Pinchi 20150825 add model #define
              extern BYTE GaugeVStart;
              extern BYTE GaugeSetup;  //Pinchi 20150827 add
              extern BYTE GaugeInfoOSD;  //Pinchi 20151209 add
              #endif
 187          extern CODE BYTE Init_Osd_DisplayInput[];  //Pinchi 20140924 add
 188          extern CODE BYTE Init_Osd_DisplayGAUGEWindow[];  //Pinchi 20140924 add
 189          extern CODE BYTE Init_Osd_DisplayInput_M[];  //Pinchi 20140925 add
 190          
 191          extern BYTE displayhold_flag;  //Pinchi 20150319 add
 192          extern BYTE VInputStd;  //Pinchi 20141028 add
 193          
 194          #ifdef AWT_NO_SIGNAL_MSG  //Pinchi 20150320 add
 195          extern bit IsDrawNoVideoSignal;
 196          #endif
 197          
 198          #ifdef SUPPORT_AC_ON_REDUCE_TIME  //Pinchi 20150903 add
 199          extern bit IsFirstRunfromAC;
 200          #endif
 201          
 202          extern bit  DisplayInputHold; //ryan@20170921
 203          
 204          extern BYTE bLastTrigger;  
 205          
 206          extern BYTE InitVideoDataSrc;
 207          
 208          /*------------------------------*/
 209          /*    選擇SourceMode顯示畫面    */
 210          /*------------------------------*/
 211          #ifdef AWT_ML072S
 212          #else
              void SetSourceMode(BYTE Index,char attr0,char attr1,char attr2,char attr3)
              {   
                switch(Index)
                {
                  case CAM_A:
                  case CAM_B: 
                  case CAM_C:
                  case CAM_R:
                  case CAM_AB:
                  case CAM_CR:
                  case CAM_AR:
                  case CAM_RB:
                  case CAM_AC:
                  case CAM_CB:
                  case CAM_RAB_T:
                  case CAM_RAB_H:
              
                  #ifdef HTRV
                  case CAM_RC:
                  #endif
              
                  case CAM_QUAD:
                  case CAM_ABR_T3:
                  case CAM_ABR_T4:
                  case CAM_RAC_T:
                  case CAM_RBC_T:
                  case CAM_RAC_T2:
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 86  

                  case CAM_RBC_T2:
                  case CAM_BA:
                  case CAM_BC:
                  case CAM_BR:
                  case CAM_CA:
                  case CAM_ABC:
                  case CAM_ABR:
                  case CAM_ACR:
                  case CAM_BAC:
                  case CAM_BAR:
                  case CAM_BCR:
                  case CAM_CAB:
                  case CAM_CAR:
                  case CAM_CBR:
              
                  #ifdef AWT_SUPPORT_4_3_SCREEN//ryan@20170907
                  //Printf("\r\n[MSG]SetSourceMode() => CAM to 16:9");  //pinchi test
                  WriteDecoder(0x0a,0x16); ///_FULLPANEL_20140313_xx
                  WriteDecoder(0x61,0x80);
                  WriteDecoder(0x66,0x00);
                   #endif 
                   
                  TW2835Command(ParkTable[Index],attr0,attr1,attr2,attr3);
                  ChangeInput(CH_TW2835);
                  AV_MODE_DELAY=0;
                  //TW2835Cmd("\n\rtouch 1\n\r");
                  //TW2835Cmd("\n\ravout 0\n\r");
                  //AVOutPutSelect=0;
              
              #ifdef HTRV_SUPPORT_4_3_SCREEN  //Pinchi 20151209 add
                #ifdef HTRV
                  #if 1  //Pinchi 20150901 add GaugeSetup condition
                  if ((Index == CAM_RC) || (GaugeSetup == 1))
                  #else
                  if(Index==CAM_RC)
                  #endif
                  {
                  #ifdef HTRV_REDUCE_SCREEN_CHANGE  //Pinchi 20150828 add
                    if (ReadDecoder(0x66) == 0x00)
                  #endif
                  #if 1  //Pinchi 20150826 change the setting for 4:3
                    {
                      Printf("\r\n[MSG]SetSourceMode() => CAM_RC to 4:3");  //pinchi test
                      WriteDecoder(0x0a,0x13); 
                      WriteDecoder(0x61,0xa6);
                      WriteDecoder(0x66,0x60);
                    }
                  #else
                    WriteDecoder(0x0a,0x21); 
                    WriteDecoder(0x60,0xdf);
                    WriteDecoder(0x66,0x60);
                  #endif
                  }
                  else
                  {
                  #ifdef HTRV_REDUCE_SCREEN_CHANGE  //Pinchi 20150828 add
                    if (((Index != CAM_R) || ((Index == CAM_R) && ((TriggerFlag & 0x20) == 0)))
                    && (ReadDecoder(0x66) == 0x60))
                  #endif
                    {
                       Printf("\r\n[MSG]SetSourceMode() => CAM to 16:9");  //pinchi test
                       WriteDecoder(0x0a,0x16); ///_FULLPANEL_20140313_xx
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 87  

                       WriteDecoder(0x61,0x80);
                       WriteDecoder(0x66,0x00);
                    }
                  }
                #endif
              #endif
              
                #if 0
                  if(Index==CAM_RC)
                    {
                    WriteDecoder(0x66,0x45);
                  ////  if(VInputStd==PAL)
                    ////  WriteDecoder(0x61,0xf7);
                    ////else
                      WriteDecoder(0x61,0xfa);
                  ////  CAM_RCFlag=1;
                    }
                  else
                    {   
                  ////  CAM_RCFlag=0;
                    WriteDecoder(0x66,0x00);
                    WriteDecoder(0x61,0xb1);
                    }
                #endif  
                  break;
              
                #ifdef SUPPORT_PC  //Pinchi 20150319 add
                   case VGAMode:  
                    //TW2835Cmd("\n\rtouch 0\n\r");
                    //TW2835Cmd("\n\ravout 1\n\r"); 
                    ChangeInput(PC);
                    //AVOutPutSelect=1;
                    break;
                #endif
              
                #ifdef USE_CAMD 
                  case CAM_D:
                    ChangeInput(CH_CAMD);
                    //TW2835Cmd("\n\rtouch 1\n\r");
                    //TW2835Cmd("\n\ravout 0\n\r");
                    //AVOutPutSelect=0;
                    break;
                #endif
              
                  case AVMode:
              
                      if(AV_MODE_DELAY==0xff)
                      {
                      AV_MODE_DELAY=0;
                      ChangeInput(CH_AV);
                      AV_MODE_DELAY=1;    
                      }
                      else
                      {
                      AV_MODE_DELAY=1;  
                       ChangeInput(CH_AV);
                      
                      }
                    //TW2835Cmd("\n\rtouch 1\n\r");
                    //TW2835Cmd("\n\ravout 0\n\r");
                    //AVOutPutSelect=0;
                    break;
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 88  

              
                  case SEQ:
                    SEQIndex=0;
                    SEQFlag=1;
                    SEQTime=TimeStep;
                    break;
                }
              }
              #endif
 373          #ifdef QUAD
              void SetSelectMode(void)
              {
                BYTE Maxsource;
              
              #if 1  //Pinchi 20150826 modify for HTRV no Priority
                #ifdef HTRV
                Maxsource=CAM_RAB_H+1;
                #else 
                if(Priority)
                  Maxsource=CAM_R;
                else
                  Maxsource=CAM_RAB_H;
                #endif
              #else
                if(Priority)
                  Maxsource=CAM_R;
                else
                {
                #ifdef HTRV
                  Maxsource=CAM_RAB_H+1;
                #else
                  Maxsource=CAM_RAB_H;
                #endif
                }
              #endif
              
                  NowModeState=SelectMode;
                  SEQFlag=0;
                  TW2835Cmd("\n\rmode 0\n\r");
              
                #if 0
                // trigger AV & VGA
                  if(ParkFlag==1 && TriggerMode == VGA_TRIG)
                    {
                      if(AVFlag==0)
                      {     
                        SelectModeType=AVMode;
                      AVFlag=1;
                      }
                    else
                    {
                        if(SelectModeType>=Maxsource)
                         SelectModeType=AVMode;
                        else
                         SelectModeType++;
                    }
                    }
                //trigger AV
                else
                #endif
              
              #ifdef HTRV  //Pinchi 20150826 add
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 89  

                if (ParkFlag==1 /*&& TriggerMode!=VGA_TRIG*/)
                {
                    if(AVFlag==0)
                    {
                      SelectModeType=AVMode;
                    AVFlag=1;
                    }
                  else
                  {
                      if(SelectModeType>=Maxsource)
                      SelectModeType = CAM_A;  //Pinchi 20150827 change to CAM_A by follow HTRV spec.
                    else if (SelectModeType == CAM_R)  //Pinchi 20150827 add by follow HTRV spec.
                      SelectModeType=AVMode;
                    else if (SelectModeType==AVMode)
                    {
                    #ifdef USE_CAMD   
                      SelectModeType=CAM_D; 
                    #else
                      SelectModeType=CAM_AB;  //Pinchi 20150826 change to CAM_AB by follow HTRV spec.
                    #endif  
                    }
                      else
                      SelectModeType++;
                  }
                }
                #if 0 
                //trigger VGA
                else if (ParkFlag==0 && TriggerMode==VGA_TRIG)
                  {
                  if(SelectModeType>=Maxsource)
                    SelectModeType=VGAMode;
                  else
                    SelectModeType++;
                  }
                #endif  
                //no trigger
                  else
              #endif  //#ifdef HTRV
                  {
                      if(SelectModeType>=Maxsource)
                      {
                    #ifdef USE_CAMD   
                    SelectModeType=CAM_D; 
                  #else
                //>>>>>>>>>>>>>>>>>>>>>>>>>   //william @20130813
                    #ifdef AWT_ML072Q   
                        #if 0 //def HTRV  //Pinchi 20150826 disable for duplicate setting
                        SelectModeType=CAM_A;
                        #else
                          if (Priority == 0)  //Pinchi 20140911 add for AWT ML072Q
                        SelectModeType = CAM_A;
                        else
                        SelectModeType = AVMode;
                        #endif
                    #else
                //<<<<<<<<<<<<<<<<<<<<<<<<< 
                    SelectModeType=CAM_A;
                    #endif
                  #endif
                   }
                   else
                   {
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 90  

                  #ifdef AWT_ML072Q  //Pinchi 20140911 add for AWT ML072Q
                    if (Priority == 0)  //Priority=ON
                    {
                      if (SelectModeType == AVMode)
                      {
                        SelectModeType = CAM_AB;
                      #ifdef AWT_NO_SIGNAL_MSG  //Pinchi 20150320 add
                        IsDrawNoVideoSignal = 0;
                        #endif
                      }
                      else if (SelectModeType == CAM_R)
                        SelectModeType = AVMode;
                      else
                        SelectModeType++;
                    }
                    else
                  #endif
                    #if 0
                    {
                      if (SelectModeType == AVMode)
                        SelectModeType = CAM_A;
                      else
                        SelectModeType++;
                    }
                    #endif
                    {
                    #ifdef AWT_NO_SIGNAL_MSG  //Pinchi 20150320 add
                      if (SelectModeType == AVMode)
                      {
                        IsDrawNoVideoSignal = 0;
                        }
                    #endif
                        SelectModeType++;
                    }
                   }
                  }
              #if 0  //pinchi test
                 if (ReadEEP(EEP_COSDMode) !=0 )  //Pinchi 20141014 add for AWT ML072Q
                 {
                    dPressSelectTime = SystemClock;
                  IsPressSelectKey = 1;
                 }
              #endif
                 SetSourceMode(SelectModeType,Attr_A,Attr_B,Attr_C,Attr_R); 
              
               #if 1//ryan@20170906
               
                  WriteEEP(EEP_SelectMode,SelectModeType);
              
               #else
                 if(!(SelectModeType==AVMode/*||SelectModeType==VGAMode*/))
                 {
                    WriteEEP(EEP_SelectMode,SelectModeType);
                 }
                #endif
              
                WriteEEP(EEP_NowModeState,NowModeState);
                 
              #if 1  //Pinchi 20141024 modify
                if (ReadEEP(EEP_COSDMode) == 1)
                  displayhold_flag = 3;
              #else
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 91  

                if (ReadEEP(EEP_COSDMode) == 1)  //Pinchi 20141024 modify to display AV 2s
                {
                  if (SelectModeType == AVMode)
                    displayhold_flag = 4;
                  else
                    displayhold_flag = 3;
                }
              #endif
                 // Printf("\r\nSelectModeType=%d",(WORD)SelectModeType);
              }
              
              #else
 562          void SetSelectMode(void)
 563          {
 564   1        
 565   1          NowModeState=SelectMode;
 566   1          if(SEQFlag==1)
 567   1          {
 568   2              SEQFlag=0;    
 569   2               //ParkIndex=ParkIndex1;
 570   2             CheckSourceMode(SelectModeType);
 571   2             return;
 572   2          }   
 573   1          //william-v1.0-970718>>>>>>>>>>>>>>>>>>>>>>
 574   1          //push source cancel jump mode 
 575   1      #if 1 
 576   1          
 577   1          
 578   1        if(ParkFlag)
 579   1        {
 580   2        
 581   2          if(AVFlag==0)
 582   2          {
 583   3                  if(SelectModeType!=SOURCE_AV)//andy-980428
 584   3               //ParkIndex1=ParkIndex;  //wiiliam-v1.0-970804
 585   3            SelectModeType=SOURCE_AV;
 586   3            AVFlag=1;
 587   3            CheckSourceMode(SelectModeType);
 588   3          }
 589   2          else
 590   2          {
 591   3          #ifdef AWT_ML072S 
 592   3              #ifdef HS
 593   3            if(SelectModeType==1)
 594   3                SelectModeType=4; 
 595   3            else if(SelectModeType==4)
 596   3                SelectModeType=2; 
 597   3            else if(SelectModeType==2)
 598   3                SelectModeType=3; 
 599   3            //if(SelectModeType<4)        
 600   3              #else       
                    if(SelectModeType<3)
                      #endif
 603   3          #else
                    if(SelectModeType<4)
                  #endif
 606   3              //SelectModeType++;
 607   3             else
 608   3             SelectModeType=1;
 609   3            // ParkIndex1=ParkIndex;  //wiiliam-v1.0-970804
 610   3              CheckSourceMode(SelectModeType);
 611   3          }
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 92  

 612   2      
 613   2             #ifdef Hs_debug
 614   2             Printf("\r\n (*ParkFlag=1)");
 615   2             #endif
 616   2          
 617   2        }
 618   1      #endif
 619   1        //william-ml072s-971230
 620   1        else
 621   1        {
 622   2          
 623   2            //sourceindex CAM A-->CAM B-->CAM R
 624   2            #ifdef HS
 625   2            if(SelectModeType==1)
 626   2                SelectModeType=4; 
 627   2            else if(SelectModeType==4)
 628   2                SelectModeType=2; 
 629   2            else
 630   2                SelectModeType=1;
 631   2          #else
                    #ifdef AWT_ML072S
                    if(SelectModeType<2)
                  #else
                    if(SelectModeType<3)
                  #endif
                      SelectModeType++;
                     else
                      SelectModeType=1;
                  #endif
 641   2            
 642   2             
 643   2             //ParkIndex1=ParkIndex;  //wiiliam-v1.0-970804
 644   2              CheckSourceMode(SelectModeType);
 645   2      
 646   2             #ifdef Hs_debug
 647   2             Printf("\r\n (**ParkFlag=0)");
 648   2             #endif
 649   2        
 650   2        }
 651   1      
 652   1        if(!(SelectModeType==SOURCE_AV/*||SelectModeType==VGAMode*/))
 653   1            {WriteEEP(EEP_SelectMode,SelectModeType);}
 654   1          WriteEEP(EEP_NowModeState,NowModeState);
 655   1      }
 656          
 657          /*------------------------------*/
 658          /*    選擇SourceMode顯示畫面    */
 659          /*------------------------------*/
 660          //         Bit3  Bit2  Bit1  Bit0
 661          //Attr_x=> Tigger   Tigger     OSD ON/OFF      MH 
 662          void CheckSourceMode(BYTE sorce)
 663          {
 664   1      
 665   1        switch(sorce)
 666   1        {
 667   2          case SOURCE_A:
 668   2            #ifdef Hs_debug
 669   2            Printf("\r\n****ChangeInput(Source_A); ");
 670   2            #endif    
 671   2            ChangeInput(COMPOSITE1); 
 672   2            break;
 673   2      
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 93  

 674   2          #ifndef AWT_ML072S
                    case SOURCE_B:
                      #ifdef Hs_debug
                      Printf("\r\n****ChangeInput(SOURCE_B); ");
                      #endif
                    ChangeInput(COMPOSITE2);
                    break;
                  #endif
 682   2      
 683   2          #ifdef  HS
 684   2            case SOURCE_B:
 685   2              #ifdef Hs_debug
 686   2              Printf("\r\n****ChangeInput(SOURCE_B); ");
 687   2              #endif
 688   2            ChangeInput(COMPOSITE4);
 689   2            break;
 690   2          #endif
 691   2          
 692   2          case SOURCE_R:
 693   2          #ifdef AWT_ML072S 
 694   2              #ifdef Hs_debug     
 695   2              Printf("\r\n****ChangeInput(SOURCE_R); ");
 696   2              #endif
 697   2            ChangeInput(COMPOSITE2); 
 698   2          #else
                    ChangeInput(COMPOSITE3); 
                  #endif
 701   2            break;
 702   2      
 703   2          case SOURCE_AV:
 704   2          #ifdef AWT_ML072S
 705   2              #ifdef Hs_debug     
 706   2              Printf("\r\n****ChangeInput(SOURCE_AV); ");
 707   2              #endif
 708   2            ChangeInput(COMPOSITE3); 
 709   2          #else
                    ChangeInput(COMPOSITE4); 
                  #endif
 712   2            break;
 713   2      
 714   2          case SEQ:
 715   2            SEQIndex=0;
 716   2            SEQFlag=1;
 717   2            SEQTime=TimeStep;
 718   2            DisplayInput();
 719   2            break;
 720   2        }
 721   1      
 722   1      // if(ParkTime<10)
 723   1       //{
 724   1        if(!(SelectModeType==SOURCE_AV))
 725   1          WriteEEP(EEP_SelectMode,SelectModeType); 
 726   1        
 727   1        Printf("\r\nSelectModeType=%d",(WORD)SelectModeType);
 728   1      
 729   1       //WriteEEP(EEP_SourceModebuf,ParkIndex1);    //william-v1.0-970804
 730   1       //}
 731   1      //CheckMirror();
 732   1      
 733   1      //DisplayHandler();   //william-v1.0-970725
 734   1      //LCDPowerON(0);//WILLIAM-V1.42-961204
 735   1      
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 94  

 736   1      #if 0
              //william-v1.0-971112>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
              if(Gaugeflag==1)                                    //當設定為單一畫面CAM R時切換成4:3   
                    {
                           WriteDecoder(0x0a,0x21); //william-v1.0-971112 
                           WriteDecoder(0x60,0xdf);
                           WriteDecoder(0x66,0x60);   
                     }
              else
                ChangeMode16_9();
              #endif
 747   1        //william-v1.0-970716>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 748   1      }
 749          #endif
 750          
 751          void SEQMode(void)
 752          {
 753   1      #ifdef AWT_ML072S  //Pinchi add for compiler warning
 754   1        #ifdef HS
 755   1        #else
                BYTE val;
                #endif
 758   1      #endif
 759   1      
 760   1      #ifdef QUAD
                SetSourceMode(SEQTable[SEQIndex],Attr_A,Attr_B,Attr_C,Attr_R);
              #else
 763   1        CheckSourceMode(SEQIndex);
 764   1      #endif
 765   1      #ifdef HS
 766   1      
 767   1      if(SEQIndex==1)
 768   1        SEQIndex=4;
 769   1      else if(SEQIndex==4)
 770   1        SEQIndex=2;
 771   1      else if((SEQIndex==2)&&(!JUMPAVFlag&&PARK_T))
 772   1        SEQIndex=3;
 773   1      else
 774   1        SEQIndex=1;
 775   1      
 776   1      
 777   1      #else
              #ifdef USE_CAMD 
                if(SEQIndex<4)
              #else
                #ifdef AWT_ML072S   //william @20130902 v1.0.1.2
                  if(!JUMPAVFlag&&PARK_T)
                    val=SOURCE_AV;
                  else
                    val=SOURCE_R;
                
                  if(SEQIndex<val)
                #else
                  if(SEQIndex<3)
                #endif
              #endif
                  SEQIndex++;
                else
              #ifdef QUAD   
                  SEQIndex=0;
              #else 
                  SEQIndex=1;
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 95  

              #endif
              
              #endif
 801   1      }
 802          
 803          void SetJumpMode(void)
 804          {
 805   1         BYTE val;
 806   1        //Printf("\r\nNowModeState",(WORD)NowModeState);
 807   1         if(NowModeState==JumpMode)
 808   1         {   
 809   2         val=ReadEEP(EEP_JUMPMode);
 810   2      #ifdef QUAD  
                 if(val==0x01)
                  TW2835Cmd("\n\rmode 2\n\r");
                 else
                    TW2835Cmd("\n\rmode 1\n\r");
                   SetSourceMode(JumpTable[val],Attr_A,Attr_B,Attr_C,Attr_R);
              #else
 817   2        #ifdef AWT_ML072S
 818   2          CheckSourceMode(SEQ);
 819   2        #else
                  CheckSourceMode(JumpTable_S[val]);
                #endif  
 822   2      #endif
 823   2          } 
 824   1         else
 825   1          {
 826   2            //NowModeState=SelectMode;
 827   2          SEQFlag=0;
 828   2        #ifdef QUAD
                    TW2835Cmd("\n\rmode 0\n\r");
                  SetSourceMode(SelectModeType,Attr_A,Attr_B,Attr_C,Attr_R); 
                #else
 832   2          CheckSourceMode(SelectModeType);
 833   2      
 834   2          #ifdef AWT_ML072S
 835   2          WriteStringToAddr(INPUTINFO_ADDR+9," " ,1); 
 836   2          #else
                  WriteStringToAddr(INPUTINFO_ADDR+8," " ,1); 
                  #endif
 839   2        #endif
 840   2          }
 841   1          WriteEEP(EEP_NowModeState,NowModeState);
 842   1      
 843   1      #if 1  //Pinchi 20141024 modify
 844   1        if (ReadEEP(EEP_COSDMode) == 1)
 845   1          displayhold_flag = 3;
 846   1      #endif
 847   1      }
 848          
 849          #ifndef QUAD
 850          /*-----------------------------------------*/
 851          /*                CHECK MIRROR MODE                       */
 852          /*-----------------------------------------*/
 853          void CheckMirror(void)
 854          {
 855   1      BYTE val;
 856   1      
 857   1      switch(InputSelection)
 858   1        {
 859   2        case SOURCE_A:
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 96  

 860   2        val=ReadEEP(EEP_CAMAMode);
 861   2         if(val==0)
 862   2          {
 863   3          WriteDecoder(0xff, 0x01);
 864   3          Wait_ms(5);
 865   3          //WriteDecoder(0x82, 0x0d);
 866   3          WriteDecoder(0x82, 0x00);////mirror mode
 867   3          Wait_ms(5);
 868   3          WriteDecoder(0xff, 0x00);
 869   3      
 870   3          }
 871   2         else 
 872   2          {
 873   3          WriteDecoder(0xff, 0x01);
 874   3          Wait_ms(5);
 875   3          //WriteDecoder(0x82, 0x0c);
 876   3          WriteDecoder(0x82, 0x01);///normal mode
 877   3          Wait_ms(5);
 878   3          WriteDecoder(0xff, 0x00);
 879   3          
 880   3          }
 881   2          break;
 882   2      
 883   2        case SOURCE_B:
 884   2        val=ReadEEP(EEP_CAMBMode);
 885   2         if(val==0)
 886   2          {
 887   3          WriteDecoder(0xff, 0x01);
 888   3          Wait_ms(5);
 889   3          //WriteDecoder(0x82, 0x0d);
 890   3          WriteDecoder(0x82, 0x00);
 891   3          Wait_ms(5);
 892   3          WriteDecoder(0xff, 0x00);
 893   3          }
 894   2         else 
 895   2          {
 896   3          WriteDecoder(0xff, 0x01);
 897   3          Wait_ms(5);
 898   3          //WriteDecoder(0x82, 0x0c);
 899   3          WriteDecoder(0x82, 0x01);
 900   3          Wait_ms(5);
 901   3          WriteDecoder(0xff, 0x00);
 902   3          }
 903   2          break;
 904   2        
 905   2        case SOURCE_R:
 906   2        val=ReadEEP(EEP_CAMRMode);
 907   2         if(val==0)
 908   2          {
 909   3          WriteDecoder(0xff, 0x01);
 910   3          Wait_ms(5);
 911   3          //WriteDecoder(0x82, 0x0d);
 912   3          WriteDecoder(0x82, 0x00);
 913   3          Wait_ms(5);
 914   3          WriteDecoder(0xff, 0x00);
 915   3      
 916   3      
 917   3          }
 918   2         else 
 919   2          {
 920   3          WriteDecoder(0xff, 0x01);
 921   3          Wait_ms(5);
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 97  

 922   3          //WriteDecoder(0x82, 0x0c);
 923   3          WriteDecoder(0x82, 0x01);
 924   3          Wait_ms(5);
 925   3          WriteDecoder(0xff, 0x00);
 926   3      
 927   3          }
 928   2          break;
 929   2         
 930   2          case SOURCE_AV:
 931   2          WriteDecoder(0xff, 0x01);
 932   2          Wait_ms(5);
 933   2          //WriteDecoder(0x82, 0x0c);
 934   2          WriteDecoder(0x82, 0x01);
 935   2          Wait_ms(5);
 936   2          WriteDecoder(0xff, 0x00);
 937   2          break;
 938   2        }
 939   1      }
 940          #endif
 941          
 942          void SetNowMode(void)
 943          {
 944   1        BYTE val;
 945   1          Printf("\r\n[MSG]SetNowMode()=> NowModeState=%02x",(WORD)NowModeState);
 946   1        if(NowModeState==SelectMode)
 947   1        {
 948   2        #ifdef QUAD
                    TW2835Cmd("\n\rmode 0\n\r");
                  SetSourceMode(SelectModeType,Attr_A,Attr_B,Attr_C,Attr_R); 
                #else
 952   2          CheckSourceMode(SelectModeType);
 953   2        #endif
 954   2          SEQFlag=0;
 955   2        }
 956   1        else
 957   1        {
 958   2          val=ReadEEP(EEP_JUMPMode);
 959   2        #ifdef QUAD 
                  if(val==0x01)
                    TW2835Cmd("\n\rmode 2\n\r");
                  else
                    TW2835Cmd("\n\rmode 1\n\r");
                  
                    SetSourceMode(JumpTable[val],Attr_A,Attr_B,Attr_C,Attr_R);
                #else
 967   2          CheckSourceMode(JumpTable_S[val]);
 968   2        #endif
 969   2        }     
 970   1      }
 971          
 972          void SetRearSource(void)
 973          { 
 974   1        #ifdef AWT_ML072Q
                BYTE rev;
                #endif
 977   1      #ifdef QUAD
                 rev=ReadEEP(EEP_RearMode);
                 SetSourceMode(RearTable[rev],0x02|(Attr_A&0x01),0x02|(Attr_B&0x01),0x02|(Attr_C&0x01),0x0E|(Attr_R&0x01
             -));
              #else
 981   1        ChangeInput(SOURCE_R); 
 982   1      #endif
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 98  

 983   1      
 984   1      //  Printf("\r\n[MSG]SetRearSource() => ReverseModeFlag=%bx ,RearTable[rev]=%bx",ReverseModeFlag,RearTable[
             -rev]);  //pinchi test
 985   1      
 986   1      #ifdef AWT_ML072Q
                if(ReverseModeFlag==1 && RearTable[rev]==CAM_R)
              #else
 989   1            #ifdef HTRV  //Pinchi 20150827 change condition for HTRV
                    if (RearTable[rev] == CAM_R)
                    #else
 992   1            if(ReverseModeFlag==1)
 993   1            #endif
 994   1      #endif
 995   1        {
 996   2        #ifdef QUAD  //Pinchi 20150827 add
                  #ifdef HTRV_SUPPORT_4_3_SCREEN  //Pinchi 20151209 add
                  #ifdef HTRV_REDUCE_SCREEN_CHANGE  //Pinchi 20150828 add
                  if (ReadDecoder(0x66) == 0x00)
                  #endif
                    {
                    WriteDecoder(0x0a,0x13); 
                    WriteDecoder(0x61,0xa6);
                    WriteDecoder(0x66,0x60);//<William-960905>  
                  //  Printf("\r\n[MSG]SetRearSource() => Reverse trigger to 4:3 & ReadDecoder(0x0a)=%bx , ReadDecoder(0x66
             -)=%bx",ReadDecoder(0x0a),ReadDecoder(0x66));  //pinchi test
                  }
                  #endif
              
                  #ifdef AWT_SUPPORT_4_3_SCREEN//Pinchi 20151209 add
                  if (ReadDecoder(0x66) == 0x00)
                    {
                    WriteDecoder(0x0a,0x13); 
                    WriteDecoder(0x61,0xa6);
                    WriteDecoder(0x66,0x60);//<William-960905>  
                  //  Printf("\r\n[MSG]SetRearSource() => Reverse trigger to 4:3 & ReadDecoder(0x0a)=%bx , ReadDecoder(0x66
             -)=%bx",ReadDecoder(0x0a),ReadDecoder(0x66));  //pinchi test
                  }
                  #endif
              
              
              
                  
                  Printf("\r\n[MSG]SetRearSource() => Reverse trigger & keep 16:9 ,ReadDecoder(0x66)=%bx",ReadDecoder(0x6
             -6));  //pinchi test
                #else
1024   2      
1025   2      #if 1//ryan@20180122
1026   2          if(InitVideoDataSrc==PAL)
1027   2            {
1028   3            WriteDecoder(0x61,0xa2);
1029   3            WriteDecoder(0x66,0x5A);
1030   3            WriteDecoder(0xB5,0x45);
1031   3            }
1032   2          else
1033   2            {   
1034   3          WriteDecoder(0x0a,0x13); 
1035   3          WriteDecoder(0x61,0xa9);
1036   3          WriteDecoder(0x66,0x50);
1037   3          WriteDecoder(0xB5,0x1A);
1038   3            }
1039   2      #else
                  WriteDecoder(0x0a,0x13); 
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 99  

                  WriteDecoder(0x61,0xac);
                  WriteDecoder(0x66,0x60);//<William-960905>  
              #endif
1044   2            //WriteDecoder(0x66,0x50);
1045   2        
1046   2        #endif
1047   2        }
1048   1      
1049   1      #if 1  //Pinchi add   
1050   1         if( ReadEEP(EEP_GAUGEMode)==0 && ReadEEP(EEP_RearMode)==0)
1051   1            DisplayGaugeOSD();
1052   1      #endif 
1053   1      }
1054          
1055          void SetLeftSource(void)
1056          {
1057   1      #ifdef QUAD 
                  BYTE rev;
              
                #ifdef AWT_ML072Q
                    rev=ReadEEP(EEP_IMAGE_A_Mode);
                #else
                    rev=ReadEEP(EEP_IMAGEMode);
                #endif
                    SetSourceMode(LeftTable[rev],0x06|(Attr_A&0x01),0x02|(Attr_B&0x01),0x02|(Attr_C&0x01),0x02|(Attr_R&0x
             -01));
              #else
1067   1        ChangeInput(SOURCE_A); 
1068   1      #endif
1069   1      }
1070          
1071          void SetRightSource(void)
1072          {
1073   1      #ifdef QUAD
                  BYTE rev;
                #ifdef AWT_ML072Q
                    rev=ReadEEP(EEP_IMAGE_B_Mode);
                #else
                    rev=ReadEEP(EEP_IMAGEMode);
                #endif
                    SetSourceMode(RightTable[rev],0x02|(Attr_A&0x01),0x0A|(Attr_B&0x01),0x02|(Attr_C&0x01),0x02|(Attr_R&0
             -x01));
              #else
1082   1        ChangeInput(SOURCE_B); 
1083   1      #endif
1084   1      }
1085          
1086          #ifdef AWT_ML072Q  //Pinchi 20150826 add
              void SetTriggerCSource(void)
              {
                  BYTE rev;
                rev=ReadEEP(EEP_IMAGE_C_Mode);
              #ifdef AWT_ML072Q
              
                  Wait_ms(500);///延遲顯示 ryan@20171019
              
              //  #if 1  //Pinchi 20140925 modify for trigger C setting of AWT ML072Q
                #ifdef AWT_TW2835_DRAW_T_ICON  //Pinchi 20150415 add to draw T icon by TW2835 when CAM C trigger
               //   SetSourceMode(TriggerC_Table[rev],0x02|(Attr_A&0x01),0x0A|(Attr_B&0x01),0x02|(Attr_C&0x01),0x02|(Att
             -r_R&0x01));
                  SetSourceMode(TriggerC_Table[rev],0x02|(Attr_A&0x01),0x02|(Attr_B&0x01),0x22|(Attr_C&0x01),0x02|(Attr_
             -R&0x01));
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 100 

                #else
                  SetSourceMode(TriggerC_Table[rev],0x02|(Attr_A&0x01),0x02|(Attr_B&0x01),0x02|(Attr_C&0x01),0x02|(Attr_
             -R&0x01));
              
                //Pinchi 20140925 add for trigger C display char of AWT ML072Q 
                ClearOSDInfo();
                InitOSDWindow(Init_Osd_DisplayInput_M);
              
                ClearDataCnt(INPUTINFO_ADDR , 4); // Total 42 Char.
                SetDisplayedOSD(INPUTINFO);
                DrawAttrCnt(INPUTINFO_ADDR , Trigger_COLOR , 4 );  
                WriteStringToAddr(INPUTINFO_ADDR ,"T" , 1); 
              
                  ShowOSDWindow(INPUTINFO_OSDWIN-1 , TRUE);
                  ShowOSDWindowAll(1);  //0x09c  第4bit : OSD ON, 1: OSD OFF
                  WriteTW88(TW88_WINBLENDING,0x08);
                #endif
              #else
                  SetSourceMode(CAM_C,Attr_A,Attr_B,Attr_C,Attr_R);
              #endif
              }
              #endif
1120          
1121          #ifdef SUPPORT_NEW_TRIGGER_FUNCTION
1122          
1123          BYTE CheckTrigger(void)
1124          {
1125   1      BYTE TriggerFlagtemp;
1126   1      
1127   1      #ifdef HS
1128   1      static BYTE /*PT=0,POT=0,POTF=0,*/CPON=0,PPON=0/*,BT[4]={0,0,0,0}*/;
1129   1      BYTE x;
1130   1      
1131   1      TriggerFlagtemp=TriggerFlag;
1132   1          TriggerFlag=0x00;
1133   1      
1134   1       LEFT_T=1;
1135   1         if(LEFT_T==0)
1136   1         {
1137   2            Wait_ms(2);
1138   2          if(LEFT_T==0)
1139   2            TriggerFlag=TriggerFlag|0x80;   
1140   2         }
1141   1      
1142   1         Right_T=1;
1143   1         if(Right_T==0)
1144   1         {
1145   2            Wait_ms(2);
1146   2          if(Right_T==0)
1147   2            TriggerFlag=TriggerFlag|0x40;  
1148   2         }
1149   1      
1150   1         REVERSE_T=1;
1151   1         if(REVERSE_T==0)
1152   1         {
1153   2            Wait_ms(2);
1154   2          if(REVERSE_T==0)
1155   2            TriggerFlag=TriggerFlag|0x20;  
1156   2         }
1157   1         
1158   1         if(PARK_T==1)
1159   1          {
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 101 

1160   2             Wait_ms(2);
1161   2              if(PARK_T==1)
1162   2            TriggerFlag=TriggerFlag|0x01;  
1163   2          }
1164   1      
1165   1      if((TriggerFlag&(~0x01))!=TriggerFlagtemp)
1166   1      {
1167   2      
1168   2                if((TriggerFlag!=CPON))//got left trigger
1169   2                {
1170   3                  Wait_ms(50);
1171   3      
1172   3                  TriggerFlag=0;
1173   3                  
1174   3                   LEFT_T=1;
1175   3                     if(LEFT_T==0)
1176   3                     {
1177   4                      Wait_ms(2);
1178   4                      if(LEFT_T==0)
1179   4                      TriggerFlag=TriggerFlag|0x80;  
1180   4                     }
1181   3      
1182   3      
1183   3                    Right_T=1;
1184   3                     if(Right_T==0)
1185   3                     {
1186   4                      Wait_ms(2);
1187   4                      if(Right_T==0)
1188   4                      TriggerFlag=TriggerFlag|0x40;  
1189   4                     }
1190   3                  
1191   3                   REVERSE_T=1;
1192   3                   if(REVERSE_T==0)
1193   3                   {
1194   4                    Wait_ms(2);
1195   4                    if(REVERSE_T==0)
1196   4                    TriggerFlag=TriggerFlag|0x20;  
1197   4                   }
1198   3      
1199   3                   
1200   3                  }
1201   2                  else
1202   2                    {
1203   3                    TriggerFlag=PPON;
1204   3                    return PPON;
1205   3                    }
1206   2                  
1207   2              CPON=TriggerFlag;
1208   2      
1209   2              x=(TriggerFlag&0xE0);
1210   2      
1211   2               if(TriggerFlag&0x20)//rear
1212   2              {
1213   3                ;
1214   3              }
1215   2               //else if(((x==0x88)||(x==0x48)||(x==0xc8)||(x==0xc0))&&((TriggerFlagtemp)==0))
1216   2               else if((x==0xc0)&&(TriggerFlagtemp==0))
1217   2              {
1218   3              PPON=0x00;
1219   3              TriggerFlag=0x00;
1220   3              return 0x00;
1221   3              }
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 102 

1222   2            else if((x==0xA0)||(x==0x60)||(x==0xE0)||(x==0xC0))
1223   2            {
1224   3              TriggerFlag=TriggerFlagtemp;
1225   3              PPON=TriggerFlagtemp;
1226   3              
1227   3            }
1228   2            
1229   2      }
1230   1      
1231   1            if(PARK_T==0)
1232   1             TriggerFlag=TriggerFlag&(~0x01);  
1233   1             
1234   1              if(TriggerFlag&0x01==0x01)
1235   1              {
1236   2               ParkFlag=1;
1237   2              }
1238   1              else
1239   1                 ParkFlag=0;
1240   1      
1241   1      #else
                     TriggerFlag=0x00;
              
              
                LEFT_T=1;
                 REVERSE_T=1;
                  PARK_T=1;
                    
              
                 if(LEFT_T==0)
                    TriggerFlag=TriggerFlag|0x80;   
              
                 if(REVERSE_T==0)
                    TriggerFlag=TriggerFlag|0x20;  
              
                 if(PARK_T==1)
                    TriggerFlag=TriggerFlag|0x01;  
              
              TriggerFlagtemp=TriggerFlag;
              
              Wait_ms(2);
              
                 if(LEFT_T==1)
                    TriggerFlag=TriggerFlag&(~0x80);   
              
                 if(REVERSE_T==1)
                    TriggerFlag=TriggerFlag&(~0x20);  
              
              
                 if(PARK_T==0)
                    TriggerFlag=TriggerFlag&(~0x01);  
              
                   if(TriggerFlag&0x01==0x01)
                     {
                      ParkFlag=1;
                     }
                     else
                      ParkFlag=0;
              
              #endif
1281   1      
1282   1      TriggerFlag&=0xfe;///clear PARK trigger
1283   1      
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 103 

1284   1        
1285   1           
1286   1          
1287   1      return TriggerFlag;
1288   1         
1289   1      }
1290          
1291          
1292          #else 
              
              BYTE CheckTrigger(void)
              {
                BYTE TriggerFlagtemp;
              #ifdef AWT_ML072S
              static BYTE PT=0,POT=0,POTF=0/*,CPON=0,PPON=0,BT[4]={0,0,0,0}*/;
              /*BYTE x;*/
                #else 
              static BYTE PT=0,POT=0,POTF=0,CPON=0,PPON=0,BT[4]={0,0,0,0};
              BYTE x;
              #endif
              #ifdef AWT_ADD_TRIGGER_DELAY_FUN  //Pinchi 20150210 add
              //   BYTE j , num;
              #endif
              
              
              
              #ifdef AWT_ML720Q_NEW_TRIGGER_FUN  //Pinchi 20141031 add for AWT request each trigger can work by PRIORITY
             - OFF
              //  CheckNewTriggerFunc();
              #endif
              
                TriggerFlagtemp=TriggerFlag;
                  TriggerFlag=0x00;
              
                 LEFT_T=1;
                 if(LEFT_T==0)
                 {
              //    Printf("\r\nTriggerFlag=%02x",(WORD)TriggerFlag);
                    Wait_ms(2);
                  if(LEFT_T==0)
                    TriggerFlag=TriggerFlag|0x80;   
                 }
              
              #ifdef AWT_ML072Q
                 Right_T=1;
                 if(Right_T==0)
                 {
                    Wait_ms(2);
                  if(Right_T==0)
                    TriggerFlag=TriggerFlag|0x40;  
                 }
              #endif
              
                 REVERSE_T=1;
                 if(REVERSE_T==0)
                 {
                    Wait_ms(2);
                  if(REVERSE_T==0)
                    TriggerFlag=TriggerFlag|0x20;  
                 }
              
              #ifndef AWT_ML072Q
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 104 

                        PARK_T=1;
                     if(PARK_T==1)
                     {
                        Wait_ms(2);
                      if(PARK_T==1)
                        ParkFlag=1;
                     //Printf("\r\nTriggerPARK_T",0); 
                     }
                     else
                      {
                       ParkFlag=0;
                      }
              
              #endif
                 
              #if 0
                 VGA_T=1;
                 if(VGA_T==0)
                 {
                    Wait_ms(10);
                  if(VGA_T==0)
                    TriggerFlag=TriggerFlag|0x08;  
                 }
              
                  CAMD_T=1;
                 if(CAMD_T==0)
                 {
                    Wait_ms(10);
                  if(CAMD_T==0)
                    TriggerFlag=TriggerFlag|0x04;  
                 }
              #endif
              
              //#ifndef QUAD
              #ifdef AWT_ML072Q  //Pinchi 20140902 add to change condition for AWT ML072Q
              
                 CAMC_T=1;
                 if(CAMC_T==0)
                 {
                    Wait_ms(2);
                  if(CAMC_T==0)
                    TriggerFlag=TriggerFlag|0x08;  
                 }
              #endif
              
              
              
              
                    #ifdef AWT_ADD_TRIGGER_DELAY_FUN  //Pinchi 20150206 add for AWT request each trigger can setup trigg
             -er delay
                      if (Priority == 0)
                      {
                            bLastTrigger = 3;
                      }
                     #endif     
              
              
              #ifdef AWT_ML072Q
                    if(TriggerFlag!=TriggerFlagtemp)
                    {
                              
                    if(Priority==0)
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 105 

                    {///priority on
              
                  #ifdef Trigger_debug        
                  Printf("\r\nTriggerFlag=%02x  TriggerFlagtemp=%02x  CPON=%02x",(WORD)TriggerFlag,(WORD)TriggerFlagtemp,(
             -WORD)CPON);
                  #else
                //  Printf("\r\nTriggerFlag=%02x",(WORD)TriggerFlag);
                  #endif        
                            ////左右C一起的trigger 
              
                            if((TriggerFlag!=CPON))//got left trigger
                            {
                              Wait_ms(50);
              
                              TriggerFlag=0;
                              
                               LEFT_T=1;
                                 if(LEFT_T==0)
                                 {
                                    Wait_ms(2);
                                  if(LEFT_T==0)
                                    TriggerFlag=TriggerFlag|0x80;  
                                 }
              
              
                                Right_T=1;
                                 if(Right_T==0)
                                 {
                                    Wait_ms(2);
                                  if(Right_T==0)
                                    TriggerFlag=TriggerFlag|0x40;  
                                 }
                            #ifdef AWT_ML072Q//20171204
                               CAMC_T=1;
                              if(CAMC_T==0)
                                 {
                                  Wait_ms(2);
                                if(CAMC_T==0)
                                TriggerFlag=TriggerFlag|0x08;  
                                }
                            #endif
                            
                               REVERSE_T=1;
                               if(REVERSE_T==0)
                               {
                                  Wait_ms(2);
                                if(REVERSE_T==0)
                                  TriggerFlag=TriggerFlag|0x20;  
                               }
                              }
                              else
                                {
                                TriggerFlag=PPON;
                                return PPON;
                                }
                              
                          CPON=TriggerFlag;
              
                          x=(TriggerFlag&0xc8);
              
                           if(TriggerFlag&0x20)//rear
                          {
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 106 

                            ;
                          }
                           else if(((x==0x88)||(x==0x48)||(x==0xc8)||(x==0xc0))&&((TriggerFlagtemp)==0))
                          {
                          PPON=0x00;
                          TriggerFlag=0x00;
                          return 0x00;
                          }
                        else if((x==0x88)||(x==0x48)||(x==0xc8)||(x==0xc0))
                        {
                          TriggerFlag=TriggerFlagtemp;
                          PPON=TriggerFlagtemp;
                          
                        }
                        
                
                    }
                    else
                    { 
                    ///priority off
                  
                PT=TriggerFlag&(~TriggerFlagtemp);
                
                        if(PT==0)
                        {
                        #ifdef Trigger_debug
                        Printf("\r\n(PT=0)");
                        #endif
                        PT=TriggerFlag;   
                        }
              
                    if(PT==0)
                      {
                      BT[0]=0;
                      BT[1]=0;
                      BT[2]=0;
                      BT[3]=0;
                      #ifdef Trigger_debug
                      Printf("\r\n(CLR)");
                      #endif
                      }
                    else
                      {
                           if(BT[3]&PT)
                          {
                          PT=PT&BT[3];  
                          #ifdef Trigger_debug
                          Printf("\r\n(D2)");
                          #endif
                
                          }
                           else if(BT[2]&PT)
                          {
                          PT=PT&BT[2];  
                            if((BT[3]&TriggerFlag))
                            {
                            BT[2]=BT[3];
                            BT[3]=PT;
                            }
                            else
                              {
                              BT[3]=0;
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 107 

                              }
                          
                          #ifdef Trigger_debug
                          Printf("\r\n(C2)");
                          #endif
                          
                          }
                          else if(BT[1]&PT)
                          {
                          PT=PT&BT[1];  
                            if((BT[3]&TriggerFlag))
                            {
                            BT[2]=BT[3];
                            BT[1]=BT[2];
                            BT[3]=PT;
                            }
                            else if((BT[2]&TriggerFlag))
                            {
                            BT[3]=0;
                            BT[1]=BT[2];
                            BT[2]=PT;
                            }
                            else
                              {
                            BT[3]=0;
                            BT[2]=0;
                              }
                            
                          #ifdef Trigger_debug
                          Printf("\r\n(B2)");
                          #endif
                              
                          }
                          else if(BT[0]&PT)
                            {
                            PT=PT&BT[0];  
                            if((BT[3]&TriggerFlag))
                            {
                            BT[2]=BT[3];
                            BT[1]=BT[2];              
                            BT[0]=BT[1];
                            BT[3]=PT;
                            }
                            else if((BT[2]&TriggerFlag))
                            {
                            BT[3]=0;
                            
                            BT[1]=BT[2];
                            BT[0]=BT[1];
                            BT[2]=PT;
                            }
                            else if((BT[1]&TriggerFlag))
                            {
                            BT[3]=0;
                            BT[2]=0;
                            
                            BT[0]=BT[1];
                            BT[1]=PT;
                            }
                            else
                              {
                            BT[3]=0;
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 108 

                            BT[2]=0;
                            BT[1]=0;              
                              }
              
                              #ifdef Trigger_debug
                              Printf("\r\n(A2)");
                              #endif
                            }
                          else if(BT[0]==0)
                          {
                          BT[0]=PT;
                          #ifdef Trigger_debug
                          Printf("\r\n(A)");
                          #endif
                          }
                          else if(BT[1]==0)
                          {
                          BT[1]=PT;
                          #ifdef Trigger_debug
                          Printf("\r\n(B)");
                          #endif
                          }
                          else if(BT[2]==0)
                          {
                          BT[2]=PT; 
                          #ifdef Trigger_debug
                          Printf("\r\n(C)");
                          #endif
                          }
                          else if(BT[3]==0)
                          {
                          BT[3]=PT; 
                          #ifdef Trigger_debug
                          Printf("\r\n(D)");
                          #endif
                          }
              
                            for(x=0;x<4;x++)//clear no trigger
                              if((BT[x]&TriggerFlag)==0)
                                {
                                  BT[x]=0;  
                                  
                                  if(x==0)
                                    {
                                    BT[0]=BT[1];
                                    BT[1]=BT[2];
                                    BT[2]=BT[3];
                                    BT[3]=0;
                                    }
                                  else if(x==1)
                                    {
                                    BT[1]=BT[2];
                                    BT[2]=BT[3];
                                    BT[3]=0;
                                    }
                                  else if(x==2)
                                    {
                                    BT[2]=BT[3];
                                    BT[3]=0;
                                    }
                                }
                        }
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 109 

                    
              
              if((PowerFlag==0))///power off狀態
              {
                          ////左右C一起的trigger 
                            if(TriggerFlag&0xc8)//got left trigger
                            {
                              Wait_ms(50);
              
                               LEFT_T=1;
                                 if(LEFT_T==0)
                                 {
                                    Wait_ms(2);
                                  if(LEFT_T==0)
                                    TriggerFlag=TriggerFlag|0x80;  
                                 }
              
              
                                Right_T=1;
                                 if(Right_T==0)
                                 {
                                    Wait_ms(2);
                                  if(Right_T==0)
                                    TriggerFlag=TriggerFlag|0x40;  
                                 }
                    #ifdef AWT_ML072Q//20171204
                               CAMC_T=1;
                              if(CAMC_T==0)
                                 {
                                  Wait_ms(2);
                                if(CAMC_T==0)
                                TriggerFlag=TriggerFlag|0x08;  
                                }
                      #endif
                              /*
                               REVERSE_T=1;
                               if(REVERSE_T==0)
                               {
                                  Wait_ms(2);
                                if(REVERSE_T==0)
                                  TriggerFlag=TriggerFlag|0x20;  
                               }
                                */
                                // #ifdef Trigger_debug
                               //  Printf("\r\n(*R)");
                                // #endif
                            }
                      
                          x=(TriggerFlag&0xe8);
              
                //Printf("\r\n(EE x=%02x POTF=%02x)",(WORD)x,(WORD)POTF);           
              
                          if(x==0)
                          POTF=0;
                          
                          if(TriggerFlag&0x20)
                           {
                           // if(x&0xc8)
                          //  POTF=1;
              
                            POT=0x20;
                           }
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 110 

                          else if(POTF==1)
                            {
                            ;
                            }
                          else if((x==0x88)||(x==0x48)||(x==0xc8)||(x==0xc0)||(x==0))
                          {
                          POT=0x00;
                
                          }
                          else
                            {
                            POTF=1;
                            POT=PT;
                            }
                        
              
              }
              
              
              
              #ifdef Trigger_debug      
              Printf("\r\nTriggerFlag=%02x  TriggerFlagtemp=%02x  PT=%02x Priority=%02x",(WORD)TriggerFlag,(WORD)Trigger
             -Flagtemp,(WORD)PT,(WORD)Priority);
              #else
              //Printf("\r\nTriggerFlag=%02x",(WORD)TriggerFlag);
              #endif
              }
              
              
                    
                  }
              #endif
                    //_Anderson_20140425_Modify_xx_B     
              //    if((LEFT_T == 0)&&(Right_T==0)&&(REVERSE_T==1))
              //     TriggerFlag = 0x00;
              
              //return TriggerFlag;
              
                    
                    if(Priority==0)
                    {///priority on
                    return TriggerFlag;
                    }
                    else if((PowerFlag==0)&&(POTF==0))  return POT;
                    else
                      {
                      //if(POT==0x20)
                      //  {
                      //  POT=0;
                      //  return 0x20;
                      //  }
                      //else
                      return PT;
                      }
              
              
              
              
                    
              }
              
              #endif
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 111 

1776          
1777          void TriggerHandler(BYTE T_Flag)
1778          {
1779   1      
1780   1      #if (defined AWT_ML072Q) || (defined AWT_ML072S) || (defined SUPPORT_ML84TQ_TRIGGER_DELAY)  //Pinchi 20160
             -126 add
1781   1        BYTE i;
1782   1      #endif
1783   1        BYTE ReverseMask,LeftMask,RightMask,CamCMask,CamDMask,VGAMask;
1784   1      //#ifdef HTRV  //Pinchi 20150908 change condition for HTRV  //Pinchi 20140918 add for AWT ML072Q
1785   1      #ifdef  SUPPORT_ML84TQ_TRIGGER_DELAY  //Pinchi 20150825 add for function define
                BYTE delaytrigger,j;
              #endif
1788   1      
1789   1      #ifdef  AWT_ADD_TRIGGER_DELAY_FUN  //ryan@20170907
1790   1        BYTE delaytrigger,j,CTri=TriggerMode;
1791   1      #endif
1792   1      
1793   1      
1794   1      
1795   1      #ifdef TW8816
1796   1      
1797   1        if(Priority==0)
1798   1        {///priority on
1799   2          ReverseMask=0x00;
1800   2          LeftMask=0x00;
1801   2          RightMask=0x00;
1802   2          CamCMask=0x00;//0xEA;
1803   2          CamDMask=0xE8;//0xEC;
1804   2          VGAMask=0x20;//0xE6;
1805   2        }
1806   1        else
1807   1        {
1808   2          ///priority off
1809   2          ReverseMask=0x00;
1810   2          LeftMask=0x00;
1811   2          RightMask=0x00;
1812   2          CamCMask=0x00;//0xCA;
1813   2          
1814   2          CamDMask=0xC4;//0xCC;
1815   2          VGAMask=0xC6;
1816   2        }
1817   1      #else
                if(Priority==0)
                {
                  ReverseMask=0x00;
                  LeftMask=0x66;
                  RightMask=0xA6;
                  CamCMask=0xE4;//0xEA;
                  CamDMask=0xE8;//0xEC;
                  VGAMask=0x20;//0xE6;
                }
                else
                {
                  ReverseMask=0xC0;
                  LeftMask=0x40;
                  RightMask=0x80;
                  CamCMask=0xC2;//0xCA;
                  CamDMask=0xC4;//0xCC;
                  VGAMask=0xC6;
                }
              #endif
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 112 

1837   1      
1838   1           if((T_Flag&0x20)!= 0 && (T_Flag&ReverseMask)==0) //RearMode
1839   1           {
1840   2               if(TriggerMode!=REVERSE_TRIG)
1841   2               {
1842   3               #ifdef SUPPORT_TRIGGER_EXIT_MENU  //Pinchi 20150827 add
1843   3                 #if 0  //Pinchi 20151209 disable //def HTRV  //Pinchi 20150831 add
                          if (GaugeSetup || (GetDisplayedOSD() & MENU))
                         #else
1846   3                  if (GetDisplayedOSD() & MENU)
1847   3                 #endif
1848   3                  {
1849   4                      ClearOSDInfo();
1850   4                      InitOSDMenu();
1851   4                      Change_OSDColorLookup();
1852   4                  #if 0  //Pinchi 20151209 disable //def HTRV  //Pinchi 20150831 add
                              GaugeSetup = 0;
                          #endif
1855   4                  }
1856   3               #endif
1857   3           #ifdef SUPPORT_AC_ON_REDUCE_TIME  //Pinchi 20150903 add
1858   3            if (IsFirstRunfromAC == 1)
1859   3            {
1860   4              IsFirstRunfromAC = 0;
1861   4            //  Printf("\r\n[MSG]TriggerHandler() => AC On 1st time do CAM Trigger"); //pinchi test
1862   4            }
1863   3           #endif
1864   3      
1865   3                  Printf("\r\nREVERSE_TRIG\n",0);
1866   3                TriggerMode=REVERSE_TRIG;
1867   3                SetRearSource();
1868   3                TriggerStatus=4;
1869   3          ////   Hs_DvrTxCmdPaser(SendAlarm);
1870   3               }
1871   2           return;
1872   2           }
1873   1      
1874   1       
1875   1         if((T_Flag&0x80)!=0 && (T_Flag&LeftMask)==0)
1876   1         {
1877   2               if(TriggerMode!=LEFT_TRIG)
1878   2               {
1879   3               #ifdef SUPPORT_TRIGGER_EXIT_MENU  //Pinchi 20150827 add
1880   3                 #if 0  //Pinchi 20151209 disable //def HTRV  //Pinchi 20150831 add
                          if (GaugeSetup || (GetDisplayedOSD() & MENU))
                         #else
1883   3                  if (GetDisplayedOSD() & MENU)
1884   3                 #endif
1885   3                  {
1886   4                      ClearOSDInfo();
1887   4                      InitOSDMenu();
1888   4                      Change_OSDColorLookup();
1889   4                  #if 0  //Pinchi 20151209 disable //def HTRV  //Pinchi 20150831 add
                              GaugeSetup = 0;
                          #endif
1892   4                  }
1893   3               #endif
1894   3           #ifdef SUPPORT_AC_ON_REDUCE_TIME  //Pinchi 20150903 add
1895   3            if (IsFirstRunfromAC == 1)
1896   3            {
1897   4              IsFirstRunfromAC = 0;
1898   4            //  Printf("\r\n[MSG]TriggerHandler() => AC On 1st time do CAM Trigger"); //pinchi test
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 113 

1899   4            }
1900   3           #endif
1901   3                  Printf("\r\nLEFT_TRIG\n",0);
1902   3                  ClearGAUGEINFO();
1903   3                TriggerMode=LEFT_TRIG;    
1904   3                  SetLeftSource();  
1905   3            TriggerStatus=1;
1906   3          #ifdef AWT_ML072S//ryan@20170907
1907   3          //Printf("\r\n[MSG]SetSourceMode() => CAM to 16:9");  //pinchi test
1908   3          if(InitVideoDataSrc!=PAL)
1909   3          WriteDecoder(0x0a,0x26); ///_FULLPANEL_20140313_xx
1910   3          //WriteDecoder(0x61,(0x80|ReadDecoder(0x61))-1);
1911   3          WriteDecoder(0x61,0x80);//ryan@20180122
1912   3          WriteDecoder(0x66,0x00);
1913   3           #endif 
1914   3            
1915   3          ////    Hs_DvrTxCmdPaser(SendAlarm);  
1916   3           }
1917   2           return;
1918   2         }
1919   1      
1920   1         if((T_Flag&0x40)!=0 &&(T_Flag&RightMask)==0)
1921   1         {
1922   2               if(TriggerMode!=RIGHT_TRIG)
1923   2               {
1924   3               #ifdef SUPPORT_TRIGGER_EXIT_MENU  //Pinchi 20150827 add
1925   3                 #if 0  //Pinchi 20151209 disable //def HTRV  //Pinchi 20150831 add
                          if (GaugeSetup || (GetDisplayedOSD() & MENU))
                         #else
1928   3                  if (GetDisplayedOSD() & MENU)
1929   3                 #endif
1930   3                  {
1931   4                      ClearOSDInfo();
1932   4                      InitOSDMenu();
1933   4                      Change_OSDColorLookup();
1934   4                  #if 0  //Pinchi 20151209 disable //def HTRV  //Pinchi 20150831 add
                              GaugeSetup = 0;
                          #endif
1937   4                  }
1938   3               #endif
1939   3           #ifdef SUPPORT_AC_ON_REDUCE_TIME  //Pinchi 20150903 add
1940   3            if (IsFirstRunfromAC == 1)
1941   3            {
1942   4              IsFirstRunfromAC = 0;
1943   4            //  Printf("\r\n[MSG]TriggerHandler() => AC On 1st time do CAM Trigger"); //pinchi test
1944   4            }
1945   3           #endif
1946   3      
1947   3                  Printf("\r\nRIGHT_TRIG\n",0);
1948   3                  ClearGAUGEINFO();
1949   3                  TriggerMode=RIGHT_TRIG;
1950   3            SetRightSource();
1951   3            TriggerStatus=2;
1952   3          #ifdef AWT_ML072S//ryan@20170907
1953   3          //Printf("\r\n[MSG]SetSourceMode() => CAM to 16:9");  //pinchi test
1954   3          if(InitVideoDataSrc!=PAL)
1955   3          WriteDecoder(0x0a,0x26); ///_FULLPANEL_20140313_xx
1956   3          WriteDecoder(0x61,0x80);
1957   3          WriteDecoder(0x66,0x00);
1958   3           #endif 
1959   3          ////    Hs_DvrTxCmdPaser(SendAlarm);
1960   3           }
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 114 

1961   2               return;
1962   2         }     
1963   1      
1964   1        #ifdef AWT_ML072Q  //Pinchi 20150826 add
                 if((T_Flag&0x08)!=0&& (T_Flag&CamCMask)==0)
                 {
                       if(TriggerMode!=CAMC_TRIG)
                       {
                       #ifdef SUPPORT_TRIGGER_EXIT_MENU  //Pinchi 20150827 add
                          if (GetDisplayedOSD() & MENU)
                          {
                              ClearOSDInfo();
                              InitOSDMenu();
                              Change_OSDColorLookup();
                          }
                       #endif
                   #ifdef SUPPORT_AC_ON_REDUCE_TIME  //Pinchi 20150903 add
                    if (IsFirstRunfromAC == 1)
                    {
                      IsFirstRunfromAC = 0;
                    //  Printf("\r\n[MSG]TriggerHandler() => AC On 1st time do CAM Trigger"); //pinchi test
                    }
                   #endif
              
                          Printf("\r\nCAMC_TRIG\n",0);
                          ClearGAUGEINFO();
                          TriggerMode=CAMC_TRIG;
                          TW2835Cmd("\n\rmode 0\n\r");
                    SetTriggerCSource();
                    //SetSourceMode(CAM_C,Attr_A,Attr_B,Attr_C,Attr_R);
                    TriggerStatus=3;
                  #ifdef AWT_ML072S//ryan@20170907
                  //Printf("\r\n[MSG]SetSourceMode() => CAM to 16:9");  //pinchi test
                  if(InitVideoDataSrc!=PAL)
                  WriteDecoder(0x0a,0x16); ///_FULLPANEL_20140313_xx
                  WriteDecoder(0x61,0x80);
                  WriteDecoder(0x66,0x00);
                   #endif 
                   ////   Hs_DvrTxCmdPaser(SendAlarm);
                   }
                       return;
                 }
                #endif
2004   1           
2005   1        #ifdef USE_CAMD   
                   if((T_Flag&0x04)!=0 && (T_Flag&CamDMask)==0)
                   {
                         if(TriggerMode!=CAMD_TRIG)
                         {
                             Printf("\r\nCAMD_TRIG\n",0);
                             ClearGAUGEINFO();
                             TriggerMode=CAMD_TRIG;
                       SetSourceMode(CAM_D,Attr_A,Attr_B,Attr_C,Attr_R);
                     }
                          return;
                   }
                #endif
2018   1      
2019   1        #if 0
                if(ReadEEP(EEP_TriggerVGA)==0)
                  {
                       if((T_Flag&0x08)!=0 && (T_Flag&VGAMask)==0)
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 115 

                         {
                            if(TriggerMode!=VGA_TRIG)
                              {
                               Printf("\r\nTriggerVGA");
                               ClearGAUGEINFO();
                               TriggerMode=VGA_TRIG;
                     SelectModeType=VGAMode;          //WILLIAM-AWT1.2-20110107
                         SetSourceMode(SelectModeType,Attr_A,Attr_B,Attr_C,Attr_R);
                          }
                             return;   
                         }
                  }
                #endif
2036   1      
2037   1      #if 1 //Pinchi 20140904 move from above by compare with ML074Q
2038   1        if (TriggerMode != No_TRIG)
2039   1        {
2040   2          Printf("\r\nNo_TRIG",0);
2041   2        
2042   2        //  if (PowerFlag)  //Pinchi 20140918 disable for AWT ML072Q
2043   2          {
2044   3          #if (defined AWT_ML072Q) || (defined AWT_ML072S)  //Pinchi 20150908 add for AWT ML072Q/ML072S  //Pinchi 
             -20140918 add for AWT ML072Q
2045   3          //#ifndef  SUPPORT_ML84TQ_TRIGGER_DELAY  //Pinchi 20150825 add for function define  
2046   3            #ifdef SUPPORT_AC_ON_REDUCE_TIME  //Pinchi 20150903 add
2047   3            if (IsFirstRunfromAC == 1)
2048   3            {
2049   4              IsFirstRunfromAC = 0;
2050   4            //  Printf("\r\n[MSG]TriggerHandler() => AC On 1st No Trigger & skip delay time"); //pinchi test
2051   4            }
2052   3            else
2053   3            #endif
2054   3              {
2055   4                #ifdef AWT_ADD_TRIGGER_DELAY_FUN //ryan@20170907
2056   4      
2057   4                          switch(TriggerMode)
2058   4                        {
2059   5                          case REVERSE_TRIG:  
2060   5                            delaytrigger=ReadEEP(EEP_CamRDelay);
2061   5                          break;
2062   5      
2063   5                          case LEFT_TRIG: 
2064   5                            delaytrigger=ReadEEP(EEP_CamADelay);
2065   5                          break;
2066   5      
2067   5                          case RIGHT_TRIG:  
2068   5                            delaytrigger=ReadEEP(EEP_CamBDelay);
2069   5                          break;
2070   5      
2071   5                        #ifdef AWT_ML072Q  //Pinchi 20150908 add
                                  case CAMC_TRIG: 
                                    delaytrigger=ReadEEP(EEP_CamCDelay);
                                  break;
                                #endif
2076   5                        #ifdef USE_CAMD
                                  case CAMD_TRIG: 
                                    delaytrigger=ReadEEP(EEP_DELAYCAMD);
                                  break;
                                #endif  
2081   5                          case No_TRIG:
2082   5                          case PARK_TRIG: 
2083   5                          case VGA_TRIG:  
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 116 

2084   5                          default:  
2085   5                            delaytrigger=0;
2086   5                          break;  
2087   5                        }
2088   4      
2089   4                        #ifdef AWT_ML072S
2090   4      
2091   4                          if(PowerFlag==1)
2092   4                          {
2093   5                            for(j=0;j<delaytrigger;j++) 
2094   5                            {
2095   6                                for(i=0;i<(100-20);i++) 
2096   6                                {
2097   7                                  CheckTrigger();
2098   7                                  if(TriggerFlag!=0)//andy HTRV 980625
2099   7                                     return;                      
2100   7                                  Wait_ms(7); //william-v1.44a-970923
2101   7                                }
2102   6                            }
2103   5                          }
2104   4                          else
2105   4                          {
2106   5      
2107   5                            for(j=0;j<delaytrigger;j++) 
2108   5                            {
2109   6                              for(i=0;i<(100-20-3);i++) 
2110   6                              {
2111   7                              CheckTrigger();
2112   7                              if(TriggerFlag!=0)//andy HTRV 980625
2113   7                                 return;                      
2114   7                              Wait_ms(7); //william-v1.44a-970923
2115   7                              }
2116   6                            }
2117   5                          }
2118   4                        
2119   4                        #else
                                
                                for(j=0;j<delaytrigger;j++) 
                                {
                                  for(i=0;i<100;i++) 
                                  {
                                    CheckTrigger();
                                    if(TriggerFlag!=0)//andy HTRV 980625
                                       return;
                                    Wait_ms(7); //william-v1.44a-970923
                                  }
                                }
                                
                                #endif
2133   4      
2134   4            #ifdef AWT_ML072S
2135   4            //Printf("\r\n[MSG]SetSourceMode() => CAM to 16:9");  //pinchi test
2136   4            if(TriggerMode==REVERSE_TRIG)
2137   4            {
2138   5            clrBacklight();
2139   5            WriteDecoder(0x0a,0x16); ///_FULLPANEL_20140313_xx
2140   5            WriteDecoder(0x61,0x80);
2141   5            WriteDecoder(0x66,0x00);
2142   5            }
2143   4            #endif
2144   4                        
2145   4              #else
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 117 

                      for (i=0 ; i<100 ; i++) 
                      {
                        CheckTrigger();
                        if (TriggerFlag != 0)
                          return;
              
                        Wait_ms(14);
                      }
                      #endif
2155   4              }
2156   3          #else
                  
                    #ifdef  SUPPORT_ML84TQ_TRIGGER_DELAY  //Pinchi 20160126 add
                    switch(TriggerMode)
                    {
                      case REVERSE_TRIG:  
                        delaytrigger=ReadEEP(EEP_DELAYCAMR);
                      break;
              
                      case LEFT_TRIG: 
                        delaytrigger=ReadEEP(EEP_DELAYCAMA);
                      break;
              
                      case RIGHT_TRIG:  
                        delaytrigger=ReadEEP(EEP_DELAYCAMB);
                      break;
              
                    #ifdef AWT_ML072Q  //Pinchi 20150908 add
                      case CAMC_TRIG: 
                        delaytrigger=ReadEEP(EEP_DELAYCAMC);
                      break;
                    #endif
                    #ifdef USE_CAMD
                      case CAMD_TRIG: 
                        delaytrigger=ReadEEP(EEP_DELAYCAMD);
                      break;
                    #endif  
                      
                      case No_TRIG:
                      case PARK_TRIG: 
                      case VGA_TRIG:  
                      default:  
                        delaytrigger=0;
                      break;  
                    }
              
                    for(j=0;j<delaytrigger;j++) 
                    {
                      for(i=0;i<100;i++) 
                      {
                        CheckTrigger();
                        if(TriggerFlag!=0)//andy HTRV 980625
                           return;
                        Wait_ms(4); //william-v1.44a-970923
                      }
                    }
                    #endif
                  #endif
2204   3            } 
2205   2            TriggerMode=No_TRIG;     
2206   2            ClearGAUGEINFO();
2207   2          
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 118 

2208   2        #ifdef QUAD  //Pinchi 20150903 change condition for common use when enter Standby mode no action  //AWT_M
             -L072Q  //Pinchi 20140922 add for AWT ML072Q
                  if (PowerFlag)
                #endif
2211   2          {
2212   3              #ifdef HTRV  //Pinchi 20151209 add
                          if (GaugeSetup == 1)
                          {
                              GaugeSetup = 0;
                              GaugeInfoOSD = 0;  //Pinchi 20151209 add to clear GaugeSetup
                              SelectModeType = ReadEEP(EEP_SelectMode);  //Pinchi 20151209 add to restore original cam
                          }
                      #endif
2220   3            #ifdef AWT_ML072S
2221   3            #else
                    DisplayInput();   //william-20100420
                    #endif
2224   3          #if 0
                    if(SelectModeType==VGAMode)       //william-awt1.2 20110107
                      SelectModeType=ReadEEP(EEP_SelectMode);
                  #endif
2228   3      
2229   3        
2230   3      if(RELEASE_TR_JUMP_Flag==1) 
2231   3      {
2232   4        TR_JUMP_Flag=0;
2233   4        NowModeState=TR_JUMP_HOLD;
2234   4        RELEASE_TR_JUMP_Flag=0;
2235   4        Printf("\r\n(SelectModeType=%02x    NowModeState=%02x)",(WORD)SelectModeType,(WORD)NowModeState);
2236   4      }
2237   3      
2238   3            IsDrawNoVideoSignal=0;//ryan@20170921
2239   3            #ifdef AWT_ML072S
2240   3            if (PowerFlag)
2241   3              {
2242   4              
2243   4        if(ParkFlag==0)
2244   4        {
2245   5          AVFlag=0;
2246   5        
2247   5                  if(SelectModeType==SOURCE_AV)
2248   5                  {             
2249   6                          
2250   6                       delaytrigger=ReadEEP(EEP_CamCDelay);
2251   6      
2252   6                      if((CTri==REVERSE_TRIG)||(CTri==LEFT_TRIG))
2253   6                      delaytrigger=0;     
2254   6            
2255   6                        for(j=0;j<delaytrigger;j++) 
2256   6                        {
2257   7                          for(i=0;i<(100-20);i++) 
2258   7                          {
2259   8                            CheckTrigger();
2260   8                            if(TriggerFlag!=0)
2261   8                               return;
2262   8                            else if(ParkFlag==1)
2263   8                              return;
2264   8                            
2265   8                            Wait_ms(7); 
2266   8                          }
2267   7                        }             
2268   6                  SelectModeType=ReadEEP(EEP_SelectMode);
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 119 

2269   6            
2270   6                  } 
2271   5        }
2272   4      
2273   4              
2274   4              SetNowMode();
2275   4              }
2276   3            #else
                    SetNowMode();
                    #endif
2279   3          #if 1  //Pinchi 20150901 add to setup 2s for Display OFF
2280   3            if (ReadEEP(EEP_COSDMode) == 1)
2281   3              displayhold_flag = 3;
2282   3          #endif
2283   3          }
2284   2      
2285   2      #if 0  //Pinchi 20150827 disable for wrong action
                #ifdef AWT_ML072Q
                  if(ReadDecoder(0x0a)==0x13)
                  {
                    WriteDecoder(0x0a,0x1b);
                    WriteDecoder(0x61,0x80);
                    WriteDecoder(0x66,0x00);
                    Printf("\r\n[MSG]TriggerHandler() => TriggerMode=No_TRIG 4:3 to 16:9 !!");  //pinchi test
                  }
                #else
                  if(ReadDecoder(0x0a)==0x13)
                    {
                    WriteDecoder(0x0a,0x0f); 
                    WriteDecoder(0x61,0x88);
                    WriteDecoder(0x66,0x00);//<William-960905>  
                    }
                #endif
              #endif
2303   2        }
2304   1      #endif
2305   1      
2306   1      
2307   1      
2308   1      
2309   1      #ifndef AWT_ML072Q      //william @20130813
2310   1        if(ParkFlag==0)
2311   1        {
2312   2          AVFlag=0;
2313   2        #ifdef QUAD 
                  if(SelectModeType==AVMode)
                #else
2316   2          if(SelectModeType==SOURCE_AV)
2317   2        #endif
2318   2          {
2319   3                      #ifdef AWT_ML072S///add by  ryan@20171214
2320   3      
2321   3                      #ifdef Hs_debug
2322   3                      Printf("\r\n***delay AV trigger release");
2323   3                      #endif
2324   3                          
2325   3                       delaytrigger=ReadEEP(EEP_CamCDelay);
2326   3      
2327   3                      if((CTri==REVERSE_TRIG)||(CTri==LEFT_TRIG))
2328   3                      delaytrigger=0;     
2329   3            
2330   3                        for(j=0;j<delaytrigger;j++) 
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 120 

2331   3                        {
2332   4                          for(i=0;i<(100-20);i++) 
2333   4                          {
2334   5                            CheckTrigger();
2335   5                            if(TriggerFlag!=0)//andy HTRV 980625
2336   5                               return;
2337   5                            else if(ParkFlag==1)
2338   5                              return;
2339   5                            
2340   5                            Wait_ms(7); //william-v1.44a-970923
2341   5                          }
2342   4                        }
2343   3                      #endif
2344   3                      
2345   3            SelectModeType=ReadEEP(EEP_SelectMode);
2346   3            SetNowMode();
2347   3          } 
2348   2        }
2349   1      
2350   1          
2351   1      #endif
2352   1      
2353   1        
2354   1      
2355   1      }
2356          
2357          #if 0
              //#else
              //============================================================================= 
              //                       Trigger偵測控制                                                       
              //=============================================================================
              //          Bit3     Bit2        Bit1         Bit0
              //Attr_x=> Tigger   Tigger     OSD ON/OFF      MH 
              void  CheckTrigger()
              {
               //  BYTE TComm,TIndex,val;
              
                 if(ReverseFlag  )         //倒車(CkTmode=1)
                 {
                    if(!(TriggerMode==REVERSE_TRIG))
                    {   
                       CkTMode=REVERSE_TRIG;        
                       TGFlag1=1; 
                  Gaugeflag=1;    //william-970724
                // ParkIndex1= ParkIndex;     //william-v1.0-970804
                 ParkIndex=SOURCE_R;  //william-v1.0-970724 
                //ChangeInput(COMPOSITE4);   
                CheckSourceMode();
              
                //william-v1.0-970717>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> 
                    }     
                    return;
                 }
                 else
                 {
                     if(( RtFlag)&&(!LtFlag))          //右轉(CkTMode=4) ,切換成右轉時設定的畫面模式
                     { 
                  //william-v1.0-970718>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   
                    if(!(CkTMode==LEFT_TRIG))
                    {
                  CkTMode=LEFT_TRIG;
                      TGFlag1=1;  
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 121 

                  Gaugeflag=0;
                  //ParkIndex1 = ParkIndex;   //william-v1.0-970804    
                  ParkIndex=SOURCE_A; //william-v1.0-970724 
                  //ChangeInput(COMPOSITE1);  
                  CheckSourceMode();
                    }
                     return; 
                    //william-v1.0-970718>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>              ret
             -urn;  
                                 }
                 if (ParkTime>10)      //手煞車(CkTMode=6)
                              {
                              
                                         if(!(CkTMode==PARK_TRIG))
                                           {
              
                        //    CkTMode=PARK_TRIG;
                                              TGFlag1=0;
                                              CkPARK=1;
                                            }   
                              }   
                 else
                {
                if(AVFlag)
                {CkTMode=PARK_TRIG;}
                      CkPARK=0;
                      AVFlag=0;
                 }
              //#endif
                 if(!(CkTMode==OTHERS_TRIG)/*&&!(CkTMode==PARK_TRIG)*/)  //其他狀態,清除ckpark,tgflag1//<william-961004-v
             -er1.41>  //william-v1.0-970717
                   {
                  //william-v1.0-970717>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>     
                    CkTMode=OTHERS_TRIG;
                              TGFlag1=0; 
                    Gaugeflag=0;  //william-v1.0-970724
                  //  if((ParkIndex1==SOURCE_A)||(ParkIndex1==SOURCE_B)||(ParkIndex1==SOURCE_R))
                    ParkIndex=ParkIndex1;     //william-v1.0-970724
                    //ChangeInput(COMPOSITE3);
                         
                    if(SEQFlag==1)    //william-v1.1-970818
                      CheckJUMPMode();  
                    else
                      CheckSourceMode();
                                 }
                  //william-v1.0-970717>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    }
                 }
              #endif
2440          
2441          #ifdef SUPPORT_SDCARD  //Pinchi 20140903 add for AWT ML072Q
              void SelectBoxHandler(void)
              {
                //BYTE i,j;
                BYTE val;
                //BYTE delaytrigger;
                
                ADCTL=0xEE;
                while((ADCTL&0x10)==1);
                Wait_ms(50);
                val=ADCV;
              
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 122 

                #if 1
                //if( SelectBoxADC!=val)
                 // Printf("\r\nADC=%d",(WORD)val);
                  SelectBoxADC=val;
                #endif
              
                if(val>245) 
                {
                      if(SelectBoxMode!=EVENT_SELECT)
                        {
                         Printf("\r\nEVENT_SELECT",0);
                     SelectBoxMode=EVENT_SELECT;
                      //TriggerMode=No_TRIG;
                     Hs_DvrTxCmdPaser(BOOKMARK);
                     BookMarkState|=0x02;
                        }
                  return;
                }
              
                
                if(val>214&&val<234)  
                {
                      if(SelectBoxMode!=REVERSE_SELECT)
                        {
                         Printf("\r\nREVERSE_SELECT",0);
                     SelectBoxMode=REVERSE_SELECT;
                      //TriggerMode=No_TRIG;
                     SetRearSource();
                     TriggerStatus=4;
                     Hs_DvrTxCmdPaser(SendAlarm);
                        }
                  return;
                }
              
                
                if(val>168&&val<188)
                {
                        if(SelectBoxMode!=LEFT_SELECT)
                          {
                            Printf("\r\nLEFT_SELECT",0);
                          ClearGAUGEINFO();
                     SelectBoxMode=LEFT_SELECT;   
                     //TriggerMode=No_TRIG;
                          SetLeftSource();
                     TriggerStatus=1;
                     Hs_DvrTxCmdPaser(SendAlarm);
                     }
                    return;   
                }
                
                
                if(val>111&&val<131)  
                {
                       if(SelectBoxMode!=RIGHT_SELECT)
                         {
                         Printf("\r\nRIGHT_SELECT",0);
                          ClearGAUGEINFO();
                          SelectBoxMode=RIGHT_SELECT;
                     //TriggerMode=No_TRIG; 
                     SetRightSource();
                     TriggerStatus=2;
                     Hs_DvrTxCmdPaser(SendAlarm);
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 123 

                     }
                       return;
                }
              
                
                if(val>49&&val<69)  
                {
                           if(SelectBoxMode!=CAMC_SELECT)
                             {
                             Printf("\r\nCAMC_SELECT",0);
                              ClearGAUGEINFO();
                              SelectBoxMode=CAMC_SELECT;
                    //TriggerMode=No_TRIG;    
                              TW2835Cmd("\n\rmode 0\n\r");
                    SetTriggerCSource();
                    TriggerStatus=3;
                    Hs_DvrTxCmdPaser(SendAlarm);
                    }
                          return;
                }     
                
                if(val>14&&val<34)
                {
                         if(SelectBoxMode!=JUMP_SELECT)
                            {
                             Printf("\r\nJUMP_SELECT",0);
                              ClearGAUGEINFO();
                              SelectBoxMode=JUMP_SELECT;
                    //TriggerMode=No_TRIG;
                  val=ReadEEP(EEP_JUMPMode);  
                   if(val==0x01)
                    TW2835Cmd("\n\rmode 2\n\r");
                  else
                        TW2835Cmd("\n\rmode 1\n\r");
                  
                    SetSourceMode(JumpTable[val],Attr_A,Attr_B,Attr_C,Attr_R);    
                   // SelectModeType=ReadEEP(EEP_SelectMode);
                          //SetNowMode();     
                   // SetSourceMode(CAM_D,Attr_A,Attr_B,Attr_C,Attr_R);
                   }
                          return;
                }
              
                
              #if 1
                if((/*val>247||*/val<8)/*&&(TriggerMode==No_TRIG)*/)
                {
                   if(SelectBoxMode!=No_SELECT)
                       {
                       Printf("\r\nNo_SELECT",0);
              #if  0     
                       if(PowerFlag)
                        {
                        switch(SelectBoxMode)
                          {
                    case REVERSE_SELECT:  
                      delaytrigger=ReadEEP(EEP_DELAYCAMR);
                    break;
              
                    case LEFT_SELECT: 
                      delaytrigger=ReadEEP(EEP_DELAYCAMA);
                    break;
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 124 

              
                    case RIGHT_SELECT:  
                      delaytrigger=ReadEEP(EEP_DELAYCAMB);
                    break;
              
                    case CAMC_SELECT: 
                      delaytrigger=ReadEEP(EEP_DELAYCAMC);
                    break;
              
                    case CAMD_SELECT: 
                      delaytrigger=ReadEEP(EEP_DELAYCAMD);
                    break;
                    
                    case No_SELECT:
                    //case PARK_TRIG: 
                    //case VGA_TRIG:  
                    default:  
                      delaytrigger=0;
                    break;  
              
                    }
              
                  for(j=0;j<delaytrigger;j++) 
                   {
                     for(i=0;i<250;i++) 
                    {
                    CheckTrigger();
                    if(TriggerFlag!=0)//andy HTRV 980625
                       return;  
                       Wait_ms(4);  //william-v1.44a-970923   
                    }
                   }
                        } 
                   #endif
                  if(SelectBoxMode!=EVENT_SELECT)
                    {
                      
                    if (!CheckTrigger())
                      {
                      SelectModeType=ReadEEP(EEP_SelectMode);
                              SetNowMode();
                      ClearGAUGEINFO();
                        DisplayInput();   //william-201004
                      }
                    else
                      TriggerMode=No_TRIG;
                    }
                    BookMarkState&=0xFD;
                     SelectBoxMode=No_SELECT; 
                      
                     }
                }
              #endif
              }
              #endif
2632          
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 125 

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com00BC (BEGIN)
0000         L?0189:
0000         L?0190:
0000 900000      R     MOV     DPTR,#delaytrigger
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 A3                INC     DPTR
0006 E0                MOVX    A,@DPTR
0007 C3                CLR     C
0008 9F                SUBB    A,R7
0009 22                RET     
000A         L?0191:
000A         L?0192:
000A 900000      R     MOV     DPTR,#i
000D E0                MOVX    A,@DPTR
000E C3                CLR     C
000F 9450              SUBB    A,#050H
0011 7480              MOV     A,#080H
0013 9480              SUBB    A,#080H
0015 22                RET     
0016         L?0198:
0016 900000      R     MOV     DPTR,#ReverseMask
0019 F0                MOVX    @DPTR,A
001A A3                INC     DPTR
001B F0                MOVX    @DPTR,A
001C A3                INC     DPTR
001D F0                MOVX    @DPTR,A
001E A3                INC     DPTR
001F F0                MOVX    @DPTR,A
0020 A3                INC     DPTR
0021 22                RET     
0022         L?0199:
0022 7BFF              MOV     R3,#0FFH
0024 E0                MOVX    A,@DPTR
0025 FF                MOV     R7,A
0026         L?0200:
0026 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
0029 E4                CLR     A
002A F0                MOVX    @DPTR,A
002B A3                INC     DPTR
002C 22                RET     
002D         L?0201:
002D 900000      E     MOV     DPTR,#TriggerStatus
0030 F0                MOVX    @DPTR,A
0031         L?0202:
0031 900000      E     MOV     DPTR,#InitVideoDataSrc
0034 E0                MOVX    A,@DPTR
0035 6402              XRL     A,#02H
0037 22                RET     
0038         L?0204:
0038 900000      E     MOV     DPTR,#SelectModeType
003B         L?0205:
003B E0                MOVX    A,@DPTR
003C FF                MOV     R7,A
003D 7E00              MOV     R6,#00H
003F 6401              XRL     A,#01H
0041 22                RET     
0042         L?0206:
0042         L?0207:
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 126 

0042 900000      R     MOV     DPTR,#j
0045 E0                MOVX    A,@DPTR
0046 04                INC     A
0047 F0                MOVX    @DPTR,A
0048 22                RET     
0049         L?0210:
0049 C200        R     CLR     AVFlag
004B         L?0211:
004B 900000      E     MOV     DPTR,#SelectModeType
004E E0                MOVX    A,@DPTR
004F 6403              XRL     A,#03H
0051 22                RET     
0052         L?0215:
0052 900000      R     MOV     DPTR,#NowModeState
0055 E0                MOVX    A,@DPTR
0056 FD                MOV     R5,A
0057 7FAF              MOV     R7,#0AFH
0059 7E00              MOV     R6,#00H
005B 22                RET     
             ; FUNCTION Com00BC (END)

             ; FUNCTION SetSelectMode (BEGIN)
                                           ; SOURCE LINE # 562
                                           ; SOURCE LINE # 563
                                           ; SOURCE LINE # 565
0000 E4                CLR     A
0001 900000      R     MOV     DPTR,#NowModeState
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 566
0005 900000      R     MOV     DPTR,#SEQFlag
0008 E0                MOVX    A,@DPTR
0009 6401              XRL     A,#01H
000B 7009              JNZ     ?C0001
                                           ; SOURCE LINE # 567
                                           ; SOURCE LINE # 568
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 570
000E 900000      E     MOV     DPTR,#SelectModeType
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 020000      R     LJMP    _CheckSourceMode
                                           ; SOURCE LINE # 572
0016         ?C0001:
                                           ; SOURCE LINE # 578
0016 300048      R     JNB     ParkFlag,?C0003
                                           ; SOURCE LINE # 579
                                           ; SOURCE LINE # 581
0019 20000C      R     JB      AVFlag,?C0004
                                           ; SOURCE LINE # 582
                                           ; SOURCE LINE # 583
001C 120000      R     LCALL   L?0211
001F 6003              JZ      ?C0005
                                           ; SOURCE LINE # 585
0021 7403              MOV     A,#03H
0023 F0                MOVX    @DPTR,A
0024         ?C0005:
                                           ; SOURCE LINE # 586
0024 D200        R     SETB    AVFlag
                                           ; SOURCE LINE # 587
                                           ; SOURCE LINE # 588
0026 8029              SJMP    ?C0166
0028         ?C0004:
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 127 

                                           ; SOURCE LINE # 590
                                           ; SOURCE LINE # 593
0028 120000      R     LCALL   L?0204
002B 7005              JNZ     ?C0007
                                           ; SOURCE LINE # 594
002D 7404              MOV     A,#04H
002F F0                MOVX    @DPTR,A
0030 801F              SJMP    ?C0008
0032         ?C0007:
                                           ; SOURCE LINE # 595
0032 EF                MOV     A,R7
0033 6404              XRL     A,#04H
0035 4E                ORL     A,R6
0036 7008              JNZ     ?C0009
                                           ; SOURCE LINE # 596
0038 900000      E     MOV     DPTR,#SelectModeType
003B 7402              MOV     A,#02H
003D F0                MOVX    @DPTR,A
003E 8011              SJMP    ?C0008
0040         ?C0009:
                                           ; SOURCE LINE # 597
0040 EF                MOV     A,R7
0041 6402              XRL     A,#02H
0043 4E                ORL     A,R6
0044 900000      E     MOV     DPTR,#SelectModeType
0047 7005              JNZ     ?C0011
                                           ; SOURCE LINE # 598
0049 7403              MOV     A,#03H
004B F0                MOVX    @DPTR,A
004C 8003              SJMP    ?C0008
004E         ?C0011:
                                           ; SOURCE LINE # 608
004E 7401              MOV     A,#01H
0050 F0                MOVX    @DPTR,A
0051         ?C0008:
                                           ; SOURCE LINE # 610
0051         ?C0166:
0051 900000      E     MOV     DPTR,#SelectModeType
0054 E0                MOVX    A,@DPTR
0055 FF                MOV     R7,A
0056 120000      R     LCALL   _CheckSourceMode
                                           ; SOURCE LINE # 611
0059         ?C0006:
                                           ; SOURCE LINE # 614
0059 7BFF              MOV     R3,#0FFH
005B 7A00        R     MOV     R2,#HIGH ?SC_0
005D 7900        R     MOV     R1,#LOW ?SC_0
                                           ; SOURCE LINE # 617
005F 8029              SJMP    ?C0167
0061         ?C0003:
                                           ; SOURCE LINE # 621
                                           ; SOURCE LINE # 625
0061 120000      R     LCALL   L?0204
0064 7005              JNZ     ?C0014
                                           ; SOURCE LINE # 626
0066 7404              MOV     A,#04H
0068 F0                MOVX    @DPTR,A
0069 8011              SJMP    ?C0015
006B         ?C0014:
                                           ; SOURCE LINE # 627
006B EF                MOV     A,R7
006C 6404              XRL     A,#04H
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 128 

006E 4E                ORL     A,R6
006F 900000      E     MOV     DPTR,#SelectModeType
0072 7005              JNZ     ?C0016
                                           ; SOURCE LINE # 628
0074 7402              MOV     A,#02H
0076 F0                MOVX    @DPTR,A
0077 8003              SJMP    ?C0015
0079         ?C0016:
                                           ; SOURCE LINE # 630
0079 7401              MOV     A,#01H
007B F0                MOVX    @DPTR,A
007C         ?C0015:
                                           ; SOURCE LINE # 644
007C 900000      E     MOV     DPTR,#SelectModeType
007F E0                MOVX    A,@DPTR
0080 FF                MOV     R7,A
0081 120000      R     LCALL   _CheckSourceMode
                                           ; SOURCE LINE # 647
0084 7BFF              MOV     R3,#0FFH
0086 7A00        R     MOV     R2,#HIGH ?SC_17
0088 7900        R     MOV     R1,#LOW ?SC_17
008A         ?C0167:
008A 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 650
008D         ?C0013:
                                           ; SOURCE LINE # 652
008D 900000      E     MOV     DPTR,#SelectModeType
0090 E0                MOVX    A,@DPTR
0091 FD                MOV     R5,A
0092 6403              XRL     A,#03H
0094 7003              JNZ     ?C0019
0096 D3                SETB    C
0097 8001              SJMP    ?C0020
0099         ?C0019:
0099 C3                CLR     C
009A         ?C0020:
009A 4007              JC      ?C0018
                                           ; SOURCE LINE # 653
009C 7FB0              MOV     R7,#0B0H
009E 7E00              MOV     R6,#00H
00A0 120000      E     LCALL   _WriteEEP
00A3         ?C0018:
                                           ; SOURCE LINE # 654
00A3 120000      R     LCALL   L?0215
00A6 120000      E     LCALL   _WriteEEP
                                           ; SOURCE LINE # 655
00A9         ?C0002:
00A9 22                RET     
             ; FUNCTION SetSelectMode (END)

             ; FUNCTION _CheckSourceMode (BEGIN)
                                           ; SOURCE LINE # 662
;---- Variable 'sorce' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 663
                                           ; SOURCE LINE # 665
0000 EF                MOV     A,R7
0001 24FE              ADD     A,#0FEH
0003 6028              JZ      ?C0024
0005 14                DEC     A
0006 6032              JZ      ?C0025
0008 14                DEC     A
0009 6015              JZ      ?C0023
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 129 

000B 24E3              ADD     A,#0E3H
000D 603B              JZ      ?C0026
000F 2420              ADD     A,#020H
0011 704A              JNZ     ?C0021
                                           ; SOURCE LINE # 666
                                           ; SOURCE LINE # 667
0013         ?C0022:
                                           ; SOURCE LINE # 669
0013 7BFF              MOV     R3,#0FFH
0015 7A00        R     MOV     R2,#HIGH ?SC_35
0017 7900        R     MOV     R1,#LOW ?SC_35
0019 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 671
001C 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 672
001E 8025              SJMP    ?C0170
                                           ; SOURCE LINE # 684
0020         ?C0023:
                                           ; SOURCE LINE # 686
0020 7BFF              MOV     R3,#0FFH
0022 7A00        R     MOV     R2,#HIGH ?SC_65
0024 7900        R     MOV     R1,#LOW ?SC_65
0026 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 688
0029 7F04              MOV     R7,#04H
002B         ?C0168:
                                           ; SOURCE LINE # 689
002B 8018              SJMP    ?C0170
                                           ; SOURCE LINE # 692
002D         ?C0024:
                                           ; SOURCE LINE # 695
002D 7BFF              MOV     R3,#0FFH
002F 7A00        R     MOV     R2,#HIGH ?SC_95
0031 7900        R     MOV     R1,#LOW ?SC_95
0033 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 697
0036 7F02              MOV     R7,#02H
0038         ?C0169:
                                           ; SOURCE LINE # 701
0038 800B              SJMP    ?C0170
                                           ; SOURCE LINE # 703
003A         ?C0025:
                                           ; SOURCE LINE # 706
003A 7BFF              MOV     R3,#0FFH
003C 7A00        R     MOV     R2,#HIGH ?SC_125
003E 7900        R     MOV     R1,#LOW ?SC_125
0040 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 708
0043 7F03              MOV     R7,#03H
0045         ?C0170:
0045 120000      E     LCALL   _ChangeInput
                                           ; SOURCE LINE # 712
0048 8013              SJMP    ?C0021
                                           ; SOURCE LINE # 714
004A         ?C0026:
                                           ; SOURCE LINE # 715
004A E4                CLR     A
004B 900000      R     MOV     DPTR,#SEQIndex
004E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 716
004F A3                INC     DPTR
0050 04                INC     A
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 130 

0051 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 717
0052 900000      R     MOV     DPTR,#TimeStep
0055 E0                MOVX    A,@DPTR
0056 900000      E     MOV     DPTR,#SEQTime
0059 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 718
005A 120000      E     LCALL   DisplayInput
                                           ; SOURCE LINE # 719
                                           ; SOURCE LINE # 720
005D         ?C0021:
                                           ; SOURCE LINE # 724
005D 900000      E     MOV     DPTR,#SelectModeType
0060 E0                MOVX    A,@DPTR
0061 FD                MOV     R5,A
0062 6403              XRL     A,#03H
0064 7003              JNZ     ?C0028
0066 D3                SETB    C
0067 8001              SJMP    ?C0029
0069         ?C0028:
0069 C3                CLR     C
006A         ?C0029:
006A 4007              JC      ?C0027
                                           ; SOURCE LINE # 725
006C 7FB0              MOV     R7,#0B0H
006E 7E00              MOV     R6,#00H
0070 120000      E     LCALL   _WriteEEP
0073         ?C0027:
                                           ; SOURCE LINE # 727
0073 7A00        R     MOV     R2,#HIGH ?SC_156
0075 7900        R     MOV     R1,#LOW ?SC_156
0077 900000      E     MOV     DPTR,#SelectModeType
007A 120000      R     LCALL   L?0199
007D EF                MOV     A,R7
007E F0                MOVX    @DPTR,A
007F 020000      E     LJMP    _Printf
             ; FUNCTION _CheckSourceMode (END)

             ; FUNCTION SEQMode (BEGIN)
                                           ; SOURCE LINE # 751
                                           ; SOURCE LINE # 752
                                           ; SOURCE LINE # 763
0000 900000      R     MOV     DPTR,#SEQIndex
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 120000      R     LCALL   _CheckSourceMode
                                           ; SOURCE LINE # 767
0008 900000      R     MOV     DPTR,#SEQIndex
000B 120000      R     LCALL   L?0205
000E 7004              JNZ     ?C0031
                                           ; SOURCE LINE # 768
0010 7404              MOV     A,#04H
0012 F0                MOVX    @DPTR,A
0013 22                RET     
0014         ?C0031:
                                           ; SOURCE LINE # 769
0014 EF                MOV     A,R7
0015 6404              XRL     A,#04H
0017 4E                ORL     A,R6
0018 7007              JNZ     ?C0033
                                           ; SOURCE LINE # 770
001A 900000      R     MOV     DPTR,#SEQIndex
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 131 

001D 7402              MOV     A,#02H
001F F0                MOVX    @DPTR,A
0020 22                RET     
0021         ?C0033:
                                           ; SOURCE LINE # 771
0021 EF                MOV     A,R7
0022 6402              XRL     A,#02H
0024 4E                ORL     A,R6
0025 700D              JNZ     ?C0035
0027 20000A      E     JB      JUMPAVFlag,?C0035
002A 308307            JNB     P0_3,?C0035
                                           ; SOURCE LINE # 772
002D 900000      R     MOV     DPTR,#SEQIndex
0030 7403              MOV     A,#03H
0032 F0                MOVX    @DPTR,A
0033 22                RET     
0034         ?C0035:
                                           ; SOURCE LINE # 774
0034 900000      R     MOV     DPTR,#SEQIndex
0037 7401              MOV     A,#01H
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 801
003A         ?C0037:
003A 22                RET     
             ; FUNCTION SEQMode (END)

             ; FUNCTION SetJumpMode (BEGIN)
                                           ; SOURCE LINE # 803
                                           ; SOURCE LINE # 804
                                           ; SOURCE LINE # 807
0000 900000      R     MOV     DPTR,#NowModeState
0003 E0                MOVX    A,@DPTR
0004 6401              XRL     A,#01H
0006 7012              JNZ     ?C0038
                                           ; SOURCE LINE # 808
                                           ; SOURCE LINE # 809
0008 7FAE              MOV     R7,#0AEH
000A FE                MOV     R6,A
000B 120000      E     LCALL   _ReadEEP
000E 900000      R     MOV     DPTR,#val
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 818
0013 7F21              MOV     R7,#021H
0015 120000      R     LCALL   _CheckSourceMode
                                           ; SOURCE LINE # 823
0018 8020              SJMP    ?C0039
001A         ?C0038:
                                           ; SOURCE LINE # 825
                                           ; SOURCE LINE # 827
001A E4                CLR     A
001B 900000      R     MOV     DPTR,#SEQFlag
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 832
001F 900000      E     MOV     DPTR,#SelectModeType
0022 E0                MOVX    A,@DPTR
0023 FF                MOV     R7,A
0024 120000      R     LCALL   _CheckSourceMode
                                           ; SOURCE LINE # 835
0027 7BFF              MOV     R3,#0FFH
0029 7A00        R     MOV     R2,#HIGH ?SC_176
002B 7900        R     MOV     R1,#LOW ?SC_176
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 132 

002D 900000      E     MOV     DPTR,#?_WriteStringToAddr?BYTE+05H
0030 7401              MOV     A,#01H
0032 F0                MOVX    @DPTR,A
0033 7F09              MOV     R7,#09H
0035 7E00              MOV     R6,#00H
0037 120000      E     LCALL   _WriteStringToAddr
                                           ; SOURCE LINE # 840
003A         ?C0039:
                                           ; SOURCE LINE # 841
003A 120000      R     LCALL   L?0215
003D 120000      E     LCALL   _WriteEEP
                                           ; SOURCE LINE # 844
0040 7FA3              MOV     R7,#0A3H
0042 7E00              MOV     R6,#00H
0044 120000      E     LCALL   _ReadEEP
0047 EF                MOV     A,R7
0048 6401              XRL     A,#01H
004A 7006              JNZ     ?C0041
                                           ; SOURCE LINE # 845
004C 900000      E     MOV     DPTR,#displayhold_flag
004F 7403              MOV     A,#03H
0051 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 847
0052         ?C0041:
0052 22                RET     
             ; FUNCTION SetJumpMode (END)

             ; FUNCTION CheckMirror (BEGIN)
                                           ; SOURCE LINE # 853
                                           ; SOURCE LINE # 854
                                           ; SOURCE LINE # 857
0000 900000      E     MOV     DPTR,#InputSelection
0003 E0                MOVX    A,@DPTR
0004 24FE              ADD     A,#0FEH
0006 6035              JZ      ?C0049
0008 14                DEC     A
0009 6054              JZ      ?C0052
000B 14                DEC     A
000C 601A              JZ      ?C0046
000E 2403              ADD     A,#03H
0010 7064              JNZ     ?C0053
                                           ; SOURCE LINE # 858
                                           ; SOURCE LINE # 859
0012         ?C0043:
                                           ; SOURCE LINE # 860
0012 7FA5              MOV     R7,#0A5H
                                           ; SOURCE LINE # 861
0014 120000      R     LCALL   L?0185
0017 7008              JNZ     ?C0044
                                           ; SOURCE LINE # 862
                                           ; SOURCE LINE # 863
                                           ; SOURCE LINE # 864
0019 120000      R     LCALL   L?0183
                                           ; SOURCE LINE # 866
001C E4                CLR     A
001D FB                MOV     R3,A
                                           ; SOURCE LINE # 867
                                           ; SOURCE LINE # 868
                                           ; SOURCE LINE # 870
001E 020000      R     LJMP    ?C0176
0021         ?C0044:
                                           ; SOURCE LINE # 872
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 133 

                                           ; SOURCE LINE # 873
                                           ; SOURCE LINE # 874
0021 120000      R     LCALL   L?0183
                                           ; SOURCE LINE # 876
0024 7B01              MOV     R3,#01H
0026         ?C0171:
                                           ; SOURCE LINE # 877
                                           ; SOURCE LINE # 878
                                           ; SOURCE LINE # 880
                                           ; SOURCE LINE # 881
0026 8040              SJMP    ?C0176
                                           ; SOURCE LINE # 883
0028         ?C0046:
                                           ; SOURCE LINE # 884
0028 7FA6              MOV     R7,#0A6H
                                           ; SOURCE LINE # 885
002A 120000      R     LCALL   L?0185
002D 7007              JNZ     ?C0047
                                           ; SOURCE LINE # 886
                                           ; SOURCE LINE # 887
                                           ; SOURCE LINE # 888
002F 120000      R     LCALL   L?0186
                                           ; SOURCE LINE # 890
0032 E4                CLR     A
0033 FB                MOV     R3,A
                                           ; SOURCE LINE # 891
                                           ; SOURCE LINE # 892
                                           ; SOURCE LINE # 893
0034 8005              SJMP    ?C0172
0036         ?C0047:
                                           ; SOURCE LINE # 895
                                           ; SOURCE LINE # 896
                                           ; SOURCE LINE # 897
0036 120000      R     LCALL   L?0186
                                           ; SOURCE LINE # 899
0039 7B01              MOV     R3,#01H
003B         ?C0172:
003B         ?C0174:
                                           ; SOURCE LINE # 900
                                           ; SOURCE LINE # 901
                                           ; SOURCE LINE # 902
                                           ; SOURCE LINE # 903
003B 802B              SJMP    ?C0176
                                           ; SOURCE LINE # 905
003D         ?C0049:
                                           ; SOURCE LINE # 906
003D 7FA8              MOV     R7,#0A8H
003F 7E00              MOV     R6,#00H
0041 120000      E     LCALL   _ReadEEP
0044 900000      R     MOV     DPTR,#val
0047 EF                MOV     A,R7
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 907
0049 7B01              MOV     R3,#01H
004B 7DFF              MOV     R5,#0FFH
004D 7F8A              MOV     R7,#08AH
004F 7007              JNZ     ?C0050
                                           ; SOURCE LINE # 908
                                           ; SOURCE LINE # 909
                                           ; SOURCE LINE # 910
0051 120000      R     LCALL   L?0213
                                           ; SOURCE LINE # 912
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 134 

0054 E4                CLR     A
0055 FB                MOV     R3,A
                                           ; SOURCE LINE # 913
                                           ; SOURCE LINE # 914
                                           ; SOURCE LINE # 917
0056 8005              SJMP    ?C0173
0058         ?C0050:
                                           ; SOURCE LINE # 919
                                           ; SOURCE LINE # 920
                                           ; SOURCE LINE # 921
0058 120000      R     LCALL   L?0213
                                           ; SOURCE LINE # 923
005B 7B01              MOV     R3,#01H
005D         ?C0173:
005D         ?C0175:
                                           ; SOURCE LINE # 924
                                           ; SOURCE LINE # 925
                                           ; SOURCE LINE # 927
                                           ; SOURCE LINE # 928
005D 8009              SJMP    ?C0176
                                           ; SOURCE LINE # 930
005F         ?C0052:
                                           ; SOURCE LINE # 931
005F 7B01              MOV     R3,#01H
0061 7DFF              MOV     R5,#0FFH
                                           ; SOURCE LINE # 932
0063 120000      R     LCALL   L?0182
                                           ; SOURCE LINE # 934
0066 7B01              MOV     R3,#01H
0068         ?C0176:
0068 7D82              MOV     R5,#082H
                                           ; SOURCE LINE # 935
006A 120000      R     LCALL   L?0182
                                           ; SOURCE LINE # 936
006D E4                CLR     A
006E FB                MOV     R3,A
006F 7DFF              MOV     R5,#0FFH
0071 7F8A              MOV     R7,#08AH
0073 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 937
                                           ; SOURCE LINE # 938
                                           ; SOURCE LINE # 939
0076         ?C0053:
0076 22                RET     
0077         L?0182:
0077 7F8A              MOV     R7,#08AH
0079 120000      E     LCALL   _WriteI2C
007C 7F05              MOV     R7,#05H
007E 7E00              MOV     R6,#00H
0080 120000      E     LCALL   _Wait_ms
0083 22                RET     
0084         L?0183:
0084 120000      E     LCALL   _WriteI2C
0087 7F05              MOV     R7,#05H
0089 7E00              MOV     R6,#00H
008B 120000      E     LCALL   _Wait_ms
008E 22                RET     
008F         L?0185:
008F 7E00              MOV     R6,#00H
0091 120000      E     LCALL   _ReadEEP
0094 900000      R     MOV     DPTR,#val
0097 EF                MOV     A,R7
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 135 

0098 F0                MOVX    @DPTR,A
0099 7B01              MOV     R3,#01H
009B 7DFF              MOV     R5,#0FFH
009D 7F8A              MOV     R7,#08AH
009F 22                RET     
00A0         L?0186:
00A0 120000      E     LCALL   _WriteI2C
00A3 7F05              MOV     R7,#05H
00A5 7E00              MOV     R6,#00H
00A7 120000      E     LCALL   _Wait_ms
00AA 22                RET     
00AB         L?0213:
00AB 120000      E     LCALL   _WriteI2C
00AE 7F05              MOV     R7,#05H
00B0 7E00              MOV     R6,#00H
00B2 120000      E     LCALL   _Wait_ms
00B5 22                RET     
             ; FUNCTION CheckMirror (END)

             ; FUNCTION SetNowMode (BEGIN)
                                           ; SOURCE LINE # 942
                                           ; SOURCE LINE # 943
                                           ; SOURCE LINE # 945
0000 7A00        R     MOV     R2,#HIGH ?SC_178
0002 7900        R     MOV     R1,#LOW ?SC_178
0004 900000      R     MOV     DPTR,#NowModeState
0007 120000      R     LCALL   L?0199
000A EF                MOV     A,R7
000B F0                MOVX    @DPTR,A
000C 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 946
000F 900000      R     MOV     DPTR,#NowModeState
0012 E0                MOVX    A,@DPTR
0013 700E              JNZ     ?C0054
                                           ; SOURCE LINE # 947
                                           ; SOURCE LINE # 952
0015 900000      E     MOV     DPTR,#SelectModeType
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A 120000      R     LCALL   _CheckSourceMode
                                           ; SOURCE LINE # 954
001D E4                CLR     A
001E 900000      R     MOV     DPTR,#SEQFlag
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 955
0022 22                RET     
0023         ?C0054:
                                           ; SOURCE LINE # 957
                                           ; SOURCE LINE # 958
0023 7FAE              MOV     R7,#0AEH
0025 7E00              MOV     R6,#00H
0027 120000      E     LCALL   _ReadEEP
;---- Variable 'val' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 967
002A EF                MOV     A,R7
002B 900000      R     MOV     DPTR,#JumpTable_S
002E 93                MOVC    A,@A+DPTR
002F FF                MOV     R7,A
0030 120000      R     LCALL   _CheckSourceMode
                                           ; SOURCE LINE # 969
                                           ; SOURCE LINE # 970
0033         ?C0056:
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 136 

0033 22                RET     
             ; FUNCTION SetNowMode (END)

             ; FUNCTION SetRearSource (BEGIN)
                                           ; SOURCE LINE # 972
                                           ; SOURCE LINE # 973
                                           ; SOURCE LINE # 981
0000 7F02              MOV     R7,#02H
0002 120000      E     LCALL   _ChangeInput
                                           ; SOURCE LINE # 992
0005 900000      E     MOV     DPTR,#ReverseModeFlag
0008 E0                MOVX    A,@DPTR
0009 6401              XRL     A,#01H
000B 703F              JNZ     ?C0057
                                           ; SOURCE LINE # 995
                                           ; SOURCE LINE # 1026
000D 120000      R     LCALL   L?0202
0010 7016              JNZ     ?C0058
                                           ; SOURCE LINE # 1027
                                           ; SOURCE LINE # 1028
0012 7BA2              MOV     R3,#0A2H
0014 7D61              MOV     R5,#061H
0016 7F8A              MOV     R7,#08AH
0018 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 1029
001B 7B5A              MOV     R3,#05AH
001D 7D66              MOV     R5,#066H
001F 7F8A              MOV     R7,#08AH
0021 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 1030
0024 7B45              MOV     R3,#045H
                                           ; SOURCE LINE # 1031
0026 801D              SJMP    ?C0177
0028         ?C0058:
                                           ; SOURCE LINE # 1033
                                           ; SOURCE LINE # 1034
0028 7B13              MOV     R3,#013H
002A 7D0A              MOV     R5,#0AH
002C 7F8A              MOV     R7,#08AH
002E 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 1035
0031 7BA9              MOV     R3,#0A9H
0033 7D61              MOV     R5,#061H
0035 7F8A              MOV     R7,#08AH
0037 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 1036
003A 7B50              MOV     R3,#050H
003C 7D66              MOV     R5,#066H
003E 7F8A              MOV     R7,#08AH
0040 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 1037
0043 7B1A              MOV     R3,#01AH
0045         ?C0177:
0045 7DB5              MOV     R5,#0B5H
0047 7F8A              MOV     R7,#08AH
0049 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 1038
                                           ; SOURCE LINE # 1047
004C         ?C0057:
                                           ; SOURCE LINE # 1050
004C 7FA4              MOV     R7,#0A4H
004E 7E00              MOV     R6,#00H
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 137 

0050 120000      E     LCALL   _ReadEEP
0053 EF                MOV     A,R7
0054 700C              JNZ     ?C0061
0056 7FA2              MOV     R7,#0A2H
0058 FE                MOV     R6,A
0059 120000      E     LCALL   _ReadEEP
005C EF                MOV     A,R7
005D 7003              JNZ     ?C0061
                                           ; SOURCE LINE # 1051
005F 120000      E     LCALL   DisplayGaugeOSD
                                           ; SOURCE LINE # 1053
0062         ?C0061:
0062 22                RET     
             ; FUNCTION SetRearSource (END)

             ; FUNCTION SetLeftSource (BEGIN)
                                           ; SOURCE LINE # 1055
                                           ; SOURCE LINE # 1056
                                           ; SOURCE LINE # 1067
0000 7F01              MOV     R7,#01H
0002 020000      E     LJMP    _ChangeInput
             ; FUNCTION SetLeftSource (END)

             ; FUNCTION SetRightSource (BEGIN)
                                           ; SOURCE LINE # 1071
                                           ; SOURCE LINE # 1072
                                           ; SOURCE LINE # 1082
0000 7F04              MOV     R7,#04H
0002 020000      E     LJMP    _ChangeInput
             ; FUNCTION SetRightSource (END)

             ; FUNCTION CheckTrigger (BEGIN)
                                           ; SOURCE LINE # 1123
                                           ; SOURCE LINE # 1124
                                           ; SOURCE LINE # 1131
0000 900000      R     MOV     DPTR,#TriggerFlag
0003 E0                MOVX    A,@DPTR
0004 900000      R     MOV     DPTR,#TriggerFlagtemp
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1132
0008 E4                CLR     A
0009 900000      R     MOV     DPTR,#TriggerFlag
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1134
000D D280              SETB    P0_0
                                           ; SOURCE LINE # 1135
000F 208010            JB      P0_0,?C0064
                                           ; SOURCE LINE # 1136
                                           ; SOURCE LINE # 1137
0012 7F02              MOV     R7,#02H
0014 FE                MOV     R6,A
0015 120000      E     LCALL   _Wait_ms
                                           ; SOURCE LINE # 1138
0018 208007            JB      P0_0,?C0064
                                           ; SOURCE LINE # 1139
001B 900000      R     MOV     DPTR,#TriggerFlag
001E E0                MOVX    A,@DPTR
001F 4480              ORL     A,#080H
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1140
0022         ?C0064:
                                           ; SOURCE LINE # 1142
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 138 

0022 D281              SETB    P0_1
                                           ; SOURCE LINE # 1143
0024 20810D            JB      P0_1,?C0066
                                           ; SOURCE LINE # 1144
                                           ; SOURCE LINE # 1145
0027 120000      R     LCALL   L?0193
                                           ; SOURCE LINE # 1146
002A 208107            JB      P0_1,?C0066
                                           ; SOURCE LINE # 1147
002D 900000      R     MOV     DPTR,#TriggerFlag
0030 E0                MOVX    A,@DPTR
0031 4440              ORL     A,#040H
0033 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1148
0034         ?C0066:
                                           ; SOURCE LINE # 1150
0034 D282              SETB    P0_2
                                           ; SOURCE LINE # 1151
0036 20820D            JB      P0_2,?C0068
                                           ; SOURCE LINE # 1152
                                           ; SOURCE LINE # 1153
0039 120000      R     LCALL   L?0193
                                           ; SOURCE LINE # 1154
003C 208207            JB      P0_2,?C0068
                                           ; SOURCE LINE # 1155
003F 900000      R     MOV     DPTR,#TriggerFlag
0042 E0                MOVX    A,@DPTR
0043 4420              ORL     A,#020H
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1156
0046         ?C0068:
                                           ; SOURCE LINE # 1158
0046 30830D            JNB     P0_3,?C0070
                                           ; SOURCE LINE # 1159
                                           ; SOURCE LINE # 1160
0049 120000      R     LCALL   L?0212
                                           ; SOURCE LINE # 1161
004C 308307            JNB     P0_3,?C0070
                                           ; SOURCE LINE # 1162
004F 900000      R     MOV     DPTR,#TriggerFlag
0052 E0                MOVX    A,@DPTR
0053 4401              ORL     A,#01H
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1163
0056         ?C0070:
                                           ; SOURCE LINE # 1165
0056 900000      R     MOV     DPTR,#TriggerFlag
0059 E0                MOVX    A,@DPTR
005A FF                MOV     R7,A
005B 54FE              ANL     A,#0FEH
005D FD                MOV     R5,A
005E 900000      R     MOV     DPTR,#TriggerFlagtemp
0061 E0                MOVX    A,@DPTR
0062 6D                XRL     A,R5
0063 7001              JNZ     ?C0165
0065 E4                CLR     A
0066         ?C0165:
0066 7003              JNZ     $ + 5H
0068 020000      R     LJMP    ?C0072
                                           ; SOURCE LINE # 1166
                                           ; SOURCE LINE # 1168
006B 900000      R     MOV     DPTR,#CPON
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 139 

006E E0                MOVX    A,@DPTR
006F FE                MOV     R6,A
0070 EF                MOV     A,R7
0071 6E                XRL     A,R6
0072 604B              JZ      ?C0073
                                           ; SOURCE LINE # 1169
                                           ; SOURCE LINE # 1170
0074 7F32              MOV     R7,#032H
0076 7E00              MOV     R6,#00H
0078 120000      E     LCALL   _Wait_ms
                                           ; SOURCE LINE # 1172
007B E4                CLR     A
007C 900000      R     MOV     DPTR,#TriggerFlag
007F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1174
0080 D280              SETB    P0_0
                                           ; SOURCE LINE # 1175
0082 208010            JB      P0_0,?C0074
                                           ; SOURCE LINE # 1176
                                           ; SOURCE LINE # 1177
0085 7F02              MOV     R7,#02H
0087 FE                MOV     R6,A
0088 120000      E     LCALL   _Wait_ms
                                           ; SOURCE LINE # 1178
008B 208007            JB      P0_0,?C0074
                                           ; SOURCE LINE # 1179
008E 900000      R     MOV     DPTR,#TriggerFlag
0091 E0                MOVX    A,@DPTR
0092 4480              ORL     A,#080H
0094 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1180
0095         ?C0074:
                                           ; SOURCE LINE # 1183
0095 D281              SETB    P0_1
                                           ; SOURCE LINE # 1184
0097 20810D            JB      P0_1,?C0076
                                           ; SOURCE LINE # 1185
                                           ; SOURCE LINE # 1186
009A 120000      R     LCALL   L?0212
                                           ; SOURCE LINE # 1187
009D 208107            JB      P0_1,?C0076
                                           ; SOURCE LINE # 1188
00A0 900000      R     MOV     DPTR,#TriggerFlag
00A3 E0                MOVX    A,@DPTR
00A4 4440              ORL     A,#040H
00A6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1189
00A7         ?C0076:
                                           ; SOURCE LINE # 1191
00A7 D282              SETB    P0_2
                                           ; SOURCE LINE # 1192
00A9 208219            JB      P0_2,?C0080
                                           ; SOURCE LINE # 1193
                                           ; SOURCE LINE # 1194
00AC 7F02              MOV     R7,#02H
00AE 7E00              MOV     R6,#00H
00B0 120000      E     LCALL   _Wait_ms
                                           ; SOURCE LINE # 1195
00B3 20820F            JB      P0_2,?C0080
                                           ; SOURCE LINE # 1196
00B6 900000      R     MOV     DPTR,#TriggerFlag
00B9 E0                MOVX    A,@DPTR
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 140 

00BA 4420              ORL     A,#020H
00BC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1197
                                           ; SOURCE LINE # 1200
00BD 8006              SJMP    ?C0080
00BF         ?C0073:
                                           ; SOURCE LINE # 1202
                                           ; SOURCE LINE # 1203
00BF 900000      R     MOV     DPTR,#PPON
00C2 E0                MOVX    A,@DPTR
                                           ; SOURCE LINE # 1204
00C3 8067              SJMP    ?C0178
                                           ; SOURCE LINE # 1205
00C5         ?C0080:
                                           ; SOURCE LINE # 1207
00C5 900000      R     MOV     DPTR,#TriggerFlag
00C8 E0                MOVX    A,@DPTR
00C9 900000      R     MOV     DPTR,#CPON
00CC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1209
00CD 54E0              ANL     A,#0E0H
00CF FF                MOV     R7,A
;---- Variable 'x' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1211
00D0 900000      R     MOV     DPTR,#TriggerFlag
00D3 E0                MOVX    A,@DPTR
00D4 20E53A            JB      ACC.5,?C0072
                                           ; SOURCE LINE # 1212
                                           ; SOURCE LINE # 1214
                                           ; SOURCE LINE # 1216
00D7 EF                MOV     A,R7
00D8 FD                MOV     R5,A
00D9 7C00              MOV     R4,#00H
00DB 64C0              XRL     A,#0C0H
00DD 7010              JNZ     ?C0084
00DF 900000      R     MOV     DPTR,#TriggerFlagtemp
00E2 E0                MOVX    A,@DPTR
00E3 700A              JNZ     ?C0084
                                           ; SOURCE LINE # 1217
                                           ; SOURCE LINE # 1218
00E5 900000      R     MOV     DPTR,#PPON
00E8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1219
00E9 900000      R     MOV     DPTR,#TriggerFlag
00EC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1220
00ED FF                MOV     R7,A
00EE 22                RET     
                                           ; SOURCE LINE # 1221
00EF         ?C0084:
                                           ; SOURCE LINE # 1222
00EF ED                MOV     A,R5
00F0 64A0              XRL     A,#0A0H
00F2 4C                ORL     A,R4
00F3 6010              JZ      ?C0087
00F5 EF                MOV     A,R7
00F6 FD                MOV     R5,A
00F7 6460              XRL     A,#060H
00F9 600A              JZ      ?C0087
00FB ED                MOV     A,R5
00FC 64E0              XRL     A,#0E0H
00FE 6005              JZ      ?C0087
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 141 

0100 ED                MOV     A,R5
0101 64C0              XRL     A,#0C0H
0103 700C              JNZ     ?C0072
0105         ?C0087:
                                           ; SOURCE LINE # 1223
                                           ; SOURCE LINE # 1224
0105 900000      R     MOV     DPTR,#TriggerFlagtemp
0108 E0                MOVX    A,@DPTR
0109 900000      R     MOV     DPTR,#TriggerFlag
010C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1225
010D 900000      R     MOV     DPTR,#PPON
0110 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1227
                                           ; SOURCE LINE # 1229
0111         ?C0072:
                                           ; SOURCE LINE # 1231
0111 208307            JB      P0_3,?C0088
                                           ; SOURCE LINE # 1232
0114 900000      R     MOV     DPTR,#TriggerFlag
0117 E0                MOVX    A,@DPTR
0118 54FE              ANL     A,#0FEH
011A F0                MOVX    @DPTR,A
011B         ?C0088:
                                           ; SOURCE LINE # 1234
011B 900000      R     MOV     DPTR,#TriggerFlag
011E E0                MOVX    A,@DPTR
011F FF                MOV     R7,A
0120 30E004            JNB     ACC.0,?C0089
                                           ; SOURCE LINE # 1235
                                           ; SOURCE LINE # 1236
0123 D200        R     SETB    ParkFlag
                                           ; SOURCE LINE # 1237
0125 8002              SJMP    ?C0090
0127         ?C0089:
                                           ; SOURCE LINE # 1239
0127 C200        R     CLR     ParkFlag
0129         ?C0090:
                                           ; SOURCE LINE # 1282
0129 EF                MOV     A,R7
012A 54FE              ANL     A,#0FEH
012C         ?C0178:
012C FF                MOV     R7,A
012D 900000      R     MOV     DPTR,#TriggerFlag
0130 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1287
                                           ; SOURCE LINE # 1289
0131         ?C0081:
0131 22                RET     
0132         L?0193:
0132 7F02              MOV     R7,#02H
0134 7E00              MOV     R6,#00H
0136 120000      E     LCALL   _Wait_ms
0139 22                RET     
013A         L?0212:
013A 7F02              MOV     R7,#02H
013C 7E00              MOV     R6,#00H
013E 120000      E     LCALL   _Wait_ms
0141 22                RET     
             ; FUNCTION CheckTrigger (END)

             ; FUNCTION _TriggerHandler (BEGIN)
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 142 

                                           ; SOURCE LINE # 1777
0000 900000      R     MOV     DPTR,#T_Flag
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1778
                                           ; SOURCE LINE # 1790
0005 900000      R     MOV     DPTR,#TriggerMode
0008 E0                MOVX    A,@DPTR
0009 900000      R     MOV     DPTR,#CTri
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1797
000D 900000      E     MOV     DPTR,#Priority
0010 E0                MOVX    A,@DPTR
0011 700C              JNZ     ?C0091
                                           ; SOURCE LINE # 1798
                                           ; SOURCE LINE # 1799
                                           ; SOURCE LINE # 1800
                                           ; SOURCE LINE # 1801
                                           ; SOURCE LINE # 1802
                                           ; SOURCE LINE # 1803
0013 120000      R     LCALL   L?0198
0016 74E8              MOV     A,#0E8H
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1804
0019 A3                INC     DPTR
001A 7420              MOV     A,#020H
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1805
001D 800B              SJMP    ?C0092
001F         ?C0091:
                                           ; SOURCE LINE # 1807
                                           ; SOURCE LINE # 1809
001F E4                CLR     A
                                           ; SOURCE LINE # 1810
                                           ; SOURCE LINE # 1811
                                           ; SOURCE LINE # 1812
                                           ; SOURCE LINE # 1814
0020 120000      R     LCALL   L?0198
0023 74C4              MOV     A,#0C4H
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1815
0026 A3                INC     DPTR
0027 74C6              MOV     A,#0C6H
0029 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1816
002A         ?C0092:
                                           ; SOURCE LINE # 1838
002A 900000      R     MOV     DPTR,#T_Flag
002D E0                MOVX    A,@DPTR
002E FF                MOV     R7,A
002F 5420              ANL     A,#020H
0031 603A              JZ      ?C0093
0033 900000      R     MOV     DPTR,#ReverseMask
0036 E0                MOVX    A,@DPTR
0037 FE                MOV     R6,A
0038 EF                MOV     A,R7
0039 5E                ANL     A,R6
003A 7031              JNZ     ?C0093
                                           ; SOURCE LINE # 1839
                                           ; SOURCE LINE # 1840
003C 900000      R     MOV     DPTR,#TriggerMode
003F E0                MOVX    A,@DPTR
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 143 

0040 6401              XRL     A,#01H
0042 7003              JNZ     $ + 5H
0044 020000      R     LJMP    ?C0097
                                           ; SOURCE LINE # 1841
                                           ; SOURCE LINE # 1846
0047 120000      E     LCALL   GetDisplayedOSD
004A EF                MOV     A,R7
004B 30E103            JNB     ACC.1,?C0095
                                           ; SOURCE LINE # 1848
                                           ; SOURCE LINE # 1849
                                           ; SOURCE LINE # 1850
                                           ; SOURCE LINE # 1851
004E 120000      R     LCALL   L?0195
                                           ; SOURCE LINE # 1855
0051         ?C0095:
                                           ; SOURCE LINE # 1858
0051 300002      E     JNB     IsFirstRunfromAC,?C0096
                                           ; SOURCE LINE # 1859
                                           ; SOURCE LINE # 1860
0054 C200        E     CLR     IsFirstRunfromAC
                                           ; SOURCE LINE # 1862
0056         ?C0096:
                                           ; SOURCE LINE # 1865
0056 7A00        R     MOV     R2,#HIGH ?SC_218
0058 7900        R     MOV     R1,#LOW ?SC_218
005A 120000      R     LCALL   L?0187
                                           ; SOURCE LINE # 1866
005D 900000      R     MOV     DPTR,#TriggerMode
0060 7401              MOV     A,#01H
0062 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1867
0063 120000      R     LCALL   SetRearSource
                                           ; SOURCE LINE # 1868
0066 900000      E     MOV     DPTR,#TriggerStatus
0069 7404              MOV     A,#04H
006B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1870
006C 22                RET     
                                           ; SOURCE LINE # 1872
006D         ?C0093:
                                           ; SOURCE LINE # 1875
006D 900000      R     MOV     DPTR,#T_Flag
0070 E0                MOVX    A,@DPTR
0071 FF                MOV     R7,A
0072 5480              ANL     A,#080H
0074 6042              JZ      ?C0098
0076 900000      R     MOV     DPTR,#LeftMask
0079 E0                MOVX    A,@DPTR
007A FE                MOV     R6,A
007B EF                MOV     A,R7
007C 5E                ANL     A,R6
007D 7039              JNZ     ?C0098
                                           ; SOURCE LINE # 1876
                                           ; SOURCE LINE # 1877
007F 900000      R     MOV     DPTR,#TriggerMode
0082 E0                MOVX    A,@DPTR
0083 6402              XRL     A,#02H
0085 7003              JNZ     $ + 5H
0087 020000      R     LJMP    ?C0097
                                           ; SOURCE LINE # 1878
                                           ; SOURCE LINE # 1883
008A 120000      E     LCALL   GetDisplayedOSD
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 144 

008D EF                MOV     A,R7
008E 30E103            JNB     ACC.1,?C0100
                                           ; SOURCE LINE # 1885
                                           ; SOURCE LINE # 1886
                                           ; SOURCE LINE # 1887
                                           ; SOURCE LINE # 1888
0091 120000      R     LCALL   L?0195
                                           ; SOURCE LINE # 1892
0094         ?C0100:
                                           ; SOURCE LINE # 1895
0094 300002      E     JNB     IsFirstRunfromAC,?C0101
                                           ; SOURCE LINE # 1896
                                           ; SOURCE LINE # 1897
0097 C200        E     CLR     IsFirstRunfromAC
                                           ; SOURCE LINE # 1899
0099         ?C0101:
                                           ; SOURCE LINE # 1901
0099 7A00        R     MOV     R2,#HIGH ?SC_234
009B 7900        R     MOV     R1,#LOW ?SC_234
009D 120000      R     LCALL   L?0187
                                           ; SOURCE LINE # 1902
00A0 120000      E     LCALL   ClearGAUGEINFO
                                           ; SOURCE LINE # 1903
00A3 900000      R     MOV     DPTR,#TriggerMode
00A6 7402              MOV     A,#02H
00A8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1904
00A9 120000      R     LCALL   SetLeftSource
                                           ; SOURCE LINE # 1905
00AC 7401              MOV     A,#01H
                                           ; SOURCE LINE # 1908
00AE 120000      R     LCALL   L?0201
00B1 6054              JZ      ?C0179
                                           ; SOURCE LINE # 1909
00B3 120000      R     LCALL   L?0203
00B6         ?C0102:
                                           ; SOURCE LINE # 1911
                                           ; SOURCE LINE # 1912
                                           ; SOURCE LINE # 1916
00B6 804F              SJMP    ?C0179
                                           ; SOURCE LINE # 1918
00B8         ?C0098:
                                           ; SOURCE LINE # 1920
00B8 900000      R     MOV     DPTR,#T_Flag
00BB E0                MOVX    A,@DPTR
00BC FF                MOV     R7,A
00BD 5440              ANL     A,#040H
00BF 604C              JZ      ?C0103
00C1 900000      R     MOV     DPTR,#RightMask
00C4 E0                MOVX    A,@DPTR
00C5 FE                MOV     R6,A
00C6 EF                MOV     A,R7
00C7 5E                ANL     A,R6
00C8 7043              JNZ     ?C0103
                                           ; SOURCE LINE # 1921
                                           ; SOURCE LINE # 1922
00CA 900000      R     MOV     DPTR,#TriggerMode
00CD E0                MOVX    A,@DPTR
00CE 6403              XRL     A,#03H
00D0 7003              JNZ     $ + 5H
00D2 020000      R     LJMP    ?C0097
                                           ; SOURCE LINE # 1923
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 145 

                                           ; SOURCE LINE # 1928
00D5 120000      E     LCALL   GetDisplayedOSD
00D8 EF                MOV     A,R7
00D9 30E109            JNB     ACC.1,?C0105
                                           ; SOURCE LINE # 1930
                                           ; SOURCE LINE # 1931
00DC 120000      E     LCALL   ClearOSDInfo
                                           ; SOURCE LINE # 1932
00DF 120000      E     LCALL   InitOSDMenu
                                           ; SOURCE LINE # 1933
00E2 120000      E     LCALL   Change_OSDColorLookup
                                           ; SOURCE LINE # 1937
00E5         ?C0105:
                                           ; SOURCE LINE # 1940
00E5 300002      E     JNB     IsFirstRunfromAC,?C0106
                                           ; SOURCE LINE # 1941
                                           ; SOURCE LINE # 1942
00E8 C200        E     CLR     IsFirstRunfromAC
                                           ; SOURCE LINE # 1944
00EA         ?C0106:
                                           ; SOURCE LINE # 1947
00EA 7A00        R     MOV     R2,#HIGH ?SC_247
00EC 7900        R     MOV     R1,#LOW ?SC_247
00EE 120000      R     LCALL   L?0214
                                           ; SOURCE LINE # 1948
00F1 120000      E     LCALL   ClearGAUGEINFO
                                           ; SOURCE LINE # 1949
00F4 900000      R     MOV     DPTR,#TriggerMode
00F7 7403              MOV     A,#03H
00F9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1950
00FA 120000      R     LCALL   SetRightSource
                                           ; SOURCE LINE # 1951
00FD 7402              MOV     A,#02H
                                           ; SOURCE LINE # 1954
00FF 120000      R     LCALL   L?0201
0102 6003              JZ      ?C0107
                                           ; SOURCE LINE # 1955
0104 120000      R     LCALL   L?0203
0107         ?C0107:
                                           ; SOURCE LINE # 1956
0107         ?C0179:
                                           ; SOURCE LINE # 1957
0107 120000      R     LCALL   L?0196
010A 020000      E     LJMP    _WriteI2C
                                           ; SOURCE LINE # 1960
                                           ; SOURCE LINE # 1962
010D         ?C0103:
                                           ; SOURCE LINE # 2038
010D 900000      R     MOV     DPTR,#TriggerMode
0110 E0                MOVX    A,@DPTR
0111 6407              XRL     A,#07H
0113 7003              JNZ     $ + 5H
0115 020000      R     LJMP    ?C0108
                                           ; SOURCE LINE # 2039
                                           ; SOURCE LINE # 2040
0118 7A00        R     MOV     R2,#HIGH ?SC_261
011A 7900        R     MOV     R1,#LOW ?SC_261
011C 120000      R     LCALL   L?0214
                                           ; SOURCE LINE # 2043
                                           ; SOURCE LINE # 2047
011F 300005      E     JNB     IsFirstRunfromAC,?C0109
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 146 

                                           ; SOURCE LINE # 2048
                                           ; SOURCE LINE # 2049
0122 C200        E     CLR     IsFirstRunfromAC
                                           ; SOURCE LINE # 2051
0124 020000      R     LJMP    ?C0110
0127         ?C0109:
                                           ; SOURCE LINE # 2054
                                           ; SOURCE LINE # 2057
0127 900000      R     MOV     DPTR,#TriggerMode
012A E0                MOVX    A,@DPTR
012B 24FE              ADD     A,#0FEH
012D 600B              JZ      ?C0113
012F 14                DEC     A
0130 600C              JZ      ?C0114
0132 2402              ADD     A,#02H
0134 7016              JNZ     ?C0118
                                           ; SOURCE LINE # 2058
                                           ; SOURCE LINE # 2059
0136         ?C0112:
                                           ; SOURCE LINE # 2060
0136 7F1E              MOV     R7,#01EH
                                           ; SOURCE LINE # 2061
0138 8006              SJMP    ?C0181
                                           ; SOURCE LINE # 2063
013A         ?C0113:
                                           ; SOURCE LINE # 2064
013A 7F1B              MOV     R7,#01BH
013C         ?C0180:
                                           ; SOURCE LINE # 2065
013C 8002              SJMP    ?C0181
                                           ; SOURCE LINE # 2067
013E         ?C0114:
                                           ; SOURCE LINE # 2068
013E 7F1C              MOV     R7,#01CH
0140         ?C0181:
0140 7E02              MOV     R6,#02H
0142 120000      E     LCALL   _ReadEEP
0145 900000      R     MOV     DPTR,#delaytrigger
0148 EF                MOV     A,R7
0149 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2069
014A 8005              SJMP    ?C0111
                                           ; SOURCE LINE # 2081
                                           ; SOURCE LINE # 2082
                                           ; SOURCE LINE # 2083
                                           ; SOURCE LINE # 2084
014C         ?C0118:
                                           ; SOURCE LINE # 2085
014C E4                CLR     A
014D 900000      R     MOV     DPTR,#delaytrigger
0150 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2086
                                           ; SOURCE LINE # 2087
0151         ?C0111:
                                           ; SOURCE LINE # 2091
0151 900000      E     MOV     DPTR,#PowerFlag
0154 E0                MOVX    A,@DPTR
0155 6401              XRL     A,#01H
0157 7025              JNZ     ?C0119
                                           ; SOURCE LINE # 2092
                                           ; SOURCE LINE # 2093
0159 900000      R     MOV     DPTR,#j
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 147 

015C F0                MOVX    @DPTR,A
015D         ?C0120:
015D 120000      R     LCALL   L?0189
0160 504A              JNC     ?C0127
                                           ; SOURCE LINE # 2094
                                           ; SOURCE LINE # 2095
0162 E4                CLR     A
0163 900000      R     MOV     DPTR,#i
0166 F0                MOVX    @DPTR,A
0167         ?C0123:
0167 120000      R     LCALL   L?0191
016A 500D              JNC     ?C0122
                                           ; SOURCE LINE # 2096
                                           ; SOURCE LINE # 2097
                                           ; SOURCE LINE # 2098
016C 120000      R     LCALL   L?0197
016F 6003              JZ      $ + 5H
0171 020000      R     LJMP    ?C0097
                                           ; SOURCE LINE # 2100
                                           ; SOURCE LINE # 2101
0174 120000      R     LCALL   L?0184
0177 80EE              SJMP    ?C0123
                                           ; SOURCE LINE # 2102
0179         ?C0122:
0179 120000      R     LCALL   L?0206
017C 80DF              SJMP    ?C0120
                                           ; SOURCE LINE # 2103
017E         ?C0119:
                                           ; SOURCE LINE # 2105
                                           ; SOURCE LINE # 2107
017E E4                CLR     A
017F 900000      R     MOV     DPTR,#j
0182 F0                MOVX    @DPTR,A
0183         ?C0128:
0183 120000      R     LCALL   L?0189
0186 5024              JNC     ?C0127
                                           ; SOURCE LINE # 2108
                                           ; SOURCE LINE # 2109
0188 E4                CLR     A
0189 900000      R     MOV     DPTR,#i
018C F0                MOVX    @DPTR,A
018D         ?C0131:
018D 900000      R     MOV     DPTR,#i
0190 E0                MOVX    A,@DPTR
0191 C3                CLR     C
0192 944D              SUBB    A,#04DH
0194 7480              MOV     A,#080H
0196 9480              SUBB    A,#080H
0198 500D              JNC     ?C0130
                                           ; SOURCE LINE # 2110
                                           ; SOURCE LINE # 2111
                                           ; SOURCE LINE # 2112
019A 120000      R     LCALL   L?0197
019D 6003              JZ      $ + 5H
019F 020000      R     LJMP    ?C0097
                                           ; SOURCE LINE # 2114
                                           ; SOURCE LINE # 2115
01A2 120000      R     LCALL   L?0184
01A5 80E6              SJMP    ?C0131
                                           ; SOURCE LINE # 2116
01A7         ?C0130:
01A7 120000      R     LCALL   L?0206
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 148 

01AA 80D7              SJMP    ?C0128
                                           ; SOURCE LINE # 2117
01AC         ?C0127:
                                           ; SOURCE LINE # 2136
01AC 900000      R     MOV     DPTR,#TriggerMode
01AF E0                MOVX    A,@DPTR
01B0 6401              XRL     A,#01H
01B2 7012              JNZ     ?C0110
                                           ; SOURCE LINE # 2137
                                           ; SOURCE LINE # 2138
01B4 43E804            ORL     P4,#04H
                                           ; SOURCE LINE # 2139
01B7 7B16              MOV     R3,#016H
01B9 7D0A              MOV     R5,#0AH
01BB 7F8A              MOV     R7,#08AH
01BD 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 2140
                                           ; SOURCE LINE # 2141
01C0 120000      R     LCALL   L?0196
01C3 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 2142
                                           ; SOURCE LINE # 2155
01C6         ?C0110:
                                           ; SOURCE LINE # 2204
                                           ; SOURCE LINE # 2205
01C6 900000      R     MOV     DPTR,#TriggerMode
01C9 7407              MOV     A,#07H
01CB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2206
01CC 120000      E     LCALL   ClearGAUGEINFO
                                           ; SOURCE LINE # 2211
                                           ; SOURCE LINE # 2230
01CF 900000      E     MOV     DPTR,#RELEASE_TR_JUMP_Flag
01D2 E0                MOVX    A,@DPTR
01D3 6401              XRL     A,#01H
01D5 702B              JNZ     ?C0136
                                           ; SOURCE LINE # 2231
                                           ; SOURCE LINE # 2232
01D7 900000      E     MOV     DPTR,#TR_JUMP_Flag
01DA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2233
01DB 900000      E     MOV     DPTR,#TR_JUMP_HOLD
01DE E0                MOVX    A,@DPTR
01DF FF                MOV     R7,A
01E0 900000      R     MOV     DPTR,#NowModeState
01E3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2234
01E4 E4                CLR     A
01E5 900000      E     MOV     DPTR,#RELEASE_TR_JUMP_Flag
01E8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2235
01E9 7BFF              MOV     R3,#0FFH
01EB 7A00        R     MOV     R2,#HIGH ?SC_271
01ED 7900        R     MOV     R1,#LOW ?SC_271
01EF 900000      E     MOV     DPTR,#SelectModeType
01F2 E0                MOVX    A,@DPTR
01F3 FD                MOV     R5,A
01F4 120000      R     LCALL   L?0200
01F7 ED                MOV     A,R5
01F8 F0                MOVX    @DPTR,A
01F9 A3                INC     DPTR
01FA E4                CLR     A
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 149 

01FB F0                MOVX    @DPTR,A
01FC A3                INC     DPTR
01FD EF                MOV     A,R7
01FE F0                MOVX    @DPTR,A
01FF 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 2236
0202         ?C0136:
                                           ; SOURCE LINE # 2238
0202 C200        E     CLR     IsDrawNoVideoSignal
                                           ; SOURCE LINE # 2240
0204 900000      E     MOV     DPTR,#PowerFlag
0207 E0                MOVX    A,@DPTR
0208 604E              JZ      ?C0137
                                           ; SOURCE LINE # 2241
                                           ; SOURCE LINE # 2243
020A 200048      R     JB      ParkFlag,?C0138
                                           ; SOURCE LINE # 2244
                                           ; SOURCE LINE # 2245
                                           ; SOURCE LINE # 2247
020D 120000      R     LCALL   L?0210
0210 7043              JNZ     ?C0138
                                           ; SOURCE LINE # 2248
                                           ; SOURCE LINE # 2250
0212 120000      R     LCALL   L?0194
                                           ; SOURCE LINE # 2252
0215 900000      R     MOV     DPTR,#CTri
0218 E0                MOVX    A,@DPTR
0219 FF                MOV     R7,A
021A 6401              XRL     A,#01H
021C 6005              JZ      ?C0141
021E EF                MOV     A,R7
021F 6402              XRL     A,#02H
0221 7005              JNZ     ?C0140
0223         ?C0141:
                                           ; SOURCE LINE # 2253
0223 E4                CLR     A
0224 900000      R     MOV     DPTR,#delaytrigger
0227 F0                MOVX    @DPTR,A
0228         ?C0140:
                                           ; SOURCE LINE # 2255
0228 E4                CLR     A
0229 900000      R     MOV     DPTR,#j
022C F0                MOVX    @DPTR,A
022D         ?C0142:
022D 120000      R     LCALL   L?0190
0230 5020              JNC     ?C0143
                                           ; SOURCE LINE # 2256
                                           ; SOURCE LINE # 2257
0232 E4                CLR     A
0233 900000      R     MOV     DPTR,#i
0236 F0                MOVX    @DPTR,A
0237         ?C0145:
0237 120000      R     LCALL   L?0191
023A 5011              JNC     ?C0144
                                           ; SOURCE LINE # 2258
                                           ; SOURCE LINE # 2259
023C 120000      R     LCALL   CheckTrigger
                                           ; SOURCE LINE # 2260
023F 900000      R     MOV     DPTR,#TriggerFlag
0242 E0                MOVX    A,@DPTR
0243 707C              JNZ     ?C0097
                                           ; SOURCE LINE # 2262
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 150 

0245 200079      R     JB      ParkFlag,?C0097
                                           ; SOURCE LINE # 2265
                                           ; SOURCE LINE # 2266
0248 120000      R     LCALL   L?0208
024B 80EA              SJMP    ?C0145
                                           ; SOURCE LINE # 2267
024D         ?C0144:
024D 120000      R     LCALL   L?0207
0250 80DB              SJMP    ?C0142
0252         ?C0143:
                                           ; SOURCE LINE # 2268
0252 120000      R     LCALL   L?0209
                                           ; SOURCE LINE # 2270
                                           ; SOURCE LINE # 2271
0255         ?C0138:
                                           ; SOURCE LINE # 2274
0255 120000      R     LCALL   SetNowMode
                                           ; SOURCE LINE # 2275
0258         ?C0137:
                                           ; SOURCE LINE # 2280
0258 7FA3              MOV     R7,#0A3H
025A 7E00              MOV     R6,#00H
025C 120000      E     LCALL   _ReadEEP
025F EF                MOV     A,R7
0260 6401              XRL     A,#01H
0262 7006              JNZ     ?C0108
                                           ; SOURCE LINE # 2281
0264 900000      E     MOV     DPTR,#displayhold_flag
0267 7403              MOV     A,#03H
0269 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2283
                                           ; SOURCE LINE # 2303
026A         ?C0108:
                                           ; SOURCE LINE # 2310
026A 200054      R     JB      ParkFlag,?C0097
                                           ; SOURCE LINE # 2311
                                           ; SOURCE LINE # 2312
                                           ; SOURCE LINE # 2316
026D 120000      R     LCALL   L?0210
0270 704F              JNZ     ?C0097
                                           ; SOURCE LINE # 2318
                                           ; SOURCE LINE # 2322
0272 7BFF              MOV     R3,#0FFH
0274 7A00        R     MOV     R2,#HIGH ?SC_316
0276 7900        R     MOV     R1,#LOW ?SC_316
0278 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 2325
027B 120000      R     LCALL   L?0194
                                           ; SOURCE LINE # 2327
027E 900000      R     MOV     DPTR,#CTri
0281 E0                MOVX    A,@DPTR
0282 FF                MOV     R7,A
0283 6401              XRL     A,#01H
0285 6005              JZ      ?C0155
0287 EF                MOV     A,R7
0288 6402              XRL     A,#02H
028A 7005              JNZ     ?C0154
028C         ?C0155:
                                           ; SOURCE LINE # 2328
028C E4                CLR     A
028D 900000      R     MOV     DPTR,#delaytrigger
0290 F0                MOVX    @DPTR,A
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 151 

0291         ?C0154:
                                           ; SOURCE LINE # 2330
0291 E4                CLR     A
0292 900000      R     MOV     DPTR,#j
0295 F0                MOVX    @DPTR,A
0296         ?C0156:
0296 120000      R     LCALL   L?0190
0299 5020              JNC     ?C0157
                                           ; SOURCE LINE # 2331
                                           ; SOURCE LINE # 2332
029B E4                CLR     A
029C 900000      R     MOV     DPTR,#i
029F F0                MOVX    @DPTR,A
02A0         ?C0159:
02A0 120000      R     LCALL   L?0192
02A3 5011              JNC     ?C0158
                                           ; SOURCE LINE # 2333
                                           ; SOURCE LINE # 2334
02A5 120000      R     LCALL   CheckTrigger
                                           ; SOURCE LINE # 2335
02A8 900000      R     MOV     DPTR,#TriggerFlag
02AB E0                MOVX    A,@DPTR
02AC 7013              JNZ     ?C0097
                                           ; SOURCE LINE # 2337
02AE 200010      R     JB      ParkFlag,?C0097
                                           ; SOURCE LINE # 2340
                                           ; SOURCE LINE # 2341
02B1 120000      R     LCALL   L?0208
02B4 80EA              SJMP    ?C0159
                                           ; SOURCE LINE # 2342
02B6         ?C0158:
02B6 120000      R     LCALL   L?0207
02B9 80DB              SJMP    ?C0156
02BB         ?C0157:
                                           ; SOURCE LINE # 2345
02BB 120000      R     LCALL   L?0209
                                           ; SOURCE LINE # 2346
02BE 120000      R     LCALL   SetNowMode
                                           ; SOURCE LINE # 2347
                                           ; SOURCE LINE # 2348
                                           ; SOURCE LINE # 2355
02C1         ?C0097:
02C1 22                RET     
02C2         L?0184:
02C2 7F07              MOV     R7,#07H
02C4 FE                MOV     R6,A
02C5 120000      E     LCALL   _Wait_ms
02C8 900000      R     MOV     DPTR,#i
02CB E0                MOVX    A,@DPTR
02CC 04                INC     A
02CD F0                MOVX    @DPTR,A
02CE 22                RET     
02CF         L?0187:
02CF 7BFF              MOV     R3,#0FFH
02D1 E4                CLR     A
02D2 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
02D5 F0                MOVX    @DPTR,A
02D6 120000      E     LCALL   _Printf
02D9 22                RET     
02DA         L?0194:
02DA 7F1D              MOV     R7,#01DH
02DC 7E02              MOV     R6,#02H
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 152 

02DE 120000      E     LCALL   _ReadEEP
02E1 900000      R     MOV     DPTR,#delaytrigger
02E4 EF                MOV     A,R7
02E5 F0                MOVX    @DPTR,A
02E6 22                RET     
02E7         L?0195:
02E7 120000      E     LCALL   ClearOSDInfo
02EA 120000      E     LCALL   InitOSDMenu
02ED 120000      E     LCALL   Change_OSDColorLookup
02F0 22                RET     
02F1         L?0196:
02F1 7B80              MOV     R3,#080H
02F3 7D61              MOV     R5,#061H
02F5 7F8A              MOV     R7,#08AH
02F7 120000      E     LCALL   _WriteI2C
02FA E4                CLR     A
02FB FB                MOV     R3,A
02FC 7D66              MOV     R5,#066H
02FE 7F8A              MOV     R7,#08AH
0300 22                RET     
0301         L?0197:
0301 120000      R     LCALL   CheckTrigger
0304 900000      R     MOV     DPTR,#TriggerFlag
0307 E0                MOVX    A,@DPTR
0308 22                RET     
0309         L?0203:
0309 7B26              MOV     R3,#026H
030B 7D0A              MOV     R5,#0AH
030D 7F8A              MOV     R7,#08AH
030F 120000      E     LCALL   _WriteI2C
0312 22                RET     
0313         L?0208:
0313 7F07              MOV     R7,#07H
0315 FE                MOV     R6,A
0316 120000      E     LCALL   _Wait_ms
0319 900000      R     MOV     DPTR,#i
031C E0                MOVX    A,@DPTR
031D 04                INC     A
031E F0                MOVX    @DPTR,A
031F 22                RET     
0320         L?0209:
0320 7FB0              MOV     R7,#0B0H
0322 7E00              MOV     R6,#00H
0324 120000      E     LCALL   _ReadEEP
0327 900000      E     MOV     DPTR,#SelectModeType
032A EF                MOV     A,R7
032B F0                MOVX    @DPTR,A
032C 22                RET     
032D         L?0214:
032D 7BFF              MOV     R3,#0FFH
032F E4                CLR     A
0330 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
0333 F0                MOVX    @DPTR,A
0334 120000      E     LCALL   _Printf
0337 22                RET     
             ; FUNCTION _TriggerHandler (END)

C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 153 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


SetDATETIME. . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
Update_CONFIG. . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
DWORD. . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
SendDVRStatus. . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
GetDVRParam. . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
ClearGAUGEINFO . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CAM_R. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
P4 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E8H  1
RELEASE_TR_JUMP_Flag . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
Halt_OK. . . . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
TriggerModeType. . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
SendDVRParamDT . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
CAM_BAR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ABR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_CAR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ACR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
JumpTable. . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    017BH  14
CAM_CBR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_BCR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
ParkFlag . . . . . . . . . . . . . . .  PUBLIC   DATA   BIT      0000H  1
PowerFlag. . . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
NumberStringType . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  11
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  width. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  BackColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  Radix. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  NumColor . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  MaxLen . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  PrePostCharLen . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  PrePostChar. . . . . . . . . . . . .  MEMBER   -----  ARRAY    0008H  3
DoorClose. . . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
SetDVRParam. . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
P0_0 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0080H  1
SelectModeType . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
P0_1 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0081H  1
CAM_PTZ_RIGHT. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
P0_2 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0082H  1
Change_OSDColorLookup. . . . . . . . .  EXTERN   CODE   PROC     -----  -----
P0_3 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0083H  1
SELECT_NUM . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
AVFlag . . . . . . . . . . . . . . . .  PUBLIC   DATA   BIT      0001H  1
InitOSDMenu. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
FontData . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  27
  font . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  27
SelectBoxMode. . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0002H  1
GetDVRStatus . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
RIGHT_TRIG . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
SetSelectMode. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
LAST_TRIG_NON. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_TriggerHandler. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  T_Flag . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  ReverseMask. . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
  LeftMask . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0003H  1
  RightMask. . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0004H  1
  CamCMask . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0005H  1
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 154 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  CamDMask . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0006H  1
  VGAMask. . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0007H  1
  delaytrigger . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0008H  1
  j. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0009H  1
  CTri . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   000AH  1
CAM_SET. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
NORMALL_MODE . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
AVMode . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
TR_JUMP_Flag . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
displayhold_flag . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
SourceModeType . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
RIGHT_SELECT . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_NUM. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
SetRightSource . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
CMD_NUM. . . . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
InfoAutoDayNight_Night . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
EVENT_SELECT . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
InfoNoVideoSignal. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
DoorOpen . . . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
MANUALRECSTART . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
CAMC_TRIG. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
LAST_TRIG_RIGHT. . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
DisplayGaugeOSD. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
GetDisplayedOSD. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
GetInformation . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
SetRearSource. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
TimeStep . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0003H  1
CAM_RAB_H. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
SetLeftSource. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
OSDStrInfo . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  8
  cnt. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  addr . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  attr . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  str. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0004H  4
SetFormatSD. . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
CAM_BA . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_AB . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
BYTE . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
TimeType . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  7
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  width. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  BackColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  Format . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  TimeColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  CursorColor. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
CAM_CA . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_AC . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_PTZ_UP . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
SetSystem. . . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
REVERSE_TRIG . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_BC . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_CB . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
InitVideoDataSrc . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
CAMC_SELECT. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CheckTrigger . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  TriggerFlagtemp. . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 155 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  CPON . . . . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0000H  1
  PPON . . . . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0001H  1
  x. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
SourceModeTypeEnum . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
struct_IdName. . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  17
  Id . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  Name . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0001H  16
IsFirstRunfromAC . . . . . . . . . . .  EXTERN   DATA   BIT      -----  1
SetFormatSDDone. . . . . . . . . . . .  E_CONST  -----  INT      -----  2
EnumType . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  17
  Sz . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  ByLang . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  Str. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0002H  15
MenuType . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  4
  width. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  height . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  TitleColor . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  CursorColor. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
CAM_RAB_T. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
JumpTable_S. . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    019FH  4
CAM_RAC_T. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
WORD . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
CAM_PTZ_LEFT . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Attr_A . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0004H  1
CAM_RBC_T. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Attr_B . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0005H  1
CAM_Iris_Open. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Attr_C . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0006H  1
InputSelection . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
REVERSE_SELECT . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
NowModeState . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0007H  1
CAM_ZOOM_OUT_START . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
LAST_TRIG_CAMC . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
InfoAutoDayNight_Auto. . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
LEFT_TRIG. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_AR . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_BR . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_RB . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
PARK_TRIG. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_CR . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Gauge_Flag . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0008H  1
InfoAutoDayNight_Day . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_MENU_ENTER . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Register . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
CAM_PTZ_DOWN . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_WriteStringToAddr . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
TR_JUMP_HOLD . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
_WriteI2C. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
LAST_TRIG_REVERSE. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
LEFT_SELECT. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_CALL . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Attr_R . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0009H  1
JUMPAVFlag . . . . . . . . . . . . . .  EXTERN   DATA   BIT      -----  1
RS485_RX . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Baud_rate2400. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
RS485_TX . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
SetJumpMode. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 156 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  val. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
VGAAudio . . . . . . . . . . . . . . .  PUBLIC   DATA   BIT      0002H  1
SEQTable . . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    019BH  4
TriggerFlag. . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   000AH  1
No_TRIG. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
FW_Update_Start. . . . . . . . . . . .  E_CONST  -----  INT      -----  2
NumType. . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  5
  PrePostCharLen . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  PrePostChar. . . . . . . . . . . . .  MEMBER   -----  ARRAY    0001H  4
SelectBoxADC . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   000BH  1
_Wait_ms . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CAM_PTZ_STOP . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
BOOKMARK . . . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
_ReadEEP . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
RegisterInfo . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  Min. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0000H  2
  Max. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0002H  2
  Default. . . . . . . . . . . . . . .  MEMBER   -----  INT      0004H  2
Baud_rate4800. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
LAST_TRIG_LEFT . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_PCMDATA . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  22
  Support. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  HAN. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  VAN. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0003H  2
  IVF. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0005H  2
  CLOCK. . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0007H  2
  low. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0009H  2
  high . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000BH  2
  Hstart . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000DH  2
  Vstart . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000FH  2
  IPF. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0011H  2
  PPF. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0013H  2
  VBack. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0015H  1
Baud_rate9600. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_ChangeInput . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_CheckSourceMode . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  sorce. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
CAM_QUAD . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
FW_Update_OK . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
JUMP_SELECT. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
No_SELECT. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CheckMirror. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  val. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
TriggerMode. . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   000CH  1
ClearOSDInfo . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
TriggerStatus. . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
CAM_ZOOM_IN_START. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
InfoOSDMENULOCKED. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
MANUALRECSTOP. . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
ReverseModeFlag. . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
SetDVRDefault. . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
SEQIndex . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   000DH  1
SEQFlag. . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   000EH  1
DefineMenu . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  16
  Icon . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0000H  2
  Desc . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0002H  3
  PreFnId. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 157 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  PostFnId . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  IconColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  DescColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
  Child. . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0009H  2
  Type . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000BH  1
  ActiveWithCursor . . . . . . . . . .  MEMBER   -----  U_CHAR   000CH  1
  Id . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000DH  1
  TypeData . . . . . . . . . . . . . .  MEMBER   -----  PTR      000EH  2
Priority . . . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
CMD_UNKNOWN. . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
TRIGGER_NUM. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
IsDrawNoVideoSignal. . . . . . . . . .  EXTERN   DATA   BIT      -----  1
DisplayInformation . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
_WriteEEP. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
SEQ. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
SetNowMode . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  val. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
RightTable . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0193H  4
InfoOSDMENUATCIVE. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
LongRegisterInfo . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  Min. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  Max. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  Default. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
HS_DvrCommand. . . . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
SendDVRParam . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
DisplayInput . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
AV_MODE_DELAY. . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   000FH  1
SELECTModeType . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
PictureInfo. . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  4
  Register_Addr. . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  EEPROM_Addr. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  Control_Range. . . . . . . . . . . .  MEMBER   -----  PTR      0002H  2
CAM_RAC_T2 . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ABR_T3 . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_RBC_T2 . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ABR_T4 . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
GPSReset . . . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
CMD_NULL . . . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
SEQMode. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
GetDATETIME. . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
CAM_A. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
SNAPSHOT . . . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
CAM_B. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
InfoPLZRESETSYSTEM . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_C. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_Printf. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
VGA_TRIG . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
RearTable. . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0189H  10
LeftTable. . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0197H  4
CAM_CAB. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_BAC. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ABC. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Update_CONFIG_OK . . . . . . . . . . .  E_CONST  -----  INT      -----  2
GetDVRVersion. . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
AWT_LAST_TRIGGER . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
ParkTable. . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    015AH  33
SEQTime. . . . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
C51 COMPILER V9.60.0.0   HS_KEYREMO                                                        06/22/2022 16:23:03 PAGE 158 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


Halt_Start . . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
SendAlarm. . . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
GetLCDMode . . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2023    ----
   CONSTANT SIZE    =    419    ----
   XDATA SIZE       =     16      14
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
