C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE ETC_EEP
OBJECT MODULE PLACED IN .\Output\etc_eep.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE etc_eep.c LARGE OPTIMIZE(9,SIZE) BROWSE INCDIR(.\Include\) DEBUG OBJECTE
                    -XTEND CODE LISTINCLUDE SYMBOLS PRINT(.\Source\etc_eep.lst) TABS(2) OBJECT(.\Output\etc_eep.obj)

line level    source

   1          //eeprom.c
   2          #include "Config.h"
   1      =1  /*****************************************************************************/
   2      =1  /*                           System Configurations                           */
   3      =1  /*              rev 0.10 include auto test             */
   4      =1  // 0.11 change DTV, PC input initial download data correct for Charge Pump
   5      =1  // 0.12 correct phase measurement routine '>>3'
   6      =1  // 0.13 enable function for SPI control... only EXT MCU case
   7      =1  // 0.14 corrected PC measurement......
   8      =1  // 0.0a test function only for CVBS, SVIDEO
   9      =1  // 0.15 corrected DTV scaler setting for panel resolutions
  10      =1  // 0.0b panel for AND 640x480 TICON panel
  11      =1  // 0.16 corrected COMPONENT scaler setting for panel resolutions  11/21/2007
  12      =1  // 0.0c automatic chip test
  13      =1  // 0.17 add monitor function, osd grid for writing grid
  14      =1  // 0.18 add component, dtv pc for analogpanel, 12/06/2007
  15      =1  // 0.19 correct pal input for CES, 12/20/2007
  16      =1  // 0.1a CCFL control, 12/28/2007
  17      =1  // 0.19 Multi Grid for Banking on Internal MCU  01/17/2008
  18      =1  // 0.20 CCFL contol for backlight brightness  01/21/2008
  19      =1  // 0.21 CCFL contol for backlight brightness  01/25/2008
  20      =1  // 0.22 phase setting 02/07/2008
  21      =1  // 0.221 display input correction 04/03/2008
  22      =1  // 0.23 PC, DTV mode, no signal display
  23      =1  // 0.24 PC Auto Color adjustment
  24      =1  // 0.25 revised PC Auto Clock adjustment - find divide number and phase
  25      =1  // 0.26 Digital RGB for TW8826
  26      =1  // 0.27 Correct LVDS control          08/22/2008
  27      =1  // 0.28 Add WSVGA resolution          10/23/2008
  28      =1  // 0.29 Add NEW GRID              11/14/2008
  29      =1  // 0.30 Fix DTV input             12/10/2008
  30      =1  // 0.31 Add 1080i23, 24, 25A, 25B       01/20/2009
  31      =1  // 0.32 TCON setting FIX all mode       01/22/2009
  32      =1  // 0.33 autodetect is auto on/off by dip sw1  02/02/2009
  33      =1  // 0.34 Fix autocolor function and clamp position 02/08/2009
  34      =1  /*****************************************************************************/
  35      =1  #ifndef __CONFIG_H__
  36      =1  #define __CONFIG_H__
  37      =1  
  38      =1  //#define INTERNAL_MCU -- defined by Project Compiler session
  39      =1  #define   HS        
  40      =1  //#define   E_Wintek  
  41      =1  //#define   AWT 
  42      =1  //#define Holtz
  43      =1  
  44      =1  //#define QUAD
  45      =1  
  46      =1  #ifdef QUAD
           =1   #define AWT_ML072Q  //Pinchi 20150827 disable for HTRV
           =1 //  #define HTRV  //Pinchi 20140902 disable for AWT ML072Q
           =1 #else
  50      =1    #define AWT_ML072S
  51      =1  #endif
  52      =1  
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 2   

  53      =1  //--------------------------------------------------
  54      =1  //              Common Feature Define
  55      =1  //--------------------------------------------------
  56      =1  //#define FIRST_RUN_FROM_AC  //Pinchi 20150831 disable for Screen re-setting by Set4WideScreen()  //Pinchi
             - 20141029 add
  57      =1  #define SUPPORT_ML072Q_AUTO_DAY_NIGHT  //Pinchi 20150825 add for function define
  58      =1  #define SUPPORT_TRIGGER_EXIT_MENU  //Pinchi 20150827 add for exit OSD Menu by CAM trigger
  59      =1  #define SUPPORT_AC_ON_NORMAL_SCREEN  //Pinchi 20150901 add to set 4:3 screen when AC on
  60      =1  
  61      =1  #define FIX_DISPLAY_OFF_TRIGGER_ISSUE  //Pinchi 20150908 add to fix [Display] set OFF and trigger release 
             -then trigger again during display info the CAM will change from trigger CH to original CH
  62      =1  #define FIX_EXIT_STANDBY_NO_AUDIO  //Pinchi 20150908 add to fix no audio output when exit Standby mode
  63      =1  #ifdef AWT_ML072Q
           =1 #define FIX_2835_SCREEN_NOISE  //Pinchi 20160929 add to fix the screen noise of TW2835 by change DDR to ma
             -ke clock shift
           =1 #endif
  66      =1  
  67      =1  #define SUPPORT_NEW_TRIGGER_FUNCTION  /////修改新的Trigger方式減少trigger polling 時間 add by ryan@2018012
             -4
  68      =1  
  69      =1  //#define AWT_ML072QS_MSG  //Pinchi 20140925 add
  70      =1  //#define REDUCE_DELAY_TIME  //Pinchi 20141029 add
  71      =1  //#define DISPLAY_TECHWELL_LOGO  //Pinchi 2050903 add to disable the Techwell logo
  72      =1  
  73      =1  //#define SUPPORT_SVIDEO                     //andy Awt 20090914
  74      =1  //#define SUPPORT_COMPONENT     // support component analog to decoder//andy Awt 20090914
  75      =1  //#define SUPPORT_DTV           // support DTV input through component( to ADC ).//andy Awt 20090914
  76      =1  //#define SUPPORT_PC        // support PC function
  77      =1  //#define SUPPORT_DVI       // support DVI input
  78      =1  //#define SUPPORT_SDCARD
  79      =1  
  80      =1  #define SUPPORT_2835_CLK_TUNE_BACK_DOOR  //Pinchi 20160913 add to fine tune TW2835 clock by hot key
  81      =1  //#define SUPPORT_DISPLAY_TEST_VERSION  //Pinchi 20150929 add to display test software version on OSD
  82      =1  
  83      =1  //--------------------------------------------------
  84      =1  //              Model Feature Define
  85      =1  //--------------------------------------------------
  86      =1  #if (defined AWT_ML072Q) || (defined AWT_ML072S)
  87      =1  #define AWT_ML072QS_FW_RULE  //Pinchi 20140902 add
  88      =1  //#define AWT_NEW_SLIM_MODEL  //Pinchi 20150203 add for AWT new slim model
  89      =1  #define AWT_NO_SIGNAL_MSG  //Pinchi 20150319 add for display "NO VIDEO SIGNAL" by AWT request of 20150302
  90      =1  #define AWT_TW2835_DRAW_T_ICON  //Pinchi 20150415 add to draw T icon by TW2835 when CAM C trigger
  91      =1  #define SUPPORT_AC_ON_REDUCE_TIME  //Pinchi 20150903 add to reduce Power time when AC on
  92      =1  
  93      =1  //#define SUPPORT_TRIGGER_RELEASE_DELAY  //Pinchi 20150908 add to support delay time when CAM trigger rele
             -ase
  94      =1  
  95      =1  typedef enum  //Pinchi 20150326 add
  96      =1  {
  97      =1       LAST_TRIG_NON =  0x00,
  98      =1       LAST_TRIG_LEFT =   0x01,
  99      =1       LAST_TRIG_RIGHT =  0x02,
 100      =1       LAST_TRIG_REVERSE =0x03,
 101      =1       LAST_TRIG_CAMC =   0x04,
 102      =1  
 103      =1  } AWT_LAST_TRIGGER;
 104      =1  
 105      =1  #endif
 106      =1  
 107      =1  
 108      =1  #ifdef HTRV  //Pinchi 20150825 add
           =1 #define HTRV_ML072Q_FW_RULE  //Pinchi 20150827 add
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 3   

           =1 #define HTRV_REDUCE_SCREEN_CHANGE  //Pinchi 20150828 add to reduce screen double change
           =1 
           =1 #if 0  //Pinchi 20151209 add to remove 4:3 screen by HTRV request of 20151209
           =1 #define HTRV_SUPPORT_4_3_SCREEN
           =1 #else
           =1 #undef SUPPORT_AC_ON_NORMAL_SCREEN  //Pinchi 20151210 add
           =1 #endif
           =1 
           =1 #endif
 119      =1  
 120      =1  //#define SUPPORT_RS485
 121      =1  //-----------------------------------------------------------------------------
 122      =1  //    Firmware Version
 123      =1  //-----------------------------------------------------------------------------
 124      =1  #ifdef HTRV  //Pinchi 20150907 add
           =1 //#define FWVER     0x200 // Rev 2.00
           =1 //#define FWVER     0x210   // Rev 2.1  //Pinchi 20151209 update version for HTRV request to remove 4:3 scree
             -n
           =1 //#define FWVER     0x220   // Rev 2.2  //Pinchi 20160929 change for V2.2
           =1 #define FWVER     0x230     //Rev 2.3    ryan@20170727 update version by Encoder switches零件 EOL更換
           =1 #else
 130      =1  #define FWVER     0x210   // Rev 0.14
 131      =1  #endif
 132      =1  
 133      =1  //-----------------------------------------------------------------------------
 134      =1  //    Compiler
 135      =1  //-----------------------------------------------------------------------------
 136      =1  #define KEILC           // Keil C 5.0
 137      =1  //-----------------------------------------------------------------------------
 138      =1  //    MPU Clock
 139      =1  //-----------------------------------------------------------------------------
 140      =1  #ifndef INTERNAL_MCU
 141      =1  //#define CLOCK_11M         // 11.0592MHz
 142      =1  #define CLOCK_22M         // 22.1184MHz
 143      =1  #else                 // INTERNAL_MCU
           =1 #define CLOCK_27M         // 27MHz
           =1 #define REG_START_ADDRESS 0xc000    // register start 0xc000, for page0, 0xc100-page1 
           =1 #endif
 147      =1  //-----------------------------------------------------------------------------
 148      =1  //    TW88 Version
 149      =1  //-----------------------------------------------------------------------------
 150      =1  #define TW8816   ///AWT TW8806 change to TW8816 platform //ryan@20170921
 151      =1  //-----------------------------------------------------------------------------
 152      =1  //-----------------------------------------------------------------------------
 153      =1  //    Options for Backlight control
 154      =1  //-----------------------------------------------------------------------------
 155      =1  //#define BACKLIGHT_CCFL
 156      =1  //#define BACKLIGHT_LED
 157      =1  #define BACKLIGHT_PWM
 158      =1  
 159      =1  //-----------------------------------------------------------------------------
 160      =1  //    Panel Resolution
 161      =1  //-----------------------------------------------------------------------------
 162      =1  // ---- Select Default Panel
 163      =1  //
 164      =1  //#define UXGA            // 1600 x 1200
 165      =1  //#define SXGA              // 1280 x 1024
 166      =1  //#define XGA  // 1024 x 768
 167      =1  #ifdef XGA
           =1   #define LVDS          
           =1   #define PWIDTH  1024
           =1   #define PHEIGHT 768
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 4   

           =1 #endif
 172      =1  //#define SVGA            //  800 x 600
 173      =1  //#define VGA             //  640 x 480
 174      =1  #ifdef VGA
           =1   #define PWIDTH  640
           =1   #define PHEIGHT 480
           =1   //#define HITACHI_640_B_160   //--> 640 x 160
           =1   #define AND_640_480
           =1 #endif
 180      =1  //#define WXGA            // 1280 x 768 (15:9) // 1366 x 768 (16:9)
 181      =1  #ifdef WXGA
           =1     //#define WX_SHARP_LQ106K1LA
           =1   #define PWIDTH  1280
           =1   #define PHEIGHT 768
           =1 #endif
 186      =1  //#define WSVGA           // 1024 x 600 *** only video mode
 187      =1  #ifdef WSVGA
           =1   #define PWIDTH  1024
           =1   #define PHEIGHT 600
           =1   #define UNIDEN_1024_600
           =1 #endif
 192      =1  #define WVGA            //  800 x 480
 193      =1  #ifdef WVGA
 194      =1    #define PWIDTH  800
 195      =1    #define PHEIGHT 480//600
 196      =1    // If WVGA, you have to select panel.
 197      =1    //#define AU_10INCH
 198      =1    //#define WVGA_TPO
 199      =1    //#define SAMSUNG_10INCH
 200      =1    //#define SAMSUNG_TICONLESS_10INCH
 201      =1    //#define SHARP_TICONLESS_7INCH
 202      =1    //#define AU_TICONLESS_7INCH
 203      =1    //#define AU_G084SN05V8_8_4INCH 
 204      =1    #define HSD070IDW1_7INCH
 205      =1    //#define INNOLUX_AT080TN03
 206      =1    //#define AU_TICONLESS_7INCH_CCFL
 207      =1    //#define CMO     // CHIMEI panel
 208      =1    //#define AU_TICONLESS_10INCH
 209      =1    //#define HITACHI_T01
 210      =1    //#define HITACHI_TX23D12
 211      =1    //#define HITACHI_TX18D24
 212      =1    //#define HITACHI_TX18D16
 213      =1    //#define TMD_LTA070A320F
 214      =1    //#define TMD_LTA080B
 215      =1  #endif  //WVGA
 216      =1  //#define HVGA            //  480 x 320
 217      =1  //#define QVGA            //  320 x 240 *** only video mode
 218      =1  #ifdef QVGA
           =1   #define PWIDTH  320
           =1   #define PHEIGHT 240
           =1   //#define HITACHI_TX09D73
           =1   //#define AU_DELTARGB
           =1   //#define SHARP_LQ050Q5DR01
           =1   //#define SHARP_LQ035
           =1   //#define TMD
           =1 #endif
 227      =1  
 228      =1  //#define WQVGA           //  480 x 234 *** only video mode
 229      =1  #ifdef WQVGA
           =1   #define PWIDTH  480
           =1   #define PHEIGHT 240
           =1   // If WQVGA, you have to select panel 
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 5   

           =1     #define ANALOG_7INCH
           =1   //#define PWIDTH  400
           =1   //#define PHEIGHT 240
           =1   //#define SHARP_LQ043T3DX02   //  400 x 237
           =1   //#define LG_ANALOG
           =1   //#define TMD_ANALOG        //TMD_LTA05B352A
           =1   //#define T_51945GD       // Optorex Panel
           =1 #endif  // WQVGA
 241      =1  
 242      =1  //if LVDS pannel disable TICONLESS
 243      =1  
 244      =1  //-----------------------------------------------------------------------------
 245      =1  //---- Add Support One more panel with DIPSW#1
 246      =1  //---- Ex. Add Analog AU 7" Panel with Default Panel for evalution
 247      =1  //#define ADD_ANALOGPANEL   // Added Analog panel(AU7") from default set panel(expect WQVGA) with DIP #1 sw
             -itch.(DIP#1=L:ANALOG, H:DEFAULT)
 248      =1                // It can't support WQVGA and ADD_ANALOGPANEL same time!!
 249      =1    //#define ADD_ANALOG_7INCH
 250      =1    //#define ADD_TMD_LTA05B352A
 251      =1                    
 252      =1  //---- Support Wide panel function
 253      =1  #if (defined WXGA) || (defined WSVGA) || (defined WVGA) || (defined WQVGA)
 254      =1  #if 0///ryan@20180115//mask for NTSC sharpness issue
           =1 #define WIDE_SCREEN         // Can support 4 display mode, i.e. Normal, Wide, Full, Zoom
           =1 #endif
 257      =1  #endif                // Tested panasonic WVGA panel.
 258      =1  
 259      =1  //-----------------------------------------------------------------------------
 260      =1  //    Panel Vendor Specific
 261      =1  //-----------------------------------------------------------------------------
 262      =1  
 263      =1  //-----------------------------------------------------------------------------
 264      =1  //    TV Tuner
 265      =1  //-----------------------------------------------------------------------------
 266      =1  #define PHILIPS       0
 267      =1  #define ALPS        1   // ALPS, LG
 268      =1  #define TEMIC       2
 269      =1  #define TVAVA       3
 270      =1  #define LGTUNER       4
 271      =1  #define SAMSUNGMUTITUNER  5
 272      =1  
 273      =1  #define TVTunerDevice   4
 274      =1  //-----------------------------------------------------------------------------
 275      =1  //    IR Remote Controller Type
 276      =1  //-----------------------------------------------------------------------------
 277      =1  //#define REMO_RC5          // RC5 style
 278      =1  #define TECHWELL_REMOCON
 279      =1  //#define REMO_NEC          // NEC style
 280      =1  //#define PHILIPS_REMOCON // New remocon 
 281      =1  
 282      =1  //-----------------------------------------------------------------------------
 283      =1  //    I2C Device Access Address Mapping
 284      =1  //-----------------------------------------------------------------------------
 285      =1  
 286      =1  #define EEPROMI2CAddress  0xa0  // EEPROM (24C16)
 287      =1  #define TW88I2CAddress    0x8a  // TW880x
 288      =1  
 289      =1  #define MSPI2CAddress   0x80  // MSP
 290      =1  #define ALC106I2CAddress  0x4A  // MSP
 291      =1  //-----------------------------------------------------------------------------
 292      =1  //    Options for Possible Inputs
 293      =1  //-----------------------------------------------------------------------------
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 6   

 294      =1  
 295      =1  
 296      =1  //-----------------------------------------------------------------------------
 297      =1  //    Options for Possible Standards
 298      =1  //    Default:NTSC
 299      =1  //-----------------------------------------------------------------------------
 300      =1  #define SUPPORT_PAL     
 301      =1  #define SUPPORT_SECAM
 302      =1  #define SUPPORT_NTSC4   
 303      =1  #define SUPPORT_PALM  
 304      =1  #define SUPPORT_PALN    
 305      =1  #define SUPPORT_PAL60   
 306      =1  
 307      =1  //#define ID_CHECK_BY_FW        // in Video mode, check input system ID by firmware
 308      =1  
 309      =1  //-----------------------------------------------------------------------------
 310      =1  //    Options for Debugging/Release
 311      =1  //-----------------------------------------------------------------------------
 312      =1  //#define SUPPORT_PATTERN       // support LCD test pattern
 313      =1  
 314      =1  #ifndef WQVGA
 315      =1    #ifndef QVGA
 316      =1  #define SUPPORT_OSDPOSITIONMOVE
 317      =1    #endif
 318      =1  #endif
 319      =1  
 320      =1  #define SERIAL              // include serial communication routines
 321      =1  
 322      =1  //#define SUPPORT_DEBUG       // Support to use Read & Write in debug OSD Window by remocon.
 323      =1  
 324      =1  //#define DEBUG           // include debug information
 325      =1  #ifdef DEBUG
           =1   //#define DEBUG_MAIN
           =1   //#define DEBUG_TIME
           =1   //#define DEBUG_KEYREMO
           =1   //#define DEBUG_TW88
           =1   //#define DEBUG_DECODER
           =1   //#define DEBUG_I2C
           =1   //#define DEBUG_EEP
           =1   //#define DEBUG_OSD
           =1   //#define DEBUG_AUDIO
           =1   //#define DEBUG_SETPANEL
           =1   //#define DEBUG_DTV
           =1 //  #define DEBUG_PC
           =1   //#define DEBUG_PC_MEAS
           =1   //#define DEBUG_PC_COLOR
           =1   //#define DEBUG_COMPONENT
           =1   //#define DEBUG_BANK
           =1   //#define DEBUG_PAUSE
           =1   //#define DEBUG_MCU
           =1 #endif
 345      =1  
 346      =1  #define AUTOCALC_PC         // in PC mode, Enable Auto Calcuration
 347      =1  //#define SUPPORT_USERCOLORFROMTXT  // Use color setting of text file in Color mode=USER MODE which is as B
             -rightness(Reg10), Contast(Reg11),
 348      =1                    //    Sat_U(Reg13),Sat_V(Reg14),Sharpness(Reg12,Reg78)                  
 349      =1  //#define SUPPORT_GAMMA
 350      =1  
 351      =1  //#define CHIP_MANUAL_TEST      // DIPSW#1
 352      =1  
 353      =1  #ifndef INTERNAL_MCU
 354      =1  //#define NO_INITIALIZE       // After Power switch turn on with DIP SW4 Enable(Low), or pressed MENU button 
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 7   

             -for internal MCU
 355      =1                                      //     micom works to access only I2C bus by serial command.
 356      =1  #endif
 357      =1  
 358      =1  //#define SUPPORT_KRS_OSDDEMO   // For KRS Company Demo 
 359      =1  //#define SUPPORT_LINE_OSDDEMO
 360      =1  
 361      =1  //-----------------------------------------------------------------------------
 362      =1  //    Special Features
 363      =1  //-----------------------------------------------------------------------------
 364      =1  
 365      =1  #ifndef INTERNAL_MCU
 366      =1  //#define SUPPORT_DELTA_RGB
 367      =1  #endif
 368      =1  #define SUPPORT_SELECTKEY     // choose the keymap of using select key or left,right key.
 369      =1  //-----------------------------------------------------------------------------
 370      =1  
 371      =1  //#define HS_NEWOSDMENU     //Weylis -@121008 for Hor. Style OSD
 372      =1  //#define HS_NEWOSDMENU_2     //Weylis -@121008 for Hor. Style OSD(2 line)
 373      =1  
 374      =1  #endif  //__CONFIG_H__
 375      =1  
   3          
   4          #include "typedefs.h"
   1      =1  #ifndef __TYPEDEFS__
   2      =1  #define __TYPEDEFS__
   3      =1  
   4      =1  
   5      =1  #define DATA    data
   6      =1  #define PDATA   pdata
   7      =1  #define IDATA   data
   8      =1  #define CODE    code
   9      =1  #define CODE_P
  10      =1  #define PDATA_P
  11      =1  #define IDATA_P
  12      =1  #define DATA_P
  13      =1  
  14      =1  #define INTERRUPT( num, name ) name() interrupt num
  15      =1  
  16      =1  #define _between(x, a, b) (a<=x && x<=b)
  17      =1  #define _swap(a, b)     { a^=b; b^=a; a^=b; }
  18      =1  
  19      =1  typedef unsigned char Register;
  20      =1  typedef unsigned char BYTE;
  21      =1  typedef unsigned short  WORD;
  22      =1  typedef unsigned long DWORD;
  23      =1  
  24      =1  #define TRUE  1
  25      =1  #define FALSE 0
  26      =1  
  27      =1  //VInputStdDetectMode
  28      =1  #define AUTO  0
  29      =1  
  30      =1  //VInputStd
  31      =1  #define NTSC  1     
  32      =1  #define PAL   2
  33      =1  #define SECAM 3
  34      =1  #define NTSC4 4
  35      =1  #define PALM  5
  36      =1  #define PALN  6
  37      =1  #define PAL60 7
  38      =1  
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 8   

  39      =1  #define MAXINPUTSTD PAL60+1 // 
  40      =1  
  41      =1  #define UNKNOWN 0xfe
  42      =1  #define NOINPUT 0 //0xff
  43      =1  
  44      =1  #define NIL     0xff
  45      =1  
  46      =1  enum SourceModeTypeEnum
  47      =1  { 
  48      =1    AVMode,      // 0   0X00
  49      =1    //VGAMode,       // 1
  50      =1  #ifdef USE_CAMD 
           =1   CAM_D,         // 2
           =1 #endif
  53      =1    CAM_A,         // 3   0x01
  54      =1    CAM_B,         // 4   0x02
  55      =1    CAM_C,         // 5   0x03
  56      =1    CAM_R,         // 6   0x04
  57      =1    CAM_AB,        // 7   0x05
  58      =1    CAM_CR,        // 8   0x06
  59      =1    CAM_AR,        // 9   0x07
  60      =1    CAM_RB,        // 10    0x08
  61      =1    CAM_AC,        // 11    0x09
  62      =1    CAM_CB,        // 12    0x0a
  63      =1    CAM_RAB_T,     // 13    0x0b
  64      =1    CAM_RAB_H,     // 14    0x0c
  65      =1  
  66      =1    #ifdef HTRV
           =1   CAM_RC,
           =1   #endif
  69      =1    
  70      =1    CAM_QUAD,      // 15    0x0d
  71      =1    CAM_ABR_T3,    // 16    0x0e
  72      =1    CAM_ABR_T4,    // 17    0x0f
  73      =1    CAM_RAC_T,      //  0x10
  74      =1    CAM_RBC_T,      //  0x11
  75      =1    CAM_RAC_T2,     //  0x12
  76      =1    CAM_RBC_T2,     //  0x13
  77      =1    CAM_BA,       //  0x14
  78      =1    CAM_BC,       //  0x15
  79      =1    CAM_BR,       //  0x16
  80      =1    CAM_CA,       //  0x17
  81      =1    CAM_ABC,      //  0x18
  82      =1    CAM_ABR,      //  0x19
  83      =1    CAM_ACR,      //  0x1a
  84      =1    CAM_BAC,      //  0x1b
  85      =1    CAM_BAR,      //  0x1c
  86      =1    CAM_BCR,      //  0x1d
  87      =1    CAM_CAB,      //  0x1e
  88      =1    CAM_CAR,      //  0x1f
  89      =1    CAM_CBR,      //  0x20
  90      =1    SEQ,           // 18      0x10
  91      =1    CAM_NUM
  92      =1  };
  93      =1  
  94      =1  typedef unsigned char SourceModeType;
  95      =1  
  96      =1  #endif  /* __TYPEDEFS__ */
  97      =1  
   5          #include "main.h"
   1      =1  #ifndef __MAIN__
   2      =1  #define __MAIN__
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 9   

   3      =1  
   4      =1  #define ON          1
   5      =1  #define OFF         0
   6      =1  #if 1//ryan@20171214
   7      =1  #define Hs_debug
   8      =1  #define Monitor_debug  
   9      =1  //#define Trigger_debug 
  10      =1  #endif
  11      =1  
  12      =1  
  13      =1  //#define DVR
  14      =1  #define Format_SDCard
  15      =1  #define BJTSwitch
  16      =1  
  17      =1  #define Panel_Enable()    P4=P4|0x08 //andy 980908
  18      =1  #define Panel_Disable()   P4=P4&0xf7
  19      =1  
  20      =1  #if 0
           =1 #define SetBacklight()      P4=P4|0x04
           =1 #define clrBacklight()      P4=P4&0xfb
           =1 #else
  24      =1  #define SetBacklight()    P4=P4&0xfb
  25      =1  #define clrBacklight()    P4=P4|0x04
  26      =1  #endif
  27      =1  
  28      =1  //InputSelection
  29      =1  struct struct_IdName {
  30      =1    BYTE  Id;
  31      =1    BYTE  Name[16];
  32      =1  };
  33      =1  
  34      =1  #define CH_TW2835       1
  35      =1  #define CH_CAMD       2
  36      =1  #define CH_AV         3
  37      =1  #define PC          7
  38      =1  #define ChineseDefaultMenu  8
  39      =1  
  40      =1  #define SVIDEO        2
  41      =1  #define COMPONENT     3
  42      =1  //#define ANALOGDTV     4
  43      =1  #define DTV         4
  44      =1  #define TV          5
  45      =1  #define SCART       6
  46      =1  
  47      =1  #ifdef HS
  48      =1  #define CH_CAMB         4
  49      =1  #endif
  50      =1  
  51      =1  #define DIGITALVGA      8
  52      =1  
  53      =1  #define AIRTV       0 //9
  54      =1  #define CABLETV       1 //0xa
  55      =1  
  56      =1  #define TVTUNER       0xd   //10
  57      =1  #define MUTE        1 
  58      =1  #define MENU        2 
  59      =1  #define TVVOL       4 
  60      =1  #ifdef AWT_ML072S
  61      =1  #define VLOSSINFO     8 
  62      =1  #else
           =1 #define CC          8 
           =1 #endif
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 10  

  65      =1  #define INPUTINFO     0x10
  66      =1  #define PCINFO        0x20
  67      =1  #define GAUGEINFO       0x40
  68      =1  //#define RATINGINFO      0x40
  69      =1  #define TVCHN       0x80
  70      =1  //#define MUTE        0x40
  71      =1  
  72      =1  #define YPBPR_480i      0
  73      =1  #define YPBPR_576i      1
  74      =1  #define YPBPR_480p      2
  75      =1  #define YPBPR_576p      3
  76      =1  #define YPBPR_1080i     4
  77      =1  #define YPBPR_720p      5
  78      =1  #define YPBPR_720p50    6
  79      =1  
  80      =1  //---------------------- Feature Define ----------------------------
  81      =1  #ifdef AWT_ML072Q
           =1 
           =1 //mask by ryan@20171018   #define AWT_ML720Q_NEW_TRIGGER_FUN    //Pinchi 20141031 add for AWT request each t
             -rigger can work by PRIORITY OFF
           =1 #define AWT_ADD_TRIGGER_DELAY_FUN 
           =1 #define AWT_SUPPORT_4_3_SCREEN    //ryan@20170907 
           =1 #endif
  87      =1  
  88      =1  #ifdef AWT_ML072S
  89      =1  #define AWT_ADD_TRIGGER_DELAY_FUN 
  90      =1  #endif
  91      =1  
  92      =1  //--------------------------- P0 Define -----------------------------
  93      =1  //#define SEL_MIX     P0_6  // 
  94      =1  //--------------------------- P1 Define -----------------------------
  95      =1  //#define SEL_DVI     P3_5  //LJY062001   
  96      =1  
  97      =1  #define TW88HWReset     P3_4  //LJY001010 //LJY000721
  98      =1  #define PowerUp       P3_7
  99      =1  //======================= CDS Control ================================= 
 100      =1  //#define CDS_CTRL           P1_5
 101      =1  extern BYTE SelectModeType;
 102      =1  extern BYTE InputSelection;
 103      =1  extern BYTE SEQTime;
 104      =1  extern BYTE Priority;
 105      =1  extern BYTE PowerFlag;
 106      =1  //extern bit AutoDayNight;
 107      =1  extern bit SDCardCoverDetect;
 108      =1  
 109      =1  BYTE keyIn(void);
 110      =1  void TimerForRemocon(void);
 111      =1  void TimerForTick(void);
 112      =1  void DisableRemoconInt(void);
 113      =1  BYTE SetSupport_remocon(BYTE newd);
 114      =1  
 115      =1  void delay(BYTE cnt);
 116      =1  
 117      =1  BYTE RS_ready(void);
 118      =1  #ifdef Monitor_debug
 119      =1  BYTE RS_rx(void);
 120      =1  #endif
 121      =1  void RS_tx(BYTE tx_buf);
 122      =1  
 123      =1  BYTE RS2_rx(void);
 124      =1  void RS2_tx(BYTE tx_buf);
 125      =1  
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 11  

 126      =1  void NewLine(void);
 127      =1  void PutsP(PDATA_P BYTE *ptr);
 128      =1  #ifdef Hs_debug
 129      =1  //void MonWriteI2C(BYTE addr, BYTE index, BYTE val);
 130      =1  //BYTE MonReadI2C(BYTE addr, BYTE index);
 131      =1  #endif
 132      =1  BYTE Asc1Bin(BYTE asc);
 133      =1  BYTE Asc2Bin(PDATA_P BYTE *s);
 134      =1  
 135      =1  void I2CDeviceInitialize( CODE_P BYTE *RegSet);
 136      =1  
 137      =1  //void RestartSystemClock(WORD clock_hm);
 138      =1  WORD GetTime_ms(void);
 139      =1  #if 0
           =1 BYTE GetTime_H(void);
           =1 BYTE GetTime_M(void);
           =1 #endif
 143      =1  void ChangeTime_H( char add );
 144      =1  void ChangeTime_M( char add );
 145      =1  //WORD GetWakeupTime(void);
 146      =1  //void SetWakeupTime(WORD wtime);
 147      =1  
 148      =1  
 149      =1  //WORD GetOffTime(void);
 150      =1  //void SetOffTime(WORD wtime);
 151      =1  //BYTE GetSleepTimer(void);
 152      =1  //void SetSleepTimer(BYTE stime);
 153      =1  WORD DiffTime_ms( WORD stime, WORD etime );
 154      =1  //void SetLastBlockedTime(void);
 155      =1  void SetLastCCTime(void);       //ljy010904...CC_FIX_CLEAR_ON_TIME
 156      =1  
 157      =1  void SetOSDLastKeyInTime(void);
 158      =1  WORD GetOSDLastKeyInTime(void);
 159      =1  WORD GetIVF(void);
 160      =1  DWORD GetIHF(void);
 161      =1  BYTE ReadVInputSTD(void);
 162      =1  void SetVInputStd(BYTE newd);
 163      =1  BYTE GetVInputStd(void);
 164      =1  BYTE GetInputSelection(void);
 165      =1  #ifdef ADD_ANALOGPANEL
           =1 BYTE IsAnalogOn(void);
           =1 #endif
 168      =1  void InitVideoData(BYTE src);
 169      =1  void ChangeVInputStdDetectMode(BYTE val);
 170      =1  BYTE GetVInputStdInx(void);
 171      =1  
 172      =1  void MonWriteI2Cn_(BYTE addr, BYTE *val, BYTE cnt) ;
 173      =1  
 174      =1  void CheckNewTriggerFunc(void);
 175      =1  ///void Usage(void);
 176      =1  #ifdef Monitor_debug
 177      =1    void Prompt(void);
 178      =1  #endif
 179      =1  void DebugKeyIn(BYTE ikey);
 180      =1  void DVIPowerDown(bit flag);
 181      =1  void PowerDown_XTAL(bit flag);
 182      =1  
 183      =1  void ChangeInput(BYTE newsel);
 184      =1  
 185      =1  
 186      =1  void WaitPowerOn(void);
 187      =1  void PowerOff(void);
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 12  

 188      =1  BYTE GetNextInputSelection(void);
 189      =1  
 190      =1  BYTE WantToStopTVScan(void);
 191      =1  
 192      =1  //BYTE IsTW8801(void);
 193      =1  //BYTE IsTW8803(void);
 194      =1  //BYTE ConvertVideoVSAT(BYTE reg);
 195      =1  
 196      =1  BYTE IsNoInput(void);
 197      =1  void LoadEEPROM (void);
 198      =1  void Hs_InitVars(void);
 199      =1  void AdjustAutoDayNight(BYTE val);
 200      =1  void ACCPowerControl(void);
 201      =1  void ON_LVDS(void);
 202      =1  void OFF_LVDS(void);
 203      =1  void main_loop(void);
 204      =1  struct RegisterInfo
 205      =1  {
 206      =1     int  Min;
 207      =1     int  Max;
 208      =1     int  Default;
 209      =1  };
 210      =1  struct LongRegisterInfo
 211      =1  {
 212      =1     WORD Min;
 213      =1     WORD Max;
 214      =1     WORD Default;
 215      =1  };
 216      =1  
 217      =1  
 218      =1  typedef enum   ///add enum  by ryan@20170907
 219      =1  {
 220      =1    NORMALL_MODE,
 221      =1    REVERSE_TRIG,
 222      =1    LEFT_TRIG,
 223      =1    RIGHT_TRIG,
 224      =1  #ifdef USE_CAMD 
           =1   CAMD_TRIG,
           =1 #endif  
 227      =1    CAMC_TRIG,
 228      =1    VGA_TRIG,
 229      =1    PARK_TRIG,
 230      =1    No_TRIG,
 231      =1    TRIGGER_NUM
 232      =1  }TriggerModeType;
 233      =1  
 234      =1  
 235      =1  #endif  // __MAIN__
 236      =1  
   6          #include "i2c.h"
   1      =1  #ifndef __I2C_H__
   2      =1  #define __I2C_H__
   3      =1  
   4      =1  
   5      =1  void I2CReadByte3(BYTE *);
   6      =1  void I2CRead8Byte(BYTE *);
   7      =1  #if 0
           =1 void I2CReadByteMSP(BYTE addr, BYTE index, BYTE *pd, BYTE cnt);
           =1 #endif
  10      =1  BYTE I2CWriteByte2(BYTE);
  11      =1  BYTE I2CWriteByte3(BYTE*);
  12      =1  BYTE I2CWrite8Byte(BYTE *);
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 13  

  13      =1  
  14      =1  void I2CStart(void);
  15      =1  void I2CWriteData(BYTE value);
  16      =1  BYTE I2CReadData(void);
  17      =1  #if 0
           =1 BYTE I2CReadDataWithACK(void);
           =1 #endif
  20      =1  void I2CStop(void);
  21      =1  void I2Cdelay(void);
  22      =1  
  23      =1  
  24      =1  #define WriteTW88(a,b)    WriteI2C(TW88I2CAddress, a, b)
  25      =1  #define ReadTW88(a)     ReadI2C(TW88I2CAddress, a)
  26      =1  
  27      =1  BYTE WriteTW88_Wait (BYTE, BYTE);
  28      =1  void WriteADC   (BYTE, BYTE);
  29      =1  BYTE ReadADC    (BYTE);
  30      =1  BYTE ReadADC_TW88(BYTE index);
  31      =1  void WriteADC_TW88(BYTE index, BYTE dat);
  32      =1  
  33      =1  void WriteEEP   (WORD, BYTE);
  34      =1  BYTE ReadEEP    (WORD);
  35      =1  WORD ReadALC106(WORD index);
  36      =1  void WriteALC106(WORD index, WORD  dat);
  37      =1  WORD ReadI2CWORD(BYTE addr, BYTE index);
  38      =1  BYTE ReadI2C    (BYTE addr, BYTE index);
  39      =1  void WriteI2C   (BYTE addr, BYTE index, BYTE val);
  40      =1  
  41      =1  void WriteI2Cn_(BYTE addr, BYTE *val, BYTE cnt);
  42      =1  void WriteI2Cn (BYTE addr, BYTE index, BYTE *val, BYTE cnt);
  43      =1  void WriteI2CnD(BYTE addr, BYTE index, BYTE val, BYTE cnt);
  44      =1  
  45      =1  void ReadI2Cmn(BYTE addr, BYTE wcnt, BYTE rcnt, BYTE *rwdata);
  46      =1  
  47      =1  #define   WriteADC(a,b) WriteADC_TW88(a,b)
  48      =1  #define   ReadADC(a)    ReadADC_TW88(a)
  49      =1  
  50      =1  #endif  /* __I2C_H__ */
   7          #include "debug.h"
   1      =1  #ifndef __DEBUG__
   2      =1  #define __DEBUG__
   3      =1  
   4      =1  #define DEBUG_ERR 1
   5      =1  #define DEBUG_WARN  2
   6      =1  #define DEBUG_INFO  3
   7      =1  #define DEBUG_BREAK 4
   8      =1  
   9      =1  #ifdef DEBUG_PAUSE
           =1 #define Pause(a)  { Printf("\r\n"); Printf(a); while(!RS_ready()); RS_rx(); }
           =1 #endif
  12      =1  //#define BURSTLOCK 7
  13      =1  
  14      =1  void DebugWindowControl (void) ;
  15      =1  void Draw_Debug_Char(void);
  16      =1  void DebugWindowCursor( BYTE flag ) ;
  17      =1  void DebugWindowData( BYTE flag ) ;
  18      =1  void Debug_Write(void);
  19      =1  void Debug_Read(void);
  20      =1  
  21      =1  
  22      =1  
  23      =1  #endif  // __DEBUG__
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 14  

  24      =1  
  25      =1  #ifdef CHIP_MANUAL_TEST
           =1 BYTE DelaynCheck(void);
           =1 void ChipManualTest(void);
           =1 
           =1 #endif
   8          #include "printf.h"
   1      =1  #ifndef __PRINTF__
   2      =1  #define __PRINTF__
   3      =1  
   4      =1  #define _outchar(c) while(1) { if( !RS_Xbusy ) { SBUF = c; RS_Xbusy=1; break; } }
   5      =1  #define Putch(c) _outchar(c)
   6      =1  
   7      =1  #ifdef SERIAL
   8      =1  
   9      =1   void Printf ( const char CODE_P *fmt, ... );
  10      =1   void Puts ( CODE_P char *ptr );
  11      =1  
  12      =1  #define TW2835Cmd(a)   Puts ( a )
  13      =1  
  14      =1  #else
           =1 
           =1  #undef  DEBUG
           =1  #define Printf(a,b)  //
           =1  #define Puts(a)      //
           =1 
           =1 #endif
  21      =1  
  22      =1  
  23      =1  #ifndef DEBUG
  24      =1  
  25      =1   #define dPuts(a)   //
  26      =1   #define wPuts(a)   //
  27      =1   #define ePuts(a)   //
  28      =1  
  29      =1  #else
           =1 
           =1  void dPrintf( const char CODE_P *fmt, ... );
           =1  void wPrintf( const char CODE_P *fmt, ... );
           =1  void ePrintf( const char CODE_P *fmt, ... );
           =1 
           =1  void dPuts( CODE_P char *ptr );
           =1  void wPuts( CODE_P char *ptr );
           =1  void ePuts( CODE_P char *ptr );
           =1 
           =1 #endif  // DEBUG
  40      =1  
  41      =1  BYTE Getch(void);
  42      =1  BYTE Getche(void);
  43      =1  
  44      =1  
  45      =1  #endif  //__PRINTF__
   9          #include "TW88.h"
   1      =1  #ifndef __TW88__
   2      =1  #define __TW88__
   3      =1  
   4      =1  #include "main.h"
   1      =2  #ifndef __MAIN__
           =2 #define __MAIN__
           =2 
           =2 #define ON          1
           =2 #define OFF         0
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 15  

           =2 #if 1//ryan@20171214
           =2 #define Hs_debug
           =2 #define Monitor_debug  
           =2 //#define Trigger_debug 
           =2 #endif
           =2 
           =2 
           =2 //#define DVR
           =2 #define Format_SDCard
           =2 #define BJTSwitch
           =2 
           =2 #define Panel_Enable()    P4=P4|0x08 //andy 980908
           =2 #define Panel_Disable()   P4=P4&0xf7
           =2 
           =2 #if 0
           =2 #define SetBacklight()      P4=P4|0x04
           =2 #define clrBacklight()      P4=P4&0xfb
           =2 #else
           =2 #define SetBacklight()    P4=P4&0xfb
           =2 #define clrBacklight()    P4=P4|0x04
           =2 #endif
           =2 
           =2 //InputSelection
           =2 struct struct_IdName {
           =2   BYTE  Id;
           =2   BYTE  Name[16];
           =2 };
           =2 
           =2 #define CH_TW2835       1
           =2 #define CH_CAMD       2
           =2 #define CH_AV         3
           =2 #define PC          7
           =2 #define ChineseDefaultMenu  8
           =2 
           =2 #define SVIDEO        2
           =2 #define COMPONENT     3
           =2 //#define ANALOGDTV     4
           =2 #define DTV         4
           =2 #define TV          5
           =2 #define SCART       6
           =2 
           =2 #ifdef HS
           =2 #define CH_CAMB         4
           =2 #endif
           =2 
           =2 #define DIGITALVGA      8
           =2 
           =2 #define AIRTV       0 //9
           =2 #define CABLETV       1 //0xa
           =2 
           =2 #define TVTUNER       0xd   //10
           =2 #define MUTE        1 
           =2 #define MENU        2 
           =2 #define TVVOL       4 
           =2 #ifdef AWT_ML072S
           =2 #define VLOSSINFO     8 
           =2 #else
           =2 #define CC          8 
           =2 #endif
           =2 #define INPUTINFO     0x10
           =2 #define PCINFO        0x20
           =2 #define GAUGEINFO       0x40
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 16  

           =2 //#define RATINGINFO      0x40
           =2 #define TVCHN       0x80
           =2 //#define MUTE        0x40
           =2 
           =2 #define YPBPR_480i      0
           =2 #define YPBPR_576i      1
           =2 #define YPBPR_480p      2
           =2 #define YPBPR_576p      3
           =2 #define YPBPR_1080i     4
           =2 #define YPBPR_720p      5
           =2 #define YPBPR_720p50    6
           =2 
           =2 //---------------------- Feature Define ----------------------------
           =2 #ifdef AWT_ML072Q
           =2 
           =2 //mask by ryan@20171018   #define AWT_ML720Q_NEW_TRIGGER_FUN    //Pinchi 20141031 add for AWT request each t
             -rigger can work by PRIORITY OFF
           =2 #define AWT_ADD_TRIGGER_DELAY_FUN 
           =2 #define AWT_SUPPORT_4_3_SCREEN    //ryan@20170907 
           =2 #endif
           =2 
           =2 #ifdef AWT_ML072S
           =2 #define AWT_ADD_TRIGGER_DELAY_FUN 
           =2 #endif
           =2 
           =2 //--------------------------- P0 Define -----------------------------
           =2 //#define SEL_MIX     P0_6  // 
           =2 //--------------------------- P1 Define -----------------------------
           =2 //#define SEL_DVI     P3_5  //LJY062001   
           =2 
           =2 #define TW88HWReset     P3_4  //LJY001010 //LJY000721
           =2 #define PowerUp       P3_7
           =2 //======================= CDS Control ================================= 
           =2 //#define CDS_CTRL           P1_5
           =2 extern BYTE SelectModeType;
           =2 extern BYTE InputSelection;
           =2 extern BYTE SEQTime;
           =2 extern BYTE Priority;
           =2 extern BYTE PowerFlag;
           =2 //extern bit AutoDayNight;
           =2 extern bit SDCardCoverDetect;
           =2 
           =2 BYTE keyIn(void);
           =2 void TimerForRemocon(void);
           =2 void TimerForTick(void);
           =2 void DisableRemoconInt(void);
           =2 BYTE SetSupport_remocon(BYTE newd);
           =2 
           =2 void delay(BYTE cnt);
           =2 
           =2 BYTE RS_ready(void);
           =2 #ifdef Monitor_debug
           =2 BYTE RS_rx(void);
           =2 #endif
           =2 void RS_tx(BYTE tx_buf);
           =2 
           =2 BYTE RS2_rx(void);
           =2 void RS2_tx(BYTE tx_buf);
           =2 
           =2 void NewLine(void);
           =2 void PutsP(PDATA_P BYTE *ptr);
           =2 #ifdef Hs_debug
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 17  

           =2 //void MonWriteI2C(BYTE addr, BYTE index, BYTE val);
           =2 //BYTE MonReadI2C(BYTE addr, BYTE index);
           =2 #endif
           =2 BYTE Asc1Bin(BYTE asc);
           =2 BYTE Asc2Bin(PDATA_P BYTE *s);
           =2 
           =2 void I2CDeviceInitialize( CODE_P BYTE *RegSet);
           =2 
           =2 //void RestartSystemClock(WORD clock_hm);
           =2 WORD GetTime_ms(void);
           =2 #if 0
           =2 BYTE GetTime_H(void);
           =2 BYTE GetTime_M(void);
           =2 #endif
           =2 void ChangeTime_H( char add );
           =2 void ChangeTime_M( char add );
           =2 //WORD GetWakeupTime(void);
           =2 //void SetWakeupTime(WORD wtime);
           =2 
           =2 
           =2 //WORD GetOffTime(void);
           =2 //void SetOffTime(WORD wtime);
           =2 //BYTE GetSleepTimer(void);
           =2 //void SetSleepTimer(BYTE stime);
           =2 WORD DiffTime_ms( WORD stime, WORD etime );
           =2 //void SetLastBlockedTime(void);
           =2 void SetLastCCTime(void);       //ljy010904...CC_FIX_CLEAR_ON_TIME
           =2 
           =2 void SetOSDLastKeyInTime(void);
           =2 WORD GetOSDLastKeyInTime(void);
           =2 WORD GetIVF(void);
           =2 DWORD GetIHF(void);
           =2 BYTE ReadVInputSTD(void);
           =2 void SetVInputStd(BYTE newd);
           =2 BYTE GetVInputStd(void);
           =2 BYTE GetInputSelection(void);
           =2 #ifdef ADD_ANALOGPANEL
           =2 BYTE IsAnalogOn(void);
           =2 #endif
           =2 void InitVideoData(BYTE src);
           =2 void ChangeVInputStdDetectMode(BYTE val);
           =2 BYTE GetVInputStdInx(void);
           =2 
           =2 void MonWriteI2Cn_(BYTE addr, BYTE *val, BYTE cnt) ;
           =2 
           =2 void CheckNewTriggerFunc(void);
           =2 ///void Usage(void);
           =2 #ifdef Monitor_debug
           =2   void Prompt(void);
           =2 #endif
           =2 void DebugKeyIn(BYTE ikey);
           =2 void DVIPowerDown(bit flag);
           =2 void PowerDown_XTAL(bit flag);
           =2 
           =2 void ChangeInput(BYTE newsel);
           =2 
           =2 
           =2 void WaitPowerOn(void);
           =2 void PowerOff(void);
           =2 BYTE GetNextInputSelection(void);
           =2 
           =2 BYTE WantToStopTVScan(void);
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 18  

           =2 
           =2 //BYTE IsTW8801(void);
           =2 //BYTE IsTW8803(void);
           =2 //BYTE ConvertVideoVSAT(BYTE reg);
           =2 
           =2 BYTE IsNoInput(void);
           =2 void LoadEEPROM (void);
           =2 void Hs_InitVars(void);
           =2 void AdjustAutoDayNight(BYTE val);
           =2 void ACCPowerControl(void);
           =2 void ON_LVDS(void);
           =2 void OFF_LVDS(void);
           =2 void main_loop(void);
           =2 struct RegisterInfo
           =2 {
           =2    int  Min;
           =2    int  Max;
           =2    int  Default;
           =2 };
           =2 struct LongRegisterInfo
           =2 {
           =2    WORD Min;
           =2    WORD Max;
           =2    WORD Default;
           =2 };
           =2 
           =2 
           =2 typedef enum   ///add enum  by ryan@20170907
           =2 {
           =2   NORMALL_MODE,
           =2   REVERSE_TRIG,
           =2   LEFT_TRIG,
           =2   RIGHT_TRIG,
           =2 #ifdef USE_CAMD 
           =2   CAMD_TRIG,
           =2 #endif  
           =2   CAMC_TRIG,
           =2   VGA_TRIG,
           =2   PARK_TRIG,
           =2   No_TRIG,
           =2   TRIGGER_NUM
           =2 }TriggerModeType;
           =2 
           =2 
           =2 #endif  // __MAIN__
 236      =2  
   5      =1  
   6      =1  //Value for register 0x44
   7      =1  //#define DECODER_YCbCr   0x08    //xxxx bbxx
   8      =1  //#define RGB_RGB       0x0C
   9      =1  
  10      =1  #define TW88_FPLL0      0xf9
  11      =1  #define TW88_FPLL1      0xfa
  12      =1  #define TW88_FPLL2      0xfb
  13      =1  #define TW88_FSS      0xfc
  14      =1  #define TW88_FSS_PD     0xfd
  15      =1  #define TW88_PLL_DIV    0xfe
  16      =1  
  17      =1  //#define TW88_XSCALE     0x5d
  18      =1  //#define TW88_YSCALE     0x5e
  19      =1  
  20      =1  #define TW88_XUSCALELO    0x60
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 19  

  21      =1  #define TW88_XDSCALELO    0x61
  22      =1  #define TW88_YUSCALELO    0x62
  23      =1  #define TW88_XYSCALEHI    0x63
  24      =1  #define TW88_XUSCALEFINE  0x69
  25      =1  #define TW88_YUSCALEFINE  0x6a
  26      =1  
  27      =1  //Power Mgt
  28      =1  #define POWER_OFF     0
  29      =1  #define POWER_STANDBY   1
  30      =1  #define POWER_SUSPEND   2
  31      =1  #define POWER_ON      3
  32      =1  
  33      =1  //void TWChipsDetect(void);
  34      =1  void SetAutoDetectStd(void);
  35      =1  void ClearAutoDetectStd(BYTE);
  36      =1  void I2CDeviceInitialize( CODE_P BYTE *RegSet);
  37      =1  
  38      =1  
  39      =1  //0x63.. Register Group
  40      =1  #define GROUP_YCbCr     0x40
  41      =1  #define GROUP_RGB     0
  42      =1  #define SelectPanelAttrRegGroup(A)        WriteTW88(0x70, (ReadTW88(0x70) & 0xbf) | A)
  43      =1  
  44      =1  //#if defined TW8801 || defined TW8803
  45      =1  #define FB_MAIN   2
  46      =1  #define FB_NORMAL 1
  47      =1  #define FB_RGB    0
  48      =1  //void SetFBmode( BYTE mode );
  49      =1  //#endif // TW8801
  50      =1  
  51      =1  
  52      =1  //=============================================================================
  53      =1  //                               LCD Functions   
  54      =1  //=============================================================================
  55      =1  //BYTE GetLCDPowerState(void);
  56      =1  void SetLCDPowerState(BYTE dat);
  57      =1  
  58      =1  BYTE IsFreeRun(void);
  59      =1  #if defined( SUPPORT_PC ) || defined( SUPPORT_DTV )
           =1 void PanelFreeRun(BYTE on);
           =1 void PanelBlack(BYTE on);
           =1 #endif
  63      =1  #if 0
           =1 void PanelMute(BYTE on);
           =1 #endif
  66      =1  void LCDPowerON(BYTE mute); 
  67      =1  
  68      =1  #ifdef AWT_ML072S
  69      =1  void LCDPowerOFF(void);
  70      =1  #endif
  71      =1  
  72      =1  #ifdef Hs_debug
  73      =1  void LCDPower(void);
  74      =1  #endif
  75      =1  void DPMSmodeOFF(void);
  76      =1  void DPMSmodeON(void);
  77      =1  //=============================================================================
  78      =1  //                          Get PC Parameter Functions   
  79      =1  //=============================================================================
  80      =1  void GetInitPanelAttribute1(void);
  81      =1  //void GetInitPanelAttribute2(void);
  82      =1  void DefaultPanelAttributeForVideo(void);
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 20  

  83      =1  void SetPVR(WORD pvr);
  84      =1  void SetPHR(WORD phr);
  85      =1  WORD GetPVR(void);
  86      =1  WORD GetPHR(void);
  87      =1  WORD GetHPN(void);
  88      =1  WORD GetVPN(void);
  89      =1  
  90      =1  //WORD GetVactive(void);
  91      =1  
  92      =1  WORD GetHstart(void);
  93      =1  WORD GetHend(void);
  94      =1  WORD GetVstart(void);
  95      =1  WORD GetVend(void);
  96      =1  void TuneLineBuffer(BYTE field);
  97      =1  void TuneLineBuffer4Video(BYTE field);
  98      =1  
  99      =1  #if defined (SUPPORT_DTV)
           =1 void SetCoarstForDTV(BYTE en);
           =1 #endif
 102      =1  
 103      =1  WORD GetHactiveStart(void);
 104      =1  WORD GetHactiveEnd(void);
 105      =1  WORD GetVactiveStart(void);
 106      =1  //WORD GetVactiveLen(void);
 107      =1  BYTE GetVBackPorch(void);
 108      =1  void SetVBackPorch(BYTE val);
 109      =1  WORD GetPHP(void);
 110      =1  void SetPHP(WORD php);
 111      =1  void SetPVP(WORD period);
 112      =1  WORD GetPVP(void);
 113      =1  //void SetPanelRelatedRegisters(void);
 114      =1  //BYTE ChangedHPN(void);
 115      =1  //WORD GetVSUD(void);
 116      =1  
 117      =1  void SetDefaultPLL(void);
 118      =1  //void SetDefaultFPHSperiod(void);
 119      =1  //BYTE CalcPHP(DWORD ppf, BYTE tol);
 120      =1  //void ChangeFPHSperiod4DecoderInput(WORD vsud, BYTE tol);
 121      =1  
 122      =1  //-------------------------------------------------------------------
 123      =1  //                  Set Active Region Functions
 124      =1  //-------------------------------------------------------------------
 125      =1  void SetHactiveStart(WORD hstart);
 126      =1  void SetHactiveEnd(WORD hend);
 127      =1  void SetVactiveStart(WORD vstart);
 128      =1  //void SetVactiveLen(WORD van, WORD vstart);
 129      =1  void SetVactiveLen(WORD van);
 130      =1  //=============================================================================
 131      =1  //                     Set Measurement Window Functions   
 132      =1  //=============================================================================
 133      =1  void SetMeasureWindowH(WORD start, WORD stop);
 134      =1  void SetMeasureWindowV(WORD start, WORD stop);
 135      =1  //=============================================================================
 136      =1  //                          Video Input Functions   
 137      =1  //=============================================================================
 138      =1  BYTE IsVideoInput(void);
 139      =1  BYTE DetectDecoderInput(void);
 140      =1  //=============================================================================
 141      =1  //
 142      =1  //=============================================================================
 143      =1  #if defined( SUPPORT_PC ) || defined( SUPPORT_DTV )
           =1 void AutoPHPCalEnable(void);
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 21  

           =1 void AutoPHPCalDisable(void);
           =1 #endif
 147      =1  void MakeStartInt(void);
 148      =1  void AVGAInput(void);
 149      =1  void DVIInput(void);
 150      =1  //void DVGAInput(void);
 151      =1  void DisableDVGA(void);
 152      =1  
 153      =1  void COMPOSITE1Input(void);
 154      =1  void COMPOSITE2Input(void);
 155      =1  void COMPOSITE3Input(void);
 156      =1  void COMPOSITE4Input(void);
 157      =1  
 158      =1  void SVIDEOInput(void);
 159      =1  void COMPONENTInput(void);
 160      =1  void ANALOGDTVInput(void);
 161      =1  void DTVInput(void);
 162      =1  void TVInput(void);
 163      =1  void SCARTInput(void);
 164      =1  
 165      =1  //=============================================================================
 166      =1  //                          Measurement Functions
 167      =1  //=============================================================================
 168      =1  ///void SetPanelBitOrder(BYTE swap);
 169      =1  //void SetPanelSingleDouble(BYTE single);
 170      =1  
 171      =1  BYTE MeasureAndWait(BYTE flag);
 172      =1  
 173      =1  //WORD GetHCounter1(BYTE field);
 174      =1  //void SetHInitial(BYTE field, WORD counter);
 175      =1  //=============================================================================
 176      =1  //                          Invert Polarity Functions
 177      =1  //=============================================================================
 178      =1  void InvertHSYNCPolarity(void);
 179      =1  void InvertVSYNCPolarity(void);
 180      =1  //=============================================================================
 181      =1  //            Interrupt / SW Reset Control Functions
 182      =1  //=============================================================================
 183      =1  void SetInt(void);
 184      =1  //void ClearInt(void);
 185      =1  void SetEnDet(void);
 186      =1  void ClearEnDet(void);
 187      =1  void SWReset(void);
 188      =1  //void ClearSYNCLossStatus(void);
 189      =1  //void ClearSYNCChangeStatus(void);
 190      =1  //=============================================================================
 191      =1  //
 192      =1  //=============================================================================
 193      =1  BYTE IsBypassmode(void);
 194      =1  //BYTE IsInteraced(void);
 195      =1  void Clear_bypass(void);
 196      =1  void MaskOnSYNCInt(void);
 197      =1  void MaskOffSYNCInt(void);
 198      =1  //=============================================================================
 199      =1  //                                ZoomControl
 200      =1  //=============================================================================
 201      =1  void BypassZoom(void);
 202      =1  
 203      =1  void XscaleU(DWORD scale);
 204      =1  void XscaleD(DWORD scale);
 205      =1  void XScale2(DWORD scale);
 206      =1  void YScale2(DWORD scale);
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 22  

 207      =1  WORD GetYScale(void);
 208      =1  //=============================================================================
 209      =1  //
 210      =1  //=============================================================================
 211      =1  WORD GetHSYNCPulse(void);
 212      =1  WORD GetVSYNCPulse(void);
 213      =1  //#if defined TW8801 || defined TW8803
 214      =1  WORD GetRelativePosition(void);
 215      =1  //#endif
 216      =1  //=============================================================================
 217      =1  //                MISC2 for decoder
 218      =1  //=============================================================================
 219      =1  #define BLUE_DECODER    2
 220      =1  #define BLACK_DECODER   0
 221      =1  
 222      =1  BYTE ForceDecoderOutput(BYTE color);
 223      =1  BYTE ClearForcedDecoderOutput(void);
 224      =1  //=============================================================================
 225      =1  //                CC and EDS
 226      =1  //=============================================================================
 227      =1  BYTE GetCCStatus(void);
 228      =1  void DisableCC(void);
 229      =1  void EnableCC(void);
 230      =1  BYTE GetCCData(void);
 231      =1  BYTE IsCCEnabled(void);
 232      =1  void EnableEDS(void);
 233      =1  void DisableEDS(void);
 234      =1  void RecoverCCOverflow(void);
 235      =1  
 236      =1  #define CCFIFOHalfFull()      (ReadDecoder(CSTATUS) & 0x04)
 237      =1  //=============================================================================
 238      =1  //                Internal PLL
 239      =1  //=============================================================================
 240      =1  BYTE GetPOST(void);
 241      =1  void SetPLLS(BYTE plls);
 242      =1  BYTE GetREFDM(void);
 243      =1  void SetREFDM(BYTE refdm);
 244      =1  DWORD GetFBDN(void);
 245      =1  void SetFBDN(WORD fbdn, BYTE vcsel);
 246      =1  DWORD GetPPF(void);
 247      =1  void ChangeInternPLL(DWORD _PPF);
 248      =1  
 249      =1  //=============================================================================
 250      =1  //                Macros for attribute
 251      =1  //=============================================================================
 252      =1  //#define GetOSDTransReg()            ReadTW88(0xAE)
 253      =1  //#define SetOSDTransReg(AlphaV)          WriteTW88(0xAE, (BYTE)AlphaV )
 254      =1  
 255      =1  #define GetPanelContrastReg(gccolor)      ReadTW88(0x71+gccolor)
 256      =1  #define SetPanelContrastReg(sccolor, cval)    WriteTW88(0x71+sccolor,cval)
 257      =1  
 258      =1  #define GetPanelBrightnessReg(gbcolor)      ReadTW88(0x74+gbcolor);
 259      =1  #define SetPanelBrightnessReg(sbcolor, bval)  WriteTW88(0x74+sbcolor,bval);
 260      =1  
 261      =1  #define SetDTVBrightnessReg(bval)       WriteTW88(0x74,bval);
 262      =1  
 263      =1  #define GetPanelSaturationReg(gbcolor)      ReadTW88(0x72+gbcolor);
 264      =1  #define SetPanelSaturationReg(sbcolor, bval)  WriteTW88(0x72+sbcolor,bval);
 265      =1  
 266      =1  #define SetPanelSharpnessReg(bval)        WriteTW88(0x78,((bval&0x07)|0x38) );
 267      =1  
 268      =1  #define SetPanelHueReg(bval)          WriteTW88(0x70, (ReadTW88(0x70) & 0xc0 | (bval)) );
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 23  

 269      =1  
 270      =1  #define GetVideoContrastReg()         ReadDecoder(CONTRAST)
 271      =1  #define SetVideoContrastReg(vcval)        WriteDecoder(CONTRAST, vcval)
 272      =1  
 273      =1  #define GetVideoBrightnessReg()         ReadDecoder(BRIGHT)
 274      =1  #define SetVideoBrightnessReg(vbval)      WriteDecoder(BRIGHT, vbval )
 275      =1  
 276      =1  #define GetVideoSaturationReg(gvstype)      ReadDecoder(SAT_U+gvstype)
 277      =1  #define SetVideoSaturationReg(svstype, vsval) WriteDecoder(SAT_U+svstype, vsval)
 278      =1  
 279      =1  #define GetVideoHueReg()            ReadDecoder(HUE)
 280      =1  #define SetVideoHueReg(vhval)         WriteDecoder(HUE, vhval )
 281      =1  
 282      =1  #define GetVideoSharpnessRegDef         (ReadDecoder(SHARPNESS) & 0x0f) 
 283      =1  
 284      =1  #define GetVideoSharpnessReg()          GetVideoSharpnessRegDef
 285      =1  //#define SetVideoSharpnessReg(vshval)      WriteDecoder(SHARPNESS, vshval )
 286      =1  #define SetVideoSharpnessReg(vshval)      WriteDecoder(SHARPNESS, ((ReadDecoder(SHARPNESS) & 0xf0) | (vshval 
             -& 0x0f) ) );
 287      =1  
 288      =1  #ifdef TW9908
           =1 #define SetVideoVPeakingReg(vshval)
           =1 #else
 291      =1  #define SetVideoVPeakingReg(vshval)       WriteDecoder(V_PEAKING, ((ReadDecoder(V_PEAKING) & 0xf8) | (vshval 
             -& 0x07) ) );
 292      =1  #endif
 293      =1  
 294      =1  #define SetVideoHfilterReg(val)         WriteDecoder(HFILTER, ((ReadDecoder(HFILTER) & 0xf8) | (val & 0x07) )|
             -0x08 );
 295      =1  //----------------------------------------------------------------------------------
 296      =1  //color type
 297      =1  #define RED   0
 298      =1  #define GREEN 1
 299      =1  #define BLUE  2
 300      =1  #define WHITE 3
 301      =1  //saturation type
 302      =1  #define U_SAT 0
 303      =1  #define V_SAT 1
 304      =1  
 305      =1  //Alpha Blending Level
 306      =1  #define _0    0
 307      =1  #define _25   0x12
 308      =1  #define _37_5 0x13
 309      =1  #define _50   0x14
 310      =1  #define _100  0x18
 311      =1  
 312      =1  BYTE GetKey(BYTE repeat);
 313      =1  
 314      =1  /*
 315      =1  BYTE Mapping( int fromValue, struct RegisterInfo fromRange,
 316      =1                                   int * toValue, struct RegisterInfo toRange );
 317      =1  */
 318      =1  BYTE Mapping1( int fromValue, CODE_P struct RegisterInfo *fromRange,
 319      =1                                   int * toValue, CODE_P struct RegisterInfo *toRange );
 320      =1  #ifdef KEILC
 321      =1  #define Mapping2( A, B, C, D )      Mapping1( A, B, C, D )
 322      =1  #define Mapping3( A, B, C, D )      Mapping1( A, B, C, D )
 323      =1  #else
           =1 BYTE Mapping2( int fromValue, IDATA_P struct RegisterInfo *fromRange,
           =1                                  int * toValue, CODE_P struct RegisterInfo *toRange );
           =1 BYTE Mapping3( int fromValue, CODE_P struct RegisterInfo *fromRange,
           =1                                  int * toValue, IDATA_P struct RegisterInfo *toRange );
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 24  

           =1 #endif
 329      =1  
 330      =1  BYTE GetAttributesFromNTSCSettings(BYTE index);
 331      =1  
 332      =1  #endif  // __TW88__
 333      =1  
  10          #include "etc_eep.h"
   1      =1  #ifndef __ETC_EEP__
   2      =1  #define __ETC_EEP__
   3      =1  
   4      =1  
   5      =1  ////eeprom.h
   6      =1  
   7      =1  //=========================================================================
   8      =1  //  EEPROM structure
   9      =1  //  0x00  BYTE  4 'TW88'
  10      =1  #define EEP_FWREV_MAJOR     0x04  //BYTE  1 F/W Rev.-major(Hex) 
  11      =1  #define EEP_FWREV_MINOR     0x05  //BYTE  1 F/W Rev.-minor(Hex)
  12      =1  #define EEP_DEBUGLEVEL      0x06  //BYTE  1 DebugLevel
  13      =1  //
  14      =1  #define EEP_AUTODETECT      0x07  //BYTE  1 Flag for Input Auto Detect  -0:Auto, 1:NTSC,....
  15      =1  #define EEP_AUTODETECTTYTE    0x08  //BYTE  1 Type of Auto-detect(will be value of register 0x1d)
  16      =1  //      ---------------------------------------------------------------
  17      =1  #define EEP_WIDEMODE      0x09  //BYTE  1   Wide Mode
  18      =1  
  19      =1  #define EEP_AUTORECOGNITION   0x0a  //BYTE  1 Auto Recognition
  20      =1  #define EEP_VIDEOMODE     0x0b  //BYTE  1   Video Mode
  21      =1  
  22      =1  #define EEP_OSDLANG       0x0c  //BYTE  1   OSDLang           // 0
  23      =1  
  24      =1  #define EEP_OSDPOSITIONMODE   0x0d  //BYTE  1 OSD Position Mode
  25      =1  #define EEP_CCD         0x0e  //BYTE  1 Closed Caption- 0: off, 1:on
  26      =1  
  27      =1  #define EEP_INPUTSELECTION    0x0f  //BYTE  1 InputSelection
  28      =1  
  29      =1  //
  30      =1  #define EEP_PC_CONTRAST     0x10
  31      =1  #define EEP_PC_BRIGHT     0x11
  32      =1  
  33      =1  #define EEP_CONTRAST      0x12  //BYTE  1 Contrast 
  34      =1  #define EEP_BRIGHTNESS      0x13  //BYTE  1 Brightness
  35      =1  #define EEP_SATURATION_U    0x14  //BYTE  1 Saturation :U
  36      =1  #define EEP_SATURATION_V    0x15  //BYTE  1 Saturation :V
  37      =1  #define EEP_SHARPNESS     0x16  //BYTE  1 Sharpness 
  38      =1  #define EEP_HUE         0x17  //BYTE  1 Hue                    
  39      =1  
  40      =1  //====================================HS AWT 981001
  41      =1  #define  EEP_AutoMode           0xa0
  42      =1  #define  EEP_IMAGEMode          0xa1
  43      =1  #define  EEP_RearMode           0xa2
  44      =1  #define  EEP_COSDMode           0xa3
  45      =1  #define  EEP_GAUGEMode          0xa4
  46      =1  #define  EEP_CAMAMode           0xa5 
  47      =1  #define  EEP_CAMBMode           0xa6
  48      =1  #define  EEP_CAMCMode           0xa7
  49      =1  #define  EEP_CAMRMode           0xa8
  50      =1  #define  EEP_CAMOutMode         0xa9  
  51      =1  #define  EEP_TimeStep           0xaa
  52      =1  #define  EEP_Powerflag          0xab   
  53      =1  #define  EEP_ONOFFChoice        0xac 
  54      =1  
  55      =1  #define  EEP_PRIORITY           0xad
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 25  

  56      =1  #define  EEP_JUMPMode           0xae
  57      =1  #define  EEP_NowModeState       0xaf
  58      =1  #define  EEP_SelectMode         0xb0
  59      =1  #define  EEP_PriorityOffSelectMode  0xb1
  60      =1  #define  EEP_AudioRecord    0xb2
  61      =1  
  62      =1  #define  EEP_FirstNumber    0xb3
  63      =1  #define  EEP_SecondNumber   0xb4
  64      =1  #define  EEP_ThridNumber    0xb5
  65      =1  #define  EEP_FourthNumber   0xb6
  66      =1  
  67      =1  #define  EEP_CAMNUMBER     0xb7
  68      =1  #define  EEP_PELCO       0xb8
  69      =1  #define  EEP_Baud_rate     0xb9
  70      =1  #define  EEP_TriggerVGA    0xba
  71      =1  #define  EEP_DVRDisplay    0xbb
  72      =1  #define  EEP_IMAGE_A_Mode    0xbc//andy A1.4 20100113
  73      =1  #define  EEP_IMAGE_B_Mode    0xbd//andy A1.4 20100113
  74      =1  #define  EEP_IMAGE_C_Mode    0xbe//andy A1.4 20100113
  75      =1  
  76      =1  #define  EEP_SDCardDetect    0xbf//andy A1.4 20100113
  77      =1  
  78      =1  #ifdef HTRV
           =1 #define  EEP_Gauge_VStart  0x211   //WILLIAM-970318
           =1 static  BYTE GaugeVStart;
           =1 #endif
  82      =1  
  83      =1  #define  EEP_DELAYCAMA           0xC0 
  84      =1  #define  EEP_DELAYCAMB           0xC1
  85      =1  #define  EEP_DELAYCAMC           0xC2
  86      =1  #define  EEP_DELAYCAMR           0xC3
  87      =1  #ifdef USE_CAMD
           =1 #define  EEP_DELAYCAMD           0xC4
           =1 #endif
  90      =1  //#define  EEP_SelectModeBuf         0xb2
  91      =1  #define  EEP_ReverseMode    0xc5
  92      =1  #define  EEP_JUMPAV_TIMESET 0xc6
  93      =1  #if 0
           =1 #define  EEP_Resolution     0xc0
           =1 #define  EEP_FPS        0xc1
           =1 #define  EEP_Quality      0xc2
           =1 #define  EEP_RecordMode     0xc3
           =1 #define  EEP_RecordLength   0xc4
           =1 #define  EEP_PreAlarmLength   0xc5
           =1 #define  EEP_PostAlarmLength  0xc6
           =1 #endif
 102      =1  //====================================HS AWT 981001
 103      =1  
 104      =1  #ifdef AWT_ADD_TRIGGER_DELAY_FUN  
 105      =1  #define  EEP_CamADelay    0x21b
 106      =1  #define  EEP_CamBDelay    0x21c
 107      =1  #define  EEP_CamCDelay    0x21d
 108      =1  #define  EEP_CamRDelay    0x21e
 109      =1  #endif
 110      =1  //====================================
 111      =1  //
 112      =1  //        ---------------------------------------------------------------
 113      =1  #define EEP_PCAUDIOPVOL   0x37  //BYTE  1   AudioVol
 114      =1  #define EEP_AUDIOPVOL     0x38  //BYTE  1   AudioVol
 115      =1  #define EEP_AUDIOBALANCE    0x39  //BYTE  1   AudioBalance
 116      =1  //
 117      =1  //        ---------------------------------------------------------------
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 26  

 118      =1  
 119      =1  #define EEP_BLOCKMOVIE      0x40  //BYTE  1 BlockedMovie:Blocked rating for Movie 
 120      =1  #define EEP_BLOCKTV       0x41  //BYTE  1 BlockedTV:Blocked rating for TV     
 121      =1  #define EEP_FVSLD       0x42  //BYTE  6
 122      =1  //                            7    6       4    3    2    1    0
 123      =1  //  FVSLD Level                        ALL   FV(V)   S    L    D    
 124      =1  //  0x43    BYTE    1   TV-Y            X  
 125      =1  //  0x44  BYTE    1   TV-Y7           X    X 
 126      =1  //  0x45  BYTE    1   TV-G            X 
 127      =1  //  0x46  BYTE    1   TV-PG           X       X    X    X    X
 128      =1  //  0x47  BYTE    1   TV-14           X       X    X    X    X 
 129      =1  //  0x48  BYTE    1   TV-MA           X       X    X    X
 130      =1  //
 131      =1  #define EEP_VCHIPPASSWORD   0x49  //BYTE  4   OSDPassword         //Defualt:3366
 132      =1  //      ---------------------------------------------------------------
 133      =1  //
 134      =1  //
 135      =1  //  0x61  WORD  2   PanelXRes
 136      =1  //  0x63  WORD  2 PanelYRes
 137      =1  //  0x65  BYTE  1 PanelHsyncMinPulseWidth
 138      =1  //  0x66  BYTE  1 PanelVsyncMinPulseWidth
 139      =1  //  0x67  WORD  2 PanelHminBackPorch
 140      =1  //  0x69  BYTE  1 PanelHsyncPolarity
 141      =1  //  0x6a  BYTE  1 PanelVsyncPolarity
 142      =1  //  0x6b  WORD  2 PanelDotClock
 143      =1  //  0x6d  BYTE  1 PanelPixsPerClock
 144      =1  //  0x6e  BYTE  1 PanelDEonly
 145      =1  //      ---------------------------------------------------------------
 146      =1  //
 147      =1  //  0x80  PC Data
 148      =1  //
 149      =1  //      ---------------------------------------------------------------
 150      =1  //
 151      =1  //  0x300 TV Data
 152      =1  //
 153      =1  //  --- NTSC_TV -------------------------------------------------------------
 154      =1  //  CNT_SAVEDAIR      BYTE  1   Total count of saved Air TV Channel.
 155      =1  //  IDX_CURAIR        BYTE  1   Index of Current Air TV Channel
 156      =1  //  CHN_CURAIR        BYTE    1   Current Air TV Channel.
 157      =1  //
 158      =1  //  FIRSTSAVED_AIRCHN   BYTE    1 First saved Air TV channel no (maximum 100)
 159      =1  //  ....
 160      =1  //
 161      =1  //  CNT_SAVEDCABLE      BYTE  1   Total count of saved Cable TV Channel.
 162      =1  //  IDX_CURCABLE      BYTE  1   Index of Current Cable TV Channel
 163      =1  //  CHN_CURCABLE      BYTE    1   Current Cable TV Channel.
 164      =1  //
 165      =1  //  FIRSTSAVED_CABLECHN   BYTE  1 First saved Cable TV channel no (maximum 100)
 166      =1  //
 167      =1  //  --- PAL_TV --------------------------------------------------------------
 168      =1  //  PR_CUR          BYTE  1   Current PR no.
 169      =1  //  FIRST_SAVEDPR     DWORD 4   Freq of PR0.  (TOTAL_PR)
 170      =1  //  FIRST_SAVEDPR+4     DWORD   4   Freq of PR1.
 171      =1  //  .....
 172      =1  //
 173      =1  
 174      =1  
 175      =1  
 176      =1  //
 177      =1  // Offset of EEPROM
 178      =1  //
 179      =1  /*
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 27  

 180      =1  #define VIDEOCONTRAST   0x18    // for NTSC.(PAL:0x20,SECAM:0x28)
 181      =1  #define VIDEOBRIGHTNESS   0x19
 182      =1  #define VIDEOSATURATION_U 0x1a
 183      =1  #define VIDEOSATURATION_V 0x1b
 184      =1  #define VIDEOHUE      0x1c    // only for NTSC
 185      =1  #define VIDEOSHARPNESS    0x1d
 186      =1  */
 187      =1  #define CCCOLOR   0x52
 188      =1  #define VOLZOOM   0x53
 189      =1  
 190      =1  #define PANELINFO 0x61
 191      =1  
 192      =1  // PAL_TV
 193      =1  #define  PR_CUR         0x301 
 194      =1  #define  FIRST_SAVEDPR      0x308 
 195      =1   #define TVFREQ_HIGH 0 
 196      =1   #define TVFREQ_LOW  1
 197      =1  #ifdef PAL_TV
           =1  #define TVFINETUNE  2
           =1     // NOT Finetune: 0 , Range: -32 ~ +32
           =1  #define TVPRSYSTEM  3  
           =1     // bit 7: Add:1 Ereased :0
           =1     // 
           =1  #define TVCHNAME    4
           =1 
           =1  #define BYTEPERCHANNEL 9 
           =1 #endif
 207      =1  // NTSC_TV
 208      =1  #define  EEP_TVInputSel     0x302
 209      =1  #define  CHN_CURAIR       0x303 
 210      =1  #define  FIRSTSAVED_AIRCHN    0x308 
 211      =1  #define  CHN_CURCABLE     0x403 
 212      =1  #define  FIRSTSAVED_CABLECHN  0x408 
 213      =1  #ifdef NTSC_TV
           =1  #define TVFINETUNE  0
           =1     // NOT Finetune: 0 , Range: -32 ~ +32
           =1  #define TVPRSYSTEM  1  
           =1     // bit 7: Add:1 Ereased :0
           =1     // 
           =1  #define BYTEPERCHANNEL 2
           =1 #endif
 221      =1  
 222      =1  
 223      =1  
 224      =1  
 225      =1  WORD GetFWRevEE(void);
 226      =1  void SaveFWRevEE(WORD);
 227      =1  
 228      =1  BYTE GetDebugLevelEE(void);
 229      =1  void SaveDebugLevelEE(BYTE);
 230      =1  
 231      =1  #ifdef WIDE_SCREEN
           =1 BYTE GetWideModeEE(void);
           =1 void SaveWideModeEE(BYTE dl);
           =1 #endif
 235      =1  
 236      =1  
 237      =1  //BYTE GetRange4CoarseEE(void);
 238      =1  //void SaveRange4CoarseEE(BYTE);
 239      =1  
 240      =1  BYTE GetPossibleAutoDetectStdEE(void);
 241      =1  void SetPossibleAutoDetectStdEE(void);
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 28  

 242      =1  
 243      =1  //BYTE GetOSDXPositionEE(void);
 244      =1  //BYTE GetOSDYPositionEE(void);
 245      =1  BYTE GetClosedCaptionFlagEE(void);
 246      =1  
 247      =1  BYTE GetVideoDatafromEE(BYTE);
 248      =1  void SaveVideoDatatoEE(BYTE offset, BYTE ndata);
 249      =1  
 250      =1  //BYTE GetVideoBrightnessEE(void);
 251      =1  //BYTE GetVideoSaturationEE(BYTE);
 252      =1  //BYTE GetVideoHueEE(void);
 253      =1  //BYTE GetVideoSharpnessEE(void);
 254      =1  
 255      =1  //void SaveVideoContrastEE(BYTE ndata);
 256      =1  //void SaveVideoBrightnessEE(BYTE ndata);
 257      =1  //void SaveVideoSaturationEE(BYTE, BYTE ndata);
 258      =1  //void SaveVideoHueEE(BYTE ndata);
 259      =1  //void SaveVideoSharpnessEE(BYTE ndata);
 260      =1  
 261      =1  BYTE GetOSDPositionModeEE(void);
 262      =1  void SaveOSDPositionModeEE(BYTE ndata);
 263      =1  //void SaveOSDXPositionEE(BYTE);
 264      =1  //void SaveOSDYPositionEE(BYTE);
 265      =1  
 266      =1  void SaveClosedCaptionFlagEE(BYTE);
 267      =1  
 268      =1  BYTE GetBlockedTVEE(void);      
 269      =1  void SaveBlockedTVEE(BYTE vi);    
 270      =1  BYTE GetBlockedTV_FLDSLEE( BYTE level ) ;
 271      =1  void SaveBlockedTV_FLDSLEE(BYTE level, BYTE vi) ;
 272      =1  
 273      =1  BYTE GetBlockedMovieEE(void);   
 274      =1  void SaveBlockedMovieEE(BYTE vi); 
 275      =1  #if 0
           =1 BYTE GetInputSelectionEE(void);
           =1 #endif
 278      =1  void SaveInputSelectionEE(BYTE val);
 279      =1  
 280      =1  //BYTE GetOSDDurationEE(void);
 281      =1  //void SaveOSDDurationEE(BYTE val);
 282      =1  
 283      =1  BYTE GetOSDLangEE(void);
 284      =1  void SaveOSDLangEE(BYTE val);
 285      =1  
 286      =1  //ljy100303...BYTE GetOSDZoomEE(void);
 287      =1  //ljy100303...void SaveOSDZoomEE(BYTE val);
 288      =1  
 289      =1  BYTE GetAudioVolEE(void);
 290      =1  void SetAudioVolEE( BYTE vol );
 291      =1  BYTE GetPCAudioVolEE(void);
 292      =1  void SetPCAudioVolEE( BYTE vol );
 293      =1  #if 0
           =1 BYTE GetAudioBalanceEE(void);
           =1 void SetAudioBalanceEE( BYTE vol );
           =1 BYTE GetAudioBassEE(void);
           =1 void SetAudioBassEE( BYTE vol );
           =1 BYTE GetAudioTrebleEE(void);
           =1 void SetAudioTrebleEE( BYTE vol );
           =1 #endif
 301      =1  //BYTE GetAudioEffectEE(void);
 302      =1  //void SetAudioEffectEE( BYTE vol );
 303      =1  
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 29  

 304      =1  void ClearBasicEE(void);
 305      =1  
 306      =1  BYTE ValidPassword(DATA_P BYTE *numstr, BYTE index);
 307      =1  BYTE SetNewPassword(DATA_P BYTE *numstr, BYTE index);
 308      =1  
 309      =1  //WORD GetPanelXRes(void);
 310      =1  //WORD GetPanelYRes(void);
 311      =1  BYTE GetPanelHsyncMinPulseWidth(void);
 312      =1  BYTE GetPanelVsyncMinPulseWidth(void);
 313      =1  WORD GetPanelHMinBackPorch(void);
 314      =1  BYTE GetPanelHsyncPolarity(void);
 315      =1  BYTE GetPanelVsyncPolarity(void);
 316      =1  WORD GetPanelDotClock(void);
 317      =1  WORD GetPanelMaxClock(void);
 318      =1  BYTE GetPanelPixsPerClock(void);
 319      =1  // Not used yet *************************  BYTE GetPanelDEonly(void);
 320      =1  
 321      =1  void AddTVChannelEE( BYTE tvtype, BYTE chn);
 322      =1  BYTE GetTVChannelEE( BYTE tvtype, BYTE inx);
 323      =1  void ResetTVChannelEE( BYTE tvtype );
 324      =1  BYTE GetTVChannelCntEE(BYTE tvtype);
 325      =1  BYTE GetTVChnIdxEE(BYTE tvtype);
 326      =1  BYTE GetCurTVChannelEE(BYTE tvtype);
 327      =1  void SetTVChnIdxEE(BYTE tvtype, BYTE newd);
 328      =1  void SetCurTVChannelEE(BYTE tvtype, BYTE newd);
 329      =1  BYTE InsertTVChannelEE(BYTE tvtype, BYTE newd);
 330      =1  BYTE RemoveTVChannelEE(BYTE tvtype, BYTE newd);
 331      =1  
 332      =1  void SetTVPrEE(void);
 333      =1  BYTE GetTVPrEE(void);
 334      =1  void SetTVFreqEE(BYTE, WORD);
 335      =1  WORD GetTVFreqEE(BYTE);
 336      =1  void SetFineTuneEE(BYTE, BYTE);
 337      =1  BYTE GetFineTuneEE(BYTE);
 338      =1  BYTE GetTVPrSystem(BYTE);
 339      =1  void SetTVPrSystem(BYTE, BYTE);
 340      =1  BYTE GetTVInputSelEE(void);
 341      =1  void SetTVInputSelEE(BYTE);
 342      =1  
 343      =1  #define GetVInputStdDetectModeEE()        ReadEEP(EEP_AUTODETECTTYTE)
 344      =1  #define SaveVInputStdDetectModeEE(A)      WriteEEP(EEP_AUTODETECTTYTE, A)
 345      =1  
 346      =1  #define GetAutoRecogntionEE()         ReadEEP(EEP_AUTORECOGNITION)
 347      =1  #define SaveAutoRecogntionEE(A)         WriteEEP(EEP_AUTORECOGNITION, A)
 348      =1  
 349      =1  #define SetVideoModeEE( ctid )          WriteEEP( EEP_VIDEOMODE, ctid )
 350      =1  #define GetVideoModeEE()            ReadEEP( EEP_VIDEOMODE )
 351      =1  
 352      =1  #define GetPanelContrastEE()          ReadEEP(0x10)
 353      =1  
 354      =1  #if defined( SUPPORT_PC ) || defined( SUPPORT_DTV )
           =1 //#define GetPanelHueEE()             ReadEEP(0x28)
           =1 //#define GetPanelSharpnessEE()         ReadEEP(0x29)
           =1 #define GetPanelBrightnessEE()          ReadEEP(0x11)
           =1 //#define GetPanelSaturationEE()          ReadEEP(0x2a)
           =1 
           =1 //#define SavePanelHueEE(A)           WriteEEP(0x28, A)
           =1 //#define SavePanelSharpnessEE(A)         WriteEEP(0x29, A)
           =1 #define SavePanelContrastEE(A)          WriteEEP(0x10, A)
           =1 #define SavePanelBrightnessEE(A)        WriteEEP(0x11, A)
           =1 //#define SavePanelSaturationEE(A)        WriteEEP(0x2a, A)
           =1 #endif
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 30  

 366      =1  
 367      =1  /*
 368      =1  #define GetDigitalVideoContrastEE()       ReadEEP(0x2b)
 369      =1  #define GetDigitalVideoBrightnessEE()     ReadEEP(0x2c)
 370      =1  #define GetDigitalVideoHueEE()          ReadEEP(0x2d)
 371      =1  #define GetDigitalVideoSaturationEE(off)    ReadEEP(0x2e+off)
 372      =1  
 373      =1  #define SaveDigitalVideoContrastEE(A)     WriteEEP(0x2b, A)
 374      =1  #define SaveDigitalVideoBrightnessEE(A)     WriteEEP(0x2c, A)
 375      =1  #define SaveDigitalVideoHueEE(A)        WriteEEP(0x2d, A)
 376      =1  #define SaveDigitalVideoSaturationEE(off,A)   WriteEEP(0x2e+off, A)
 377      =1  */
 378      =1  
 379      =1  #endif  // __ETC_EEP__
  11          #include "osdbasic.h"
   1      =1  //osd_basic.h
   2      =1  //LJY11012001
   3      =1  #ifndef __OSD_BASIC__
   4      =1  #define __OSD_BASIC__
   5      =1  
   6      =1  // osd_basic.h
   7      =1  // char code
   8      =1  //#include "apilib.h"
   9      =1  
  10      =1  //ljy052903
  11      =1  //definition for internal OSD
  12      =1  #define FONT_WIDTH_TW88     12
  13      =1  #define FONT_HEIGHT_TW88    18
  14      =1  #define PIXS_PER_XSTEP_TW88   8
  15      =1  #define LINES_PER_YSTEP_TW88  4
  16      =1  #define MAX_OSDWINDOW_TW88    8
  17      =1  
  18      =1  // Using TW88 OSD for Menu
  19      =1  #define FONT_WIDTH      12
  20      =1  #define FONT_HEIGHT     18
  21      =1  #define PIXS_PER_XSTEP    8
  22      =1  #define LINES_PER_YSTEP   4
  23      =1  #define MAX_OSDWINDOW   4
  24      =1  
  25      =1  #define MAX_FONT_BYTES    27
  26      =1  #define RAMFONT   0xFE
  27      =1  #define ROMFONT   0xFF
  28      =1  #define NO_UDFONT     226 
  29      =1  
  30      =1  #define FONT_ROM  1
  31      =1  #define FONT_RAM  2
  32      =1  
  33      =1  
  34      =1  /////////////////////////////////
  35      =1  // Old Registers...
  36      =1  /*
  37      =1    #define TW88_WIN1ATTR   0x76
  38      =1    #define TW88_WIN1XSTART   0x77
  39      =1    #define TW88_WIN1YSTART   0x78
  40      =1    #define TW88_WIN1WIDTH    0x79
  41      =1    #define TW88_WIN1HEIGHT   0x7a
  42      =1    #define TW88_WIN1BRDATTR  0x7b
  43      =1    #define TW88_WIN1BRDWIDTH 0x7c
  44      =1    #define TW88_WIN1BRDHEIGHT  0x7d
  45      =1    #define TW88_WIN1XSPACE   0x7e    // between characters.
  46      =1    #define TW88_WIN1YSPACE   0x7f
  47      =1    #define TW88_WIN1SADDR    0x80    // starting address of OSD ram for Windows 1
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 31  

  48      =1  */
  49      =1  /////////////////////////////////
  50      =1  
  51      =1  // OSD
  52      =1  #define TW88_ENABLERAM    0x94  // TW8804C
  53      =1  #define TW88_FONTRAMADDR  0x99  // TW8804C
  54      =1  #define TW88_FONTRAMDATA  0x9a  // TW8804C
  55      =1  #define TW88_OSDRAMADDRHI 0x95  // TW8804C
  56      =1  #define TW88_OSDRAMADDRLO 0x96  // TW8804C
  57      =1  #define TW88_OSDRAMDATAHI 0x97  // TW8804C
  58      =1  #define TW88_OSDRAMDATALO 0x98  // TW8804C
  59      =1  #define TW88_MULTISTART   0x9b  // TW8804C
  60      =1  #define TW88_OSDLOCKUPSEL 0x9c
  61      =1  #define TW88_WINNUM     0x9e  // TW8804C
  62      =1  #define TW88_WINATTR    0x9f  //
  63      =1  #define TW88_WINXSTART    0xa1  //
  64      =1  #define TW88_WINYSTART    0xa2  //
  65      =1  #define TW88_WINSTART_HI  0xa0  //
  66      =1  #define TW88_WINWIDTH   0xa3  //
  67      =1  #define TW88_WINHEIGHT    0xa4  //
  68      =1  #define TW88_WINBRDATTR   0xa5  //
  69      =1  #define TW88_WINBRDWIDTH  0xa6  //
  70      =1  #define TW88_WINBRDHEIGHT 0xa7  //
  71      =1  #define TW88_WINSPACE   0xa8  // between characters.
  72      =1  #define TW88_WINZOOM    0xa9  //
  73      =1  #define TW88_WINSADDRHI   0xa9  // starting address of OSD ram for Windows 1
  74      =1  #define TW88_WINSADDRLO   0xaa  // starting address of OSD ram for Windows 1
  75      =1  
  76      =1  #define TW88_WINSHADOW    0xab  //
  77      =1  #define TW88_WINBLENDING  0xac  //
  78      =1  #define TW88_WINCHEFFECT  0xad  //
  79      =1  
  80      =1  
  81      =1  //Attributes for OSD
  82      =1  #define WINZOOMx1     0x01
  83      =1  #define WINZOOMx2     0x02
  84      =1  #define WINZOOMx3     0x03
  85      =1  #define WINZOOMx4     0x04
  86      =1  #define SHOW        0x08  
  87      =1  
  88      =1  #define EXTENDED_COLOR    0x80
  89      =1  #define BG_COLOR_BLACK    0x00  //For background color of window, border, and char. 
  90      =1  #define BG_COLOR_RED    0x40  
  91      =1  #define BG_COLOR_GREEN    0x20
  92      =1  #define BG_COLOR_YELLOW   0x60
  93      =1  #define BG_COLOR_BLUE   0x10
  94      =1  #define BG_COLOR_MAGENTA  0x50
  95      =1  #define BG_COLOR_CYAN   0x30
  96      =1  #define BG_COLOR_WHITE    0x70
  97      =1  #define BG_COLOR_TRANS    0x80  
  98      =1  #define BG_COLOR_MASK   0xf0  
  99      =1  
 100      =1  #define CH_COLOR_BLACK    0x00  //For color of char.
 101      =1  #define CH_COLOR_RED    0x04  
 102      =1  #define CH_COLOR_GREEN    0x02
 103      =1  #define CH_COLOR_YELLOW   0x06
 104      =1  #define CH_COLOR_BLUE   0x01
 105      =1  #define CH_COLOR_MAGENTA  0x05
 106      =1  #define CH_COLOR_CYAN   0x03
 107      =1  #define CH_COLOR_WHITE    0x07
 108      =1  #define CH_BLINK      0x08  
 109      =1  #define CH_COLOR_MASK   0x0f  
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 32  

 110      =1  
 111      =1  #define CL_BLACK      0x00  //For color of char.
 112      =1  #define CL_BLUE       0x01
 113      =1  #define CL_GREEN      0x02
 114      =1  #define CL_CYAN       0x03
 115      =1  #define CL_RED        0x04  
 116      =1  #define CL_MAGENTA      0x05
 117      =1  #define CL_YELLOW     0x06
 118      =1  #define CL_WHITE      0x07
 119      =1  #define CL_BLINK      0x08  
 120      =1  
 121      =1  // 0x76*(WindowNo*0x0b)
 122      =1  #define WINDOW_DISABLE    0x00
 123      =1  #define WINDOW_ENABLE   0x01
 124      =1  #define WINDOW_3D_ENABLE    0x04
 125      =1  #define WINDOW_3D_BOTTOM    0x08
 126      =1  #define WINDOW_3D_TOP     0x00
 127      =1  #define WINDOW_TRANS_ENABLE 0x80
 128      =1  
 129      =1  #define WINBDCOLOR_ENABLE 0x80
 130      =1  #define WINBDCOLOR_EXTENT 0x80
 131      =1  
 132      =1  
 133      =1  #define WINBLENDING_DISABLE 0x00
 134      =1  #define WINBLENDING_BACK    0x10
 135      =1  #define WINBLENDING_FORE    0x20
 136      =1  #define WINBLENDING_ALL     0x30
 137      =1  
 138      =1  #define WINSHADOW_ENABLE  0x80
 139      =1  // 0xc8*WindowNo
 140      =1  #define WIN_MULTICOLOR_ENABLE 0x20
 141      =1  #define WIN_CH_EFFECT_ENABLE  0x10
 142      =1  #define WIN_CH_EFFECT_SHADOW  0x08
 143      =1  
 144      =1  
 145      =1  
 146      =1  ///////// TW8804C /////////////
 147      =1  // Window Number
 148      =1  #define WINNUM1       1
 149      =1  #define WINNUM2       2
 150      =1  #define WINNUM3       3
 151      =1  #define WINNUM4       4
 152      =1  
 153      =1  // Index 0x9f Defination
 154      =1  #define WIN_BG_COLOR_EX   0x80
 155      =1  #define WIN_BG_COLOR_EX0  0x00
 156      =1  #define WIN_3D_TYPE     0x08
 157      =1  #define WIN_3D_TYPE0    0x00
 158      =1  #define WIN_3D_EN     0x04
 159      =1  #define WIN_3D_EN0      0x00
 160      =1  #define WIN_3D_LEVEL    0x02
 161      =1  #define WIN_EN        0x01
 162      =1  #define WIN_EN0       0x00
 163      =1  
 164      =1  // Index 0xa5 Defination
 165      =1  #define WIN_BD_EN     0x80
 166      =1  #define WIN_BD_EN0      0x00
 167      =1  #define WIN_BD_WIDTH(a)   a
 168      =1  
 169      =1  // Index 0xa6 Defination
 170      =1  #define WIN_BD_COLOR_EX   0x80
 171      =1  #define WIN_BD_COLOR_EX0  0x00
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 33  

 172      =1  #define WIN_H_BD_W(a)   a
 173      =1  
 174      =1  // Index 0xa7 Defination
 175      =1  #define WIN_V_BD_W(a)   a
 176      =1  
 177      =1  // Index 0xa8
 178      =1  #define WIN_CH_VSPACE(a)  (a<<4)
 179      =1  #define WIN_CH_HSPACE(a)  a
 180      =1  
 181      =1  // Index 0xa9 Defination
 182      =1  #define WIN_VZOOM(a)    (a-1)
 183      =1  #define WIN_HZOOM(a)    (a-1)
 184      =1  #define WIN_SADDR(a)    a
 185      =1  
 186      =1  // Index 0xab
 187      =1  #define WIN_SHADOW_EN   0x80
 188      =1  #define WIN_SHADOW_EN0    0x00
 189      =1  #define WIN_SHADOW_W(a)   a
 190      =1  
 191      =1  // ad
 192      =1  #define WIN_SHADOW_COLOR_EX   0x80
 193      =1  #define WIN_SHADOW_COLOR_EX0  0x00
 194      =1  #define WIN_MULTI_EN      0x40
 195      =1  #define WIN_MULTI_EN0     0x00
 196      =1  #define WIN_V_EXT_EN      0x20
 197      =1  #define WIN_V_EXT_EN0     0x00
 198      =1  #define WIN_CH_BDSH_SEL(a)    a
 199      =1  #define SEL_BORDER        0
 200      =1  #define SEL_SHADOW        1
 201      =1  #define WIN_CH_BDSH_COLOR_EX  0x08
 202      =1  #define WIN_CH_BDSH_COLOR_EX0 0x00
 203      =1  
 204      =1  #define OSD_Win_Num(a)      0x9e, a-1
 205      =1  #define OSD_Win_Start_Addr    0xa0
 206      =1  #define OSD_Win_Attr(a)       a
 207      =1  #define OSD_Win_Start(h,v)       (BYTE)(((WORD)h>>8) | (((WORD)v>>8)<<4)),(BYTE)h, (BYTE)v
 208      =1  #define OSD_Win_Width(a)      a
 209      =1  #define OSD_Win_Height(a)     a
 210      =1  #define OSD_Win_Border(a)     a
 211      =1  #define OSD_Win_HBorder(a)      a
 212      =1  #define OSD_Win_VBorder(a)      a
 213      =1  #define OSD_Win_CH_Space(a)     a
 214      =1  #define OSD_Win_ZM_SAddr(h,v,a)   ((h<<6)|(v<<4)|(a>>8)), (BYTE)a
 215      =1  #define OSD_Win_Shadow(a)     a
 216      =1  #define OSD_Win_Blending(a)     a
 217      =1  #define OSD_Win_CH_BorderShadow(a)  a
 218      =1  
 219      =1  
 220      =1  #define SetOSDWindowNum(winno)    WriteTW88(TW88_WINNUM, winno-1)
 221      =1  
 222      =1  //#define  OSD_Window_Attr(Trans_en,Color,3D_Type,3D_en,W_en)       (((( Trans_en | Color ) | 3D_Type) | 3
             -D_en) | W_en)
 223      =1  #define  OSD_Window_Attr(a,b,c,d,e)                 (((( a | b ) | c) | d) | e)
 224      =1  #define  OSD_WShadow_Attr(W_Shadow_en,Color,Width)          W_Shadow_en | Color | Width
 225      =1  //#define  OSD_Blending(en,level)                   en | (level & 0x0f)
 226      =1  //#define  OSD_Ch_Effect(Multi, Effect_En, ShadowBorder, Color)   Multi | Effect_En | ShadowBorder | Color 
             - 
 227      =1  
 228      =1  
 229      =1  struct OSDStrInfo 
 230      =1  {
 231      =1    BYTE  cnt;
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 34  

 232      =1    WORD  addr;
 233      =1    BYTE  attr;
 234      =1    DWORD str;
 235      =1  };
 236      =1  /*
 237      =1  struct BarInfo {
 238      =1    struct RegisterInfo BarCnt;
 239      =1    BYTE  winno;
 240      =1    BYTE  xoff;
 241      =1    BYTE  yoff;
 242      =1    BYTE  color;
 243      =1    int   bar_cnt;
 244      =1  };
 245      =1  */
 246      =1  struct FontData {
 247      =1    BYTE  font[27];
 248      =1  } ;
 249      =1  
 250      =1  //====================================================================
 251      =1  //  Internal OSD Function
 252      =1  void CopyCharToOSDRAM_TW88(BYTE Addr, BYTE attr, BYTE ch);
 253      =1  void CopyUDCharToOSDRAM_TW88(BYTE Addr, BYTE attr, BYTE ch);
 254      =1  //BYTE GetOSDWindowWidth_TW88(BYTE winno);
 255      =1  WORD GetOSDWindowSA_TW88(BYTE winno);
 256      =1  void SetOSDWindowX_TW88(BYTE winno, BYTE x);
 257      =1  void SetOSDWindowY_TW88(BYTE winno, BYTE y);
 258      =1  void SetOSDWindowWidth_TW88(BYTE winno, BYTE w);
 259      =1  void SetOSDWindowSA_TW88(BYTE winno, WORD sa);
 260      =1  
 261      =1  void SetOSDItalicsAndUnderline(BYTE italics, BYTE underline);
 262      =1  
 263      =1  void SetOSDHBorderWidth_TW88(BYTE winno, BYTE w);
 264      =1  //BYTE GetOSDWindowColor_TW88(BYTE winno);
 265      =1  void SetOSDWindowColor_TW88(BYTE CCWin, BYTE color);
 266      =1  void EnableOSDRAMAndChangeFont(BYTE type);
 267      =1  void WriteCharToOSDRAM(WORD addr, BYTE ch, BYTE attr);
 268      =1  
 269      =1  
 270      =1  void ShowOSDWindowAll(BYTE on);
 271      =1  void ShowOSDWindow_TW88(BYTE winno, BYTE onoff);
 272      =1  void ClearOSD_TW88(void);
 273      =1  //void CreateOSDWindow_TW88(BYTE winno, BYTE x, BYTE y, BYTE w, BYTE h, WORD sa, BYTE attr);
 274      =1  /*not yet!!
 275      =1  //ljy012304...CC_ADJUST_POS
 276      =1  void SetOSDWindowXS_TW88(BYTE winno, BYTE xs);
 277      =1  void SetOSDWindowYS_TW88(BYTE winno, BYTE ys);
 278      =1  */
 279      =1  
 280      =1  //====================================================================
 281      =1  //  OSDMenu Functions
 282      =1  
 283      =1  //--------------------------------------------------------------------
 284      =1  //  Functions used in only Menu
 285      =1  #define   CONVERT_CODE      0x80
 286      =1  
 287      =1  void InitOSDWindow(BYTE *ptr);
 288      =1  
 289      =1  WORD GetOSDWindowX(BYTE winno);
 290      =1  WORD GetOSDWindowY(BYTE winno);
 291      =1  BYTE CreateOSDWindowOutline(BYTE winno, BYTE w, BYTE color);
 292      =1  void CreateOSDMenuWindow(BYTE, BYTE, BYTE, BYTE, BYTE, BYTE, BYTE);
 293      =1  void ClearOSDLine(BYTE winno, BYTE sx, BYTE sy, BYTE cnt, BYTE attr);
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 35  

 294      =1  void WriteStringToAddr(WORD addr, BYTE *str, BYTE cnt);
 295      =1  void DrawAttrString(WORD addr, BYTE *str, BYTE cnt);
 296      =1  void DrawAttrCnt(WORD addr, BYTE color, BYTE cnt);
 297      =1  void ClearDataCnt(WORD, BYTE);
 298      =1  #define   SetOSDWindowX(A, B)       SetOSDWindowX_TW88(A, B)
 299      =1  #define   SetOSDWindowY(A, B)       SetOSDWindowY_TW88(A, B)
 300      =1  
 301      =1  //--------------------------------------------------------------------
 302      =1  //  Functions used in Menu and others
 303      =1  #define   ShowOSDWindow(A, B)       ShowOSDWindow_TW88(A, B)
 304      =1  #define   ClearOSD()              ClearOSD_TW88()
 305      =1  
 306      =1  //================================================================
 307      =1  //  Font
 308      =1  void DownloadUDFont(void);
 309      =1  #ifdef Hs_debug
 310      =1  void DisplayROMFont(BYTE);
 311      =1  void DisplayRAMFont(BYTE);
 312      =1  #endif
 313      =1  void DownloadFont(BYTE cod, CODE_P BYTE *fontdata);
 314      =1  //void DisplayGrid( void );
 315      =1  //void DisplayCone( void );
 316      =1  //void DisplayJapanese( void );
 317      =1  void TestRAMFont( void );
 318      =1  #ifdef BANKING
           =1 void DisplayMGrid( BYTE );
           =1 void DisplayMessage( void );
           =1 void DisplayChinese( void );
           =1 void DisplayJapanese( void );
           =1 void DisplayKorean( void );
           =1 void DisplayGridBank0( BYTE n );
           =1 void DisplayGridBank1( BYTE n );
           =1 #endif
 327      =1  
 328      =1  //================================================================
 329      =1  //  OSD COLOR
 330      =1  void Change_OSDColorLookup(void);
 331      =1  void Reset_OSDColorLookup(void);
 332      =1  
 333      =1  //====================================================================
 334      =1  //        Conversion
 335      =1  //====================================================================
 336      =1  BYTE utoa(WORD value, BYTE *str, BYTE radix);
 337      =1  BYTE ltoa_K(long value, BYTE *str, BYTE);
 338      =1  BYTE strlen( BYTE *str );
 339      =1  
 340      =1  #define CStrlen(A)        strlen(A)
 341      =1  
 342      =1  void WaitEndofDisplayArea(void);
 343      =1  
 344      =1  #endif  // __OSD_BASIC__
 345      =1  
  12          #include "osdmenu.h"
   1      =1  //osdmenu.h
   2      =1  //LJY10292001
   3      =1  #ifndef __OSDMENU__
   4      =1  #define __OSDMENU__
   5      =1  
   6      =1  //=======================================================================
   7      =1  // 
   8      =1  //BYTE GetOSDDuration(void);
   9      =1  
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 36  

  10      =1  void ResetVideoValue(void);
  11      =1  //#if defined( SUPPORT_PC ) || defined( SUPPORT_DTV )
  12      =1  //void ResetPCValue(void);
  13      =1  //#endif
  14      =1  BYTE GetOSDMenuLevel( void );
  15      =1  
  16      =1  void DrawMenulist(BYTE);
  17      =1  void Display_EnterPin(void);
  18      =1  void OSDHighMenu_sub(void);
  19      =1  void ResetOSDValue(void);
  20      =1  #ifdef E_Wintek
           =1 void ResetUESROSDValue(void);
           =1 #endif
  23      =1  //BYTE OnChangingValue(void);
  24      =1  //Not used yet *******************BYTE OnChangingTime(void);
  25      =1  
  26      =1  //WORD GetOSDclock(void);
  27      =1  
  28      =1  #ifdef HS_NEWOSDMENU
           =1 void InitOSDMenu(BYTE OSD_ID);
           =1 void OpenOSDMenu(BYTE OSD_ID);
           =1 #else
  32      =1  void InitOSDMenu(void);
  33      =1  void OpenOSDMenu(void);
  34      =1  #endif
  35      =1  BYTE CloseOSDMenu(void);
  36      =1  
  37      =1  void OpenFORMATMenu(void);
  38      =1  void OSDHighMenu(void);
  39      =1  void OSDSelect(void);
  40      =1  void OSDCursorMove(BYTE flag );
  41      =1  void OSDLeftRight(BYTE flag );
  42      =1  void OSDValueUpDn(BYTE flag);
  43      =1  WORD SetItemValue( BYTE id, BYTE flag );
  44      =1  BYTE DoAction(BYTE id);
  45      =1  
  46      =1  BYTE SaveValue1(void);
  47      =1  void ClearValueWin(void);
  48      =1  
  49      =1  void OSDNumber( BYTE num );
  50      =1  
  51      =1  void Set4WideScreen(BYTE id);
  52      =1  
  53      =1  void SetRGBContrast( BYTE id, BYTE val );
  54      =1  BYTE SetPCColorTemp(BYTE flag);
  55      =1  void ResetPanelAttributeValue(void);
  56      =1  WORD GetItemValue( BYTE);
  57      =1  void DisplayViewBar( WORD,BYTE);
  58      =1  void DrawNum(WORD, CODE_P struct NumType *, WORD);
  59      =1  void DrawStringByLang( WORD, CODE_P struct EnumType *, WORD);
  60      =1  
  61      =1  void DisplayVolumebar(BYTE val);
  62      =1  BYTE GetOSDLang(void);
  63      =1  void InitOSDMenuXY(void);
  64      =1  
  65      =1  void Display_TVGuide_Window(void);
  66      =1  void Display_TVGuide_Status(void);
  67      =1  
  68      =1  void ChangeVchip_LevelCursor(BYTE);
  69      =1  void ChangeVchip_ContentCursor(BYTE);
  70      =1  void Select_VchipLevel(void);
  71      =1  void SetVideoMode(BYTE mode);
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 37  

  72      =1  BYTE GetVideoDatawithOffset(BYTE offset);
  73      =1  void SetVideoContrast(BYTE newv);
  74      =1  void SetVideoBrightness(BYTE newv);
  75      =1  void SetVideoHue(BYTE newv) ;
  76      =1  void SetVideoSaturation(BYTE svtype, BYTE newv) ;
  77      =1  BYTE SetVideoSharpness(BYTE flag) ;
  78      =1  void SetVideoBacklight(BYTE newv) ;
  79      =1  //------------------------------------------------andy awt 981013
  80      =1  //void DaySelect(BYTE);
  81      =1  void CAMOutDSel(BYTE val);
  82      =1  void DVRAodioSel(BYTE  val);
  83      =1  
  84      =1  //------------------------------------------------andy awt 981013
  85      =1  
  86      =1  void DisplayLineOSD(void);  // OSD Line display Demo
  87      =1  #ifdef CENEC_OSDMENU_ACCM8
           =1 BYTE ChkOSDMENU_TOPWIN(void);  //Weylis 080930
           =1 BYTE ChkOSDMENU_WINDOW(void);
           =1 BYTE ChkOSDMENU(void);
           =1 #endif
  92      =1  
  93      =1  #ifdef AWT_ADD_TRIGGER_DELAY_FUN  //Pinchi 20150209 add
  94      =1  void AWT_DisplayViewBar(WORD addr , BYTE val);
  95      =1  #endif
  96      =1  struct MenuType {
  97      =1    BYTE  width,  height;
  98      =1    BYTE  TitleColor; 
  99      =1    BYTE  CursorColor;
 100      =1  };
 101      =1  
 102      =1  struct NumType {
 103      =1    BYTE  PrePostCharLen;   // high nibble(pre) / low nibble(post)
 104      =1    BYTE  PrePostChar[4];
 105      =1  };
 106      =1  
 107      =1  struct NumberStringType {
 108      =1    BYTE  x, y;
 109      =1    BYTE    width;
 110      =1    BYTE  BackColor;
 111      =1    BYTE  Radix;
 112      =1    BYTE  NumColor;
 113      =1    BYTE    MaxLen;       // maximum length of string
 114      =1    BYTE  PrePostCharLen;   // high nibble(pre) / low nibble(post)
 115      =1    BYTE  PrePostChar[3];
 116      =1  };
 117      =1  
 118      =1  struct TimeType {
 119      =1    BYTE  x, y;
 120      =1    BYTE    width;
 121      =1    BYTE  BackColor;
 122      =1    BYTE  Format;       //_24H_TIME
 123      =1    BYTE  TimeColor;
 124      =1    BYTE    CursorColor;
 125      =1  };
 126      =1  
 127      =1  struct EnumType {
 128      =1    BYTE    Sz;//size
 129      =1    BYTE    ByLang;
 130      =1    BYTE  Str[15];      // doesn't matter the size !!!
 131      =1  };
 132      =1  
 133      =1  #define ICON_CH_SZ    2
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 38  

 134      =1  //#define BAR_NUM_SZ    4
 135      =1  #define ICON_BUF_SZ   2
 136      =1  struct DefineMenu {
 137      =1    //WORD            Icon[ICON_BUF_SZ];  
 138      =1    BYTE        CODE  *Icon;
 139      =1    BYTE            **Desc;       
 140      =1    BYTE            PreFnId, 
 141      =1                  PostFnId;
 142      =1  //  void    (*CalltoFunction)(void);            // Un/Dn/Sel Function
 143      =1    BYTE            IconColor;      //NIL: not to display icon
 144      =1    BYTE            DescColor;      //NIL: not to display desc. (IconColor==NIL && DescColor==NIL)->Last Item
 145      =1    struct DefineMenu CODE  *Child;
 146      =1    BYTE            Type;       // MENU, CHOICEMENU, BAR, NUMBER, TIME, ACTION, ENUM_STRING
 147      =1    BYTE            ActiveWithCursor;
 148      =1    BYTE            Id;
 149      =1    BYTE        CODE  *TypeData;  //MenuType, BarType, NumType,,,
 150      =1  } ;
 151      =1  
 152      =1  struct PictureInfo {
 153      =1  
 154      =1    BYTE Register_Addr;
 155      =1    BYTE EEPROM_Addr;
 156      =1    struct RegisterInfo   CODE  *Control_Range;
 157      =1  };
 158      =1  
 159      =1  
 160      =1  //-------------------------------------------------------------------
 161      =1  // OSD Window Information
 162      =1  //-------------------------------------------------------------------
 163      =1  // Window Number
 164      =1  #define OSDCURSORWINDOW     1
 165      =1  #define OSDMENUWINDOW       OSDCURSORWINDOW+1
 166      =1  #define OSDMENU_TOPWIN      OSDCURSORWINDOW+2
 167      =1  #define OSDMENU_TITLEWIN    OSDCURSORWINDOW+3
 168      =1  #define OSDBARWINDOW      OSDCURSORWINDOW
 169      =1  
 170      =1  #define TECHWELLOGO_OSDWIN    1 
 171      =1  #define TVINFO_OSDWIN       2 
 172      =1  #define FONTTEST_OSDWIN     2 
 173      =1  #define INPUTINFO_OSDWIN    3  
 174      =1  #define RATINGINFO_OSDWIN     1 
 175      =1  #define PCINFO_OSDWIN       3
 176      =1  #define VLOSSINFO_OSDWIN    4
 177      =1  
 178      =1  //-------------OSDMENU_TITLEWIN------------------------------------------------------
 179      =1  // Window Start address
 180      =1  #define OSDMENU_MAINADDR  0
 181      =1  //#define OSDMENU_SUBADDR     OSDMENU_MAINADDR+15    //25*9:196
 182      =1  //#define OSDMENU_SUBADDR     OSDMENU_MAINADDR+HS_WIDTH //0+40   //25*9:196
 183      =1  //#define OSDMENU_SUBADDR     OSDMENU_MAINADDR+10 //0+40   //25*9:196
 184      =1  #define OSDMENU_SUBADDR     OSDMENU_MAINADDR + 14 //0+40   //25*9:196  // Weylis 121008 清除 Icon 後面
 185      =1  
 186      =1  #define OSDMENU_BARADDR   200 //OSDMENU_SUBADDR+225    //256   //25x2:50
 187      =1  
 188      =1  #ifdef WQVGA
           =1 #define INPUTINFO1_ADDR   INPUTINFO_ADDR+17 //17x3:51
           =1 #else
 191      =1  #define INPUTINFO1_ADDR   INPUTINFO_ADDR+34 //17x2:51
 192      =1  #endif
 193      =1  
 194      =1  #define MUTEINFO_ADDR     INPUTINFO1_ADDR+51  // 4x1:4
 195      =1  #define TVCHINFO_ADDR     MUTEINFO_ADDR//324  // 3X1:3
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 39  

 196      =1  #define LOGO_ADDR     0
 197      =1  #ifdef AWT_ML072S
 198      =1  #define RATINGINFO_ADDR   (34)  //addr:210(8x1:8)
 199      =1  #else
           =1 #define RATINGINFO_ADDR   0 //addr:210(8x1:8)
           =1 #endif
 202      =1  #define PCMEASUREINFO_ADDR  OSDMENU_BARADDR //10x1
 203      =1  #ifdef QUAD
           =1 #define INPUTINFO_ADDR    160 // 9x1:9
           =1 #else
 206      =1  #define INPUTINFO_ADDR    0///24  // 9x1:9
 207      =1    #ifdef AWT_ML072S
 208      =1    #define INPUTINFO_MIRROR_ADDR 0//83 //william-v1.0-970804
 209      =1    #else
           =1   #define INPUTINFO_MIRROR_ADDR 73//83  //william-v1.0-970804
           =1   #endif
 212      =1  #define INPUTINFO_WIDTH   40  // 9x1:9    //william-v1.0-971111
 213      =1  #endif
 214      =1  #define OSD_VLOSS_ADDR  33 
 215      =1  
 216      =1  
 217      =1  //--------------------------------------------------------------------
 218      =1  // OSD Menu Position Range
 219      =1  #if ((defined WQVGA) && (defined ANALOG_7INCH)) || ((defined QVGA) && (defined SHARP_LQ050Q5DR01))
           =1   #define OSD_PHR_ PHR_/2
           =1 #else
 222      =1    #define OSD_PHR_ PHR_
 223      =1  #endif
 224      =1  
 225      =1  #define OSDHSTART_MAX (OSD_PHR_-(12+1)*25 - 56*2 -4)  //PHR - (pixelsize +Hspace)*MenuWidth - Hborder*2 - 
             -outlinewidth*2
 226      =1  #define OSDVSTART_MAX (PVR_-(18+11)*9 - 5*2 ) //  PVR - (Linesize+Vspace)*MENU_HEIGHT - Vborder*2  - outli
             -newidth*2
 227      =1  
 228      =1  #define OSDHSTART_MAX_A (OSD_PHR_-(12+2)*25 - 56*2 -8) //OSDHSTART_MAX  //PHR - (pixelsize +Hspace)*MenuWi
             -dth - Hborder*2 - outlinewidth*2
 229      =1  #define OSDVSTART_MAX_A OSDVSTART_MAX  //  PVR - (Linesize+Vspace)*MENU_HEIGHT - Vborder*2  - outlinewidth*
             -2
 230      =1  
 231      =1  #define OSDMENUX_MIN 1//0
 232      =1  #define OSDMENUX_MAX (OSDHSTART_MAX>>3)
 233      =1  #define OSDMENUX_50  (OSDHSTART_MAX>>4)
 234      =1  
 235      =1  #define OSDMENUY_MIN 2//0
 236      =1  #define OSDMENUY_MAX (OSDVSTART_MAX>>2)
 237      =1  #define OSDMENUY_50  (OSDVSTART_MAX>>3)
 238      =1  
 239      =1  #ifdef HS_NEWOSDMENU  //Weylis -@121008
           =1 // HS OSD Style
           =1 #define HS_WIDTH      40
           =1 #define HS_CHSPACE      14
           =1 //#define HS_CHSPACE      18
           =1 #define HS_ICONSPACE    1
           =1 #define HS_ICONSADDR    0
           =1 //#define HS_ICONSPACE    2
           =1 //#define HS_ICONSADDR    8
           =1 #endif
 249      =1  
 250      =1  //--------------------------------------------------------------------
 251      =1  // OSD Menu Width, Height 
 252      =1  #ifdef E_Wintek
           =1 #define ICON_HIGH       0x14
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 40  

           =1 #else
 255      =1  #define ICON_HIGH       0x0a
 256      =1  #endif
 257      =1  
 258      =1  #define TOTAL_MAX_HIGHT     9
 259      =1  #define TOTAL_TOP_HEIGHT    5 // Include blank line!
 260      =1  #define TOPMENU_WIDTH     2
 261      =1  #define TOPMENU_HEIGHT      4 
 262      =1  
 263      =1  #if (defined QVGA) && (defined SHARP_LQ050Q5DR01)
           =1 #define MENU_WIDTH        17 //23//25 
           =1 #define TITLE_MAX_DESC      17 //25 //
           =1 #define BAR_LENGTH        0
           =1 #else
 268      =1  //#define MENU_WIDTH        23  //23//25 
 269      =1  //#define MENU_WIDTH        26  //ryan@20170821
 270      =1  #ifdef AWT_ML072S
 271      =1  #define MENU_WIDTH        19  
 272      =1  #else
           =1 #define MENU_WIDTH        24  //ryan@20170821
           =1 #endif
 275      =1  
 276      =1  #define TITLE_MAX_DESC      23  //25  //
 277      =1  #define BAR_LENGTH        5  //8
 278      =1  #endif
 279      =1  
 280      =1  #ifdef TW8816
 281      =1  #define MENU_HEIGHT       8  //6 
 282      =1  #else
           =1 #define MENU_HEIGHT       7  //6 
           =1 #endif
 285      =1  //#define BARNUM_LENGTH       8  //11
 286      =1  
 287      =1  #ifdef AWT_ML072S
 288      =1  #define BARNUM_LENGTH       4//ryan@20170821
 289      =1  #else
           =1 #define BARNUM_LENGTH       9//ryan@20170821
           =1 #endif
 292      =1  
 293      =1  
 294      =1  #ifdef REFERENCE
           =1 #define BACK_COLOR        BG_COLOR_CYAN
           =1 #define DEFAULT_COLOR     BG_COLOR_CYAN   | CH_COLOR_WHITE
           =1 //#define ACTIVE_COLOR      BG_COLOR_YELLOW | CH_COLOR_WHITE
           =1 #define TITLE_BACK_COLOR    BG_COLOR_MAGENTA
           =1 #define TITLE_COLOR       TITLE_BACK_COLOR | CH_COLOR_YELLOW
           =1 #define COMMENT_COLOR     TITLE_BACK_COLOR | CH_COLOR_WHITE
           =1 #define CURSOR_COLOR      BG_COLOR_YELLOW | CH_COLOR_BLUE
           =1 #define OSD_INFO_COLOR      DEFAULT_COLOR
           =1 #define BAR_COLOR       DEFAULT_COLOR 
           =1 #define BAR_NUM_COLOR     DEFAULT_COLOR
           =1 #define NUM_COLOR       DEFAULT_COLOR
           =1 #define OSDMENU_OUTLINE_COLOR BG_COLOR_BLUE
           =1 #else
 308      =1  #define BACK_COLOR        BG_COLOR_CYAN
 309      =1  
 310      =1  #define DEFAULT_COLOR     BG_COLOR_CYAN | CH_COLOR_GREEN//ryan@20170828
 311      =1  
 312      =1  //#define ACTIVE_COLOR      BG_COLOR_YELLOW | CH_COLOR_WHITE
 313      =1  #define TITLE_BACK_COLOR    BG_COLOR_BLUE
 314      =1  #define TITLE_COLOR       TITLE_BACK_COLOR | CH_COLOR_YELLOW
 315      =1  #define COMMENT_COLOR     TITLE_BACK_COLOR | CH_COLOR_WHITE
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 41  

 316      =1  #define CURSOR_COLOR      BG_COLOR_YELLOW  | CH_COLOR_BLUE
 317      =1  #define OSD_INFO_COLOR      BG_COLOR_CYAN    | CH_COLOR_GREEN
 318      =1  #define BAR_COLOR       DEFAULT_COLOR
 319      =1  #define BAR_NUM_COLOR     DEFAULT_COLOR
 320      =1  #define NUM_COLOR       DEFAULT_COLOR
 321      =1  #define VER_COLOR         BG_COLOR_CYAN   | CH_COLOR_YELLOW   /// V1.1 03/07/07 simonsung
 322      =1  #define OSDMENU_OUTLINE_COLOR   BG_COLOR_CYAN
 323      =1  #define OSD_VLOSS_COLOR     BG_COLOR_CYAN    | CH_COLOR_WHITE
 324      =1  
 325      =1  #endif
 326      =1  
 327      =1  #ifdef HS_NEWOSDMENU
           =1 #define COMMENT1_COLOR      BG_COLOR_CYAN | CH_COLOR_RED
           =1 #endif
 330      =1  
 331      =1  #define Trigger_COLOR       BG_COLOR_CYAN|CH_COLOR_RED      //william-v1.1-970827
 332      =1  #define Mirror_COLOR      BG_COLOR_CYAN|CH_COLOR_YELLOW     //william-v1.1-970827
 333      =1  #ifndef AWT_ML072S
           =1 #define Jump_COLOR        BG_COLOR_CYAN|CH_COLOR_GREEN      //william-v1.1-970827
           =1 #else
 336      =1  #define Jump_COLOR        BG_COLOR_CYAN|CH_COLOR_BLUE     //william-v1.1-970827
 337      =1  #endif
 338      =1  #define Gauge_COLOR1      BG_COLOR_BLACK|CH_COLOR_GREEN 
 339      =1  #define Gauge_COLOR2      BG_COLOR_BLACK|CH_COLOR_YELLOW  
 340      =1  #define Gauge_COLOR3      BG_COLOR_BLACK|CH_COLOR_RED
 341      =1  
 342      =1  //DisplayedOSD
 343      =1  //    new   | MENU  TVINFO    CC    INPUTINFO   PCINFO    RATINGINFO
 344      =1  //  current   |
 345      =1  //============|=========================================================================
 346      =1  //  MENU    |     TVINFO    --    INPUTINFO   PCINFO    MENU + RATINGINFO 
 347      =1  //        |            
 348      =1  //------------|-------------------------------------------------------------------------
 349      =1  //  TVINFO    | MENU  TVINFO    --    INPUTINFO   PCINFO    TVINFO+RATING
 350      =1  //------------|-------------------------------------------------------------------------
 351      =1  //  CC      | MENU->  TVINFO->      INPUTINFO->   PCINFO    RATINGINFO
 352      =1  //        |  CC    CC          CC            
 353      =1  //------------|-------------------------------------------------------------------------
 354      =1  //  INPUTINFO | MENU  TVINFO    --    INPUTINFO   PCINFO    --
 355      =1  //------------|-------------------------------------------------------------------------
 356      =1  //  PCINFO    | MENU  x     x   INPUTINFO   PCINFO    x
 357      =1  //------------|-------------------------------------------------------------------------
 358      =1  //  RATINGINFO| MENU  TVINFO     RATING   INPUTINFO   x     RATINGINFO
 359      =1  //                  
 360      =1  
 361      =1  //=======================================================================================
 362      =1  // OSD Menu Constant define.
 363      =1  //=======================================================================================
 364      =1  //Time type
 365      =1  #define _24H_TIME   1
 366      =1  
 367      =1  //for previous, next, parent or child
 368      =1  #define YES       0xfe  
 369      =1  #define NO        0
 370      =1  
 371      =1  //#define OVERWRITE   0
 372      =1  //#define POPUP     1
 373      =1  
 374      =1  //CursorMove
 375      =1  #define VERT      0
 376      =1  #define HORI      1
 377      =1  
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 42  

 378      =1  //Type of MenuItem
 379      =1  #define OSDMENU     1
 380      =1  #define CHOICEMENU    2
 381      =1  #define ACTION      3
 382      =1  #define BAR       4
 383      =1  #define NUMBER      5
 384      =1  #define CHOICE      6
 385      =1  #define ENUM_STRING   7 //YESNO     7
 386      =1  #define CHOICE1     8
 387      =1  #define TIME      9
 388      =1  #define NUMBER_STRING 10
 389      =1  #define TEXT_STR              11   // V1.1 02/28/07 simonsung
 390      =1  #define INFORMATION              12
 391      =1  #define TEXT_STR_exit 13
 392      =1  
 393      =1  #ifdef HTRV
           =1 #define GRAPH 16
           =1 #endif
 396      =1  
 397      =1  //Bar type
 398      =1  #define LEFT_FILLED   1
 399      =1  #define RIGHT_FILLED  2
 400      =1  #define NO_FILLED   3
 401      =1  
 402      =1  //OSDmenu up and down key
 403      =1  #define UP          1
 404      =1  #define DN          2
 405      =1  #define RIGHT       3
 406      =1  #define LEFT          4
 407      =1  
 408      =1  // Action Id
 409      =1  #define DISP_INFO     0x16
 410      =1  
 411      =1  #define INPUTSELECTION    0x2f
 412      =1  
 413      =1  #define CHANGE_TO_COMPOSITE     (0x20|CH_TW2835)      // Low nibble need to start from 1 
 414      =1  #define CHANGE_TO_SVIDEO      (0x20|SVIDEO)       // so that it match with COMPOSITE...
 415      =1  #define CHANGE_TO_COMPONENT     (0x20|COMPONENT)    
 416      =1  #define CHANGE_TO_DTV       (0x20|DTV)    
 417      =1  #define CHANGE_TO_TV        (0x20|TV)         
 418      =1  #define CHANGE_TO_PC        (0x20|PC)         
 419      =1  #define CHANGE_TO_DIGITALVGA    (0x20|DIGITALVGA)     
 420      =1  #define CHANGE_TO_SCART       (0x20|SCART)        
 421      =1  
 422      =1  #define OSDPOSITIONMODE     0x10
 423      =1  #define OSD_VPOS      0x11
 424      =1  #define OSD_HPOS      0x12
 425      =1  #define OSD_HALFTONE    0x13
 426      =1  #define OSD_DURATION    0x14
 427      =1  #define RESET_OSDVALUE    0x15
 428      =1  #define OSDLANG       0x16
 429      =1  
 430      =1  #define PANEL_CONTRAST    0x58
 431      =1  #define PANEL_BRIGHTNESS  0x59
 432      =1  #define PANEL_HUE     0x5a
 433      =1  #define PANEL_SHARPNESS   0x5b
 434      =1  #define PANEL_SATURATION  0x5c
 435      =1  
 436      =1  #define PC_VPOS       0x43
 437      =1  #define PC_HPOS       0x44
 438      =1  #define PC_HSIZE      0x4d
 439      =1  
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 43  

 440      =1  #define PC_CLOCK      0x45
 441      =1  #define PC_PHASE      0x46
 442      =1  
 443      =1  #define AUTOADJUST      0x47
 444      =1  #define AUTOADJUST2     0x48
 445      =1  //#define SAVE_AUTOADJUST   0x49
 446      =1  #define RESET_AUTOADJUST  0x4a
 447      =1  
 448      =1  #define PCCOLORADJUST   0x4b
 449      =1  #define SAVE_COLORADJUST  0x4c
 450      =1  //#define RESET_COLORADJUST 0x4d
 451      =1  
 452      =1  #define RESET_PCVALUE   0x4e
 453      =1  #define CameraOSD     0x4f
 454      =1  
 455      =1  #define PC_COLOR_MODE   0x3f
 456      =1  #define PC_COLOR_TEMP   0x30
 457      =1  #define PC_COLOR_MODE1    0x31
 458      =1  #define PC_COLOR_MODE2    0x32
 459      =1  #define PC_COLOR_MODE3    0x33
 460      =1  #define PC_COLOR_USER   0x34
 461      =1  #define PC_COLOR_R      0x35
 462      =1  #define PC_COLOR_G      0x36
 463      =1  #define PC_COLOR_B      0x37
 464      =1  
 465      =1  #define VIDEO_MODE      0x90
 466      =1  #define VIDEO_MODE1     0x91
 467      =1  #define VIDEO_MODE2     0x92
 468      =1  #define VIDEO_MODE3     0x93
 469      =1  #define VIDEO_USER      0x94
 470      =1  #define VIDEO_CONTRAST    0x95
 471      =1  #define VIDEO_BRIGHTNESS  0x96
 472      =1  #define VIDEO_SATURATION  0x97
 473      =1  #define VIDEO_HUE     0x99
 474      =1  #define VIDEO_SHARPNESS   0x9a
 475      =1  #define VIDEO_BACKLIGHT   0x9c    // add new value 
 476      =1  #define RESET_VIDEOVALUE  0x9b
 477      =1  #define RESET_DVRVALUE    0x9e
 478      =1  #define RESET_MonitorVALUE    0x70
 479      =1  
 480      =1  
 481      =1  #ifdef AWT_ADD_TRIGGER_DELAY_FUN  //Pinchi 20150209 add
 482      =1  #define TRIGGER_CamADelay 0xb2
 483      =1  #define TRIGGER_CamBDelay 0xb3
 484      =1  #define TRIGGER_CamCDelay 0xb4
 485      =1  #define TRIGGER_CamRDelay 0xb5
 486      =1  #endif
 487      =1  
 488      =1  #ifdef HTRV
           =1 #define RESET_GAUGESETUP  0x9d   
           =1 #define Gauge_VStart      0x7a   
           =1 #endif
 492      =1  
 493      =1  #ifdef E_Wintek
           =1 #define RESET_USERVALUE 0x9d
           =1 #endif
 496      =1  #define VIDEOPICTURE    0x9f
 497      =1  
 498      =1  #define INPUTSTD      0x6f
 499      =1  #define CHANGE_TO_AUTO    0x60
 500      =1  #define CHANGE_TO_NTSC    (0x60 | NTSC)
 501      =1  #define CHANGE_TO_PAL   (0x60 | PAL)
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 44  

 502      =1  #define CHANGE_TO_SECAM   (0x60 | SECAM)
 503      =1  #define CHANGE_TO_NTSC4   (0x60 | NTSC4)
 504      =1  #define CHANGE_TO_PALM    (0x60 | PALM)
 505      =1  #define CHANGE_TO_PALN    (0x60 | PALN)
 506      =1  #define CHANGE_TO_PAL60   (0x60 | PAL60)
 507      =1  
 508      =1  #if 0
           =1 #define CLOSED_CAPTION    0x7f
           =1 #define CLOSEDCAP_OFF   0x70
           =1 #define CLOSEDCAP_CC1   0x71
           =1 #define CLOSEDCAP_CC2   0x72
           =1 #define CLOSEDCAP_CC3   0x73
           =1 #define CLOSEDCAP_CC4   0x74
           =1 #define CLOSEDCAP_T1    0x75
           =1 #define CLOSEDCAP_T2    0x76
           =1 #define CLOSEDCAP_T3    0x77
           =1 #define CLOSEDCAP_T4    0x78
           =1 
           =1 #define TV_GUIDE      0x8f
           =1 #define NO_VCHIP_LOCK   0
           =1 #define VCHIP_TV_Y      1
           =1 #define VCHIP_TV_Y7     2
           =1 #define VCHIP_TV_G      3
           =1 #define VCHIP_TV_PG     4
           =1 #define VCHIP_TV_14     5
           =1 #define VCHIP_TV_MA     6
           =1 #define PASSWORD      0x87
           =1 #define NEW_PASSWORD    0x88
           =1 #define CHK_PASSWORD    0x89
           =1 #define RET_CHK_PASSWORD  0x8a
           =1 #endif
 533      =1  
 534      =1  #define MPAA_RATING     0x9f
 535      =1  #define NO_MPAA_RATING    0
 536      =1  #define MPAA_G        1
 537      =1  #define MPAA_PG       2
 538      =1  #define MPAA_PG_13      3
 539      =1  #define MPAA_R        4
 540      =1  #define MPAA_NC_17      5
 541      =1  #define MPAA_X        6
 542      =1  
 543      =1  #define TVINSTALL     0xa0
 544      =1  #define SCAN_CHANNEL    0xa1
 545      =1  #define AIR_CABLE_TV    0xa3
 546      =1  #define STORE_CLEAR_TVCHN 0xa4
 547      =1  #define MTS         0xa5
 548      =1  #define EDIT_CHANNEL    0xa6
 549      =1  #define MTS_STEREO      0//0x10
 550      =1  #define MTS_MONO      1//0x11
 551      =1  
 552      =1  #define AUDIO_VOLUME    0xb7
 553      =1  
 554      =1  #if 0 //andy AWT8.4 20090811
           =1 
           =1 #define AUDIO_BALANCE   0xb9
           =1 #define AUDIO_BASS      0xba
           =1 #define AUDIO_TREBLE    0xbb
           =1 
           =1 #define AUDIO_LOUDNESS    0xbc
           =1 #define AUDIO_EFFECT    0xbd
           =1 #define AUDIO_MUTE      0xbe
           =1 #endif
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 45  

 564      =1  
 565      =1  #define DayChoice           0xb8
 566      =1  #define CAMOSDONOFF         0xb9
 567      =1  #define GAUGEChoice         0xba
 568      =1  #define OsdLockChoice       0xbb
 569      =1  #define PRIORITYChoice      0xcA
 570      =1  #define DVRDisplay    0xcc
 571      =1  
 572      =1  #define CAMAONOFF       0xc1
 573      =1  #define CAMBONOFF         0xc2
 574      =1  #define CAMCONOFF       0xc3
 575      =1  #define CAMRONOFF     0xc4
 576      =1  
 577      =1  #define IMAGEChoice         0xc5 
 578      =1  #define REARChoice          0xc6
 579      =1  #define JUMPChoice          0xc7
 580      =1  #define CAMOUTChoice        0xc8 
 581      =1  #define STIME_STEP        0xc9
 582      =1  #define TriggerVGA        0xcb
 583      =1  #define IMAGE_A_Choice         0xcd
 584      =1  #define IMAGE_B_Choice         0xce
 585      =1  #define IMAGE_C_Choice         0xcf
 586      =1  
 587      =1  #define DELAYCAMA       0xd0
 588      =1  #define DELAYCAMB            0xd1
 589      =1  #define DELAYCAMC       0xd2
 590      =1  #define DELAYCAMR         0xd3
 591      =1  #ifdef USE_CAMD
           =1 #define DELAYCAMD       0xd4
           =1 #endif
 594      =1  #define ReverseMode   0xd6
 595      =1  #ifdef AWT_ML072S //william @20130902 v1.0.1.2
 596      =1  #define JUMP_AV     0xd7
 597      =1  #endif
 598      =1  #define MANUAL_TUNE_CHANNEL 0xab
 599      =1  #define FINE_TUNE_CHANNEL 0xac
 600      =1  #define STORE_PALCHANNEL  0xad
 601      =1  
 602      =1  //#define CLEAR_TVCHN     0xb0
 603      =1  //#define STORE_TVCHN     0xb1
 604      =1  
 605      =1  #define WIDESCREEN      0xc0
 606      =1  #define WIDESCREEN_NORMAL 0 
 607      =1  #define WIDESCREEN_WIDE   1 
 608      =1  #define WIDESCREEN_PANO   2
 609      =1  #define WIDESCREEN_FULL   3 
 610      =1  #define WIDESCREEN_ZOOM   4 
 611      =1  
 612      =1  //#define SYSTEM_CLOCK    0xd1
 613      =1  //#define SYSTEM_CLOCK_H    0xd2
 614      =1  //#define WAKEUP_TIME     0xd3
 615      =1  //#define WAKEUP_TIME_H   0xd4
 616      =1  //#define WAKEUP_PR     0xd5
 617      =1  //#define OFF_TIME      0xd6
 618      =1  //#define OFF_TIME_H      0xd7
 619      =1  //#define SLEEP_TIMER     0xd8
 620      =1  
 621      =1  #define Resolution      0xe0
 622      =1  #define FPS         0xe1
 623      =1  #define Quality       0xe2
 624      =1  #define RecordMode      0xe3
 625      =1  #define RecordLength      0xe4
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 46  

 626      =1  #define PreAlarmLength    0xe5
 627      =1  #define PostAlarmLength   0xe6
 628      =1  #define Apply       0xe7
 629      =1  #if 0 //william-awt ml073q-20120313
           =1 #define ManualRecordStart 0xe8
           =1 #define ManualRecordStop  0xe9
           =1 #define Snapshot        0xea
           =1 #endif
 634      =1  #define FormatSD      0xeb
 635      =1  #define AudioRecord     0xec
 636      =1  #define FirmwareUpdate    0xed
 637      =1  #define ChangePassword    0xee
 638      =1  #define OverWrite     0xef
 639      =1  
 640      =1  #define UpdateConfig      0xd0
 641      =1  #define SDCardDetect      0xd5
 642      =1  
 643      =1  #define Year        0x20
 644      =1  #define Month       0x21
 645      =1  #define Day         0x22
 646      =1  #define Hour        0x23
 647      =1  #define Minute        0x24
 648      =1  
 649      =1  #define DaylightSaving        0x25
 650      =1  #define TimeBeginesMonth      0x26
 651      =1  #define TimeBeginesWeek       0x27
 652      =1  #define TimeBeginesTime       0x28
 653      =1  #define StandardTimeBeginesMonth  0x29
 654      =1  #define StandardTimeBeginesWeek   0x2a
 655      =1  #define StandardTimeBeginesTime   0x2b
 656      =1  #define TimeZone          0x2c
 657      =1  #define FirstNumber         0x2d
 658      =1  #define SecondNumber        0x2e
 659      =1  #define ThridNumber         0x2f
 660      =1  #define FourthNumber        0x38
 661      =1  #define WIFIIPNumber        0x39
 662      =1  #define WIFIMACNumber       0x3a
 663      =1  #define GETWAYNumber        0x3b
 664      =1  
 665      =1  #define OSDLANGI      0xd9
 666      =1  #define OSDLANGII     OSDLANGI+1
 667      =1  #define OSDLANGIII      OSDLANGI+2
 668      =1  #define OSDLANGIV     OSDLANGI+3
 669      =1  
 670      =1  #define TOHIGHMENU      0xf1
 671      =1  #define MOVECURSOR2FIRST  0xf2
 672      =1  #define RESET_ALL     0xf3
 673      =1  #define EXITMENU      0xf4
 674      =1  #define DVRParamApply   0xf5
 675      =1  #define DATETIMEApply   0xf6
 676      =1  
 677      =1  #define CHOICE1_VAL     0xfc
 678      =1  #define CHOICE_VAL      0xfd
 679      =1  #define BAR_VAL       0xfe
 680      =1  #define NUM_VAL       0xff
 681      =1  
 682      =1  #define CAMNumberChoice     0xa3 
 683      =1  #define PelcoChoice         0xa4
 684      =1  #define Baud_rateChoice   0xa5
 685      =1  
 686      =1  
 687      =1  #endif  // __OSDMENU__
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 47  

 688      =1  
  13          #include "audio.h"
   1      =1  
   2      =1  #define MAX_SOUND_VOLUME 50
   3      =1  extern  BYTE  AudioVol;
   4      =1  extern  BYTE  PCAudioVol;
   5      =1  
   6      =1  //BYTE ResetMSP(void);
   7      =1  //void SetMSPSCARTPrescale(void);
   8      =1  //void SetMSPSourceSel(void);
   9      =1  //void SetMSPVol(void);
  10      =1  
  11      =1  //BYTE AudioAutoStdDetection(void);
  12      =1  //BYTE SteroMonoDetection(void);
  13      =1  
  14      =1  //BYTE TunerAudio(void);
  15      =1  //void ExtAudio(void);
  16      =1  //id PCAudio(void);
  17      =1  //id MuteOn(void);
  18      =1  //BYTE GetAudioVol(void);
  19      =1  BYTE ChangeVol(char);
  20      =1  //BYTE GetAudioBalance(void);
  21      =1  //BYTE ChangeBalance(char);
  22      =1  //BYTE GetAudioBass(void);
  23      =1  //BYTE ChangeBass(char);
  24      =1  //BYTE GetAudioTreble(void);
  25      =1  //BYTE ChangeTreble(char);
  26      =1  //BYTE GetAudioEffect(void);
  27      =1  //BYTE ChangeAudioEffect(char amount);
  28      =1  //void ToggleAudioMute(void);
  29      =1  //void CheckAndClearMuteOn(void);
  30      =1  
  31      =1  //BYTE IsAudioMuteOn(void);
  32      =1  //void SetAudioMute(BYTE on );
  33      =1  //void ChangeMTS(BYTE type);
  34      =1  //void AudioOff(void);
  35      =1  void AudioMute(bit mute);
  36      =1  extern void    Wait_ms(WORD Tms);
  37      =1  
  38      =1  //#define AudioOn()     SetMSPVol()
  39      =1  //void ResetAudioValue();
  14          //-----------------------------------------------------------------------------
  15          
  16          //extern BYTE GaugeVStart;
  17          
  18          extern BYTE  InputSelection;
  19          //extern      BYTE  TVChannel, DummyChannel;
  20          //extern      BYTE  TVInputSel;
  21          
  22          //=============================================================================
  23          WORD GetFWRevEE()
  24          {
  25   1        WORD  rev;
  26   1      
  27   1        if( ReadEEP(0) != 'T' ) return 0;
  28   1        if( ReadEEP(1) != 'W' ) return 0;
  29   1        if( ReadEEP(2) != '8' ) return 0;
  30   1        if( ReadEEP(3) != '8' ) return 0;
  31   1      
  32   1        rev = ReadEEP(EEP_FWREV_MAJOR) << 8;
  33   1        rev |= ReadEEP(EEP_FWREV_MINOR);
  34   1      
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 48  

  35   1        return rev;
  36   1      }
  37          
  38          void SaveFWRevEE(WORD rev)
  39          {
  40   1        WriteEEP(0, 'T');
  41   1        WriteEEP(1, 'W');
  42   1        WriteEEP(2, '8');
  43   1        WriteEEP(3, '8');
  44   1      
  45   1        WriteEEP(EEP_FWREV_MAJOR, (BYTE)(rev>>8) );
  46   1        WriteEEP(EEP_FWREV_MINOR, (BYTE)rev );
  47   1      }
  48          
  49          BYTE GetDebugLevelEE(void)
  50          {
  51   1        return ReadEEP(EEP_DEBUGLEVEL);
  52   1      }
  53          
  54          void SaveDebugLevelEE(BYTE dl)
  55          {
  56   1        WriteEEP(EEP_DEBUGLEVEL, dl);
  57   1        //delay(1);     
  58   1      }
  59          
  60          #ifdef WIDE_SCREEN
              BYTE GetWideModeEE(void)
              {
                return ReadEEP(EEP_WIDEMODE);
              }
              
              void SaveWideModeEE(BYTE dl)
              {
                WriteEEP(EEP_WIDEMODE, dl);
                //delay(1);     
              }
              #endif
  72          
  73          BYTE GetPossibleAutoDetectStdEE(void)
  74          {
  75   1        BYTE val;
  76   1      
  77   1        val = GetAutoRecogntionEE();
  78   1      
  79   1        #ifdef DEBUG_EEP
                dPrintf("\r\nGetPossibleAutoDetectStdEE:0x%02x", (WORD)val);
                #endif
  82   1      
  83   1        return val;
  84   1      }
  85          
  86          void SetPossibleAutoDetectStdEE()
  87          {
  88   1        BYTE  i, val=0;
  89   1        extern  CODE struct struct_IdName struct_VInputStd[];
  90   1      
  91   1        for(i=0; ; i++) {
  92   2          switch(struct_VInputStd[i].Id) {
  93   3          case 0:       { // end of list
  94   4                    SaveAutoRecogntionEE(val);
  95   4      
  96   4                    #ifdef DEBUG_EEP
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 49  

                            dPrintf("\r\nSetPossibleAutoDetectStdEE:0x%02x", (WORD)val);
                            #endif
  99   4                    return;   
 100   4                    }
 101   3          case NTSC:      val |= 0x01;  break;
 102   3          case PAL:     val |= 0x02;  break;
 103   3          case SECAM:     val |= 0x04;  break;
 104   3          case NTSC4:     val |= 0x08;  break;
 105   3          case PALM:      val |= 0x10;  break;
 106   3          case PALN:      val |= 0x20;  break;
 107   3          case PAL60:     val |= 0x40;  break;
 108   3          default:      break;
 109   3          }
 110   2        }
 111   1      }
 112          
 113          //=============================================================================
 114          //
 115          //=============================================================================
 116          #ifdef SUPPORT_OSDPOSITIONMOVE
 117          BYTE GetOSDPositionModeEE(void)
 118          {
 119   1        BYTE val;
 120   1      
 121   1        val = ReadEEP(EEP_OSDPOSITIONMODE);
 122   1      
 123   1        return val;
 124   1      }
 125          
 126          void SaveOSDPositionModeEE(BYTE ndata)
 127          {
 128   1      
 129   1        WriteEEP(EEP_OSDPOSITIONMODE, ndata);
 130   1      }
 131          
 132          #endif // SUPPORT_OSDPOSITIONMOVE
 133          
 134          
 135          #define TOT_VIDEO 6
 136          BYTE GetVideoDatafromEE(BYTE offset)
 137          {
 138   1        BYTE val;
 139   1      
 140   1        #ifdef TW8816
 141   1        val = ReadEEP(EEP_CONTRAST+/*(InputSelection-1)*/0*TOT_VIDEO + offset);
 142   1        #else
                val = ReadEEP(EEP_CONTRAST+(InputSelection-1)*TOT_VIDEO + offset);
                #endif
 145   1        return val;
 146   1      }
 147          
 148          void SaveVideoDatatoEE(BYTE offset, BYTE ndata)
 149          {
 150   1        BYTE tot;
 151   1      
 152   1        #ifdef TW8816
 153   1        tot=EEP_CONTRAST+ /*(InputSelection-1)*/0*TOT_VIDEO+offset;
 154   1        #else
                tot=EEP_CONTRAST+ (InputSelection-1)*TOT_VIDEO+offset;
                #endif
 157   1        WriteEEP(tot, ndata);
 158   1      
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 50  

 159   1      }
 160          void SaveInputSelectionEE(BYTE val)
 161          {
 162   1        WriteEEP(EEP_INPUTSELECTION, val);
 163   1      }
 164          
 165          /*
 166          #ifndef TW8803
 167          
 168          BYTE GetOSDDurationEE(void)
 169          {
 170            BYTE val;
 171          
 172            val = ReadEEP(0x30);
 173            
 174            #ifdef DEBUG_EEP
 175            dPrintf("\r\nGetOSDUuration:%02x", (WORD)val);
 176            #endif
 177          
 178            return val;
 179          }
 180          
 181          void SaveOSDDurationEE(BYTE val)
 182          {
 183            WriteEEP(0x30, val);
 184          }
 185          */
 186          BYTE GetOSDLangEE(void)
 187          {
 188   1        BYTE val;
 189   1      
 190   1        val = ReadEEP(EEP_OSDLANG);
 191   1        
 192   1        #ifdef DEBUG_EEP
                dPrintf("\r\nGetOSDLang:%02x", (WORD)val);
                #endif
 195   1      
 196   1        return val;
 197   1      }
 198          
 199          void SaveOSDLangEE(BYTE val)
 200          {
 201   1        WriteEEP(EEP_OSDLANG, val);
 202   1      }
 203          
 204          /*ljy100303
 205          BYTE GetOSDZoomEE(void)
 206          {
 207            BYTE val;
 208          
 209            val = ReadEEP(OSDZOOM);
 210          
 211            #ifdef DEBUG_EEP
 212            dPrintf("\r\nGetOSDZoom:%02x", (WORD)val);
 213            #endif
 214          
 215            return val;
 216          }
 217          
 218          void SaveOSDZoomEE(BYTE val)
 219          {
 220            WriteEEP(OSDZOOM, val);
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 51  

 221          }
 222          */
 223          
 224          
 225          //=========  Audio =================================================
 226          BYTE GetAudioVolEE(void)
 227          {
 228   1        return ReadEEP( EEP_AUDIOPVOL );
 229   1      }
 230          
 231          void SetAudioVolEE( BYTE vol )
 232          {
 233   1        WriteEEP( EEP_AUDIOPVOL, vol );
 234   1      }
 235          
 236          BYTE GetPCAudioVolEE(void)
 237          {
 238   1        return ReadEEP( EEP_PCAUDIOPVOL );
 239   1      }
 240          void SetPCAudioVolEE( BYTE vol )
 241          {
 242   1        WriteEEP( EEP_PCAUDIOPVOL, vol );
 243   1      }
 244          #if 0
              BYTE GetAudioBalanceEE(void)
              {
                return ReadEEP( 0x39 );
              }
              
              void SetAudioBalanceEE( BYTE vol )
              {
                WriteEEP( 0x39, vol );
              }
              
              BYTE GetAudioBassEE(void)
              {
                return ReadEEP( 0x3a );
              }
              
              void SetAudioBassEE( BYTE vol )
              {
                WriteEEP( 0x3a, vol );
              }
              
              BYTE GetAudioTrebleEE(void)
              {
                return ReadEEP( 0x3b );
              }
              
              void SetAudioTrebleEE( BYTE vol )
              {
                WriteEEP( 0x3b, vol );
              }
              #endif
 275          /*
 276          BYTE GetAudioEffectEE(void)
 277          {
 278            return ReadEEP( 0x3c );
 279          }
 280          
 281          void SetAudioEffectEE( BYTE vol )
 282          {
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 52  

 283            WriteEEP( 0x3c, vol );
 284          }
 285          */
 286          
 287          
 288          //===================================================================
 289          /*#include "panel.h"
 290          void SavePanelInfoEE(void)
 291          {
 292            WriteEEP( PANELINFO+0 , (BYTE)PanelConfig.x_res );
 293            WriteEEP( PANELINFO+1 , (BYTE)(PanelConfig.x_res >> 8) );
 294          
 295            WriteEEP( PANELINFO+2 , (BYTE)PanelConfig.y_res );
 296            WriteEEP( PANELINFO+3 , (BYTE)(PanelConfig.y_res >> 8) );
 297          
 298            WriteEEP( PANELINFO+4 , PanelConfig.h_sync_min_pulse_width );
 299          
 300            WriteEEP( PANELINFO+5 , PanelConfig.v_sync_min_pulse_width );
 301          
 302            WriteEEP( PANELINFO+6 , (BYTE)PanelConfig.h_min_back_porch );
 303            WriteEEP( PANELINFO+7 , (BYTE)(PanelConfig.h_min_back_porch >> 8 ) );
 304          
 305            WriteEEP( PANELINFO+8 , PanelConfig.h_sync_polarity );
 306          
 307            WriteEEP( PANELINFO+9 , PanelConfig.v_sync_polarity );
 308          
 309            WriteEEP( PANELINFO+0x0a , (BYTE)PanelConfig.dot_clock );
 310            WriteEEP( PANELINFO+0x0b , (BYTE)(PanelConfig.dot_clock >> 8 ) );
 311          
 312            WriteEEP( PANELINFO+0x0c , (BYTE)PanelConfig.max_clock );
 313            WriteEEP( PANELINFO+0x0d , (BYTE)(PanelConfig.max_clock >> 8 ) );
 314          
 315            WriteEEP( PANELINFO+0x0e , PanelConfig.pixs_per_clock );
 316          
 317            WriteEEP( PANELINFO+0x0f , PanelConfig.DE_only );
 318          }
 319          
 320          
 321          #if (defined SERIAL) || (defined SUPPORT_PATTERN) || (defined WIDE_SCREEN)
 322          WORD GetPanelXRes(void)
 323          {
 324            WORD res;
 325          
 326            res = ReadEEP( PANELINFO+1 );
 327            res = (res <<8 ) | ReadEEP( PANELINFO+0 );
 328            return res;
 329          }
 330          
 331          WORD GetPanelYRes(void)
 332          {
 333            WORD res;
 334          
 335            res = ReadEEP( PANELINFO+3 );
 336            res = (res <<8 ) | ReadEEP( PANELINFO+2 );
 337            return res;
 338          }
 339          #endif//  (defined SUPPORT_PATTERN) || (defined WIDE_SCREEN)
 340          */
 341          
 342          /****
 343          #if (defined SERIAL) || (defined WIDE_SCREEN)
 344          BYTE GetPanelHsyncMinPulseWidth(void)
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 53  

 345          {
 346            return ReadEEP( PANELINFO+4 );
 347          }
 348          
 349          BYTE GetPanelVsyncMinPulseWidth(void)
 350          {
 351            return ReadEEP( PANELINFO+5 );
 352          }
 353          
 354          WORD GetPanelHMinBackPorch(void)
 355          {
 356            WORD res;
 357          
 358            res = ReadEEP( PANELINFO+7 );
 359            res = (res <<8 ) | ReadEEP( PANELINFO+6 );
 360            return res;
 361          }
 362          
 363          BYTE GetPanelHsyncPolarity(void)
 364          {
 365            return ReadEEP( PANELINFO+8 );
 366          }
 367          
 368          BYTE GetPanelVsyncPolarity(void)
 369          {
 370            return ReadEEP( PANELINFO+9 );
 371          }
 372          
 373          WORD GetPanelDotClock(void)
 374          {
 375            WORD res;
 376          
 377            res = ReadEEP( PANELINFO+0x0b );
 378            res = (res <<8 ) | ReadEEP( PANELINFO+0x0a );
 379            return res;
 380          }
 381          #endif // WIDE_SCREEN
 382          
 383          WORD GetPanelMaxClock(void)
 384          {
 385            WORD res;
 386          
 387            res = ReadEEP( PANELINFO+0x0d );
 388            res = (res <<8 ) | ReadEEP( PANELINFO+0x0c );
 389            return res;
 390          }
 391          
 392          BYTE GetPanelPixsPerClock(void)
 393          {
 394            return ReadEEP( PANELINFO+0x0e );
 395          }
 396          ***/
 397          
 398          /* Not used yet *************************
 399          BYTE GetPanelDEonly(void)
 400          {
 401            return ReadEEP( PANELINFO+0x0f );
 402          }
 403          */
 404          
 405          //===================================================================
 406          
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 54  

 407          void ClearBasicEE(void)
 408          {
 409   1        WriteEEP(EEP_PRIORITY,0x00);  //PRIORITY.........OFF  Andy-980602
 410   1        Priority=0;
 411   1      
 412   1        SaveVInputStdDetectModeEE(0); // AUTO
 413   1        WriteEEP(EEP_CCD, 0); // CC = OFF
 414   1      
 415   1      #ifdef HTRV  //Pinchi 20140902 add for AWT ML072Q
                  WriteEEP(EEP_Gauge_VStart,0x0C);                            //WILLIAM-V1.43-970410
                  GaugeVStart= ReadEEP(EEP_Gauge_VStart);                 //WILLIAM-V1.43-970410
              #endif
 419   1      
 420   1        ResetOSDValue();  //Pinchi 20150212 enable
 421   1        //SavePanelInfoEE();
 422   1        //ResetAudioValue();
 423   1      
 424   1        ResetVideoValue();
 425   1      
 426   1        #ifdef WIDE_SCREEN
                Set4WideScreen(WIDESCREEN_WIDE);
                #endif
 429   1      }
 430          
 431          
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 55  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION GetFWRevEE (BEGIN)
                                           ; SOURCE LINE # 23
                                           ; SOURCE LINE # 24
                                           ; SOURCE LINE # 27
0000 E4                CLR     A
0001 FF                MOV     R7,A
0002 FE                MOV     R6,A
0003 120000      E     LCALL   _ReadEEP
0006 EF                MOV     A,R7
0007 6454              XRL     A,#054H
0009 6002              JZ      ?C0001
000B 8028              SJMP    ?C0038
000D         ?C0001:
                                           ; SOURCE LINE # 28
000D 7F01              MOV     R7,#01H
000F 7E00              MOV     R6,#00H
0011 120000      E     LCALL   _ReadEEP
0014 EF                MOV     A,R7
0015 6457              XRL     A,#057H
0017 6002              JZ      ?C0003
0019         ?C0036:
0019 801A              SJMP    ?C0038
001B         ?C0003:
                                           ; SOURCE LINE # 29
001B 7F02              MOV     R7,#02H
001D 7E00              MOV     R6,#00H
001F 120000      E     LCALL   _ReadEEP
0022 EF                MOV     A,R7
0023 6438              XRL     A,#038H
0025 6002              JZ      ?C0004
0027         ?C0037:
0027 800C              SJMP    ?C0038
0029         ?C0004:
                                           ; SOURCE LINE # 30
0029 7F03              MOV     R7,#03H
002B 7E00              MOV     R6,#00H
002D 120000      E     LCALL   _ReadEEP
0030 EF                MOV     A,R7
0031 6438              XRL     A,#038H
0033 6004              JZ      ?C0005
0035         ?C0038:
0035 E4                CLR     A
0036 FE                MOV     R6,A
0037 FF                MOV     R7,A
0038 22                RET     
0039         ?C0005:
                                           ; SOURCE LINE # 32
0039 7F04              MOV     R7,#04H
003B 7E00              MOV     R6,#00H
003D 120000      E     LCALL   _ReadEEP
0040 EF                MOV     A,R7
0041 900000      R     MOV     DPTR,#rev
0044 F0                MOVX    @DPTR,A
0045 A3                INC     DPTR
0046 E4                CLR     A
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 33
0048 7F05              MOV     R7,#05H
004A FE                MOV     R6,A
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 56  

004B 120000      E     LCALL   _ReadEEP
004E 900000      R     MOV     DPTR,#rev
0051 E0                MOVX    A,@DPTR
0052 FE                MOV     R6,A
0053 A3                INC     DPTR
0054 E0                MOVX    A,@DPTR
0055 4F                ORL     A,R7
0056 FF                MOV     R7,A
0057 900000      R     MOV     DPTR,#rev
005A EE                MOV     A,R6
005B F0                MOVX    @DPTR,A
005C FE                MOV     R6,A
005D A3                INC     DPTR
005E EF                MOV     A,R7
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 35
                                           ; SOURCE LINE # 36
0060         ?C0002:
0060 22                RET     
             ; FUNCTION GetFWRevEE (END)

             ; FUNCTION _SaveFWRevEE (BEGIN)
                                           ; SOURCE LINE # 38
0000 900000      R     MOV     DPTR,#rev
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 39
                                           ; SOURCE LINE # 40
0008 7D54              MOV     R5,#054H
000A E4                CLR     A
000B FF                MOV     R7,A
000C FE                MOV     R6,A
000D 120000      E     LCALL   _WriteEEP
                                           ; SOURCE LINE # 41
0010 7D57              MOV     R5,#057H
0012 7F01              MOV     R7,#01H
0014 7E00              MOV     R6,#00H
0016 120000      E     LCALL   _WriteEEP
                                           ; SOURCE LINE # 42
0019 7D38              MOV     R5,#038H
001B 7F02              MOV     R7,#02H
001D 7E00              MOV     R6,#00H
001F 120000      E     LCALL   _WriteEEP
                                           ; SOURCE LINE # 43
0022 7D38              MOV     R5,#038H
0024 7F03              MOV     R7,#03H
0026 7E00              MOV     R6,#00H
0028 120000      E     LCALL   _WriteEEP
                                           ; SOURCE LINE # 45
002B 900000      R     MOV     DPTR,#rev
002E E0                MOVX    A,@DPTR
002F FD                MOV     R5,A
0030 7F04              MOV     R7,#04H
0032 7E00              MOV     R6,#00H
0034 120000      E     LCALL   _WriteEEP
                                           ; SOURCE LINE # 46
0037 900000      R     MOV     DPTR,#rev
003A A3                INC     DPTR
003B E0                MOVX    A,@DPTR
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 57  

003C FD                MOV     R5,A
003D 7F05              MOV     R7,#05H
003F 7E00              MOV     R6,#00H
0041 020000      E     LJMP    _WriteEEP
             ; FUNCTION _SaveFWRevEE (END)

             ; FUNCTION GetDebugLevelEE (BEGIN)
                                           ; SOURCE LINE # 49
                                           ; SOURCE LINE # 50
                                           ; SOURCE LINE # 51
0000 7F06              MOV     R7,#06H
0002 7E00              MOV     R6,#00H
0004 020000      E     LJMP    _ReadEEP
             ; FUNCTION GetDebugLevelEE (END)

             ; FUNCTION _SaveDebugLevelEE (BEGIN)
                                           ; SOURCE LINE # 54
;---- Variable 'dl' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 55
                                           ; SOURCE LINE # 56
0000 AD07              MOV     R5,AR7
0002 7F06              MOV     R7,#06H
0004 7E00              MOV     R6,#00H
0006 020000      E     LJMP    _WriteEEP
             ; FUNCTION _SaveDebugLevelEE (END)

             ; FUNCTION GetPossibleAutoDetectStdEE (BEGIN)
                                           ; SOURCE LINE # 73
                                           ; SOURCE LINE # 74
                                           ; SOURCE LINE # 77
0000 7F0A              MOV     R7,#0AH
0002 7E00              MOV     R6,#00H
0004 020000      E     LJMP    _ReadEEP
;---- Variable 'val' assigned to Register 'R7' ----
             ; FUNCTION GetPossibleAutoDetectStdEE (END)

             ; FUNCTION SetPossibleAutoDetectStdEE (BEGIN)
                                           ; SOURCE LINE # 86
                                           ; SOURCE LINE # 87
                                           ; SOURCE LINE # 88
0000 E4                CLR     A
0001 900000      R     MOV     DPTR,#val
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 91
0005 900000      R     MOV     DPTR,#i
0008 F0                MOVX    @DPTR,A
0009         ?C0010:
                                           ; SOURCE LINE # 92
0009 900000      R     MOV     DPTR,#i
000C E0                MOVX    A,@DPTR
000D 75F011            MOV     B,#011H
0010 900000      E     MOV     DPTR,#struct_VInputStd
0013 120000      E     LCALL   ?C?OFFXADD
0016 E4                CLR     A
0017 93                MOVC    A,@A+DPTR
0018 120000      E     LCALL   ?C?CCASE
001B 0000        R     DW      ?C0014
001D 00                DB      00H
001E 0000        R     DW      ?C0016
0020 01                DB      01H
0021 0000        R     DW      ?C0017
0023 02                DB      02H
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 58  

0024 0000        R     DW      ?C0018
0026 03                DB      03H
0027 0000        R     DW      ?C0019
0029 04                DB      04H
002A 0000        R     DW      ?C0020
002C 05                DB      05H
002D 0000        R     DW      ?C0021
002F 06                DB      06H
0030 0000        R     DW      ?C0022
0032 07                DB      07H
0033 0000              DW      00H
0035 0000        R     DW      ?C0012
                                           ; SOURCE LINE # 93
0037         ?C0014:
                                           ; SOURCE LINE # 94
0037 900000      R     MOV     DPTR,#val
003A E0                MOVX    A,@DPTR
003B FD                MOV     R5,A
003C 7F0A              MOV     R7,#0AH
003E 7E00              MOV     R6,#00H
0040 020000      E     LJMP    _WriteEEP
                                           ; SOURCE LINE # 100
                                           ; SOURCE LINE # 101
0043         ?C0016:
0043 900000      R     MOV     DPTR,#val
0046 E0                MOVX    A,@DPTR
0047 4401              ORL     A,#01H
0049 F0                MOVX    @DPTR,A
004A 8034              SJMP    ?C0012
                                           ; SOURCE LINE # 102
004C         ?C0017:
004C 900000      R     MOV     DPTR,#val
004F E0                MOVX    A,@DPTR
0050 4402              ORL     A,#02H
0052 F0                MOVX    @DPTR,A
0053 802B              SJMP    ?C0012
                                           ; SOURCE LINE # 103
0055         ?C0018:
0055 900000      R     MOV     DPTR,#val
0058 E0                MOVX    A,@DPTR
0059 4404              ORL     A,#04H
005B F0                MOVX    @DPTR,A
005C 8022              SJMP    ?C0012
                                           ; SOURCE LINE # 104
005E         ?C0019:
005E 900000      R     MOV     DPTR,#val
0061 E0                MOVX    A,@DPTR
0062 4408              ORL     A,#08H
0064 F0                MOVX    @DPTR,A
0065 8019              SJMP    ?C0012
                                           ; SOURCE LINE # 105
0067         ?C0020:
0067 900000      R     MOV     DPTR,#val
006A E0                MOVX    A,@DPTR
006B 4410              ORL     A,#010H
006D F0                MOVX    @DPTR,A
006E 8010              SJMP    ?C0012
                                           ; SOURCE LINE # 106
0070         ?C0021:
0070 900000      R     MOV     DPTR,#val
0073 E0                MOVX    A,@DPTR
0074 4420              ORL     A,#020H
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 59  

0076 F0                MOVX    @DPTR,A
0077 8007              SJMP    ?C0012
                                           ; SOURCE LINE # 107
0079         ?C0022:
0079 900000      R     MOV     DPTR,#val
007C E0                MOVX    A,@DPTR
007D 4440              ORL     A,#040H
007F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 108
                                           ; SOURCE LINE # 109
                                           ; SOURCE LINE # 110
0080         ?C0012:
0080 900000      R     MOV     DPTR,#i
0083 E0                MOVX    A,@DPTR
0084 04                INC     A
0085 F0                MOVX    @DPTR,A
0086 8081              SJMP    ?C0010
             ; FUNCTION SetPossibleAutoDetectStdEE (END)

             ; FUNCTION GetOSDPositionModeEE (BEGIN)
                                           ; SOURCE LINE # 117
                                           ; SOURCE LINE # 118
                                           ; SOURCE LINE # 121
0000 7F0D              MOV     R7,#0DH
0002 7E00              MOV     R6,#00H
0004 020000      E     LJMP    _ReadEEP
;---- Variable 'val' assigned to Register 'R7' ----
             ; FUNCTION GetOSDPositionModeEE (END)

             ; FUNCTION _SaveOSDPositionModeEE (BEGIN)
                                           ; SOURCE LINE # 126
;---- Variable 'ndata' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 127
                                           ; SOURCE LINE # 129
0000 AD07              MOV     R5,AR7
0002 7F0D              MOV     R7,#0DH
0004 7E00              MOV     R6,#00H
0006 020000      E     LJMP    _WriteEEP
             ; FUNCTION _SaveOSDPositionModeEE (END)

             ; FUNCTION _GetVideoDatafromEE (BEGIN)
                                           ; SOURCE LINE # 136
;---- Variable 'offset' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 137
                                           ; SOURCE LINE # 141
0000 EF                MOV     A,R7
0001 2412              ADD     A,#012H
0003 FF                MOV     R7,A
0004 E4                CLR     A
0005 33                RLC     A
0006 FE                MOV     R6,A
0007 020000      E     LJMP    _ReadEEP
;---- Variable 'val' assigned to Register 'R7' ----
             ; FUNCTION _GetVideoDatafromEE (END)

             ; FUNCTION _SaveVideoDatatoEE (BEGIN)
                                           ; SOURCE LINE # 148
;---- Variable 'ndata' assigned to Register 'R5' ----
;---- Variable 'offset' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 149
                                           ; SOURCE LINE # 153
0000 EF                MOV     A,R7
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 60  

0001 2412              ADD     A,#012H
0003 FF                MOV     R7,A
;---- Variable 'tot' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 157
0004 7E00              MOV     R6,#00H
0006 020000      E     LJMP    _WriteEEP
             ; FUNCTION _SaveVideoDatatoEE (END)

             ; FUNCTION _SaveInputSelectionEE (BEGIN)
                                           ; SOURCE LINE # 160
;---- Variable 'val' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 161
                                           ; SOURCE LINE # 162
0000 AD07              MOV     R5,AR7
0002 7F0F              MOV     R7,#0FH
0004 7E00              MOV     R6,#00H
0006 020000      E     LJMP    _WriteEEP
             ; FUNCTION _SaveInputSelectionEE (END)

             ; FUNCTION GetOSDLangEE (BEGIN)
                                           ; SOURCE LINE # 186
                                           ; SOURCE LINE # 187
                                           ; SOURCE LINE # 190
0000 7F0C              MOV     R7,#0CH
0002 7E00              MOV     R6,#00H
0004 020000      E     LJMP    _ReadEEP
;---- Variable 'val' assigned to Register 'R7' ----
             ; FUNCTION GetOSDLangEE (END)

             ; FUNCTION _SaveOSDLangEE (BEGIN)
                                           ; SOURCE LINE # 199
;---- Variable 'val' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 200
                                           ; SOURCE LINE # 201
0000 AD07              MOV     R5,AR7
0002 7F0C              MOV     R7,#0CH
0004 7E00              MOV     R6,#00H
0006 020000      E     LJMP    _WriteEEP
             ; FUNCTION _SaveOSDLangEE (END)

             ; FUNCTION GetAudioVolEE (BEGIN)
                                           ; SOURCE LINE # 226
                                           ; SOURCE LINE # 227
                                           ; SOURCE LINE # 228
0000 7F38              MOV     R7,#038H
0002 7E00              MOV     R6,#00H
0004 020000      E     LJMP    _ReadEEP
             ; FUNCTION GetAudioVolEE (END)

             ; FUNCTION _SetAudioVolEE (BEGIN)
                                           ; SOURCE LINE # 231
;---- Variable 'vol' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 232
                                           ; SOURCE LINE # 233
0000 AD07              MOV     R5,AR7
0002 7F38              MOV     R7,#038H
0004 7E00              MOV     R6,#00H
0006 020000      E     LJMP    _WriteEEP
             ; FUNCTION _SetAudioVolEE (END)

             ; FUNCTION GetPCAudioVolEE (BEGIN)
                                           ; SOURCE LINE # 236
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 61  

                                           ; SOURCE LINE # 237
                                           ; SOURCE LINE # 238
0000 7F37              MOV     R7,#037H
0002 7E00              MOV     R6,#00H
0004 020000      E     LJMP    _ReadEEP
             ; FUNCTION GetPCAudioVolEE (END)

             ; FUNCTION _SetPCAudioVolEE (BEGIN)
                                           ; SOURCE LINE # 240
;---- Variable 'vol' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 241
                                           ; SOURCE LINE # 242
0000 AD07              MOV     R5,AR7
0002 7F37              MOV     R7,#037H
0004 7E00              MOV     R6,#00H
0006 020000      E     LJMP    _WriteEEP
             ; FUNCTION _SetPCAudioVolEE (END)

             ; FUNCTION ClearBasicEE (BEGIN)
                                           ; SOURCE LINE # 407
                                           ; SOURCE LINE # 408
                                           ; SOURCE LINE # 409
0000 E4                CLR     A
0001 FD                MOV     R5,A
0002 7FAD              MOV     R7,#0ADH
0004 FE                MOV     R6,A
0005 120000      E     LCALL   _WriteEEP
                                           ; SOURCE LINE # 410
0008 E4                CLR     A
0009 900000      E     MOV     DPTR,#Priority
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 412
000D FD                MOV     R5,A
000E 7F08              MOV     R7,#08H
0010 FE                MOV     R6,A
0011 120000      E     LCALL   _WriteEEP
                                           ; SOURCE LINE # 413
0014 E4                CLR     A
0015 FD                MOV     R5,A
0016 7F0E              MOV     R7,#0EH
0018 FE                MOV     R6,A
0019 120000      E     LCALL   _WriteEEP
                                           ; SOURCE LINE # 420
001C 120000      E     LCALL   ResetOSDValue
                                           ; SOURCE LINE # 424
001F 020000      E     LJMP    ResetVideoValue
             ; FUNCTION ClearBasicEE (END)

C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 62  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


ResetVideoValue. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
DWORD. . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
_SaveDebugLevelEE. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  dl . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
CAM_R. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
TriggerModeType. . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
CAM_BAR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ABR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_SaveOSDLangEE . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  val. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
CAM_CAR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ACR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_CBR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_BCR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
NumberStringType . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  11
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  width. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  BackColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  Radix. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  NumColor . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  MaxLen . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  PrePostCharLen . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  PrePostChar. . . . . . . . . . . . .  MEMBER   -----  ARRAY    0008H  3
GetDebugLevelEE. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
FontData . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  27
  font . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  27
RIGHT_TRIG . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
GetOSDLangEE . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  val. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
LAST_TRIG_NON. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
GetPossibleAutoDetectStdEE . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  val. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
NORMALL_MODE . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
AVMode . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
struct_VInputStd . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
SourceModeType . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
CAM_NUM. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
SetPossibleAutoDetectStdEE . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  val. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
CAMC_TRIG. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
LAST_TRIG_RIGHT. . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_RAB_H. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
OSDStrInfo . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  8
  cnt. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  addr . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  attr . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  str. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0004H  4
CAM_BA . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_AB . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
BYTE . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
TimeType . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  7
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  width. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  BackColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 63  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  Format . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  TimeColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  CursorColor. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
CAM_CA . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_AC . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
REVERSE_TRIG . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_BC . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_CB . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
SourceModeTypeEnum . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
struct_IdName. . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  17
  Id . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  Name . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0001H  16
EnumType . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  17
  Sz . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  ByLang . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  Str. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0002H  15
MenuType . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  4
  width. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  height . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  TitleColor . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  CursorColor. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
CAM_RAB_T. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_RAC_T. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
WORD . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
CAM_RBC_T. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
LAST_TRIG_CAMC . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
LEFT_TRIG. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_AR . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_BR . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_RB . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
PARK_TRIG. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_CR . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Register . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
LAST_TRIG_REVERSE. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
GetAudioVolEE. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
No_TRIG. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
NumType. . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  5
  PrePostCharLen . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  PrePostChar. . . . . . . . . . . . .  MEMBER   -----  ARRAY    0001H  4
_ReadEEP . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
RegisterInfo . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  Min. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0000H  2
  Max. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0002H  2
  Default. . . . . . . . . . . . . . .  MEMBER   -----  INT      0004H  2
ClearBasicEE . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
LAST_TRIG_LEFT . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_GetVideoDatafromEE. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  offset . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  val. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_SaveInputSelectionEE. . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  val. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
CAM_QUAD . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_SetAudioVolEE . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  vol. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
DefineMenu . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  16
  Icon . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0000H  2
  Desc . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0002H  3
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 64  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  PreFnId. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  PostFnId . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  IconColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  DescColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
  Child. . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0009H  2
  Type . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000BH  1
  ActiveWithCursor . . . . . . . . . .  MEMBER   -----  U_CHAR   000CH  1
  Id . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000DH  1
  TypeData . . . . . . . . . . . . . .  MEMBER   -----  PTR      000EH  2
_SaveOSDPositionModeEE . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ndata. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
Priority . . . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
TRIGGER_NUM. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
GetPCAudioVolEE. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_SaveFWRevEE . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  rev. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
_WriteEEP. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
SEQ. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
LongRegisterInfo . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  Min. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  Max. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  Default. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
ResetOSDValue. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
PictureInfo. . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  4
  Register_Addr. . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  EEPROM_Addr. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  Control_Range. . . . . . . . . . . .  MEMBER   -----  PTR      0002H  2
CAM_RAC_T2 . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ABR_T3 . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_RBC_T2 . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ABR_T4 . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_A. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_B. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_C. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_SetPCAudioVolEE . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  vol. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
VGA_TRIG . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
GetOSDPositionModeEE . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  val. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_SaveVideoDatatoEE . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  offset . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  ndata. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  tot. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
CAM_CAB. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_BAC. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ABC. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
GetFWRevEE . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  rev. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
AWT_LAST_TRIGGER . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    450    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       6
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
C51 COMPILER V9.60.0.0   ETC_EEP                                                           06/22/2022 16:23:01 PAGE 65  

   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
