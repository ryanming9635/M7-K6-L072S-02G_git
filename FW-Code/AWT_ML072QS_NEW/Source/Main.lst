C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Output\Main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Main.c LARGE OPTIMIZE(9,SIZE) BROWSE INCDIR(.\Include\) DEBUG OBJECTEXTE
                    -ND CODE LISTINCLUDE SYMBOLS PRINT(.\Source\Main.lst) TABS(2) OBJECT(.\Output\Main.obj)

line level    source

   1          /*****************************************************************************/
   2          /*                                                                           */
   3          /*                    TW880x Demo Board   Techwell,Inc                       */
   4          /*                                                                           */
   5          /* CPU        : Winbond 78E62BP-40                                           */
   6          /* LANGUAGE   : Tasking C / Keil C                                           */
   7          /* PROGRAMMER : Jooyeon Lee / Harry Han                                      */
   8          /*                                                                           */
   9          /*****************************************************************************/
  10          /* See 'Release.txt' for firmware revision history                           */
  11          
  12          #include "Config.h"
   1      =1  /*****************************************************************************/
   2      =1  /*                           System Configurations                           */
   3      =1  /*              rev 0.10 include auto test             */
   4      =1  // 0.11 change DTV, PC input initial download data correct for Charge Pump
   5      =1  // 0.12 correct phase measurement routine '>>3'
   6      =1  // 0.13 enable function for SPI control... only EXT MCU case
   7      =1  // 0.14 corrected PC measurement......
   8      =1  // 0.0a test function only for CVBS, SVIDEO
   9      =1  // 0.15 corrected DTV scaler setting for panel resolutions
  10      =1  // 0.0b panel for AND 640x480 TICON panel
  11      =1  // 0.16 corrected COMPONENT scaler setting for panel resolutions  11/21/2007
  12      =1  // 0.0c automatic chip test
  13      =1  // 0.17 add monitor function, osd grid for writing grid
  14      =1  // 0.18 add component, dtv pc for analogpanel, 12/06/2007
  15      =1  // 0.19 correct pal input for CES, 12/20/2007
  16      =1  // 0.1a CCFL control, 12/28/2007
  17      =1  // 0.19 Multi Grid for Banking on Internal MCU  01/17/2008
  18      =1  // 0.20 CCFL contol for backlight brightness  01/21/2008
  19      =1  // 0.21 CCFL contol for backlight brightness  01/25/2008
  20      =1  // 0.22 phase setting 02/07/2008
  21      =1  // 0.221 display input correction 04/03/2008
  22      =1  // 0.23 PC, DTV mode, no signal display
  23      =1  // 0.24 PC Auto Color adjustment
  24      =1  // 0.25 revised PC Auto Clock adjustment - find divide number and phase
  25      =1  // 0.26 Digital RGB for TW8826
  26      =1  // 0.27 Correct LVDS control          08/22/2008
  27      =1  // 0.28 Add WSVGA resolution          10/23/2008
  28      =1  // 0.29 Add NEW GRID              11/14/2008
  29      =1  // 0.30 Fix DTV input             12/10/2008
  30      =1  // 0.31 Add 1080i23, 24, 25A, 25B       01/20/2009
  31      =1  // 0.32 TCON setting FIX all mode       01/22/2009
  32      =1  // 0.33 autodetect is auto on/off by dip sw1  02/02/2009
  33      =1  // 0.34 Fix autocolor function and clamp position 02/08/2009
  34      =1  /*****************************************************************************/
  35      =1  #ifndef __CONFIG_H__
  36      =1  #define __CONFIG_H__
  37      =1  
  38      =1  //#define INTERNAL_MCU -- defined by Project Compiler session
  39      =1  #define   HS        
  40      =1  //#define   E_Wintek  
  41      =1  //#define   AWT 
  42      =1  //#define Holtz
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 2   

  43      =1  
  44      =1  //#define QUAD
  45      =1  
  46      =1  #ifdef QUAD
           =1   #define AWT_ML072Q  //Pinchi 20150827 disable for HTRV
           =1 //  #define HTRV  //Pinchi 20140902 disable for AWT ML072Q
           =1 #else
  50      =1    #define AWT_ML072S
  51      =1  #endif
  52      =1  
  53      =1  //--------------------------------------------------
  54      =1  //              Common Feature Define
  55      =1  //--------------------------------------------------
  56      =1  //#define FIRST_RUN_FROM_AC  //Pinchi 20150831 disable for Screen re-setting by Set4WideScreen()  //Pinchi
             - 20141029 add
  57      =1  #define SUPPORT_ML072Q_AUTO_DAY_NIGHT  //Pinchi 20150825 add for function define
  58      =1  #define SUPPORT_TRIGGER_EXIT_MENU  //Pinchi 20150827 add for exit OSD Menu by CAM trigger
  59      =1  #define SUPPORT_AC_ON_NORMAL_SCREEN  //Pinchi 20150901 add to set 4:3 screen when AC on
  60      =1  
  61      =1  #define FIX_DISPLAY_OFF_TRIGGER_ISSUE  //Pinchi 20150908 add to fix [Display] set OFF and trigger release 
             -then trigger again during display info the CAM will change from trigger CH to original CH
  62      =1  #define FIX_EXIT_STANDBY_NO_AUDIO  //Pinchi 20150908 add to fix no audio output when exit Standby mode
  63      =1  #ifdef AWT_ML072Q
           =1 #define FIX_2835_SCREEN_NOISE  //Pinchi 20160929 add to fix the screen noise of TW2835 by change DDR to ma
             -ke clock shift
           =1 #endif
  66      =1  
  67      =1  #define SUPPORT_NEW_TRIGGER_FUNCTION  /////修改新的Trigger方式減少trigger polling 時間 add by ryan@2018012
             -4
  68      =1  
  69      =1  //#define AWT_ML072QS_MSG  //Pinchi 20140925 add
  70      =1  //#define REDUCE_DELAY_TIME  //Pinchi 20141029 add
  71      =1  //#define DISPLAY_TECHWELL_LOGO  //Pinchi 2050903 add to disable the Techwell logo
  72      =1  
  73      =1  //#define SUPPORT_SVIDEO                     //andy Awt 20090914
  74      =1  //#define SUPPORT_COMPONENT     // support component analog to decoder//andy Awt 20090914
  75      =1  //#define SUPPORT_DTV           // support DTV input through component( to ADC ).//andy Awt 20090914
  76      =1  //#define SUPPORT_PC        // support PC function
  77      =1  //#define SUPPORT_DVI       // support DVI input
  78      =1  //#define SUPPORT_SDCARD
  79      =1  
  80      =1  #define SUPPORT_2835_CLK_TUNE_BACK_DOOR  //Pinchi 20160913 add to fine tune TW2835 clock by hot key
  81      =1  //#define SUPPORT_DISPLAY_TEST_VERSION  //Pinchi 20150929 add to display test software version on OSD
  82      =1  
  83      =1  //--------------------------------------------------
  84      =1  //              Model Feature Define
  85      =1  //--------------------------------------------------
  86      =1  #if (defined AWT_ML072Q) || (defined AWT_ML072S)
  87      =1  #define AWT_ML072QS_FW_RULE  //Pinchi 20140902 add
  88      =1  //#define AWT_NEW_SLIM_MODEL  //Pinchi 20150203 add for AWT new slim model
  89      =1  #define AWT_NO_SIGNAL_MSG  //Pinchi 20150319 add for display "NO VIDEO SIGNAL" by AWT request of 20150302
  90      =1  #define AWT_TW2835_DRAW_T_ICON  //Pinchi 20150415 add to draw T icon by TW2835 when CAM C trigger
  91      =1  #define SUPPORT_AC_ON_REDUCE_TIME  //Pinchi 20150903 add to reduce Power time when AC on
  92      =1  
  93      =1  //#define SUPPORT_TRIGGER_RELEASE_DELAY  //Pinchi 20150908 add to support delay time when CAM trigger rele
             -ase
  94      =1  
  95      =1  typedef enum  //Pinchi 20150326 add
  96      =1  {
  97      =1       LAST_TRIG_NON =  0x00,
  98      =1       LAST_TRIG_LEFT =   0x01,
  99      =1       LAST_TRIG_RIGHT =  0x02,
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 3   

 100      =1       LAST_TRIG_REVERSE =0x03,
 101      =1       LAST_TRIG_CAMC =   0x04,
 102      =1  
 103      =1  } AWT_LAST_TRIGGER;
 104      =1  
 105      =1  #endif
 106      =1  
 107      =1  
 108      =1  #ifdef HTRV  //Pinchi 20150825 add
           =1 #define HTRV_ML072Q_FW_RULE  //Pinchi 20150827 add
           =1 #define HTRV_REDUCE_SCREEN_CHANGE  //Pinchi 20150828 add to reduce screen double change
           =1 
           =1 #if 0  //Pinchi 20151209 add to remove 4:3 screen by HTRV request of 20151209
           =1 #define HTRV_SUPPORT_4_3_SCREEN
           =1 #else
           =1 #undef SUPPORT_AC_ON_NORMAL_SCREEN  //Pinchi 20151210 add
           =1 #endif
           =1 
           =1 #endif
 119      =1  
 120      =1  //#define SUPPORT_RS485
 121      =1  //-----------------------------------------------------------------------------
 122      =1  //    Firmware Version
 123      =1  //-----------------------------------------------------------------------------
 124      =1  #ifdef HTRV  //Pinchi 20150907 add
           =1 //#define FWVER     0x200 // Rev 2.00
           =1 //#define FWVER     0x210   // Rev 2.1  //Pinchi 20151209 update version for HTRV request to remove 4:3 scree
             -n
           =1 //#define FWVER     0x220   // Rev 2.2  //Pinchi 20160929 change for V2.2
           =1 #define FWVER     0x230     //Rev 2.3    ryan@20170727 update version by Encoder switches零件 EOL更換
           =1 #else
 130      =1  #define FWVER     0x210   // Rev 0.14
 131      =1  #endif
 132      =1  
 133      =1  //-----------------------------------------------------------------------------
 134      =1  //    Compiler
 135      =1  //-----------------------------------------------------------------------------
 136      =1  #define KEILC           // Keil C 5.0
 137      =1  //-----------------------------------------------------------------------------
 138      =1  //    MPU Clock
 139      =1  //-----------------------------------------------------------------------------
 140      =1  #ifndef INTERNAL_MCU
 141      =1  //#define CLOCK_11M         // 11.0592MHz
 142      =1  #define CLOCK_22M         // 22.1184MHz
 143      =1  #else                 // INTERNAL_MCU
           =1 #define CLOCK_27M         // 27MHz
           =1 #define REG_START_ADDRESS 0xc000    // register start 0xc000, for page0, 0xc100-page1 
           =1 #endif
 147      =1  //-----------------------------------------------------------------------------
 148      =1  //    TW88 Version
 149      =1  //-----------------------------------------------------------------------------
 150      =1  #define TW8816   ///AWT TW8806 change to TW8816 platform //ryan@20170921
 151      =1  //-----------------------------------------------------------------------------
 152      =1  //-----------------------------------------------------------------------------
 153      =1  //    Options for Backlight control
 154      =1  //-----------------------------------------------------------------------------
 155      =1  //#define BACKLIGHT_CCFL
 156      =1  //#define BACKLIGHT_LED
 157      =1  #define BACKLIGHT_PWM
 158      =1  
 159      =1  //-----------------------------------------------------------------------------
 160      =1  //    Panel Resolution
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 4   

 161      =1  //-----------------------------------------------------------------------------
 162      =1  // ---- Select Default Panel
 163      =1  //
 164      =1  //#define UXGA            // 1600 x 1200
 165      =1  //#define SXGA              // 1280 x 1024
 166      =1  //#define XGA  // 1024 x 768
 167      =1  #ifdef XGA
           =1   #define LVDS          
           =1   #define PWIDTH  1024
           =1   #define PHEIGHT 768
           =1 #endif
 172      =1  //#define SVGA            //  800 x 600
 173      =1  //#define VGA             //  640 x 480
 174      =1  #ifdef VGA
           =1   #define PWIDTH  640
           =1   #define PHEIGHT 480
           =1   //#define HITACHI_640_B_160   //--> 640 x 160
           =1   #define AND_640_480
           =1 #endif
 180      =1  //#define WXGA            // 1280 x 768 (15:9) // 1366 x 768 (16:9)
 181      =1  #ifdef WXGA
           =1     //#define WX_SHARP_LQ106K1LA
           =1   #define PWIDTH  1280
           =1   #define PHEIGHT 768
           =1 #endif
 186      =1  //#define WSVGA           // 1024 x 600 *** only video mode
 187      =1  #ifdef WSVGA
           =1   #define PWIDTH  1024
           =1   #define PHEIGHT 600
           =1   #define UNIDEN_1024_600
           =1 #endif
 192      =1  #define WVGA            //  800 x 480
 193      =1  #ifdef WVGA
 194      =1    #define PWIDTH  800
 195      =1    #define PHEIGHT 480//600
 196      =1    // If WVGA, you have to select panel.
 197      =1    //#define AU_10INCH
 198      =1    //#define WVGA_TPO
 199      =1    //#define SAMSUNG_10INCH
 200      =1    //#define SAMSUNG_TICONLESS_10INCH
 201      =1    //#define SHARP_TICONLESS_7INCH
 202      =1    //#define AU_TICONLESS_7INCH
 203      =1    //#define AU_G084SN05V8_8_4INCH 
 204      =1    #define HSD070IDW1_7INCH
 205      =1    //#define INNOLUX_AT080TN03
 206      =1    //#define AU_TICONLESS_7INCH_CCFL
 207      =1    //#define CMO     // CHIMEI panel
 208      =1    //#define AU_TICONLESS_10INCH
 209      =1    //#define HITACHI_T01
 210      =1    //#define HITACHI_TX23D12
 211      =1    //#define HITACHI_TX18D24
 212      =1    //#define HITACHI_TX18D16
 213      =1    //#define TMD_LTA070A320F
 214      =1    //#define TMD_LTA080B
 215      =1  #endif  //WVGA
 216      =1  //#define HVGA            //  480 x 320
 217      =1  //#define QVGA            //  320 x 240 *** only video mode
 218      =1  #ifdef QVGA
           =1   #define PWIDTH  320
           =1   #define PHEIGHT 240
           =1   //#define HITACHI_TX09D73
           =1   //#define AU_DELTARGB
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 5   

           =1   //#define SHARP_LQ050Q5DR01
           =1   //#define SHARP_LQ035
           =1   //#define TMD
           =1 #endif
 227      =1  
 228      =1  //#define WQVGA           //  480 x 234 *** only video mode
 229      =1  #ifdef WQVGA
           =1   #define PWIDTH  480
           =1   #define PHEIGHT 240
           =1   // If WQVGA, you have to select panel 
           =1     #define ANALOG_7INCH
           =1   //#define PWIDTH  400
           =1   //#define PHEIGHT 240
           =1   //#define SHARP_LQ043T3DX02   //  400 x 237
           =1   //#define LG_ANALOG
           =1   //#define TMD_ANALOG        //TMD_LTA05B352A
           =1   //#define T_51945GD       // Optorex Panel
           =1 #endif  // WQVGA
 241      =1  
 242      =1  //if LVDS pannel disable TICONLESS
 243      =1  
 244      =1  //-----------------------------------------------------------------------------
 245      =1  //---- Add Support One more panel with DIPSW#1
 246      =1  //---- Ex. Add Analog AU 7" Panel with Default Panel for evalution
 247      =1  //#define ADD_ANALOGPANEL   // Added Analog panel(AU7") from default set panel(expect WQVGA) with DIP #1 sw
             -itch.(DIP#1=L:ANALOG, H:DEFAULT)
 248      =1                // It can't support WQVGA and ADD_ANALOGPANEL same time!!
 249      =1    //#define ADD_ANALOG_7INCH
 250      =1    //#define ADD_TMD_LTA05B352A
 251      =1                    
 252      =1  //---- Support Wide panel function
 253      =1  #if (defined WXGA) || (defined WSVGA) || (defined WVGA) || (defined WQVGA)
 254      =1  #if 0///ryan@20180115//mask for NTSC sharpness issue
           =1 #define WIDE_SCREEN         // Can support 4 display mode, i.e. Normal, Wide, Full, Zoom
           =1 #endif
 257      =1  #endif                // Tested panasonic WVGA panel.
 258      =1  
 259      =1  //-----------------------------------------------------------------------------
 260      =1  //    Panel Vendor Specific
 261      =1  //-----------------------------------------------------------------------------
 262      =1  
 263      =1  //-----------------------------------------------------------------------------
 264      =1  //    TV Tuner
 265      =1  //-----------------------------------------------------------------------------
 266      =1  #define PHILIPS       0
 267      =1  #define ALPS        1   // ALPS, LG
 268      =1  #define TEMIC       2
 269      =1  #define TVAVA       3
 270      =1  #define LGTUNER       4
 271      =1  #define SAMSUNGMUTITUNER  5
 272      =1  
 273      =1  #define TVTunerDevice   4
 274      =1  //-----------------------------------------------------------------------------
 275      =1  //    IR Remote Controller Type
 276      =1  //-----------------------------------------------------------------------------
 277      =1  //#define REMO_RC5          // RC5 style
 278      =1  #define TECHWELL_REMOCON
 279      =1  //#define REMO_NEC          // NEC style
 280      =1  //#define PHILIPS_REMOCON // New remocon 
 281      =1  
 282      =1  //-----------------------------------------------------------------------------
 283      =1  //    I2C Device Access Address Mapping
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 6   

 284      =1  //-----------------------------------------------------------------------------
 285      =1  
 286      =1  #define EEPROMI2CAddress  0xa0  // EEPROM (24C16)
 287      =1  #define TW88I2CAddress    0x8a  // TW880x
 288      =1  
 289      =1  #define MSPI2CAddress   0x80  // MSP
 290      =1  #define ALC106I2CAddress  0x4A  // MSP
 291      =1  //-----------------------------------------------------------------------------
 292      =1  //    Options for Possible Inputs
 293      =1  //-----------------------------------------------------------------------------
 294      =1  
 295      =1  
 296      =1  //-----------------------------------------------------------------------------
 297      =1  //    Options for Possible Standards
 298      =1  //    Default:NTSC
 299      =1  //-----------------------------------------------------------------------------
 300      =1  #define SUPPORT_PAL     
 301      =1  #define SUPPORT_SECAM
 302      =1  #define SUPPORT_NTSC4   
 303      =1  #define SUPPORT_PALM  
 304      =1  #define SUPPORT_PALN    
 305      =1  #define SUPPORT_PAL60   
 306      =1  
 307      =1  //#define ID_CHECK_BY_FW        // in Video mode, check input system ID by firmware
 308      =1  
 309      =1  //-----------------------------------------------------------------------------
 310      =1  //    Options for Debugging/Release
 311      =1  //-----------------------------------------------------------------------------
 312      =1  //#define SUPPORT_PATTERN       // support LCD test pattern
 313      =1  
 314      =1  #ifndef WQVGA
 315      =1    #ifndef QVGA
 316      =1  #define SUPPORT_OSDPOSITIONMOVE
 317      =1    #endif
 318      =1  #endif
 319      =1  
 320      =1  #define SERIAL              // include serial communication routines
 321      =1  
 322      =1  //#define SUPPORT_DEBUG       // Support to use Read & Write in debug OSD Window by remocon.
 323      =1  
 324      =1  //#define DEBUG           // include debug information
 325      =1  #ifdef DEBUG
           =1   //#define DEBUG_MAIN
           =1   //#define DEBUG_TIME
           =1   //#define DEBUG_KEYREMO
           =1   //#define DEBUG_TW88
           =1   //#define DEBUG_DECODER
           =1   //#define DEBUG_I2C
           =1   //#define DEBUG_EEP
           =1   //#define DEBUG_OSD
           =1   //#define DEBUG_AUDIO
           =1   //#define DEBUG_SETPANEL
           =1   //#define DEBUG_DTV
           =1 //  #define DEBUG_PC
           =1   //#define DEBUG_PC_MEAS
           =1   //#define DEBUG_PC_COLOR
           =1   //#define DEBUG_COMPONENT
           =1   //#define DEBUG_BANK
           =1   //#define DEBUG_PAUSE
           =1   //#define DEBUG_MCU
           =1 #endif
 345      =1  
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 7   

 346      =1  #define AUTOCALC_PC         // in PC mode, Enable Auto Calcuration
 347      =1  //#define SUPPORT_USERCOLORFROMTXT  // Use color setting of text file in Color mode=USER MODE which is as B
             -rightness(Reg10), Contast(Reg11),
 348      =1                    //    Sat_U(Reg13),Sat_V(Reg14),Sharpness(Reg12,Reg78)                  
 349      =1  //#define SUPPORT_GAMMA
 350      =1  
 351      =1  //#define CHIP_MANUAL_TEST      // DIPSW#1
 352      =1  
 353      =1  #ifndef INTERNAL_MCU
 354      =1  //#define NO_INITIALIZE       // After Power switch turn on with DIP SW4 Enable(Low), or pressed MENU button 
             -for internal MCU
 355      =1                                      //     micom works to access only I2C bus by serial command.
 356      =1  #endif
 357      =1  
 358      =1  //#define SUPPORT_KRS_OSDDEMO   // For KRS Company Demo 
 359      =1  //#define SUPPORT_LINE_OSDDEMO
 360      =1  
 361      =1  //-----------------------------------------------------------------------------
 362      =1  //    Special Features
 363      =1  //-----------------------------------------------------------------------------
 364      =1  
 365      =1  #ifndef INTERNAL_MCU
 366      =1  //#define SUPPORT_DELTA_RGB
 367      =1  #endif
 368      =1  #define SUPPORT_SELECTKEY     // choose the keymap of using select key or left,right key.
 369      =1  //-----------------------------------------------------------------------------
 370      =1  
 371      =1  //#define HS_NEWOSDMENU     //Weylis -@121008 for Hor. Style OSD
 372      =1  //#define HS_NEWOSDMENU_2     //Weylis -@121008 for Hor. Style OSD(2 line)
 373      =1  
 374      =1  #endif  //__CONFIG_H__
 375      =1  
  13          
  14          #include "reg.h"
   1      =1  //
   2      =1  //Registers.h : Register declaration
   3      =1  //
   4      =1  
   5      =1  #ifndef __REGISTERS__
   6      =1  #define __REGISTERS__
   7      =1  
   8      =1  #ifdef INTERNAL_MCU
           =1 /*  BYTE Registers  */
           =1 sfr P0    = 0x80;
           =1 sfr P1    = 0x90;
           =1 sfr P2    = 0xA0;
           =1 sfr P3    = 0xB0;
           =1 sfr PSW   = 0xD0;
           =1 sfr ACC   = 0xE0;
           =1 sfr B     = 0xF0;
           =1 sfr SP    = 0x81;
           =1 sfr DPL   = 0x82;
           =1 sfr DPH   = 0x83;
           =1 sfr PCON  = 0x87;
           =1 sfr TCON  = 0x88;
           =1 sfr TMOD  = 0x89;
           =1 sfr TL0   = 0x8A;
           =1 sfr TL1   = 0x8B;
           =1 sfr TH0   = 0x8C;
           =1 sfr TH1   = 0x8D;
           =1 sfr IE    = 0xA8;
           =1 sfr IP    = 0xB8;
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 8   

           =1 sfr SCON  = 0x98;
           =1 sfr SBUF  = 0x99;
           =1 
           =1 //sfr P4    = 0xd8;
           =1 
           =1 /*  8052 Extensions  */
           =1 sfr EXIF  = 0x91;   // external interrupt 2,3,4,5 flags should be cleared by software
           =1 sfr T2CON = 0xC8;
           =1 sfr RCAP2L = 0xCA;
           =1 sfr RCAP2H = 0xCB;
           =1 sfr TL2   = 0xCC;
           =1 sfr TH2   = 0xCD;
           =1 sfr EICON = 0xD8;
           =1 sfr EIE   = 0xE8;
           =1 sfr EIP   = 0xF8;
           =1 
           =1 /*  TW88 Core Extension */
           =1 sfr BANKREG   = 0x9A;
           =1 sfr SPICONTROL  = 0x9B;
           =1 sfr T0HIGH    = 0x9C;
           =1 sfr T0LOW     = 0x9D;
           =1 sfr T1HIGH    = 0x9E;
           =1 sfr T1LOW     = 0x9F;
           =1 sfr T2HIGH    = 0x93;
           =1 sfr T2LOW     = 0x94;
           =1 
           =1 /*  BIT Registers  */
           =1 /*  PSW  */
           =1 sbit CY    = 0xD7;
           =1 sbit AC    = 0xD6;
           =1 sbit F0    = 0xD5;
           =1 sbit RS1   = 0xD4;
           =1 sbit RS0   = 0xD3;
           =1 sbit OV    = 0xD2;
           =1 sbit P     = 0xD0;
           =1 
           =1 /*  TCON  */
           =1 sbit TF1   = 0x8F;
           =1 sbit TR1   = 0x8E;
           =1 sbit TF0   = 0x8D;
           =1 sbit TR0   = 0x8C;
           =1 sbit IE1   = 0x8B;
           =1 sbit IT1   = 0x8A;
           =1 sbit IE0   = 0x89;
           =1 sbit IT0   = 0x88;
           =1 
           =1 /*  IE  */
           =1 sbit EA    = 0xAF;
           =1 sbit ES    = 0xAC;
           =1 sbit ET1   = 0xAB;
           =1 sbit EX1   = 0xAA;
           =1 sbit ET0   = 0xA9;
           =1 sbit EX0   = 0xA8;
           =1 
           =1 /*  EIE  */
           =1 sbit EWDI  = 0xEC;    // Watch dog timer interrupt enable
           =1 sbit EX5   = 0xEB;    // external interrupt 5 enable
           =1 sbit EX4   = 0xEA;    // external interrupt 4 enable
           =1 sbit EX3   = 0xE9;    // external interrupt 3 enable
           =1 sbit EX2   = 0xE8;    // external interrupt 2 enable
           =1 
           =1 /*  IP  */
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 9   

           =1 sbit PS    = 0xBC;
           =1 sbit PT1   = 0xBB;
           =1 sbit PX1   = 0xBA;
           =1 sbit PT0   = 0xB9;
           =1 sbit PX0   = 0xB8;
           =1 
           =1 /*  EIP  */
           =1 sbit PWDI  = 0xFC;    // Watch dog timer interrupt priority
           =1 sbit PX5   = 0xFB;    // external interrupt5 priority
           =1 sbit PX4   = 0xFA;    // external interrupt4 priority
           =1 sbit PX3   = 0xF9;    // external interrupt3 priority
           =1 sbit PX2   = 0xF8;    // external interrupt2 priority
           =1 
           =1 /*  P3  */
           =1 sbit RD    = 0xB7;
           =1 sbit WR    = 0xB6;
           =1 sbit T1    = 0xB5;
           =1 sbit T0    = 0xB4;
           =1 sbit INT1  = 0xB3;
           =1 sbit INT0  = 0xB2;
           =1 sbit TXD   = 0xB1;
           =1 sbit RXD   = 0xB0;
           =1 
           =1 /*  SCON  */
           =1 sbit SM0   = 0x9F;
           =1 sbit SM1   = 0x9E;
           =1 sbit SM2   = 0x9D;
           =1 sbit REN   = 0x9C;
           =1 sbit TB8   = 0x9B;
           =1 sbit RB8   = 0x9A;
           =1 sbit TI    = 0x99;
           =1 sbit RI    = 0x98;
           =1 
           =1 /*  8052 Extensions  */
           =1 /*  IE  */
           =1 sbit ET2   = 0xAD;
           =1 
           =1 /*  IP  */
           =1 sbit PT2   = 0xBD;
           =1 
           =1 /*  P1  */
           =1 sbit T2EX  = 0x91;
           =1 sbit T2    = 0x90;
           =1              
           =1 /*  T2CON  */
           =1 sbit TF2   = 0xCF;
           =1 sbit EXF2  = 0xCE;
           =1 sbit RCLK  = 0xCD;
           =1 sbit TCLK  = 0xCC;
           =1 sbit EXEN2 = 0xCB;
           =1 sbit TR2   = 0xCA;
           =1 sbit C_T2  = 0xC9;
           =1 sbit CP_RL2= 0xC8;
           =1 
           =1 sfr CHPENR = 0xF6;
           =1 sfr CHPCON = 0xBF;
           =1 sfr SFRAL  = 0xC4;
           =1 sfr SFRAH  = 0xC5;
           =1 sfr SFRFD  = 0xC6;
           =1 sfr SFRCN  = 0xC7;
           =1 
           =1 sbit P0_0  = 0x80;
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 10  

           =1 sbit P0_1  = 0x81;
           =1 sbit P0_2  = 0x82;
           =1 sbit P0_3  = 0x83;
           =1 sbit P0_4  = 0x84;
           =1 sbit P0_5  = 0x85;
           =1 sbit P0_6  = 0x86;
           =1 sbit P0_7  = 0x87;
           =1 
           =1 sbit P1_0  = 0x90;
           =1 sbit P1_1  = 0x91;
           =1 sbit P1_2  = 0x92;
           =1 sbit P1_3  = 0x93;
           =1 sbit P1_4  = 0x94;
           =1 sbit P1_5  = 0x95;
           =1 sbit P1_6  = 0x96;
           =1 sbit P1_7  = 0x97;
           =1 
           =1 sbit P2_0  = 0xa0;
           =1 sbit P2_1  = 0xa1;
           =1 sbit P2_2  = 0xa2;
           =1 sbit P2_3  = 0xa3;
           =1 sbit P2_4  = 0xa4;
           =1 sbit P2_5  = 0xa5;
           =1 sbit P2_6  = 0xa6;
           =1 sbit P2_7  = 0xa7;
           =1 
           =1 sbit P3_0  = 0xb0;
           =1 sbit P3_1  = 0xb1;
           =1 sbit P3_2  = 0xb2;
           =1 sbit P3_3  = 0xb3;
           =1 sbit P3_4  = 0xb4;
           =1 sbit P3_5  = 0xb5;
           =1 sbit P3_6  = 0xb6;
           =1 sbit P3_7  = 0xb7;
           =1 
           =1 #else // external MCU=WINBOND
 189      =1  /*  BYTE Registers  */
 190      =1  sfr P0    = 0x80;
 191      =1  sfr P1    = 0x90;
 192      =1  sfr P2    = 0xA0;
 193      =1  sfr P3    = 0xB0;
 194      =1  sfr PSW   = 0xD0;
 195      =1  sfr ACC   = 0xE0;
 196      =1  sfr B     = 0xF0;
 197      =1  sfr SP    = 0x81;
 198      =1  sfr DPL   = 0x82;
 199      =1  sfr DPH   = 0x83;
 200      =1  sfr PCON  = 0x87;
 201      =1  sfr TCON  = 0x88;
 202      =1  sfr TMOD  = 0x89;
 203      =1  sfr TL0   = 0x8A;
 204      =1  sfr TL1   = 0x8B;
 205      =1  sfr TH0   = 0x8C;
 206      =1  sfr TH1   = 0x8D;
 207      =1  sfr CKCON = 0x8E;   //clock control register, default =0x01
 208      =1  sfr IE    = 0xA8;
 209      =1  sfr IP    = 0xB8;
 210      =1  sfr SCON  = 0x98;
 211      =1  sfr SBUF  = 0x99;
 212      =1  sfr P4 = 0xE8; //Megawin Ryan@970716
 213      =1  //sfr P4    = 0xa5;      //SST MCU
 214      =1  //sfr P4    = 0xd8;   //winbond<960820>
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 11  

 215      =1  
 216      =1  /*  8052 Extensions  */
 217      =1  sfr ADCTL = 0xC5;   //william-20111017
 218      =1  sfr ADCV = 0xC6;    //william-20111017
 219      =1  sfr ADCVL = 0xE8;   //william-20111017
 220      =1  sfr T2CON = 0xC8;
 221      =1  sfr RCAP2L = 0xCA;
 222      =1  sfr RCAP2H = 0xCB;
 223      =1  sfr TL2   = 0xCC;
 224      =1  sfr TH2   = 0xCD;
 225      =1  
 226      =1  // for UART2
 227      =1  sfr S2CON  = 0xAA;
 228      =1  sfr S2BRT  = 0xBA;
 229      =1  sfr S2BUF  = 0x9A;
 230      =1  sfr AUXR2  = 0xA6;
 231      =1  sfr AUXIE  = 0xAD;
 232      =1  
 233      =1  sfr P1M0  = 0x91;
 234      =1  sfr P1M1  = 0x92;
 235      =1  sfr P0M0  = 0x93;
 236      =1  sfr P0M1  = 0x94;
 237      =1  sfr P2M0  = 0x95;
 238      =1  sfr P2M1  = 0x96;
 239      =1  sfr P3M0  = 0xB1;
 240      =1  sfr P3M1  = 0xB2;
 241      =1  
 242      =1  // for PCA
 243      =1  sfr CCON   = 0xD8;
 244      =1  sfr CMOD   = 0xD9;
 245      =1  sfr CCAPM0 = 0xDA;
 246      =1  sfr CCAPM1 = 0xDB;
 247      =1  sfr CCAPM2 = 0xDC;
 248      =1  sfr CCAPM3 = 0xDD;
 249      =1  sfr CCAPM4 = 0xDE;
 250      =1  sfr CCAPM5 = 0xDF;
 251      =1  sfr CL     = 0xE9;
 252      =1  sfr CH     = 0xF9;
 253      =1  sfr CCAP0L = 0xEA;
 254      =1  sfr CCAP0H = 0xFA;
 255      =1  sfr CCAP1L = 0xEB;
 256      =1  sfr CCAP1H = 0xFB;
 257      =1  sfr CCAP2L = 0xEC;
 258      =1  sfr CCAP2H = 0xFC;
 259      =1  sfr CCAP3L = 0xED;
 260      =1  sfr CCAP3H = 0xFD;
 261      =1  sfr CCAP4L = 0xEE;
 262      =1  sfr CCAP4H = 0xFE;
 263      =1  sfr CCAP5L = 0xEF;
 264      =1  sfr CCAP5H = 0xFF;
 265      =1  sfr PCAPWM0= 0xF2;
 266      =1  sfr PCAPWM1= 0xF3;
 267      =1  sfr PCAPWM2= 0xF4;
 268      =1  sfr PCAPWM3= 0xF5;
 269      =1  sfr PCAPWM4= 0xF6;
 270      =1  sfr PCAPWM5= 0xF7;
 271      =1  
 272      =1  /*  BIT Registers  */
 273      =1  /*  PSW  */
 274      =1  sbit CY    = 0xD7;
 275      =1  sbit AC    = 0xD6;
 276      =1  sbit F0    = 0xD5;
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 12  

 277      =1  sbit RS1   = 0xD4;
 278      =1  sbit RS0   = 0xD3;
 279      =1  sbit OV    = 0xD2;
 280      =1  sbit P     = 0xD0;
 281      =1  
 282      =1  /*  TCON  */
 283      =1  sbit TF1   = 0x8F;
 284      =1  sbit TR1   = 0x8E;
 285      =1  sbit TF0   = 0x8D;
 286      =1  sbit TR0   = 0x8C;
 287      =1  sbit IE1   = 0x8B;
 288      =1  sbit IT1   = 0x8A;
 289      =1  sbit IE0   = 0x89;
 290      =1  sbit IT0   = 0x88;
 291      =1  
 292      =1  /*  IE  */
 293      =1  sbit EA    = 0xAF;
 294      =1  sbit ES    = 0xAC;
 295      =1  sbit ET1   = 0xAB;
 296      =1  sbit EX1   = 0xAA;
 297      =1  sbit ET0   = 0xA9;
 298      =1  sbit EX0   = 0xA8;
 299      =1  
 300      =1  /*  IP  */
 301      =1  sbit PS    = 0xBC;
 302      =1  sbit PT1   = 0xBB;
 303      =1  sbit PX1   = 0xBA;
 304      =1  sbit PT0   = 0xB9;
 305      =1  sbit PX0   = 0xB8;
 306      =1  
 307      =1  /*  P3  */
 308      =1  sbit RD    = 0xB7;
 309      =1  sbit WR    = 0xB6;
 310      =1  sbit T1    = 0xB5;
 311      =1  sbit T0    = 0xB4;
 312      =1  sbit INT1  = 0xB3;
 313      =1  sbit INT0  = 0xB2;
 314      =1  sbit TXD   = 0xB1;
 315      =1  sbit RXD   = 0xB0;
 316      =1  
 317      =1  /*  SCON  */
 318      =1  sbit SM0   = 0x9F;
 319      =1  sbit SM1   = 0x9E;
 320      =1  sbit SM2   = 0x9D;
 321      =1  sbit REN   = 0x9C;
 322      =1  sbit TB8   = 0x9B;
 323      =1  sbit RB8   = 0x9A;
 324      =1  sbit TI    = 0x99;
 325      =1  sbit RI    = 0x98;
 326      =1  
 327      =1  /*  8052 Extensions  */
 328      =1  /*  IE  */
 329      =1  sbit ET2   = 0xAD;
 330      =1  
 331      =1  /*  IP  */
 332      =1  sbit PT2   = 0xBD;
 333      =1  
 334      =1  /*  P1  */
 335      =1  sbit T2EX  = 0x91;
 336      =1  sbit T2    = 0x90;
 337      =1               
 338      =1  /*  T2CON  */
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 13  

 339      =1  sbit TF2   = 0xCF;
 340      =1  sbit EXF2  = 0xCE;
 341      =1  sbit RCLK  = 0xCD;
 342      =1  sbit TCLK  = 0xCC;
 343      =1  sbit EXEN2 = 0xCB;
 344      =1  sbit TR2   = 0xCA;
 345      =1  sbit C_T2  = 0xC9;
 346      =1  sbit CP_RL2= 0xC8;
 347      =1  
 348      =1  sfr CHPENR = 0xF6;
 349      =1  sfr CHPCON = 0xBF;
 350      =1  sfr SFRAL  = 0xC4;
 351      =1  sfr SFRAH  = 0xC5;
 352      =1  sfr SFRFD  = 0xC6;
 353      =1  sfr SFRCN  = 0xC7;
 354      =1  
 355      =1  sbit P0_0  = 0x80;
 356      =1  sbit P0_1  = 0x81;
 357      =1  sbit P0_2  = 0x82;
 358      =1  sbit P0_3  = 0x83;
 359      =1  sbit P0_4  = 0x84;
 360      =1  sbit P0_5  = 0x85;
 361      =1  sbit P0_6  = 0x86;
 362      =1  sbit P0_7  = 0x87;
 363      =1  
 364      =1  sbit P1_0  = 0x90;
 365      =1  sbit P1_1  = 0x91;
 366      =1  sbit P1_2  = 0x92;
 367      =1  sbit P1_3  = 0x93;
 368      =1  sbit P1_4  = 0x94;
 369      =1  sbit P1_5  = 0x95;
 370      =1  sbit P1_6  = 0x96;
 371      =1  sbit P1_7  = 0x97;
 372      =1  
 373      =1  sbit P2_0  = 0xa0;
 374      =1  sbit P2_1  = 0xa1;
 375      =1  sbit P2_2  = 0xa2;
 376      =1  sbit P2_3  = 0xa3;
 377      =1  sbit P2_4  = 0xa4;
 378      =1  sbit P2_5  = 0xa5;
 379      =1  sbit P2_6  = 0xa6;
 380      =1  sbit P2_7  = 0xa7;
 381      =1  
 382      =1  sbit P3_0  = 0xb0;
 383      =1  sbit P3_1  = 0xb1;
 384      =1  sbit P3_2  = 0xb2;
 385      =1  sbit P3_3  = 0xb3;
 386      =1  sbit P3_4  = 0xb4;
 387      =1  sbit P3_5  = 0xb5;
 388      =1  sbit P3_6  = 0xb6;
 389      =1  sbit P3_7  = 0xb7;
 390      =1  
 391      =1  sbit P4_0  = P4^0;
 392      =1  sbit P4_1  = P4^1;
 393      =1  sbit INT3  = P4^2;
 394      =1  sbit INT2  = P4^3;
 395      =1  
 396      =1  sfr P4M0  = 0xB3;
 397      =1  sfr P4M1  = 0xB4;
 398      =1  #endif  // INTERNAL_MCU
 399      =1  
 400      =1  #endif  //__REGISTERS__
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 14  

 401      =1  
  15          #include "typedefs.h"
   1      =1  #ifndef __TYPEDEFS__
   2      =1  #define __TYPEDEFS__
   3      =1  
   4      =1  
   5      =1  #define DATA    data
   6      =1  #define PDATA   pdata
   7      =1  #define IDATA   data
   8      =1  #define CODE    code
   9      =1  #define CODE_P
  10      =1  #define PDATA_P
  11      =1  #define IDATA_P
  12      =1  #define DATA_P
  13      =1  
  14      =1  #define INTERRUPT( num, name ) name() interrupt num
  15      =1  
  16      =1  #define _between(x, a, b) (a<=x && x<=b)
  17      =1  #define _swap(a, b)     { a^=b; b^=a; a^=b; }
  18      =1  
  19      =1  typedef unsigned char Register;
  20      =1  typedef unsigned char BYTE;
  21      =1  typedef unsigned short  WORD;
  22      =1  typedef unsigned long DWORD;
  23      =1  
  24      =1  #define TRUE  1
  25      =1  #define FALSE 0
  26      =1  
  27      =1  //VInputStdDetectMode
  28      =1  #define AUTO  0
  29      =1  
  30      =1  //VInputStd
  31      =1  #define NTSC  1     
  32      =1  #define PAL   2
  33      =1  #define SECAM 3
  34      =1  #define NTSC4 4
  35      =1  #define PALM  5
  36      =1  #define PALN  6
  37      =1  #define PAL60 7
  38      =1  
  39      =1  #define MAXINPUTSTD PAL60+1 // 
  40      =1  
  41      =1  #define UNKNOWN 0xfe
  42      =1  #define NOINPUT 0 //0xff
  43      =1  
  44      =1  #define NIL     0xff
  45      =1  
  46      =1  enum SourceModeTypeEnum
  47      =1  { 
  48      =1    AVMode,      // 0   0X00
  49      =1    //VGAMode,       // 1
  50      =1  #ifdef USE_CAMD 
           =1   CAM_D,         // 2
           =1 #endif
  53      =1    CAM_A,         // 3   0x01
  54      =1    CAM_B,         // 4   0x02
  55      =1    CAM_C,         // 5   0x03
  56      =1    CAM_R,         // 6   0x04
  57      =1    CAM_AB,        // 7   0x05
  58      =1    CAM_CR,        // 8   0x06
  59      =1    CAM_AR,        // 9   0x07
  60      =1    CAM_RB,        // 10    0x08
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 15  

  61      =1    CAM_AC,        // 11    0x09
  62      =1    CAM_CB,        // 12    0x0a
  63      =1    CAM_RAB_T,     // 13    0x0b
  64      =1    CAM_RAB_H,     // 14    0x0c
  65      =1  
  66      =1    #ifdef HTRV
           =1   CAM_RC,
           =1   #endif
  69      =1    
  70      =1    CAM_QUAD,      // 15    0x0d
  71      =1    CAM_ABR_T3,    // 16    0x0e
  72      =1    CAM_ABR_T4,    // 17    0x0f
  73      =1    CAM_RAC_T,      //  0x10
  74      =1    CAM_RBC_T,      //  0x11
  75      =1    CAM_RAC_T2,     //  0x12
  76      =1    CAM_RBC_T2,     //  0x13
  77      =1    CAM_BA,       //  0x14
  78      =1    CAM_BC,       //  0x15
  79      =1    CAM_BR,       //  0x16
  80      =1    CAM_CA,       //  0x17
  81      =1    CAM_ABC,      //  0x18
  82      =1    CAM_ABR,      //  0x19
  83      =1    CAM_ACR,      //  0x1a
  84      =1    CAM_BAC,      //  0x1b
  85      =1    CAM_BAR,      //  0x1c
  86      =1    CAM_BCR,      //  0x1d
  87      =1    CAM_CAB,      //  0x1e
  88      =1    CAM_CAR,      //  0x1f
  89      =1    CAM_CBR,      //  0x20
  90      =1    SEQ,           // 18      0x10
  91      =1    CAM_NUM
  92      =1  };
  93      =1  
  94      =1  typedef unsigned char SourceModeType;
  95      =1  
  96      =1  #endif  /* __TYPEDEFS__ */
  97      =1  
  16          #include "main.h"
   1      =1  #ifndef __MAIN__
   2      =1  #define __MAIN__
   3      =1  
   4      =1  #define ON          1
   5      =1  #define OFF         0
   6      =1  #if 1//ryan@20171214
   7      =1  #define Hs_debug
   8      =1  #define Monitor_debug  
   9      =1  //#define Trigger_debug 
  10      =1  #endif
  11      =1  
  12      =1  
  13      =1  //#define DVR
  14      =1  #define Format_SDCard
  15      =1  #define BJTSwitch
  16      =1  
  17      =1  #define Panel_Enable()    P4=P4|0x08 //andy 980908
  18      =1  #define Panel_Disable()   P4=P4&0xf7
  19      =1  
  20      =1  #if 0
           =1 #define SetBacklight()      P4=P4|0x04
           =1 #define clrBacklight()      P4=P4&0xfb
           =1 #else
  24      =1  #define SetBacklight()    P4=P4&0xfb
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 16  

  25      =1  #define clrBacklight()    P4=P4|0x04
  26      =1  #endif
  27      =1  
  28      =1  //InputSelection
  29      =1  struct struct_IdName {
  30      =1    BYTE  Id;
  31      =1    BYTE  Name[16];
  32      =1  };
  33      =1  
  34      =1  #define CH_TW2835       1
  35      =1  #define CH_CAMD       2
  36      =1  #define CH_AV         3
  37      =1  #define PC          7
  38      =1  #define ChineseDefaultMenu  8
  39      =1  
  40      =1  #define SVIDEO        2
  41      =1  #define COMPONENT     3
  42      =1  //#define ANALOGDTV     4
  43      =1  #define DTV         4
  44      =1  #define TV          5
  45      =1  #define SCART       6
  46      =1  
  47      =1  #ifdef HS
  48      =1  #define CH_CAMB         4
  49      =1  #endif
  50      =1  
  51      =1  #define DIGITALVGA      8
  52      =1  
  53      =1  #define AIRTV       0 //9
  54      =1  #define CABLETV       1 //0xa
  55      =1  
  56      =1  #define TVTUNER       0xd   //10
  57      =1  #define MUTE        1 
  58      =1  #define MENU        2 
  59      =1  #define TVVOL       4 
  60      =1  #ifdef AWT_ML072S
  61      =1  #define VLOSSINFO     8 
  62      =1  #else
           =1 #define CC          8 
           =1 #endif
  65      =1  #define INPUTINFO     0x10
  66      =1  #define PCINFO        0x20
  67      =1  #define GAUGEINFO       0x40
  68      =1  //#define RATINGINFO      0x40
  69      =1  #define TVCHN       0x80
  70      =1  //#define MUTE        0x40
  71      =1  
  72      =1  #define YPBPR_480i      0
  73      =1  #define YPBPR_576i      1
  74      =1  #define YPBPR_480p      2
  75      =1  #define YPBPR_576p      3
  76      =1  #define YPBPR_1080i     4
  77      =1  #define YPBPR_720p      5
  78      =1  #define YPBPR_720p50    6
  79      =1  
  80      =1  //---------------------- Feature Define ----------------------------
  81      =1  #ifdef AWT_ML072Q
           =1 
           =1 //mask by ryan@20171018   #define AWT_ML720Q_NEW_TRIGGER_FUN    //Pinchi 20141031 add for AWT request each t
             -rigger can work by PRIORITY OFF
           =1 #define AWT_ADD_TRIGGER_DELAY_FUN 
           =1 #define AWT_SUPPORT_4_3_SCREEN    //ryan@20170907 
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 17  

           =1 #endif
  87      =1  
  88      =1  #ifdef AWT_ML072S
  89      =1  #define AWT_ADD_TRIGGER_DELAY_FUN 
  90      =1  #endif
  91      =1  
  92      =1  //--------------------------- P0 Define -----------------------------
  93      =1  //#define SEL_MIX     P0_6  // 
  94      =1  //--------------------------- P1 Define -----------------------------
  95      =1  //#define SEL_DVI     P3_5  //LJY062001   
  96      =1  
  97      =1  #define TW88HWReset     P3_4  //LJY001010 //LJY000721
  98      =1  #define PowerUp       P3_7
  99      =1  //======================= CDS Control ================================= 
 100      =1  //#define CDS_CTRL           P1_5
 101      =1  extern BYTE SelectModeType;
 102      =1  extern BYTE InputSelection;
 103      =1  extern BYTE SEQTime;
 104      =1  extern BYTE Priority;
 105      =1  extern BYTE PowerFlag;
 106      =1  //extern bit AutoDayNight;
 107      =1  extern bit SDCardCoverDetect;
 108      =1  
 109      =1  BYTE keyIn(void);
 110      =1  void TimerForRemocon(void);
 111      =1  void TimerForTick(void);
 112      =1  void DisableRemoconInt(void);
 113      =1  BYTE SetSupport_remocon(BYTE newd);
 114      =1  
 115      =1  void delay(BYTE cnt);
 116      =1  
 117      =1  BYTE RS_ready(void);
 118      =1  #ifdef Monitor_debug
 119      =1  BYTE RS_rx(void);
 120      =1  #endif
 121      =1  void RS_tx(BYTE tx_buf);
 122      =1  
 123      =1  BYTE RS2_rx(void);
 124      =1  void RS2_tx(BYTE tx_buf);
 125      =1  
 126      =1  void NewLine(void);
 127      =1  void PutsP(PDATA_P BYTE *ptr);
 128      =1  #ifdef Hs_debug
 129      =1  //void MonWriteI2C(BYTE addr, BYTE index, BYTE val);
 130      =1  //BYTE MonReadI2C(BYTE addr, BYTE index);
 131      =1  #endif
 132      =1  BYTE Asc1Bin(BYTE asc);
 133      =1  BYTE Asc2Bin(PDATA_P BYTE *s);
 134      =1  
 135      =1  void I2CDeviceInitialize( CODE_P BYTE *RegSet);
 136      =1  
 137      =1  //void RestartSystemClock(WORD clock_hm);
 138      =1  WORD GetTime_ms(void);
 139      =1  #if 0
           =1 BYTE GetTime_H(void);
           =1 BYTE GetTime_M(void);
           =1 #endif
 143      =1  void ChangeTime_H( char add );
 144      =1  void ChangeTime_M( char add );
 145      =1  //WORD GetWakeupTime(void);
 146      =1  //void SetWakeupTime(WORD wtime);
 147      =1  
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 18  

 148      =1  
 149      =1  //WORD GetOffTime(void);
 150      =1  //void SetOffTime(WORD wtime);
 151      =1  //BYTE GetSleepTimer(void);
 152      =1  //void SetSleepTimer(BYTE stime);
 153      =1  WORD DiffTime_ms( WORD stime, WORD etime );
 154      =1  //void SetLastBlockedTime(void);
 155      =1  void SetLastCCTime(void);       //ljy010904...CC_FIX_CLEAR_ON_TIME
 156      =1  
 157      =1  void SetOSDLastKeyInTime(void);
 158      =1  WORD GetOSDLastKeyInTime(void);
 159      =1  WORD GetIVF(void);
 160      =1  DWORD GetIHF(void);
 161      =1  BYTE ReadVInputSTD(void);
 162      =1  void SetVInputStd(BYTE newd);
 163      =1  BYTE GetVInputStd(void);
 164      =1  BYTE GetInputSelection(void);
 165      =1  #ifdef ADD_ANALOGPANEL
           =1 BYTE IsAnalogOn(void);
           =1 #endif
 168      =1  void InitVideoData(BYTE src);
 169      =1  void ChangeVInputStdDetectMode(BYTE val);
 170      =1  BYTE GetVInputStdInx(void);
 171      =1  
 172      =1  void MonWriteI2Cn_(BYTE addr, BYTE *val, BYTE cnt) ;
 173      =1  
 174      =1  void CheckNewTriggerFunc(void);
 175      =1  ///void Usage(void);
 176      =1  #ifdef Monitor_debug
 177      =1    void Prompt(void);
 178      =1  #endif
 179      =1  void DebugKeyIn(BYTE ikey);
 180      =1  void DVIPowerDown(bit flag);
 181      =1  void PowerDown_XTAL(bit flag);
 182      =1  
 183      =1  void ChangeInput(BYTE newsel);
 184      =1  
 185      =1  
 186      =1  void WaitPowerOn(void);
 187      =1  void PowerOff(void);
 188      =1  BYTE GetNextInputSelection(void);
 189      =1  
 190      =1  BYTE WantToStopTVScan(void);
 191      =1  
 192      =1  //BYTE IsTW8801(void);
 193      =1  //BYTE IsTW8803(void);
 194      =1  //BYTE ConvertVideoVSAT(BYTE reg);
 195      =1  
 196      =1  BYTE IsNoInput(void);
 197      =1  void LoadEEPROM (void);
 198      =1  void Hs_InitVars(void);
 199      =1  void AdjustAutoDayNight(BYTE val);
 200      =1  void ACCPowerControl(void);
 201      =1  void ON_LVDS(void);
 202      =1  void OFF_LVDS(void);
 203      =1  void main_loop(void);
 204      =1  struct RegisterInfo
 205      =1  {
 206      =1     int  Min;
 207      =1     int  Max;
 208      =1     int  Default;
 209      =1  };
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 19  

 210      =1  struct LongRegisterInfo
 211      =1  {
 212      =1     WORD Min;
 213      =1     WORD Max;
 214      =1     WORD Default;
 215      =1  };
 216      =1  
 217      =1  
 218      =1  typedef enum   ///add enum  by ryan@20170907
 219      =1  {
 220      =1    NORMALL_MODE,
 221      =1    REVERSE_TRIG,
 222      =1    LEFT_TRIG,
 223      =1    RIGHT_TRIG,
 224      =1  #ifdef USE_CAMD 
           =1   CAMD_TRIG,
           =1 #endif  
 227      =1    CAMC_TRIG,
 228      =1    VGA_TRIG,
 229      =1    PARK_TRIG,
 230      =1    No_TRIG,
 231      =1    TRIGGER_NUM
 232      =1  }TriggerModeType;
 233      =1  
 234      =1  
 235      =1  #endif  // __MAIN__
 236      =1  
  17          #include "tw88.h"
   1      =1  #ifndef __TW88__
   2      =1  #define __TW88__
   3      =1  
   4      =1  #include "main.h"
   1      =2  #ifndef __MAIN__
           =2 #define __MAIN__
           =2 
           =2 #define ON          1
           =2 #define OFF         0
           =2 #if 1//ryan@20171214
           =2 #define Hs_debug
           =2 #define Monitor_debug  
           =2 //#define Trigger_debug 
           =2 #endif
           =2 
           =2 
           =2 //#define DVR
           =2 #define Format_SDCard
           =2 #define BJTSwitch
           =2 
           =2 #define Panel_Enable()    P4=P4|0x08 //andy 980908
           =2 #define Panel_Disable()   P4=P4&0xf7
           =2 
           =2 #if 0
           =2 #define SetBacklight()      P4=P4|0x04
           =2 #define clrBacklight()      P4=P4&0xfb
           =2 #else
           =2 #define SetBacklight()    P4=P4&0xfb
           =2 #define clrBacklight()    P4=P4|0x04
           =2 #endif
           =2 
           =2 //InputSelection
           =2 struct struct_IdName {
           =2   BYTE  Id;
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 20  

           =2   BYTE  Name[16];
           =2 };
           =2 
           =2 #define CH_TW2835       1
           =2 #define CH_CAMD       2
           =2 #define CH_AV         3
           =2 #define PC          7
           =2 #define ChineseDefaultMenu  8
           =2 
           =2 #define SVIDEO        2
           =2 #define COMPONENT     3
           =2 //#define ANALOGDTV     4
           =2 #define DTV         4
           =2 #define TV          5
           =2 #define SCART       6
           =2 
           =2 #ifdef HS
           =2 #define CH_CAMB         4
           =2 #endif
           =2 
           =2 #define DIGITALVGA      8
           =2 
           =2 #define AIRTV       0 //9
           =2 #define CABLETV       1 //0xa
           =2 
           =2 #define TVTUNER       0xd   //10
           =2 #define MUTE        1 
           =2 #define MENU        2 
           =2 #define TVVOL       4 
           =2 #ifdef AWT_ML072S
           =2 #define VLOSSINFO     8 
           =2 #else
           =2 #define CC          8 
           =2 #endif
           =2 #define INPUTINFO     0x10
           =2 #define PCINFO        0x20
           =2 #define GAUGEINFO       0x40
           =2 //#define RATINGINFO      0x40
           =2 #define TVCHN       0x80
           =2 //#define MUTE        0x40
           =2 
           =2 #define YPBPR_480i      0
           =2 #define YPBPR_576i      1
           =2 #define YPBPR_480p      2
           =2 #define YPBPR_576p      3
           =2 #define YPBPR_1080i     4
           =2 #define YPBPR_720p      5
           =2 #define YPBPR_720p50    6
           =2 
           =2 //---------------------- Feature Define ----------------------------
           =2 #ifdef AWT_ML072Q
           =2 
           =2 //mask by ryan@20171018   #define AWT_ML720Q_NEW_TRIGGER_FUN    //Pinchi 20141031 add for AWT request each t
             -rigger can work by PRIORITY OFF
           =2 #define AWT_ADD_TRIGGER_DELAY_FUN 
           =2 #define AWT_SUPPORT_4_3_SCREEN    //ryan@20170907 
           =2 #endif
           =2 
           =2 #ifdef AWT_ML072S
           =2 #define AWT_ADD_TRIGGER_DELAY_FUN 
           =2 #endif
           =2 
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 21  

           =2 //--------------------------- P0 Define -----------------------------
           =2 //#define SEL_MIX     P0_6  // 
           =2 //--------------------------- P1 Define -----------------------------
           =2 //#define SEL_DVI     P3_5  //LJY062001   
           =2 
           =2 #define TW88HWReset     P3_4  //LJY001010 //LJY000721
           =2 #define PowerUp       P3_7
           =2 //======================= CDS Control ================================= 
           =2 //#define CDS_CTRL           P1_5
           =2 extern BYTE SelectModeType;
           =2 extern BYTE InputSelection;
           =2 extern BYTE SEQTime;
           =2 extern BYTE Priority;
           =2 extern BYTE PowerFlag;
           =2 //extern bit AutoDayNight;
           =2 extern bit SDCardCoverDetect;
           =2 
           =2 BYTE keyIn(void);
           =2 void TimerForRemocon(void);
           =2 void TimerForTick(void);
           =2 void DisableRemoconInt(void);
           =2 BYTE SetSupport_remocon(BYTE newd);
           =2 
           =2 void delay(BYTE cnt);
           =2 
           =2 BYTE RS_ready(void);
           =2 #ifdef Monitor_debug
           =2 BYTE RS_rx(void);
           =2 #endif
           =2 void RS_tx(BYTE tx_buf);
           =2 
           =2 BYTE RS2_rx(void);
           =2 void RS2_tx(BYTE tx_buf);
           =2 
           =2 void NewLine(void);
           =2 void PutsP(PDATA_P BYTE *ptr);
           =2 #ifdef Hs_debug
           =2 //void MonWriteI2C(BYTE addr, BYTE index, BYTE val);
           =2 //BYTE MonReadI2C(BYTE addr, BYTE index);
           =2 #endif
           =2 BYTE Asc1Bin(BYTE asc);
           =2 BYTE Asc2Bin(PDATA_P BYTE *s);
           =2 
           =2 void I2CDeviceInitialize( CODE_P BYTE *RegSet);
           =2 
           =2 //void RestartSystemClock(WORD clock_hm);
           =2 WORD GetTime_ms(void);
           =2 #if 0
           =2 BYTE GetTime_H(void);
           =2 BYTE GetTime_M(void);
           =2 #endif
           =2 void ChangeTime_H( char add );
           =2 void ChangeTime_M( char add );
           =2 //WORD GetWakeupTime(void);
           =2 //void SetWakeupTime(WORD wtime);
           =2 
           =2 
           =2 //WORD GetOffTime(void);
           =2 //void SetOffTime(WORD wtime);
           =2 //BYTE GetSleepTimer(void);
           =2 //void SetSleepTimer(BYTE stime);
           =2 WORD DiffTime_ms( WORD stime, WORD etime );
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 22  

           =2 //void SetLastBlockedTime(void);
           =2 void SetLastCCTime(void);       //ljy010904...CC_FIX_CLEAR_ON_TIME
           =2 
           =2 void SetOSDLastKeyInTime(void);
           =2 WORD GetOSDLastKeyInTime(void);
           =2 WORD GetIVF(void);
           =2 DWORD GetIHF(void);
           =2 BYTE ReadVInputSTD(void);
           =2 void SetVInputStd(BYTE newd);
           =2 BYTE GetVInputStd(void);
           =2 BYTE GetInputSelection(void);
           =2 #ifdef ADD_ANALOGPANEL
           =2 BYTE IsAnalogOn(void);
           =2 #endif
           =2 void InitVideoData(BYTE src);
           =2 void ChangeVInputStdDetectMode(BYTE val);
           =2 BYTE GetVInputStdInx(void);
           =2 
           =2 void MonWriteI2Cn_(BYTE addr, BYTE *val, BYTE cnt) ;
           =2 
           =2 void CheckNewTriggerFunc(void);
           =2 ///void Usage(void);
           =2 #ifdef Monitor_debug
           =2   void Prompt(void);
           =2 #endif
           =2 void DebugKeyIn(BYTE ikey);
           =2 void DVIPowerDown(bit flag);
           =2 void PowerDown_XTAL(bit flag);
           =2 
           =2 void ChangeInput(BYTE newsel);
           =2 
           =2 
           =2 void WaitPowerOn(void);
           =2 void PowerOff(void);
           =2 BYTE GetNextInputSelection(void);
           =2 
           =2 BYTE WantToStopTVScan(void);
           =2 
           =2 //BYTE IsTW8801(void);
           =2 //BYTE IsTW8803(void);
           =2 //BYTE ConvertVideoVSAT(BYTE reg);
           =2 
           =2 BYTE IsNoInput(void);
           =2 void LoadEEPROM (void);
           =2 void Hs_InitVars(void);
           =2 void AdjustAutoDayNight(BYTE val);
           =2 void ACCPowerControl(void);
           =2 void ON_LVDS(void);
           =2 void OFF_LVDS(void);
           =2 void main_loop(void);
           =2 struct RegisterInfo
           =2 {
           =2    int  Min;
           =2    int  Max;
           =2    int  Default;
           =2 };
           =2 struct LongRegisterInfo
           =2 {
           =2    WORD Min;
           =2    WORD Max;
           =2    WORD Default;
           =2 };
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 23  

           =2 
           =2 
           =2 typedef enum   ///add enum  by ryan@20170907
           =2 {
           =2   NORMALL_MODE,
           =2   REVERSE_TRIG,
           =2   LEFT_TRIG,
           =2   RIGHT_TRIG,
           =2 #ifdef USE_CAMD 
           =2   CAMD_TRIG,
           =2 #endif  
           =2   CAMC_TRIG,
           =2   VGA_TRIG,
           =2   PARK_TRIG,
           =2   No_TRIG,
           =2   TRIGGER_NUM
           =2 }TriggerModeType;
           =2 
           =2 
           =2 #endif  // __MAIN__
 236      =2  
   5      =1  
   6      =1  //Value for register 0x44
   7      =1  //#define DECODER_YCbCr   0x08    //xxxx bbxx
   8      =1  //#define RGB_RGB       0x0C
   9      =1  
  10      =1  #define TW88_FPLL0      0xf9
  11      =1  #define TW88_FPLL1      0xfa
  12      =1  #define TW88_FPLL2      0xfb
  13      =1  #define TW88_FSS      0xfc
  14      =1  #define TW88_FSS_PD     0xfd
  15      =1  #define TW88_PLL_DIV    0xfe
  16      =1  
  17      =1  //#define TW88_XSCALE     0x5d
  18      =1  //#define TW88_YSCALE     0x5e
  19      =1  
  20      =1  #define TW88_XUSCALELO    0x60
  21      =1  #define TW88_XDSCALELO    0x61
  22      =1  #define TW88_YUSCALELO    0x62
  23      =1  #define TW88_XYSCALEHI    0x63
  24      =1  #define TW88_XUSCALEFINE  0x69
  25      =1  #define TW88_YUSCALEFINE  0x6a
  26      =1  
  27      =1  //Power Mgt
  28      =1  #define POWER_OFF     0
  29      =1  #define POWER_STANDBY   1
  30      =1  #define POWER_SUSPEND   2
  31      =1  #define POWER_ON      3
  32      =1  
  33      =1  //void TWChipsDetect(void);
  34      =1  void SetAutoDetectStd(void);
  35      =1  void ClearAutoDetectStd(BYTE);
  36      =1  void I2CDeviceInitialize( CODE_P BYTE *RegSet);
  37      =1  
  38      =1  
  39      =1  //0x63.. Register Group
  40      =1  #define GROUP_YCbCr     0x40
  41      =1  #define GROUP_RGB     0
  42      =1  #define SelectPanelAttrRegGroup(A)        WriteTW88(0x70, (ReadTW88(0x70) & 0xbf) | A)
  43      =1  
  44      =1  //#if defined TW8801 || defined TW8803
  45      =1  #define FB_MAIN   2
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 24  

  46      =1  #define FB_NORMAL 1
  47      =1  #define FB_RGB    0
  48      =1  //void SetFBmode( BYTE mode );
  49      =1  //#endif // TW8801
  50      =1  
  51      =1  
  52      =1  //=============================================================================
  53      =1  //                               LCD Functions   
  54      =1  //=============================================================================
  55      =1  //BYTE GetLCDPowerState(void);
  56      =1  void SetLCDPowerState(BYTE dat);
  57      =1  
  58      =1  BYTE IsFreeRun(void);
  59      =1  #if defined( SUPPORT_PC ) || defined( SUPPORT_DTV )
           =1 void PanelFreeRun(BYTE on);
           =1 void PanelBlack(BYTE on);
           =1 #endif
  63      =1  #if 0
           =1 void PanelMute(BYTE on);
           =1 #endif
  66      =1  void LCDPowerON(BYTE mute); 
  67      =1  
  68      =1  #ifdef AWT_ML072S
  69      =1  void LCDPowerOFF(void);
  70      =1  #endif
  71      =1  
  72      =1  #ifdef Hs_debug
  73      =1  void LCDPower(void);
  74      =1  #endif
  75      =1  void DPMSmodeOFF(void);
  76      =1  void DPMSmodeON(void);
  77      =1  //=============================================================================
  78      =1  //                          Get PC Parameter Functions   
  79      =1  //=============================================================================
  80      =1  void GetInitPanelAttribute1(void);
  81      =1  //void GetInitPanelAttribute2(void);
  82      =1  void DefaultPanelAttributeForVideo(void);
  83      =1  void SetPVR(WORD pvr);
  84      =1  void SetPHR(WORD phr);
  85      =1  WORD GetPVR(void);
  86      =1  WORD GetPHR(void);
  87      =1  WORD GetHPN(void);
  88      =1  WORD GetVPN(void);
  89      =1  
  90      =1  //WORD GetVactive(void);
  91      =1  
  92      =1  WORD GetHstart(void);
  93      =1  WORD GetHend(void);
  94      =1  WORD GetVstart(void);
  95      =1  WORD GetVend(void);
  96      =1  void TuneLineBuffer(BYTE field);
  97      =1  void TuneLineBuffer4Video(BYTE field);
  98      =1  
  99      =1  #if defined (SUPPORT_DTV)
           =1 void SetCoarstForDTV(BYTE en);
           =1 #endif
 102      =1  
 103      =1  WORD GetHactiveStart(void);
 104      =1  WORD GetHactiveEnd(void);
 105      =1  WORD GetVactiveStart(void);
 106      =1  //WORD GetVactiveLen(void);
 107      =1  BYTE GetVBackPorch(void);
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 25  

 108      =1  void SetVBackPorch(BYTE val);
 109      =1  WORD GetPHP(void);
 110      =1  void SetPHP(WORD php);
 111      =1  void SetPVP(WORD period);
 112      =1  WORD GetPVP(void);
 113      =1  //void SetPanelRelatedRegisters(void);
 114      =1  //BYTE ChangedHPN(void);
 115      =1  //WORD GetVSUD(void);
 116      =1  
 117      =1  void SetDefaultPLL(void);
 118      =1  //void SetDefaultFPHSperiod(void);
 119      =1  //BYTE CalcPHP(DWORD ppf, BYTE tol);
 120      =1  //void ChangeFPHSperiod4DecoderInput(WORD vsud, BYTE tol);
 121      =1  
 122      =1  //-------------------------------------------------------------------
 123      =1  //                  Set Active Region Functions
 124      =1  //-------------------------------------------------------------------
 125      =1  void SetHactiveStart(WORD hstart);
 126      =1  void SetHactiveEnd(WORD hend);
 127      =1  void SetVactiveStart(WORD vstart);
 128      =1  //void SetVactiveLen(WORD van, WORD vstart);
 129      =1  void SetVactiveLen(WORD van);
 130      =1  //=============================================================================
 131      =1  //                     Set Measurement Window Functions   
 132      =1  //=============================================================================
 133      =1  void SetMeasureWindowH(WORD start, WORD stop);
 134      =1  void SetMeasureWindowV(WORD start, WORD stop);
 135      =1  //=============================================================================
 136      =1  //                          Video Input Functions   
 137      =1  //=============================================================================
 138      =1  BYTE IsVideoInput(void);
 139      =1  BYTE DetectDecoderInput(void);
 140      =1  //=============================================================================
 141      =1  //
 142      =1  //=============================================================================
 143      =1  #if defined( SUPPORT_PC ) || defined( SUPPORT_DTV )
           =1 void AutoPHPCalEnable(void);
           =1 void AutoPHPCalDisable(void);
           =1 #endif
 147      =1  void MakeStartInt(void);
 148      =1  void AVGAInput(void);
 149      =1  void DVIInput(void);
 150      =1  //void DVGAInput(void);
 151      =1  void DisableDVGA(void);
 152      =1  
 153      =1  void COMPOSITE1Input(void);
 154      =1  void COMPOSITE2Input(void);
 155      =1  void COMPOSITE3Input(void);
 156      =1  void COMPOSITE4Input(void);
 157      =1  
 158      =1  void SVIDEOInput(void);
 159      =1  void COMPONENTInput(void);
 160      =1  void ANALOGDTVInput(void);
 161      =1  void DTVInput(void);
 162      =1  void TVInput(void);
 163      =1  void SCARTInput(void);
 164      =1  
 165      =1  //=============================================================================
 166      =1  //                          Measurement Functions
 167      =1  //=============================================================================
 168      =1  ///void SetPanelBitOrder(BYTE swap);
 169      =1  //void SetPanelSingleDouble(BYTE single);
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 26  

 170      =1  
 171      =1  BYTE MeasureAndWait(BYTE flag);
 172      =1  
 173      =1  //WORD GetHCounter1(BYTE field);
 174      =1  //void SetHInitial(BYTE field, WORD counter);
 175      =1  //=============================================================================
 176      =1  //                          Invert Polarity Functions
 177      =1  //=============================================================================
 178      =1  void InvertHSYNCPolarity(void);
 179      =1  void InvertVSYNCPolarity(void);
 180      =1  //=============================================================================
 181      =1  //            Interrupt / SW Reset Control Functions
 182      =1  //=============================================================================
 183      =1  void SetInt(void);
 184      =1  //void ClearInt(void);
 185      =1  void SetEnDet(void);
 186      =1  void ClearEnDet(void);
 187      =1  void SWReset(void);
 188      =1  //void ClearSYNCLossStatus(void);
 189      =1  //void ClearSYNCChangeStatus(void);
 190      =1  //=============================================================================
 191      =1  //
 192      =1  //=============================================================================
 193      =1  BYTE IsBypassmode(void);
 194      =1  //BYTE IsInteraced(void);
 195      =1  void Clear_bypass(void);
 196      =1  void MaskOnSYNCInt(void);
 197      =1  void MaskOffSYNCInt(void);
 198      =1  //=============================================================================
 199      =1  //                                ZoomControl
 200      =1  //=============================================================================
 201      =1  void BypassZoom(void);
 202      =1  
 203      =1  void XscaleU(DWORD scale);
 204      =1  void XscaleD(DWORD scale);
 205      =1  void XScale2(DWORD scale);
 206      =1  void YScale2(DWORD scale);
 207      =1  WORD GetYScale(void);
 208      =1  //=============================================================================
 209      =1  //
 210      =1  //=============================================================================
 211      =1  WORD GetHSYNCPulse(void);
 212      =1  WORD GetVSYNCPulse(void);
 213      =1  //#if defined TW8801 || defined TW8803
 214      =1  WORD GetRelativePosition(void);
 215      =1  //#endif
 216      =1  //=============================================================================
 217      =1  //                MISC2 for decoder
 218      =1  //=============================================================================
 219      =1  #define BLUE_DECODER    2
 220      =1  #define BLACK_DECODER   0
 221      =1  
 222      =1  BYTE ForceDecoderOutput(BYTE color);
 223      =1  BYTE ClearForcedDecoderOutput(void);
 224      =1  //=============================================================================
 225      =1  //                CC and EDS
 226      =1  //=============================================================================
 227      =1  BYTE GetCCStatus(void);
 228      =1  void DisableCC(void);
 229      =1  void EnableCC(void);
 230      =1  BYTE GetCCData(void);
 231      =1  BYTE IsCCEnabled(void);
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 27  

 232      =1  void EnableEDS(void);
 233      =1  void DisableEDS(void);
 234      =1  void RecoverCCOverflow(void);
 235      =1  
 236      =1  #define CCFIFOHalfFull()      (ReadDecoder(CSTATUS) & 0x04)
 237      =1  //=============================================================================
 238      =1  //                Internal PLL
 239      =1  //=============================================================================
 240      =1  BYTE GetPOST(void);
 241      =1  void SetPLLS(BYTE plls);
 242      =1  BYTE GetREFDM(void);
 243      =1  void SetREFDM(BYTE refdm);
 244      =1  DWORD GetFBDN(void);
 245      =1  void SetFBDN(WORD fbdn, BYTE vcsel);
 246      =1  DWORD GetPPF(void);
 247      =1  void ChangeInternPLL(DWORD _PPF);
 248      =1  
 249      =1  //=============================================================================
 250      =1  //                Macros for attribute
 251      =1  //=============================================================================
 252      =1  //#define GetOSDTransReg()            ReadTW88(0xAE)
 253      =1  //#define SetOSDTransReg(AlphaV)          WriteTW88(0xAE, (BYTE)AlphaV )
 254      =1  
 255      =1  #define GetPanelContrastReg(gccolor)      ReadTW88(0x71+gccolor)
 256      =1  #define SetPanelContrastReg(sccolor, cval)    WriteTW88(0x71+sccolor,cval)
 257      =1  
 258      =1  #define GetPanelBrightnessReg(gbcolor)      ReadTW88(0x74+gbcolor);
 259      =1  #define SetPanelBrightnessReg(sbcolor, bval)  WriteTW88(0x74+sbcolor,bval);
 260      =1  
 261      =1  #define SetDTVBrightnessReg(bval)       WriteTW88(0x74,bval);
 262      =1  
 263      =1  #define GetPanelSaturationReg(gbcolor)      ReadTW88(0x72+gbcolor);
 264      =1  #define SetPanelSaturationReg(sbcolor, bval)  WriteTW88(0x72+sbcolor,bval);
 265      =1  
 266      =1  #define SetPanelSharpnessReg(bval)        WriteTW88(0x78,((bval&0x07)|0x38) );
 267      =1  
 268      =1  #define SetPanelHueReg(bval)          WriteTW88(0x70, (ReadTW88(0x70) & 0xc0 | (bval)) );
 269      =1  
 270      =1  #define GetVideoContrastReg()         ReadDecoder(CONTRAST)
 271      =1  #define SetVideoContrastReg(vcval)        WriteDecoder(CONTRAST, vcval)
 272      =1  
 273      =1  #define GetVideoBrightnessReg()         ReadDecoder(BRIGHT)
 274      =1  #define SetVideoBrightnessReg(vbval)      WriteDecoder(BRIGHT, vbval )
 275      =1  
 276      =1  #define GetVideoSaturationReg(gvstype)      ReadDecoder(SAT_U+gvstype)
 277      =1  #define SetVideoSaturationReg(svstype, vsval) WriteDecoder(SAT_U+svstype, vsval)
 278      =1  
 279      =1  #define GetVideoHueReg()            ReadDecoder(HUE)
 280      =1  #define SetVideoHueReg(vhval)         WriteDecoder(HUE, vhval )
 281      =1  
 282      =1  #define GetVideoSharpnessRegDef         (ReadDecoder(SHARPNESS) & 0x0f) 
 283      =1  
 284      =1  #define GetVideoSharpnessReg()          GetVideoSharpnessRegDef
 285      =1  //#define SetVideoSharpnessReg(vshval)      WriteDecoder(SHARPNESS, vshval )
 286      =1  #define SetVideoSharpnessReg(vshval)      WriteDecoder(SHARPNESS, ((ReadDecoder(SHARPNESS) & 0xf0) | (vshval 
             -& 0x0f) ) );
 287      =1  
 288      =1  #ifdef TW9908
           =1 #define SetVideoVPeakingReg(vshval)
           =1 #else
 291      =1  #define SetVideoVPeakingReg(vshval)       WriteDecoder(V_PEAKING, ((ReadDecoder(V_PEAKING) & 0xf8) | (vshval 
             -& 0x07) ) );
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 28  

 292      =1  #endif
 293      =1  
 294      =1  #define SetVideoHfilterReg(val)         WriteDecoder(HFILTER, ((ReadDecoder(HFILTER) & 0xf8) | (val & 0x07) )|
             -0x08 );
 295      =1  //----------------------------------------------------------------------------------
 296      =1  //color type
 297      =1  #define RED   0
 298      =1  #define GREEN 1
 299      =1  #define BLUE  2
 300      =1  #define WHITE 3
 301      =1  //saturation type
 302      =1  #define U_SAT 0
 303      =1  #define V_SAT 1
 304      =1  
 305      =1  //Alpha Blending Level
 306      =1  #define _0    0
 307      =1  #define _25   0x12
 308      =1  #define _37_5 0x13
 309      =1  #define _50   0x14
 310      =1  #define _100  0x18
 311      =1  
 312      =1  BYTE GetKey(BYTE repeat);
 313      =1  
 314      =1  /*
 315      =1  BYTE Mapping( int fromValue, struct RegisterInfo fromRange,
 316      =1                                   int * toValue, struct RegisterInfo toRange );
 317      =1  */
 318      =1  BYTE Mapping1( int fromValue, CODE_P struct RegisterInfo *fromRange,
 319      =1                                   int * toValue, CODE_P struct RegisterInfo *toRange );
 320      =1  #ifdef KEILC
 321      =1  #define Mapping2( A, B, C, D )      Mapping1( A, B, C, D )
 322      =1  #define Mapping3( A, B, C, D )      Mapping1( A, B, C, D )
 323      =1  #else
           =1 BYTE Mapping2( int fromValue, IDATA_P struct RegisterInfo *fromRange,
           =1                                  int * toValue, CODE_P struct RegisterInfo *toRange );
           =1 BYTE Mapping3( int fromValue, CODE_P struct RegisterInfo *fromRange,
           =1                                  int * toValue, IDATA_P struct RegisterInfo *toRange );
           =1 #endif
 329      =1  
 330      =1  BYTE GetAttributesFromNTSCSettings(BYTE index);
 331      =1  
 332      =1  #endif  // __TW88__
 333      =1  
  18          #include "i2c.h"
   1      =1  #ifndef __I2C_H__
   2      =1  #define __I2C_H__
   3      =1  
   4      =1  
   5      =1  void I2CReadByte3(BYTE *);
   6      =1  void I2CRead8Byte(BYTE *);
   7      =1  #if 0
           =1 void I2CReadByteMSP(BYTE addr, BYTE index, BYTE *pd, BYTE cnt);
           =1 #endif
  10      =1  BYTE I2CWriteByte2(BYTE);
  11      =1  BYTE I2CWriteByte3(BYTE*);
  12      =1  BYTE I2CWrite8Byte(BYTE *);
  13      =1  
  14      =1  void I2CStart(void);
  15      =1  void I2CWriteData(BYTE value);
  16      =1  BYTE I2CReadData(void);
  17      =1  #if 0
           =1 BYTE I2CReadDataWithACK(void);
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 29  

           =1 #endif
  20      =1  void I2CStop(void);
  21      =1  void I2Cdelay(void);
  22      =1  
  23      =1  
  24      =1  #define WriteTW88(a,b)    WriteI2C(TW88I2CAddress, a, b)
  25      =1  #define ReadTW88(a)     ReadI2C(TW88I2CAddress, a)
  26      =1  
  27      =1  BYTE WriteTW88_Wait (BYTE, BYTE);
  28      =1  void WriteADC   (BYTE, BYTE);
  29      =1  BYTE ReadADC    (BYTE);
  30      =1  BYTE ReadADC_TW88(BYTE index);
  31      =1  void WriteADC_TW88(BYTE index, BYTE dat);
  32      =1  
  33      =1  void WriteEEP   (WORD, BYTE);
  34      =1  BYTE ReadEEP    (WORD);
  35      =1  WORD ReadALC106(WORD index);
  36      =1  void WriteALC106(WORD index, WORD  dat);
  37      =1  WORD ReadI2CWORD(BYTE addr, BYTE index);
  38      =1  BYTE ReadI2C    (BYTE addr, BYTE index);
  39      =1  void WriteI2C   (BYTE addr, BYTE index, BYTE val);
  40      =1  
  41      =1  void WriteI2Cn_(BYTE addr, BYTE *val, BYTE cnt);
  42      =1  void WriteI2Cn (BYTE addr, BYTE index, BYTE *val, BYTE cnt);
  43      =1  void WriteI2CnD(BYTE addr, BYTE index, BYTE val, BYTE cnt);
  44      =1  
  45      =1  void ReadI2Cmn(BYTE addr, BYTE wcnt, BYTE rcnt, BYTE *rwdata);
  46      =1  
  47      =1  #define   WriteADC(a,b) WriteADC_TW88(a,b)
  48      =1  #define   ReadADC(a)    ReadADC_TW88(a)
  49      =1  
  50      =1  #endif  /* __I2C_H__ */
  19          #include "adc.h"
   1      =1  #ifndef __ADC__
   2      =1  #define __ADC__
   3      =1  
   4      =1  //=============================================================================
   5      =1  //                             ADC Functions
   6      =1  //=============================================================================
   7      =1  
   8      =1  void ADCPowerDown(bit flag);
   9      =1  void SelectADCmux(BYTE sel);
  10      =1  void SetADCMode(BYTE mode);
  11      =1  
  12      =1  void EnableADC(void);
  13      =1  void DisableADC(void);
  14      =1  
  15      =1  WORD GetCoarse(void);
  16      =1  void SetCoarse(WORD i);
  17      =1  void SetPhase(BYTE j);
  18      =1  BYTE GetPhaseCurrent(void);
  19      =1  BYTE SetVCORange(DWORD _IPF);
  20      =1  
  21      =1  //void SetADCGainOffset(BYTE gain, BYTE offset);
  22      =1  void AutoColorAdjust(void);
  23      =1  
  24      =1  void AutoColorAdjustForDTV(BYTE flag);
  25      =1  
  26      =1  #endif  // __ADC__
  27      =1  
  28      =1  
  29      =1  
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 30  

  30      =1  
  31      =1  
  32      =1  
  33      =1  
  34      =1  
  35      =1  
  36      =1  
  37      =1  
  38      =1  
  39      =1  
  40      =1  
  41      =1  
  42      =1  
  43      =1  
  44      =1  
  45      =1  
  46      =1  
  47      =1  
  48      =1  
  49      =1  
  50      =1  
  51      =1  
  52      =1  
  20          #include "osdbasic.h"
   1      =1  //osd_basic.h
   2      =1  //LJY11012001
   3      =1  #ifndef __OSD_BASIC__
   4      =1  #define __OSD_BASIC__
   5      =1  
   6      =1  // osd_basic.h
   7      =1  // char code
   8      =1  //#include "apilib.h"
   9      =1  
  10      =1  //ljy052903
  11      =1  //definition for internal OSD
  12      =1  #define FONT_WIDTH_TW88     12
  13      =1  #define FONT_HEIGHT_TW88    18
  14      =1  #define PIXS_PER_XSTEP_TW88   8
  15      =1  #define LINES_PER_YSTEP_TW88  4
  16      =1  #define MAX_OSDWINDOW_TW88    8
  17      =1  
  18      =1  // Using TW88 OSD for Menu
  19      =1  #define FONT_WIDTH      12
  20      =1  #define FONT_HEIGHT     18
  21      =1  #define PIXS_PER_XSTEP    8
  22      =1  #define LINES_PER_YSTEP   4
  23      =1  #define MAX_OSDWINDOW   4
  24      =1  
  25      =1  #define MAX_FONT_BYTES    27
  26      =1  #define RAMFONT   0xFE
  27      =1  #define ROMFONT   0xFF
  28      =1  #define NO_UDFONT     226 
  29      =1  
  30      =1  #define FONT_ROM  1
  31      =1  #define FONT_RAM  2
  32      =1  
  33      =1  
  34      =1  /////////////////////////////////
  35      =1  // Old Registers...
  36      =1  /*
  37      =1    #define TW88_WIN1ATTR   0x76
  38      =1    #define TW88_WIN1XSTART   0x77
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 31  

  39      =1    #define TW88_WIN1YSTART   0x78
  40      =1    #define TW88_WIN1WIDTH    0x79
  41      =1    #define TW88_WIN1HEIGHT   0x7a
  42      =1    #define TW88_WIN1BRDATTR  0x7b
  43      =1    #define TW88_WIN1BRDWIDTH 0x7c
  44      =1    #define TW88_WIN1BRDHEIGHT  0x7d
  45      =1    #define TW88_WIN1XSPACE   0x7e    // between characters.
  46      =1    #define TW88_WIN1YSPACE   0x7f
  47      =1    #define TW88_WIN1SADDR    0x80    // starting address of OSD ram for Windows 1
  48      =1  */
  49      =1  /////////////////////////////////
  50      =1  
  51      =1  // OSD
  52      =1  #define TW88_ENABLERAM    0x94  // TW8804C
  53      =1  #define TW88_FONTRAMADDR  0x99  // TW8804C
  54      =1  #define TW88_FONTRAMDATA  0x9a  // TW8804C
  55      =1  #define TW88_OSDRAMADDRHI 0x95  // TW8804C
  56      =1  #define TW88_OSDRAMADDRLO 0x96  // TW8804C
  57      =1  #define TW88_OSDRAMDATAHI 0x97  // TW8804C
  58      =1  #define TW88_OSDRAMDATALO 0x98  // TW8804C
  59      =1  #define TW88_MULTISTART   0x9b  // TW8804C
  60      =1  #define TW88_OSDLOCKUPSEL 0x9c
  61      =1  #define TW88_WINNUM     0x9e  // TW8804C
  62      =1  #define TW88_WINATTR    0x9f  //
  63      =1  #define TW88_WINXSTART    0xa1  //
  64      =1  #define TW88_WINYSTART    0xa2  //
  65      =1  #define TW88_WINSTART_HI  0xa0  //
  66      =1  #define TW88_WINWIDTH   0xa3  //
  67      =1  #define TW88_WINHEIGHT    0xa4  //
  68      =1  #define TW88_WINBRDATTR   0xa5  //
  69      =1  #define TW88_WINBRDWIDTH  0xa6  //
  70      =1  #define TW88_WINBRDHEIGHT 0xa7  //
  71      =1  #define TW88_WINSPACE   0xa8  // between characters.
  72      =1  #define TW88_WINZOOM    0xa9  //
  73      =1  #define TW88_WINSADDRHI   0xa9  // starting address of OSD ram for Windows 1
  74      =1  #define TW88_WINSADDRLO   0xaa  // starting address of OSD ram for Windows 1
  75      =1  
  76      =1  #define TW88_WINSHADOW    0xab  //
  77      =1  #define TW88_WINBLENDING  0xac  //
  78      =1  #define TW88_WINCHEFFECT  0xad  //
  79      =1  
  80      =1  
  81      =1  //Attributes for OSD
  82      =1  #define WINZOOMx1     0x01
  83      =1  #define WINZOOMx2     0x02
  84      =1  #define WINZOOMx3     0x03
  85      =1  #define WINZOOMx4     0x04
  86      =1  #define SHOW        0x08  
  87      =1  
  88      =1  #define EXTENDED_COLOR    0x80
  89      =1  #define BG_COLOR_BLACK    0x00  //For background color of window, border, and char. 
  90      =1  #define BG_COLOR_RED    0x40  
  91      =1  #define BG_COLOR_GREEN    0x20
  92      =1  #define BG_COLOR_YELLOW   0x60
  93      =1  #define BG_COLOR_BLUE   0x10
  94      =1  #define BG_COLOR_MAGENTA  0x50
  95      =1  #define BG_COLOR_CYAN   0x30
  96      =1  #define BG_COLOR_WHITE    0x70
  97      =1  #define BG_COLOR_TRANS    0x80  
  98      =1  #define BG_COLOR_MASK   0xf0  
  99      =1  
 100      =1  #define CH_COLOR_BLACK    0x00  //For color of char.
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 32  

 101      =1  #define CH_COLOR_RED    0x04  
 102      =1  #define CH_COLOR_GREEN    0x02
 103      =1  #define CH_COLOR_YELLOW   0x06
 104      =1  #define CH_COLOR_BLUE   0x01
 105      =1  #define CH_COLOR_MAGENTA  0x05
 106      =1  #define CH_COLOR_CYAN   0x03
 107      =1  #define CH_COLOR_WHITE    0x07
 108      =1  #define CH_BLINK      0x08  
 109      =1  #define CH_COLOR_MASK   0x0f  
 110      =1  
 111      =1  #define CL_BLACK      0x00  //For color of char.
 112      =1  #define CL_BLUE       0x01
 113      =1  #define CL_GREEN      0x02
 114      =1  #define CL_CYAN       0x03
 115      =1  #define CL_RED        0x04  
 116      =1  #define CL_MAGENTA      0x05
 117      =1  #define CL_YELLOW     0x06
 118      =1  #define CL_WHITE      0x07
 119      =1  #define CL_BLINK      0x08  
 120      =1  
 121      =1  // 0x76*(WindowNo*0x0b)
 122      =1  #define WINDOW_DISABLE    0x00
 123      =1  #define WINDOW_ENABLE   0x01
 124      =1  #define WINDOW_3D_ENABLE    0x04
 125      =1  #define WINDOW_3D_BOTTOM    0x08
 126      =1  #define WINDOW_3D_TOP     0x00
 127      =1  #define WINDOW_TRANS_ENABLE 0x80
 128      =1  
 129      =1  #define WINBDCOLOR_ENABLE 0x80
 130      =1  #define WINBDCOLOR_EXTENT 0x80
 131      =1  
 132      =1  
 133      =1  #define WINBLENDING_DISABLE 0x00
 134      =1  #define WINBLENDING_BACK    0x10
 135      =1  #define WINBLENDING_FORE    0x20
 136      =1  #define WINBLENDING_ALL     0x30
 137      =1  
 138      =1  #define WINSHADOW_ENABLE  0x80
 139      =1  // 0xc8*WindowNo
 140      =1  #define WIN_MULTICOLOR_ENABLE 0x20
 141      =1  #define WIN_CH_EFFECT_ENABLE  0x10
 142      =1  #define WIN_CH_EFFECT_SHADOW  0x08
 143      =1  
 144      =1  
 145      =1  
 146      =1  ///////// TW8804C /////////////
 147      =1  // Window Number
 148      =1  #define WINNUM1       1
 149      =1  #define WINNUM2       2
 150      =1  #define WINNUM3       3
 151      =1  #define WINNUM4       4
 152      =1  
 153      =1  // Index 0x9f Defination
 154      =1  #define WIN_BG_COLOR_EX   0x80
 155      =1  #define WIN_BG_COLOR_EX0  0x00
 156      =1  #define WIN_3D_TYPE     0x08
 157      =1  #define WIN_3D_TYPE0    0x00
 158      =1  #define WIN_3D_EN     0x04
 159      =1  #define WIN_3D_EN0      0x00
 160      =1  #define WIN_3D_LEVEL    0x02
 161      =1  #define WIN_EN        0x01
 162      =1  #define WIN_EN0       0x00
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 33  

 163      =1  
 164      =1  // Index 0xa5 Defination
 165      =1  #define WIN_BD_EN     0x80
 166      =1  #define WIN_BD_EN0      0x00
 167      =1  #define WIN_BD_WIDTH(a)   a
 168      =1  
 169      =1  // Index 0xa6 Defination
 170      =1  #define WIN_BD_COLOR_EX   0x80
 171      =1  #define WIN_BD_COLOR_EX0  0x00
 172      =1  #define WIN_H_BD_W(a)   a
 173      =1  
 174      =1  // Index 0xa7 Defination
 175      =1  #define WIN_V_BD_W(a)   a
 176      =1  
 177      =1  // Index 0xa8
 178      =1  #define WIN_CH_VSPACE(a)  (a<<4)
 179      =1  #define WIN_CH_HSPACE(a)  a
 180      =1  
 181      =1  // Index 0xa9 Defination
 182      =1  #define WIN_VZOOM(a)    (a-1)
 183      =1  #define WIN_HZOOM(a)    (a-1)
 184      =1  #define WIN_SADDR(a)    a
 185      =1  
 186      =1  // Index 0xab
 187      =1  #define WIN_SHADOW_EN   0x80
 188      =1  #define WIN_SHADOW_EN0    0x00
 189      =1  #define WIN_SHADOW_W(a)   a
 190      =1  
 191      =1  // ad
 192      =1  #define WIN_SHADOW_COLOR_EX   0x80
 193      =1  #define WIN_SHADOW_COLOR_EX0  0x00
 194      =1  #define WIN_MULTI_EN      0x40
 195      =1  #define WIN_MULTI_EN0     0x00
 196      =1  #define WIN_V_EXT_EN      0x20
 197      =1  #define WIN_V_EXT_EN0     0x00
 198      =1  #define WIN_CH_BDSH_SEL(a)    a
 199      =1  #define SEL_BORDER        0
 200      =1  #define SEL_SHADOW        1
 201      =1  #define WIN_CH_BDSH_COLOR_EX  0x08
 202      =1  #define WIN_CH_BDSH_COLOR_EX0 0x00
 203      =1  
 204      =1  #define OSD_Win_Num(a)      0x9e, a-1
 205      =1  #define OSD_Win_Start_Addr    0xa0
 206      =1  #define OSD_Win_Attr(a)       a
 207      =1  #define OSD_Win_Start(h,v)       (BYTE)(((WORD)h>>8) | (((WORD)v>>8)<<4)),(BYTE)h, (BYTE)v
 208      =1  #define OSD_Win_Width(a)      a
 209      =1  #define OSD_Win_Height(a)     a
 210      =1  #define OSD_Win_Border(a)     a
 211      =1  #define OSD_Win_HBorder(a)      a
 212      =1  #define OSD_Win_VBorder(a)      a
 213      =1  #define OSD_Win_CH_Space(a)     a
 214      =1  #define OSD_Win_ZM_SAddr(h,v,a)   ((h<<6)|(v<<4)|(a>>8)), (BYTE)a
 215      =1  #define OSD_Win_Shadow(a)     a
 216      =1  #define OSD_Win_Blending(a)     a
 217      =1  #define OSD_Win_CH_BorderShadow(a)  a
 218      =1  
 219      =1  
 220      =1  #define SetOSDWindowNum(winno)    WriteTW88(TW88_WINNUM, winno-1)
 221      =1  
 222      =1  //#define  OSD_Window_Attr(Trans_en,Color,3D_Type,3D_en,W_en)       (((( Trans_en | Color ) | 3D_Type) | 3
             -D_en) | W_en)
 223      =1  #define  OSD_Window_Attr(a,b,c,d,e)                 (((( a | b ) | c) | d) | e)
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 34  

 224      =1  #define  OSD_WShadow_Attr(W_Shadow_en,Color,Width)          W_Shadow_en | Color | Width
 225      =1  //#define  OSD_Blending(en,level)                   en | (level & 0x0f)
 226      =1  //#define  OSD_Ch_Effect(Multi, Effect_En, ShadowBorder, Color)   Multi | Effect_En | ShadowBorder | Color 
             - 
 227      =1  
 228      =1  
 229      =1  struct OSDStrInfo 
 230      =1  {
 231      =1    BYTE  cnt;
 232      =1    WORD  addr;
 233      =1    BYTE  attr;
 234      =1    DWORD str;
 235      =1  };
 236      =1  /*
 237      =1  struct BarInfo {
 238      =1    struct RegisterInfo BarCnt;
 239      =1    BYTE  winno;
 240      =1    BYTE  xoff;
 241      =1    BYTE  yoff;
 242      =1    BYTE  color;
 243      =1    int   bar_cnt;
 244      =1  };
 245      =1  */
 246      =1  struct FontData {
 247      =1    BYTE  font[27];
 248      =1  } ;
 249      =1  
 250      =1  //====================================================================
 251      =1  //  Internal OSD Function
 252      =1  void CopyCharToOSDRAM_TW88(BYTE Addr, BYTE attr, BYTE ch);
 253      =1  void CopyUDCharToOSDRAM_TW88(BYTE Addr, BYTE attr, BYTE ch);
 254      =1  //BYTE GetOSDWindowWidth_TW88(BYTE winno);
 255      =1  WORD GetOSDWindowSA_TW88(BYTE winno);
 256      =1  void SetOSDWindowX_TW88(BYTE winno, BYTE x);
 257      =1  void SetOSDWindowY_TW88(BYTE winno, BYTE y);
 258      =1  void SetOSDWindowWidth_TW88(BYTE winno, BYTE w);
 259      =1  void SetOSDWindowSA_TW88(BYTE winno, WORD sa);
 260      =1  
 261      =1  void SetOSDItalicsAndUnderline(BYTE italics, BYTE underline);
 262      =1  
 263      =1  void SetOSDHBorderWidth_TW88(BYTE winno, BYTE w);
 264      =1  //BYTE GetOSDWindowColor_TW88(BYTE winno);
 265      =1  void SetOSDWindowColor_TW88(BYTE CCWin, BYTE color);
 266      =1  void EnableOSDRAMAndChangeFont(BYTE type);
 267      =1  void WriteCharToOSDRAM(WORD addr, BYTE ch, BYTE attr);
 268      =1  
 269      =1  
 270      =1  void ShowOSDWindowAll(BYTE on);
 271      =1  void ShowOSDWindow_TW88(BYTE winno, BYTE onoff);
 272      =1  void ClearOSD_TW88(void);
 273      =1  //void CreateOSDWindow_TW88(BYTE winno, BYTE x, BYTE y, BYTE w, BYTE h, WORD sa, BYTE attr);
 274      =1  /*not yet!!
 275      =1  //ljy012304...CC_ADJUST_POS
 276      =1  void SetOSDWindowXS_TW88(BYTE winno, BYTE xs);
 277      =1  void SetOSDWindowYS_TW88(BYTE winno, BYTE ys);
 278      =1  */
 279      =1  
 280      =1  //====================================================================
 281      =1  //  OSDMenu Functions
 282      =1  
 283      =1  //--------------------------------------------------------------------
 284      =1  //  Functions used in only Menu
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 35  

 285      =1  #define   CONVERT_CODE      0x80
 286      =1  
 287      =1  void InitOSDWindow(BYTE *ptr);
 288      =1  
 289      =1  WORD GetOSDWindowX(BYTE winno);
 290      =1  WORD GetOSDWindowY(BYTE winno);
 291      =1  BYTE CreateOSDWindowOutline(BYTE winno, BYTE w, BYTE color);
 292      =1  void CreateOSDMenuWindow(BYTE, BYTE, BYTE, BYTE, BYTE, BYTE, BYTE);
 293      =1  void ClearOSDLine(BYTE winno, BYTE sx, BYTE sy, BYTE cnt, BYTE attr);
 294      =1  void WriteStringToAddr(WORD addr, BYTE *str, BYTE cnt);
 295      =1  void DrawAttrString(WORD addr, BYTE *str, BYTE cnt);
 296      =1  void DrawAttrCnt(WORD addr, BYTE color, BYTE cnt);
 297      =1  void ClearDataCnt(WORD, BYTE);
 298      =1  #define   SetOSDWindowX(A, B)       SetOSDWindowX_TW88(A, B)
 299      =1  #define   SetOSDWindowY(A, B)       SetOSDWindowY_TW88(A, B)
 300      =1  
 301      =1  //--------------------------------------------------------------------
 302      =1  //  Functions used in Menu and others
 303      =1  #define   ShowOSDWindow(A, B)       ShowOSDWindow_TW88(A, B)
 304      =1  #define   ClearOSD()              ClearOSD_TW88()
 305      =1  
 306      =1  //================================================================
 307      =1  //  Font
 308      =1  void DownloadUDFont(void);
 309      =1  #ifdef Hs_debug
 310      =1  void DisplayROMFont(BYTE);
 311      =1  void DisplayRAMFont(BYTE);
 312      =1  #endif
 313      =1  void DownloadFont(BYTE cod, CODE_P BYTE *fontdata);
 314      =1  //void DisplayGrid( void );
 315      =1  //void DisplayCone( void );
 316      =1  //void DisplayJapanese( void );
 317      =1  void TestRAMFont( void );
 318      =1  #ifdef BANKING
           =1 void DisplayMGrid( BYTE );
           =1 void DisplayMessage( void );
           =1 void DisplayChinese( void );
           =1 void DisplayJapanese( void );
           =1 void DisplayKorean( void );
           =1 void DisplayGridBank0( BYTE n );
           =1 void DisplayGridBank1( BYTE n );
           =1 #endif
 327      =1  
 328      =1  //================================================================
 329      =1  //  OSD COLOR
 330      =1  void Change_OSDColorLookup(void);
 331      =1  void Reset_OSDColorLookup(void);
 332      =1  
 333      =1  //====================================================================
 334      =1  //        Conversion
 335      =1  //====================================================================
 336      =1  BYTE utoa(WORD value, BYTE *str, BYTE radix);
 337      =1  BYTE ltoa_K(long value, BYTE *str, BYTE);
 338      =1  BYTE strlen( BYTE *str );
 339      =1  
 340      =1  #define CStrlen(A)        strlen(A)
 341      =1  
 342      =1  void WaitEndofDisplayArea(void);
 343      =1  
 344      =1  #endif  // __OSD_BASIC__
 345      =1  
  21          #include "dispinfo.h"
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 36  

   1      =1  #ifndef __DISPINFO__
   2      =1  #define __DISPINFO__
   3      =1  //==================================================================
   4      =1  //        Display Information
   5      =1  //==================================================================
   6      =1  #if (defined WQVGA) && (defined ANALOG_7INCH)
           =1 #define   INPUTINFO_ZOOM    WINZOOMx1
           =1 #define   LOGO_ZOOM     WINZOOMx3
           =1 
           =1 #else // (defined WQVGA) && (defined SHARP_LQ043T3DX02)
  11      =1  
  12      =1    #ifdef AWT_ML072S
  13      =1    #define   INPUTINFO_ZOOM    WINZOOMx4
  14      =1    #else
           =1   #define   INPUTINFO_ZOOM    WINZOOMx2
           =1   #endif
  17      =1  #define   LOGO_ZOOM     WINZOOMx2
  18      =1  #endif
  19      =1  //#define   VOL_ZOOM      WINZOOMx4
  20      =1  #define   MUTE_ZOOM     WINZOOMx3
  21      =1  #define   TVCHN_ZOOM      WINZOOMx4
  22      =1  #define   RATINGINFO_ZOOM   WINZOOMx3
  23      =1  #define     SCANTV_ZOOM     WINZOOMx2   //ljy012304
  24      =1  #define   PCINFO_ZOOM     WINZOOMx2
  25      =1  #define     BAR_ZOOM      WINZOOMx2
  26      =1  
  27      =1  
  28      =1  #define DVRStatus_OSDWIN  4 
  29      =1  #define DVRStatus_ADDR  180
  30      =1  
  31      =1  extern  BYTE  DisplayedOSD;
  32      =1  
  33      =1  
  34      =1  void ClearDisplayedOSD( BYTE newd );
  35      =1  void SetDisplayedOSD( BYTE newd );
  36      =1  BYTE GetDisplayedOSD(void);
  37      =1  void ClearOSDInfo(void);
  38      =1  
  39      =1  void DisplayInput(void);
  40      =1  BYTE ClearInput(void);
  41      =1  BYTE ClearInput2s(void);
  42      =1  
  43      =1  //void DisplayLogo(void);
  44      =1  
  45      =1  void ClearLogo(void);
  46      =1  
  47      =1  void DisplayPCInfo(BYTE CODE *ptr);
  48      =1  void ClearPCInfo(void);
  49      =1  void DisplayAutoAdjust(void);
  50      =1  void ClearAutoAdjust(void);
  51      =1  
  52      =1  
  53      =1  void DisplayVol(void);
  54      =1  #if 0
           =1 void DisplayBrightness(void);
           =1 #endif
  57      =1  #if 0
           =1 void DisplayMuteInfo(void);
           =1 #endif
  60      =1  void ClearMuteInfo(void);
  61      =1  BYTE CheckAndClearOSD(void);
  62      =1  BYTE ClearVlossOsd(void);
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 37  

  63      =1  #ifdef AWT_ML072S
  64      =1  void VlossHandler(void);
  65      =1  void Check_Vloss(void);
  66      =1  #endif
  67      =1  //==================================================================
  68      =1  //            TV Info
  69      =1  //==================================================================
  70      =1  
  71      =1  BYTE ClearTVInfo(void);
  72      =1  
  73      =1  #endif  // __DISPINFO__
  22          #include "debug.h"
   1      =1  #ifndef __DEBUG__
   2      =1  #define __DEBUG__
   3      =1  
   4      =1  #define DEBUG_ERR 1
   5      =1  #define DEBUG_WARN  2
   6      =1  #define DEBUG_INFO  3
   7      =1  #define DEBUG_BREAK 4
   8      =1  
   9      =1  #ifdef DEBUG_PAUSE
           =1 #define Pause(a)  { Printf("\r\n"); Printf(a); while(!RS_ready()); RS_rx(); }
           =1 #endif
  12      =1  //#define BURSTLOCK 7
  13      =1  
  14      =1  void DebugWindowControl (void) ;
  15      =1  void Draw_Debug_Char(void);
  16      =1  void DebugWindowCursor( BYTE flag ) ;
  17      =1  void DebugWindowData( BYTE flag ) ;
  18      =1  void Debug_Write(void);
  19      =1  void Debug_Read(void);
  20      =1  
  21      =1  
  22      =1  
  23      =1  #endif  // __DEBUG__
  24      =1  
  25      =1  #ifdef CHIP_MANUAL_TEST
           =1 BYTE DelaynCheck(void);
           =1 void ChipManualTest(void);
           =1 
           =1 #endif
  23          #include "etc_eep.h"
   1      =1  #ifndef __ETC_EEP__
   2      =1  #define __ETC_EEP__
   3      =1  
   4      =1  
   5      =1  ////eeprom.h
   6      =1  
   7      =1  //=========================================================================
   8      =1  //  EEPROM structure
   9      =1  //  0x00  BYTE  4 'TW88'
  10      =1  #define EEP_FWREV_MAJOR     0x04  //BYTE  1 F/W Rev.-major(Hex) 
  11      =1  #define EEP_FWREV_MINOR     0x05  //BYTE  1 F/W Rev.-minor(Hex)
  12      =1  #define EEP_DEBUGLEVEL      0x06  //BYTE  1 DebugLevel
  13      =1  //
  14      =1  #define EEP_AUTODETECT      0x07  //BYTE  1 Flag for Input Auto Detect  -0:Auto, 1:NTSC,....
  15      =1  #define EEP_AUTODETECTTYTE    0x08  //BYTE  1 Type of Auto-detect(will be value of register 0x1d)
  16      =1  //      ---------------------------------------------------------------
  17      =1  #define EEP_WIDEMODE      0x09  //BYTE  1   Wide Mode
  18      =1  
  19      =1  #define EEP_AUTORECOGNITION   0x0a  //BYTE  1 Auto Recognition
  20      =1  #define EEP_VIDEOMODE     0x0b  //BYTE  1   Video Mode
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 38  

  21      =1  
  22      =1  #define EEP_OSDLANG       0x0c  //BYTE  1   OSDLang           // 0
  23      =1  
  24      =1  #define EEP_OSDPOSITIONMODE   0x0d  //BYTE  1 OSD Position Mode
  25      =1  #define EEP_CCD         0x0e  //BYTE  1 Closed Caption- 0: off, 1:on
  26      =1  
  27      =1  #define EEP_INPUTSELECTION    0x0f  //BYTE  1 InputSelection
  28      =1  
  29      =1  //
  30      =1  #define EEP_PC_CONTRAST     0x10
  31      =1  #define EEP_PC_BRIGHT     0x11
  32      =1  
  33      =1  #define EEP_CONTRAST      0x12  //BYTE  1 Contrast 
  34      =1  #define EEP_BRIGHTNESS      0x13  //BYTE  1 Brightness
  35      =1  #define EEP_SATURATION_U    0x14  //BYTE  1 Saturation :U
  36      =1  #define EEP_SATURATION_V    0x15  //BYTE  1 Saturation :V
  37      =1  #define EEP_SHARPNESS     0x16  //BYTE  1 Sharpness 
  38      =1  #define EEP_HUE         0x17  //BYTE  1 Hue                    
  39      =1  
  40      =1  //====================================HS AWT 981001
  41      =1  #define  EEP_AutoMode           0xa0
  42      =1  #define  EEP_IMAGEMode          0xa1
  43      =1  #define  EEP_RearMode           0xa2
  44      =1  #define  EEP_COSDMode           0xa3
  45      =1  #define  EEP_GAUGEMode          0xa4
  46      =1  #define  EEP_CAMAMode           0xa5 
  47      =1  #define  EEP_CAMBMode           0xa6
  48      =1  #define  EEP_CAMCMode           0xa7
  49      =1  #define  EEP_CAMRMode           0xa8
  50      =1  #define  EEP_CAMOutMode         0xa9  
  51      =1  #define  EEP_TimeStep           0xaa
  52      =1  #define  EEP_Powerflag          0xab   
  53      =1  #define  EEP_ONOFFChoice        0xac 
  54      =1  
  55      =1  #define  EEP_PRIORITY           0xad
  56      =1  #define  EEP_JUMPMode           0xae
  57      =1  #define  EEP_NowModeState       0xaf
  58      =1  #define  EEP_SelectMode         0xb0
  59      =1  #define  EEP_PriorityOffSelectMode  0xb1
  60      =1  #define  EEP_AudioRecord    0xb2
  61      =1  
  62      =1  #define  EEP_FirstNumber    0xb3
  63      =1  #define  EEP_SecondNumber   0xb4
  64      =1  #define  EEP_ThridNumber    0xb5
  65      =1  #define  EEP_FourthNumber   0xb6
  66      =1  
  67      =1  #define  EEP_CAMNUMBER     0xb7
  68      =1  #define  EEP_PELCO       0xb8
  69      =1  #define  EEP_Baud_rate     0xb9
  70      =1  #define  EEP_TriggerVGA    0xba
  71      =1  #define  EEP_DVRDisplay    0xbb
  72      =1  #define  EEP_IMAGE_A_Mode    0xbc//andy A1.4 20100113
  73      =1  #define  EEP_IMAGE_B_Mode    0xbd//andy A1.4 20100113
  74      =1  #define  EEP_IMAGE_C_Mode    0xbe//andy A1.4 20100113
  75      =1  
  76      =1  #define  EEP_SDCardDetect    0xbf//andy A1.4 20100113
  77      =1  
  78      =1  #ifdef HTRV
           =1 #define  EEP_Gauge_VStart  0x211   //WILLIAM-970318
           =1 static  BYTE GaugeVStart;
           =1 #endif
  82      =1  
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 39  

  83      =1  #define  EEP_DELAYCAMA           0xC0 
  84      =1  #define  EEP_DELAYCAMB           0xC1
  85      =1  #define  EEP_DELAYCAMC           0xC2
  86      =1  #define  EEP_DELAYCAMR           0xC3
  87      =1  #ifdef USE_CAMD
           =1 #define  EEP_DELAYCAMD           0xC4
           =1 #endif
  90      =1  //#define  EEP_SelectModeBuf         0xb2
  91      =1  #define  EEP_ReverseMode    0xc5
  92      =1  #define  EEP_JUMPAV_TIMESET 0xc6
  93      =1  #if 0
           =1 #define  EEP_Resolution     0xc0
           =1 #define  EEP_FPS        0xc1
           =1 #define  EEP_Quality      0xc2
           =1 #define  EEP_RecordMode     0xc3
           =1 #define  EEP_RecordLength   0xc4
           =1 #define  EEP_PreAlarmLength   0xc5
           =1 #define  EEP_PostAlarmLength  0xc6
           =1 #endif
 102      =1  //====================================HS AWT 981001
 103      =1  
 104      =1  #ifdef AWT_ADD_TRIGGER_DELAY_FUN  
 105      =1  #define  EEP_CamADelay    0x21b
 106      =1  #define  EEP_CamBDelay    0x21c
 107      =1  #define  EEP_CamCDelay    0x21d
 108      =1  #define  EEP_CamRDelay    0x21e
 109      =1  #endif
 110      =1  //====================================
 111      =1  //
 112      =1  //        ---------------------------------------------------------------
 113      =1  #define EEP_PCAUDIOPVOL   0x37  //BYTE  1   AudioVol
 114      =1  #define EEP_AUDIOPVOL     0x38  //BYTE  1   AudioVol
 115      =1  #define EEP_AUDIOBALANCE    0x39  //BYTE  1   AudioBalance
 116      =1  //
 117      =1  //        ---------------------------------------------------------------
 118      =1  
 119      =1  #define EEP_BLOCKMOVIE      0x40  //BYTE  1 BlockedMovie:Blocked rating for Movie 
 120      =1  #define EEP_BLOCKTV       0x41  //BYTE  1 BlockedTV:Blocked rating for TV     
 121      =1  #define EEP_FVSLD       0x42  //BYTE  6
 122      =1  //                            7    6       4    3    2    1    0
 123      =1  //  FVSLD Level                        ALL   FV(V)   S    L    D    
 124      =1  //  0x43    BYTE    1   TV-Y            X  
 125      =1  //  0x44  BYTE    1   TV-Y7           X    X 
 126      =1  //  0x45  BYTE    1   TV-G            X 
 127      =1  //  0x46  BYTE    1   TV-PG           X       X    X    X    X
 128      =1  //  0x47  BYTE    1   TV-14           X       X    X    X    X 
 129      =1  //  0x48  BYTE    1   TV-MA           X       X    X    X
 130      =1  //
 131      =1  #define EEP_VCHIPPASSWORD   0x49  //BYTE  4   OSDPassword         //Defualt:3366
 132      =1  //      ---------------------------------------------------------------
 133      =1  //
 134      =1  //
 135      =1  //  0x61  WORD  2   PanelXRes
 136      =1  //  0x63  WORD  2 PanelYRes
 137      =1  //  0x65  BYTE  1 PanelHsyncMinPulseWidth
 138      =1  //  0x66  BYTE  1 PanelVsyncMinPulseWidth
 139      =1  //  0x67  WORD  2 PanelHminBackPorch
 140      =1  //  0x69  BYTE  1 PanelHsyncPolarity
 141      =1  //  0x6a  BYTE  1 PanelVsyncPolarity
 142      =1  //  0x6b  WORD  2 PanelDotClock
 143      =1  //  0x6d  BYTE  1 PanelPixsPerClock
 144      =1  //  0x6e  BYTE  1 PanelDEonly
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 40  

 145      =1  //      ---------------------------------------------------------------
 146      =1  //
 147      =1  //  0x80  PC Data
 148      =1  //
 149      =1  //      ---------------------------------------------------------------
 150      =1  //
 151      =1  //  0x300 TV Data
 152      =1  //
 153      =1  //  --- NTSC_TV -------------------------------------------------------------
 154      =1  //  CNT_SAVEDAIR      BYTE  1   Total count of saved Air TV Channel.
 155      =1  //  IDX_CURAIR        BYTE  1   Index of Current Air TV Channel
 156      =1  //  CHN_CURAIR        BYTE    1   Current Air TV Channel.
 157      =1  //
 158      =1  //  FIRSTSAVED_AIRCHN   BYTE    1 First saved Air TV channel no (maximum 100)
 159      =1  //  ....
 160      =1  //
 161      =1  //  CNT_SAVEDCABLE      BYTE  1   Total count of saved Cable TV Channel.
 162      =1  //  IDX_CURCABLE      BYTE  1   Index of Current Cable TV Channel
 163      =1  //  CHN_CURCABLE      BYTE    1   Current Cable TV Channel.
 164      =1  //
 165      =1  //  FIRSTSAVED_CABLECHN   BYTE  1 First saved Cable TV channel no (maximum 100)
 166      =1  //
 167      =1  //  --- PAL_TV --------------------------------------------------------------
 168      =1  //  PR_CUR          BYTE  1   Current PR no.
 169      =1  //  FIRST_SAVEDPR     DWORD 4   Freq of PR0.  (TOTAL_PR)
 170      =1  //  FIRST_SAVEDPR+4     DWORD   4   Freq of PR1.
 171      =1  //  .....
 172      =1  //
 173      =1  
 174      =1  
 175      =1  
 176      =1  //
 177      =1  // Offset of EEPROM
 178      =1  //
 179      =1  /*
 180      =1  #define VIDEOCONTRAST   0x18    // for NTSC.(PAL:0x20,SECAM:0x28)
 181      =1  #define VIDEOBRIGHTNESS   0x19
 182      =1  #define VIDEOSATURATION_U 0x1a
 183      =1  #define VIDEOSATURATION_V 0x1b
 184      =1  #define VIDEOHUE      0x1c    // only for NTSC
 185      =1  #define VIDEOSHARPNESS    0x1d
 186      =1  */
 187      =1  #define CCCOLOR   0x52
 188      =1  #define VOLZOOM   0x53
 189      =1  
 190      =1  #define PANELINFO 0x61
 191      =1  
 192      =1  // PAL_TV
 193      =1  #define  PR_CUR         0x301 
 194      =1  #define  FIRST_SAVEDPR      0x308 
 195      =1   #define TVFREQ_HIGH 0 
 196      =1   #define TVFREQ_LOW  1
 197      =1  #ifdef PAL_TV
           =1  #define TVFINETUNE  2
           =1     // NOT Finetune: 0 , Range: -32 ~ +32
           =1  #define TVPRSYSTEM  3  
           =1     // bit 7: Add:1 Ereased :0
           =1     // 
           =1  #define TVCHNAME    4
           =1 
           =1  #define BYTEPERCHANNEL 9 
           =1 #endif
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 41  

 207      =1  // NTSC_TV
 208      =1  #define  EEP_TVInputSel     0x302
 209      =1  #define  CHN_CURAIR       0x303 
 210      =1  #define  FIRSTSAVED_AIRCHN    0x308 
 211      =1  #define  CHN_CURCABLE     0x403 
 212      =1  #define  FIRSTSAVED_CABLECHN  0x408 
 213      =1  #ifdef NTSC_TV
           =1  #define TVFINETUNE  0
           =1     // NOT Finetune: 0 , Range: -32 ~ +32
           =1  #define TVPRSYSTEM  1  
           =1     // bit 7: Add:1 Ereased :0
           =1     // 
           =1  #define BYTEPERCHANNEL 2
           =1 #endif
 221      =1  
 222      =1  
 223      =1  
 224      =1  
 225      =1  WORD GetFWRevEE(void);
 226      =1  void SaveFWRevEE(WORD);
 227      =1  
 228      =1  BYTE GetDebugLevelEE(void);
 229      =1  void SaveDebugLevelEE(BYTE);
 230      =1  
 231      =1  #ifdef WIDE_SCREEN
           =1 BYTE GetWideModeEE(void);
           =1 void SaveWideModeEE(BYTE dl);
           =1 #endif
 235      =1  
 236      =1  
 237      =1  //BYTE GetRange4CoarseEE(void);
 238      =1  //void SaveRange4CoarseEE(BYTE);
 239      =1  
 240      =1  BYTE GetPossibleAutoDetectStdEE(void);
 241      =1  void SetPossibleAutoDetectStdEE(void);
 242      =1  
 243      =1  //BYTE GetOSDXPositionEE(void);
 244      =1  //BYTE GetOSDYPositionEE(void);
 245      =1  BYTE GetClosedCaptionFlagEE(void);
 246      =1  
 247      =1  BYTE GetVideoDatafromEE(BYTE);
 248      =1  void SaveVideoDatatoEE(BYTE offset, BYTE ndata);
 249      =1  
 250      =1  //BYTE GetVideoBrightnessEE(void);
 251      =1  //BYTE GetVideoSaturationEE(BYTE);
 252      =1  //BYTE GetVideoHueEE(void);
 253      =1  //BYTE GetVideoSharpnessEE(void);
 254      =1  
 255      =1  //void SaveVideoContrastEE(BYTE ndata);
 256      =1  //void SaveVideoBrightnessEE(BYTE ndata);
 257      =1  //void SaveVideoSaturationEE(BYTE, BYTE ndata);
 258      =1  //void SaveVideoHueEE(BYTE ndata);
 259      =1  //void SaveVideoSharpnessEE(BYTE ndata);
 260      =1  
 261      =1  BYTE GetOSDPositionModeEE(void);
 262      =1  void SaveOSDPositionModeEE(BYTE ndata);
 263      =1  //void SaveOSDXPositionEE(BYTE);
 264      =1  //void SaveOSDYPositionEE(BYTE);
 265      =1  
 266      =1  void SaveClosedCaptionFlagEE(BYTE);
 267      =1  
 268      =1  BYTE GetBlockedTVEE(void);      
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 42  

 269      =1  void SaveBlockedTVEE(BYTE vi);    
 270      =1  BYTE GetBlockedTV_FLDSLEE( BYTE level ) ;
 271      =1  void SaveBlockedTV_FLDSLEE(BYTE level, BYTE vi) ;
 272      =1  
 273      =1  BYTE GetBlockedMovieEE(void);   
 274      =1  void SaveBlockedMovieEE(BYTE vi); 
 275      =1  #if 0
           =1 BYTE GetInputSelectionEE(void);
           =1 #endif
 278      =1  void SaveInputSelectionEE(BYTE val);
 279      =1  
 280      =1  //BYTE GetOSDDurationEE(void);
 281      =1  //void SaveOSDDurationEE(BYTE val);
 282      =1  
 283      =1  BYTE GetOSDLangEE(void);
 284      =1  void SaveOSDLangEE(BYTE val);
 285      =1  
 286      =1  //ljy100303...BYTE GetOSDZoomEE(void);
 287      =1  //ljy100303...void SaveOSDZoomEE(BYTE val);
 288      =1  
 289      =1  BYTE GetAudioVolEE(void);
 290      =1  void SetAudioVolEE( BYTE vol );
 291      =1  BYTE GetPCAudioVolEE(void);
 292      =1  void SetPCAudioVolEE( BYTE vol );
 293      =1  #if 0
           =1 BYTE GetAudioBalanceEE(void);
           =1 void SetAudioBalanceEE( BYTE vol );
           =1 BYTE GetAudioBassEE(void);
           =1 void SetAudioBassEE( BYTE vol );
           =1 BYTE GetAudioTrebleEE(void);
           =1 void SetAudioTrebleEE( BYTE vol );
           =1 #endif
 301      =1  //BYTE GetAudioEffectEE(void);
 302      =1  //void SetAudioEffectEE( BYTE vol );
 303      =1  
 304      =1  void ClearBasicEE(void);
 305      =1  
 306      =1  BYTE ValidPassword(DATA_P BYTE *numstr, BYTE index);
 307      =1  BYTE SetNewPassword(DATA_P BYTE *numstr, BYTE index);
 308      =1  
 309      =1  //WORD GetPanelXRes(void);
 310      =1  //WORD GetPanelYRes(void);
 311      =1  BYTE GetPanelHsyncMinPulseWidth(void);
 312      =1  BYTE GetPanelVsyncMinPulseWidth(void);
 313      =1  WORD GetPanelHMinBackPorch(void);
 314      =1  BYTE GetPanelHsyncPolarity(void);
 315      =1  BYTE GetPanelVsyncPolarity(void);
 316      =1  WORD GetPanelDotClock(void);
 317      =1  WORD GetPanelMaxClock(void);
 318      =1  BYTE GetPanelPixsPerClock(void);
 319      =1  // Not used yet *************************  BYTE GetPanelDEonly(void);
 320      =1  
 321      =1  void AddTVChannelEE( BYTE tvtype, BYTE chn);
 322      =1  BYTE GetTVChannelEE( BYTE tvtype, BYTE inx);
 323      =1  void ResetTVChannelEE( BYTE tvtype );
 324      =1  BYTE GetTVChannelCntEE(BYTE tvtype);
 325      =1  BYTE GetTVChnIdxEE(BYTE tvtype);
 326      =1  BYTE GetCurTVChannelEE(BYTE tvtype);
 327      =1  void SetTVChnIdxEE(BYTE tvtype, BYTE newd);
 328      =1  void SetCurTVChannelEE(BYTE tvtype, BYTE newd);
 329      =1  BYTE InsertTVChannelEE(BYTE tvtype, BYTE newd);
 330      =1  BYTE RemoveTVChannelEE(BYTE tvtype, BYTE newd);
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 43  

 331      =1  
 332      =1  void SetTVPrEE(void);
 333      =1  BYTE GetTVPrEE(void);
 334      =1  void SetTVFreqEE(BYTE, WORD);
 335      =1  WORD GetTVFreqEE(BYTE);
 336      =1  void SetFineTuneEE(BYTE, BYTE);
 337      =1  BYTE GetFineTuneEE(BYTE);
 338      =1  BYTE GetTVPrSystem(BYTE);
 339      =1  void SetTVPrSystem(BYTE, BYTE);
 340      =1  BYTE GetTVInputSelEE(void);
 341      =1  void SetTVInputSelEE(BYTE);
 342      =1  
 343      =1  #define GetVInputStdDetectModeEE()        ReadEEP(EEP_AUTODETECTTYTE)
 344      =1  #define SaveVInputStdDetectModeEE(A)      WriteEEP(EEP_AUTODETECTTYTE, A)
 345      =1  
 346      =1  #define GetAutoRecogntionEE()         ReadEEP(EEP_AUTORECOGNITION)
 347      =1  #define SaveAutoRecogntionEE(A)         WriteEEP(EEP_AUTORECOGNITION, A)
 348      =1  
 349      =1  #define SetVideoModeEE( ctid )          WriteEEP( EEP_VIDEOMODE, ctid )
 350      =1  #define GetVideoModeEE()            ReadEEP( EEP_VIDEOMODE )
 351      =1  
 352      =1  #define GetPanelContrastEE()          ReadEEP(0x10)
 353      =1  
 354      =1  #if defined( SUPPORT_PC ) || defined( SUPPORT_DTV )
           =1 //#define GetPanelHueEE()             ReadEEP(0x28)
           =1 //#define GetPanelSharpnessEE()         ReadEEP(0x29)
           =1 #define GetPanelBrightnessEE()          ReadEEP(0x11)
           =1 //#define GetPanelSaturationEE()          ReadEEP(0x2a)
           =1 
           =1 //#define SavePanelHueEE(A)           WriteEEP(0x28, A)
           =1 //#define SavePanelSharpnessEE(A)         WriteEEP(0x29, A)
           =1 #define SavePanelContrastEE(A)          WriteEEP(0x10, A)
           =1 #define SavePanelBrightnessEE(A)        WriteEEP(0x11, A)
           =1 //#define SavePanelSaturationEE(A)        WriteEEP(0x2a, A)
           =1 #endif
 366      =1  
 367      =1  /*
 368      =1  #define GetDigitalVideoContrastEE()       ReadEEP(0x2b)
 369      =1  #define GetDigitalVideoBrightnessEE()     ReadEEP(0x2c)
 370      =1  #define GetDigitalVideoHueEE()          ReadEEP(0x2d)
 371      =1  #define GetDigitalVideoSaturationEE(off)    ReadEEP(0x2e+off)
 372      =1  
 373      =1  #define SaveDigitalVideoContrastEE(A)     WriteEEP(0x2b, A)
 374      =1  #define SaveDigitalVideoBrightnessEE(A)     WriteEEP(0x2c, A)
 375      =1  #define SaveDigitalVideoHueEE(A)        WriteEEP(0x2d, A)
 376      =1  #define SaveDigitalVideoSaturationEE(off,A)   WriteEEP(0x2e+off, A)
 377      =1  */
 378      =1  
 379      =1  #endif  // __ETC_EEP__
  24          #include "measure.h"
   1      =1  #ifndef __MEASURE__
   2      =1  #define __MEASURE__
   3      =1  
   4      =1  #define EE_DOS        0
   5      =1  
   6      =1  #define EE_SP1        1
   7      =1  #define EE_SP2        2
   8      =1  #define EE_SP3        3
   9      =1  
  10      =1  #define EE_VGA_60     4
  11      =1  #define EE_VGA_66     5
  12      =1  #define EE_VGA_70     6
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 44  

  13      =1  #define EE_VGA_72     7
  14      =1  #define EE_VGA_75     8
  15      =1  #define EE_VGA_85     9
  16      =1  
  17      =1  #define EE_SVGA_56      10
  18      =1  #define EE_SVGA_60      11
  19      =1  #define EE_SVGA_70      12
  20      =1  #define EE_SVGA_72      13
  21      =1  #define EE_SVGA_75      14
  22      =1  #define EE_SVGA_85      15
  23      =1  
  24      =1  #define EE_832_75     16
  25      =1  
  26      =1  #define EE_XGA_60     17
  27      =1  #define EE_XGA_70     18
  28      =1  #define EE_XGA_72     19
  29      =1  #define EE_XGA_75     20
  30      =1  #define EE_XGA_85     21
  31      =1  
  32      =1  #define EE_1152_60      22
  33      =1  #define EE_1152_70      23
  34      =1  #define EE_1152_75      24
  35      =1  
  36      =1  #define EE_SXGA_60      25
  37      =1  #define EE_SXGA_70      26
  38      =1  #define EE_SXGA_75      27
  39      =1  
  40      =1  #define EE_RGB_480P     28
  41      =1  #define EE_RGB_720P     29
  42      =1  #define EE_RGB_720P50   30
  43      =1  #define EE_RGB_1080I    31
  44      =1  #define EE_RGB_1080I50A   32
  45      =1  #define EE_RGB_1080I50B   33
  46      =1  #define EE_RGB_480I     34
  47      =1  #define EE_RGB_576I     35
  48      =1  #define EE_RGB_576P     36
  49      =1  
  50      =1  #define EE_YPbPr_480P   37
  51      =1  #define EE_YPbPr_720P   38
  52      =1  #define EE_YPbPr_720P50   39
  53      =1  #define EE_YPbPr_1080I    40
  54      =1  #define EE_YPbPr_1080I50A 41
  55      =1  #define EE_YPbPr_1080I50B 42
  56      =1  #define EE_YPbPr_480I   43
  57      =1  #define EE_YPbPr_576I   44
  58      =1  #define EE_YPbPr_576P   45
  59      =1  
  60      =1  #define EE_PC_MAX     46
  61      =1  
  62      =1  #define EE_PC_NO_SIGNAL   0xfe
  63      =1  #define EE_PC_UNKNOWN   0xff
  64      =1  
  65      =1  struct _PCMDATA {
  66      =1    CODE_P BYTE  Support;
  67      =1    CODE_P WORD  HAN;
  68      =1    CODE_P WORD  VAN;
  69      =1    CODE_P WORD  IVF;
  70      =1    CODE_P WORD  CLOCK;
  71      =1    CODE_P WORD  low;
  72      =1    CODE_P WORD  high;
  73      =1    CODE_P WORD  Hstart;
  74      =1    CODE_P WORD  Vstart;
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 45  

  75      =1    CODE_P WORD  IPF;   // 0.1MHz
  76      =1    CODE_P WORD  PPF;   // 0.1MHz
  77      =1    CODE_P BYTE  VBack;
  78      =1  };
  79      =1  #ifndef AUTOCALC_PC
           =1 
           =1 #ifdef SUPPORT_DTV
           =1 struct _DTVMDATA {
           =1   CODE_P BYTE Reg62;
           =1   CODE_P BYTE RegBC;
           =1   CODE_P BYTE RegBD;
           =1   CODE_P BYTE RegBE;
           =1   CODE_P WORD PHP;
           =1 };
           =1 #endif
           =1 #endif
  91      =1  #if defined XGA
           =1   #define MAX_PPF    90000000
           =1 #elif defined SXGA
           =1   #define MAX_PPF   135000000
           =1 #elif defined WXGA
           =1   #define MAX_PPF    90000000
           =1 #elif defined WVGA
  98      =1    #define MAX_PPF    90000000
  99      =1  #elif defined VGA
           =1   #define MAX_PPF    50000000
           =1 #elif defined SVGA
           =1   #define MAX_PPF    80000000
           =1 #elif defined QVGA
           =1   #define MAX_PPF    30000000
           =1 #elif defined WQVGA
           =1   #define MAX_PPF    30000000
           =1 #endif
 108      =1  
 109      =1  extern BYTE cLastSyncLoss;
 110      =1  extern BYTE PcMode;
 111      =1  
 112      =1  void CompLT170E2(void);
 113      =1  
 114      =1  WORD gap(WORD a, WORD b);
 115      =1  
 116      =1  //===================================================================
 117      =1  WORD GetHpnVpn(BYTE);
 118      =1  
 119      =1  WORD ConvertBasedOnInput(WORD dat);
 120      =1  
 121      =1  BYTE IsDTVInput(void);
 122      =1  
 123      =1  void SetVValueForPanel(WORD vstart);
 124      =1  BYTE SetHValueForPanel(void);
 125      =1  BYTE GetActiveRegion(void);
 126      =1  
 127      =1  BYTE DetectAndSetForVGAInput(BYTE);
 128      =1  #ifdef SUPPORT_DTV
           =1 BYTE DetectAndSetForDTVInput(BYTE);
           =1 #endif
 131      =1  void CheckPCinput(void);
 132      =1  void CheckDTVinput(void);
 133      =1  
 134      =1  WORD GetCoarseValue(void);
 135      =1  BYTE GetPhaseValue(void);
 136      =1  WORD SetPCCoarseValue(BYTE val);
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 46  

 137      =1  BYTE SetPhaseValue(BYTE val);
 138      =1  
 139      =1  void DisplayResultAndSetActiveRange(void);
 140      =1  
 141      =1  //=============================================================================
 142      =1  //                    PC Screen Position Move Functions
 143      =1  //=============================================================================
 144      =1  void MoveActiveVpos(BYTE val);    // Up/Down
 145      =1  void MoveActiveHpos(BYTE val);    // Left/Right
 146      =1  
 147      =1  BYTE GetVPosition(void);
 148      =1  BYTE SetVPosition(BYTE val);
 149      =1  BYTE GetHPosition(void);
 150      =1  BYTE SetHPosition(BYTE val);
 151      =1  
 152      =1  void ResetPCValue(void);
 153      =1  
 154      =1  CODE_P BYTE *GetPCInputSourceName(void);
 155      =1  BYTE AutoAdjust(void);
 156      =1  
 157      =1  #endif // __MEASURE__
  25          #include "Printf.h"
   1      =1  #ifndef __PRINTF__
   2      =1  #define __PRINTF__
   3      =1  
   4      =1  #define _outchar(c) while(1) { if( !RS_Xbusy ) { SBUF = c; RS_Xbusy=1; break; } }
   5      =1  #define Putch(c) _outchar(c)
   6      =1  
   7      =1  #ifdef SERIAL
   8      =1  
   9      =1   void Printf ( const char CODE_P *fmt, ... );
  10      =1   void Puts ( CODE_P char *ptr );
  11      =1  
  12      =1  #define TW2835Cmd(a)   Puts ( a )
  13      =1  
  14      =1  #else
           =1 
           =1  #undef  DEBUG
           =1  #define Printf(a,b)  //
           =1  #define Puts(a)      //
           =1 
           =1 #endif
  21      =1  
  22      =1  
  23      =1  #ifndef DEBUG
  24      =1  
  25      =1   #define dPuts(a)   //
  26      =1   #define wPuts(a)   //
  27      =1   #define ePuts(a)   //
  28      =1  
  29      =1  #else
           =1 
           =1  void dPrintf( const char CODE_P *fmt, ... );
           =1  void wPrintf( const char CODE_P *fmt, ... );
           =1  void ePrintf( const char CODE_P *fmt, ... );
           =1 
           =1  void dPuts( CODE_P char *ptr );
           =1  void wPuts( CODE_P char *ptr );
           =1  void ePuts( CODE_P char *ptr );
           =1 
           =1 #endif  // DEBUG
  40      =1  
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 47  

  41      =1  BYTE Getch(void);
  42      =1  BYTE Getche(void);
  43      =1  
  44      =1  
  45      =1  #endif  //__PRINTF__
  26          #include "audio.h"
   1      =1  
   2      =1  #define MAX_SOUND_VOLUME 50
   3      =1  extern  BYTE  AudioVol;
   4      =1  extern  BYTE  PCAudioVol;
   5      =1  
   6      =1  //BYTE ResetMSP(void);
   7      =1  //void SetMSPSCARTPrescale(void);
   8      =1  //void SetMSPSourceSel(void);
   9      =1  //void SetMSPVol(void);
  10      =1  
  11      =1  //BYTE AudioAutoStdDetection(void);
  12      =1  //BYTE SteroMonoDetection(void);
  13      =1  
  14      =1  //BYTE TunerAudio(void);
  15      =1  //void ExtAudio(void);
  16      =1  //id PCAudio(void);
  17      =1  //id MuteOn(void);
  18      =1  //BYTE GetAudioVol(void);
  19      =1  BYTE ChangeVol(char);
  20      =1  //BYTE GetAudioBalance(void);
  21      =1  //BYTE ChangeBalance(char);
  22      =1  //BYTE GetAudioBass(void);
  23      =1  //BYTE ChangeBass(char);
  24      =1  //BYTE GetAudioTreble(void);
  25      =1  //BYTE ChangeTreble(char);
  26      =1  //BYTE GetAudioEffect(void);
  27      =1  //BYTE ChangeAudioEffect(char amount);
  28      =1  //void ToggleAudioMute(void);
  29      =1  //void CheckAndClearMuteOn(void);
  30      =1  
  31      =1  //BYTE IsAudioMuteOn(void);
  32      =1  //void SetAudioMute(BYTE on );
  33      =1  //void ChangeMTS(BYTE type);
  34      =1  //void AudioOff(void);
  35      =1  void AudioMute(bit mute);
  36      =1  extern void    Wait_ms(WORD Tms);
  37      =1  
  38      =1  //#define AudioOn()     SetMSPVol()
  39      =1  //void ResetAudioValue();
  27          #include "osdmenu.h"
   1      =1  //osdmenu.h
   2      =1  //LJY10292001
   3      =1  #ifndef __OSDMENU__
   4      =1  #define __OSDMENU__
   5      =1  
   6      =1  //=======================================================================
   7      =1  // 
   8      =1  //BYTE GetOSDDuration(void);
   9      =1  
  10      =1  void ResetVideoValue(void);
  11      =1  //#if defined( SUPPORT_PC ) || defined( SUPPORT_DTV )
  12      =1  //void ResetPCValue(void);
  13      =1  //#endif
  14      =1  BYTE GetOSDMenuLevel( void );
  15      =1  
  16      =1  void DrawMenulist(BYTE);
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 48  

  17      =1  void Display_EnterPin(void);
  18      =1  void OSDHighMenu_sub(void);
  19      =1  void ResetOSDValue(void);
  20      =1  #ifdef E_Wintek
           =1 void ResetUESROSDValue(void);
           =1 #endif
  23      =1  //BYTE OnChangingValue(void);
  24      =1  //Not used yet *******************BYTE OnChangingTime(void);
  25      =1  
  26      =1  //WORD GetOSDclock(void);
  27      =1  
  28      =1  #ifdef HS_NEWOSDMENU
           =1 void InitOSDMenu(BYTE OSD_ID);
           =1 void OpenOSDMenu(BYTE OSD_ID);
           =1 #else
  32      =1  void InitOSDMenu(void);
  33      =1  void OpenOSDMenu(void);
  34      =1  #endif
  35      =1  BYTE CloseOSDMenu(void);
  36      =1  
  37      =1  void OpenFORMATMenu(void);
  38      =1  void OSDHighMenu(void);
  39      =1  void OSDSelect(void);
  40      =1  void OSDCursorMove(BYTE flag );
  41      =1  void OSDLeftRight(BYTE flag );
  42      =1  void OSDValueUpDn(BYTE flag);
  43      =1  WORD SetItemValue( BYTE id, BYTE flag );
  44      =1  BYTE DoAction(BYTE id);
  45      =1  
  46      =1  BYTE SaveValue1(void);
  47      =1  void ClearValueWin(void);
  48      =1  
  49      =1  void OSDNumber( BYTE num );
  50      =1  
  51      =1  void Set4WideScreen(BYTE id);
  52      =1  
  53      =1  void SetRGBContrast( BYTE id, BYTE val );
  54      =1  BYTE SetPCColorTemp(BYTE flag);
  55      =1  void ResetPanelAttributeValue(void);
  56      =1  WORD GetItemValue( BYTE);
  57      =1  void DisplayViewBar( WORD,BYTE);
  58      =1  void DrawNum(WORD, CODE_P struct NumType *, WORD);
  59      =1  void DrawStringByLang( WORD, CODE_P struct EnumType *, WORD);
  60      =1  
  61      =1  void DisplayVolumebar(BYTE val);
  62      =1  BYTE GetOSDLang(void);
  63      =1  void InitOSDMenuXY(void);
  64      =1  
  65      =1  void Display_TVGuide_Window(void);
  66      =1  void Display_TVGuide_Status(void);
  67      =1  
  68      =1  void ChangeVchip_LevelCursor(BYTE);
  69      =1  void ChangeVchip_ContentCursor(BYTE);
  70      =1  void Select_VchipLevel(void);
  71      =1  void SetVideoMode(BYTE mode);
  72      =1  BYTE GetVideoDatawithOffset(BYTE offset);
  73      =1  void SetVideoContrast(BYTE newv);
  74      =1  void SetVideoBrightness(BYTE newv);
  75      =1  void SetVideoHue(BYTE newv) ;
  76      =1  void SetVideoSaturation(BYTE svtype, BYTE newv) ;
  77      =1  BYTE SetVideoSharpness(BYTE flag) ;
  78      =1  void SetVideoBacklight(BYTE newv) ;
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 49  

  79      =1  //------------------------------------------------andy awt 981013
  80      =1  //void DaySelect(BYTE);
  81      =1  void CAMOutDSel(BYTE val);
  82      =1  void DVRAodioSel(BYTE  val);
  83      =1  
  84      =1  //------------------------------------------------andy awt 981013
  85      =1  
  86      =1  void DisplayLineOSD(void);  // OSD Line display Demo
  87      =1  #ifdef CENEC_OSDMENU_ACCM8
           =1 BYTE ChkOSDMENU_TOPWIN(void);  //Weylis 080930
           =1 BYTE ChkOSDMENU_WINDOW(void);
           =1 BYTE ChkOSDMENU(void);
           =1 #endif
  92      =1  
  93      =1  #ifdef AWT_ADD_TRIGGER_DELAY_FUN  //Pinchi 20150209 add
  94      =1  void AWT_DisplayViewBar(WORD addr , BYTE val);
  95      =1  #endif
  96      =1  struct MenuType {
  97      =1    BYTE  width,  height;
  98      =1    BYTE  TitleColor; 
  99      =1    BYTE  CursorColor;
 100      =1  };
 101      =1  
 102      =1  struct NumType {
 103      =1    BYTE  PrePostCharLen;   // high nibble(pre) / low nibble(post)
 104      =1    BYTE  PrePostChar[4];
 105      =1  };
 106      =1  
 107      =1  struct NumberStringType {
 108      =1    BYTE  x, y;
 109      =1    BYTE    width;
 110      =1    BYTE  BackColor;
 111      =1    BYTE  Radix;
 112      =1    BYTE  NumColor;
 113      =1    BYTE    MaxLen;       // maximum length of string
 114      =1    BYTE  PrePostCharLen;   // high nibble(pre) / low nibble(post)
 115      =1    BYTE  PrePostChar[3];
 116      =1  };
 117      =1  
 118      =1  struct TimeType {
 119      =1    BYTE  x, y;
 120      =1    BYTE    width;
 121      =1    BYTE  BackColor;
 122      =1    BYTE  Format;       //_24H_TIME
 123      =1    BYTE  TimeColor;
 124      =1    BYTE    CursorColor;
 125      =1  };
 126      =1  
 127      =1  struct EnumType {
 128      =1    BYTE    Sz;//size
 129      =1    BYTE    ByLang;
 130      =1    BYTE  Str[15];      // doesn't matter the size !!!
 131      =1  };
 132      =1  
 133      =1  #define ICON_CH_SZ    2
 134      =1  //#define BAR_NUM_SZ    4
 135      =1  #define ICON_BUF_SZ   2
 136      =1  struct DefineMenu {
 137      =1    //WORD            Icon[ICON_BUF_SZ];  
 138      =1    BYTE        CODE  *Icon;
 139      =1    BYTE            **Desc;       
 140      =1    BYTE            PreFnId, 
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 50  

 141      =1                  PostFnId;
 142      =1  //  void    (*CalltoFunction)(void);            // Un/Dn/Sel Function
 143      =1    BYTE            IconColor;      //NIL: not to display icon
 144      =1    BYTE            DescColor;      //NIL: not to display desc. (IconColor==NIL && DescColor==NIL)->Last Item
 145      =1    struct DefineMenu CODE  *Child;
 146      =1    BYTE            Type;       // MENU, CHOICEMENU, BAR, NUMBER, TIME, ACTION, ENUM_STRING
 147      =1    BYTE            ActiveWithCursor;
 148      =1    BYTE            Id;
 149      =1    BYTE        CODE  *TypeData;  //MenuType, BarType, NumType,,,
 150      =1  } ;
 151      =1  
 152      =1  struct PictureInfo {
 153      =1  
 154      =1    BYTE Register_Addr;
 155      =1    BYTE EEPROM_Addr;
 156      =1    struct RegisterInfo   CODE  *Control_Range;
 157      =1  };
 158      =1  
 159      =1  
 160      =1  //-------------------------------------------------------------------
 161      =1  // OSD Window Information
 162      =1  //-------------------------------------------------------------------
 163      =1  // Window Number
 164      =1  #define OSDCURSORWINDOW     1
 165      =1  #define OSDMENUWINDOW       OSDCURSORWINDOW+1
 166      =1  #define OSDMENU_TOPWIN      OSDCURSORWINDOW+2
 167      =1  #define OSDMENU_TITLEWIN    OSDCURSORWINDOW+3
 168      =1  #define OSDBARWINDOW      OSDCURSORWINDOW
 169      =1  
 170      =1  #define TECHWELLOGO_OSDWIN    1 
 171      =1  #define TVINFO_OSDWIN       2 
 172      =1  #define FONTTEST_OSDWIN     2 
 173      =1  #define INPUTINFO_OSDWIN    3  
 174      =1  #define RATINGINFO_OSDWIN     1 
 175      =1  #define PCINFO_OSDWIN       3
 176      =1  #define VLOSSINFO_OSDWIN    4
 177      =1  
 178      =1  //-------------OSDMENU_TITLEWIN------------------------------------------------------
 179      =1  // Window Start address
 180      =1  #define OSDMENU_MAINADDR  0
 181      =1  //#define OSDMENU_SUBADDR     OSDMENU_MAINADDR+15    //25*9:196
 182      =1  //#define OSDMENU_SUBADDR     OSDMENU_MAINADDR+HS_WIDTH //0+40   //25*9:196
 183      =1  //#define OSDMENU_SUBADDR     OSDMENU_MAINADDR+10 //0+40   //25*9:196
 184      =1  #define OSDMENU_SUBADDR     OSDMENU_MAINADDR + 14 //0+40   //25*9:196  // Weylis 121008 清除 Icon 後面
 185      =1  
 186      =1  #define OSDMENU_BARADDR   200 //OSDMENU_SUBADDR+225    //256   //25x2:50
 187      =1  
 188      =1  #ifdef WQVGA
           =1 #define INPUTINFO1_ADDR   INPUTINFO_ADDR+17 //17x3:51
           =1 #else
 191      =1  #define INPUTINFO1_ADDR   INPUTINFO_ADDR+34 //17x2:51
 192      =1  #endif
 193      =1  
 194      =1  #define MUTEINFO_ADDR     INPUTINFO1_ADDR+51  // 4x1:4
 195      =1  #define TVCHINFO_ADDR     MUTEINFO_ADDR//324  // 3X1:3
 196      =1  #define LOGO_ADDR     0
 197      =1  #ifdef AWT_ML072S
 198      =1  #define RATINGINFO_ADDR   (34)  //addr:210(8x1:8)
 199      =1  #else
           =1 #define RATINGINFO_ADDR   0 //addr:210(8x1:8)
           =1 #endif
 202      =1  #define PCMEASUREINFO_ADDR  OSDMENU_BARADDR //10x1
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 51  

 203      =1  #ifdef QUAD
           =1 #define INPUTINFO_ADDR    160 // 9x1:9
           =1 #else
 206      =1  #define INPUTINFO_ADDR    0///24  // 9x1:9
 207      =1    #ifdef AWT_ML072S
 208      =1    #define INPUTINFO_MIRROR_ADDR 0//83 //william-v1.0-970804
 209      =1    #else
           =1   #define INPUTINFO_MIRROR_ADDR 73//83  //william-v1.0-970804
           =1   #endif
 212      =1  #define INPUTINFO_WIDTH   40  // 9x1:9    //william-v1.0-971111
 213      =1  #endif
 214      =1  #define OSD_VLOSS_ADDR  33 
 215      =1  
 216      =1  
 217      =1  //--------------------------------------------------------------------
 218      =1  // OSD Menu Position Range
 219      =1  #if ((defined WQVGA) && (defined ANALOG_7INCH)) || ((defined QVGA) && (defined SHARP_LQ050Q5DR01))
           =1   #define OSD_PHR_ PHR_/2
           =1 #else
 222      =1    #define OSD_PHR_ PHR_
 223      =1  #endif
 224      =1  
 225      =1  #define OSDHSTART_MAX (OSD_PHR_-(12+1)*25 - 56*2 -4)  //PHR - (pixelsize +Hspace)*MenuWidth - Hborder*2 - 
             -outlinewidth*2
 226      =1  #define OSDVSTART_MAX (PVR_-(18+11)*9 - 5*2 ) //  PVR - (Linesize+Vspace)*MENU_HEIGHT - Vborder*2  - outli
             -newidth*2
 227      =1  
 228      =1  #define OSDHSTART_MAX_A (OSD_PHR_-(12+2)*25 - 56*2 -8) //OSDHSTART_MAX  //PHR - (pixelsize +Hspace)*MenuWi
             -dth - Hborder*2 - outlinewidth*2
 229      =1  #define OSDVSTART_MAX_A OSDVSTART_MAX  //  PVR - (Linesize+Vspace)*MENU_HEIGHT - Vborder*2  - outlinewidth*
             -2
 230      =1  
 231      =1  #define OSDMENUX_MIN 1//0
 232      =1  #define OSDMENUX_MAX (OSDHSTART_MAX>>3)
 233      =1  #define OSDMENUX_50  (OSDHSTART_MAX>>4)
 234      =1  
 235      =1  #define OSDMENUY_MIN 2//0
 236      =1  #define OSDMENUY_MAX (OSDVSTART_MAX>>2)
 237      =1  #define OSDMENUY_50  (OSDVSTART_MAX>>3)
 238      =1  
 239      =1  #ifdef HS_NEWOSDMENU  //Weylis -@121008
           =1 // HS OSD Style
           =1 #define HS_WIDTH      40
           =1 #define HS_CHSPACE      14
           =1 //#define HS_CHSPACE      18
           =1 #define HS_ICONSPACE    1
           =1 #define HS_ICONSADDR    0
           =1 //#define HS_ICONSPACE    2
           =1 //#define HS_ICONSADDR    8
           =1 #endif
 249      =1  
 250      =1  //--------------------------------------------------------------------
 251      =1  // OSD Menu Width, Height 
 252      =1  #ifdef E_Wintek
           =1 #define ICON_HIGH       0x14
           =1 #else
 255      =1  #define ICON_HIGH       0x0a
 256      =1  #endif
 257      =1  
 258      =1  #define TOTAL_MAX_HIGHT     9
 259      =1  #define TOTAL_TOP_HEIGHT    5 // Include blank line!
 260      =1  #define TOPMENU_WIDTH     2
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 52  

 261      =1  #define TOPMENU_HEIGHT      4 
 262      =1  
 263      =1  #if (defined QVGA) && (defined SHARP_LQ050Q5DR01)
           =1 #define MENU_WIDTH        17 //23//25 
           =1 #define TITLE_MAX_DESC      17 //25 //
           =1 #define BAR_LENGTH        0
           =1 #else
 268      =1  //#define MENU_WIDTH        23  //23//25 
 269      =1  //#define MENU_WIDTH        26  //ryan@20170821
 270      =1  #ifdef AWT_ML072S
 271      =1  #define MENU_WIDTH        19  
 272      =1  #else
           =1 #define MENU_WIDTH        24  //ryan@20170821
           =1 #endif
 275      =1  
 276      =1  #define TITLE_MAX_DESC      23  //25  //
 277      =1  #define BAR_LENGTH        5  //8
 278      =1  #endif
 279      =1  
 280      =1  #ifdef TW8816
 281      =1  #define MENU_HEIGHT       8  //6 
 282      =1  #else
           =1 #define MENU_HEIGHT       7  //6 
           =1 #endif
 285      =1  //#define BARNUM_LENGTH       8  //11
 286      =1  
 287      =1  #ifdef AWT_ML072S
 288      =1  #define BARNUM_LENGTH       4//ryan@20170821
 289      =1  #else
           =1 #define BARNUM_LENGTH       9//ryan@20170821
           =1 #endif
 292      =1  
 293      =1  
 294      =1  #ifdef REFERENCE
           =1 #define BACK_COLOR        BG_COLOR_CYAN
           =1 #define DEFAULT_COLOR     BG_COLOR_CYAN   | CH_COLOR_WHITE
           =1 //#define ACTIVE_COLOR      BG_COLOR_YELLOW | CH_COLOR_WHITE
           =1 #define TITLE_BACK_COLOR    BG_COLOR_MAGENTA
           =1 #define TITLE_COLOR       TITLE_BACK_COLOR | CH_COLOR_YELLOW
           =1 #define COMMENT_COLOR     TITLE_BACK_COLOR | CH_COLOR_WHITE
           =1 #define CURSOR_COLOR      BG_COLOR_YELLOW | CH_COLOR_BLUE
           =1 #define OSD_INFO_COLOR      DEFAULT_COLOR
           =1 #define BAR_COLOR       DEFAULT_COLOR 
           =1 #define BAR_NUM_COLOR     DEFAULT_COLOR
           =1 #define NUM_COLOR       DEFAULT_COLOR
           =1 #define OSDMENU_OUTLINE_COLOR BG_COLOR_BLUE
           =1 #else
 308      =1  #define BACK_COLOR        BG_COLOR_CYAN
 309      =1  
 310      =1  #define DEFAULT_COLOR     BG_COLOR_CYAN | CH_COLOR_GREEN//ryan@20170828
 311      =1  
 312      =1  //#define ACTIVE_COLOR      BG_COLOR_YELLOW | CH_COLOR_WHITE
 313      =1  #define TITLE_BACK_COLOR    BG_COLOR_BLUE
 314      =1  #define TITLE_COLOR       TITLE_BACK_COLOR | CH_COLOR_YELLOW
 315      =1  #define COMMENT_COLOR     TITLE_BACK_COLOR | CH_COLOR_WHITE
 316      =1  #define CURSOR_COLOR      BG_COLOR_YELLOW  | CH_COLOR_BLUE
 317      =1  #define OSD_INFO_COLOR      BG_COLOR_CYAN    | CH_COLOR_GREEN
 318      =1  #define BAR_COLOR       DEFAULT_COLOR
 319      =1  #define BAR_NUM_COLOR     DEFAULT_COLOR
 320      =1  #define NUM_COLOR       DEFAULT_COLOR
 321      =1  #define VER_COLOR         BG_COLOR_CYAN   | CH_COLOR_YELLOW   /// V1.1 03/07/07 simonsung
 322      =1  #define OSDMENU_OUTLINE_COLOR   BG_COLOR_CYAN
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 53  

 323      =1  #define OSD_VLOSS_COLOR     BG_COLOR_CYAN    | CH_COLOR_WHITE
 324      =1  
 325      =1  #endif
 326      =1  
 327      =1  #ifdef HS_NEWOSDMENU
           =1 #define COMMENT1_COLOR      BG_COLOR_CYAN | CH_COLOR_RED
           =1 #endif
 330      =1  
 331      =1  #define Trigger_COLOR       BG_COLOR_CYAN|CH_COLOR_RED      //william-v1.1-970827
 332      =1  #define Mirror_COLOR      BG_COLOR_CYAN|CH_COLOR_YELLOW     //william-v1.1-970827
 333      =1  #ifndef AWT_ML072S
           =1 #define Jump_COLOR        BG_COLOR_CYAN|CH_COLOR_GREEN      //william-v1.1-970827
           =1 #else
 336      =1  #define Jump_COLOR        BG_COLOR_CYAN|CH_COLOR_BLUE     //william-v1.1-970827
 337      =1  #endif
 338      =1  #define Gauge_COLOR1      BG_COLOR_BLACK|CH_COLOR_GREEN 
 339      =1  #define Gauge_COLOR2      BG_COLOR_BLACK|CH_COLOR_YELLOW  
 340      =1  #define Gauge_COLOR3      BG_COLOR_BLACK|CH_COLOR_RED
 341      =1  
 342      =1  //DisplayedOSD
 343      =1  //    new   | MENU  TVINFO    CC    INPUTINFO   PCINFO    RATINGINFO
 344      =1  //  current   |
 345      =1  //============|=========================================================================
 346      =1  //  MENU    |     TVINFO    --    INPUTINFO   PCINFO    MENU + RATINGINFO 
 347      =1  //        |            
 348      =1  //------------|-------------------------------------------------------------------------
 349      =1  //  TVINFO    | MENU  TVINFO    --    INPUTINFO   PCINFO    TVINFO+RATING
 350      =1  //------------|-------------------------------------------------------------------------
 351      =1  //  CC      | MENU->  TVINFO->      INPUTINFO->   PCINFO    RATINGINFO
 352      =1  //        |  CC    CC          CC            
 353      =1  //------------|-------------------------------------------------------------------------
 354      =1  //  INPUTINFO | MENU  TVINFO    --    INPUTINFO   PCINFO    --
 355      =1  //------------|-------------------------------------------------------------------------
 356      =1  //  PCINFO    | MENU  x     x   INPUTINFO   PCINFO    x
 357      =1  //------------|-------------------------------------------------------------------------
 358      =1  //  RATINGINFO| MENU  TVINFO     RATING   INPUTINFO   x     RATINGINFO
 359      =1  //                  
 360      =1  
 361      =1  //=======================================================================================
 362      =1  // OSD Menu Constant define.
 363      =1  //=======================================================================================
 364      =1  //Time type
 365      =1  #define _24H_TIME   1
 366      =1  
 367      =1  //for previous, next, parent or child
 368      =1  #define YES       0xfe  
 369      =1  #define NO        0
 370      =1  
 371      =1  //#define OVERWRITE   0
 372      =1  //#define POPUP     1
 373      =1  
 374      =1  //CursorMove
 375      =1  #define VERT      0
 376      =1  #define HORI      1
 377      =1  
 378      =1  //Type of MenuItem
 379      =1  #define OSDMENU     1
 380      =1  #define CHOICEMENU    2
 381      =1  #define ACTION      3
 382      =1  #define BAR       4
 383      =1  #define NUMBER      5
 384      =1  #define CHOICE      6
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 54  

 385      =1  #define ENUM_STRING   7 //YESNO     7
 386      =1  #define CHOICE1     8
 387      =1  #define TIME      9
 388      =1  #define NUMBER_STRING 10
 389      =1  #define TEXT_STR              11   // V1.1 02/28/07 simonsung
 390      =1  #define INFORMATION              12
 391      =1  #define TEXT_STR_exit 13
 392      =1  
 393      =1  #ifdef HTRV
           =1 #define GRAPH 16
           =1 #endif
 396      =1  
 397      =1  //Bar type
 398      =1  #define LEFT_FILLED   1
 399      =1  #define RIGHT_FILLED  2
 400      =1  #define NO_FILLED   3
 401      =1  
 402      =1  //OSDmenu up and down key
 403      =1  #define UP          1
 404      =1  #define DN          2
 405      =1  #define RIGHT       3
 406      =1  #define LEFT          4
 407      =1  
 408      =1  // Action Id
 409      =1  #define DISP_INFO     0x16
 410      =1  
 411      =1  #define INPUTSELECTION    0x2f
 412      =1  
 413      =1  #define CHANGE_TO_COMPOSITE     (0x20|CH_TW2835)      // Low nibble need to start from 1 
 414      =1  #define CHANGE_TO_SVIDEO      (0x20|SVIDEO)       // so that it match with COMPOSITE...
 415      =1  #define CHANGE_TO_COMPONENT     (0x20|COMPONENT)    
 416      =1  #define CHANGE_TO_DTV       (0x20|DTV)    
 417      =1  #define CHANGE_TO_TV        (0x20|TV)         
 418      =1  #define CHANGE_TO_PC        (0x20|PC)         
 419      =1  #define CHANGE_TO_DIGITALVGA    (0x20|DIGITALVGA)     
 420      =1  #define CHANGE_TO_SCART       (0x20|SCART)        
 421      =1  
 422      =1  #define OSDPOSITIONMODE     0x10
 423      =1  #define OSD_VPOS      0x11
 424      =1  #define OSD_HPOS      0x12
 425      =1  #define OSD_HALFTONE    0x13
 426      =1  #define OSD_DURATION    0x14
 427      =1  #define RESET_OSDVALUE    0x15
 428      =1  #define OSDLANG       0x16
 429      =1  
 430      =1  #define PANEL_CONTRAST    0x58
 431      =1  #define PANEL_BRIGHTNESS  0x59
 432      =1  #define PANEL_HUE     0x5a
 433      =1  #define PANEL_SHARPNESS   0x5b
 434      =1  #define PANEL_SATURATION  0x5c
 435      =1  
 436      =1  #define PC_VPOS       0x43
 437      =1  #define PC_HPOS       0x44
 438      =1  #define PC_HSIZE      0x4d
 439      =1  
 440      =1  #define PC_CLOCK      0x45
 441      =1  #define PC_PHASE      0x46
 442      =1  
 443      =1  #define AUTOADJUST      0x47
 444      =1  #define AUTOADJUST2     0x48
 445      =1  //#define SAVE_AUTOADJUST   0x49
 446      =1  #define RESET_AUTOADJUST  0x4a
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 55  

 447      =1  
 448      =1  #define PCCOLORADJUST   0x4b
 449      =1  #define SAVE_COLORADJUST  0x4c
 450      =1  //#define RESET_COLORADJUST 0x4d
 451      =1  
 452      =1  #define RESET_PCVALUE   0x4e
 453      =1  #define CameraOSD     0x4f
 454      =1  
 455      =1  #define PC_COLOR_MODE   0x3f
 456      =1  #define PC_COLOR_TEMP   0x30
 457      =1  #define PC_COLOR_MODE1    0x31
 458      =1  #define PC_COLOR_MODE2    0x32
 459      =1  #define PC_COLOR_MODE3    0x33
 460      =1  #define PC_COLOR_USER   0x34
 461      =1  #define PC_COLOR_R      0x35
 462      =1  #define PC_COLOR_G      0x36
 463      =1  #define PC_COLOR_B      0x37
 464      =1  
 465      =1  #define VIDEO_MODE      0x90
 466      =1  #define VIDEO_MODE1     0x91
 467      =1  #define VIDEO_MODE2     0x92
 468      =1  #define VIDEO_MODE3     0x93
 469      =1  #define VIDEO_USER      0x94
 470      =1  #define VIDEO_CONTRAST    0x95
 471      =1  #define VIDEO_BRIGHTNESS  0x96
 472      =1  #define VIDEO_SATURATION  0x97
 473      =1  #define VIDEO_HUE     0x99
 474      =1  #define VIDEO_SHARPNESS   0x9a
 475      =1  #define VIDEO_BACKLIGHT   0x9c    // add new value 
 476      =1  #define RESET_VIDEOVALUE  0x9b
 477      =1  #define RESET_DVRVALUE    0x9e
 478      =1  #define RESET_MonitorVALUE    0x70
 479      =1  
 480      =1  
 481      =1  #ifdef AWT_ADD_TRIGGER_DELAY_FUN  //Pinchi 20150209 add
 482      =1  #define TRIGGER_CamADelay 0xb2
 483      =1  #define TRIGGER_CamBDelay 0xb3
 484      =1  #define TRIGGER_CamCDelay 0xb4
 485      =1  #define TRIGGER_CamRDelay 0xb5
 486      =1  #endif
 487      =1  
 488      =1  #ifdef HTRV
           =1 #define RESET_GAUGESETUP  0x9d   
           =1 #define Gauge_VStart      0x7a   
           =1 #endif
 492      =1  
 493      =1  #ifdef E_Wintek
           =1 #define RESET_USERVALUE 0x9d
           =1 #endif
 496      =1  #define VIDEOPICTURE    0x9f
 497      =1  
 498      =1  #define INPUTSTD      0x6f
 499      =1  #define CHANGE_TO_AUTO    0x60
 500      =1  #define CHANGE_TO_NTSC    (0x60 | NTSC)
 501      =1  #define CHANGE_TO_PAL   (0x60 | PAL)
 502      =1  #define CHANGE_TO_SECAM   (0x60 | SECAM)
 503      =1  #define CHANGE_TO_NTSC4   (0x60 | NTSC4)
 504      =1  #define CHANGE_TO_PALM    (0x60 | PALM)
 505      =1  #define CHANGE_TO_PALN    (0x60 | PALN)
 506      =1  #define CHANGE_TO_PAL60   (0x60 | PAL60)
 507      =1  
 508      =1  #if 0
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 56  

           =1 #define CLOSED_CAPTION    0x7f
           =1 #define CLOSEDCAP_OFF   0x70
           =1 #define CLOSEDCAP_CC1   0x71
           =1 #define CLOSEDCAP_CC2   0x72
           =1 #define CLOSEDCAP_CC3   0x73
           =1 #define CLOSEDCAP_CC4   0x74
           =1 #define CLOSEDCAP_T1    0x75
           =1 #define CLOSEDCAP_T2    0x76
           =1 #define CLOSEDCAP_T3    0x77
           =1 #define CLOSEDCAP_T4    0x78
           =1 
           =1 #define TV_GUIDE      0x8f
           =1 #define NO_VCHIP_LOCK   0
           =1 #define VCHIP_TV_Y      1
           =1 #define VCHIP_TV_Y7     2
           =1 #define VCHIP_TV_G      3
           =1 #define VCHIP_TV_PG     4
           =1 #define VCHIP_TV_14     5
           =1 #define VCHIP_TV_MA     6
           =1 #define PASSWORD      0x87
           =1 #define NEW_PASSWORD    0x88
           =1 #define CHK_PASSWORD    0x89
           =1 #define RET_CHK_PASSWORD  0x8a
           =1 #endif
 533      =1  
 534      =1  #define MPAA_RATING     0x9f
 535      =1  #define NO_MPAA_RATING    0
 536      =1  #define MPAA_G        1
 537      =1  #define MPAA_PG       2
 538      =1  #define MPAA_PG_13      3
 539      =1  #define MPAA_R        4
 540      =1  #define MPAA_NC_17      5
 541      =1  #define MPAA_X        6
 542      =1  
 543      =1  #define TVINSTALL     0xa0
 544      =1  #define SCAN_CHANNEL    0xa1
 545      =1  #define AIR_CABLE_TV    0xa3
 546      =1  #define STORE_CLEAR_TVCHN 0xa4
 547      =1  #define MTS         0xa5
 548      =1  #define EDIT_CHANNEL    0xa6
 549      =1  #define MTS_STEREO      0//0x10
 550      =1  #define MTS_MONO      1//0x11
 551      =1  
 552      =1  #define AUDIO_VOLUME    0xb7
 553      =1  
 554      =1  #if 0 //andy AWT8.4 20090811
           =1 
           =1 #define AUDIO_BALANCE   0xb9
           =1 #define AUDIO_BASS      0xba
           =1 #define AUDIO_TREBLE    0xbb
           =1 
           =1 #define AUDIO_LOUDNESS    0xbc
           =1 #define AUDIO_EFFECT    0xbd
           =1 #define AUDIO_MUTE      0xbe
           =1 #endif
 564      =1  
 565      =1  #define DayChoice           0xb8
 566      =1  #define CAMOSDONOFF         0xb9
 567      =1  #define GAUGEChoice         0xba
 568      =1  #define OsdLockChoice       0xbb
 569      =1  #define PRIORITYChoice      0xcA
 570      =1  #define DVRDisplay    0xcc
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 57  

 571      =1  
 572      =1  #define CAMAONOFF       0xc1
 573      =1  #define CAMBONOFF         0xc2
 574      =1  #define CAMCONOFF       0xc3
 575      =1  #define CAMRONOFF     0xc4
 576      =1  
 577      =1  #define IMAGEChoice         0xc5 
 578      =1  #define REARChoice          0xc6
 579      =1  #define JUMPChoice          0xc7
 580      =1  #define CAMOUTChoice        0xc8 
 581      =1  #define STIME_STEP        0xc9
 582      =1  #define TriggerVGA        0xcb
 583      =1  #define IMAGE_A_Choice         0xcd
 584      =1  #define IMAGE_B_Choice         0xce
 585      =1  #define IMAGE_C_Choice         0xcf
 586      =1  
 587      =1  #define DELAYCAMA       0xd0
 588      =1  #define DELAYCAMB            0xd1
 589      =1  #define DELAYCAMC       0xd2
 590      =1  #define DELAYCAMR         0xd3
 591      =1  #ifdef USE_CAMD
           =1 #define DELAYCAMD       0xd4
           =1 #endif
 594      =1  #define ReverseMode   0xd6
 595      =1  #ifdef AWT_ML072S //william @20130902 v1.0.1.2
 596      =1  #define JUMP_AV     0xd7
 597      =1  #endif
 598      =1  #define MANUAL_TUNE_CHANNEL 0xab
 599      =1  #define FINE_TUNE_CHANNEL 0xac
 600      =1  #define STORE_PALCHANNEL  0xad
 601      =1  
 602      =1  //#define CLEAR_TVCHN     0xb0
 603      =1  //#define STORE_TVCHN     0xb1
 604      =1  
 605      =1  #define WIDESCREEN      0xc0
 606      =1  #define WIDESCREEN_NORMAL 0 
 607      =1  #define WIDESCREEN_WIDE   1 
 608      =1  #define WIDESCREEN_PANO   2
 609      =1  #define WIDESCREEN_FULL   3 
 610      =1  #define WIDESCREEN_ZOOM   4 
 611      =1  
 612      =1  //#define SYSTEM_CLOCK    0xd1
 613      =1  //#define SYSTEM_CLOCK_H    0xd2
 614      =1  //#define WAKEUP_TIME     0xd3
 615      =1  //#define WAKEUP_TIME_H   0xd4
 616      =1  //#define WAKEUP_PR     0xd5
 617      =1  //#define OFF_TIME      0xd6
 618      =1  //#define OFF_TIME_H      0xd7
 619      =1  //#define SLEEP_TIMER     0xd8
 620      =1  
 621      =1  #define Resolution      0xe0
 622      =1  #define FPS         0xe1
 623      =1  #define Quality       0xe2
 624      =1  #define RecordMode      0xe3
 625      =1  #define RecordLength      0xe4
 626      =1  #define PreAlarmLength    0xe5
 627      =1  #define PostAlarmLength   0xe6
 628      =1  #define Apply       0xe7
 629      =1  #if 0 //william-awt ml073q-20120313
           =1 #define ManualRecordStart 0xe8
           =1 #define ManualRecordStop  0xe9
           =1 #define Snapshot        0xea
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 58  

           =1 #endif
 634      =1  #define FormatSD      0xeb
 635      =1  #define AudioRecord     0xec
 636      =1  #define FirmwareUpdate    0xed
 637      =1  #define ChangePassword    0xee
 638      =1  #define OverWrite     0xef
 639      =1  
 640      =1  #define UpdateConfig      0xd0
 641      =1  #define SDCardDetect      0xd5
 642      =1  
 643      =1  #define Year        0x20
 644      =1  #define Month       0x21
 645      =1  #define Day         0x22
 646      =1  #define Hour        0x23
 647      =1  #define Minute        0x24
 648      =1  
 649      =1  #define DaylightSaving        0x25
 650      =1  #define TimeBeginesMonth      0x26
 651      =1  #define TimeBeginesWeek       0x27
 652      =1  #define TimeBeginesTime       0x28
 653      =1  #define StandardTimeBeginesMonth  0x29
 654      =1  #define StandardTimeBeginesWeek   0x2a
 655      =1  #define StandardTimeBeginesTime   0x2b
 656      =1  #define TimeZone          0x2c
 657      =1  #define FirstNumber         0x2d
 658      =1  #define SecondNumber        0x2e
 659      =1  #define ThridNumber         0x2f
 660      =1  #define FourthNumber        0x38
 661      =1  #define WIFIIPNumber        0x39
 662      =1  #define WIFIMACNumber       0x3a
 663      =1  #define GETWAYNumber        0x3b
 664      =1  
 665      =1  #define OSDLANGI      0xd9
 666      =1  #define OSDLANGII     OSDLANGI+1
 667      =1  #define OSDLANGIII      OSDLANGI+2
 668      =1  #define OSDLANGIV     OSDLANGI+3
 669      =1  
 670      =1  #define TOHIGHMENU      0xf1
 671      =1  #define MOVECURSOR2FIRST  0xf2
 672      =1  #define RESET_ALL     0xf3
 673      =1  #define EXITMENU      0xf4
 674      =1  #define DVRParamApply   0xf5
 675      =1  #define DATETIMEApply   0xf6
 676      =1  
 677      =1  #define CHOICE1_VAL     0xfc
 678      =1  #define CHOICE_VAL      0xfd
 679      =1  #define BAR_VAL       0xfe
 680      =1  #define NUM_VAL       0xff
 681      =1  
 682      =1  #define CAMNumberChoice     0xa3 
 683      =1  #define PelcoChoice         0xa4
 684      =1  #define Baud_rateChoice   0xa5
 685      =1  
 686      =1  
 687      =1  #endif  // __OSDMENU__
 688      =1  
  28          #include "pc_eep.h"
   1      =1  #ifndef __PC_EEP__
   2      =1  #define __PC_EEP__
   3      =1  
   4      =1  
   5      =1  // -----------------------------------------------------------------------------
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 59  

   6      =1  #define PC_COLOR_DATA 0x80  // StartAddress of EEPROM for PC Color Temperature
   7      =1  #define PC_USERCOLOR  0x8A
   8      =1  #define SetPCColorTempModeEE( ctid )      WriteEEP( PC_COLOR_DATA, ctid )
   9      =1  #define GetPCColorTempModeEE()          ReadEEP( PC_COLOR_DATA )
  10      =1  
  11      =1  #define GetPCUserColorTempEE( ucolorr)      ReadEEP( PC_USERCOLOR+ucolorr )
  12      =1  #define SavePCUserColorTempEE( ucolorw, uval) WriteEEP( PC_USERCOLOR+ucolorw, uval )
  13      =1  #define GetPCColorEE(index)           ReadEEP(index)
  14      =1  
  15      =1  // -----------------------------------------------------------------------------
  16      =1  #define EE_ADC_GO   0x90  // ADC Gain Offset for PC
  17      =1  #define EE_ADC_GO_DTV 0x98  // ADC Gain Offset for DTV
  18      =1  
  19      =1  #define EE_PCDATA   0xC0  // StartAddress of EEPROM for PCDATA
  20      =1  #define LEN_PCDATA    5   // Length of PCDATA
  21      =1  
  22      =1  WORD GetHPNfromEE(BYTE mode);
  23      =1  
  24      =1  BYTE CheckPcDataEEValid(BYTE, WORD);
  25      =1  
  26      =1  WORD GetVactiveStartEE(BYTE mode);
  27      =1  WORD GetHactiveStartEE(BYTE mode);
  28      =1  
  29      =1  void GetPCDataEE(BYTE mode);
  30      =1  void SavePCDataEE(BYTE mode);
  31      =1  void SaveDefaultPCDataEE(void);
  32      =1  void SaveDefaultPCDataAllEE(void);
  33      =1  
  34      =1  void SaveHactiveEE(BYTE mode);
  35      =1  void SaveVactiveEE(BYTE mode);
  36      =1  void SaveVBackPorchEE(BYTE mode);
  37      =1  void SaveCoarseEE(BYTE mode);
  38      =1  void SavePhaseEE(BYTE mode);
  39      =1  /*
  40      =1  WORD GetHactiveStartEE(BYTE mode);
  41      =1  WORD GetVactiveStartEE(BYTE mode);
  42      =1  */
  43      =1  void DumpPCData(void);
  44      =1  
  45      =1  void SaveActiveVEE(WORD);
  46      =1  void SaveBackPorchEE(BYTE);
  47      =1  void SaveActiveHEE(WORD);
  48      =1  
  49      =1  void SaveADCGainOffsetEE(BYTE mod);
  50      =1  void GetADCGainOffsetEE(void);
  51      =1  
  52      =1  void SaveADCGainOffsetForDTVEE(BYTE mod);
  53      =1  void GetADCGainOffsetForDTVEE(void);
  54      =1  
  55      =1  #endif  // __PC_EEP__
  29          #include "KeyRemo.h"
   1      =1  //
   2      =1  // KeyRemo.h
   3      =1  // Default function for Key Input and Remocon Input
   4      =1  //
   5      =1  //=============================================================================
   6      =1  //                        Operation Key Mapping
   7      =1  //=============================================================================
   8      =1  
   9      =1  
  10      =1  
  11      =1  
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 60  

  12      =1  #define ResetKey()    { P2 = 0xff;}
  13      =1  //#define ReadKey()   (~P1 & 0xfc);
  14      =1  
  15      =1  #ifdef QUAD
           =1 #define EVENTKEY    0x02
           =1 #endif
  18      =1  #define POWERKEY    0x04 //andy AWT 980907
  19      =1  #define MENUKEY     0x08
  20      =1  
  21      =1  #ifdef AWT_NEW_SLIM_MODEL  //Pinchi 20150203 add for AWT new slim model
           =1 #define UPKEY       0x10
           =1 #define DOWNKEY     0x20
           =1 #define SELECTKEY     0x40
           =1 #define INPUTSOURCEKEY  0x80
           =1 #define VersionKEY    0xC0
           =1 #define UnLockKEY     0xC0
           =1 #else
  29      =1  #define INPUTSOURCEKEY  0x10
  30      =1  #define UPKEY       0x20
  31      =1  #define DOWNKEY       0x40
  32      =1  #define SELECTKEY     0x80
  33      =1    #if 1//Pinchi 20160929 add
  34      =1    #define Tune2835ClkKEY 0x90
  35      =1    #define Enter2835TuneKEY 0x0C
  36      =1    #else
           =1   #define VersionKEY      0x90
           =1   #endif
  39      =1  #endif
  40      =1  
  41      =1  #define REMO_CUSTOM   0
  42      =1  
  43      =1  #define REMO_NUM0   0
  44      =1  #define REMO_NUM1   1
  45      =1  #define REMO_NUM2   2
  46      =1  #define REMO_NUM3   3
  47      =1  #define REMO_NUM4   4
  48      =1  #define REMO_NUM5   5
  49      =1  #define REMO_NUM6   6
  50      =1  #define REMO_NUM7   7
  51      =1  #define REMO_NUM8   8
  52      =1  #define REMO_NUM9   9
  53      =1  
  54      =1  #define REMO_STANDBY  12
  55      =1  #define REMO_CHNUP    32
  56      =1  #define REMO_CHNDN    33
  57      =1  #define REMO_VOLUP    16
  58      =1  #define REMO_VOLDN    17
  59      =1  #define REMO_SELECT   21
  60      =1  #define REMO_MENU   63
  61      =1  #define REMO_MUTE   13
  62      =1  #define REMO_INPUT    56
  63      =1  
  64      =1  #define REMO_AUTO   10
  65      =1  #define REMO_INFO   58
  66      =1  #define REMO_AUDIO    38
  67      =1  #define REMO_ASPECT   62
  68      =1  #define REMO_CC     15
  69      =1  #define REMO_EXIT   0x16
  70      =1  
  71      =1  #define REMO_TTXRED     0x37
  72      =1  #define REMO_TTXGREEN   0x36
  73      =1  #define REMO_TTXYELLOW    0x32
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 61  

  74      =1  #define REMO_TTXCYAN    0x34
  75      =1  
  76      =1  
  77      =1  
  78      =1  //=============================================================================
  79      =1  //                                 RC5 type
  80      =1  //=============================================================================
  81      =1  #ifdef REMO_RC5
           =1 
           =1 #ifdef TECHWELL_REMOCON
           =1 #define REMO_CUSTOM   0
           =1 
           =1 #define REMO_NUM0   0
           =1 #define REMO_NUM1   1
           =1 #define REMO_NUM2   2
           =1 #define REMO_NUM3   3
           =1 #define REMO_NUM4   4
           =1 #define REMO_NUM5   5
           =1 #define REMO_NUM6   6
           =1 #define REMO_NUM7   7
           =1 #define REMO_NUM8   8
           =1 #define REMO_NUM9   9
           =1 
           =1 #define REMO_STANDBY  12
           =1 #define REMO_CHNUP    32
           =1 #define REMO_CHNDN    33
           =1 #define REMO_VOLUP    16
           =1 #define REMO_VOLDN    17
           =1 #define REMO_SELECT   21
           =1 #define REMO_MENU   63
           =1 //#define REMO_TV     63
           =1 //#define REMO_VCR    60
           =1 //#define REMO_SVIDEO   56
           =1 #define REMO_MUTE   13
           =1 #define REMO_INPUT    56
           =1 
           =1 #define REMO_AUTO   10
           =1 #define REMO_INFO   58
           =1 #define REMO_AUDIO    38
           =1 #define REMO_ASPECT   62
           =1 #define REMO_CC     15
           =1 #define REMO_EXIT   0x16
           =1 
           =1 #define REMO_TTXRED     0x37
           =1 #define REMO_TTXGREEN   0x36
           =1 #define REMO_TTXYELLOW    0x32
           =1 #define REMO_TTXCYAN    0x34
           =1 
           =1 #ifdef SUPPORT_DEBUG
           =1 #define REMO_DEBUG    0x2b
           =1 #define REMO_READ   0x29
           =1 #define REMO_WRITE    0x2a
           =1 #define REMO_RESERVED 0x30
           =1 #endif
           =1 
           =1 #else 
           =1 #define REMO_CUSTOM   0
           =1 
           =1 #define REMO_NUM0   0
           =1 #define REMO_NUM1   1
           =1 #define REMO_NUM2   2
           =1 #define REMO_NUM3   3
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 62  

           =1 #define REMO_NUM4   4
           =1 #define REMO_NUM5   5
           =1 #define REMO_NUM6   6
           =1 #define REMO_NUM7   7
           =1 #define REMO_NUM8   8
           =1 #define REMO_NUM9   9
           =1 
           =1 #define REMO_STANDBY  12
           =1 #define REMO_CHNUP    32
           =1 #define REMO_CHNDN    33
           =1 #define REMO_VOLUP    16
           =1 #define REMO_VOLDN    17
           =1 #define REMO_SELECT   18
           =1 #define REMO_MENU   48
           =1 #define REMO_TV     63
           =1 #define REMO_VCR    60
           =1 #define REMO_SVIDEO   56
           =1 #define REMO_MUTE   13
           =1 #define REMO_INPUT    0xff
           =1 
           =1 #define REMO_INFO   0x0a //??
           =1 #endif
           =1 
           =1 //=============================================================================
           =1 //                                 NEC type
           =1 //=============================================================================
           =1 #elif defined REMO_NEC
           =1 /*
           =1 // Techwell Origin
           =1 #define REMO_CUSTOM1  0x20
           =1 #define REMO_CUSTOM2  0xdf
           =1 
           =1 
           =1 #define REMO_NUM0   0x08
           =1 #define REMO_NUM1   0x88
           =1 #define REMO_NUM2   0x48
           =1 #define REMO_NUM3   0xc8
           =1 #define REMO_NUM4   0x28
           =1 #define REMO_NUM5   0xa8
           =1 #define REMO_NUM6   0x68
           =1 #define REMO_NUM7   0xe8
           =1 #define REMO_NUM8   0x18
           =1 #define REMO_NUM9   0x98
           =1 
           =1 #define REMO_STANDBY  0x10
           =1 #define REMO_CHNUP    0x00
           =1 #define REMO_CHNDN    0x80
           =1 #define REMO_VOLUP    0x40
           =1 #define REMO_VOLDN    0xc0
           =1 #define REMO_SELECT   0x70
           =1 #define REMO_MENU   0x9c
           =1 #define REMO_MUTE   0x90
           =1 #define REMO_INPUT    0xd0
           =1 */
           =1 
           =1 // Techwell New Remocon after 4/7/2005
           =1 #ifdef PHILIPS_REMOCON
           =1 #define REMO_CUSTOM1  0x02
           =1 #define REMO_CUSTOM2  0xfd
           =1 
           =1 #define REMO_NUM0   0x00
           =1 #define REMO_NUM1   0x80
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 63  

           =1 #define REMO_NUM2   0x40
           =1 #define REMO_NUM3   0xc0
           =1 #define REMO_NUM4   0x20
           =1 #define REMO_NUM5   0xa0
           =1 #define REMO_NUM6   0x60
           =1 #define REMO_NUM7   0xe0
           =1 #define REMO_NUM8   0x10
           =1 #define REMO_NUM9   0x90
           =1 
           =1 #define REMO_STANDBY  0x48
           =1 #define REMO_CHNUP    0xd8
           =1 #define REMO_CHNDN    0xf8
           =1 #define REMO_VOLUP    0x58
           =1 #define REMO_VOLDN    0x78
           =1 #define REMO_SELECT   0xe8
           =1 #define REMO_MENU   0x01
           =1 #define REMO_MUTE   0x08
           =1 #define REMO_INPUT    0xf0
           =1 
           =1 #define REMO_INFO   0x38
           =1 
           =1 
           =1 
           =1 #define REMO_TTXRED     0x4E
           =1 #define REMO_TTXGREEN   0x8E
           =1 #define REMO_TTXYELLOW    0xC6
           =1 #define REMO_TTXCYAN    0x86
           =1 
           =1 #else
           =1 // RYU For Test
           =1 #define REMO_CUSTOM1    0x04
           =1 #define REMO_CUSTOM2    0xfb
           =1 
           =1 #define REMO_NUM0   0xf8
           =1 #define REMO_NUM1   0x48
           =1 #define REMO_NUM2   0xc8
           =1 #define REMO_NUM3   0x28
           =1 #define REMO_NUM4   0xa8
           =1 #define REMO_NUM5   0x18
           =1 #define REMO_NUM6   0x98
           =1 #define REMO_NUM7   0x58
           =1 #define REMO_NUM8   0xd8
           =1 #define REMO_NUM9   0x78
           =1 
           =1 #define REMO_STANDBY  0x00
           =1 #define REMO_CHNUP    0x40  //
           =1 #define REMO_CHNDN    0x70  //
           =1 #define REMO_VOLUP    0x90  //
           =1 #define REMO_VOLDN    0xe0  //
           =1 #define REMO_SELECT   0x11//??
           =1 #define REMO_MENU   0x10
           =1 
           =1 #define REMO_MUTE   0x60
           =1 #define REMO_INPUT    0xc0
           =1 #define REMO_AUTO   0x30
           =1 #define REMO_AUTOSCAN 0x80
           =1 #define REMO_TV     0x20
           =1 #define REMO_EXIT   0xa0
           =1 #define REMO_INFO   0x08
           =1 #define REMO_ASPECT   0x62
           =1 
           =1 #define REMO_TTXRED   0xb8
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 64  

           =1 #define REMO_TTXGREEN 0x02
           =1 #define REMO_TTXYELLOW  0x82
           =1 #define REMO_TTXCYAN  0x42
           =1 
           =1 #ifdef SUPPORT_DEBUG
           =1 #define REMO_DEBUG    0xb8
           =1 #define REMO_READ   0x02
           =1 #define REMO_WRITE    0x82
           =1 #endif
           =1 
           =1 #endif //PHILIPS_REMOCON
           =1 
           =1 #endif // REMO_NEC
 273      =1  
 274      =1  
 275      =1  
 276      =1  BYTE ActionRemo(BYTE, BYTE);
 277      =1  BYTE CheckKeyIn(void);
 278      =1  BYTE GetKey(BYTE repeat);
 279      =1  BYTE IsRemoDataReady(BYTE *, BYTE *);
 280      =1  
 281      =1  
  30          #include "Monitor.h"
   1      =1  /* monitor.h */
   2      =1  
   3      =1  
   4      =1  void Mon_tx(BYTE ch);
   5      =1  
   6      =1  void MonHelp(void);
   7      =1  BYTE MonGetCommand(void);
   8      =1  
   9      =1  void Monitor(void);
  10      =1  
  11      =1  void Prompt(void);
  12      =1  
  13      =1  BYTE GetMonAddress(void);
  14      =1  #ifdef Monitor_debug
  15      =1  void SetMonAddress(BYTE addr);
  16      =1  #endif
  17      =1  void MonReadI2C(void);
  18      =1  void MonWriteI2C(void);
  19      =1  
  31          #include "CPU.h"
   1      =1  #ifndef __CPU__
   2      =1  #define __CPU__
   3      =1  
   4      =1  /*
   5      =1  #ifdef INTERNAL_MCU
   6      =1  #define I2C_SCL   P2_0
   7      =1  #else
   8      =1  #define I2C_SCL   P1_0
   9      =1  #endif
  10      =1  #define I2C_SDA   P1_1
  11      =1  */
  12      =1  #define I2C_SCL     P1_0
  13      =1  #define I2C_SDA     P1_1
  14      =1  #ifdef SUPPORT_SDCARD  //ryan@20170824 
           =1 #define BUF_MAX     8
           =1 #define DVR_BUF_MAX   30
           =1 #else
  18      =1  #define BUF_MAX     20
  19      =1  #define DVR_BUF_MAX   8
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 65  

  20      =1  #endif
  21      =1  
  22      =1  #ifdef REMO_RC5
           =1 #define EnableRemoconInt()  { RemoDataReady = 0;  EX0 = 1;}
           =1 #endif
  25      =1  void  InitCPU(void);
  26      =1  void  InitVars(void);
  27      =1  void  InitTechwell(void);
  28      =1  void  main_init (void);
  29      =1  void  PowerDown( void );
  30      =1  #if 0
           =1 BYTE  OKSleepTime(void);
           =1 #endif
  33      =1  #ifdef REMO_RC5
           =1 void  InitForRemo(void);
           =1 #endif
  36      =1  void  PowerLED(BYTE flag);
  37      =1  void    Wait_ms(WORD Tms);
  38      =1  BYTE    TW2835Command(char,char,char,char,char);
  39      =1  
  40      =1  #ifdef Monitor_debug
  41      =1  BYTE RS_rx(void);
  42      =1  #endif
  43      =1  
  44      =1  #endif
  45      =1  
  32          #include "HS_keyremo.h"
   1      =1  #ifndef _HS_keyremo_
   2      =1  #define _HS_keyremo_
   3      =1  
   4      =1  //
   5      =1  // KeyRemo.h
   6      =1  // Default function for Key Input and Remocon Input
   7      =1  //
   8      =1  //=============================================================================
   9      =1  //                        Operation Key Mapping
  10      =1  //=============================================================================
  11      =1  
  12      =1  
  13      =1  
  14      =1  #define  SelectMode 0
  15      =1  #define  JumpMode 1
  16      =1  
  17      =1  #define COMPOSITE1          1
  18      =1  #define COMPOSITE2          2
  19      =1  #define COMPOSITE3          3
  20      =1  #define COMPOSITE4          4
  21      =1  
  22      =1  
  23      =1  #ifndef QUAD
  24      =1  
  25      =1  #define COMPOSITE1          1
  26      =1  #define COMPOSITE2          2
  27      =1  #define COMPOSITE3          3
  28      =1  #define COMPOSITE4          4
  29      =1  
  30      =1  #ifdef AWT_ML072S
  31      =1  #define SOURCE_A      1     
  32      =1  #define SOURCE_R            2   
  33      =1  #define SOURCE_AV           3
  34      =1  #define SOURCE_B            4 
  35      =1  #else
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 66  

           =1 #define SOURCE_A      1   
           =1 #define SOURCE_B            2   
           =1 #define SOURCE_R            3   
           =1 #define SOURCE_AV           4
           =1 #endif
  41      =1  
  42      =1  void CheckSourceMode(BYTE sorce);
  43      =1  #endif
  44      =1  
  45      =1  
  46      =1  
  47      =1  extern BYTE NowModeState;
  48      =1  extern BYTE TriggerFlag;
  49      =1  extern bit  ParkFlag;
  50      =1  extern BYTE  Attr_A,Attr_B,Attr_C,Attr_R; 
  51      =1  extern BYTE TimeStep;
  52      =1  extern BYTE SEQFlag;
  53      =1  extern BYTE SEQIndex;
  54      =1  extern BYTE TriggerMode;
  55      =1  extern bit AVFlag;
  56      =1  extern bit VGAAudio;
  57      =1  
  58      =1  
  59      =1  
  60      =1  //BYTE TW2835Command(char,char,char,char,char);
  61      =1  void SetSourceMode(BYTE Index,char ,char ,char ,char );
  62      =1  void SetJumpSource(BYTE Index,char ,char ,char ,char );  //Pinchi 20150825 add
  63      =1  void SetSelectMode(void);
  64      =1  //void PriorityOffSelectMode(void);
  65      =1  void SetJumpMode(void);
  66      =1  void SetNowMode(void);
  67      =1  void SetRearSource(void);
  68      =1  void SetLeftSource(void);
  69      =1  void SetRightSource(void);
  70      =1  void CheckMirror(void);
  71      =1  BYTE CheckTrigger(void);
  72      =1  void TriggerHandler(BYTE T_Flag);
  73      =1  void SEQMode(void);
  74      =1  
  75      =1  void SelectBoxHandler(void);
  76      =1  
  77      =1  extern void CheckNewTriggerFunc(void);
  78      =1  
  79      =1  #endif
  33          #include "HS_DisplayOSD.h"
   1      =1  #ifndef _HS_DisplayOSD_
   2      =1  #define _HS_DisplayOSD_
   3      =1  
   4      =1  
   5      =1  enum DisplayInformation
   6      =1  {
   7      =1    InfoOSDMENULOCKED,
   8      =1    InfoOSDMENUATCIVE,
   9      =1  #ifdef SUPPORT_SDCARD  //Pinchi 20150319 add
           =1   InfoFORMATSDCARD,
           =1   InfoFORMATSUCCESS,
           =1   InfoFORMATFAIL,
           =1   InfoRECORDERROR,
           =1   InfoPASSWORDERROR,
           =1   InfoFWUpdate,
           =1   InfoFWUpdateSUCCESS,
           =1   InfoFWUpdateFAIL,
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 67  

           =1   InfoSDCARDReset,
           =1   InfoSDCARDNotReady,
           =1   InfoUpdateConfigStart,
           =1   InfoUpdateConfigFail,
           =1   InfoUpdateConfigSuccess,
           =1 #endif
  24      =1    InfoAutoDayNight_Auto,
  25      =1    InfoAutoDayNight_Day,
  26      =1    InfoAutoDayNight_Night,
  27      =1    InfoPLZRESETSYSTEM,
  28      =1  #ifdef AWT_NO_SIGNAL_MSG  //Pinchi 20150319 add for to display "NO VIDEO SIGNAL" by AWT request of 2015030
             -2
  29      =1    InfoNoVideoSignal,
  30      =1  #endif
  31      =1  
  32      =1  };
  33      =1  
  34      =1  //#define   InfoUpdateConfigStart 0x01
  35      =1  //#define   InfoUpdateConfigFail    0x02
  36      =1  //#define   InfoUpdateConfigSuccess 0x03
  37      =1  
  38      =1  #define   NORMAL_Record   0x01
  39      =1  #define   Manual_Record 0x02
  40      =1  #define   ALARM_Record  0x04
  41      =1  #define   GPS       0x08
  42      =1  #define   G_Sensor    0x10
  43      =1  #define   WIFI      0x20 
  44      =1  #define   WIFI_Signal   0x40
  45      =1  #define   OverWrite_Record  0x80
  46      =1  
  47      =1  void DisplayGaugeOSD(void);
  48      =1  void ClearGAUGEINFO(void);
  49      =1  void DisplaylockOSD(void); 
  50      =1  void DisplayactvOSD(void); 
  51      =1  void DisplayNumber(BYTE addr,WORD val,BYTE type);
  52      =1  //#ifdef SUPPORT_SDCARD
  53      =1  void DisplayDVRStatus(void);
  54      =1  void DisplayFormatOSD(void);
  55      =1  void DisplayFormatOkOSD(void);
  56      =1  void DisplayFormatFailOSD(void);
  57      =1  void DisplayFWUpDate(void);
  58      =1  void DisplayFWUpDateOK(void);
  59      =1  void DisplayFWUpDateFail(void);
  60      =1  void DisplayFWVersion(void) ;
  61      =1  void DisplayDVRnotReady(void);
  62      =1  void DisplayInformation(BYTE info);
  63      =1  //#endif    //#ifdef SUPPORT_SDCARD
  64      =1  
  65      =1  #if 0 //def AWT_NO_SIGNAL_MSG  //Pinchi 20150319 add for to display "NO VIDEO SIGNAL" by AWT request of 20
             -150302
           =1 void AWT_Display_NoVideoSignal(BYTE bOnOff);
           =1 #endif
  68      =1  
  69      =1  #endif
  70      =1  
  34          #include "rgbmix.h"     
   1      =1  #ifndef __RGBMIX__
   2      =1  #define __RGBMIX__
   3      =1  
   4      =1  #include "RegMap.h"
   1      =2  #ifndef __REGMAP__
   2      =2  #define __REGMAP__
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 68  

   3      =2  
   4      =2  //-----------------------------------------------------------------------------
   5      =2  //        Individual Decoder Registers 
   6      =2  //-----------------------------------------------------------------------------
   7      =2  
   8      =2  #define MCU_STOP_MODE 0xc8  // bit 7 is mcu stop, bit5 is MCU debug
   9      =2  
  10      =2  #define LAD0      0xc9  // Low speed AD channel 0
  11      =2  #define LAD1      0xca  // Low speed AD channel 1
  12      =2  
  13      =2  #define REG_PAGE    0xff
  14      =2  #define STATUS0     0xd0
  15      =2  #define STATUS1     0xd1
  16      =2  #define IRQ_EN1     0xd2
  17      =2  #define IRQ_EN0     0xd3
  18      =2  
  19      =2  //-----------------------------------------------------------------------------
  20      =2  //        Individual Decoder Registers 
  21      =2  //-----------------------------------------------------------------------------
  22      =2  
  23      =2  #define DECODERADDRESS  TW88I2CAddress
  24      =2  
  25      =2  #define CVFMT     0x1e  // Component Video Format
  26      =2  #define FBSHIFT     0x38  // RGB Anti-Alias Filter/FB Shift Level
  27      =2  #define SHUE      0x3e  // RGB Hue
  28      =2  #define SCONTRAST   0x3b  // RGB Contrast
  29      =2  #define SBRIGHT     0x3a  // RGB Brightness
  30      =2  #define SCbGAIN     0x3c  // RGB Cb Gain
  31      =2  #define SCrGAIN     0x3d  // RGB Cb Gain
  32      =2  #define RGBCONTROL    0x36  // RGB Powerdown..
  33      =2  #define RGBMISC     0x39
  34      =2  #define FBCONTRL    0x3F
  35      =2  
  36      =2  //#define OSD_ADJ     0xce
  37      =2  #define PNLSHARPNESS  0x78  // Sharpness Control
  38      =2  #define OSDWINSTATUS  0x95
  39      =2  //-----------------------------------------------------------------------------
  40      =2  //        Common Registers
  41      =2  //-----------------------------------------------------------------------------
  42      =2  #define CSTATUS     0x01  // Chip Status
  43      =2  #define INFORM      0x02  // Input Format
  44      =2  #define ACNTL     0x06  // Analog Control
  45      =2  #define CROP_HI     0x07  // Cropping High
  46      =2  #define VDELAY_LO   0x08  // Vertical Delay Low
  47      =2  #define VACTIVE_LO    0x09  // Vertical Active Low
  48      =2  #define HDELAY_LO   0x0a  // Horizontal Delay Low
  49      =2  #define HACTIVE_LO    0x0b  // Horizontal Active Low
  50      =2  #define CNTRL1      0x0c  // Control 1
  51      =2  
  52      =2  #define BRIGHT      0x10  // Brightness Control
  53      =2  #define CONTRAST    0x11  // Contrast Control
  54      =2  #define SHARPNESS   0x12  // Sharpness Control
  55      =2  #define SAT_U     0x13  // Chroma(U) Gain
  56      =2  #define SAT_V     0x14  // Chroma(V) Gain
  57      =2  #define HUE       0x15  // Hue Conrol
  58      =2  #define V_PEAKING   0x17  // Vertical Peaking
  59      =2  
  60      =2  #define CC_STATUS   0x1a  // CC/EDS Status
  61      =2  #define CC_DATA     0x1b  // CC/EDS Data
  62      =2  #define SDT       0x1c  // Standard Selection
  63      =2  #define SDTR      0x1d  // Standard Recognition
  64      =2  
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 69  

  65      =2  #define V_CONTROL2    0x29  // Vertical Control II
  66      =2  #define HFILTER     0x2c
  67      =2  #define MISC1     0x2d  // Miscellaneous Control 1
  68      =2  #define MISC2     0x2e  // Miscellaneous Control 2
  69      =2  #define MISC3     0x2f  // Miscellaneous Control 2
  70      =2  
  71      =2  #define VBI_CNTL2   0x34  // VBI control 2 - WSSEN
  72      =2  #define CC_ODDLINE    0x35  // CC Odd Line
  73      =2  
  74      =2  #define LADC0     0xc9  //LADC Channel 0 Input Value 
  75      =2  #define LADC1     0xca  //LADC Channel 1 Input Value 
  76      =2  
  77      =2  #define WriteDecoder(index, val)    WriteTW88( index, val )
  78      =2  #define ReadDecoder(index)        ReadTW88( index )
  79      =2  
  80      =2  #endif // __REGMAP__
  81      =2  
   5      =1  
   6      =1  //#define SetDigitalVideoContrastReg(vcval)       WriteTW88(0x3b, vcval)
   7      =1  //#define SetDigitalVideoBrightnessReg(vbval)       WriteTW88(0x3c, vbval )
   8      =1  //#define SetDigitalVideoHueReg(vhval)          WriteTW88(0x32, vhval )
   9      =1  //#define SetDigitalVideoSaturationReg(gain, vhval)   WriteTW88(0x3d+gain, (ReadTW88(0x3d+gain)&0x80) + vhv
             -al )
  10      =1  #define SetDigitalVideoContrastReg(vcval)       WriteI2C(DECODERADDRESS, SCONTRAST, vcval)
  11      =1  #define SetDigitalVideoBrightnessReg(vbval)       WriteI2C(DECODERADDRESS, SBRIGHT, vbval )
  12      =1  #define SetDigitalVideoHueReg(vhval)          WriteI2C(DECODERADDRESS, SHUE,  vhval )
  13      =1  #define SetDigitalVideoSaturationReg(gain, vhval)   WriteI2C(DECODERADDRESS, SCbGAIN+gain, (ReadI2C(DECODER
             -ADDRESS, SCbGAIN+gain)&0x80) + vhval )
  14      =1  
  15      =1  #endif // __RGBMIX__
  35          #include "panel.h"
   1      =1  //PanelConfig
   2      =1  
   3      =1    #if   defined SXGA
           =1             #define PHR_ 1280
           =1             #define PVR_ 1024
           =1   #elif defined XGA 
           =1             #define PHR_ 1024
           =1             #define PVR_ 768
           =1   #elif defined SVGA
           =1             #define PHR_ 800
           =1             #define PVR_ 600
           =1   #elif defined VGA
           =1             #define PHR_ 640
           =1             #define PVR_ 480
           =1   #elif defined QVGA
           =1             #define PHR_ 320
           =1             #define PVR_ 240
           =1   #elif defined WXGA
           =1             #define PHR_ 1280 //1366
           =1             #define PVR_ 768
           =1   #elif defined WSVGA
           =1             #define PHR_ 1024
           =1             #define PVR_ 600
           =1   #elif defined WVGA
  25      =1              #define PHR_ 800
  26      =1              #define PVR_ 480//600
  27      =1    #elif defined WQVGA
           =1         //    #define PHR_ 960 //480
           =1         //    #define PVR_ 237
           =1             #define PHR_ 480 //480
           =1             #define PVR_ 240
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 70  

           =1   #endif
  33      =1  
  34      =1   
  35      =1  
  36      =1  /*
  37      =1  #define ACTIVE_LOW      0
  38      =1  #define ACTIVE_HIGH     1
  39      =1  
  40      =1  CODE struct PanelConfig {
  41      =1    unsigned    x_res,          y_res;
  42      =1    unsigned char h_sync_min_pulse_width, v_sync_min_pulse_width;
  43      =1    unsigned    h_min_back_porch;
  44      =1    unsigned char h_sync_polarity,    v_sync_polarity;
  45      =1    unsigned    dot_clock,        max_clock;      // in unit Mhz*10
  46      =1    unsigned char pixs_per_clock;
  47      =1    unsigned char DE_only;
  48      =1  } PanelConfig=
  49      =1    {
  50      =1    //----------------------------------------------------
  51      =1    #ifdef WXGA
  52      =1    //LG  LM171W01 WXGA
  53      =1    1280,     768,
  54      =1    8,        1,
  55      =1    8,
  56      =1    ACTIVE_LOW,   ACTIVE_LOW,
  57      =1    #ifdef DOUBLE_PIXEL
  58      =1    320,      470,
  59      =1    2,
  60      =1    #else
  61      =1    650,      950,          //65Mhz
  62      =1    1,
  63      =1    #endif
  64      =1    0
  65      =1    //----------------------------------------------------
  66      =1    #elif defined XGA
  67      =1    //Samsung  LT150x1-151 XGA
  68      =1    1024,     768,
  69      =1    68,       1,
  70      =1    80,
  71      =1    ACTIVE_LOW,   ACTIVE_LOW,
  72      =1    #ifdef DOUBLE_PIXEL
  73      =1    325,      400,          //32.5Mhz
  74      =1    2,
  75      =1    #else
  76      =1    650,      800,
  77      =1    1,
  78      =1    #endif
  79      =1    0
  80      =1    //----------------------------------------------------
  81      =1    #elif defined SXGA
  82      =1    //Samsung  LT170E2-131  SXGA
  83      =1    1280,     1024,
  84      =1    1,        1,
  85      =1    1,
  86      =1    ACTIVE_LOW,   ACTIVE_LOW,
  87      =1    #ifdef DOUBLE_PIXEL
  88      =1    540,      540,          //54.5Mhz
  89      =1    2,
  90      =1    #else
  91      =1    1080,     1080,
  92      =1    1,
  93      =1    #endif
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 71  

  94      =1    0
  95      =1    //----------------------------------------------------
  96      =1    #elif defined WSVGA           // Thosiba
  97      =1    1024,     600,
  98      =1    8,        3,
  99      =1    1,//80,       
 100      =1    ACTIVE_LOW,   ACTIVE_LOW,
 101      =1    #ifdef DOUBLE_PIXEL
 102      =1    325,      450,
 103      =1    2,
 104      =1    #else
 105      =1    500,      550,          //50Mhz
 106      =1    1,
 107      =1    #endif
 108      =1    0
 109      =1    //----------------------------------------------------
 110      =1  
 111      =1    #elif defined SVGA
 112      =1    //NEC NL8060AC26-11 SVGA
 113      =1    800,      600,
 114      =1    2,        1,
 115      =1    13,
 116      =1    ACTIVE_LOW,   ACTIVE_LOW,
 117      =1    #ifdef DOUBLE_PIXEL
 118      =1    384,      500,          //38.4MHz
 119      =1    2,
 120      =1    #else
 121      =1    670,      1000,
 122      =1    1,
 123      =1    #endif
 124      =1    0
 125      =1    //----------------------------------------------------
 126      =1    #elif defined VGA
 127      =1    //NEC NL6448AC33  VGA         // OK with SetPanelRegisters
 128      =1    640,      480,
 129      =1    10,       1,
 130      =1    4,
 131      =1    ACTIVE_LOW,   ACTIVE_LOW,
 132      =1    #ifdef DOUBLE_PIXEL
 133      =1    130,      150,          //25.2MHz
 134      =1    2,
 135      =1    #else
 136      =1    250,      300,
 137      =1    1,
 138      =1    #endif
 139      =1    0
 140      =1    //----------------------------------------------------
 141      =1  
 142      =1    #elif defined WVGA
 143      =1    // Panasonic  EDTCB27QBF WVGA
 144      =1    800,      480,
 145      =1    4,        1,
 146      =1    7,
 147      =1    ACTIVE_LOW,   ACTIVE_LOW,
 148      =1    #ifdef DOUBLE_PIXEL
 149      =1    166,      200,          //33.2MHz
 150      =1    2,
 151      =1    #else
 152      =1    332,      360,          //33.2MHz
 153      =1    1,
 154      =1    #endif
 155      =1    0
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 72  

 156      =1  
 157      =1    //----------------------------------------------------
 158      =1    #else
 159      =1    // Default : XGA panel
 160      =1    // Samsung  LT150x1-151 XGA
 161      =1    1024,     768,
 162      =1    68,       1,
 163      =1    80,
 164      =1    ACTIVE_LOW,   ACTIVE_LOW,
 165      =1    #ifdef DOUBLE_PIXEL
 166      =1    325,      400,          //32.5Mhz
 167      =1    2,
 168      =1    #else
 169      =1    650,      800,          //32.5Mhz
 170      =1    1,
 171      =1    #endif
 172      =1    0
 173      =1    #endif
 174      =1    };
 175      =1  
 176      =1  */
  36          #include "HS_IOdef.h"
   1      =1  #ifndef _HS_IOdef_
   2      =1  #define _HS_IOdef_
   3      =1  
   4      =1  
   5      =1  #include "Reg.h"
   1      =2  //
   2      =2  //Registers.h : Register declaration
   3      =2  //
   4      =2  
   5      =2  #ifndef __REGISTERS__
           =2 #define __REGISTERS__
           =2 
           =2 #ifdef INTERNAL_MCU
           =2 /*  BYTE Registers  */
           =2 sfr P0    = 0x80;
           =2 sfr P1    = 0x90;
           =2 sfr P2    = 0xA0;
           =2 sfr P3    = 0xB0;
           =2 sfr PSW   = 0xD0;
           =2 sfr ACC   = 0xE0;
           =2 sfr B     = 0xF0;
           =2 sfr SP    = 0x81;
           =2 sfr DPL   = 0x82;
           =2 sfr DPH   = 0x83;
           =2 sfr PCON  = 0x87;
           =2 sfr TCON  = 0x88;
           =2 sfr TMOD  = 0x89;
           =2 sfr TL0   = 0x8A;
           =2 sfr TL1   = 0x8B;
           =2 sfr TH0   = 0x8C;
           =2 sfr TH1   = 0x8D;
           =2 sfr IE    = 0xA8;
           =2 sfr IP    = 0xB8;
           =2 sfr SCON  = 0x98;
           =2 sfr SBUF  = 0x99;
           =2 
           =2 //sfr P4    = 0xd8;
           =2 
           =2 /*  8052 Extensions  */
           =2 sfr EXIF  = 0x91;   // external interrupt 2,3,4,5 flags should be cleared by software
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 73  

           =2 sfr T2CON = 0xC8;
           =2 sfr RCAP2L = 0xCA;
           =2 sfr RCAP2H = 0xCB;
           =2 sfr TL2   = 0xCC;
           =2 sfr TH2   = 0xCD;
           =2 sfr EICON = 0xD8;
           =2 sfr EIE   = 0xE8;
           =2 sfr EIP   = 0xF8;
           =2 
           =2 /*  TW88 Core Extension */
           =2 sfr BANKREG   = 0x9A;
           =2 sfr SPICONTROL  = 0x9B;
           =2 sfr T0HIGH    = 0x9C;
           =2 sfr T0LOW     = 0x9D;
           =2 sfr T1HIGH    = 0x9E;
           =2 sfr T1LOW     = 0x9F;
           =2 sfr T2HIGH    = 0x93;
           =2 sfr T2LOW     = 0x94;
           =2 
           =2 /*  BIT Registers  */
           =2 /*  PSW  */
           =2 sbit CY    = 0xD7;
           =2 sbit AC    = 0xD6;
           =2 sbit F0    = 0xD5;
           =2 sbit RS1   = 0xD4;
           =2 sbit RS0   = 0xD3;
           =2 sbit OV    = 0xD2;
           =2 sbit P     = 0xD0;
           =2 
           =2 /*  TCON  */
           =2 sbit TF1   = 0x8F;
           =2 sbit TR1   = 0x8E;
           =2 sbit TF0   = 0x8D;
           =2 sbit TR0   = 0x8C;
           =2 sbit IE1   = 0x8B;
           =2 sbit IT1   = 0x8A;
           =2 sbit IE0   = 0x89;
           =2 sbit IT0   = 0x88;
           =2 
           =2 /*  IE  */
           =2 sbit EA    = 0xAF;
           =2 sbit ES    = 0xAC;
           =2 sbit ET1   = 0xAB;
           =2 sbit EX1   = 0xAA;
           =2 sbit ET0   = 0xA9;
           =2 sbit EX0   = 0xA8;
           =2 
           =2 /*  EIE  */
           =2 sbit EWDI  = 0xEC;    // Watch dog timer interrupt enable
           =2 sbit EX5   = 0xEB;    // external interrupt 5 enable
           =2 sbit EX4   = 0xEA;    // external interrupt 4 enable
           =2 sbit EX3   = 0xE9;    // external interrupt 3 enable
           =2 sbit EX2   = 0xE8;    // external interrupt 2 enable
           =2 
           =2 /*  IP  */
           =2 sbit PS    = 0xBC;
           =2 sbit PT1   = 0xBB;
           =2 sbit PX1   = 0xBA;
           =2 sbit PT0   = 0xB9;
           =2 sbit PX0   = 0xB8;
           =2 
           =2 /*  EIP  */
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 74  

           =2 sbit PWDI  = 0xFC;    // Watch dog timer interrupt priority
           =2 sbit PX5   = 0xFB;    // external interrupt5 priority
           =2 sbit PX4   = 0xFA;    // external interrupt4 priority
           =2 sbit PX3   = 0xF9;    // external interrupt3 priority
           =2 sbit PX2   = 0xF8;    // external interrupt2 priority
           =2 
           =2 /*  P3  */
           =2 sbit RD    = 0xB7;
           =2 sbit WR    = 0xB6;
           =2 sbit T1    = 0xB5;
           =2 sbit T0    = 0xB4;
           =2 sbit INT1  = 0xB3;
           =2 sbit INT0  = 0xB2;
           =2 sbit TXD   = 0xB1;
           =2 sbit RXD   = 0xB0;
           =2 
           =2 /*  SCON  */
           =2 sbit SM0   = 0x9F;
           =2 sbit SM1   = 0x9E;
           =2 sbit SM2   = 0x9D;
           =2 sbit REN   = 0x9C;
           =2 sbit TB8   = 0x9B;
           =2 sbit RB8   = 0x9A;
           =2 sbit TI    = 0x99;
           =2 sbit RI    = 0x98;
           =2 
           =2 /*  8052 Extensions  */
           =2 /*  IE  */
           =2 sbit ET2   = 0xAD;
           =2 
           =2 /*  IP  */
           =2 sbit PT2   = 0xBD;
           =2 
           =2 /*  P1  */
           =2 sbit T2EX  = 0x91;
           =2 sbit T2    = 0x90;
           =2              
           =2 /*  T2CON  */
           =2 sbit TF2   = 0xCF;
           =2 sbit EXF2  = 0xCE;
           =2 sbit RCLK  = 0xCD;
           =2 sbit TCLK  = 0xCC;
           =2 sbit EXEN2 = 0xCB;
           =2 sbit TR2   = 0xCA;
           =2 sbit C_T2  = 0xC9;
           =2 sbit CP_RL2= 0xC8;
           =2 
           =2 sfr CHPENR = 0xF6;
           =2 sfr CHPCON = 0xBF;
           =2 sfr SFRAL  = 0xC4;
           =2 sfr SFRAH  = 0xC5;
           =2 sfr SFRFD  = 0xC6;
           =2 sfr SFRCN  = 0xC7;
           =2 
           =2 sbit P0_0  = 0x80;
           =2 sbit P0_1  = 0x81;
           =2 sbit P0_2  = 0x82;
           =2 sbit P0_3  = 0x83;
           =2 sbit P0_4  = 0x84;
           =2 sbit P0_5  = 0x85;
           =2 sbit P0_6  = 0x86;
           =2 sbit P0_7  = 0x87;
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 75  

           =2 
           =2 sbit P1_0  = 0x90;
           =2 sbit P1_1  = 0x91;
           =2 sbit P1_2  = 0x92;
           =2 sbit P1_3  = 0x93;
           =2 sbit P1_4  = 0x94;
           =2 sbit P1_5  = 0x95;
           =2 sbit P1_6  = 0x96;
           =2 sbit P1_7  = 0x97;
           =2 
           =2 sbit P2_0  = 0xa0;
           =2 sbit P2_1  = 0xa1;
           =2 sbit P2_2  = 0xa2;
           =2 sbit P2_3  = 0xa3;
           =2 sbit P2_4  = 0xa4;
           =2 sbit P2_5  = 0xa5;
           =2 sbit P2_6  = 0xa6;
           =2 sbit P2_7  = 0xa7;
           =2 
           =2 sbit P3_0  = 0xb0;
           =2 sbit P3_1  = 0xb1;
           =2 sbit P3_2  = 0xb2;
           =2 sbit P3_3  = 0xb3;
           =2 sbit P3_4  = 0xb4;
           =2 sbit P3_5  = 0xb5;
           =2 sbit P3_6  = 0xb6;
           =2 sbit P3_7  = 0xb7;
           =2 
           =2 #else // external MCU=WINBOND
           =2 /*  BYTE Registers  */
           =2 sfr P0    = 0x80;
           =2 sfr P1    = 0x90;
           =2 sfr P2    = 0xA0;
           =2 sfr P3    = 0xB0;
           =2 sfr PSW   = 0xD0;
           =2 sfr ACC   = 0xE0;
           =2 sfr B     = 0xF0;
           =2 sfr SP    = 0x81;
           =2 sfr DPL   = 0x82;
           =2 sfr DPH   = 0x83;
           =2 sfr PCON  = 0x87;
           =2 sfr TCON  = 0x88;
           =2 sfr TMOD  = 0x89;
           =2 sfr TL0   = 0x8A;
           =2 sfr TL1   = 0x8B;
           =2 sfr TH0   = 0x8C;
           =2 sfr TH1   = 0x8D;
           =2 sfr CKCON = 0x8E;   //clock control register, default =0x01
           =2 sfr IE    = 0xA8;
           =2 sfr IP    = 0xB8;
           =2 sfr SCON  = 0x98;
           =2 sfr SBUF  = 0x99;
           =2 sfr P4 = 0xE8; //Megawin Ryan@970716
           =2 //sfr P4    = 0xa5;      //SST MCU
           =2 //sfr P4    = 0xd8;   //winbond<960820>
           =2 
           =2 /*  8052 Extensions  */
           =2 sfr ADCTL = 0xC5;   //william-20111017
           =2 sfr ADCV = 0xC6;    //william-20111017
           =2 sfr ADCVL = 0xE8;   //william-20111017
           =2 sfr T2CON = 0xC8;
           =2 sfr RCAP2L = 0xCA;
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 76  

           =2 sfr RCAP2H = 0xCB;
           =2 sfr TL2   = 0xCC;
           =2 sfr TH2   = 0xCD;
           =2 
           =2 // for UART2
           =2 sfr S2CON  = 0xAA;
           =2 sfr S2BRT  = 0xBA;
           =2 sfr S2BUF  = 0x9A;
           =2 sfr AUXR2  = 0xA6;
           =2 sfr AUXIE  = 0xAD;
           =2 
           =2 sfr P1M0  = 0x91;
           =2 sfr P1M1  = 0x92;
           =2 sfr P0M0  = 0x93;
           =2 sfr P0M1  = 0x94;
           =2 sfr P2M0  = 0x95;
           =2 sfr P2M1  = 0x96;
           =2 sfr P3M0  = 0xB1;
           =2 sfr P3M1  = 0xB2;
           =2 
           =2 // for PCA
           =2 sfr CCON   = 0xD8;
           =2 sfr CMOD   = 0xD9;
           =2 sfr CCAPM0 = 0xDA;
           =2 sfr CCAPM1 = 0xDB;
           =2 sfr CCAPM2 = 0xDC;
           =2 sfr CCAPM3 = 0xDD;
           =2 sfr CCAPM4 = 0xDE;
           =2 sfr CCAPM5 = 0xDF;
           =2 sfr CL     = 0xE9;
           =2 sfr CH     = 0xF9;
           =2 sfr CCAP0L = 0xEA;
           =2 sfr CCAP0H = 0xFA;
           =2 sfr CCAP1L = 0xEB;
           =2 sfr CCAP1H = 0xFB;
           =2 sfr CCAP2L = 0xEC;
           =2 sfr CCAP2H = 0xFC;
           =2 sfr CCAP3L = 0xED;
           =2 sfr CCAP3H = 0xFD;
           =2 sfr CCAP4L = 0xEE;
           =2 sfr CCAP4H = 0xFE;
           =2 sfr CCAP5L = 0xEF;
           =2 sfr CCAP5H = 0xFF;
           =2 sfr PCAPWM0= 0xF2;
           =2 sfr PCAPWM1= 0xF3;
           =2 sfr PCAPWM2= 0xF4;
           =2 sfr PCAPWM3= 0xF5;
           =2 sfr PCAPWM4= 0xF6;
           =2 sfr PCAPWM5= 0xF7;
           =2 
           =2 /*  BIT Registers  */
           =2 /*  PSW  */
           =2 sbit CY    = 0xD7;
           =2 sbit AC    = 0xD6;
           =2 sbit F0    = 0xD5;
           =2 sbit RS1   = 0xD4;
           =2 sbit RS0   = 0xD3;
           =2 sbit OV    = 0xD2;
           =2 sbit P     = 0xD0;
           =2 
           =2 /*  TCON  */
           =2 sbit TF1   = 0x8F;
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 77  

           =2 sbit TR1   = 0x8E;
           =2 sbit TF0   = 0x8D;
           =2 sbit TR0   = 0x8C;
           =2 sbit IE1   = 0x8B;
           =2 sbit IT1   = 0x8A;
           =2 sbit IE0   = 0x89;
           =2 sbit IT0   = 0x88;
           =2 
           =2 /*  IE  */
           =2 sbit EA    = 0xAF;
           =2 sbit ES    = 0xAC;
           =2 sbit ET1   = 0xAB;
           =2 sbit EX1   = 0xAA;
           =2 sbit ET0   = 0xA9;
           =2 sbit EX0   = 0xA8;
           =2 
           =2 /*  IP  */
           =2 sbit PS    = 0xBC;
           =2 sbit PT1   = 0xBB;
           =2 sbit PX1   = 0xBA;
           =2 sbit PT0   = 0xB9;
           =2 sbit PX0   = 0xB8;
           =2 
           =2 /*  P3  */
           =2 sbit RD    = 0xB7;
           =2 sbit WR    = 0xB6;
           =2 sbit T1    = 0xB5;
           =2 sbit T0    = 0xB4;
           =2 sbit INT1  = 0xB3;
           =2 sbit INT0  = 0xB2;
           =2 sbit TXD   = 0xB1;
           =2 sbit RXD   = 0xB0;
           =2 
           =2 /*  SCON  */
           =2 sbit SM0   = 0x9F;
           =2 sbit SM1   = 0x9E;
           =2 sbit SM2   = 0x9D;
           =2 sbit REN   = 0x9C;
           =2 sbit TB8   = 0x9B;
           =2 sbit RB8   = 0x9A;
           =2 sbit TI    = 0x99;
           =2 sbit RI    = 0x98;
           =2 
           =2 /*  8052 Extensions  */
           =2 /*  IE  */
           =2 sbit ET2   = 0xAD;
           =2 
           =2 /*  IP  */
           =2 sbit PT2   = 0xBD;
           =2 
           =2 /*  P1  */
           =2 sbit T2EX  = 0x91;
           =2 sbit T2    = 0x90;
           =2              
           =2 /*  T2CON  */
           =2 sbit TF2   = 0xCF;
           =2 sbit EXF2  = 0xCE;
           =2 sbit RCLK  = 0xCD;
           =2 sbit TCLK  = 0xCC;
           =2 sbit EXEN2 = 0xCB;
           =2 sbit TR2   = 0xCA;
           =2 sbit C_T2  = 0xC9;
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 78  

           =2 sbit CP_RL2= 0xC8;
           =2 
           =2 sfr CHPENR = 0xF6;
           =2 sfr CHPCON = 0xBF;
           =2 sfr SFRAL  = 0xC4;
           =2 sfr SFRAH  = 0xC5;
           =2 sfr SFRFD  = 0xC6;
           =2 sfr SFRCN  = 0xC7;
           =2 
           =2 sbit P0_0  = 0x80;
           =2 sbit P0_1  = 0x81;
           =2 sbit P0_2  = 0x82;
           =2 sbit P0_3  = 0x83;
           =2 sbit P0_4  = 0x84;
           =2 sbit P0_5  = 0x85;
           =2 sbit P0_6  = 0x86;
           =2 sbit P0_7  = 0x87;
           =2 
           =2 sbit P1_0  = 0x90;
           =2 sbit P1_1  = 0x91;
           =2 sbit P1_2  = 0x92;
           =2 sbit P1_3  = 0x93;
           =2 sbit P1_4  = 0x94;
           =2 sbit P1_5  = 0x95;
           =2 sbit P1_6  = 0x96;
           =2 sbit P1_7  = 0x97;
           =2 
           =2 sbit P2_0  = 0xa0;
           =2 sbit P2_1  = 0xa1;
           =2 sbit P2_2  = 0xa2;
           =2 sbit P2_3  = 0xa3;
           =2 sbit P2_4  = 0xa4;
           =2 sbit P2_5  = 0xa5;
           =2 sbit P2_6  = 0xa6;
           =2 sbit P2_7  = 0xa7;
           =2 
           =2 sbit P3_0  = 0xb0;
           =2 sbit P3_1  = 0xb1;
           =2 sbit P3_2  = 0xb2;
           =2 sbit P3_3  = 0xb3;
           =2 sbit P3_4  = 0xb4;
           =2 sbit P3_5  = 0xb5;
           =2 sbit P3_6  = 0xb6;
           =2 sbit P3_7  = 0xb7;
           =2 
           =2 sbit P4_0  = P4^0;
           =2 sbit P4_1  = P4^1;
           =2 sbit INT3  = P4^2;
           =2 sbit INT2  = P4^3;
           =2 
           =2 sfr P4M0  = 0xB3;
           =2 sfr P4M1  = 0xB4;
           =2 #endif  // INTERNAL_MCU
           =2 
           =2 #endif  //__REGISTERS__
 401      =2  
   6      =1  
   7      =1  #ifdef AWT_ML072S
   8      =1    #ifdef HS
   9      =1  #define LEFT_T      P0_0
  10      =1  #define Right_T     P0_1
  11      =1    #else 
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 79  

           =1 #define LEFT_T      P0_1
           =1 #define Right_T     P0_0
           =1   #endif
  15      =1  #else
           =1 #define LEFT_T      P0_0
           =1 #define Right_T     P0_1
           =1 #endif
  19      =1  #define REVERSE_T     P0_2
  20      =1  //#define VGA_T     P0_4
  21      =1  
  22      =1  #ifdef  AWT_ML072Q  //Pinchi 20140902 add for AWT ML072Q
           =1   #ifdef AWT_NEW_SLIM_MODEL  //Pinchi 20150203 add for AWT new slim model
           =1   #define AV_T      P0_3
           =1   #define CAMC_T    P0_4
           =1   #else
           =1   #define CAMC_T    P0_3
           =1   #endif
           =1 #else  //AWT_ML072S & HTRV
  30      =1  #define PARK_T      P0_3
  31      =1  #endif
  32      =1  
  33      =1  #ifdef USE_CAMD  //Pinchi 20150826 add
           =1 #define CAMD_T      P0_5
           =1 #endif
  36      =1  
  37      =1  #ifdef SUPPORT_SDCARD  //Pinchi 20150826 add 
           =1 #define SB_ADC      P1_6
           =1 #define ACC_B     P0_6
           =1 #define PPWR      P3_6
           =1 #define Door_Det    P1_7
           =1 #endif
  43      =1  
  44      =1  #define Audio_Select1   P1_4
  45      =1  #define Audio_Select2   P1_5
  46      =1  #define Audio_Mute    P1_7
  47      =1  //#define AVOutPutSelect  P1_7
  48      =1  //#define RS232Select     P4_0
  49      =1  
  50      =1  //#define GPS_PWR   P3_2
  51      =1  //#define GM8126_WD1  P2_0
  52      =1  //#define GM8126_WD2  P3_5
  53      =1  
  54      =1  #endif
  55      =1  
  37          #include "HS_DVRProtocol.h"
   1      =1  
   2      =1  #ifndef _HS_DVRProtocol_
   3      =1  #define _HS_DVRProtocol_
   4      =1  
   5      =1  //==================================================
   6      =1  //
   7      =1  //==================================================
   8      =1  
   9      =1  #define bSetDVRParam  0x0001
  10      =1  #define bSetDVRDefault  0x0002
  11      =1  #define bSetDATETIME  0x0004
  12      =1  #define bGetDVRParam  0x0008
  13      =1  #define bGetDVRStatus 0x0010
  14      =1  #define bGetDATETIME  0x0020
  15      =1  #define bBOOKMARK   0x0040
  16      =1  #define bSetSystem    0x0080
  17      =1  #define bHalt_Start   0x0100
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 80  

  18      =1  #define bSetFormatSD    0x0200  
  19      =1  #define bGetDVRVersion  0x0400  
  20      =1  #define bFW_Update_Start 0x0800
  21      =1  #define bUpdate_CONFIG  0x1000
  22      =1  #define bDoorClose    0x2000
  23      =1  #define bDoorOpen     0x4000
  24      =1  
  25      =1  
  26      =1  enum HS_DvrCommand
  27      =1  {
  28      =1    CMD_NULL,
  29      =1    SetDVRParam,  // 1
  30      =1    SetDVRDefault,
  31      =1    SetDATETIME,
  32      =1    GetDVRParam,
  33      =1    GetDVRStatus,
  34      =1    GetDATETIME, 
  35      =1    SetFormatSD, 
  36      =1    SendAlarm, 
  37      =1    GetDVRVersion=0x09, 
  38      =1    SendDVRStatus=0x14,
  39      =1    GetLCDMode=0x15,
  40      =1    SendDVRParam=0x16,
  41      =1    SendDVRParamDT=0x17,
  42      =1    SetFormatSDDone=0x18,
  43      =1    GetInformation=0x19,
  44      =1    SetSystem=0x1a,
  45      =1    GPSReset=0x1b,
  46      =1    Halt_Start=0xc8,
  47      =1    Halt_OK=0xc9,
  48      =1    FW_Update_Start=0xca,
  49      =1    FW_Update_OK=0xcb,
  50      =1    MANUALRECSTART=0xdc,
  51      =1    MANUALRECSTOP=0xdd,
  52      =1    SNAPSHOT=0xde,
  53      =1    BOOKMARK=0xdf,
  54      =1    Update_CONFIG=0xe0,
  55      =1    Update_CONFIG_OK=0xe1,
  56      =1    DoorOpen=0xe2,
  57      =1    DoorClose=0xe3,
  58      =1    CMD_UNKNOWN=0xff,
  59      =1    CMD_NUM
  60      =1  };
  61      =1  
  62      =1  //RS485 TX or RX define
  63      =1  enum
  64      =1  {
  65      =1    RS485_TX,   //RS485 Transmit  
  66      =1    RS485_RX    //Rs485 Receive
  67      =1  };
  68      =1  
  69      =1  enum
  70      =1  {
  71      =1    Baud_rate2400,    
  72      =1    Baud_rate4800,  
  73      =1    Baud_rate9600
  74      =1  };
  75      =1  
  76      =1  
  77      =1  //Camera Command ID define
  78      =1  enum
  79      =1  {
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 81  

  80      =1  //  CAM_CLEAR,        //Clear 
  81      =1    CAM_ZOOM_OUT_START,     //Zoom Out  Start
  82      =1  //  CAM_ZOOM_OUT_END,     //Zoom Out  End
  83      =1    CAM_ZOOM_IN_START,      //Zoom In Start
  84      =1  //  CAM_ZOOM_IN_END,      //Zoom In End
  85      =1  //  CAM_IRIS_CLOSE_START,   //IRIS Close Start
  86      =1  //  CAM_IRIS_CLOSE_END,   //IRIS Close End
  87      =1  //  CAM_IRIS_OPEN_START,      //IRIS Open Start
  88      =1  //  CAM_IRIS_OPEN_END,      //IRIS Open End
  89      =1  //  CAM_FOCUS_FAR_START,    //Focus Far Start
  90      =1  //  CAM_FOCUS_FAR_END,    //Focus Far End
  91      =1  //  CAM_FOCUS_NEAR_START,   //Focus Near Start
  92      =1  //  CAM_FOCUS_NEAR_END,   //Focus Near End
  93      =1    CAM_SET,        //Set 
  94      =1    CAM_CALL,       //Call 
  95      =1  //  CAM_FOCUS_SPEED,    //Focus Speed
  96      =1  //  CAM_ZOOM_SPEED,   //Zoom Speed
  97      =1    CAM_PTZ_RIGHT,      //PTZ Right 
  98      =1    CAM_PTZ_LEFT,     //PTZ Left
  99      =1    CAM_PTZ_UP,     //PTZ Up
 100      =1    CAM_PTZ_DOWN,     //PTZ Down
 101      =1    CAM_MENU_ENTER,     //PTZ Down
 102      =1    CAM_Iris_Open,
 103      =1  
 104      =1  //  CAM_PTZ_RIGHT_UP,   //PTZ Right with Up
 105      =1  //  CAM_PTZ_RIGHT_DOWN, //PTZ Right with Down
 106      =1  //  CAM_PTZ_LEFT_UP,    //PTZ Left with Up
 107      =1  //  CAM_PTZ_LEFT_DOWN,  //PTZ Left with Down
 108      =1    CAM_PTZ_STOP      //PTZ Control Stop
 109      =1  };
 110      =1  
 111      =1  void Hs_DvrTxCmdPaser(BYTE Cmd_Id );
 112      =1  void Hs_Protocol_Init(void);
 113      =1  BYTE DvrReceivePaser(void);
 114      =1  void DVRCommandReSend(void);
 115      =1  
 116      =1  #if 0
           =1 BYTE TW2835ReceivePaser(void);
           =1 #endif
 119      =1  extern bit   DVR_Ready;
 120      =1  void CAM_TxCommand_toRS485(BYTE Com_ID);
 121      =1  void Send_PelcoP_Command(void);
 122      =1  void Send_PelcoD_Command(void);
 123      =1  void Send_GE_Command(void);
 124      =1  
 125      =1  #endif
 126      =1  
  38          #include <math.h>
   1      =1  /*--------------------------------------------------------------------------
   2      =1  MATH.H
   3      =1  
   4      =1  Prototypes for mathematic functions.
   5      =1  Copyright (c) 1988-2008 Keil Elektronik GmbH and Keil Software, Inc.
   6      =1  Copyright (c) 2008-2016 ARM Germany GmbH
   7      =1  All rights reserved.
   8      =1  --------------------------------------------------------------------------*/
   9      =1  
  10      =1  #ifndef __MATH_H__
  11      =1  #define __MATH_H__
  12      =1  
  13      =1  #if defined __CX2__ && (__CX2__ >= 558 || __CX2__ == 556 && __CX2_MINOR__ >= 207)
           =1 #ifndef HUGE_VAL
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 82  

           =1 #define HUGE_VAL __inf__
           =1 #endif // HUGE_VAL
           =1 
           =1 #ifndef NAN
           =1 #define NAN __nan__
           =1 #endif // NAN
           =1 
           =1 #pragma SAVE
           =1 #pragma FUNCTIONS(STATIC)
           =1 /* intrinsic functions are reentrant, but need static attribute */
           =1 extern int    abs  (int   val);
           =1 #pragma RESTORE
           =1 #endif
  28      =1  
  29      =1  #pragma SAVE
  30      =1  #pragma REGPARMS
  31      =1  #if !defined (__CX2__)
  32      =1  extern char  cabs  (char  val);
  33      =1  extern int    abs  (int   val);
  34      =1  extern long  labs  (long  val);
  35      =1  #endif
  36      =1  
  37      =1  extern float fabs  (float val);
  38      =1  extern float sqrt  (float val);
  39      =1  extern float exp   (float val);
  40      =1  extern float log   (float val);
  41      =1  extern float log10 (float val);
  42      =1  extern float sin   (float val);
  43      =1  extern float cos   (float val);
  44      =1  extern float tan   (float val);
  45      =1  extern float asin  (float val);
  46      =1  extern float acos  (float val);
  47      =1  extern float atan  (float val);
  48      =1  extern float sinh  (float val);
  49      =1  extern float cosh  (float val);
  50      =1  extern float tanh  (float val);
  51      =1  extern float atan2 (float y, float x);
  52      =1  
  53      =1  extern float ceil  (float val);
  54      =1  extern float floor (float val);
  55      =1  extern float modf  (float val, float *n);
  56      =1  extern float fmod  (float x, float y);
  57      =1  extern float pow   (float x, float y);
  58      =1  
  59      =1  #if defined (__CX2__)
           =1 extern float frexp (float val, int *exp);
           =1 extern float ldexp (float val, int exp);
           =1 #endif
  63      =1  
  64      =1  #pragma RESTORE
  65      =1  
  66      =1  #endif
  39          
  40          //bit AccessEnable = 1;
  41          //void Loader(BYTE);
  42          
  43          extern  CODE BYTE NTSC_Regs[];
  44          extern  CODE BYTE PAL_Regs[];
  45          extern  CODE BYTE DVI_Regs[];
  46          #ifdef ADD_ANALOGPANEL
              extern CODE BYTE NTSC_Regs_Analog[];
              extern CODE BYTE PAL_Regs_Analog[];
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 83  

              #endif
  50          
  51          #ifdef SUPPORT_COMPONENT
              extern CODE BYTE COMP_YPbPr_480I_Reg[];
              extern CODE BYTE COMP_YPbPr_576I_Reg[];
               #ifndef WQVGA
              extern CODE BYTE COMP_YPbPr_480P_Reg[];
              extern CODE BYTE COMP_YPbPr_576P_Reg[];
              extern CODE BYTE COMP_YPbPr_1080I_Reg[];
              extern CODE BYTE COMP_YPbPr_720P_Reg[];
               #endif
              #endif
  61          
  62          #ifdef SUPPORT_GAMMA
              extern CODE BYTE GammaRed[];
              extern CODE BYTE GammaBlue[];
              extern CODE BYTE GammaGreen[];
              #endif
  67          
  68          extern BYTE TR_JUMP_HOLD; //ryan@20170912
  69          extern  BYTE AV_MODE_DELAY;
  70          extern BYTE CAM_QUAD_TO;//ryan@20170928
  71          
  72          extern BYTE OSD_LOCKF;
  73          
  74          BYTE CAMNumber;
  75          BYTE PelcoChoiceFLAG;
  76          BYTE Baud_rate;
  77          
  78          BYTE  SelectModeType;
  79          BYTE  Priority;
  80          BYTE  PowerFlag;
  81          BYTE DVR_AudioRecord;
  82          bit VGAflag=0;
  83          bit   PowerDownStart=0;
  84          bit AccPowerDown=0;
  85          bit DVRReSendDisable;
  86          BYTE  Commanderror;
  87          BYTE AutoDayNightDelay=0;
  88          DATA BYTE PWMLevel=0;
  89          BYTE displayhold_flag;
  90          BYTE  ReverseModeFlag;
  91          
  92          BYTE InitVideoDataSrc =0;
  93            
  94          #ifdef AWT_ML072S //william @20130902 v1.0.1.2
  95          bit   JUMPAVFlag;
  96          #endif
  97          
  98          #ifdef AWT_ML720Q_NEW_TRIGGER_FUN  //Pinchi 20141031 add for AWT request each trigger can work by PRIORITY
             - OFF
              //===== bTri_arry[4]={Left , Right , Reverse , CAM C} =====//
              BYTE bTri_arry[4]={0,0,0,0};
              BYTE bTri_backup[4]={0,0,0,0};
              BYTE bTriOrder=0 , bTriNumber=0;
              bit IsTriggerArrEmpty=1;  //Pinchi 20150210 add
              #endif
 105          
 106          #if 1  //Pinchi 20160921 add to modify data location
 107          DATA BYTE  CheckBuf;
 108          //DATA BYTE  updn_reg[4]={0,0,0,0};
 109          DATA BYTE  SourceMode=0;
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 84  

 110          DATA BYTE  ParkTime=0,RightTime=0,LeftTime=0,ReverseTime=0,RtFlag=0,LtFlag=0,ReverseFlag=0/*,ParkFlag=0*/;
 111          #else
              BYTE  CheckBuf;
              BYTE  CheckInt; 
              
              BYTE  updn_reg[4]={0,0,0,0};
              
              BYTE  SourceMode=0;
              BYTE  ParkTime=0,RightTime=0,LeftTime=0,ReverseTime=0,RtFlag=0,LtFlag=0,ReverseFlag=0,ParkFlag=0;
              #endif
 120          
 121          BYTE  CkPARK=0,CkTMode=0,TGFlag=0,TGFlag1=0,TDisplayFlag=0;
 122          
 123          extern BYTE Disp_Input;
 124          extern BYTE Backlight_TO;
 125          
 126          extern  DATA  WORD  tic_pc;
 127          extern DATA BYTE  RS2_in;
 128          extern DATA BYTE    RS_buf2[BUF_MAX];
 129          extern bit DVR_Ready;
 130          extern bit  GetDVRStatusflag;
 131          extern bit DoorState;
 132          extern bit CAM_PTZ_RUN_flag;
 133          extern bit Init_DisplayInput;
 134          extern BYTE SelectBoxMode;
 135          extern BYTE LockKeyState;
 136          extern BYTE second;
 137          extern BYTE PowerDownWait;
 138          extern BYTE SelectBoxADC;
 139          extern BYTE Information[14];
 140          extern BYTE DVR_System;
 141          extern BYTE DayNightLevel;
 142          //#ifdef Format_SDCard
 143          extern BYTE FormatSDCard;
 144          //#endif
 145          extern BYTE DVR_SDCardAvailable;
 146          extern WORD CommandBuffer;
 147          extern void CheckPanelImage(void);
 148          //extern CODE BYTE Init_Osd_DisplayDVRstatus[];
 149          
 150          #ifdef HTRV  //Pinchi 20150825 add model #define
              extern BYTE GaugeVStart;
              #endif
 153          extern DWORD dPressSelectTime;  //Pinchi 20141014 add for AWT ML072Q
 154          extern bit IsPressSelectKey;  //Pinchi 20141014 add for AWT ML072Q
 155          
 156              BYTE  InputSelection;
 157          //    IDATA BYTE  InputSelectionInx = 0;
 158          ///     bit   PcDetectFlag = 1;
 159          //    bit   PowerMode = ON;
 160              IDATA WORD  IVF;
 161              IDATA DWORD IHF;
 162              BYTE  VInputStd;
 163          
 164              bit   Range4Coarse=0;
 165              //bit   AutoDetect=0;
 166              BYTE  VInputStdDetectMode;
 167              //BYTE  CheckBuf;
 168              BYTE  SEQTime;
 169              //bit  AutoDayNight=1;
 170              bit SDCardCoverDetect;
 171          
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 85  

 172          CODE struct struct_IdName struct_InputSelection[]={
 173            { UNKNOWN     , "" },       //don't remove or change this.
 174            { CH_TW2835,  "CVBS" },     //don't remove or change this.
 175            { CH_CAMD  ,   "CAM D"},
 176            { CH_AV    ,    "AV  "},
 177          
 178                                  // you can change the order of the followings
 179            #ifdef SUPPORT_SVIDEO
                { SVIDEO      , "S-Video" },
                #endif
 182          
 183            #ifdef SUPPORT_COMPONENT
                { COMPONENT ,     "Component" },
                #endif
 186          
 187            #ifdef SUPPORT_DTV
                { DTV ,       "DTV-SOG" },
                #endif
 190          
 191            #ifdef SUPPORT_PC
                { PC        , "VGA"},
                #endif
 194          
 195            #ifdef SUPPORT_DVI
                { DIGITALVGA    , "DVI" },
                #endif
 198          
 199            {0          , ""},        //don't remove or change this.
 200          };
 201          
 202          #ifndef QUAD
 203          CODE struct struct_IdName struct_InputSelection_S[]={
 204            { UNKNOWN     , "" },       //don't remove or change this.
 205            { SOURCE_A, "CAM A" },      //don't remove or change this.
 206            { SOURCE_B  ,   "CAM B"},
 207            { SOURCE_R    ,    "CAM R  "},  
 208            { SOURCE_AV,    "AV  "},  
 209          };
 210          #endif
 211          
 212          CODE struct struct_IdName struct_VInputStd[]={
 213            { UNKNOWN     , "" },       //don't remove or change this.
 214            { NTSC,         "NTSC"},      //don't remove or change this.
 215          
 216            #ifdef SUPPORT_PAL
 217            { PAL,          "PAL"},
 218            #endif
 219          
 220            #ifdef SUPPORT_SECAM
 221            { SECAM,        "SECAM"},
 222            #endif
 223          
 224            #ifdef SUPPORT_PALM
 225            { PALM,         "PALM"},
 226            #endif
 227          
 228            #ifdef SUPPORT_PALN
 229            { PALN,         "PALN"},
 230            #endif
 231          
 232            #ifdef SUPPORT_PAL60
 233            { PAL60,        "PAL60"},
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 86  

 234            #endif
 235          
 236            #ifdef SUPPORT_NTSC4
 237            { NTSC4,        "NTSC4.43"},
 238            #endif
 239          
 240            {0          , ""},        //don't remove or change this.
 241          };
 242          
 243          
 244          //===================== OSD ===================================================
 245              WORD OSDLastKeyInTime;    // in ms
 246          
 247          //===================== Button Key ============================================
 248          
 249          //================= Etc. ======================================================
 250          
 251          #ifdef AWT_ADD_TRIGGER_DELAY_FUN  //Pinchi 20150206 add for AWT request each trigger can setup trigger del
             -ay
 252          BYTE bLastTrigger=0;  //Left=1 , Right=2 , Reverse=3 , CAM C=4
 253          #endif
 254          
 255          #ifdef WIDE_SCREEN
                  BYTE WideScreenMode;
              #endif
 258              BYTE DebugLevel;
 259          
 260              bit  Flag4AutoPanelRegs = 0;
 261              bit  I2CAutoIncFlagOn = 0;
 262          #ifdef SUPPORT_COMPONENT
                    BYTE ComponentMode;
                  WORD OLD_hpn;
              #endif
 266          //extern  bit OnChangingValue;
 267          //extern  BYTE  TVInputSel;
 268          #ifdef SUPPORT_DEBUG
              extern  bit  Debug_On;
              #endif
 271          
 272          #ifdef NO_INITIALIZE
                  bit  NoInitAccess=0;
              #endif
 275          
 276          //#ifdef FIRST_RUN_FROM_AC  //Pinchi 20141029 add
 277          #ifdef SUPPORT_AC_ON_REDUCE_TIME  //Pinchi 20150903 add
 278              bit  IsFirstRunfromAC=1;
 279          #endif
 280          
 281          #ifdef AWT_NO_SIGNAL_MSG  //Pinchi 20150319 add for to display "NO VIDEO SIGNAL" by AWT request of 2015030
             -2
 282              bit  IsDrawNoVideoSignal=0;
 283              bit  DisplayInputHold=0;  //Pinchi 20150319 enable  //william-981029
 284          #endif
 285          
 286          
 287          #if 0 //william-981105
              //////////////////////////////////////////////////////////////////////////////
              
              //=============================================================================
              //    Prompt                                                       
              //=============================================================================
              
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 87  

              void CheckDipSwitch(void)
              {
                static bit BW_STATUS=0, EDGE_STATUS=0;
                    //----- Check DIP Switch ---------------
              
                    if( EDGE_STATUS != DIP_EDGE_ENHANCE ) {
                      if( DIP_EDGE_ENHANCE==0 ) {
                        EDGE_STATUS = 0;
                        WriteTW88(0xdd, ReadTW88(0xdd) | 0x80);
                        //Printf("\r\nEnable Color Enhancement");
                      }
                      else {
                        EDGE_STATUS = 1;
                        WriteTW88(0xdd, ReadTW88(0xdd) & 0x7f);
                        //Printf("\r\nDisable Color Enhancement");
                      }
                    }
                    
                    if( BW_STATUS != DIP_BW_STRETCH ) {
                      if( DIP_BW_STRETCH==0 ) {
                        BW_STATUS = 0;
                        #ifdef WQVGA
                        WriteTW88(0x86, 0x0c);
                        WriteTW88(0x87, 0xff);
                        #else
                        WriteTW88(0x86, 0x20);
                        WriteTW88(0x87, 0xe0);
                        #endif
                        //Printf("\r\nEnable Black/White Stretch");
                      }
                      else {
                        BW_STATUS = 1;
                        WriteTW88(0x86, 0x00);
                        WriteTW88(0x87, 0xff);
                        //Printf("\r\nDisable Black/White Stretch");
                      }
                    }
                    if( AutoDetect != DIP_AUTO_DETECT ) {
                      AutoDetect = DIP_AUTO_DETECT;
                      //if ( AutoDetect )
                        //Puts("\r\nAutoDetect Mode Enabled" );
                      //else
                        //Puts("\r\nAutoDetect Mode Disabled" );
                    }
              }
              #endif
 340          #ifdef SUPPORT_GAMMA
              
              #include "Gamma.c"
              
              void DownLoadGamma(void)
              {
                  // Red
                  WriteI2C(TW88I2CAddress, 0xf0, 0xe8|1 ); 
                  WriteI2C(TW88I2CAddress, 0xf1, 0x00); //  Start Address
                  WriteI2C(TW88I2CAddress, 0xf2, GammaRed[0]); //  
                  WriteI2Cn(TW88I2CAddress, 0xf2, &GammaRed[1], 255);
                  // Blue
                  WriteI2C(TW88I2CAddress, 0xf0, 0xe8|2 ); 
                  WriteI2C(TW88I2CAddress, 0xf1, 0x00); //  Start Address
                  WriteI2C(TW88I2CAddress, 0xf2, GammaGreen[0]); //  
                  WriteI2Cn(TW88I2CAddress, 0xf2, &GammaGreen[1], 255);
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 88  

                  // Red
                  WriteI2C(TW88I2CAddress, 0xf0, 0xe8|3 ); 
                  WriteI2C(TW88I2CAddress, 0xf1, 0x00); //  Start Address
                  WriteI2C(TW88I2CAddress, 0xf2, GammaBlue[0]); //  
                  WriteI2Cn(TW88I2CAddress, 0xf2, &GammaBlue[1], 255);
              
              }
              #endif
 364          
 365          void I2CDeviceInitialize( CODE_P BYTE *RegSet)
 366          {
 367   1        int cnt=0;
 368   1        BYTE addr, index, val;
 369   1      
 370   1        addr = *RegSet;
 371   1        #ifdef DEBUG_TW88
                Printf("\r\nI2C address : %02x ", (WORD)addr);
                #endif
 374   1        cnt = *(RegSet+1);
 375   1        RegSet+=2;
 376   1      
 377   1        while (( RegSet[0] != 0xFF ) || ( RegSet[1]!= 0xFF )) {     // 0xff, 0xff is end of data
 378   2          index = *RegSet;
 379   2          val = *(RegSet+1);
 380   2      
 381   2        #ifdef FIRST_RUN_FROM_AC  //Pinchi 20141029 add
                  if ((IsFirstRunfromAC == 1) && (TriggerFlag == 0x20))  //REVERSE_TRIG
                  {
                    if (index == 0x0a) 
                      val = 0x13;
                    else if (index == 0x61) 
                      val = 0xa6;
                    else if (index == 0x66) 
                      val = 0x60;
                  }
                #endif
 392   2      
 393   2          WriteI2C(addr, index, val);
 394   2      
 395   2          #ifdef DEBUG_TW88
                  dPrintf("\r\n    addr=%02x  index=%02x   val=%02x", (WORD)addr, (WORD)index, (WORD)val );
                  #endif
 398   2      
 399   2          RegSet+=2;
 400   2        }
 401   1        WriteTW88(0xff, 0x00);    // set page 0
 402   1      //  Printf("\r\n[MSG]I2CDeviceInitialize() => end & ReadDecoder(0x0a)=%bx , ReadDecoder(0x61)=%bx , ReadDec
             -oder(0x66)=%bx",ReadDecoder(0x0a), ReadDecoder(0x61), ReadDecoder(0x66));  //pinchi test
 403   1      }
 404          
 405          extern CODE struct RegisterInfo UserRange;
 406          extern CODE struct RegisterInfo VideoContrastRange;
 407          extern CODE struct RegisterInfo VideoBrightnessRange;
 408          extern CODE struct RegisterInfo VideoSaturationRange;
 409          extern CODE struct RegisterInfo VideoHueRange;
 410          extern CODE struct RegisterInfo VideoSharpnessRange;
 411          extern CODE struct RegisterInfo DigitalVideoSaturationRange;
 412          
 413          #ifdef ADD_ANALOGPANEL
              BYTE IsAnalogOn(void)
              {
                if(DIP_PANEL_SWITCH==0) return 1;
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 89  

                else return 0;
              }
              #endif
 420          
 421          void InitVideoData(BYTE src)
 422          {
 423   1        #ifdef DEBUG_DECODER
                Printf("\r\n++(InitVideoData)src:%02x", (WORD)src);
                #endif
 426   1      
 427   1        #ifdef ADD_ANALOGPANEL
                if(IsAnalogOn())
                  I2CDeviceInitialize(NTSC_Regs_Analog);
                else
                #endif
 432   1        I2CDeviceInitialize(NTSC_Regs);
 433   1        WriteTW88(0xff, 0);
 434   1      
 435   1        InitVideoDataSrc=src;
 436   1      
 437   1                
 438   1        switch( src ) {
 439   2      
 440   2        #ifdef SUPPORT_PAL
 441   2        case PAL:     
 442   2          #ifdef ADD_ANALOGPANEL
                    if(IsAnalogOn())
                      I2CDeviceInitialize(PAL_Regs_Analog);
                    else
                  #endif
 447   2          I2CDeviceInitialize(PAL_Regs);  
 448   2          break;
 449   2        #endif
 450   2        #ifdef SUPPORT_SECAM
 451   2        case SECAM:   
 452   2          #ifdef ADD_ANALOGPANEL
                    if(IsAnalogOn())
                      I2CDeviceInitialize(PAL_Regs_Analog);
                    else
                  #endif
 457   2          I2CDeviceInitialize(PAL_Regs);  
 458   2          break;
 459   2        #endif
 460   2        #ifdef SUPPORT_PALN
 461   2        case PALN:    
 462   2          #ifdef ADD_ANALOGPANEL
                    if(IsAnalogOn())
                      I2CDeviceInitialize(PAL_Regs_Analog);
                    else
                  #endif
 467   2          I2CDeviceInitialize(PAL_Regs);  
 468   2          break;
 469   2        #endif
 470   2      
 471   2        #ifdef SUPPORT_NTSC4
 472   2        case NTSC4:
 473   2        #endif
 474   2        #ifdef SUPPORT_PALM
 475   2        case PALM:
 476   2        #endif
 477   2        #ifdef SUPPORT_PAL60
 478   2        case PAL60:
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 90  

 479   2        #endif
 480   2        case NTSC:
 481   2      
 482   2        case UNKNOWN:
 483   2        case NOINPUT: src = NTSC;           break;
 484   2        }
 485   1      
 486   1        if( InputSelection == TV ) 
 487   1        {
 488   2          if( VInputStdDetectMode==AUTO ) SetAutoDetectStd();
 489   2          else              ClearAutoDetectStd(src-1);
 490   2        }
 491   1        else // Always Auto Detect.
 492   1          SetAutoDetectStd();
 493   1          
 494   1        //----- Set Panel Characteristics
 495   1      /// SetPanelSingleDouble(PIXEL_SINGLE);
 496   1      
 497   1      
 498   1        WriteDecoder(V_CONTROL2, 0x15);     // Set CC line number of Even Field
 499   1      //  WriteDecoder(CC_ODDLINE, 0x15);     // Set CC line number of Odd Field
 500   1        WriteTW88(0x5c, 0x06);      // change error tolerance and enable V/HSYNC change/loss detection
 501   1      
 502   1      //  DefaultPanelAttributeForVideo();
 503   1      
 504   1        SetVideoMode( GetVideoModeEE());    // 02212008 change for ??????? by ybae
 505   1        #ifdef DEBUG
                Printf("\r\n SetVideoMode: %d", (WORD)GetVideoModeEE() );
                #endif
 508   1      
 509   1        #ifdef WIDE_SCREEN
                Set4WideScreen(GetWideModeEE());
                #endif
 512   1      
 513   1        #ifdef AWT_ML072S
 514   1      
 515   1          if(src==NTSC)
 516   1          {
 517   2          WriteTW88(0xff, 0x00);  
 518   2          WriteTW88(0x62, 0x78);
 519   2          }
 520   1          else if(src==PAL)
 521   1            {
 522   2          WriteTW88(0xff, 0x00);  
 523   2          //WriteTW88(0x62, 0x96);
 524   2          WriteTW88(0x62, 0x94);
 525   2            }
 526   1      
 527   1      /*
 528   1          if(src==NTSC)
 529   1          {
 530   1          WriteTW88(0xff, 0x00);  
 531   1          WriteTW88(0x61, 0x87);
 532   1          }
 533   1          else if(src==PAL)
 534   1            {
 535   1          WriteTW88(0xff, 0x00);  
 536   1          WriteTW88(0xb4, 0x2d);
 537   1            }
 538   1          */
 539   1      
 540   1      
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 91  

 541   1          #ifdef Hs_debug
 542   1          Printf("\r\n **GetVideoMode=%02x", (WORD)src );
 543   1          #endif
 544   1      
 545   1        #endif
 546   1      
 547   1        
 548   1        Init_DisplayInput=0;    //william 20120328
 549   1      }
 550          
 551          /*********************************/
 552          BYTE IsNoInput(void)
 553          {
 554   1        if( ReadDecoder(CSTATUS) & 0x80 ) return 1;
 555   1        return 0;
 556   1      }
 557          
 558          #ifdef ID_CHECK_BY_FW
              BYTE Is50Hz(void)
              {
                if( ReadDecoder(CSTATUS) & 0x01 ) return 1;
                return 0;
              }
              
              BYTE Slock(void)
              {
                if( ReadDecoder(CSTATUS) & 0x20 ) return 1;
                return 0;
              }
              #endif  // ID_CHECK_BY_FW
 571          
 572          #ifdef SUPPORT_COMPONENT
              void CheckDecoderComponent(void)
              {
                CODE_P BYTE *reg=0;
                BYTE mode;
                WORD  width, height;
                DWORD scale;
              
                extern CODE BYTE COMPONENT_STR[][15] ;
              
                if( InputSelection != COMPONENT ) return;
              
                mode = ((ReadDecoder(CVFMT) & 0x70) >> 4);
                if( mode == ComponentMode ) return;
                Printf("\n\rCheckDecoderComponent==> Changed component Mode: %2x-> %2x (%s)", (WORD)ComponentMode, (WORD)
             -mode,COMPONENT_STR[mode]);
              
                ComponentMode = mode;
                switch (mode)
                {
                case YPBPR_576i:  
                  #ifdef ADD_ANALOGPANEL
                    if(IsAnalogOn())
                    reg = COMP_YPbPr_576I_Reg;  
                    else
                  #endif
                    reg = COMP_YPbPr_576I_Reg;  
                    width = 700;
                    height = 280;
                  break;
                #if (defined WQVGA) || (defined QVGA)
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 92  

              
                #else
                case YPBPR_480p:  reg = COMP_YPbPr_480P_Reg;    width = 630;  height = 480; break;
                case YPBPR_576p:  reg = COMP_YPbPr_576P_Reg;    width = 630;  height = 576; break;
                case YPBPR_720p:  reg = COMP_YPbPr_720P_Reg;    width = 413;  height = 720; break;
                case YPBPR_1080i: reg = COMP_YPbPr_1080I_Reg;   width = 624;  height = 540; break;
                #endif
                default:      reg = COMP_YPbPr_480I_Reg;    width = 700;  height = 235; break;
              
                }
              
                //InitVideoData(NTSC);
              
                I2CDeviceInitialize(reg);
              
                scale = width;
                scale *= 0x10000L;
                scale /= PWIDTH;
                XScale2(scale);
                #ifdef DEBUG_COMPONENT
                dPrintf("\r\nH scale: %xh - %xh", (WORD)(scale>>8), (WORD)(scale & 0xff));
                #endif
              
                scale = height;
                scale *= 0x10000L;
                scale /= PHEIGHT;
                YScale2(scale);
                #ifdef DEBUG_COMPONENT
                dPrintf("\r\nV scale: %xh - %xh", (WORD)(scale>>8), (WORD)(scale & 0xff));
                #endif
              
                delay(50);
                
                //william-981029>>>>>>>
                //if( IsNoInput() ) DisplayInputHold = 1;   // Hold  Input Information in no signal.
                //else 
                //DisplayInputHold = 0;
                //william-981029>>>>>
              
                ClearOSDInfo();
              
                DisplayInput();
              }
              #endif
 646          
 647          void CheckDecoderInput(void)
 648          {
 649   1      #ifdef ID_CHECK_BY_FW
              
                BYTE std, changed=0;
              
                static DATA BYTE no_cnt=0, secam_cnt=0, check_cnt=0;
              
                //if( InputSelection == TV ) return;
                if( InputSelection == COMPONENT ) return;
                if( ( InputSelection == TV ) && (VInputStdDetectMode != AUTO) ) return;
              
                if( IsNoInput() ) {
              //    if( VInputStd==NOINPUT ) return;
                  no_cnt++;
                  if( no_cnt>=10 ) {
                    no_cnt = 0;
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 93  

                    
                    SetVInputStd( NOINPUT );
                    InitVideoData(NTSC);  
              
                    #ifdef DEBUG_DECODER
                    Printf("\r\nDecoder No Input");
                    #endif
              
                  }
                  return;
                }
                else {
                  no_cnt = 0;
                }
              
                switch( VInputStd ) {
              
                //--------------------------------------------------------------------------------------
                case NOINPUT:
              
                  WriteDecoder(SDT, 0x0f);    // 0x1c
                  //WriteTW88(0xb6, 0x87);
                  //delay(50);
              
                  switch( ReadDecoder(SDT) & 0x70 ) {
                  case 0x00:  std = NTSC; break;
                  case 0x10:  std = PAL;  break;
                  case 0x20:  std = SECAM;  break;
                  }
                  changed = 1;
                  check_cnt = 0;
                  secam_cnt = 0;
                  break;
                  
                //--------------------------------------------------------------------------------------
                case NTSC:
                  if( Is50Hz() ) {
                    if( !Slock() ) secam_cnt++;
                    if( ++check_cnt>=10 ) {
                      if( secam_cnt>=7 ) {
                        std = SECAM;
                        changed = 1;
                      }
                      else {
                        std = PAL;
                        changed = 1;
                      }
                      check_cnt = 0;
                      secam_cnt = 0;
                    }
                  }
                  break;
              
                //--------------------------------------------------------------------------------------
                case PAL:
              
                  if( !Is50Hz() ) {
                    std = NTSC;
                    changed = 1;
                    check_cnt = 0;
                    secam_cnt = 0;
                  }
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 94  

              
                  if( ReadTW88(0x30) & 0x10 ) secam_cnt++;
                  if( ++check_cnt>=10*10 ) {
                    if( secam_cnt>=7 ) {
                      std = SECAM;
                      changed = 1;
                    }
                    check_cnt = 0;
                    secam_cnt = 0;
                  }
                  break;
              
                //--------------------------------------------------------------------------------------
                case SECAM:
              
                  if( !Is50Hz() ) {
                    std = NTSC;
                    changed = 1;
                    check_cnt = 0;
                    secam_cnt = 0;
                  }
              
                  if( !(ReadTW88(0x30) & 0x80) ) secam_cnt++;
                  if( ++check_cnt>=10*10 ) {
              
                    #ifdef DEBUG_DECODER
                    Printf("%4d", secam_cnt);
                    #endif
              
                    if( secam_cnt<=7*10 ) {
                      std = PAL;
                      changed = 1;
                    }
                    check_cnt = 0;
                    secam_cnt = 0;
                  }
                  break;
              
                default:
                  break;
                }
              
                if( changed ) {
                  SetVInputStd( std );
                  InitVideoData(std);
                  //DisplayInput();
              
                  switch( std ) {
                  case NTSC:  WriteDecoder(SDT, 0x08);  break;
                  case PAL: WriteDecoder(SDT, 0x09);  break;
                  case SECAM: WriteDecoder(SDT, 0x0a);  break;
                  }
                  
                  #ifdef DEBUG_DECODER
                  Printf("\r\n-------> Source changed %d", (WORD)VInputStd);
                  #endif
                  delay(99);
                }
                  
              #else // not ID_CHECK_BY_FW
 786   1      
 787   1        BYTE std1, std, cnt=0, trycnt=0, ChangedNoinput;
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 95  

 788   1      
 789   1          #ifdef DEBUG_DECODER
                  Printf("\r\n====>CheckDecoderInput<====");
                  #endif
 792   1        // LJY101002
 793   1        // Algorithm I 
 794   1        //if( InputSelection == TV ) return;
 795   1        //if( InputSelection == COMPONENT ) return;
 796   1        if( ( InputSelection == TV ) && (VInputStdDetectMode != AUTO) ) return;
 797   1      
 798   1        //if( VInputStdDetectMode==AUTO ) {
 799   1          std1 = NOINPUT;
 800   1          while(1) {            // keep checking until it's stable.(check cnt)
 801   2            std = DetectDecoderInput();
 802   2            
 803   2            #ifdef DEBUG_DECODER
                    Printf("\r\n%bx :DetectDecoderInput: std=0x%bx, DisplayedOSD=0x%bx , VInputStd=%bx",trycnt,std,GetDispl
             -ayedOSD(),VInputStd);
                    #endif
 806   2            trycnt++;
 807   2            if( trycnt>= 10/*50*//*200*/ )      // so many try, but unstable
 808   2              break;
 809   2      
 810   2            if( std!=UNKNOWN && std!=VInputStd ) 
 811   2            {
 812   3            //  Printf("\r\n[MSG]CheckDecoderInput() => run &  cnt=%bx",cnt);  //pinchi test
 813   3              //changed!!
 814   3              if( std == std1 )   // same as previous one.
 815   3                cnt++;
 816   3              else
 817   3              {         // ooh.. different from previous one.
 818   4                cnt = 0;
 819   4                std1 = std;
 820   4              }
 821   3      
 822   3              if( cnt >= 2) { //100 ) {
 823   4            #ifdef REFERENCE
                    #else
 825   4                //ClearOSDInfo();
 826   4            #endif 
 827   4                //LCDPowerOFF();
 828   4                if(  std == NOINPUT  )    //some input->NOINPUT
 829   4                { 
 830   5                //  Printf("\r\n[MSG]CheckDecoderInput() => some input->NOINPUT & DisplayedOSD()=%bx, std=%bx",GetDisp
             -layedOSD(), std);  //pinchi test
 831   5                  SetVInputStd( std );    //WILLIAM-20120502
 832   5                  ChangedNoinput = 1;   // Diaplay Input Information for no signal.
 833   5                }
 834   4                else if( VInputStd==NOINPUT ) //NOINPUT->some input
 835   4                {
 836   5                //  Printf("\r\n[MSG]CheckDecoderInput() => NOINPUT->some input & DisplayedOSD()=%bx , std=%bx",GetDis
             -playedOSD(),std);  //pinchi test
 837   5                #ifdef AWT_NO_SIGNAL_MSG  //Pinchi 20150319 add for to display "NO VIDEO SIGNAL" by AWT request of 20
             -150302
 838   5                //  AWT_Display_NoVideoSignal(OFF);
 839   5                  if ((SelectModeType == AVMode) && (IsDrawNoVideoSignal == 1))
 840   5                      ClearGAUGEINFO();
 841   5                #endif
 842   5      
 843   5                  SetVInputStd( std );    //WILLIAM-20120502
 844   5                  InitVideoData(std);   //WILLIAM-20120502
 845   5                  ChangedNoinput = 0;   // Diaplay Input Information for no signal.
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 96  

 846   5                }
 847   4                else 
 848   4                {               //some input1->some input2
 849   5      //            LCDPowerOFF();
 850   5                  //PanelMute(1);
 851   5                 //   Printf("\r\n[MSG]CheckDecoderInput() => some input1->some input2 & DisplayedOSD()=%bx, std=%bx"
             -,GetDisplayedOSD(), std);  //pinchi test
 852   5                #ifdef AWT_NO_SIGNAL_MSG  //Pinchi 20150319 add for to display "NO VIDEO SIGNAL" by AWT request of 20
             -150302
 853   5                //  AWT_Display_NoVideoSignal(OFF);
 854   5                  if ((SelectModeType == AVMode) && (IsDrawNoVideoSignal == 1))
 855   5                      ClearGAUGEINFO();
 856   5                #endif
 857   5      
 858   5                  SetVInputStd( std );
 859   5                  InitVideoData(std); 
 860   5                  delay(50);
 861   5      //            LCDPowerON(0);
 862   5                  ChangedNoinput = 0;   // Diaplay Input Information for no signal.
 863   5                }         
 864   4                //LCDPowerON(0);
 865   4              #ifdef REFERENCE
                      #else
 867   4              //  delay(0xff);  //Pinchi 20141029 disable
 868   4              #endif 
 869   4                //DisplayInput();   //william-981029
 870   4              #ifdef AWT_NO_SIGNAL_MSG  //Pinchi 20150319 add to enable
 871   4                DisplayInputHold = ChangedNoinput;  //william-981029
 872   4              #endif
 873   4                break;
 874   4              }
 875   3            }
 876   2            #if 0   //william-981029
                    else
                    {
                      if(  std == NOINPUT  )      // NOINPUT->NOINPUT
                        DisplayInputHold = 1;   // Hold input information in no signal.
                      else
                        DisplayInputHold = 0;   // clear 
                      break;
                    }
                    #endif
 886   2          }
 887   1          //Printf("\r\nDisplayInputHold=%02x",(WORD)DisplayInputHold);
 888   1        //}
 889   1        
 890   1      #endif  // ID_CHECK_BY_FW
 891   1      
 892   1      }
 893          
 894          BYTE ReadVInputSTD(void)
 895          {
 896   1        BYTE std;
 897   1        
 898   1        if( IsNoInput() ) return 1; // Noinput!!
 899   1        
 900   1        std = ReadDecoder(SDT) & 0xf0;
 901   1        if( std & 0x80 ) return 1; // Detection in progress..
 902   1        else 
 903   1          return ((( std & 0x70 ) >> 4 ) + 1 );
 904   1      }
 905          
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 97  

 906          BYTE GetVInputStdInx(void)
 907          {
 908   1        BYTE i, std;
 909   1      
 910   1        std = ReadVInputSTD();
 911   1      
 912   1        switch( std ) {
 913   2      
 914   2        case NTSC4:
 915   2        case PALM:
 916   2        case PAL60:
 917   2        case NTSC:    IVF = 60;   IHF = 15723;  break;  // 15734
 918   2      
 919   2        case SECAM:
 920   2        case PALN:
 921   2        case PAL:   IVF = 50;   IHF = 15723;  break;  // 15625
 922   2        default:    IVF = 0;    IHF = 0;    break;
 923   2        }
 924   1      
 925   1        for(i=0; ; i++) {
 926   2          if( struct_VInputStd[i].Id ==std )
 927   2            return i;
 928   2          if( struct_VInputStd[i].Id ==0 )
 929   2            break;
 930   2        }
 931   1        return 0;
 932   1      }
 933          
 934          #ifdef WIDE_SCREEN
              BYTE GetVInputStd(void)
              {
                return VInputStd;
              }
              #endif
 940          
 941          void SetVInputStd(BYTE newd)
 942          {
 943   1        VInputStd = newd;
 944   1      
 945   1        #ifdef DEBUG
                Printf("\r\n(SetVInputStd=%bx) VInputStd:%d(%s)",newd, struct_VInputStd[GetVInputStdInx()].Name);
                #endif
 948   1      
 949   1        #if 0
                if(DVR_System!=newd &&  GetInputSelection()==CH_TW2835)
                  {
                  DVR_System=newd;    //tw2835 system
                  if(GetDVRStatusflag==1)
                    Hs_DvrTxCmdPaser(SetSystem);
                  }
                #endif
 957   1        switch( VInputStd ) {
 958   2      
 959   2        #ifdef SUPPORT_NTSC4
 960   2        case NTSC4:
 961   2        #endif
 962   2        #ifdef SUPPORT_PALM
 963   2        case PALM:
 964   2        #endif
 965   2        #ifdef SUPPORT_PAL60
 966   2        case PAL60:
 967   2        #endif
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 98  

 968   2        case NTSC:    IVF = 60;   IHF = 15723;  break;  // 15734
 969   2      
 970   2        #ifdef SUPPORT_SECAM
 971   2        case SECAM:
 972   2        #endif
 973   2        #ifdef SUPPORT_PALN
 974   2        case PALN:
 975   2        #endif
 976   2        #ifdef SUPPORT_PAL
 977   2        case PAL:   IVF = 50;   IHF = 15723;  break;  // 15625
 978   2        #endif
 979   2      
 980   2        default:    IVF = 0;    IHF = 0;    break;
 981   2        }
 982   1      }
 983          
 984          BYTE GetInputSelection(void)
 985          {
 986   1        return InputSelection;
 987   1      }
 988          
 989          BYTE GetNextInputSelection(void)
 990          {
 991   1        BYTE i;
 992   1      
 993   1      #ifdef QUAD
                for (i=1; ;i++)
                  if( struct_InputSelection[i].Id==InputSelection )  break;
                i++;
                if( struct_InputSelection[i].Id == 0 ) i=1;
              
                return struct_InputSelection[i].Id;
              #else
1001   1        for (i=1; ;i++)
1002   1          if( struct_InputSelection_S[i].Id==InputSelection )  break;
1003   1        i++;
1004   1        if( struct_InputSelection_S[i].Id == 0 ) i=1;
1005   1      
1006   1        return struct_InputSelection_S[i].Id;
1007   1      #endif
1008   1      }
1009          
1010          void PowerDown_XTAL(bit flag)
1011          {
1012   1        if( flag ) P3_7 = 1;
1013   1        else      P3_7 = 0;
1014   1      }
1015          
1016          #if 0
              void Audio_Select(BYTE flag)
              {
                switch(flag)
                {
                  case 0:
                    TW2835Cmd("\n\raudioselect 0\n\r"); 
                    break;
                  case 1:
                    TW2835Cmd("\n\raudioselect 1\n\r"); 
                    break;  
                  case 2:
                    TW2835Cmd("\n\raudioselect 2\n\r"); 
                    break;
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 99  

                  case 3:
                    TW2835Cmd("\n\raudioselect 3\n\r"); 
                    break;
                }
              }
              #endif
1036          
1037          void ChangeInput(BYTE newsel)
1038          {
1039   1      //  extern  CODE struct _PCMDATA PCMDATA[];
1040   1        #ifdef DEBUG
                BYTE i;
                #endif
1043   1        
1044   1        #if (defined SUPPORT_PC) || (defined SUPPORT_DTV)
                BYTE ret;
                #endif
1047   1        
1048   1      #ifdef QUAD
                if( InputSelection==newsel ) return;
              #else
1051   1        #ifndef AWT_ML072S
                if( InputSelection==newsel ) 
                {
                  DisplayInput();   //william-20100420
                  return;
                }  
                #endif
1058   1      #endif
1059   1        
1060   1      
1061   1        //DisplayInputHold = 0; // Refresh Input info.  //william-981029
1062   1      //  ClearOSDInfo();  //Pinchi 20140903 disable for compiler warning
1063   1      #if 0//ryan@20171016
              if(AV_MODE_DELAY==1)
                clrBacklight();
              else
                LCDPowerOFF(); 
              #else
1069   1        clrBacklight();
1070   1      
1071   1      #endif
1072   1        //LCDPowerON(0); 
1073   1      
1074   1        //PanelMute(1);
1075   1      
1076   1          //mute
1077   1          WriteI2C( TW88I2CAddress,0xff,0x01);
1078   1          WriteI2C( TW88I2CAddress,0xb4,00);
1079   1          WriteI2C( TW88I2CAddress,0xff,0x00); 
1080   1          Wait_ms(20);
1081   1                      
1082   1        InputSelection = newsel;
1083   1      
1084   1          #ifdef DEBUG
                  for (i=1; ;i++)
                    if( struct_InputSelection[i].Id==InputSelection )  break;
                  Printf("\r\n ->->->->->->->->->->-> Changed Input: %s(%02x)", struct_InputSelection[i].Name, (WORD)Input
             -Selection);
                  #endif
1089   1      
1090   1          InitVideoData(VInputStd);
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 100 

1091   1      
1092   1          switch(InputSelection)
1093   1          {
1094   2            #ifdef SUPPORT_PC
                    case PC:
                          AVGAInput();        // load data and input mux selection to PC              
                          AutoPHPCalDisable();
                          tic_pc = 0;
                          ret = DetectAndSetForVGAInput(1);
                          //Audio_Select(2);
                          VGAAudio=1;
                            ChangeVol(0);     //william-v1.1-991208
                          //Audio_Select1=1;                           
                                    //Audio_Select2=0;  
                          //ret = DetectAndSetForVGAInput(0);
                          break;
                    #endif
1108   2         
1109   2            case CH_TW2835:
1110   2                  COMPOSITE1Input();
1111   2                  //ExtAudio();
1112   2                    //Audio_Select(0);
1113   2                    VGAAudio=0;
1114   2                      Audio_Select1=0;
1115   2                              Audio_Select2=0;
1116   2                  Wait_ms(20);
1117   2                  ChangeVol(0);     //william-v1.1-991208
1118   2            
1119   2                      Printf("\r\nCH_TW2835(%02x),ReadDecoder(0x66)=%bx",(WORD)InputSelection,ReadDecoder(0x66));
1120   2                    break;
1121   2                  #ifdef AWT_ML072S
1122   2              case CH_CAMD:
1123   2                COMPOSITE4Input();
1124   2              //#endif
1125   2                VGAAudio=0;
1126   2                Audio_Select1=1;                           
1127   2                          Audio_Select2=1; 
1128   2                Wait_ms(20);
1129   2                ChangeVol(0);     //william-v1.1-991208
1130   2                Printf("\r\n **CH_CAMR(%02x)",(WORD)InputSelection);
1131   2                break;
1132   2          #endif
1133   2          
1134   2                  #ifdef USE_CAMD  //Pinchi 20150827 add
                    case CH_CAMD:
                      #ifdef QUAD
                        COMPOSITE3Input();
                      #else
                        COMPOSITE2Input();
                      #endif                
                        //Audio_Select(1);
                        VGAAudio=0;
                      #ifdef AWT_ML072S   //william @20130902 v1.0.1.2
                        Audio_Select1=1;                           
                                  Audio_Select2=0; 
              
                      #else
                        Audio_Select1=0;                           
                                  Audio_Select2=1;  
                      #endif  
                        Wait_ms(20);
                        ChangeVol(0);     //william-v1.1-991208
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 101 

              
                    
                        Printf("\r\n CH_CAMD(%02x)",(WORD)InputSelection);
                        break;
                          #endif
1158   2      
1159   2            case CH_AV:
1160   2              #ifdef AWT_NEW_SLIM_MODEL  //Pinchi 20150414 add for AWT ML077
                        COMPOSITE4Input();
              
                        VGAAudio=0;
                        Audio_Select1 = 1;
                        Audio_Select2 = 1;
                        Wait_ms(20);
                        ChangeVol(0);
              
                      #else
1170   2                #ifdef QUAD
                        COMPOSITE2Input();
                        #else
1173   2              COMPOSITE3Input();
1174   2                #endif
1175   2      
1176   2                 //Audio_Select(2); 
1177   2                VGAAudio=0;
1178   2                
1179   2                //#ifdef AWT_ML072S   //william @20130902 v1.0.1.2
1180   2                #if (defined AWT_ML072S) || (defined HTRV)  //Pinchi 20150910 add HTRV model for correct audio selec
             -t
1181   2                Audio_Select1=0;
1182   2                Audio_Select2=1;
1183   2                #else
              
                          #ifdef TW8816
                          Audio_Select1=0;
                        Audio_Select2=1;
                        #else
                        Audio_Select1=1;
                        Audio_Select2=0;
                        #endif    
                        #endif  
1193   2                  Wait_ms(20);
1194   2                
1195   2                ChangeVol(0);     //william-v1.1-991208
1196   2                        
1197   2            #endif
1198   2                
1199   2                Printf("\r\n CH_AV(%02x)", (WORD)InputSelection); 
1200   2                break;
1201   2      
1202   2            #ifdef SUPPORT_DTV  //Pinchi 20150414 add
                    case DTV:
                        COMPOSITE4Input();
              
                        //Audio_Select(2);
                        VGAAudio=0;
                        ChangeVol(0);     //william-v1.1-991208
                        Audio_Select1=1;
                              Audio_Select2=1;
                        Printf("\r\n CH_AV(%02x)", (WORD)InputSelection);
                        break;
                    #endif
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 102 

1214   2      
1215   2            #ifdef HS
1216   2            case CH_CAMB:
1217   2                COMPOSITE2Input();
1218   2      
1219   2                //Audio_Select(2);
1220   2                VGAAudio=0;
1221   2                ChangeVol(0);     //william-v1.1-991208
1222   2                Wait_ms(20);
1223   2                Audio_Select1=1;
1224   2                          Audio_Select2=0;
1225   2                Printf("\r\n CH_CAMB(%02x)", (WORD)InputSelection);
1226   2                break;
1227   2            #endif
1228   2            
1229   2          }
1230   1        CheckPanelImage();    //william-981111    changesource load panelimage
1231   1        SaveInputSelectionEE(InputSelection);   // HHY 1.31
1232   1      //#ifdef WIDE_SCREEN
1233   1      //  WideScreenMode = WIDESCREEN_WIDE;
1234   1      //#endif
1235   1        //InitOSDMenu();  // Standby OSD Menu
1236   1      
1237   1        #ifdef DEBUG_PAUSE
                Pause("Detect and Set {CR}");
                #endif
1240   1      
1241   1        #if (defined SUPPORT_PC) || (defined SUPPORT_DTV)
                if( InputSelection==PC || InputSelection==DTV ) {
                  if( ret==TRUE ) {
                    ret = ReadDecoder(ACNTL);
                    ret |= 0x80;  // Software Reset
                    WriteDecoder(ACNTL, ret);
                    delay(30);
                    WriteTW88( 0xff, 1);
                    WriteTW88( 0xCD, 1 ); // init LLPLL
                    WriteTW88( 0xff, 0 );
                    //DisplayInput();
                  }
                  else {
                      //CheckDipSwitch();//andy AWT 981015    
                    LCDPowerON(0);
                    delay(100);
                    WriteTW88( 0xd0, 0xff); // clear status
                    WriteTW88( 0xd1, 0xff); // clear status
                    return;
                  }
                }
                else 
                #endif
1264   1        {
1265   2          //DisplayInput();
1266   2      
1267   2          #ifdef SUPPORT_COMPONENT
                  if( InputSelection == COMPONENT ){
                    delay(30);
                    ComponentMode = 0xff;
                    CheckDecoderComponent();
                  }
                  else 
                  #endif
1275   2          {
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 103 

1276   3            delay(30);
1277   3            CheckDecoderInput();
1278   3          }
1279   2      //william-981110    
1280   2      //Printf("\r\nSetPanelBrightnessReg");
1281   2      //  SetPanelBrightnessReg(RED,  0x80);
1282   2      //  SetPanelBrightnessReg(GREEN,0x80);
1283   2      //  SetPanelBrightnessReg(BLUE, 0x80);
1284   2      //  SetPanelContrastReg(0,0x80);
1285   2      //  SetPanelContrastReg(1,0x80);
1286   2      //  SetPanelContrastReg(2,0x80);
1287   2      //william-981110  
1288   2        }
1289   1        //----- Check DIP Switch ---------------
1290   1        //CheckDipSwitch();                      //andy AWT 981015    
1291   1        //Pause("\r\nBeforn LCD ON");
1292   1        //delay(250);
1293   1      
1294   1      #ifndef QUAD
1295   1       // if(NowModeState==JumpMode)
1296   1          CheckMirror();
1297   1       // else  
1298   1      //  CheckMirror();
1299   1      #endif
1300   1      
1301   1          DisplayInput();
1302   1      
1303   1        
1304   1      if(AV_MODE_DELAY==1)
1305   1      {
1306   2        SetBacklight();
1307   2        #ifdef Hs_debug
1308   2        Printf("\r\nAV_MODE_DELAY==1");
1309   2        #endif
1310   2      }
1311   1      else
1312   1        LCDPowerON(0);
1313   1      
1314   1        delay(100);
1315   1      
1316   1        WriteTW88(0xd0, 0xff);  // clear status
1317   1        WriteTW88(0xd1, 0xff);  // clear status
1318   1      }
1319          
1320          void PowerOff(void)
1321          {
1322   1      //  Printf("\r\n++(PowerOff)__");
1323   1      //  PowerMode = OFF;
1324   1        //AudioOff();
1325   1        AudioMute(0);
1326   1        //ClearOSDInfo();   //william v0.2 20120223
1327   1        #ifdef TW8816
1328   1        clrBacklight();
1329   1      //mask by ryan@20180102 boot panel scree isuue  P3_5=0;
1330   1        #else
                LCDPowerOFF();
                #endif
1333   1        PowerLED(OFF);
1334   1      }
1335          
1336          void SetOSDLastKeyInTime(void)
1337          {
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 104 

1338   1        OSDLastKeyInTime = GetTime_ms();
1339   1      }
1340          
1341          WORD GetOSDLastKeyInTime(void)
1342          {
1343   1        return OSDLastKeyInTime ;
1344   1      }
1345          
1346          //=============================================================================
1347          //
1348          //=============================================================================
1349          #ifdef SUPPORT_PATTERN
              CODE BYTE PATTERN[7][] = {
                {TW88I2CAddress,7, 0x61,0x5f, 0x64,0xff, 0x65,0x00, 0x66,0x00, 0x67,0xff, 0x68,0x00, 0x69,0x00, 0xff,0xff
             -},  // Red
                {TW88I2CAddress,7, 0x61,0x5f, 0x64,0x00, 0x65,0xff, 0x66,0x00, 0x67,0x00, 0x68,0xff, 0x69,0x00, 0xff,0xff
             -},  // Green
                {TW88I2CAddress,7, 0x61,0x5f, 0x64,0x00, 0x65,0x00, 0x66,0xff, 0x67,0x00, 0x68,0x00, 0x69,0xff, 0xff,0xff
             -},  // Blue
                {TW88I2CAddress,7, 0x61,0x5f, 0x64,0xff, 0x65,0xff, 0x66,0xff, 0x67,0xff, 0x68,0xff, 0x69,0xff, 0xff,0xff
             -},  // White
                {TW88I2CAddress,7, 0x61,0x5f, 0x64,0x00, 0x65,0x00, 0x66,0x00, 0x67,0xff, 0x68,0xff, 0x69,0xff, 0xff,0xff
             -},  // Gray
                {TW88I2CAddress,7, 0x61,0x5f, 0x64,0x00, 0x65,0x00, 0x66,0x00, 0x67,0x00, 0x68,0x00, 0x69,0x00, 0xff,0xff
             -},  // Black
                {TW88I2CAddress,7, 0x61,0x00, 0x64,0xc0, 0x65,0xc0, 0x66,0xc0, 0x67,0x88, 0x68,0x88, 0x69,0x88, 0xff,0xff
             -}  // Gray scale
              };
              #endif // SUPPORT_PATTERN
1360          
1361          void AdjustAutoDayNight(BYTE val)
1362          {
1363   1        BYTE page;
1364   1        BYTE PWMLevelTemp;
1365   1        val=0xff-val;
1366   1      
1367   1        #if 1//ryan@20170928
1368   1        if(val>=0&&val<100)
1369   1          PWMLevelTemp=0;
1370   1        else if(val>=100&&val<140)
1371   1          PWMLevelTemp=20;//20;
1372   1        else if(val>=140&&val<180)
1373   1          PWMLevelTemp=40;//50;
1374   1        else if(val>=180&&val<220)
1375   1          PWMLevelTemp=60;//65;
1376   1        else if(val>=220&&val<=255)//andy 20110414
1377   1        {
1378   2          //#ifdef AWT
1379   2          PWMLevelTemp=75;//80;
1380   2          //#else
1381   2          //PWMLevelTemp=115;
1382   2          //#endif
1383   2        }
1384   1      
1385   1        #else
                if(val>=0&&val<100)
                  PWMLevelTemp=0;
                else if(val>=100&&val<140)
                  PWMLevelTemp=30;//20;
                else if(val>=140&&val<180)
                  PWMLevelTemp=60;//50;
                else if(val>=180&&val<220)
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 105 

                  PWMLevelTemp=80;//65;
                else if(val>=220&&val<=255)//andy 20110414
                {
                  //#ifdef AWT
                  PWMLevelTemp=110;//80;
                  //#else
                  //PWMLevelTemp=115;
                  //#endif
                }
                #endif
1403   1        //else
1404   1        //  PWMLevelTemp=0;
1405   1      
1406   1      #ifdef SUPPORT_ML072Q_AUTO_DAY_NIGHT  //Pinchi 20150825 add  AWT_ML072Q  //Pinchi 20140918 add for AWT ML0
             -72Q
1407   1        if (DayNightLevel == 0)  //1=OFF =>Day , 0=ON =>AUTO
1408   1      #else
                if(DayNightLevel==1)
              #endif
1411   1        {
1412   2          if(AutoDayNightDelay<(5+5+5))
1413   2            AutoDayNightDelay++;
1414   2          else
1415   2          {
1416   3            if(PWMLevel > PWMLevelTemp)
1417   3              PWMLevel-=1;
1418   3            else if(PWMLevel < PWMLevelTemp)
1419   3              PWMLevel+=1;
1420   3      
1421   3            AutoDayNightDelay=0;
1422   3          }
1423   2        }
1424   1        else
1425   1        {
1426   2          PWMLevel=PWMLevelTemp;
1427   2          //PWMLevel=0x08;
1428   2        } 
1429   1      
1430   1        //Printf("\r\nLADC0=%02x",(WORD)val);
1431   1        page = ReadTW88( 0xff );
1432   1        WriteTW88( 0xff, 0x00 );    // set page 0
1433   1        WriteTW88( 0xbe, ((ReadTW88(0xbe) & 0xcf) | 0x10) );  // set active Low control, if want active high clear
             - 
1434   1        //WriteTW88( 0xc4, ((ReadTW88(0xc4) & 0x80)|(val>>2)) );  // set pwm number
1435   1        WriteTW88( 0xc4, ((ReadTW88(0xc4) & 0x80)|(PWMLevel)) );  // set pwm number
1436   1        WriteTW88( 0xff, page );
1437   1      }
1438          
1439          void Hs_InitVars(void)
1440          {
1441   1      #ifdef SUPPORT_SDCARD  //Pinchi 20140925 add for AWT ML072Q 
                BYTE i;
              #endif
1444   1        SEQFlag=0;
1445   1        SEQTime=0;
1446   1        TriggerMode=8;    //No_TRIG
1447   1      
1448   1      #ifdef SUPPORT_SDCARD  //Pinchi 20140925 add for AWT ML072Q 
                AccPowerDown=1;
                SelectBoxMode=0;
              //#ifdef Format_SDCard  
                FormatSDCard=1;
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 106 

              //#endif
                DVR_SDCardAvailable=0xFF;
                for(i=0;i>14;i++)
                  Information[i]=0;
              
                DoorState=P1_7;
              #endif
1460   1      }
1461          
1462          void LoadEEPROM (void)
1463          {
1464   1        BYTE val;
1465   1         PowerFlag = ReadEEP(EEP_Powerflag);
1466   1         //PowerFlag = 1;   //WILLIAM-V1.3.1.2  20120522
1467   1         SelectModeType = ReadEEP(EEP_SelectMode);
1468   1      
1469   1        OSD_LOCKF= ReadEEP(EEP_ONOFFChoice);
1470   1            Disp_Input = ReadEEP(EEP_COSDMode); 
1471   1          
1472   1         TimeStep = ReadEEP(EEP_TimeStep);
1473   1      #ifdef AWT_ML072Q   //william @20130905
                 Priority = ReadEEP(EEP_PRIORITY);
              #else
1476   1         Priority=0;
1477   1      #endif
1478   1         DayNightLevel= ReadEEP(EEP_AutoMode);
1479   1           PelcoChoiceFLAG = ReadEEP(EEP_PELCO);
1480   1         CAMNumber = ReadEEP(EEP_CAMNUMBER);  
1481   1         Baud_rate = ReadEEP(EEP_Baud_rate);
1482   1         SDCardCoverDetect=ReadEEP(EEP_SDCardDetect);
1483   1         ReverseModeFlag=ReadEEP(EEP_ReverseMode);//andy holtz 20091123
1484   1        #ifdef AWT_ML072S //william @20130902 v1.0.1.2
1485   1         JUMPAVFlag=ReadEEP(EEP_JUMPAV_TIMESET);  
1486   1         NowModeState=SelectMode;
1487   1        #else
                 NowModeState = ReadEEP(EEP_NowModeState);
                #endif
1490   1      
1491   1        #if 0  //pinchi test
                 val = ReadEEP(EEP_COSDMode);   //OSD ON & OFF 切換    //william-980428
                   if(val==0)           
                   {
                    Attr_A|=0x02;  //*** BIT1: Channel OSD  set 1
                    Attr_B|=0x02;
                    Attr_C|=0x02;
                    Attr_R|=0x02;
                    //displayhold_flag=0;
                   }
                   
                   else               
                   {
                    Attr_A&=0x0d;  //*** BIT1: Channel OSD  set 0
                    Attr_B&=0x0d;
                    Attr_C&=0x0d;
                    Attr_R&=0x0d;
                   }
                #endif
1510   1        
1511   1           val = ReadEEP(EEP_CAMAMode);   //CAM Mirror開關設定                                
1512   1           if(val==0)           //ON        
1513   1           Attr_A|=0x01;          //*** BIT0: Horizontal Mirror  set 1
1514   1           else               //OFF        
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 107 

1515   1           Attr_A&=0x0E;          //*** BIT0: Horizontal Mirror  set 0
1516   1        
1517   1           val = ReadEEP(EEP_CAMBMode);                      
1518   1           if(val==0)          //ON        
1519   1           Attr_B|=0x01;         
1520   1           else              //OFF                
1521   1           Attr_B&=0x0E;       
1522   1        
1523   1           val = ReadEEP(EEP_CAMCMode);                               
1524   1           if(val==0)          //ON              
1525   1           Attr_C|=0x01;              
1526   1           else              //OFF               
1527   1           Attr_C&=0x0E;           
1528   1        
1529   1           val = ReadEEP(EEP_CAMRMode);                               
1530   1           if(val==0)          //ON              
1531   1           Attr_R|=0x01;              
1532   1           else              //OFF               
1533   1           Attr_R&=0x0E; 
1534   1          
1535   1          AudioVol = GetAudioVolEE();
1536   1          PCAudioVol = GetPCAudioVolEE();
1537   1          DVR_AudioRecord = ReadEEP(EEP_AudioRecord); 
1538   1          
1539   1        //if(PowerFlag)
1540   1      }
1541          
1542          #ifdef SUPPORT_SDCARD
              void ACCPowerControl(void)
              {
              
              if(ACC_B==1 && AccPowerDown==1)
                { 
                Hs_DvrTxCmdPaser(Halt_Start);
                PowerDownStart=1;
                AccPowerDown=0;
              
                if(DVR_Ready==1)      
                  {
                  if(PowerDownWait>29)
                    {
                    if(ACC_B==1)  
                      {
                    #ifdef BJTSwitch  
                      PPWR=0;
                    #else
                      PPWR=1;
                    #endif
                      }
                    else
                      {
                      PowerDownStart=0;
                      PowerDownWait=0;
                      AccPowerDown=1;
                      }   
                    }
                  }
                else
                  {
                  if(ACC_B==1)
                    {
                  #ifdef BJTSwitch  
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 108 

                    PPWR=0;
                  #else
                    PPWR=1;
                  #endif
                    }
                  else
                    {
                    PowerDownStart=0;
                    PowerDownWait=0;
                    AccPowerDown=1;
                    }
                  }
                }
              
                if(((PowerDownWait%10)==0) && PowerDownWait!=0)
                  AccPowerDown=1;
              }
              
              //#ifdef SUPPORT_SDCARD
              void SDCardHandler(void)
              {
                BYTE val;
              
                if(RS2_in!=0 /*&& !(GetDisplayedOSD() & MENU)*/)    //william-v1410-20120524
                  {
                  val=DvrReceivePaser();  
                  //Printf("\r\nDvrReceivePaser=%02x",(WORD)val);
                  //RS2_in=0;
                  }
                
                if(GetDVRStatusflag==1)
                  {
                  //Hs_DvrTxCmdPaser(GetDVRStatus);
                  Hs_DvrTxCmdPaser(GetDVRParam);
                  Hs_DvrTxCmdPaser(GetDATETIME);
              
                  if(DoorState&&(SDCardCoverDetect==0))
                    Hs_DvrTxCmdPaser(DoorOpen);
                  else
                    Hs_DvrTxCmdPaser(DoorClose);
              
                  #if 0 
                  Hs_DvrTxCmdPaser(SetSystem);    
                  #endif
                  GetDVRStatusflag=0;
                  DisplayDVRStatus();
                  }
                
                if(second==30 && DVRReSendDisable==0 && !(GetDisplayedOSD() & MENU))    //william-v1410-20120524
                  {
                  Hs_DvrTxCmdPaser(GetDATETIME);
                  DVRReSendDisable=1;           //william-v1410-20120524
                  }
              
                if(DoorState!=P1_7&&(SDCardCoverDetect==0))
                  {
                  if(P1_7)
                    Hs_DvrTxCmdPaser(DoorOpen);
                  else
                    Hs_DvrTxCmdPaser(DoorClose);  
                  }
              
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 109 

                if(((GetDisplayedOSD()&(TVVOL|MENU))==0) && DVR_Ready==1)
                  DisplayDVRStatus();
              //#ifdef Format_SDCard
                if(FormatSDCard>=60)
                  {
                  DisplayInformation(InfoRECORDERROR);  
                  Printf("\r\n FormatSDCard%02x",(WORD)FormatSDCard);
                  }
              //#endif    
                if((second&0x01)==0 && DVRReSendDisable==0)
                  {
                  if(CommandBuffer!=0)
                    {
                    DVRCommandReSend();
                    Commanderror++;
                    DVRReSendDisable=1;
                    }
                  else
                    Commanderror=0;
                  }
                
                if(Commanderror>=40)            //william-v1410-20120524
                  DisplayInformation(InfoPLZRESETSYSTEM); 
                
                if(second&0x01 && DVRReSendDisable==1)
                  DVRReSendDisable=0;
              }
              #endif
1667          
1668          void main(void)
1669          {
1670   1      #ifdef QUAD
                //BYTE i;  //Pinchi disable for compiler warning
              #endif
1673   1      //  WORD  TW2835Check=0;  //william-v1.1-991208
1674   1        //mask by ryan@20180102 boot panel scree isuue  P3_5=0;
1675   1        AudioMute(0); 
1676   1      
1677   1      #if 0
              #ifdef BJTSwitch
                PPWR=1;
              #else
                PPWR=0;
              #endif
              #endif
1684   1        //GPS_PWR=1;
1685   1        //GM8126_WD1=1;
1686   1        //GM8126_WD2=1;
1687   1        //RS232Select=0;
1688   1      
1689   1        Wait_ms(10);
1690   1        TW88HWReset = 0;      //TW88 HW reset by port pin, internal MCU no meaning
1691   1      
1692   1        InitCPU();
1693   1            PowerLED(ON);
1694   1      
1695   1        InitVars();
1696   1        Hs_InitVars();
1697   1        InitTechwell();
1698   1            
1699   1      #ifdef Monitor_debug
1700   1      SetMonAddress(TW88I2CAddress);
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 110 

1701   1      #endif
1702   1      #ifdef SUPPORT_SDCARD 
                Hs_Protocol_Init();
              #endif
1705   1        
1706   1        main_init();
1707   1      //  PowerUp = 0;  //Pinchi 20140925 disable for duplicate setting
1708   1        Wait_ms(10);
1709   1      
1710   1      ///=======================
1711   1        WriteDecoder(INFORM, 0xc6);     // 01 00 00 x x   27M, COMPOSITE, Y0, C-, V-
1712   1      //  WriteDecoder(ACNTL, 0x00);  // CLK-on, Y-on, C-off, V(FB)-off
1713   1        //WriteDecoder(MISC3, ReadDecoder(MISC3)|0x06); 
1714   1      ///=======================
1715   1      
1716   1        LoadEEPROM();
1717   1        TR_JUMP_HOLD=NowModeState;//ryan@20170912
1718   1        
1719   1      //william-v1.1-991208
1720   1      #if 0
              #ifdef QUAD
              for(i=0;i<20;i++) 
              {
                TW2835Check=TW2835Command(CAM_A,Attr_A,Attr_B,Attr_C,Attr_R);
                if(TW2835Check==TRUE)
                  break;
                Wait_ms(100);
              }
              #endif
              #endif
1731   1      
1732   1        CAMOutDSel(ReadEEP(EEP_CAMOutMode));  //Pinchi 20150827 add       //設定CAMOut動作 
1733   1        
1734   1        TriggerFlag=0x00;         // william-1.0-test
1735   1      
1736   1      #ifdef HTRV  //Pinchi 20140902 add for HTRV ML072Q
                GaugeVStart= ReadEEP(EEP_Gauge_VStart);                 //william-v1.43-970318
              #endif
1739   1      
1740   1      #ifdef FIRST_RUN_FROM_AC  //Pinchi 20141029 add
                IsFirstRunfromAC = 1;
              #endif
1743   1      
1744   1      #ifdef Hs_debug
1745   1      Printf("\r\n*** Debug Mode is going ***");  //ryan@20170929
1746   1      #endif
1747   1      
1748   1      #ifdef FIX_2835_SCREEN_NOISE  //Pinchi 20160929 add
                TW2835Cmd("\n\rbusw 0 1 7E 89");
              #endif
1751   1      
1752   1      
1753   1      LCDPowerON(3);//ryan@20171016
1754   1      
1755   1        //#ifdef WIDE_SCREEN
1756   1        //Set4WideScreen(WIDESCREEN_WIDE);
1757   1        //#endif
1758   1      
1759   1      
1760   1          WriteDecoder(0xd5, 0x09); // Standby  Panel:1  Signal:0  Back:0
1761   1          delay(4);
1762   1          WriteDecoder(0xd5, 0x0b); // Suspend  Panel:1  Signal:1  Back:0
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 111 

1763   1          delay(10);
1764   1          #ifdef BACKLIGHT_PWM
1765   1          WriteDecoder(0xd5, 0x0f); // On   Panel:1  Signal:1  Back:1 
1766   1          #endif
1767   1      
1768   1      
1769   1      
1770   1          
1771   1      #if 1///ryan@20180112
1772   1      if(PowerFlag==0)
1773   1      {
1774   2      
1775   2          SetNowMode();///ryan@20180111 for live out issue
1776   2          #ifdef Hs_debug
1777   2          Printf("\r\n(power off reboot)");  //ryan@20170929
1778   2          #endif
1779   2      }
1780   1      #endif
1781   1      
1782   1      #ifdef WIDE_SCREEN
                Set4WideScreen(WIDESCREEN_WIDE);
                #endif
1785   1        
1786   1        while(1) {
1787   2        if(PowerFlag)
1788   2          main_loop();    //exit when power off
1789   2          
1790   2        WaitPowerOn();
1791   2      
1792   2        ////ChangeVol(0);  //Pinchi 20150827 move to main()
1793   2        ////DVRAodioSel(DVR_AudioRecord);
1794   2        ////CAMOutDSel(ReadEEP(EEP_CAMOutMode));  //Pinchi 20150827 move to main()       //設定CAMOut動作 
1795   2        //Printf("Last Check --0x%02x\r\n", (WORD)ReadDecoder(0));
1796   2        }
1797   1      }
1798          
1799          //bit CCFL_status;  
1800          void main_loop(void)
1801          {
1802   1        //static bit AUTO_STATUS=0;
1803   1        BYTE val;
1804   1        
1805   1        TW2835Cmd("  \n\r");
1806   1      
1807   1        //---------------------------------------------------------------
1808   1        //                   Main Loop
1809   1        //---------------------------------------------------------------
1810   1        while(1) {
1811   2      
1812   2        
1813   2        #ifdef SUPPORT_SDCARD
                  ACCPowerControl();  
                #endif
1816   2          //-------------- Check Serial Port -----------------
1817   2        #ifdef SERIAL
1818   2      
1819   2        
1820   2          #ifdef Monitor_debug
1821   2            while( RS_ready() ) 
1822   2            {
1823   3            Monitor();        // for new monitor functions
1824   3            }
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 112 

1825   2          #endif  
1826   2            //DebugKeyIn( RS_rx() );  // Input - Serial Port
1827   2        #endif // SERIAL
1828   2      
1829   2          //if ( AccessEnable == 0 ) continue;
1830   2      
1831   2          //-------------- Chip Manual Test  ---------------------
1832   2        #ifdef CHIP_MANUAL_TEST
                  ChipManualTest();
                #endif
1835   2          
1836   2        #ifdef SUPPORT_SDCARD
                  SDCardHandler();  
                #endif
1839   2      
1840   2      
1841   2        #ifdef AWT_NO_SIGNAL_MSG  //Pinchi 20150319 add for to display "NO VIDEO SIGNAL" by AWT request of 201503
             -02
1842   2      //    if ((SelectModeType == AVMode) && !(GetDisplayedOSD() & MENU)&&(TriggerFlag==0))
1843   2          #ifdef AWT_ML072S
1844   2          #else
                  if ((SelectModeType == AVMode) && !(GetDisplayedOSD() & MENU))
                  {
                    if (DisplayInputHold == 1)  //Input=No signal
                    {
                
                          if (IsDrawNoVideoSignal == 0)
                      {
                        IsDrawNoVideoSignal = 1;
              
                      //if(ReadEEP(EEP_COSDMode)==0) 
                
                        displayhold_flag = 0;
                      
                        if (ReadEEP(EEP_COSDMode) == 0)
                          DisplayedOSD &= (~(INPUTINFO));
                        else
                          displayhold_flag =3;//add to setup 2s for Display OFF //ryan@20170922
              
                        DisplayInformation(InfoNoVideoSignal);
                      }
              
                
                    }
                    else
                    {
                      
                      if ((IsDrawNoVideoSignal == 1)&& !(GetDisplayedOSD() & GAUGEINFO))//ryan@20170922
                      {
                        IsDrawNoVideoSignal = 0;
                        if (ReadEEP(EEP_COSDMode) == 1);
                        DisplayInput();
                      }
                    }
                  }
                  #endif
1880   2        #endif
1881   2      
1882   2          //--------------ADC select box---------------------
1883   2          //SelectBoxHandler();
1884   2      
1885   2          //--------------Check Trigger ---------------------
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 113 

1886   2           // if(SelectBoxADC<8)
1887   2           //Printf("\r\nSelectBoxMode=%d",(WORD)SelectBoxMode);
1888   2          {
1889   3          val=CheckTrigger();
1890   3          TriggerHandler(val);
1891   3          }
1892   2      
1893   2      
1894   2          if(TriggerFlag==0 /*&& (SelectBoxMode==0 || SelectBoxMode==5)*/)  //當非倒車左右轉停車時為真
1895   2          { 
1896   3            if(SEQFlag)             // SEQ Mode
1897   3            { 
1898   4              if(SEQTime>=TimeStep) 
1899   4              {
1900   5                SEQMode();
1901   5                SEQTime=0;
1902   5              }
1903   4            }
1904   3          }
1905   2      
1906   2          //--------------AUTO DAY & NIGHT-------------
1907   2        //  if (AutoDayNight == 0)    
1908   2        #ifdef SUPPORT_ML072Q_AUTO_DAY_NIGHT  //Pinchi 20150825 add  //AWT_ML072Q  //Pinchi 20140918 add for AWT 
             -ML072Q
1909   2          if (DayNightLevel == 0)  //ON=Auto
1910   2          {
1911   3            val = ReadDecoder(LADC0);
1912   3            AdjustAutoDayNight(val);
1913   3          }
1914   2          else  //OFF=Day
1915   2          {
1916   3            AdjustAutoDayNight(0xff);
1917   3          }
1918   2          //Printf("DayNightLevel=%02x",DayNightLevel);
1919   2        #else
                  switch(DayNightLevel)
                  {
                    case 0:
                      //AutoDayNight=1;
                      AdjustAutoDayNight(0xff);
                      break;
              
                    case 1: 
                      //AutoDayNight=0;
                      val=ReadDecoder(LADC0);
                      AdjustAutoDayNight(val);
                      break;
              
                    case 2:
                      //AutoDayNight=1;
                      AdjustAutoDayNight(0);
                      break;
                  }
                #endif
1939   2      
1940   2        //-------------- Check Key in --------------------------
1941   2          
1942   2          if( !CheckKeyIn() ) break;      // POWEROFF
1943   2          
1944   2      #ifdef AWT_ML072S//ryan@20171208 
1945   2      
1946   2      if(!(GetDisplayedOSD() & (TVVOL|MENU)))
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 114 

1947   2      {
1948   3        if((!(GetDisplayedOSD() & (INPUTINFO))))
1949   3        {         
1950   4          SetDisplayedOSD(INPUTINFO);
1951   4          DisplayInput();
1952   4          displayhold_flag=3; 
1953   4      
1954   4          if( ReadEEP(EEP_GAUGEMode)==0 && ReadEEP(EEP_RearMode)==0&&(TriggerMode==REVERSE_TRIG))
1955   4            DisplayGaugeOSD();
1956   4        }
1957   3        else if((displayhold_flag==1)&&(Disp_Input==1))//disable input osd
1958   3        {
1959   4          ClearInput2s();
1960   4          displayhold_flag=0;
1961   4        }
1962   3        
1963   3        VlossHandler();
1964   3      }
1965   2      
1966   2          
1967   2        
1968   2        
1969   2      //else if ((!(GetDisplayedOSD()&VLOSSINFO)))  //Input=No signal
1970   2      //{
1971   2      //VlossHandler();
1972   2      //}
1973   2      
1974   2      #else
              
                //#ifndef QUAD
                #if 1  //Pinchi 20141017 enable for AWT ML072Q
              if(displayhold_flag==1&& !(GetDisplayedOSD() & MENU)&&!(GetDisplayedOSD()&TVVOL))
                  {
              //    if(ReadEEP(EEP_COSDMode)!=0 && displayhold_flag==1 && !(GetDisplayedOSD() & MENU))
              //    if( !(GetDisplayedOSD() & MENU)&&ReadEEP(EEP_COSDMode)!=0 )
              
              //  if( ReadEEP(EEP_COSDMode)!=0 )  
                if( Disp_Input!=0 ) 
                  {
                    //if(!(GetDisplayedOSD()&TVVOL))    //william-v1.0-971203
                    {
                      //  ShowOSDWindow(INPUTINFO_OSDWIN-1,FALSE);
                      //Printf("\r\n[MSG]main_loop() => [Display] OFF to clear Info & SelectModeType=%bx , TriggerFlag=%bx",
             -SelectModeType,TriggerFlag); //pinchi test            
                    #ifdef FIX_DISPLAY_OFF_TRIGGER_ISSUE  //Pinchi 20150908 add
                      if (TriggerFlag == 0)
                    #endif
                      {
                        if (SelectModeType == AVMode) //Pinchi 20141024 modify to display AV 2s
                        {
                          //ClearInput();
                          //ShowOSDWindowAll(0);
                          ShowOSDWindow(INPUTINFO_OSDWIN-1,FALSE);
                          //ShowOSDWindow(INPUTINFO_OSDWIN,FALSE);
                          DisplayedOSD &= (~(INPUTINFO));
                        }
                        else
                        { //Printf("\r\n[MSG]main_loop() => 2s timeout call SetNowMode()");  //pinchi test
                        //=== Pinchi 20141017 enable for AWT ML072Q ===
                          Attr_A&=0x0d;  //*** BIT1: Channel OSD  set 0
                          Attr_B&=0x0d;
                          Attr_C&=0x0d;
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 115 

                          Attr_R&=0x0d;
              
                          SetNowMode();
              
                          Attr_A|=0x02;  //*** BIT1: Channel OSD  set 1
                          Attr_B|=0x02;
                          Attr_C|=0x02;
                          Attr_R|=0x02;
                        //==============================================
                        }
                      }
              
                      displayhold_flag=0;
                    } 
                  }
              
                  }
                #else
                //  if (ReadEEP(EEP_COSDMode) !=0 )
                //  dPressSelectTime = SystemClock;  //Pinchi 20141014 add for AWT ML072Q
                  //  SetSourceMode(SelectModeType,Attr_A,Attr_B,Attr_C,Attr_R); 
                #endif  
              #endif
2031   2      
2032   2      #ifdef Monitor_debug
2033   2      #else
              CheckAndClearOSD();
              #endif
2036   2      
2037   2      #if 1//ryan@20170906
2038   2          //============== Check each input status ===============
2039   2          
2040   2          switch ( GetInputSelection() ) {
2041   3      
2042   3          case CH_TW2835:
2043   3              case CH_CAMD:
2044   3          case CH_AV:   
2045   3            //----- Check Decoder ----------------
2046   3      
2047   3            if(!( GetDisplayedOSD() & MENU ) )
2048   3            {
2049   4            //  Printf("\r\n[MSG]main_loop() => call CheckDecoderInput() & GetInputSelection()=%bx",GetInputSelectio
             -n());  //pinchi test
2050   4            
2051   4              CheckDecoderInput();
2052   4      
2053   4            #ifdef FIRST_RUN_FROM_AC  //Pinchi 20141029 add
                      if (IsFirstRunfromAC == 1)
                      {
                        Printf("\r\n[MSG]main_loop() => call CheckDecoderInput():IsFirstRunfromAC=1 & TriggerFlag=%bx,ReadDec
             -oder(0x0a)=%bx , ReadDecoder(0x66)=%bx",TriggerFlag,ReadDecoder(0x0a), ReadDecoder(0x66));  //pinchi test
                        IsFirstRunfromAC = 0;
                      }
                    #endif
2060   4            }
2061   3      
2062   3            break;
2063   3      
2064   3      #ifdef SUPPORT_PC
                  case PC:
                    //if ( AutoDetect == 0 ) break;
                    //----- Check PC input changed -------
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 116 

                    CheckPCinput();
                  break;
              #endif
2071   3      
2072   3          }
2073   2      
2074   2      #ifdef AWT_ML072S
2075   2      if(Backlight_TO==1)
2076   2      {
2077   3        SetBacklight();
2078   3        Backlight_TO=0;
2079   3      }
2080   2      #endif
2081   2      
2082   2      #ifdef AWT_ML072Q
              if(CAM_QUAD_TO==1)
              {
                SetBacklight();
                  CAM_QUAD_TO=0;
              }
              
              if(CAM_QUAD_TO==2)
              {
                Panel_Enable();
              }
              #endif
2094   2      
2095   2      #if 1
2096   2      //Check FPCLK
2097   2        if(ReadTW88(0xb2)==0)
2098   2          {
2099   3          WriteTW88(0xfd,0xb0);
2100   3          PowerLED(OFF);
2101   3          Wait_ms(500);
2102   3          PowerLED(ON);
2103   3          WriteTW88(0xfd,0x30);
2104   3          }
2105   2      #endif  
2106   2          
2107   2      #ifdef RS485    
                if(CAM_PTZ_RUN_flag&&(P2_4&&P2_5&&P2_6&&P2_7))
                {
                  CAM_TxCommand_toRS485(CAM_PTZ_STOP);
                  CAM_PTZ_RUN_flag=0;
                }
              #endif  
2114   2      
2115   2      #endif
2116   2        }
2117   1      }
2118          
2119          void WaitPowerOn(void)
2120          {
2121   1        BYTE ikey,val;
2122   1        BYTE VGATrigger=0;
2123   1        //BYTE AutoKey, _RemoDataCode;
2124   1      
2125   1        while(1) 
2126   1        { 
2127   2        #ifdef SUPPORT_SDCARD
                  ACCPowerControl();
                  if(RS2_in!=0 && !(GetDisplayedOSD() & MENU))
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 117 

                    {
                    DvrReceivePaser();  
                    RS2_in=0;
                    }
                  
                  if(GetDVRStatusflag==1)
                    {
                    Hs_DvrTxCmdPaser(GetDVRStatus);
                    Hs_DvrTxCmdPaser(GetDVRParam);
                    Hs_DvrTxCmdPaser(GetDATETIME);
                    //Hs_DvrTxCmdPaser(GetDVRVersion);    
                    GetDVRStatusflag=0;
                    }
                #endif    
2144   2          //--------------Check Trigger ---------------------
2145   2        #if 0
                    SelectBoxHandler();
                  if(SelectBoxMode>0)
                    {
                      LCDPowerON(0);  
                      AudioMute(1);
                      //DisplayInput();   //william v0.2 20120223
              
                    }
                  else
                #endif  
2156   2        
2157   2      
2158   2          val=CheckTrigger();
2159   2      
2160   2          //#ifdef Hs_debug
2161   2          //Printf("(val=%02x TriggerMode=%02x)",(WORD)val,(WORD)TriggerMode);
2162   2          //#endif
2163   2          
2164   2          if(val!=0)
2165   2          { 
2166   3            TriggerHandler(val);
2167   3            //DisplayInput();   //william v0.2 20120223
2168   3            #ifdef AWT_ML072Q
                    if(!(TriggerMode==0x08))
                    {
                      //Printf("\r\n(**PowerFlag=%02x)",(WORD)PowerFlag);
                      LCDPowerON(1);//修正power on時顯示太慢問題
                      AudioMute(1);   
                    }
                    #else
2176   3              LCDPowerON(1);//修正power on時顯示太慢問題
2177   3              AudioMute(1);   
2178   3            
2179   3            #endif
2180   3          }
2181   2          else
2182   2          {
2183   3            TriggerHandler(val);  //Pinchi 20140922 add for AWT ML072Q
2184   3            
2185   3              if(TriggerFlag==0)
2186   3              {
2187   4              PowerOff();
2188   4              AudioMute(0);
2189   4              }
2190   3          //  TriggerHandler(val);  //Pinchi 20140922 move to above for AWT ML072Q  
2191   3          }
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 118 

2192   2      
2193   2      
2194   2        #ifdef SUPPORT_SDCARD  //Pinchi 20140918 add
                  if(((GetDisplayedOSD() & INPUTINFO)||(GetDisplayedOSD() & GAUGEINFO))&& DVR_Ready==1)
                    DisplayDVRStatus();
                #endif
2198   2          if( (ikey = GetKey(0)) ) {
2199   3            #ifdef POWERKEY
2200   3            if( ikey==POWERKEY && CheckTrigger()==0)
2201   3            {
2202   4              PowerFlag=1;
2203   4              WriteEEP(EEP_Powerflag,PowerFlag);//2007.3.28 Justin
2204   4              break;    //poweron
2205   4            }
2206   3            #endif
2207   3          }
2208   2          #if 0
                  if( IsRemoDataReady(&_RemoDataCode, &AutoKey) ) {
                    if( _RemoDataCode==REMO_STANDBY && !AutoKey )   //POWERON
                      break;    //poweron 
                  }
                  #endif
2214   2      
2215   2          #if (defined AWT_ML072Q)
                  if(CAM_QUAD_TO==2)//ryan@20171016
                  { 
                  //Printf("\r\n(**Power off_ LCD setting)");
                  OFF_LVDS();
                  //PanelMute(1);
                  
                  Panel_Enable();
                  Wait_ms(16);
                  P3_5=1;
                  
                  //delay(10);
              
                  WriteDecoder(0xd5, 0x09); // Standby  Panel:1  Signal:0  Back:0
                  delay(4);
                
                  WriteDecoder(0xd5, 0x0b); // Suspend  Panel:1  Signal:1  Back:0
              
                  delay(10);
                  ON_LVDS();
                  
                  #ifdef BACKLIGHT_PWM
                  WriteDecoder(0xd5, 0x0f); // On   Panel:1  Signal:1  Back:1
                  #endif
              
                  //AudioMute(1);       //WILLIAM-981103
                  
                  delay(5);
                    
                  //Wait_ms(50);
                  //CAM_QUAD_TO=3;//ryan@20170928
                  //SetBacklight();
                    
                  TW2835Cmd("\n\rbusw 0 1 A1 11\n\r");
                  Wait_ms(100);
                  TW2835Cmd("\n\rbusw 0 1 A2 D7\n\r");  
                  CAM_QUAD_TO=0;
                  }
                  #endif
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 119 

2254   2      
2255   2          #ifdef AWT_ML072S
2256   2          VlossHandler();
2257   2          #endif
2258   2        }
2259   1      
2260   1        #ifdef DEBUG_MAIN
                dPuts("\r\n++(PowerOn)__");
                #endif
2263   1      
2264   1      ////  PowerLED(ON);
2265   1      ////  AudioMute(1);
2266   1      ////  ChangeVol(0);
2267   1      
2268   1      #if 1  //Pinchi 20150408 add to fix power on keep last trigger stage
2269   1        DisplayInput();  //Pinchi 20150408 add
2270   1        SetNowMode();
2271   1      
2272   1        if (ReadEEP(EEP_COSDMode) == 1)
2273   1          displayhold_flag = 3;
2274   1      
2275   1        #ifdef AWT_NO_SIGNAL_MSG
2276   1        IsDrawNoVideoSignal = 0;
2277   1        #endif
2278   1      #endif
2279   1      
2280   1        LCDPowerON(1);//修正power on時顯示太慢問題
2281   1        
2282   1      #ifdef FIX_EXIT_STANDBY_NO_AUDIO  //Pinchi 20150908 add
2283   1        AudioMute(1);
2284   1      #endif
2285   1      #ifdef FIX_2835_SCREEN_NOISE  //Pinchi 20160929 add
                TW2835Cmd("\n\rbusw 0 1 7E 89\r\n");
              #endif
2288   1      //if(VGATrigger==0)
2289   1      //  DisplayInput();
2290   1      }
2291          
2292          #ifdef AWT_ML720Q_NEW_TRIGGER_FUN  //Pinchi 20141031 add for AWT request each trigger can work by PRIORITY
             - OFF
              //===== bTri_arry[4]={Left , Right , Reverse , CAM C} =====//
              void CheckNewTriggerFunc(void)
              {
                BYTE i , j , num , val;
              
                if ((Priority == 0) || ((Priority == 1) && (bTriNumber == 0))) 
                { 
                  if (IsTriggerArrEmpty == 0)  //Pinchi 20150210 add
                  {
                    IsTriggerArrEmpty = 1;  //Pinchi 20150210 add
              
                    for (i=0 ; i < 4 ; i++)
                    {
                      bTri_arry[i] = 0;
                      bTri_backup[i] = 0;  //Pinchi 20150210 add
                    }
                    bTriOrder = 0;
                    bTriNumber = 0;
                  }
              
                  return;
                }
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 120 

              
                IsTriggerArrEmpty = 0;  //Pinchi 20150210 add
              
                if (bTriOrder > bTriNumber)  //multi trigger & release one
                {
                  num = bTriOrder - bTriNumber;
              
                  for (i=0 ; i < num ; i++)
                  {
                    for (j=0 ; j < 4 ; j++)
                    {       
                      if (bTri_arry[j] != bTri_backup[j])
                      {
                        val = bTri_backup[j];
                        bTri_backup[j] = 0;
                        break;
                      }
                    }
              
                    for (j=0 ; j < 4 ; j++)
                    {
                      if (bTri_arry[j] > val)
                      {
                        bTri_arry[j] -= 1;
                        bTri_backup[j] = bTri_arry[j];
                      }
                    }
                  }
              
                  bTriOrder = bTriNumber;
                }
              
                num = bTriOrder;
                val = 5;
              
                for (i=0 ; i < 4 ; i++)
                { 
                  if (bTri_arry[i] == num)
                  {
                    val = i;
                  
                  #ifdef AWT_ADD_TRIGGER_DELAY_FUN  //Pinchi 20150206 add for AWT request each trigger can setup trigger d
             -elay
                     if (num == 1)
                     {
                       bLastTrigger = i+1;
                     }
                  #endif
              
                    break;
                  }
                }
              
                delay(1);  //delay to avoid polling trigger to make error
              
                switch(val)
                {
                  case 0:   //Left last trigger
                    RtFlag = 0;
                    ReverseFlag = 0;
                    ParkFlag = 0;
                    break;
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 121 

                
                  case 1:   //Right last trigger
                    LtFlag = 0;
                    ReverseFlag = 0;
                    ParkFlag = 0;
                    break;
                
                  case 2:   //Reverse last trigger
                    LtFlag = 0;
                    RtFlag = 0;
                    ParkFlag = 0;
              
                  //  ShowOSDWindow(INPUTINFO_OSDWIN-1 , FALSE);  //clear T Char    //Pinchi 20150210 disable
                    break;
                
                  case 3:   //CAM C last trigger
                    LtFlag = 0;
                    RtFlag = 0;
                    ReverseFlag = 0;
              
                    if (CkTMode != PARK_TRIG)  //Pinchi 20150210 add to slove T char no disapper after CAM C release
                      TDisplayFlag = 0;  //display T Char
                    break;
                
                  default :
                    LtFlag = 0;
                    RtFlag = 0;
                    ReverseFlag = 0;
                    ParkFlag = 0;
                }
              }
              #endif
2408          
2409          
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 122 

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com00A9 (BEGIN)
0000         L?0170:
0000         L?0171:
0000 EF                MOV     A,R7
0001 75F011            MOV     B,#011H
0004 A4                MUL     AB
0005 2400        R     ADD     A,#LOW struct_InputSelection_S
0007 F582              MOV     DPL,A
0009 E4                CLR     A
000A 3400        R     ADDC    A,#HIGH struct_InputSelection_S
000C F583              MOV     DPH,A
000E E4                CLR     A
000F 93                MOVC    A,@A+DPTR
0010 22                RET     
0011         L?0179:
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
0016 E4                CLR     A
0017 F0                MOVX    @DPTR,A
0018 A3                INC     DPTR
0019 EF                MOV     A,R7
001A F0                MOVX    @DPTR,A
001B 22                RET     
001C         L?0180:
001C         L?0181:
001C 900001            MOV     DPTR,#01H
001F 020000      E     LJMP    ?C?CLDOPTR
0022         L?0182:
0022 E4                CLR     A
0023 F500        R     MOV     IVF,A
0025 F500        R     MOV     IVF+01H,A
0027 F500        R     MOV     IHF+03H,A
0029 F500        R     MOV     IHF+02H,A
002B 22                RET     
             ; FUNCTION Com00A9 (END)

             ; FUNCTION _I2CDeviceInitialize (BEGIN)
                                           ; SOURCE LINE # 365
0000 900000      R     MOV     DPTR,#RegSet
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 366
                                           ; SOURCE LINE # 367
;---- Variable 'cnt' assigned to Register 'R6/R7' ----
0006 E4                CLR     A
0007 FE                MOV     R6,A
                                           ; SOURCE LINE # 370
0008 120000      E     LCALL   ?C?CLDPTR
000B 900000      R     MOV     DPTR,#addr
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 374
000F 120000      R     LCALL   L?0180
                                           ; SOURCE LINE # 375
0012 8029              SJMP    ?C0154
0014         ?C0001:
                                           ; SOURCE LINE # 377
0014 900000      R     MOV     DPTR,#RegSet
0017 120000      E     LCALL   ?C?PLDXDATA
001A 120000      E     LCALL   ?C?CLDPTR
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 123 

001D FF                MOV     R7,A
001E F4                CPL     A
001F 7006              JNZ     ?C0003
0021 120000      R     LCALL   L?0180
0024 F4                CPL     A
0025 6022              JZ      ?C0002
0027         ?C0003:
                                           ; SOURCE LINE # 378
0027 900000      R     MOV     DPTR,#index
002A EF                MOV     A,R7
002B F0                MOVX    @DPTR,A
002C FD                MOV     R5,A
                                           ; SOURCE LINE # 379
002D 120000      R     LCALL   L?0181
0030 900000      R     MOV     DPTR,#val
0033 F0                MOVX    @DPTR,A
0034 FB                MOV     R3,A
                                           ; SOURCE LINE # 393
0035 900000      R     MOV     DPTR,#addr
0038 E0                MOVX    A,@DPTR
0039 FF                MOV     R7,A
003A 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 399
003D         ?C0154:
003D 900000      R     MOV     DPTR,#RegSet+01H
0040 E4                CLR     A
0041 75F002            MOV     B,#02H
0044 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 400
0047 80CB              SJMP    ?C0001
0049         ?C0002:
                                           ; SOURCE LINE # 401
0049 E4                CLR     A
004A FB                MOV     R3,A
004B 7DFF              MOV     R5,#0FFH
004D 7F8A              MOV     R7,#08AH
004F 020000      E     LJMP    _WriteI2C
             ; FUNCTION _I2CDeviceInitialize (END)

             ; FUNCTION _InitVideoData (BEGIN)
                                           ; SOURCE LINE # 421
0000 900000      R     MOV     DPTR,#src
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 422
                                           ; SOURCE LINE # 432
0005 7BFF              MOV     R3,#0FFH
0007 7A00        E     MOV     R2,#HIGH NTSC_Regs
0009 7900        E     MOV     R1,#LOW NTSC_Regs
000B 120000      R     LCALL   _I2CDeviceInitialize
                                           ; SOURCE LINE # 433
000E E4                CLR     A
000F 120000      R     LCALL   L?0174
                                           ; SOURCE LINE # 435
0012 900000      R     MOV     DPTR,#src
0015 E0                MOVX    A,@DPTR
0016 900000      R     MOV     DPTR,#InitVideoDataSrc
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 438
001A 24FE              ADD     A,#0FEH
001C 6013              JZ      ?C0007
001E 14                DEC     A
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 124 

001F 6010              JZ      ?C0007
0021 24FD              ADD     A,#0FDH
0023 600C              JZ      ?C0007
0025 2406              ADD     A,#06H
0027 24F8              ADD     A,#0F8H
0029 5011              JNC     ?C0014
002B 240A              ADD     A,#0AH
002D 600D              JZ      ?C0014
002F 8011              SJMP    ?C0005
                                           ; SOURCE LINE # 441
                                           ; SOURCE LINE # 451
0031         ?C0007:
                                           ; SOURCE LINE # 457
0031         ?C0155:
                                           ; SOURCE LINE # 458
                                           ; SOURCE LINE # 461
0031         ?C0156:
0031 7BFF              MOV     R3,#0FFH
0033 7A00        E     MOV     R2,#HIGH PAL_Regs
0035 7900        E     MOV     R1,#LOW PAL_Regs
0037 120000      R     LCALL   _I2CDeviceInitialize
                                           ; SOURCE LINE # 468
003A 8006              SJMP    ?C0005
                                           ; SOURCE LINE # 472
                                           ; SOURCE LINE # 475
                                           ; SOURCE LINE # 478
                                           ; SOURCE LINE # 480
                                           ; SOURCE LINE # 482
                                           ; SOURCE LINE # 483
003C         ?C0014:
003C 900000      R     MOV     DPTR,#src
003F 7401              MOV     A,#01H
0041 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 484
0042         ?C0005:
                                           ; SOURCE LINE # 486
0042 900000      R     MOV     DPTR,#InputSelection
0045 E0                MOVX    A,@DPTR
0046 6405              XRL     A,#05H
0048 7013              JNZ     ?C0015
                                           ; SOURCE LINE # 487
                                           ; SOURCE LINE # 488
004A 900000      R     MOV     DPTR,#VInputStdDetectMode
004D E0                MOVX    A,@DPTR
004E 7002              JNZ     ?C0016
0050 800B              SJMP    ?C0157
0052         ?C0016:
                                           ; SOURCE LINE # 489
0052 900000      R     MOV     DPTR,#src
0055 E0                MOVX    A,@DPTR
0056 14                DEC     A
0057 FF                MOV     R7,A
0058 120000      E     LCALL   _ClearAutoDetectStd
                                           ; SOURCE LINE # 490
005B 8003              SJMP    ?C0018
005D         ?C0015:
                                           ; SOURCE LINE # 492
005D         ?C0157:
005D 120000      E     LCALL   SetAutoDetectStd
0060         ?C0018:
                                           ; SOURCE LINE # 498
0060 7B15              MOV     R3,#015H
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 125 

0062 7D29              MOV     R5,#029H
0064 7F8A              MOV     R7,#08AH
0066 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 500
0069 7B06              MOV     R3,#06H
006B 7D5C              MOV     R5,#05CH
006D 7F8A              MOV     R7,#08AH
006F 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 504
0072 7F0B              MOV     R7,#0BH
0074 7E00              MOV     R6,#00H
0076 120000      E     LCALL   _ReadEEP
0079 120000      E     LCALL   _SetVideoMode
                                           ; SOURCE LINE # 515
007C 900000      R     MOV     DPTR,#src
007F E0                MOVX    A,@DPTR
0080 6401              XRL     A,#01H
0082 7007              JNZ     ?C0019
                                           ; SOURCE LINE # 516
                                           ; SOURCE LINE # 517
0084 120000      R     LCALL   L?0174
                                           ; SOURCE LINE # 518
0087 7B78              MOV     R3,#078H
                                           ; SOURCE LINE # 519
0089 8012              SJMP    ?C0158
008B         ?C0019:
                                           ; SOURCE LINE # 520
008B 900000      R     MOV     DPTR,#src
008E E0                MOVX    A,@DPTR
008F 6402              XRL     A,#02H
0091 7011              JNZ     ?C0020
                                           ; SOURCE LINE # 521
                                           ; SOURCE LINE # 522
0093 FB                MOV     R3,A
0094 7DFF              MOV     R5,#0FFH
0096 7F8A              MOV     R7,#08AH
0098 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 524
009B 7B94              MOV     R3,#094H
009D         ?C0158:
009D 7D62              MOV     R5,#062H
009F 7F8A              MOV     R7,#08AH
00A1 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 525
00A4         ?C0020:
                                           ; SOURCE LINE # 542
00A4 7BFF              MOV     R3,#0FFH
00A6 7A00        R     MOV     R2,#HIGH ?SC_0
00A8 7900        R     MOV     R1,#LOW ?SC_0
00AA 900000      R     MOV     DPTR,#src
00AD 120000      R     LCALL   L?0179
00B0 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 548
00B3 C200        E     CLR     Init_DisplayInput
                                           ; SOURCE LINE # 549
00B5 22                RET     
00B6         L?0174:
00B6 FB                MOV     R3,A
00B7 7DFF              MOV     R5,#0FFH
00B9 7F8A              MOV     R7,#08AH
00BB 120000      E     LCALL   _WriteI2C
00BE 22                RET     
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 126 

             ; FUNCTION _InitVideoData (END)

             ; FUNCTION IsNoInput (BEGIN)
                                           ; SOURCE LINE # 552
                                           ; SOURCE LINE # 553
                                           ; SOURCE LINE # 554
0000 7D01              MOV     R5,#01H
0002 7F8A              MOV     R7,#08AH
0004 120000      E     LCALL   _ReadI2C
0007 EF                MOV     A,R7
0008 30E703            JNB     ACC.7,?C0023
000B 7F01              MOV     R7,#01H
000D 22                RET     
000E         ?C0023:
                                           ; SOURCE LINE # 555
000E 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 556
0010         ?C0024:
0010 22                RET     
             ; FUNCTION IsNoInput (END)

             ; FUNCTION CheckDecoderInput (BEGIN)
                                           ; SOURCE LINE # 647
                                           ; SOURCE LINE # 648
                                           ; SOURCE LINE # 787
0000 E4                CLR     A
0001 900000      R     MOV     DPTR,#cnt
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 796
0007 900000      R     MOV     DPTR,#InputSelection
000A E0                MOVX    A,@DPTR
000B 6405              XRL     A,#05H
000D 7009              JNZ     ?C0025
000F 900000      R     MOV     DPTR,#VInputStdDetectMode
0012 E0                MOVX    A,@DPTR
0013 6003              JZ      $ + 5H
0015 020000      R     LJMP    ?C0026
0018         ?C0025:
                                           ; SOURCE LINE # 799
0018 E4                CLR     A
0019 900000      R     MOV     DPTR,#std1
001C F0                MOVX    @DPTR,A
001D         ?C0027:
                                           ; SOURCE LINE # 800
                                           ; SOURCE LINE # 801
001D 120000      E     LCALL   DetectDecoderInput
0020 900000      R     MOV     DPTR,#std
0023 EF                MOV     A,R7
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 806
0025 900000      R     MOV     DPTR,#trycnt
0028 E0                MOVX    A,@DPTR
0029 04                INC     A
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 807
002B E0                MOVX    A,@DPTR
002C C3                CLR     C
002D 940A              SUBB    A,#0AH
002F 7480              MOV     A,#080H
0031 9480              SUBB    A,#080H
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 127 

0033 4003              JC      $ + 5H
0035 020000      R     LJMP    ?C0026
                                           ; SOURCE LINE # 808
                                           ; SOURCE LINE # 810
0038 900000      R     MOV     DPTR,#std
003B E0                MOVX    A,@DPTR
003C FF                MOV     R7,A
003D FD                MOV     R5,A
003E 7C00              MOV     R4,#00H
0040 64FE              XRL     A,#0FEH
0042 60D9              JZ      ?C0027
0044 900000      R     MOV     DPTR,#VInputStd
0047 E0                MOVX    A,@DPTR
0048 FE                MOV     R6,A
0049 EF                MOV     A,R7
004A 6E                XRL     A,R6
004B 60D0              JZ      ?C0027
                                           ; SOURCE LINE # 811
                                           ; SOURCE LINE # 814
004D 900000      R     MOV     DPTR,#std1
0050 E0                MOVX    A,@DPTR
0051 FF                MOV     R7,A
0052 A3                INC     DPTR
0053 E0                MOVX    A,@DPTR
0054 FE                MOV     R6,A
0055 B50706            CJNE    A,AR7,?C0031
                                           ; SOURCE LINE # 815
0058 A3                INC     DPTR
0059 E0                MOVX    A,@DPTR
005A 04                INC     A
005B F0                MOVX    @DPTR,A
005C 800A              SJMP    ?C0032
005E         ?C0031:
                                           ; SOURCE LINE # 817
                                           ; SOURCE LINE # 818
005E E4                CLR     A
005F 900000      R     MOV     DPTR,#cnt
0062 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 819
0063 900000      R     MOV     DPTR,#std1
0066 EE                MOV     A,R6
0067 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 820
0068         ?C0032:
                                           ; SOURCE LINE # 822
0068 900000      R     MOV     DPTR,#cnt
006B E0                MOVX    A,@DPTR
006C C3                CLR     C
006D 9402              SUBB    A,#02H
006F 7480              MOV     A,#080H
0071 9480              SUBB    A,#080H
0073 40A8              JC      ?C0027
                                           ; SOURCE LINE # 828
0075 ED                MOV     A,R5
0076 4C                ORL     A,R4
0077 7010              JNZ     ?C0034
                                           ; SOURCE LINE # 829
                                           ; SOURCE LINE # 831
0079 900000      R     MOV     DPTR,#std
007C E0                MOVX    A,@DPTR
007D FF                MOV     R7,A
007E 120000      R     LCALL   _SetVInputStd
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 128 

                                           ; SOURCE LINE # 832
0081 900000      R     MOV     DPTR,#ChangedNoinput
0084 7401              MOV     A,#01H
0086 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 833
0087 8030              SJMP    ?C0035
0089         ?C0034:
                                           ; SOURCE LINE # 834
0089 900000      R     MOV     DPTR,#VInputStd
008C E0                MOVX    A,@DPTR
008D 7011              JNZ     ?C0036
                                           ; SOURCE LINE # 835
                                           ; SOURCE LINE # 839
008F 900000      R     MOV     DPTR,#SelectModeType
0092 E0                MOVX    A,@DPTR
0093 7006              JNZ     ?C0037
0095 300003      R     JNB     IsDrawNoVideoSignal,?C0037
                                           ; SOURCE LINE # 840
0098 120000      E     LCALL   ClearGAUGEINFO
009B         ?C0037:
                                           ; SOURCE LINE # 843
                                           ; SOURCE LINE # 844
009B 120000      R     LCALL   L?0173
                                           ; SOURCE LINE # 845
                                           ; SOURCE LINE # 846
009E 8014              SJMP    ?C0159
00A0         ?C0036:
                                           ; SOURCE LINE # 848
                                           ; SOURCE LINE # 854
00A0 900000      R     MOV     DPTR,#SelectModeType
00A3 E0                MOVX    A,@DPTR
00A4 7006              JNZ     ?C0039
00A6 300003      R     JNB     IsDrawNoVideoSignal,?C0039
                                           ; SOURCE LINE # 855
00A9 120000      E     LCALL   ClearGAUGEINFO
00AC         ?C0039:
                                           ; SOURCE LINE # 858
                                           ; SOURCE LINE # 859
00AC 120000      R     LCALL   L?0173
                                           ; SOURCE LINE # 860
00AF 7F32              MOV     R7,#032H
00B1 120000      E     LCALL   _delay
                                           ; SOURCE LINE # 862
00B4         ?C0159:
00B4 E4                CLR     A
00B5 900000      R     MOV     DPTR,#ChangedNoinput
00B8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 863
00B9         ?C0035:
                                           ; SOURCE LINE # 871
00B9 900000      R     MOV     DPTR,#ChangedNoinput
00BC E0                MOVX    A,@DPTR
00BD 24FF              ADD     A,#0FFH
00BF 9200        R     MOV     DisplayInputHold,C
                                           ; SOURCE LINE # 873
                                           ; SOURCE LINE # 874
                                           ; SOURCE LINE # 875
                                           ; SOURCE LINE # 886
                                           ; SOURCE LINE # 892
00C1         ?C0026:
00C1 22                RET     
00C2         L?0173:
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 129 

00C2 900000      R     MOV     DPTR,#std
00C5 E0                MOVX    A,@DPTR
00C6 FF                MOV     R7,A
00C7 120000      R     LCALL   _SetVInputStd
00CA 900000      R     MOV     DPTR,#std
00CD E0                MOVX    A,@DPTR
00CE FF                MOV     R7,A
00CF 120000      R     LCALL   _InitVideoData
00D2 22                RET     
             ; FUNCTION CheckDecoderInput (END)

             ; FUNCTION ReadVInputSTD (BEGIN)
                                           ; SOURCE LINE # 894
                                           ; SOURCE LINE # 895
                                           ; SOURCE LINE # 898
0000 120000      R     LCALL   IsNoInput
0003 EF                MOV     A,R7
0004 6003              JZ      ?C0040
0006 7F01              MOV     R7,#01H
0008 22                RET     
0009         ?C0040:
                                           ; SOURCE LINE # 900
0009 7D1C              MOV     R5,#01CH
000B 7F8A              MOV     R7,#08AH
000D 120000      E     LCALL   _ReadI2C
0010 EF                MOV     A,R7
0011 54F0              ANL     A,#0F0H
0013 FF                MOV     R7,A
;---- Variable 'std' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 901
0014 30E703            JNB     ACC.7,?C0042
0017 7F01              MOV     R7,#01H
0019 22                RET     
001A         ?C0042:
                                           ; SOURCE LINE # 903
001A EF                MOV     A,R7
001B 5470              ANL     A,#070H
001D C4                SWAP    A
001E 540F              ANL     A,#0FH
0020 04                INC     A
0021 FF                MOV     R7,A
                                           ; SOURCE LINE # 904
0022         ?C0041:
0022 22                RET     
             ; FUNCTION ReadVInputSTD (END)

             ; FUNCTION GetVInputStdInx (BEGIN)
                                           ; SOURCE LINE # 906
                                           ; SOURCE LINE # 907
                                           ; SOURCE LINE # 910
0000 120000      R     LCALL   ReadVInputSTD
;---- Variable 'std' assigned to Register 'R3' ----
0003 AB07              MOV     R3,AR7
                                           ; SOURCE LINE # 912
0005 EB                MOV     A,R3
0006 24FE              ADD     A,#0FEH
0008 6019              JZ      ?C0051
000A 14                DEC     A
000B 6016              JZ      ?C0051
000D 24FD              ADD     A,#0FDH
000F 6012              JZ      ?C0051
0011 2402              ADD     A,#02H
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 130 

0013 24FC              ADD     A,#0FCH
0015 5004              JNC     ?C0048
0017 2407              ADD     A,#07H
0019 7017              JNZ     ?C0052
                                           ; SOURCE LINE # 914
                                           ; SOURCE LINE # 915
                                           ; SOURCE LINE # 916
                                           ; SOURCE LINE # 917
001B         ?C0048:
001B 750000      R     MOV     IVF,#00H
001E 75003C      R     MOV     IVF+01H,#03CH
0021 8006              SJMP    ?C0160
                                           ; SOURCE LINE # 919
                                           ; SOURCE LINE # 920
                                           ; SOURCE LINE # 921
0023         ?C0051:
0023 750000      R     MOV     IVF,#00H
0026 750032      R     MOV     IVF+01H,#032H
0029         ?C0160:
0029 E4                CLR     A
002A 75006B      R     MOV     IHF+03H,#06BH
002D 75003D      R     MOV     IHF+02H,#03DH
0030 8003              SJMP    ?C0161
                                           ; SOURCE LINE # 922
0032         ?C0052:
0032 120000      R     LCALL   L?0182
0035         ?C0161:
0035 F500        R     MOV     IHF+01H,A
0037 F500        R     MOV     IHF,A
                                           ; SOURCE LINE # 923
0039         ?C0044:
                                           ; SOURCE LINE # 925
;---- Variable 'i' assigned to Register 'R7' ----
0039 E4                CLR     A
003A FF                MOV     R7,A
003B         ?C0053:
                                           ; SOURCE LINE # 926
003B EF                MOV     A,R7
003C 75F011            MOV     B,#011H
003F A4                MUL     AB
0040 2400        R     ADD     A,#LOW struct_VInputStd
0042 F582              MOV     DPL,A
0044 E4                CLR     A
0045 3400        R     ADDC    A,#HIGH struct_VInputStd
0047 F583              MOV     DPH,A
0049 E4                CLR     A
004A 93                MOVC    A,@A+DPTR
004B FE                MOV     R6,A
004C B50301            CJNE    A,AR3,?C0056
                                           ; SOURCE LINE # 927
004F 22                RET     
0050         ?C0056:
                                           ; SOURCE LINE # 928
0050 EE                MOV     A,R6
0051 6003              JZ      ?C0054
                                           ; SOURCE LINE # 929
                                           ; SOURCE LINE # 930
0053 0F                INC     R7
0054 80E5              SJMP    ?C0053
0056         ?C0054:
                                           ; SOURCE LINE # 931
0056 7F00              MOV     R7,#00H
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 131 

                                           ; SOURCE LINE # 932
0058         ?C0057:
0058 22                RET     
             ; FUNCTION GetVInputStdInx (END)

             ; FUNCTION _SetVInputStd (BEGIN)
                                           ; SOURCE LINE # 941
;---- Variable 'newd' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 942
                                           ; SOURCE LINE # 943
0000 900000      R     MOV     DPTR,#VInputStd
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 957
0005 24FE              ADD     A,#0FEH
0007 6019              JZ      ?C0066
0009 14                DEC     A
000A 6016              JZ      ?C0066
000C 24FD              ADD     A,#0FDH
000E 6012              JZ      ?C0066
0010 2402              ADD     A,#02H
0012 24FC              ADD     A,#0FCH
0014 5004              JNC     ?C0063
0016 2407              ADD     A,#07H
0018 7017              JNZ     ?C0067
                                           ; SOURCE LINE # 960
                                           ; SOURCE LINE # 963
                                           ; SOURCE LINE # 966
                                           ; SOURCE LINE # 968
001A         ?C0063:
001A 750000      R     MOV     IVF,#00H
001D 75003C      R     MOV     IVF+01H,#03CH
0020 8006              SJMP    ?C0162
                                           ; SOURCE LINE # 971
                                           ; SOURCE LINE # 974
                                           ; SOURCE LINE # 977
0022         ?C0066:
0022 750000      R     MOV     IVF,#00H
0025 750032      R     MOV     IVF+01H,#032H
0028         ?C0162:
0028 E4                CLR     A
0029 75006B      R     MOV     IHF+03H,#06BH
002C 75003D      R     MOV     IHF+02H,#03DH
002F 8003              SJMP    ?C0163
                                           ; SOURCE LINE # 980
0031         ?C0067:
0031 120000      R     LCALL   L?0182
0034         ?C0163:
0034 F500        R     MOV     IHF+01H,A
0036 F500        R     MOV     IHF,A
                                           ; SOURCE LINE # 981
                                           ; SOURCE LINE # 982
0038         ?C0068:
0038 22                RET     
             ; FUNCTION _SetVInputStd (END)

             ; FUNCTION GetInputSelection (BEGIN)
                                           ; SOURCE LINE # 984
                                           ; SOURCE LINE # 985
                                           ; SOURCE LINE # 986
0000 900000      R     MOV     DPTR,#InputSelection
0003 E0                MOVX    A,@DPTR
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 132 

0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 987
0005 22                RET     
             ; FUNCTION GetInputSelection (END)

             ; FUNCTION GetNextInputSelection (BEGIN)
                                           ; SOURCE LINE # 989
                                           ; SOURCE LINE # 990
                                           ; SOURCE LINE # 1001
;---- Variable 'i' assigned to Register 'R7' ----
0000 7F01              MOV     R7,#01H
0002         ?C0070:
                                           ; SOURCE LINE # 1002
0002 120000      R     LCALL   L?0170
0005 FE                MOV     R6,A
0006 900000      R     MOV     DPTR,#InputSelection
0009 E0                MOVX    A,@DPTR
000A FD                MOV     R5,A
000B EE                MOV     A,R6
000C 6D                XRL     A,R5
000D 6003              JZ      ?C0071
000F 0F                INC     R7
0010 80F0              SJMP    ?C0070
0012         ?C0071:
                                           ; SOURCE LINE # 1003
0012 0F                INC     R7
                                           ; SOURCE LINE # 1004
0013 120000      R     LCALL   L?0170
0016 7002              JNZ     ?C0074
0018 7F01              MOV     R7,#01H
001A         ?C0074:
                                           ; SOURCE LINE # 1006
001A 120000      R     LCALL   L?0171
001D FF                MOV     R7,A
                                           ; SOURCE LINE # 1008
001E 22                RET     
             ; FUNCTION GetNextInputSelection (END)

             ; FUNCTION PowerDown_XTAL (BEGIN)
                                           ; SOURCE LINE # 1010
                                           ; SOURCE LINE # 1011
                                           ; SOURCE LINE # 1012
0000 300003      R     JNB     flag,?C0076
0003 D2B7              SETB    P3_7
0005 22                RET     
0006         ?C0076:
                                           ; SOURCE LINE # 1013
0006 C2B7              CLR     P3_7
                                           ; SOURCE LINE # 1014
0008         ?C0078:
0008 22                RET     
             ; FUNCTION PowerDown_XTAL (END)

             ; FUNCTION _ChangeInput (BEGIN)
                                           ; SOURCE LINE # 1037
0000 900000      R     MOV     DPTR,#newsel
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1038
                                           ; SOURCE LINE # 1069
0005 43E804            ORL     P4,#04H
                                           ; SOURCE LINE # 1077
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 133 

0008 7B01              MOV     R3,#01H
000A 120000      R     LCALL   L?0175
                                           ; SOURCE LINE # 1078
000D E4                CLR     A
000E FB                MOV     R3,A
000F 7DB4              MOV     R5,#0B4H
0011 7F8A              MOV     R7,#08AH
0013 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 1079
0016 E4                CLR     A
0017 FB                MOV     R3,A
0018 120000      R     LCALL   L?0175
                                           ; SOURCE LINE # 1080
001B 120000      R     LCALL   L?0176
                                           ; SOURCE LINE # 1082
001E 900000      R     MOV     DPTR,#newsel
0021 E0                MOVX    A,@DPTR
0022 900000      R     MOV     DPTR,#InputSelection
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1090
0026 900000      R     MOV     DPTR,#VInputStd
0029 E0                MOVX    A,@DPTR
002A FF                MOV     R7,A
002B 120000      R     LCALL   _InitVideoData
                                           ; SOURCE LINE # 1092
002E 900000      R     MOV     DPTR,#InputSelection
0031 E0                MOVX    A,@DPTR
0032 24FE              ADD     A,#0FEH
0034 602F              JZ      ?C0081
0036 14                DEC     A
0037 603E              JZ      ?C0082
0039 14                DEC     A
003A 604D              JZ      ?C0083
003C 2403              ADD     A,#03H
003E 706D              JNZ     ?C0079
                                           ; SOURCE LINE # 1093
                                           ; SOURCE LINE # 1109
0040         ?C0080:
                                           ; SOURCE LINE # 1110
0040 120000      E     LCALL   COMPOSITE1Input
                                           ; SOURCE LINE # 1113
0043 C200        E     CLR     VGAAudio
                                           ; SOURCE LINE # 1114
0045 C294              CLR     P1_4
                                           ; SOURCE LINE # 1115
0047 C295              CLR     P1_5
                                           ; SOURCE LINE # 1116
0049 120000      R     LCALL   L?0176
                                           ; SOURCE LINE # 1117
004C E4                CLR     A
004D FF                MOV     R7,A
004E 120000      E     LCALL   _ChangeVol
                                           ; SOURCE LINE # 1119
0051 7D66              MOV     R5,#066H
0053 7F8A              MOV     R7,#08AH
0055 120000      E     LCALL   _ReadI2C
0058 900000      E     MOV     DPTR,#?_Printf?BYTE+05H
005B EF                MOV     A,R7
005C F0                MOVX    @DPTR,A
005D 7BFF              MOV     R3,#0FFH
005F 7A00        R     MOV     R2,#HIGH ?SC_23
0061 7900        R     MOV     R1,#LOW ?SC_23
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 134 

                                           ; SOURCE LINE # 1120
0063 803F              SJMP    ?C0166
                                           ; SOURCE LINE # 1122
0065         ?C0081:
                                           ; SOURCE LINE # 1123
0065 120000      E     LCALL   COMPOSITE4Input
                                           ; SOURCE LINE # 1125
0068 C200        E     CLR     VGAAudio
                                           ; SOURCE LINE # 1126
006A D294              SETB    P1_4
                                           ; SOURCE LINE # 1127
                                           ; SOURCE LINE # 1128
                                           ; SOURCE LINE # 1129
006C 120000      R     LCALL   L?0172
                                           ; SOURCE LINE # 1130
006F 7BFF              MOV     R3,#0FFH
0071 7A00        R     MOV     R2,#HIGH ?SC_63
0073 7900        R     MOV     R1,#LOW ?SC_63
0075         ?C0164:
                                           ; SOURCE LINE # 1131
0075 802D              SJMP    ?C0166
                                           ; SOURCE LINE # 1159
0077         ?C0082:
                                           ; SOURCE LINE # 1173
0077 120000      E     LCALL   COMPOSITE3Input
                                           ; SOURCE LINE # 1177
007A C200        E     CLR     VGAAudio
                                           ; SOURCE LINE # 1181
007C C294              CLR     P1_4
                                           ; SOURCE LINE # 1182
                                           ; SOURCE LINE # 1193
                                           ; SOURCE LINE # 1195
007E 120000      R     LCALL   L?0172
                                           ; SOURCE LINE # 1199
0081 7BFF              MOV     R3,#0FFH
0083 7A00        R     MOV     R2,#HIGH ?SC_82
0085 7900        R     MOV     R1,#LOW ?SC_82
0087         ?C0165:
                                           ; SOURCE LINE # 1200
0087 801B              SJMP    ?C0166
                                           ; SOURCE LINE # 1216
0089         ?C0083:
                                           ; SOURCE LINE # 1217
0089 120000      E     LCALL   COMPOSITE2Input
                                           ; SOURCE LINE # 1220
008C C200        E     CLR     VGAAudio
                                           ; SOURCE LINE # 1221
008E E4                CLR     A
008F FF                MOV     R7,A
0090 120000      E     LCALL   _ChangeVol
                                           ; SOURCE LINE # 1222
0093 7F14              MOV     R7,#014H
0095 7E00              MOV     R6,#00H
0097 120000      E     LCALL   _Wait_ms
                                           ; SOURCE LINE # 1223
009A D294              SETB    P1_4
                                           ; SOURCE LINE # 1224
009C C295              CLR     P1_5
                                           ; SOURCE LINE # 1225
009E 7BFF              MOV     R3,#0FFH
00A0 7A00        R     MOV     R2,#HIGH ?SC_97
00A2 7900        R     MOV     R1,#LOW ?SC_97
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 135 

00A4         ?C0166:
00A4 900000      R     MOV     DPTR,#InputSelection
00A7 120000      R     LCALL   L?0179
00AA 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 1226
                                           ; SOURCE LINE # 1229
00AD         ?C0079:
                                           ; SOURCE LINE # 1230
00AD 120000      E     LCALL   CheckPanelImage
                                           ; SOURCE LINE # 1231
00B0 900000      R     MOV     DPTR,#InputSelection
00B3 E0                MOVX    A,@DPTR
00B4 FF                MOV     R7,A
00B5 120000      E     LCALL   _SaveInputSelectionEE
                                           ; SOURCE LINE # 1264
                                           ; SOURCE LINE # 1275
                                           ; SOURCE LINE # 1276
00B8 7F1E              MOV     R7,#01EH
00BA 120000      E     LCALL   _delay
                                           ; SOURCE LINE # 1277
00BD 120000      R     LCALL   CheckDecoderInput
                                           ; SOURCE LINE # 1278
                                           ; SOURCE LINE # 1288
                                           ; SOURCE LINE # 1296
00C0 120000      E     LCALL   CheckMirror
                                           ; SOURCE LINE # 1301
00C3 120000      E     LCALL   DisplayInput
                                           ; SOURCE LINE # 1304
00C6 900000      E     MOV     DPTR,#AV_MODE_DELAY
00C9 E0                MOVX    A,@DPTR
00CA 6401              XRL     A,#01H
00CC 700E              JNZ     ?C0084
                                           ; SOURCE LINE # 1305
                                           ; SOURCE LINE # 1306
00CE 53E8FB            ANL     P4,#0FBH
                                           ; SOURCE LINE # 1308
00D1 7BFF              MOV     R3,#0FFH
00D3 7A00        R     MOV     R2,#HIGH ?SC_114
00D5 7900        R     MOV     R1,#LOW ?SC_114
00D7 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 1310
00DA 8005              SJMP    ?C0085
00DC         ?C0084:
                                           ; SOURCE LINE # 1312
00DC E4                CLR     A
00DD FF                MOV     R7,A
00DE 120000      E     LCALL   _LCDPowerON
00E1         ?C0085:
                                           ; SOURCE LINE # 1314
00E1 7F64              MOV     R7,#064H
00E3 120000      E     LCALL   _delay
                                           ; SOURCE LINE # 1316
00E6 7BFF              MOV     R3,#0FFH
00E8 7DD0              MOV     R5,#0D0H
00EA 7F8A              MOV     R7,#08AH
00EC 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 1317
00EF 7BFF              MOV     R3,#0FFH
00F1 7DD1              MOV     R5,#0D1H
00F3 7F8A              MOV     R7,#08AH
00F5 020000      E     LJMP    _WriteI2C
                                           ; SOURCE LINE # 1318
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 136 

00F8         L?0172:
00F8 D295              SETB    P1_5
00FA 7F14              MOV     R7,#014H
00FC 7E00              MOV     R6,#00H
00FE 120000      E     LCALL   _Wait_ms
0101 E4                CLR     A
0102 FF                MOV     R7,A
0103 120000      E     LCALL   _ChangeVol
0106 22                RET     
0107         L?0175:
0107 7DFF              MOV     R5,#0FFH
0109 7F8A              MOV     R7,#08AH
010B 120000      E     LCALL   _WriteI2C
010E 22                RET     
010F         L?0176:
010F 7F14              MOV     R7,#014H
0111 7E00              MOV     R6,#00H
0113 120000      E     LCALL   _Wait_ms
0116 22                RET     
             ; FUNCTION _ChangeInput (END)

             ; FUNCTION PowerOff (BEGIN)
                                           ; SOURCE LINE # 1320
                                           ; SOURCE LINE # 1321
                                           ; SOURCE LINE # 1325
0000 C200        E     CLR     ?AudioMute?BIT
0002 120000      E     LCALL   AudioMute
                                           ; SOURCE LINE # 1328
0005 43E804            ORL     P4,#04H
                                           ; SOURCE LINE # 1333
0008 E4                CLR     A
0009 FF                MOV     R7,A
000A 020000      E     LJMP    _PowerLED
             ; FUNCTION PowerOff (END)

             ; FUNCTION SetOSDLastKeyInTime (BEGIN)
                                           ; SOURCE LINE # 1336
                                           ; SOURCE LINE # 1337
                                           ; SOURCE LINE # 1338
0000 120000      E     LCALL   GetTime_ms
0003 900000      R     MOV     DPTR,#OSDLastKeyInTime
0006 EE                MOV     A,R6
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1339
000B 22                RET     
             ; FUNCTION SetOSDLastKeyInTime (END)

             ; FUNCTION GetOSDLastKeyInTime (BEGIN)
                                           ; SOURCE LINE # 1341
                                           ; SOURCE LINE # 1342
                                           ; SOURCE LINE # 1343
0000 900000      R     MOV     DPTR,#OSDLastKeyInTime
0003 E0                MOVX    A,@DPTR
0004 FE                MOV     R6,A
0005 A3                INC     DPTR
0006 E0                MOVX    A,@DPTR
0007 FF                MOV     R7,A
                                           ; SOURCE LINE # 1344
0008 22                RET     
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 137 

             ; FUNCTION GetOSDLastKeyInTime (END)

             ; FUNCTION _AdjustAutoDayNight (BEGIN)
                                           ; SOURCE LINE # 1361
;---- Variable 'val' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1362
                                           ; SOURCE LINE # 1365
0000 C3                CLR     C
0001 74FF              MOV     A,#0FFH
0003 9F                SUBB    A,R7
                                           ; SOURCE LINE # 1368
0004 FD                MOV     R5,A
0005 7C00              MOV     R4,#00H
0007 C3                CLR     C
0008 7480              MOV     A,#080H
000A 9480              SUBB    A,#080H
000C 4010              JC      ?C0090
000E ED                MOV     A,R5
000F 9464              SUBB    A,#064H
0011 7480              MOV     A,#080H
0013 9480              SUBB    A,#080H
0015 5007              JNC     ?C0090
                                           ; SOURCE LINE # 1369
0017 E4                CLR     A
0018 900000      R     MOV     DPTR,#PWMLevelTemp
001B F0                MOVX    @DPTR,A
001C 8073              SJMP    ?C0091
001E         ?C0090:
                                           ; SOURCE LINE # 1370
001E C3                CLR     C
001F ED                MOV     A,R5
0020 9464              SUBB    A,#064H
0022 EC                MOV     A,R4
0023 6480              XRL     A,#080H
0025 9480              SUBB    A,#080H
0027 4012              JC      ?C0092
0029 ED                MOV     A,R5
002A 948C              SUBB    A,#08CH
002C EC                MOV     A,R4
002D 6480              XRL     A,#080H
002F 9480              SUBB    A,#080H
0031 5008              JNC     ?C0092
                                           ; SOURCE LINE # 1371
0033 900000      R     MOV     DPTR,#PWMLevelTemp
0036 7414              MOV     A,#014H
0038 F0                MOVX    @DPTR,A
0039 8056              SJMP    ?C0091
003B         ?C0092:
                                           ; SOURCE LINE # 1372
003B C3                CLR     C
003C ED                MOV     A,R5
003D 948C              SUBB    A,#08CH
003F EC                MOV     A,R4
0040 6480              XRL     A,#080H
0042 9480              SUBB    A,#080H
0044 4012              JC      ?C0094
0046 ED                MOV     A,R5
0047 94B4              SUBB    A,#0B4H
0049 EC                MOV     A,R4
004A 6480              XRL     A,#080H
004C 9480              SUBB    A,#080H
004E 5008              JNC     ?C0094
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 138 

                                           ; SOURCE LINE # 1373
0050 900000      R     MOV     DPTR,#PWMLevelTemp
0053 7428              MOV     A,#028H
0055 F0                MOVX    @DPTR,A
0056 8039              SJMP    ?C0091
0058         ?C0094:
                                           ; SOURCE LINE # 1374
0058 C3                CLR     C
0059 ED                MOV     A,R5
005A 94B4              SUBB    A,#0B4H
005C EC                MOV     A,R4
005D 6480              XRL     A,#080H
005F 9480              SUBB    A,#080H
0061 4012              JC      ?C0096
0063 ED                MOV     A,R5
0064 94DC              SUBB    A,#0DCH
0066 EC                MOV     A,R4
0067 6480              XRL     A,#080H
0069 9480              SUBB    A,#080H
006B 5008              JNC     ?C0096
                                           ; SOURCE LINE # 1375
006D 900000      R     MOV     DPTR,#PWMLevelTemp
0070 743C              MOV     A,#03CH
0072 F0                MOVX    @DPTR,A
0073 801C              SJMP    ?C0091
0075         ?C0096:
                                           ; SOURCE LINE # 1376
0075 C3                CLR     C
0076 ED                MOV     A,R5
0077 94DC              SUBB    A,#0DCH
0079 EC                MOV     A,R4
007A 6480              XRL     A,#080H
007C 9480              SUBB    A,#080H
007E 4011              JC      ?C0091
0080 D3                SETB    C
0081 ED                MOV     A,R5
0082 94FF              SUBB    A,#0FFH
0084 EC                MOV     A,R4
0085 6480              XRL     A,#080H
0087 9480              SUBB    A,#080H
0089 5006              JNC     ?C0091
                                           ; SOURCE LINE # 1377
                                           ; SOURCE LINE # 1379
008B 900000      R     MOV     DPTR,#PWMLevelTemp
008E 744B              MOV     A,#04BH
0090 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1383
0091         ?C0091:
                                           ; SOURCE LINE # 1407
0091 900000      E     MOV     DPTR,#DayNightLevel
0094 E0                MOVX    A,@DPTR
0095 7030              JNZ     ?C0099
                                           ; SOURCE LINE # 1411
                                           ; SOURCE LINE # 1412
0097 900000      R     MOV     DPTR,#AutoDayNightDelay
009A E0                MOVX    A,@DPTR
009B C3                CLR     C
009C 940F              SUBB    A,#0FH
009E 7480              MOV     A,#080H
00A0 9480              SUBB    A,#080H
00A2 5005              JNC     ?C0100
                                           ; SOURCE LINE # 1413
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 139 

00A4 E0                MOVX    A,@DPTR
00A5 04                INC     A
00A6 F0                MOVX    @DPTR,A
00A7 8024              SJMP    ?C0105
00A9         ?C0100:
                                           ; SOURCE LINE # 1415
                                           ; SOURCE LINE # 1416
00A9 900000      R     MOV     DPTR,#PWMLevelTemp
00AC E0                MOVX    A,@DPTR
00AD FF                MOV     R7,A
00AE E500        R     MOV     A,PWMLevel
00B0 D3                SETB    C
00B1 9F                SUBB    A,R7
00B2 4004              JC      ?C0102
                                           ; SOURCE LINE # 1417
00B4 1500        R     DEC     PWMLevel
00B6 8008              SJMP    ?C0103
00B8         ?C0102:
                                           ; SOURCE LINE # 1418
00B8 E500        R     MOV     A,PWMLevel
00BA C3                CLR     C
00BB 9F                SUBB    A,R7
00BC 5002              JNC     ?C0103
                                           ; SOURCE LINE # 1419
00BE 0500        R     INC     PWMLevel
00C0         ?C0103:
                                           ; SOURCE LINE # 1421
00C0 E4                CLR     A
00C1 900000      R     MOV     DPTR,#AutoDayNightDelay
00C4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1422
                                           ; SOURCE LINE # 1423
00C5 8006              SJMP    ?C0105
00C7         ?C0099:
                                           ; SOURCE LINE # 1425
                                           ; SOURCE LINE # 1426
00C7 900000      R     MOV     DPTR,#PWMLevelTemp
00CA E0                MOVX    A,@DPTR
00CB F500        R     MOV     PWMLevel,A
                                           ; SOURCE LINE # 1428
00CD         ?C0105:
                                           ; SOURCE LINE # 1431
00CD 7DFF              MOV     R5,#0FFH
00CF 7F8A              MOV     R7,#08AH
00D1 120000      E     LCALL   _ReadI2C
00D4 900000      R     MOV     DPTR,#page
00D7 EF                MOV     A,R7
00D8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1432
00D9 E4                CLR     A
00DA 7DFF              MOV     R5,#0FFH
00DC 120000      R     LCALL   L?0183
                                           ; SOURCE LINE # 1433
00DF 7DBE              MOV     R5,#0BEH
00E1 7F8A              MOV     R7,#08AH
00E3 120000      E     LCALL   _ReadI2C
00E6 EF                MOV     A,R7
00E7 54CF              ANL     A,#0CFH
00E9 4410              ORL     A,#010H
00EB 7DBE              MOV     R5,#0BEH
00ED 120000      R     LCALL   L?0183
                                           ; SOURCE LINE # 1435
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 140 

00F0 7DC4              MOV     R5,#0C4H
00F2 7F8A              MOV     R7,#08AH
00F4 120000      E     LCALL   _ReadI2C
00F7 EF                MOV     A,R7
00F8 5480              ANL     A,#080H
00FA 4500        R     ORL     A,PWMLevel
00FC FB                MOV     R3,A
00FD 7DC4              MOV     R5,#0C4H
00FF 7F8A              MOV     R7,#08AH
0101 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 1436
0104 900000      R     MOV     DPTR,#page
0107 E0                MOVX    A,@DPTR
0108 FB                MOV     R3,A
0109 7DFF              MOV     R5,#0FFH
010B 7F8A              MOV     R7,#08AH
010D 020000      E     LJMP    _WriteI2C
                                           ; SOURCE LINE # 1437
0110         L?0183:
0110 FB                MOV     R3,A
0111 7F8A              MOV     R7,#08AH
0113 120000      E     LCALL   _WriteI2C
0116 22                RET     
             ; FUNCTION _AdjustAutoDayNight (END)

             ; FUNCTION Hs_InitVars (BEGIN)
                                           ; SOURCE LINE # 1439
                                           ; SOURCE LINE # 1440
                                           ; SOURCE LINE # 1444
0000 E4                CLR     A
0001 900000      E     MOV     DPTR,#SEQFlag
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1445
0005 900000      R     MOV     DPTR,#SEQTime
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1446
0009 900000      E     MOV     DPTR,#TriggerMode
000C 7408              MOV     A,#08H
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1460
000F 22                RET     
             ; FUNCTION Hs_InitVars (END)

             ; FUNCTION LoadEEPROM (BEGIN)
                                           ; SOURCE LINE # 1462
                                           ; SOURCE LINE # 1463
                                           ; SOURCE LINE # 1465
0000 7FAB              MOV     R7,#0ABH
0002 7E00              MOV     R6,#00H
0004 120000      E     LCALL   _ReadEEP
0007 900000      R     MOV     DPTR,#PowerFlag
000A EF                MOV     A,R7
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1467
000C 7FB0              MOV     R7,#0B0H
000E 7E00              MOV     R6,#00H
0010 120000      E     LCALL   _ReadEEP
0013 900000      R     MOV     DPTR,#SelectModeType
0016 EF                MOV     A,R7
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1469
0018 7FAC              MOV     R7,#0ACH
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 141 

001A 7E00              MOV     R6,#00H
001C 120000      E     LCALL   _ReadEEP
001F 900000      E     MOV     DPTR,#OSD_LOCKF
0022 EF                MOV     A,R7
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1470
0024 7FA3              MOV     R7,#0A3H
0026 7E00              MOV     R6,#00H
0028 120000      E     LCALL   _ReadEEP
002B 900000      E     MOV     DPTR,#Disp_Input
002E EF                MOV     A,R7
002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1472
0030 7FAA              MOV     R7,#0AAH
0032 7E00              MOV     R6,#00H
0034 120000      E     LCALL   _ReadEEP
0037 900000      E     MOV     DPTR,#TimeStep
003A EF                MOV     A,R7
003B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1476
003C E4                CLR     A
003D 900000      R     MOV     DPTR,#Priority
0040 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1478
0041 7FA0              MOV     R7,#0A0H
0043 FE                MOV     R6,A
0044 120000      E     LCALL   _ReadEEP
0047 900000      E     MOV     DPTR,#DayNightLevel
004A EF                MOV     A,R7
004B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1479
004C 7FB8              MOV     R7,#0B8H
004E 7E00              MOV     R6,#00H
0050 120000      E     LCALL   _ReadEEP
0053 900000      R     MOV     DPTR,#PelcoChoiceFLAG
0056 EF                MOV     A,R7
0057 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1480
0058 7FB7              MOV     R7,#0B7H
005A 7E00              MOV     R6,#00H
005C 120000      E     LCALL   _ReadEEP
005F 900000      R     MOV     DPTR,#CAMNumber
0062 EF                MOV     A,R7
0063 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1481
0064 7FB9              MOV     R7,#0B9H
0066 7E00              MOV     R6,#00H
0068 120000      E     LCALL   _ReadEEP
006B 900000      R     MOV     DPTR,#Baud_rate
006E EF                MOV     A,R7
006F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1482
0070 7FBF              MOV     R7,#0BFH
0072 7E00              MOV     R6,#00H
0074 120000      E     LCALL   _ReadEEP
0077 EF                MOV     A,R7
0078 24FF              ADD     A,#0FFH
007A 9200        R     MOV     SDCardCoverDetect,C
                                           ; SOURCE LINE # 1483
007C 7FC5              MOV     R7,#0C5H
007E 7E00              MOV     R6,#00H
0080 120000      E     LCALL   _ReadEEP
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 142 

0083 900000      R     MOV     DPTR,#ReverseModeFlag
0086 EF                MOV     A,R7
0087 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1485
0088 7FC6              MOV     R7,#0C6H
008A 7E00              MOV     R6,#00H
008C 120000      E     LCALL   _ReadEEP
008F EF                MOV     A,R7
0090 24FF              ADD     A,#0FFH
0092 9200        R     MOV     JUMPAVFlag,C
                                           ; SOURCE LINE # 1486
0094 E4                CLR     A
0095 900000      E     MOV     DPTR,#NowModeState
0098 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1511
0099 7FA5              MOV     R7,#0A5H
009B FE                MOV     R6,A
009C 120000      E     LCALL   _ReadEEP
;---- Variable 'val' assigned to Register 'R5' ----
009F AD07              MOV     R5,AR7
                                           ; SOURCE LINE # 1512
00A1 ED                MOV     A,R5
00A2 900000      E     MOV     DPTR,#Attr_A
00A5 7006              JNZ     ?C0108
                                           ; SOURCE LINE # 1513
00A7 E0                MOVX    A,@DPTR
00A8 4401              ORL     A,#01H
00AA F0                MOVX    @DPTR,A
00AB 8004              SJMP    ?C0109
00AD         ?C0108:
                                           ; SOURCE LINE # 1515
00AD E0                MOVX    A,@DPTR
00AE 540E              ANL     A,#0EH
00B0 F0                MOVX    @DPTR,A
00B1         ?C0109:
                                           ; SOURCE LINE # 1517
00B1 7FA6              MOV     R7,#0A6H
00B3 120000      R     LCALL   L?0177
                                           ; SOURCE LINE # 1518
00B6 ED                MOV     A,R5
00B7 900000      E     MOV     DPTR,#Attr_B
00BA 7006              JNZ     ?C0110
                                           ; SOURCE LINE # 1519
00BC E0                MOVX    A,@DPTR
00BD 4401              ORL     A,#01H
00BF F0                MOVX    @DPTR,A
00C0 8004              SJMP    ?C0111
00C2         ?C0110:
                                           ; SOURCE LINE # 1521
00C2 E0                MOVX    A,@DPTR
00C3 540E              ANL     A,#0EH
00C5 F0                MOVX    @DPTR,A
00C6         ?C0111:
                                           ; SOURCE LINE # 1523
00C6 7FA7              MOV     R7,#0A7H
00C8 120000      R     LCALL   L?0177
                                           ; SOURCE LINE # 1524
00CB ED                MOV     A,R5
00CC 900000      E     MOV     DPTR,#Attr_C
00CF 7006              JNZ     ?C0112
                                           ; SOURCE LINE # 1525
00D1 E0                MOVX    A,@DPTR
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 143 

00D2 4401              ORL     A,#01H
00D4 F0                MOVX    @DPTR,A
00D5 8004              SJMP    ?C0113
00D7         ?C0112:
                                           ; SOURCE LINE # 1527
00D7 E0                MOVX    A,@DPTR
00D8 540E              ANL     A,#0EH
00DA F0                MOVX    @DPTR,A
00DB         ?C0113:
                                           ; SOURCE LINE # 1529
00DB 7FA8              MOV     R7,#0A8H
00DD 7E00              MOV     R6,#00H
00DF 120000      E     LCALL   _ReadEEP
00E2 AD07              MOV     R5,AR7
                                           ; SOURCE LINE # 1530
00E4 EF                MOV     A,R7
00E5 900000      E     MOV     DPTR,#Attr_R
00E8 7006              JNZ     ?C0114
                                           ; SOURCE LINE # 1531
00EA E0                MOVX    A,@DPTR
00EB 4401              ORL     A,#01H
00ED F0                MOVX    @DPTR,A
00EE 8004              SJMP    ?C0115
00F0         ?C0114:
                                           ; SOURCE LINE # 1533
00F0 E0                MOVX    A,@DPTR
00F1 540E              ANL     A,#0EH
00F3 F0                MOVX    @DPTR,A
00F4         ?C0115:
                                           ; SOURCE LINE # 1535
00F4 120000      E     LCALL   GetAudioVolEE
00F7 900000      E     MOV     DPTR,#AudioVol
00FA EF                MOV     A,R7
00FB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1536
00FC 120000      E     LCALL   GetPCAudioVolEE
00FF 900000      E     MOV     DPTR,#PCAudioVol
0102 EF                MOV     A,R7
0103 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1537
0104 7FB2              MOV     R7,#0B2H
0106 7E00              MOV     R6,#00H
0108 120000      E     LCALL   _ReadEEP
010B 900000      R     MOV     DPTR,#DVR_AudioRecord
010E EF                MOV     A,R7
010F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1540
0110 22                RET     
0111         L?0177:
0111 7E00              MOV     R6,#00H
0113 120000      E     LCALL   _ReadEEP
0116 AD07              MOV     R5,AR7
0118 22                RET     
             ; FUNCTION LoadEEPROM (END)

             ; FUNCTION main (BEGIN)
                                           ; SOURCE LINE # 1668
                                           ; SOURCE LINE # 1669
                                           ; SOURCE LINE # 1675
0000 C200        E     CLR     ?AudioMute?BIT
0002 120000      E     LCALL   AudioMute
                                           ; SOURCE LINE # 1689
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 144 

0005 7F0A              MOV     R7,#0AH
0007 7E00              MOV     R6,#00H
0009 120000      E     LCALL   _Wait_ms
                                           ; SOURCE LINE # 1690
000C C2B4              CLR     P3_4
                                           ; SOURCE LINE # 1692
000E 120000      E     LCALL   InitCPU
                                           ; SOURCE LINE # 1693
0011 7F01              MOV     R7,#01H
0013 120000      E     LCALL   _PowerLED
                                           ; SOURCE LINE # 1695
0016 120000      E     LCALL   InitVars
                                           ; SOURCE LINE # 1696
0019 120000      R     LCALL   Hs_InitVars
                                           ; SOURCE LINE # 1697
001C 120000      E     LCALL   InitTechwell
                                           ; SOURCE LINE # 1700
001F 7F8A              MOV     R7,#08AH
0021 120000      E     LCALL   _SetMonAddress
                                           ; SOURCE LINE # 1706
0024 120000      E     LCALL   main_init
                                           ; SOURCE LINE # 1708
0027 7F0A              MOV     R7,#0AH
0029 7E00              MOV     R6,#00H
002B 120000      E     LCALL   _Wait_ms
                                           ; SOURCE LINE # 1711
002E 7BC6              MOV     R3,#0C6H
0030 7D02              MOV     R5,#02H
0032 7F8A              MOV     R7,#08AH
0034 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 1716
0037 120000      R     LCALL   LoadEEPROM
                                           ; SOURCE LINE # 1717
003A 900000      E     MOV     DPTR,#NowModeState
003D E0                MOVX    A,@DPTR
003E 900000      E     MOV     DPTR,#TR_JUMP_HOLD
0041 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1732
0042 7FA9              MOV     R7,#0A9H
0044 7E00              MOV     R6,#00H
0046 120000      E     LCALL   _ReadEEP
0049 120000      E     LCALL   _CAMOutDSel
                                           ; SOURCE LINE # 1734
004C E4                CLR     A
004D 900000      E     MOV     DPTR,#TriggerFlag
0050 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1745
0051 7BFF              MOV     R3,#0FFH
0053 7A00        R     MOV     R2,#HIGH ?SC_133
0055 7900        R     MOV     R1,#LOW ?SC_133
0057 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 1753
005A 7F03              MOV     R7,#03H
005C 120000      E     LCALL   _LCDPowerON
                                           ; SOURCE LINE # 1760
005F 7B09              MOV     R3,#09H
0061 120000      R     LCALL   L?0178
                                           ; SOURCE LINE # 1761
0064 7F04              MOV     R7,#04H
0066 120000      E     LCALL   _delay
                                           ; SOURCE LINE # 1762
0069 7B0B              MOV     R3,#0BH
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 145 

006B 120000      R     LCALL   L?0178
                                           ; SOURCE LINE # 1763
006E 7F0A              MOV     R7,#0AH
0070 120000      E     LCALL   _delay
                                           ; SOURCE LINE # 1765
0073 7B0F              MOV     R3,#0FH
0075 7DD5              MOV     R5,#0D5H
0077 7F8A              MOV     R7,#08AH
0079 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 1772
007C 900000      R     MOV     DPTR,#PowerFlag
007F E0                MOVX    A,@DPTR
0080 700C              JNZ     ?C0118
                                           ; SOURCE LINE # 1773
                                           ; SOURCE LINE # 1775
0082 120000      E     LCALL   SetNowMode
                                           ; SOURCE LINE # 1777
0085 7BFF              MOV     R3,#0FFH
0087 7A00        R     MOV     R2,#HIGH ?SC_163
0089 7900        R     MOV     R1,#LOW ?SC_163
008B 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 1779
008E         ?C0118:
                                           ; SOURCE LINE # 1786
                                           ; SOURCE LINE # 1787
008E 900000      R     MOV     DPTR,#PowerFlag
0091 E0                MOVX    A,@DPTR
0092 6003              JZ      ?C0120
                                           ; SOURCE LINE # 1788
0094 120000      R     LCALL   main_loop
0097         ?C0120:
                                           ; SOURCE LINE # 1790
0097 120000      R     LCALL   WaitPowerOn
                                           ; SOURCE LINE # 1796
009A 80F2              SJMP    ?C0118
                                           ; SOURCE LINE # 1797
009C         L?0178:
009C 7DD5              MOV     R5,#0D5H
009E 7F8A              MOV     R7,#08AH
00A0 120000      E     LCALL   _WriteI2C
00A3 22                RET     
             ; FUNCTION main (END)

             ; FUNCTION main_loop (BEGIN)
                                           ; SOURCE LINE # 1800
                                           ; SOURCE LINE # 1801
                                           ; SOURCE LINE # 1805
0000 7BFF              MOV     R3,#0FFH
0002 7A00        R     MOV     R2,#HIGH ?SC_184
0004 7900        R     MOV     R1,#LOW ?SC_184
0006 120000      E     LCALL   _Puts
                                           ; SOURCE LINE # 1810
0009         ?C0124:
                                           ; SOURCE LINE # 1821
0009 120000      E     LCALL   RS_ready
000C EF                MOV     A,R7
000D 6005              JZ      ?C0125
                                           ; SOURCE LINE # 1822
                                           ; SOURCE LINE # 1823
000F 120000      E     LCALL   Monitor
                                           ; SOURCE LINE # 1824
0012 80F5              SJMP    ?C0124
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 146 

0014         ?C0125:
                                           ; SOURCE LINE # 1888
                                           ; SOURCE LINE # 1889
0014 120000      E     LCALL   CheckTrigger
0017 900000      R     MOV     DPTR,#val
001A EF                MOV     A,R7
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1890
001C 120000      E     LCALL   _TriggerHandler
                                           ; SOURCE LINE # 1891
                                           ; SOURCE LINE # 1894
001F 900000      E     MOV     DPTR,#TriggerFlag
0022 E0                MOVX    A,@DPTR
0023 701B              JNZ     ?C0126
                                           ; SOURCE LINE # 1895
                                           ; SOURCE LINE # 1896
0025 900000      E     MOV     DPTR,#SEQFlag
0028 E0                MOVX    A,@DPTR
0029 6015              JZ      ?C0126
                                           ; SOURCE LINE # 1897
                                           ; SOURCE LINE # 1898
002B 900000      E     MOV     DPTR,#TimeStep
002E E0                MOVX    A,@DPTR
002F FF                MOV     R7,A
0030 900000      R     MOV     DPTR,#SEQTime
0033 E0                MOVX    A,@DPTR
0034 C3                CLR     C
0035 9F                SUBB    A,R7
0036 4008              JC      ?C0126
                                           ; SOURCE LINE # 1899
                                           ; SOURCE LINE # 1900
0038 120000      E     LCALL   SEQMode
                                           ; SOURCE LINE # 1901
003B E4                CLR     A
003C 900000      R     MOV     DPTR,#SEQTime
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1902
                                           ; SOURCE LINE # 1903
                                           ; SOURCE LINE # 1904
0040         ?C0126:
                                           ; SOURCE LINE # 1909
0040 900000      E     MOV     DPTR,#DayNightLevel
0043 E0                MOVX    A,@DPTR
0044 700E              JNZ     ?C0129
                                           ; SOURCE LINE # 1910
                                           ; SOURCE LINE # 1911
0046 7DC9              MOV     R5,#0C9H
0048 7F8A              MOV     R7,#08AH
004A 120000      E     LCALL   _ReadI2C
004D 900000      R     MOV     DPTR,#val
0050 EF                MOV     A,R7
0051 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1912
                                           ; SOURCE LINE # 1913
0052 8002              SJMP    ?C0167
0054         ?C0129:
                                           ; SOURCE LINE # 1915
                                           ; SOURCE LINE # 1916
0054 7FFF              MOV     R7,#0FFH
0056         ?C0167:
0056 120000      R     LCALL   _AdjustAutoDayNight
                                           ; SOURCE LINE # 1917
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 147 

0059         ?C0130:
                                           ; SOURCE LINE # 1942
0059 120000      E     LCALL   CheckKeyIn
005C EF                MOV     A,R7
005D 7003              JNZ     $ + 5H
005F 020000      R     LJMP    ?C0144
                                           ; SOURCE LINE # 1946
0062 120000      E     LCALL   GetDisplayedOSD
0065 EF                MOV     A,R7
0066 5406              ANL     A,#06H
0068 7050              JNZ     ?C0132
                                           ; SOURCE LINE # 1947
                                           ; SOURCE LINE # 1948
006A 120000      E     LCALL   GetDisplayedOSD
006D EF                MOV     A,R7
006E 20E42E            JB      ACC.4,?C0133
                                           ; SOURCE LINE # 1949
                                           ; SOURCE LINE # 1950
0071 7F10              MOV     R7,#010H
0073 120000      E     LCALL   _SetDisplayedOSD
                                           ; SOURCE LINE # 1951
0076 120000      E     LCALL   DisplayInput
                                           ; SOURCE LINE # 1952
0079 900000      R     MOV     DPTR,#displayhold_flag
007C 7403              MOV     A,#03H
007E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1954
007F 7FA4              MOV     R7,#0A4H
0081 7E00              MOV     R6,#00H
0083 120000      E     LCALL   _ReadEEP
0086 EF                MOV     A,R7
0087 702E              JNZ     ?C0135
0089 7FA2              MOV     R7,#0A2H
008B FE                MOV     R6,A
008C 120000      E     LCALL   _ReadEEP
008F EF                MOV     A,R7
0090 7025              JNZ     ?C0135
0092 900000      E     MOV     DPTR,#TriggerMode
0095 E0                MOVX    A,@DPTR
0096 6401              XRL     A,#01H
0098 701D              JNZ     ?C0135
                                           ; SOURCE LINE # 1955
009A 120000      E     LCALL   DisplayGaugeOSD
                                           ; SOURCE LINE # 1956
009D 8018              SJMP    ?C0135
009F         ?C0133:
                                           ; SOURCE LINE # 1957
009F 900000      R     MOV     DPTR,#displayhold_flag
00A2 E0                MOVX    A,@DPTR
00A3 6401              XRL     A,#01H
00A5 7010              JNZ     ?C0135
00A7 900000      E     MOV     DPTR,#Disp_Input
00AA E0                MOVX    A,@DPTR
00AB 6401              XRL     A,#01H
00AD 7008              JNZ     ?C0135
                                           ; SOURCE LINE # 1958
                                           ; SOURCE LINE # 1959
00AF 120000      E     LCALL   ClearInput2s
                                           ; SOURCE LINE # 1960
00B2 E4                CLR     A
00B3 900000      R     MOV     DPTR,#displayhold_flag
00B6 F0                MOVX    @DPTR,A
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 148 

                                           ; SOURCE LINE # 1961
00B7         ?C0135:
                                           ; SOURCE LINE # 1963
00B7 120000      E     LCALL   VlossHandler
                                           ; SOURCE LINE # 1964
00BA         ?C0132:
                                           ; SOURCE LINE # 2040
00BA 120000      R     LCALL   GetInputSelection
00BD EF                MOV     A,R7
00BE 14                DEC     A
00BF 24FD              ADD     A,#0FDH
00C1 5002              JNC     ?C0140
00C3 800A              SJMP    ?C0137
                                           ; SOURCE LINE # 2042
                                           ; SOURCE LINE # 2043
                                           ; SOURCE LINE # 2044
00C5         ?C0140:
                                           ; SOURCE LINE # 2047
00C5 120000      E     LCALL   GetDisplayedOSD
00C8 EF                MOV     A,R7
00C9 20E103            JB      ACC.1,?C0137
                                           ; SOURCE LINE # 2048
                                           ; SOURCE LINE # 2051
00CC 120000      R     LCALL   CheckDecoderInput
                                           ; SOURCE LINE # 2060
                                           ; SOURCE LINE # 2062
                                           ; SOURCE LINE # 2072
00CF         ?C0137:
                                           ; SOURCE LINE # 2075
00CF 900000      E     MOV     DPTR,#Backlight_TO
00D2 E0                MOVX    A,@DPTR
00D3 6401              XRL     A,#01H
00D5 7004              JNZ     ?C0142
                                           ; SOURCE LINE # 2076
                                           ; SOURCE LINE # 2077
00D7 53E8FB            ANL     P4,#0FBH
                                           ; SOURCE LINE # 2078
00DA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2079
00DB         ?C0142:
                                           ; SOURCE LINE # 2097
00DB 7DB2              MOV     R5,#0B2H
00DD 7F8A              MOV     R7,#08AH
00DF 120000      E     LCALL   _ReadI2C
00E2 EF                MOV     A,R7
00E3 6003              JZ      $ + 5H
00E5 020000      R     LJMP    ?C0124
                                           ; SOURCE LINE # 2098
                                           ; SOURCE LINE # 2099
00E8 7BB0              MOV     R3,#0B0H
00EA 7DFD              MOV     R5,#0FDH
00EC 7F8A              MOV     R7,#08AH
00EE 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 2100
00F1 E4                CLR     A
00F2 FF                MOV     R7,A
00F3 120000      E     LCALL   _PowerLED
                                           ; SOURCE LINE # 2101
00F6 7FF4              MOV     R7,#0F4H
00F8 7E01              MOV     R6,#01H
00FA 120000      E     LCALL   _Wait_ms
                                           ; SOURCE LINE # 2102
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 149 

00FD 7F01              MOV     R7,#01H
00FF 120000      E     LCALL   _PowerLED
                                           ; SOURCE LINE # 2103
0102 7B30              MOV     R3,#030H
0104 7DFD              MOV     R5,#0FDH
0106 7F8A              MOV     R7,#08AH
0108 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 2104
                                           ; SOURCE LINE # 2116
010B 020000      R     LJMP    ?C0124
                                           ; SOURCE LINE # 2117
010E         ?C0144:
010E 22                RET     
             ; FUNCTION main_loop (END)

             ; FUNCTION WaitPowerOn (BEGIN)
                                           ; SOURCE LINE # 2119
                                           ; SOURCE LINE # 2120
                                           ; SOURCE LINE # 2122
0000 E4                CLR     A
0001 900000      R     MOV     DPTR,#VGATrigger
0004 F0                MOVX    @DPTR,A
0005         ?C0145:
                                           ; SOURCE LINE # 2125
                                           ; SOURCE LINE # 2126
                                           ; SOURCE LINE # 2158
0005 120000      E     LCALL   CheckTrigger
0008 900000      R     MOV     DPTR,#val
000B EF                MOV     A,R7
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2164
000D 600E              JZ      ?C0147
                                           ; SOURCE LINE # 2165
                                           ; SOURCE LINE # 2166
000F E0                MOVX    A,@DPTR
0010 FF                MOV     R7,A
0011 120000      E     LCALL   _TriggerHandler
                                           ; SOURCE LINE # 2176
0014 7F01              MOV     R7,#01H
0016 120000      E     LCALL   _LCDPowerON
                                           ; SOURCE LINE # 2177
0019 D200        E     SETB    ?AudioMute?BIT
                                           ; SOURCE LINE # 2180
001B 8013              SJMP    ?C0168
001D         ?C0147:
                                           ; SOURCE LINE # 2182
                                           ; SOURCE LINE # 2183
001D 900000      R     MOV     DPTR,#val
0020 E0                MOVX    A,@DPTR
0021 FF                MOV     R7,A
0022 120000      E     LCALL   _TriggerHandler
                                           ; SOURCE LINE # 2185
0025 900000      E     MOV     DPTR,#TriggerFlag
0028 E0                MOVX    A,@DPTR
0029 7008              JNZ     ?C0148
                                           ; SOURCE LINE # 2186
                                           ; SOURCE LINE # 2187
002B 120000      R     LCALL   PowerOff
                                           ; SOURCE LINE # 2188
002E C200        E     CLR     ?AudioMute?BIT
0030         ?C0168:
0030 120000      E     LCALL   AudioMute
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 150 

                                           ; SOURCE LINE # 2189
                                           ; SOURCE LINE # 2191
0033         ?C0148:
                                           ; SOURCE LINE # 2198
0033 E4                CLR     A
0034 FF                MOV     R7,A
0035 120000      E     LCALL   _GetKey
;---- Variable 'ikey' assigned to Register 'R7' ----
0038 EF                MOV     A,R7
0039 6019              JZ      ?C0150
                                           ; SOURCE LINE # 2200
003B 6404              XRL     A,#04H
003D 7015              JNZ     ?C0150
003F 120000      E     LCALL   CheckTrigger
0042 EF                MOV     A,R7
0043 700F              JNZ     ?C0150
                                           ; SOURCE LINE # 2201
                                           ; SOURCE LINE # 2202
0045 900000      R     MOV     DPTR,#PowerFlag
0048 04                INC     A
0049 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2203
004A FD                MOV     R5,A
004B 7FAB              MOV     R7,#0ABH
004D 7E00              MOV     R6,#00H
004F 120000      E     LCALL   _WriteEEP
                                           ; SOURCE LINE # 2204
0052 8005              SJMP    ?C0146
                                           ; SOURCE LINE # 2205
                                           ; SOURCE LINE # 2207
0054         ?C0150:
                                           ; SOURCE LINE # 2256
0054 120000      E     LCALL   VlossHandler
                                           ; SOURCE LINE # 2258
0057 80AC              SJMP    ?C0145
0059         ?C0146:
                                           ; SOURCE LINE # 2269
0059 120000      E     LCALL   DisplayInput
                                           ; SOURCE LINE # 2270
005C 120000      E     LCALL   SetNowMode
                                           ; SOURCE LINE # 2272
005F 7FA3              MOV     R7,#0A3H
0061 7E00              MOV     R6,#00H
0063 120000      E     LCALL   _ReadEEP
0066 EF                MOV     A,R7
0067 6401              XRL     A,#01H
0069 7006              JNZ     ?C0152
                                           ; SOURCE LINE # 2273
006B 900000      R     MOV     DPTR,#displayhold_flag
006E 7403              MOV     A,#03H
0070 F0                MOVX    @DPTR,A
0071         ?C0152:
                                           ; SOURCE LINE # 2276
0071 C200        R     CLR     IsDrawNoVideoSignal
                                           ; SOURCE LINE # 2280
0073 7F01              MOV     R7,#01H
0075 120000      E     LCALL   _LCDPowerON
                                           ; SOURCE LINE # 2283
0078 D200        E     SETB    ?AudioMute?BIT
007A 020000      E     LJMP    AudioMute
             ; FUNCTION WaitPowerOn (END)

C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 151 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


SetDATETIME. . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
COMPOSITE3Input. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CheckBuf . . . . . . . . . . . . . . .  PUBLIC   DATA   U_CHAR   0000H  1
Update_CONFIG. . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
InitCPU. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
COMPOSITE4Input. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
DWORD. . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
SendDVRStatus. . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
_LCDPowerON. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
GetDVRParam. . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
ClearGAUGEINFO . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CAM_R. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
P4 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E8H  1
GetNextInputSelection. . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
Range4Coarse . . . . . . . . . . . . .  PUBLIC   DATA   BIT      0000H  1
Disp_Input . . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
Halt_OK. . . . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
TriggerModeType. . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
SendDVRParamDT . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
CAM_BAR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ABR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_CAR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ACR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_CBR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_BCR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CkTMode. . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0000H  1
Baud_rate. . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0001H  1
PowerFlag. . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0002H  1
NumberStringType . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  11
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  width. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  BackColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  Radix. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  NumColor . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  MaxLen . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  PrePostCharLen . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  PrePostChar. . . . . . . . . . . . .  MEMBER   -----  ARRAY    0008H  3
_InitVideoData . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  src. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
IsNoInput. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
DoorClose. . . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
SetDVRParam. . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
_ClearAutoDetectStd. . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
SelectModeType . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0003H  1
CAM_PTZ_RIGHT. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_delay . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
Backlight_TO . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
RightTime. . . . . . . . . . . . . . .  PUBLIC   DATA   U_CHAR   0001H  1
AudioMute. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
P1_4 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0094H  1
FontData . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  27
  font . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  27
GetOSDLastKeyInTime. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
P1_5 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0095H  1
VInputStd. . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0004H  1
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 152 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


P3_4 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B4H  1
TGFlag . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0005H  1
GetDVRStatus . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
RIGHT_TRIG . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
DayNightLevel. . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
P3_7 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B7H  1
LAST_TRIG_NON. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_TriggerHandler. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
RS_ready . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
LeftTime . . . . . . . . . . . . . . .  PUBLIC   DATA   U_CHAR   0002H  1
CAM_SET. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
NORMALL_MODE . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
AVMode . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
struct_VInputStd . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0167H  153
ParkTime . . . . . . . . . . . . . . .  PUBLIC   DATA   U_CHAR   0003H  1
displayhold_flag . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0006H  1
SetOSDLastKeyInTime. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
SourceModeType . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
CAM_NUM. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
ClearInput2s . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_SetMonAddress . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
DVR_AudioRecord. . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0007H  1
CMD_NUM. . . . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
InfoAutoDayNight_Night . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
main . . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
AudioVol . . . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
_AdjustAutoDayNight. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  val. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  page . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  PWMLevelTemp . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
InfoNoVideoSignal. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
DoorOpen . . . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
TDisplayFlag . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0008H  1
AutoDayNightDelay. . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0009H  1
DetectDecoderInput . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
NTSC_Regs. . . . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
MANUALRECSTART . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
CAMC_TRIG. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
PowerOff . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_I2CDeviceInitialize . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  RegSet . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0000H  3
  cnt. . . . . . . . . . . . . . . . .  * REG *  DATA   INT      0006H  2
  addr . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0003H  1
  index. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0004H  1
  val. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0005H  1
_Puts. . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
LAST_TRIG_RIGHT. . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
DisplayGaugeOSD. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
GetDisplayedOSD. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CheckDecoderInput. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  std1 . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  std. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  cnt. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
  trycnt . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0003H  1
  ChangedNoinput . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0004H  1
GetInformation . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
TimeStep . . . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 153 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


_SetVideoMode. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CAM_RAB_H. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
OSDStrInfo . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  8
  cnt. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  addr . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  attr . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  str. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0004H  4
I2CAutoIncFlagOn . . . . . . . . . . .  PUBLIC   DATA   BIT      0001H  1
SetFormatSD. . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
AccPowerDown . . . . . . . . . . . . .  PUBLIC   DATA   BIT      0002H  1
InitVars . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CAM_BA . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_AB . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
BYTE . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
TimeType . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  7
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  width. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  BackColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  Format . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  TimeColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  CursorColor. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
CAM_CA . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_AC . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_PTZ_UP . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
SetSystem. . . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
REVERSE_TRIG . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_BC . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_CB . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
InitVideoDataSrc . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   000AH  1
OSD_LOCKF. . . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
CheckTrigger . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
SourceModeTypeEnum . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
CheckPanelImage. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_SetDisplayedOSD . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
struct_IdName. . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  17
  Id . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  Name . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0001H  16
IsFirstRunfromAC . . . . . . . . . . .  PUBLIC   DATA   BIT      0003H  1
SetFormatSDDone. . . . . . . . . . . .  E_CONST  -----  INT      -----  2
EnumType . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  17
  Sz . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  ByLang . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  Str. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0002H  15
MenuType . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  4
  width. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  height . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  TitleColor . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  CursorColor. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
PCAudioVol . . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
CAM_RAB_T. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
LtFlag . . . . . . . . . . . . . . . .  PUBLIC   DATA   U_CHAR   0004H  1
PowerDownStart . . . . . . . . . . . .  PUBLIC   DATA   BIT      0004H  1
_ReadI2C . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CAM_RAC_T. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
WORD . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
CAM_PTZ_LEFT . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 154 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


Attr_A . . . . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
main_init. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CAM_RBC_T. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAMNumber. . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   000BH  1
Attr_B . . . . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
CAM_Iris_Open. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Attr_C . . . . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
InputSelection . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   000CH  1
NowModeState . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
RtFlag . . . . . . . . . . . . . . . .  PUBLIC   DATA   U_CHAR   0005H  1
CAM_ZOOM_OUT_START . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
LAST_TRIG_CAMC . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
InfoAutoDayNight_Auto. . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CheckKeyIn . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
LEFT_TRIG. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
main_loop. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  val. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
_SetVInputStd. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  newd . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
CAM_AR . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
PowerDown_XTAL . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  flag . . . . . . . . . . . . . . . .  AUTO     DATA   BIT      0000H  1
CAM_BR . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_RB . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
PARK_TRIG. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_CR . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
InfoAutoDayNight_Day . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
TGFlag1. . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   000DH  1
CAM_MENU_ENTER . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
struct_InputSelection. . . . . . . . .  PUBLIC   CODE   ARRAY    00BDH  85
Register . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
CAM_PTZ_DOWN . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_GetKey. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
TR_JUMP_HOLD . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
_WriteI2C. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
LoadEEPROM . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  val. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
LAST_TRIG_REVERSE. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_CALL . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Attr_R . . . . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
PAL_Regs . . . . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
Hs_InitVars. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
bLastTrigger . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   000EH  1
JUMPAVFlag . . . . . . . . . . . . . .  PUBLIC   DATA   BIT      0005H  1
RS485_RX . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Flag4AutoPanelRegs . . . . . . . . . .  PUBLIC   DATA   BIT      0006H  1
Baud_rate2400. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
RS485_TX . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
VGAAudio . . . . . . . . . . . . . . .  EXTERN   DATA   BIT      -----  1
InitTechwell . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
SetAutoDetectStd . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
TriggerFlag. . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
GetAudioVolEE. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
No_TRIG. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
ReadVInputSTD. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  std. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
FW_Update_Start. . . . . . . . . . . .  E_CONST  -----  INT      -----  2
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 155 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


NumType. . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  5
  PrePostCharLen . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  PrePostChar. . . . . . . . . . . . .  MEMBER   -----  ARRAY    0001H  4
IHF. . . . . . . . . . . . . . . . . .  PUBLIC   DATA   U_LONG   0006H  4
_Wait_ms . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CAM_PTZ_STOP . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
BOOKMARK . . . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
_ReadEEP . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
RegisterInfo . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  Min. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0000H  2
  Max. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0002H  2
  Default. . . . . . . . . . . . . . .  MEMBER   -----  INT      0004H  2
Baud_rate4800. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
LAST_TRIG_LEFT . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_PCMDATA . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  22
  Support. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  HAN. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  VAN. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0003H  2
  IVF. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0005H  2
  CLOCK. . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0007H  2
  low. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0009H  2
  high . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000BH  2
  Hstart . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000DH  2
  Vstart . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000FH  2
  IPF. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0011H  2
  PPF. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0013H  2
  VBack. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0015H  1
ReverseFlag. . . . . . . . . . . . . .  PUBLIC   DATA   U_CHAR   000AH  1
Baud_rate9600. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_SaveInputSelectionEE. . . . . . . . .  EXTERN   CODE   PROC     -----  -----
VlossHandler . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_ChangeInput . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  newsel . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
CkPARK . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   000FH  1
CAM_QUAD . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
FW_Update_OK . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
CheckMirror. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
TriggerMode. . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
PelcoChoiceFLAG. . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0010H  1
CAM_ZOOM_IN_START. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
InfoOSDMENULOCKED. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
GetInputSelection. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
MANUALRECSTOP. . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
DebugLevel . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0011H  1
IVF. . . . . . . . . . . . . . . . . .  PUBLIC   DATA   U_INT    000BH  2
Init_DisplayInput. . . . . . . . . . .  EXTERN   DATA   BIT      -----  1
ReverseModeFlag. . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0012H  1
SetDVRDefault. . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
SEQFlag. . . . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
_PowerLED. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
DefineMenu . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  16
  Icon . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0000H  2
  Desc . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0002H  3
  PreFnId. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  PostFnId . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  IconColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  DescColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 156 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  Child. . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0009H  2
  Type . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000BH  1
  ActiveWithCursor . . . . . . . . . .  MEMBER   -----  U_CHAR   000CH  1
  Id . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000DH  1
  TypeData . . . . . . . . . . . . . .  MEMBER   -----  PTR      000EH  2
WaitPowerOn. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ikey . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  val. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  VGATrigger . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
Priority . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0013H  1
CMD_UNKNOWN. . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
TRIGGER_NUM. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
IsDrawNoVideoSignal. . . . . . . . . .  PUBLIC   DATA   BIT      0007H  1
DisplayInformation . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
GetPCAudioVolEE. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_WriteEEP. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
SEQ. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
GetVInputStdInx. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  std. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0003H  1
DVRReSendDisable . . . . . . . . . . .  PUBLIC   DATA   BIT      0008H  1
SetNowMode . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
InfoOSDMENUATCIVE. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Monitor. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
LongRegisterInfo . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  Min. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  Max. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  Default. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
HS_DvrCommand. . . . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
SendDVRParam . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
DisplayInput . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
AV_MODE_DELAY. . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
PictureInfo. . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  4
  Register_Addr. . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  EEPROM_Addr. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  Control_Range. . . . . . . . . . . .  MEMBER   -----  PTR      0002H  2
CAM_RAC_T2 . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ABR_T3 . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
PWMLevel . . . . . . . . . . . . . . .  PUBLIC   DATA   U_CHAR   000DH  1
CAM_RBC_T2 . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ABR_T4 . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Commanderror . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0014H  1
GPSReset . . . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
CMD_NULL . . . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
SEQMode. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
ReverseTime. . . . . . . . . . . . . .  PUBLIC   DATA   U_CHAR   000EH  1
GetDATETIME. . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
CAM_A. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
OSDLastKeyInTime . . . . . . . . . . .  PUBLIC   XDATA  U_INT    0015H  2
SNAPSHOT . . . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
CAM_B. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
InfoPLZRESETSYSTEM . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
GetTime_ms . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
SDCardCoverDetect. . . . . . . . . . .  PUBLIC   DATA   BIT      0009H  1
CAM_C. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_CAMOutDSel. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_Printf. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
C51 COMPILER V9.60.0.0   MAIN                                                              06/22/2022 16:23:02 PAGE 157 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


VGA_TRIG . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
DisplayInputHold . . . . . . . . . . .  PUBLIC   DATA   BIT      000AH  1
CAM_CAB. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_BAC. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ABC. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Update_CONFIG_OK . . . . . . . . . . .  E_CONST  -----  INT      -----  2
GetDVRVersion. . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
AWT_LAST_TRIGGER . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
VGAflag. . . . . . . . . . . . . . . .  PUBLIC   DATA   BIT      000BH  1
SEQTime. . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0017H  1
VInputStdDetectMode. . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0018H  1
SourceMode . . . . . . . . . . . . . .  PUBLIC   DATA   U_CHAR   000FH  1
Halt_Start . . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
SendAlarm. . . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
_ChangeVol . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
COMPOSITE1Input. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
struct_InputSelection_S. . . . . . . .  PUBLIC   CODE   ARRAY    0112H  85
GetLCDMode . . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
COMPOSITE2Input. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2221    ----
   CONSTANT SIZE    =    512    ----
   XDATA SIZE       =     25      18
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     16    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =     12       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
