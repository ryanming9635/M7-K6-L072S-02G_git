C51 COMPILER V9.60.0.0   PC_EEP                                                            06/22/2022 16:23:03 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE PC_EEP
OBJECT MODULE PLACED IN .\Output\pc_eep.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE pc_eep.c LARGE OPTIMIZE(9,SIZE) BROWSE INCDIR(.\Include\) DEBUG OBJECTEX
                    -TEND CODE LISTINCLUDE SYMBOLS PRINT(.\Source\pc_eep.lst) TABS(2) OBJECT(.\Output\pc_eep.obj)

line level    source

   1          //pc_eep.c
   2          //=========================================================================
   3          //  EEPROM structure
   4          
   5          //  0x80  ----------- PC Color Temp Data --------------------------------
   6          //      0 PC Color Temp Mode
   7          //      1 R G B for Mode 1
   8          //      4 R G B for Mode 2
   9          //      7   R G B for Mode 3
  10          //      A R G B for User Mode
  11          //
  12          //  0x90  ----------- PC Input ------------------------------------------
  13          //
  14          //      0 ADC Coarse
  15          //      1 ADC Phase
  16          //      2 Vertical Active Start
  17          //      3 Horizontal Active Start
  18          //
  19          
  20          #include "Config.h"
   1      =1  /*****************************************************************************/
   2      =1  /*                           System Configurations                           */
   3      =1  /*              rev 0.10 include auto test             */
   4      =1  // 0.11 change DTV, PC input initial download data correct for Charge Pump
   5      =1  // 0.12 correct phase measurement routine '>>3'
   6      =1  // 0.13 enable function for SPI control... only EXT MCU case
   7      =1  // 0.14 corrected PC measurement......
   8      =1  // 0.0a test function only for CVBS, SVIDEO
   9      =1  // 0.15 corrected DTV scaler setting for panel resolutions
  10      =1  // 0.0b panel for AND 640x480 TICON panel
  11      =1  // 0.16 corrected COMPONENT scaler setting for panel resolutions  11/21/2007
  12      =1  // 0.0c automatic chip test
  13      =1  // 0.17 add monitor function, osd grid for writing grid
  14      =1  // 0.18 add component, dtv pc for analogpanel, 12/06/2007
  15      =1  // 0.19 correct pal input for CES, 12/20/2007
  16      =1  // 0.1a CCFL control, 12/28/2007
  17      =1  // 0.19 Multi Grid for Banking on Internal MCU  01/17/2008
  18      =1  // 0.20 CCFL contol for backlight brightness  01/21/2008
  19      =1  // 0.21 CCFL contol for backlight brightness  01/25/2008
  20      =1  // 0.22 phase setting 02/07/2008
  21      =1  // 0.221 display input correction 04/03/2008
  22      =1  // 0.23 PC, DTV mode, no signal display
  23      =1  // 0.24 PC Auto Color adjustment
  24      =1  // 0.25 revised PC Auto Clock adjustment - find divide number and phase
  25      =1  // 0.26 Digital RGB for TW8826
  26      =1  // 0.27 Correct LVDS control          08/22/2008
  27      =1  // 0.28 Add WSVGA resolution          10/23/2008
  28      =1  // 0.29 Add NEW GRID              11/14/2008
  29      =1  // 0.30 Fix DTV input             12/10/2008
  30      =1  // 0.31 Add 1080i23, 24, 25A, 25B       01/20/2009
  31      =1  // 0.32 TCON setting FIX all mode       01/22/2009
  32      =1  // 0.33 autodetect is auto on/off by dip sw1  02/02/2009
  33      =1  // 0.34 Fix autocolor function and clamp position 02/08/2009
  34      =1  /*****************************************************************************/
C51 COMPILER V9.60.0.0   PC_EEP                                                            06/22/2022 16:23:03 PAGE 2   

  35      =1  #ifndef __CONFIG_H__
  36      =1  #define __CONFIG_H__
  37      =1  
  38      =1  //#define INTERNAL_MCU -- defined by Project Compiler session
  39      =1  #define   HS        
  40      =1  //#define   E_Wintek  
  41      =1  //#define   AWT 
  42      =1  //#define Holtz
  43      =1  
  44      =1  //#define QUAD
  45      =1  
  46      =1  #ifdef QUAD
           =1   #define AWT_ML072Q  //Pinchi 20150827 disable for HTRV
           =1 //  #define HTRV  //Pinchi 20140902 disable for AWT ML072Q
           =1 #else
  50      =1    #define AWT_ML072S
  51      =1  #endif
  52      =1  
  53      =1  //--------------------------------------------------
  54      =1  //              Common Feature Define
  55      =1  //--------------------------------------------------
  56      =1  //#define FIRST_RUN_FROM_AC  //Pinchi 20150831 disable for Screen re-setting by Set4WideScreen()  //Pinchi
             - 20141029 add
  57      =1  #define SUPPORT_ML072Q_AUTO_DAY_NIGHT  //Pinchi 20150825 add for function define
  58      =1  #define SUPPORT_TRIGGER_EXIT_MENU  //Pinchi 20150827 add for exit OSD Menu by CAM trigger
  59      =1  #define SUPPORT_AC_ON_NORMAL_SCREEN  //Pinchi 20150901 add to set 4:3 screen when AC on
  60      =1  
  61      =1  #define FIX_DISPLAY_OFF_TRIGGER_ISSUE  //Pinchi 20150908 add to fix [Display] set OFF and trigger release 
             -then trigger again during display info the CAM will change from trigger CH to original CH
  62      =1  #define FIX_EXIT_STANDBY_NO_AUDIO  //Pinchi 20150908 add to fix no audio output when exit Standby mode
  63      =1  #ifdef AWT_ML072Q
           =1 #define FIX_2835_SCREEN_NOISE  //Pinchi 20160929 add to fix the screen noise of TW2835 by change DDR to ma
             -ke clock shift
           =1 #endif
  66      =1  
  67      =1  #define SUPPORT_NEW_TRIGGER_FUNCTION  /////修改新的Trigger方式減少trigger polling 時間 add by ryan@2018012
             -4
  68      =1  
  69      =1  //#define AWT_ML072QS_MSG  //Pinchi 20140925 add
  70      =1  //#define REDUCE_DELAY_TIME  //Pinchi 20141029 add
  71      =1  //#define DISPLAY_TECHWELL_LOGO  //Pinchi 2050903 add to disable the Techwell logo
  72      =1  
  73      =1  //#define SUPPORT_SVIDEO                     //andy Awt 20090914
  74      =1  //#define SUPPORT_COMPONENT     // support component analog to decoder//andy Awt 20090914
  75      =1  //#define SUPPORT_DTV           // support DTV input through component( to ADC ).//andy Awt 20090914
  76      =1  //#define SUPPORT_PC        // support PC function
  77      =1  //#define SUPPORT_DVI       // support DVI input
  78      =1  //#define SUPPORT_SDCARD
  79      =1  
  80      =1  #define SUPPORT_2835_CLK_TUNE_BACK_DOOR  //Pinchi 20160913 add to fine tune TW2835 clock by hot key
  81      =1  //#define SUPPORT_DISPLAY_TEST_VERSION  //Pinchi 20150929 add to display test software version on OSD
  82      =1  
  83      =1  //--------------------------------------------------
  84      =1  //              Model Feature Define
  85      =1  //--------------------------------------------------
  86      =1  #if (defined AWT_ML072Q) || (defined AWT_ML072S)
  87      =1  #define AWT_ML072QS_FW_RULE  //Pinchi 20140902 add
  88      =1  //#define AWT_NEW_SLIM_MODEL  //Pinchi 20150203 add for AWT new slim model
  89      =1  #define AWT_NO_SIGNAL_MSG  //Pinchi 20150319 add for display "NO VIDEO SIGNAL" by AWT request of 20150302
  90      =1  #define AWT_TW2835_DRAW_T_ICON  //Pinchi 20150415 add to draw T icon by TW2835 when CAM C trigger
  91      =1  #define SUPPORT_AC_ON_REDUCE_TIME  //Pinchi 20150903 add to reduce Power time when AC on
  92      =1  
C51 COMPILER V9.60.0.0   PC_EEP                                                            06/22/2022 16:23:03 PAGE 3   

  93      =1  //#define SUPPORT_TRIGGER_RELEASE_DELAY  //Pinchi 20150908 add to support delay time when CAM trigger rele
             -ase
  94      =1  
  95      =1  typedef enum  //Pinchi 20150326 add
  96      =1  {
  97      =1       LAST_TRIG_NON =  0x00,
  98      =1       LAST_TRIG_LEFT =   0x01,
  99      =1       LAST_TRIG_RIGHT =  0x02,
 100      =1       LAST_TRIG_REVERSE =0x03,
 101      =1       LAST_TRIG_CAMC =   0x04,
 102      =1  
 103      =1  } AWT_LAST_TRIGGER;
 104      =1  
 105      =1  #endif
 106      =1  
 107      =1  
 108      =1  #ifdef HTRV  //Pinchi 20150825 add
           =1 #define HTRV_ML072Q_FW_RULE  //Pinchi 20150827 add
           =1 #define HTRV_REDUCE_SCREEN_CHANGE  //Pinchi 20150828 add to reduce screen double change
           =1 
           =1 #if 0  //Pinchi 20151209 add to remove 4:3 screen by HTRV request of 20151209
           =1 #define HTRV_SUPPORT_4_3_SCREEN
           =1 #else
           =1 #undef SUPPORT_AC_ON_NORMAL_SCREEN  //Pinchi 20151210 add
           =1 #endif
           =1 
           =1 #endif
 119      =1  
 120      =1  //#define SUPPORT_RS485
 121      =1  //-----------------------------------------------------------------------------
 122      =1  //    Firmware Version
 123      =1  //-----------------------------------------------------------------------------
 124      =1  #ifdef HTRV  //Pinchi 20150907 add
           =1 //#define FWVER     0x200 // Rev 2.00
           =1 //#define FWVER     0x210   // Rev 2.1  //Pinchi 20151209 update version for HTRV request to remove 4:3 scree
             -n
           =1 //#define FWVER     0x220   // Rev 2.2  //Pinchi 20160929 change for V2.2
           =1 #define FWVER     0x230     //Rev 2.3    ryan@20170727 update version by Encoder switches零件 EOL更換
           =1 #else
 130      =1  #define FWVER     0x210   // Rev 0.14
 131      =1  #endif
 132      =1  
 133      =1  //-----------------------------------------------------------------------------
 134      =1  //    Compiler
 135      =1  //-----------------------------------------------------------------------------
 136      =1  #define KEILC           // Keil C 5.0
 137      =1  //-----------------------------------------------------------------------------
 138      =1  //    MPU Clock
 139      =1  //-----------------------------------------------------------------------------
 140      =1  #ifndef INTERNAL_MCU
 141      =1  //#define CLOCK_11M         // 11.0592MHz
 142      =1  #define CLOCK_22M         // 22.1184MHz
 143      =1  #else                 // INTERNAL_MCU
           =1 #define CLOCK_27M         // 27MHz
           =1 #define REG_START_ADDRESS 0xc000    // register start 0xc000, for page0, 0xc100-page1 
           =1 #endif
 147      =1  //-----------------------------------------------------------------------------
 148      =1  //    TW88 Version
 149      =1  //-----------------------------------------------------------------------------
 150      =1  #define TW8816   ///AWT TW8806 change to TW8816 platform //ryan@20170921
 151      =1  //-----------------------------------------------------------------------------
 152      =1  //-----------------------------------------------------------------------------
C51 COMPILER V9.60.0.0   PC_EEP                                                            06/22/2022 16:23:03 PAGE 4   

 153      =1  //    Options for Backlight control
 154      =1  //-----------------------------------------------------------------------------
 155      =1  //#define BACKLIGHT_CCFL
 156      =1  //#define BACKLIGHT_LED
 157      =1  #define BACKLIGHT_PWM
 158      =1  
 159      =1  //-----------------------------------------------------------------------------
 160      =1  //    Panel Resolution
 161      =1  //-----------------------------------------------------------------------------
 162      =1  // ---- Select Default Panel
 163      =1  //
 164      =1  //#define UXGA            // 1600 x 1200
 165      =1  //#define SXGA              // 1280 x 1024
 166      =1  //#define XGA  // 1024 x 768
 167      =1  #ifdef XGA
           =1   #define LVDS          
           =1   #define PWIDTH  1024
           =1   #define PHEIGHT 768
           =1 #endif
 172      =1  //#define SVGA            //  800 x 600
 173      =1  //#define VGA             //  640 x 480
 174      =1  #ifdef VGA
           =1   #define PWIDTH  640
           =1   #define PHEIGHT 480
           =1   //#define HITACHI_640_B_160   //--> 640 x 160
           =1   #define AND_640_480
           =1 #endif
 180      =1  //#define WXGA            // 1280 x 768 (15:9) // 1366 x 768 (16:9)
 181      =1  #ifdef WXGA
           =1     //#define WX_SHARP_LQ106K1LA
           =1   #define PWIDTH  1280
           =1   #define PHEIGHT 768
           =1 #endif
 186      =1  //#define WSVGA           // 1024 x 600 *** only video mode
 187      =1  #ifdef WSVGA
           =1   #define PWIDTH  1024
           =1   #define PHEIGHT 600
           =1   #define UNIDEN_1024_600
           =1 #endif
 192      =1  #define WVGA            //  800 x 480
 193      =1  #ifdef WVGA
 194      =1    #define PWIDTH  800
 195      =1    #define PHEIGHT 480//600
 196      =1    // If WVGA, you have to select panel.
 197      =1    //#define AU_10INCH
 198      =1    //#define WVGA_TPO
 199      =1    //#define SAMSUNG_10INCH
 200      =1    //#define SAMSUNG_TICONLESS_10INCH
 201      =1    //#define SHARP_TICONLESS_7INCH
 202      =1    //#define AU_TICONLESS_7INCH
 203      =1    //#define AU_G084SN05V8_8_4INCH 
 204      =1    #define HSD070IDW1_7INCH
 205      =1    //#define INNOLUX_AT080TN03
 206      =1    //#define AU_TICONLESS_7INCH_CCFL
 207      =1    //#define CMO     // CHIMEI panel
 208      =1    //#define AU_TICONLESS_10INCH
 209      =1    //#define HITACHI_T01
 210      =1    //#define HITACHI_TX23D12
 211      =1    //#define HITACHI_TX18D24
 212      =1    //#define HITACHI_TX18D16
 213      =1    //#define TMD_LTA070A320F
 214      =1    //#define TMD_LTA080B
C51 COMPILER V9.60.0.0   PC_EEP                                                            06/22/2022 16:23:03 PAGE 5   

 215      =1  #endif  //WVGA
 216      =1  //#define HVGA            //  480 x 320
 217      =1  //#define QVGA            //  320 x 240 *** only video mode
 218      =1  #ifdef QVGA
           =1   #define PWIDTH  320
           =1   #define PHEIGHT 240
           =1   //#define HITACHI_TX09D73
           =1   //#define AU_DELTARGB
           =1   //#define SHARP_LQ050Q5DR01
           =1   //#define SHARP_LQ035
           =1   //#define TMD
           =1 #endif
 227      =1  
 228      =1  //#define WQVGA           //  480 x 234 *** only video mode
 229      =1  #ifdef WQVGA
           =1   #define PWIDTH  480
           =1   #define PHEIGHT 240
           =1   // If WQVGA, you have to select panel 
           =1     #define ANALOG_7INCH
           =1   //#define PWIDTH  400
           =1   //#define PHEIGHT 240
           =1   //#define SHARP_LQ043T3DX02   //  400 x 237
           =1   //#define LG_ANALOG
           =1   //#define TMD_ANALOG        //TMD_LTA05B352A
           =1   //#define T_51945GD       // Optorex Panel
           =1 #endif  // WQVGA
 241      =1  
 242      =1  //if LVDS pannel disable TICONLESS
 243      =1  
 244      =1  //-----------------------------------------------------------------------------
 245      =1  //---- Add Support One more panel with DIPSW#1
 246      =1  //---- Ex. Add Analog AU 7" Panel with Default Panel for evalution
 247      =1  //#define ADD_ANALOGPANEL   // Added Analog panel(AU7") from default set panel(expect WQVGA) with DIP #1 sw
             -itch.(DIP#1=L:ANALOG, H:DEFAULT)
 248      =1                // It can't support WQVGA and ADD_ANALOGPANEL same time!!
 249      =1    //#define ADD_ANALOG_7INCH
 250      =1    //#define ADD_TMD_LTA05B352A
 251      =1                    
 252      =1  //---- Support Wide panel function
 253      =1  #if (defined WXGA) || (defined WSVGA) || (defined WVGA) || (defined WQVGA)
 254      =1  #if 0///ryan@20180115//mask for NTSC sharpness issue
           =1 #define WIDE_SCREEN         // Can support 4 display mode, i.e. Normal, Wide, Full, Zoom
           =1 #endif
 257      =1  #endif                // Tested panasonic WVGA panel.
 258      =1  
 259      =1  //-----------------------------------------------------------------------------
 260      =1  //    Panel Vendor Specific
 261      =1  //-----------------------------------------------------------------------------
 262      =1  
 263      =1  //-----------------------------------------------------------------------------
 264      =1  //    TV Tuner
 265      =1  //-----------------------------------------------------------------------------
 266      =1  #define PHILIPS       0
 267      =1  #define ALPS        1   // ALPS, LG
 268      =1  #define TEMIC       2
 269      =1  #define TVAVA       3
 270      =1  #define LGTUNER       4
 271      =1  #define SAMSUNGMUTITUNER  5
 272      =1  
 273      =1  #define TVTunerDevice   4
 274      =1  //-----------------------------------------------------------------------------
 275      =1  //    IR Remote Controller Type
C51 COMPILER V9.60.0.0   PC_EEP                                                            06/22/2022 16:23:03 PAGE 6   

 276      =1  //-----------------------------------------------------------------------------
 277      =1  //#define REMO_RC5          // RC5 style
 278      =1  #define TECHWELL_REMOCON
 279      =1  //#define REMO_NEC          // NEC style
 280      =1  //#define PHILIPS_REMOCON // New remocon 
 281      =1  
 282      =1  //-----------------------------------------------------------------------------
 283      =1  //    I2C Device Access Address Mapping
 284      =1  //-----------------------------------------------------------------------------
 285      =1  
 286      =1  #define EEPROMI2CAddress  0xa0  // EEPROM (24C16)
 287      =1  #define TW88I2CAddress    0x8a  // TW880x
 288      =1  
 289      =1  #define MSPI2CAddress   0x80  // MSP
 290      =1  #define ALC106I2CAddress  0x4A  // MSP
 291      =1  //-----------------------------------------------------------------------------
 292      =1  //    Options for Possible Inputs
 293      =1  //-----------------------------------------------------------------------------
 294      =1  
 295      =1  
 296      =1  //-----------------------------------------------------------------------------
 297      =1  //    Options for Possible Standards
 298      =1  //    Default:NTSC
 299      =1  //-----------------------------------------------------------------------------
 300      =1  #define SUPPORT_PAL     
 301      =1  #define SUPPORT_SECAM
 302      =1  #define SUPPORT_NTSC4   
 303      =1  #define SUPPORT_PALM  
 304      =1  #define SUPPORT_PALN    
 305      =1  #define SUPPORT_PAL60   
 306      =1  
 307      =1  //#define ID_CHECK_BY_FW        // in Video mode, check input system ID by firmware
 308      =1  
 309      =1  //-----------------------------------------------------------------------------
 310      =1  //    Options for Debugging/Release
 311      =1  //-----------------------------------------------------------------------------
 312      =1  //#define SUPPORT_PATTERN       // support LCD test pattern
 313      =1  
 314      =1  #ifndef WQVGA
 315      =1    #ifndef QVGA
 316      =1  #define SUPPORT_OSDPOSITIONMOVE
 317      =1    #endif
 318      =1  #endif
 319      =1  
 320      =1  #define SERIAL              // include serial communication routines
 321      =1  
 322      =1  //#define SUPPORT_DEBUG       // Support to use Read & Write in debug OSD Window by remocon.
 323      =1  
 324      =1  //#define DEBUG           // include debug information
 325      =1  #ifdef DEBUG
           =1   //#define DEBUG_MAIN
           =1   //#define DEBUG_TIME
           =1   //#define DEBUG_KEYREMO
           =1   //#define DEBUG_TW88
           =1   //#define DEBUG_DECODER
           =1   //#define DEBUG_I2C
           =1   //#define DEBUG_EEP
           =1   //#define DEBUG_OSD
           =1   //#define DEBUG_AUDIO
           =1   //#define DEBUG_SETPANEL
           =1   //#define DEBUG_DTV
           =1 //  #define DEBUG_PC
C51 COMPILER V9.60.0.0   PC_EEP                                                            06/22/2022 16:23:03 PAGE 7   

           =1   //#define DEBUG_PC_MEAS
           =1   //#define DEBUG_PC_COLOR
           =1   //#define DEBUG_COMPONENT
           =1   //#define DEBUG_BANK
           =1   //#define DEBUG_PAUSE
           =1   //#define DEBUG_MCU
           =1 #endif
 345      =1  
 346      =1  #define AUTOCALC_PC         // in PC mode, Enable Auto Calcuration
 347      =1  //#define SUPPORT_USERCOLORFROMTXT  // Use color setting of text file in Color mode=USER MODE which is as B
             -rightness(Reg10), Contast(Reg11),
 348      =1                    //    Sat_U(Reg13),Sat_V(Reg14),Sharpness(Reg12,Reg78)                  
 349      =1  //#define SUPPORT_GAMMA
 350      =1  
 351      =1  //#define CHIP_MANUAL_TEST      // DIPSW#1
 352      =1  
 353      =1  #ifndef INTERNAL_MCU
 354      =1  //#define NO_INITIALIZE       // After Power switch turn on with DIP SW4 Enable(Low), or pressed MENU button 
             -for internal MCU
 355      =1                                      //     micom works to access only I2C bus by serial command.
 356      =1  #endif
 357      =1  
 358      =1  //#define SUPPORT_KRS_OSDDEMO   // For KRS Company Demo 
 359      =1  //#define SUPPORT_LINE_OSDDEMO
 360      =1  
 361      =1  //-----------------------------------------------------------------------------
 362      =1  //    Special Features
 363      =1  //-----------------------------------------------------------------------------
 364      =1  
 365      =1  #ifndef INTERNAL_MCU
 366      =1  //#define SUPPORT_DELTA_RGB
 367      =1  #endif
 368      =1  #define SUPPORT_SELECTKEY     // choose the keymap of using select key or left,right key.
 369      =1  //-----------------------------------------------------------------------------
 370      =1  
 371      =1  //#define HS_NEWOSDMENU     //Weylis -@121008 for Hor. Style OSD
 372      =1  //#define HS_NEWOSDMENU_2     //Weylis -@121008 for Hor. Style OSD(2 line)
 373      =1  
 374      =1  #endif  //__CONFIG_H__
 375      =1  
  21          
  22          #if defined( SUPPORT_PC ) || defined( SUPPORT_DTV )
              
              #include "typedefs.h"
              #include "main.h"
              #include "i2c.h"
              #include "debug.h"
              #include "pc_eep.h"
              #include "printf.h"
              #include "TW88.h"
              #include "measure.h"
              #include "adc.h"
              #include "osdmenu.h"
              #include "etc_eep.h"
              #include "panel.h"
              
              extern  CODE struct _PCMDATA  PCMDATA[];
              
              extern  BYTE  PcMode, PcModeLast;
              extern  IDATA WORD  IVF;
              extern  IDATA DWORD IHF;
              
C51 COMPILER V9.60.0.0   PC_EEP                                                            06/22/2022 16:23:03 PAGE 8   

              ///extern IDATA BYTE  CurrentADC;
              
              WORD GetVactiveStartEE(BYTE mode)
              {
                WORD index;
                WORD start;
              
                index = EE_PCDATA + mode*LEN_PCDATA + 2;
                start = PCMDATA[mode].Vstart + (char)ReadEEP(index);
              
                return start;
              }
              
              WORD GetHactiveStartEE(BYTE mode)
              {
                WORD index;
                WORD start;
              
                index = EE_PCDATA + mode*LEN_PCDATA + 4;
                start = PCMDATA[mode].Hstart + (char)ReadEEP(index);
              
                return start;
              }
              
              //-----------------------------------------------------------------------------
              //      Get PC Function Data from EEPROM
              //-----------------------------------------------------------------------------
              void GetPCDataEE(BYTE mode)
              {
                char dat=0;     // must be signed char
                WORD index, temp;
                DWORD scale, pres;
                extern bit Flag4Bypass;
                WORD hstart, vstart;
              
                #ifdef DEBUG_EEP
                dPrintf("\r\nGetPCDataEE(%d)", (WORD)mode);
                #endif
              
                GetADCGainOffsetEE();   // restore from
              
                vstart = PCMDATA[mode].Vstart;
                hstart = PCMDATA[mode].Hstart;
              
                index = EE_PCDATA + mode*LEN_PCDATA;
              
                //--------------------------------------------
              
                // PPF
                ChangeInternPLL(PCMDATA[mode].PPF * 100000L);
                delay(5);
              
                GetHpnVpn(1); // For correcting sync polarity
              
                // ADC VCO
                SetVCORange( PCMDATA[mode].IPF * 100000L );
              
                // ADC PLL-----(0)
              
                if( !IsDTVInput() ) dat = ReadEEP(index++);
              
              //  if(GetInputSelection()==PC) WriteADC(0xc1, 0x30);
C51 COMPILER V9.60.0.0   PC_EEP                                                            06/22/2022 16:23:03 PAGE 9   

              
                SetCoarse( dat + PCMDATA[mode].CLOCK );
                Printf("\r\n CLOCK divider adjustment value: %d", (int) dat );
              
                if(GetInputSelection()==PC) WriteADC(0xc1, 0x20);
              
                // ADC Phase---(1)
                dat = ReadEEP(index++);
                if( !IsDTVInput() ) 
                SetPhase( dat );
              
                // Vertical----(2)
                #ifdef DEBUG_PC
                dPrintf("\r\n  vstart(before add ReadEEP): %d", (WORD)vstart);
                #endif
                if( !IsDTVInput() ) 
                vstart += (char)ReadEEP(index++);
                #ifdef DEBUG_PC
                dPrintf("\r\n  vstart(after add ReadEEP): %d", (WORD)vstart);
                #endif
                
                SetVactiveStart( vstart );
                if( IsDTVInput() ) {
                  SetVactiveLen( PCMDATA[mode].VAN+20 );
                }
                else
                {
                  //SetVactiveLen( PCMDATA[mode].VAN + 6 );
                  #ifdef XGA
                  if (mode == EE_VGA_72)
                    SetVactiveLen(PCMDATA[mode].VAN + 1);
                  else
                    SetVactiveLen(PCMDATA[mode].VAN); 
                  #else
                  SetVactiveLen(PCMDATA[mode].VAN);
                  #endif
                }
                pres=(DWORD)PVR_;
                #ifdef XGA
                if (PCMDATA[mode].VAN == PVR_)
                  scale = (PCMDATA[mode].VAN * 0x10000L) / pres + 0x64;
                else
                  scale = (PCMDATA[mode].VAN * 0x10000L) / pres;
                #else
                scale = (PCMDATA[mode].VAN * 0x10000L) / pres;
                #endif 
                
                if( scale==0x10000 && Flag4Bypass )     // Bypass
                  BypassZoom();
                else {
                  Clear_bypass();
                  YScale2(scale);           // save V Scale Up Factor
                }
              
                SetVValueForPanel(vstart);      // Vstart
              
                dat=0;
                // VBackPorch--(3)
                if( !IsDTVInput() ) 
                dat = (char)ReadEEP(index++);
                dat += PCMDATA[mode].VBack;
                dat -= ReadTW88(0xb8);        // VOsync value compensation
C51 COMPILER V9.60.0.0   PC_EEP                                                            06/22/2022 16:23:03 PAGE 10  

                #ifdef DEBUG_PC
                dPrintf("\r\nSetVBackPorch( %d )", (WORD)dat);
                #endif
                #ifdef XGA
                if (mode ==  EE_SVGA_56)
                  dat += 2;
                else if (mode ==  EE_VGA_72)
                  dat --;
                #endif
                SetVBackPorch( dat );
              
                // Horizontal--(4)
                if( !IsDTVInput() ) 
                  hstart += (char)ReadEEP(index++);
              //  temp = hstart + PCMDATA[mode].HAN + 2;
                temp = hstart + PCMDATA[mode].HAN + 20;
                #ifdef XGA
                if (mode >= EE_SVGA_56 && mode <= EE_SVGA_85)
                  hstart += 1;
                SetHactiveStart( hstart );
                #else
                SetHactiveStart( hstart );
                #endif 
              
                //#ifdef SXGA
                //if( mode>=EE_XGA_60 && mode <=EE_XGA_85 ) temp--;
                //#endif
              
                if( IsDTVInput() ) temp += 3;
              
                SetHactiveEnd( temp );
                SetHValueForPanel();
              
                if( (PCMDATA[mode].VAN != GetPVR()) || !Flag4Bypass) {
                  pres = GetPHR();
                  scale = (PCMDATA[mode].HAN * 0x10000L + pres/2) / pres; // 256*han/phr
              
                  #ifdef DEBUG_EEP
                  dPrintf("\r\nXscaleFactor:%04x(%d)", scale, scale);
                  #endif
                  #ifdef XGA
                  if( PCMDATA[mode].HAN == 1024 ) {//1100
                    scale = (PCMDATA[mode].HAN * 0x80L ) / 1024 + 1;    // (HAN/1024)*256
                    XscaleD(scale);
                    scale = ((PCMDATA[mode].HAN -4) * 0x10000L ) / 1024;            // (1024/PHR)*256
                    XscaleU(scale);
                  }
                  else if( PCMDATA[mode].HAN > 1024 )
                  {
                    scale = (PCMDATA[mode].HAN * 0x80L ) / 1024 + 1;    // (HAN/1024)*256
                    XscaleD(scale);
                    scale = (1024 * 0x10000L ) / 1024;            // (1024/PHR)*256
                    XscaleU(scale);
                  }
                  #else
                  //#if (defined SXGA) || (defined WXGA)
                  if( PCMDATA[mode].HAN > 1024 ) {
                    scale = (PCMDATA[mode].HAN * 0x80L ) / 1024 + 1;    // (HAN/1024)*256
                    XscaleD(scale);
                
                    #ifdef DEBUG_EEP
                    dPrintf("\r\nXscaleFactorD:%04x(%d)", scale, scale);
C51 COMPILER V9.60.0.0   PC_EEP                                                            06/22/2022 16:23:03 PAGE 11  

                    #endif
              
                    scale = (1024 * 0x10000L ) / 1280;            // (1024/PHR)*256
                    XscaleU(scale);
              
                    #ifdef DEBUG_EEP
                    dPrintf("\r\nXscaleFactorU:%04x(%d)", scale, scale);
                    #endif
                  }
                  #endif
                  else
                  //#endif
              
                  XScale2(scale);
              
                }
              
                dPuts("\r\n +++++++++++++++++=>Auto PHP Enable");
                  WriteTW88( 0xb6, (ReadTW88(0xb6) & 0x7f) ); // Auto PHP Enable
                  WriteTW88( 0xb2, ReadTW88(0xb2) );
              
                DisplayResultAndSetActiveRange();
              
                //-------- Clear changed status -------------
                MeasureAndWait(3);
              
                #ifdef WIDE_SCREEN
                Set4WideScreen(GetWideModeEE());
                #endif
              
                WriteTW88( 0x06, 0x80 ); // Software Reset
              
              }
              //=============================================================================
              //      Save PC Function Data to EEPROM
              //=============================================================================
              
              void SavePCDataEE(BYTE mode)
              {
                WORD index;
                int clockDiff;
              
                index = EE_PCDATA + mode*LEN_PCDATA ;
              
                clockDiff = GetCoarse() - PCMDATA[mode].CLOCK;
                #ifdef DEBUG_EEP
                dPrintf("\r\nSave PC DATA mode(%d) index(%04x) IHF(%ld)", (WORD)mode, (WORD)index, IHF );
                dPrintf(" IVF(%d) PPF(%dM)", IVF, (WORD)(GetPPF()/1000000) ); 
                dPrintf("\r\nGestCoarse(): %d, PCMDATA[mode].CLOCK: %d, difference: %d", GetCoarse(), PCMDATA[mode].CLOCK
             -, clockDiff );
                #endif
              
                WriteEEP( index++, (char) clockDiff );
                WriteEEP( index++,         GetPhaseCurrent() );
                WriteEEP( index++, (char)( GetVactiveStart() - PCMDATA[mode].Vstart) );
                WriteEEP( index++, (char)( ReadTW88(0xb8) + GetVBackPorch()  - PCMDATA[mode].VBack) );  //VOsync compensat
             -ion
                WriteEEP( index++, (char)( GetHactiveStart() - PCMDATA[mode].Hstart) );
              }
              
              //=============================================================================
              void SaveDefaultPCDataEE(void)
C51 COMPILER V9.60.0.0   PC_EEP                                                            06/22/2022 16:23:03 PAGE 12  

              {
                WORD  index, i;
              
                index = EE_PCDATA + PcMode*LEN_PCDATA;
              
                for(i=0; i<LEN_PCDATA; i++) {
                  WriteEEP( index++, 0 );
                  delay(1);
                }
              }
              
              void SaveDefaultPCDataAllEE(void)
              {
                for(PcMode=0; PcMode<EE_PC_MAX; PcMode++)
                  SaveDefaultPCDataEE();
              }
              
              void SaveCoarseEE(BYTE mode)
              {
                WORD  index;
              
                index = EE_PCDATA + mode*LEN_PCDATA + 0;
                WriteEEP( index, (char)(GetCoarse() - PCMDATA[mode].CLOCK) );
              }
              
              void SavePhaseEE(BYTE mode)
              {
                WORD  index;
              
                index = EE_PCDATA + mode*LEN_PCDATA + 1;
                WriteEEP( index,        GetPhaseCurrent() );
              }
              
              //=============================================================================
              
              void SaveVactiveEE(BYTE mode)
              {
                WORD  index;
              
                index = EE_PCDATA + mode*LEN_PCDATA + 2;
                WriteEEP( index, (char)(GetVactiveStart() - PCMDATA[mode].Vstart) );
              }
              
              void SaveVBackPorchEE(BYTE mode)
              {
                WORD  index;
              
                index = EE_PCDATA + mode*LEN_PCDATA + 3;
                WriteEEP( index, (char)(GetVBackPorch() - PCMDATA[mode].VBack) );
              
              }
              
              void SaveHactiveEE(BYTE mode)
              {
                WORD  index;
              
                index = EE_PCDATA + mode*LEN_PCDATA + 4;
                WriteEEP( index, (char)(GetHactiveStart() - PCMDATA[mode].Hstart) );
              }
              
              //-----------------------------------------------------------------------------
              //    Save ADC Gain & Offset  mod=0 default value, mod=1 current value
C51 COMPILER V9.60.0.0   PC_EEP                                                            06/22/2022 16:23:03 PAGE 13  

              //-----------------------------------------------------------------------------
              void SaveADCGainOffsetEE(BYTE mod)
              {
                BYTE i, dat;
                WORD index;
              
                index = EE_ADC_GO;
              
                for(i=0; i<4; i++) {
                  if( mod==0 ) dat = 0x80;
                  else     dat = ReadADC(i+0xd0);   // 0x1d0, 0x1d1, 0x1d2, 0x1d3
                  WriteEEP(index+i, dat);
                }
              }
              
              void GetADCGainOffsetEE(void)
              {
                BYTE i, dat;
                WORD index;
              
                index = EE_ADC_GO;
              
                for(i=0; i<4; i++) {
                  dat = ReadEEP(index+i);
                  WriteADC(i+0xd0, dat);
                }
              }
              
              #endif // SUPPORT_PC
 380          
C51 COMPILER V9.60.0.0   PC_EEP                                                            06/22/2022 16:23:03 PAGE 14  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


C51 COMPILER V9.60.0.0   PC_EEP                                                            06/22/2022 16:23:03 PAGE 15  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


LAST_TRIG_NON. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
LAST_TRIG_RIGHT. . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
LAST_TRIG_CAMC . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
LAST_TRIG_REVERSE. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
LAST_TRIG_LEFT . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
AWT_LAST_TRIGGER . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   ----    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
