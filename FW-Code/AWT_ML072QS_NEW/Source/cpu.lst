C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE CPU
OBJECT MODULE PLACED IN .\Output\cpu.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE cpu.c LARGE OPTIMIZE(9,SIZE) BROWSE INCDIR(.\Include\) DEBUG OBJECTEXTEN
                    -D CODE LISTINCLUDE SYMBOLS PRINT(.\Source\cpu.lst) TABS(2) OBJECT(.\Output\cpu.obj)

line level    source

   1          /* CPU.c */
   2          
   3          #include "config.h"
   1      =1  /*****************************************************************************/
   2      =1  /*                           System Configurations                           */
   3      =1  /*              rev 0.10 include auto test             */
   4      =1  // 0.11 change DTV, PC input initial download data correct for Charge Pump
   5      =1  // 0.12 correct phase measurement routine '>>3'
   6      =1  // 0.13 enable function for SPI control... only EXT MCU case
   7      =1  // 0.14 corrected PC measurement......
   8      =1  // 0.0a test function only for CVBS, SVIDEO
   9      =1  // 0.15 corrected DTV scaler setting for panel resolutions
  10      =1  // 0.0b panel for AND 640x480 TICON panel
  11      =1  // 0.16 corrected COMPONENT scaler setting for panel resolutions  11/21/2007
  12      =1  // 0.0c automatic chip test
  13      =1  // 0.17 add monitor function, osd grid for writing grid
  14      =1  // 0.18 add component, dtv pc for analogpanel, 12/06/2007
  15      =1  // 0.19 correct pal input for CES, 12/20/2007
  16      =1  // 0.1a CCFL control, 12/28/2007
  17      =1  // 0.19 Multi Grid for Banking on Internal MCU  01/17/2008
  18      =1  // 0.20 CCFL contol for backlight brightness  01/21/2008
  19      =1  // 0.21 CCFL contol for backlight brightness  01/25/2008
  20      =1  // 0.22 phase setting 02/07/2008
  21      =1  // 0.221 display input correction 04/03/2008
  22      =1  // 0.23 PC, DTV mode, no signal display
  23      =1  // 0.24 PC Auto Color adjustment
  24      =1  // 0.25 revised PC Auto Clock adjustment - find divide number and phase
  25      =1  // 0.26 Digital RGB for TW8826
  26      =1  // 0.27 Correct LVDS control          08/22/2008
  27      =1  // 0.28 Add WSVGA resolution          10/23/2008
  28      =1  // 0.29 Add NEW GRID              11/14/2008
  29      =1  // 0.30 Fix DTV input             12/10/2008
  30      =1  // 0.31 Add 1080i23, 24, 25A, 25B       01/20/2009
  31      =1  // 0.32 TCON setting FIX all mode       01/22/2009
  32      =1  // 0.33 autodetect is auto on/off by dip sw1  02/02/2009
  33      =1  // 0.34 Fix autocolor function and clamp position 02/08/2009
  34      =1  /*****************************************************************************/
  35      =1  #ifndef __CONFIG_H__
  36      =1  #define __CONFIG_H__
  37      =1  
  38      =1  //#define INTERNAL_MCU -- defined by Project Compiler session
  39      =1  #define   HS        
  40      =1  //#define   E_Wintek  
  41      =1  //#define   AWT 
  42      =1  //#define Holtz
  43      =1  
  44      =1  //#define QUAD
  45      =1  
  46      =1  #ifdef QUAD
           =1   #define AWT_ML072Q  //Pinchi 20150827 disable for HTRV
           =1 //  #define HTRV  //Pinchi 20140902 disable for AWT ML072Q
           =1 #else
  50      =1    #define AWT_ML072S
  51      =1  #endif
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 2   

  52      =1  
  53      =1  //--------------------------------------------------
  54      =1  //              Common Feature Define
  55      =1  //--------------------------------------------------
  56      =1  //#define FIRST_RUN_FROM_AC  //Pinchi 20150831 disable for Screen re-setting by Set4WideScreen()  //Pinchi
             - 20141029 add
  57      =1  #define SUPPORT_ML072Q_AUTO_DAY_NIGHT  //Pinchi 20150825 add for function define
  58      =1  #define SUPPORT_TRIGGER_EXIT_MENU  //Pinchi 20150827 add for exit OSD Menu by CAM trigger
  59      =1  #define SUPPORT_AC_ON_NORMAL_SCREEN  //Pinchi 20150901 add to set 4:3 screen when AC on
  60      =1  
  61      =1  #define FIX_DISPLAY_OFF_TRIGGER_ISSUE  //Pinchi 20150908 add to fix [Display] set OFF and trigger release 
             -then trigger again during display info the CAM will change from trigger CH to original CH
  62      =1  #define FIX_EXIT_STANDBY_NO_AUDIO  //Pinchi 20150908 add to fix no audio output when exit Standby mode
  63      =1  #ifdef AWT_ML072Q
           =1 #define FIX_2835_SCREEN_NOISE  //Pinchi 20160929 add to fix the screen noise of TW2835 by change DDR to ma
             -ke clock shift
           =1 #endif
  66      =1  
  67      =1  #define SUPPORT_NEW_TRIGGER_FUNCTION  /////修改新的Trigger方式減少trigger polling 時間 add by ryan@2018012
             -4
  68      =1  
  69      =1  //#define AWT_ML072QS_MSG  //Pinchi 20140925 add
  70      =1  //#define REDUCE_DELAY_TIME  //Pinchi 20141029 add
  71      =1  //#define DISPLAY_TECHWELL_LOGO  //Pinchi 2050903 add to disable the Techwell logo
  72      =1  
  73      =1  //#define SUPPORT_SVIDEO                     //andy Awt 20090914
  74      =1  //#define SUPPORT_COMPONENT     // support component analog to decoder//andy Awt 20090914
  75      =1  //#define SUPPORT_DTV           // support DTV input through component( to ADC ).//andy Awt 20090914
  76      =1  //#define SUPPORT_PC        // support PC function
  77      =1  //#define SUPPORT_DVI       // support DVI input
  78      =1  //#define SUPPORT_SDCARD
  79      =1  
  80      =1  #define SUPPORT_2835_CLK_TUNE_BACK_DOOR  //Pinchi 20160913 add to fine tune TW2835 clock by hot key
  81      =1  //#define SUPPORT_DISPLAY_TEST_VERSION  //Pinchi 20150929 add to display test software version on OSD
  82      =1  
  83      =1  //--------------------------------------------------
  84      =1  //              Model Feature Define
  85      =1  //--------------------------------------------------
  86      =1  #if (defined AWT_ML072Q) || (defined AWT_ML072S)
  87      =1  #define AWT_ML072QS_FW_RULE  //Pinchi 20140902 add
  88      =1  //#define AWT_NEW_SLIM_MODEL  //Pinchi 20150203 add for AWT new slim model
  89      =1  #define AWT_NO_SIGNAL_MSG  //Pinchi 20150319 add for display "NO VIDEO SIGNAL" by AWT request of 20150302
  90      =1  #define AWT_TW2835_DRAW_T_ICON  //Pinchi 20150415 add to draw T icon by TW2835 when CAM C trigger
  91      =1  #define SUPPORT_AC_ON_REDUCE_TIME  //Pinchi 20150903 add to reduce Power time when AC on
  92      =1  
  93      =1  //#define SUPPORT_TRIGGER_RELEASE_DELAY  //Pinchi 20150908 add to support delay time when CAM trigger rele
             -ase
  94      =1  
  95      =1  typedef enum  //Pinchi 20150326 add
  96      =1  {
  97      =1       LAST_TRIG_NON =  0x00,
  98      =1       LAST_TRIG_LEFT =   0x01,
  99      =1       LAST_TRIG_RIGHT =  0x02,
 100      =1       LAST_TRIG_REVERSE =0x03,
 101      =1       LAST_TRIG_CAMC =   0x04,
 102      =1  
 103      =1  } AWT_LAST_TRIGGER;
 104      =1  
 105      =1  #endif
 106      =1  
 107      =1  
 108      =1  #ifdef HTRV  //Pinchi 20150825 add
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 3   

           =1 #define HTRV_ML072Q_FW_RULE  //Pinchi 20150827 add
           =1 #define HTRV_REDUCE_SCREEN_CHANGE  //Pinchi 20150828 add to reduce screen double change
           =1 
           =1 #if 0  //Pinchi 20151209 add to remove 4:3 screen by HTRV request of 20151209
           =1 #define HTRV_SUPPORT_4_3_SCREEN
           =1 #else
           =1 #undef SUPPORT_AC_ON_NORMAL_SCREEN  //Pinchi 20151210 add
           =1 #endif
           =1 
           =1 #endif
 119      =1  
 120      =1  //#define SUPPORT_RS485
 121      =1  //-----------------------------------------------------------------------------
 122      =1  //    Firmware Version
 123      =1  //-----------------------------------------------------------------------------
 124      =1  #ifdef HTRV  //Pinchi 20150907 add
           =1 //#define FWVER     0x200 // Rev 2.00
           =1 //#define FWVER     0x210   // Rev 2.1  //Pinchi 20151209 update version for HTRV request to remove 4:3 scree
             -n
           =1 //#define FWVER     0x220   // Rev 2.2  //Pinchi 20160929 change for V2.2
           =1 #define FWVER     0x230     //Rev 2.3    ryan@20170727 update version by Encoder switches零件 EOL更換
           =1 #else
 130      =1  #define FWVER     0x210   // Rev 0.14
 131      =1  #endif
 132      =1  
 133      =1  //-----------------------------------------------------------------------------
 134      =1  //    Compiler
 135      =1  //-----------------------------------------------------------------------------
 136      =1  #define KEILC           // Keil C 5.0
 137      =1  //-----------------------------------------------------------------------------
 138      =1  //    MPU Clock
 139      =1  //-----------------------------------------------------------------------------
 140      =1  #ifndef INTERNAL_MCU
 141      =1  //#define CLOCK_11M         // 11.0592MHz
 142      =1  #define CLOCK_22M         // 22.1184MHz
 143      =1  #else                 // INTERNAL_MCU
           =1 #define CLOCK_27M         // 27MHz
           =1 #define REG_START_ADDRESS 0xc000    // register start 0xc000, for page0, 0xc100-page1 
           =1 #endif
 147      =1  //-----------------------------------------------------------------------------
 148      =1  //    TW88 Version
 149      =1  //-----------------------------------------------------------------------------
 150      =1  #define TW8816   ///AWT TW8806 change to TW8816 platform //ryan@20170921
 151      =1  //-----------------------------------------------------------------------------
 152      =1  //-----------------------------------------------------------------------------
 153      =1  //    Options for Backlight control
 154      =1  //-----------------------------------------------------------------------------
 155      =1  //#define BACKLIGHT_CCFL
 156      =1  //#define BACKLIGHT_LED
 157      =1  #define BACKLIGHT_PWM
 158      =1  
 159      =1  //-----------------------------------------------------------------------------
 160      =1  //    Panel Resolution
 161      =1  //-----------------------------------------------------------------------------
 162      =1  // ---- Select Default Panel
 163      =1  //
 164      =1  //#define UXGA            // 1600 x 1200
 165      =1  //#define SXGA              // 1280 x 1024
 166      =1  //#define XGA  // 1024 x 768
 167      =1  #ifdef XGA
           =1   #define LVDS          
           =1   #define PWIDTH  1024
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 4   

           =1   #define PHEIGHT 768
           =1 #endif
 172      =1  //#define SVGA            //  800 x 600
 173      =1  //#define VGA             //  640 x 480
 174      =1  #ifdef VGA
           =1   #define PWIDTH  640
           =1   #define PHEIGHT 480
           =1   //#define HITACHI_640_B_160   //--> 640 x 160
           =1   #define AND_640_480
           =1 #endif
 180      =1  //#define WXGA            // 1280 x 768 (15:9) // 1366 x 768 (16:9)
 181      =1  #ifdef WXGA
           =1     //#define WX_SHARP_LQ106K1LA
           =1   #define PWIDTH  1280
           =1   #define PHEIGHT 768
           =1 #endif
 186      =1  //#define WSVGA           // 1024 x 600 *** only video mode
 187      =1  #ifdef WSVGA
           =1   #define PWIDTH  1024
           =1   #define PHEIGHT 600
           =1   #define UNIDEN_1024_600
           =1 #endif
 192      =1  #define WVGA            //  800 x 480
 193      =1  #ifdef WVGA
 194      =1    #define PWIDTH  800
 195      =1    #define PHEIGHT 480//600
 196      =1    // If WVGA, you have to select panel.
 197      =1    //#define AU_10INCH
 198      =1    //#define WVGA_TPO
 199      =1    //#define SAMSUNG_10INCH
 200      =1    //#define SAMSUNG_TICONLESS_10INCH
 201      =1    //#define SHARP_TICONLESS_7INCH
 202      =1    //#define AU_TICONLESS_7INCH
 203      =1    //#define AU_G084SN05V8_8_4INCH 
 204      =1    #define HSD070IDW1_7INCH
 205      =1    //#define INNOLUX_AT080TN03
 206      =1    //#define AU_TICONLESS_7INCH_CCFL
 207      =1    //#define CMO     // CHIMEI panel
 208      =1    //#define AU_TICONLESS_10INCH
 209      =1    //#define HITACHI_T01
 210      =1    //#define HITACHI_TX23D12
 211      =1    //#define HITACHI_TX18D24
 212      =1    //#define HITACHI_TX18D16
 213      =1    //#define TMD_LTA070A320F
 214      =1    //#define TMD_LTA080B
 215      =1  #endif  //WVGA
 216      =1  //#define HVGA            //  480 x 320
 217      =1  //#define QVGA            //  320 x 240 *** only video mode
 218      =1  #ifdef QVGA
           =1   #define PWIDTH  320
           =1   #define PHEIGHT 240
           =1   //#define HITACHI_TX09D73
           =1   //#define AU_DELTARGB
           =1   //#define SHARP_LQ050Q5DR01
           =1   //#define SHARP_LQ035
           =1   //#define TMD
           =1 #endif
 227      =1  
 228      =1  //#define WQVGA           //  480 x 234 *** only video mode
 229      =1  #ifdef WQVGA
           =1   #define PWIDTH  480
           =1   #define PHEIGHT 240
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 5   

           =1   // If WQVGA, you have to select panel 
           =1     #define ANALOG_7INCH
           =1   //#define PWIDTH  400
           =1   //#define PHEIGHT 240
           =1   //#define SHARP_LQ043T3DX02   //  400 x 237
           =1   //#define LG_ANALOG
           =1   //#define TMD_ANALOG        //TMD_LTA05B352A
           =1   //#define T_51945GD       // Optorex Panel
           =1 #endif  // WQVGA
 241      =1  
 242      =1  //if LVDS pannel disable TICONLESS
 243      =1  
 244      =1  //-----------------------------------------------------------------------------
 245      =1  //---- Add Support One more panel with DIPSW#1
 246      =1  //---- Ex. Add Analog AU 7" Panel with Default Panel for evalution
 247      =1  //#define ADD_ANALOGPANEL   // Added Analog panel(AU7") from default set panel(expect WQVGA) with DIP #1 sw
             -itch.(DIP#1=L:ANALOG, H:DEFAULT)
 248      =1                // It can't support WQVGA and ADD_ANALOGPANEL same time!!
 249      =1    //#define ADD_ANALOG_7INCH
 250      =1    //#define ADD_TMD_LTA05B352A
 251      =1                    
 252      =1  //---- Support Wide panel function
 253      =1  #if (defined WXGA) || (defined WSVGA) || (defined WVGA) || (defined WQVGA)
 254      =1  #if 0///ryan@20180115//mask for NTSC sharpness issue
           =1 #define WIDE_SCREEN         // Can support 4 display mode, i.e. Normal, Wide, Full, Zoom
           =1 #endif
 257      =1  #endif                // Tested panasonic WVGA panel.
 258      =1  
 259      =1  //-----------------------------------------------------------------------------
 260      =1  //    Panel Vendor Specific
 261      =1  //-----------------------------------------------------------------------------
 262      =1  
 263      =1  //-----------------------------------------------------------------------------
 264      =1  //    TV Tuner
 265      =1  //-----------------------------------------------------------------------------
 266      =1  #define PHILIPS       0
 267      =1  #define ALPS        1   // ALPS, LG
 268      =1  #define TEMIC       2
 269      =1  #define TVAVA       3
 270      =1  #define LGTUNER       4
 271      =1  #define SAMSUNGMUTITUNER  5
 272      =1  
 273      =1  #define TVTunerDevice   4
 274      =1  //-----------------------------------------------------------------------------
 275      =1  //    IR Remote Controller Type
 276      =1  //-----------------------------------------------------------------------------
 277      =1  //#define REMO_RC5          // RC5 style
 278      =1  #define TECHWELL_REMOCON
 279      =1  //#define REMO_NEC          // NEC style
 280      =1  //#define PHILIPS_REMOCON // New remocon 
 281      =1  
 282      =1  //-----------------------------------------------------------------------------
 283      =1  //    I2C Device Access Address Mapping
 284      =1  //-----------------------------------------------------------------------------
 285      =1  
 286      =1  #define EEPROMI2CAddress  0xa0  // EEPROM (24C16)
 287      =1  #define TW88I2CAddress    0x8a  // TW880x
 288      =1  
 289      =1  #define MSPI2CAddress   0x80  // MSP
 290      =1  #define ALC106I2CAddress  0x4A  // MSP
 291      =1  //-----------------------------------------------------------------------------
 292      =1  //    Options for Possible Inputs
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 6   

 293      =1  //-----------------------------------------------------------------------------
 294      =1  
 295      =1  
 296      =1  //-----------------------------------------------------------------------------
 297      =1  //    Options for Possible Standards
 298      =1  //    Default:NTSC
 299      =1  //-----------------------------------------------------------------------------
 300      =1  #define SUPPORT_PAL     
 301      =1  #define SUPPORT_SECAM
 302      =1  #define SUPPORT_NTSC4   
 303      =1  #define SUPPORT_PALM  
 304      =1  #define SUPPORT_PALN    
 305      =1  #define SUPPORT_PAL60   
 306      =1  
 307      =1  //#define ID_CHECK_BY_FW        // in Video mode, check input system ID by firmware
 308      =1  
 309      =1  //-----------------------------------------------------------------------------
 310      =1  //    Options for Debugging/Release
 311      =1  //-----------------------------------------------------------------------------
 312      =1  //#define SUPPORT_PATTERN       // support LCD test pattern
 313      =1  
 314      =1  #ifndef WQVGA
 315      =1    #ifndef QVGA
 316      =1  #define SUPPORT_OSDPOSITIONMOVE
 317      =1    #endif
 318      =1  #endif
 319      =1  
 320      =1  #define SERIAL              // include serial communication routines
 321      =1  
 322      =1  //#define SUPPORT_DEBUG       // Support to use Read & Write in debug OSD Window by remocon.
 323      =1  
 324      =1  //#define DEBUG           // include debug information
 325      =1  #ifdef DEBUG
           =1   //#define DEBUG_MAIN
           =1   //#define DEBUG_TIME
           =1   //#define DEBUG_KEYREMO
           =1   //#define DEBUG_TW88
           =1   //#define DEBUG_DECODER
           =1   //#define DEBUG_I2C
           =1   //#define DEBUG_EEP
           =1   //#define DEBUG_OSD
           =1   //#define DEBUG_AUDIO
           =1   //#define DEBUG_SETPANEL
           =1   //#define DEBUG_DTV
           =1 //  #define DEBUG_PC
           =1   //#define DEBUG_PC_MEAS
           =1   //#define DEBUG_PC_COLOR
           =1   //#define DEBUG_COMPONENT
           =1   //#define DEBUG_BANK
           =1   //#define DEBUG_PAUSE
           =1   //#define DEBUG_MCU
           =1 #endif
 345      =1  
 346      =1  #define AUTOCALC_PC         // in PC mode, Enable Auto Calcuration
 347      =1  //#define SUPPORT_USERCOLORFROMTXT  // Use color setting of text file in Color mode=USER MODE which is as B
             -rightness(Reg10), Contast(Reg11),
 348      =1                    //    Sat_U(Reg13),Sat_V(Reg14),Sharpness(Reg12,Reg78)                  
 349      =1  //#define SUPPORT_GAMMA
 350      =1  
 351      =1  //#define CHIP_MANUAL_TEST      // DIPSW#1
 352      =1  
 353      =1  #ifndef INTERNAL_MCU
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 7   

 354      =1  //#define NO_INITIALIZE       // After Power switch turn on with DIP SW4 Enable(Low), or pressed MENU button 
             -for internal MCU
 355      =1                                      //     micom works to access only I2C bus by serial command.
 356      =1  #endif
 357      =1  
 358      =1  //#define SUPPORT_KRS_OSDDEMO   // For KRS Company Demo 
 359      =1  //#define SUPPORT_LINE_OSDDEMO
 360      =1  
 361      =1  //-----------------------------------------------------------------------------
 362      =1  //    Special Features
 363      =1  //-----------------------------------------------------------------------------
 364      =1  
 365      =1  #ifndef INTERNAL_MCU
 366      =1  //#define SUPPORT_DELTA_RGB
 367      =1  #endif
 368      =1  #define SUPPORT_SELECTKEY     // choose the keymap of using select key or left,right key.
 369      =1  //-----------------------------------------------------------------------------
 370      =1  
 371      =1  //#define HS_NEWOSDMENU     //Weylis -@121008 for Hor. Style OSD
 372      =1  //#define HS_NEWOSDMENU_2     //Weylis -@121008 for Hor. Style OSD(2 line)
 373      =1  
 374      =1  #endif  //__CONFIG_H__
 375      =1  
   4          
   5          #include "typedefs.h"
   1      =1  #ifndef __TYPEDEFS__
   2      =1  #define __TYPEDEFS__
   3      =1  
   4      =1  
   5      =1  #define DATA    data
   6      =1  #define PDATA   pdata
   7      =1  #define IDATA   data
   8      =1  #define CODE    code
   9      =1  #define CODE_P
  10      =1  #define PDATA_P
  11      =1  #define IDATA_P
  12      =1  #define DATA_P
  13      =1  
  14      =1  #define INTERRUPT( num, name ) name() interrupt num
  15      =1  
  16      =1  #define _between(x, a, b) (a<=x && x<=b)
  17      =1  #define _swap(a, b)     { a^=b; b^=a; a^=b; }
  18      =1  
  19      =1  typedef unsigned char Register;
  20      =1  typedef unsigned char BYTE;
  21      =1  typedef unsigned short  WORD;
  22      =1  typedef unsigned long DWORD;
  23      =1  
  24      =1  #define TRUE  1
  25      =1  #define FALSE 0
  26      =1  
  27      =1  //VInputStdDetectMode
  28      =1  #define AUTO  0
  29      =1  
  30      =1  //VInputStd
  31      =1  #define NTSC  1     
  32      =1  #define PAL   2
  33      =1  #define SECAM 3
  34      =1  #define NTSC4 4
  35      =1  #define PALM  5
  36      =1  #define PALN  6
  37      =1  #define PAL60 7
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 8   

  38      =1  
  39      =1  #define MAXINPUTSTD PAL60+1 // 
  40      =1  
  41      =1  #define UNKNOWN 0xfe
  42      =1  #define NOINPUT 0 //0xff
  43      =1  
  44      =1  #define NIL     0xff
  45      =1  
  46      =1  enum SourceModeTypeEnum
  47      =1  { 
  48      =1    AVMode,      // 0   0X00
  49      =1    //VGAMode,       // 1
  50      =1  #ifdef USE_CAMD 
           =1   CAM_D,         // 2
           =1 #endif
  53      =1    CAM_A,         // 3   0x01
  54      =1    CAM_B,         // 4   0x02
  55      =1    CAM_C,         // 5   0x03
  56      =1    CAM_R,         // 6   0x04
  57      =1    CAM_AB,        // 7   0x05
  58      =1    CAM_CR,        // 8   0x06
  59      =1    CAM_AR,        // 9   0x07
  60      =1    CAM_RB,        // 10    0x08
  61      =1    CAM_AC,        // 11    0x09
  62      =1    CAM_CB,        // 12    0x0a
  63      =1    CAM_RAB_T,     // 13    0x0b
  64      =1    CAM_RAB_H,     // 14    0x0c
  65      =1  
  66      =1    #ifdef HTRV
           =1   CAM_RC,
           =1   #endif
  69      =1    
  70      =1    CAM_QUAD,      // 15    0x0d
  71      =1    CAM_ABR_T3,    // 16    0x0e
  72      =1    CAM_ABR_T4,    // 17    0x0f
  73      =1    CAM_RAC_T,      //  0x10
  74      =1    CAM_RBC_T,      //  0x11
  75      =1    CAM_RAC_T2,     //  0x12
  76      =1    CAM_RBC_T2,     //  0x13
  77      =1    CAM_BA,       //  0x14
  78      =1    CAM_BC,       //  0x15
  79      =1    CAM_BR,       //  0x16
  80      =1    CAM_CA,       //  0x17
  81      =1    CAM_ABC,      //  0x18
  82      =1    CAM_ABR,      //  0x19
  83      =1    CAM_ACR,      //  0x1a
  84      =1    CAM_BAC,      //  0x1b
  85      =1    CAM_BAR,      //  0x1c
  86      =1    CAM_BCR,      //  0x1d
  87      =1    CAM_CAB,      //  0x1e
  88      =1    CAM_CAR,      //  0x1f
  89      =1    CAM_CBR,      //  0x20
  90      =1    SEQ,           // 18      0x10
  91      =1    CAM_NUM
  92      =1  };
  93      =1  
  94      =1  typedef unsigned char SourceModeType;
  95      =1  
  96      =1  #endif  /* __TYPEDEFS__ */
  97      =1  
   6          #include "reg.h"
   1      =1  //
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 9   

   2      =1  //Registers.h : Register declaration
   3      =1  //
   4      =1  
   5      =1  #ifndef __REGISTERS__
   6      =1  #define __REGISTERS__
   7      =1  
   8      =1  #ifdef INTERNAL_MCU
           =1 /*  BYTE Registers  */
           =1 sfr P0    = 0x80;
           =1 sfr P1    = 0x90;
           =1 sfr P2    = 0xA0;
           =1 sfr P3    = 0xB0;
           =1 sfr PSW   = 0xD0;
           =1 sfr ACC   = 0xE0;
           =1 sfr B     = 0xF0;
           =1 sfr SP    = 0x81;
           =1 sfr DPL   = 0x82;
           =1 sfr DPH   = 0x83;
           =1 sfr PCON  = 0x87;
           =1 sfr TCON  = 0x88;
           =1 sfr TMOD  = 0x89;
           =1 sfr TL0   = 0x8A;
           =1 sfr TL1   = 0x8B;
           =1 sfr TH0   = 0x8C;
           =1 sfr TH1   = 0x8D;
           =1 sfr IE    = 0xA8;
           =1 sfr IP    = 0xB8;
           =1 sfr SCON  = 0x98;
           =1 sfr SBUF  = 0x99;
           =1 
           =1 //sfr P4    = 0xd8;
           =1 
           =1 /*  8052 Extensions  */
           =1 sfr EXIF  = 0x91;   // external interrupt 2,3,4,5 flags should be cleared by software
           =1 sfr T2CON = 0xC8;
           =1 sfr RCAP2L = 0xCA;
           =1 sfr RCAP2H = 0xCB;
           =1 sfr TL2   = 0xCC;
           =1 sfr TH2   = 0xCD;
           =1 sfr EICON = 0xD8;
           =1 sfr EIE   = 0xE8;
           =1 sfr EIP   = 0xF8;
           =1 
           =1 /*  TW88 Core Extension */
           =1 sfr BANKREG   = 0x9A;
           =1 sfr SPICONTROL  = 0x9B;
           =1 sfr T0HIGH    = 0x9C;
           =1 sfr T0LOW     = 0x9D;
           =1 sfr T1HIGH    = 0x9E;
           =1 sfr T1LOW     = 0x9F;
           =1 sfr T2HIGH    = 0x93;
           =1 sfr T2LOW     = 0x94;
           =1 
           =1 /*  BIT Registers  */
           =1 /*  PSW  */
           =1 sbit CY    = 0xD7;
           =1 sbit AC    = 0xD6;
           =1 sbit F0    = 0xD5;
           =1 sbit RS1   = 0xD4;
           =1 sbit RS0   = 0xD3;
           =1 sbit OV    = 0xD2;
           =1 sbit P     = 0xD0;
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 10  

           =1 
           =1 /*  TCON  */
           =1 sbit TF1   = 0x8F;
           =1 sbit TR1   = 0x8E;
           =1 sbit TF0   = 0x8D;
           =1 sbit TR0   = 0x8C;
           =1 sbit IE1   = 0x8B;
           =1 sbit IT1   = 0x8A;
           =1 sbit IE0   = 0x89;
           =1 sbit IT0   = 0x88;
           =1 
           =1 /*  IE  */
           =1 sbit EA    = 0xAF;
           =1 sbit ES    = 0xAC;
           =1 sbit ET1   = 0xAB;
           =1 sbit EX1   = 0xAA;
           =1 sbit ET0   = 0xA9;
           =1 sbit EX0   = 0xA8;
           =1 
           =1 /*  EIE  */
           =1 sbit EWDI  = 0xEC;    // Watch dog timer interrupt enable
           =1 sbit EX5   = 0xEB;    // external interrupt 5 enable
           =1 sbit EX4   = 0xEA;    // external interrupt 4 enable
           =1 sbit EX3   = 0xE9;    // external interrupt 3 enable
           =1 sbit EX2   = 0xE8;    // external interrupt 2 enable
           =1 
           =1 /*  IP  */
           =1 sbit PS    = 0xBC;
           =1 sbit PT1   = 0xBB;
           =1 sbit PX1   = 0xBA;
           =1 sbit PT0   = 0xB9;
           =1 sbit PX0   = 0xB8;
           =1 
           =1 /*  EIP  */
           =1 sbit PWDI  = 0xFC;    // Watch dog timer interrupt priority
           =1 sbit PX5   = 0xFB;    // external interrupt5 priority
           =1 sbit PX4   = 0xFA;    // external interrupt4 priority
           =1 sbit PX3   = 0xF9;    // external interrupt3 priority
           =1 sbit PX2   = 0xF8;    // external interrupt2 priority
           =1 
           =1 /*  P3  */
           =1 sbit RD    = 0xB7;
           =1 sbit WR    = 0xB6;
           =1 sbit T1    = 0xB5;
           =1 sbit T0    = 0xB4;
           =1 sbit INT1  = 0xB3;
           =1 sbit INT0  = 0xB2;
           =1 sbit TXD   = 0xB1;
           =1 sbit RXD   = 0xB0;
           =1 
           =1 /*  SCON  */
           =1 sbit SM0   = 0x9F;
           =1 sbit SM1   = 0x9E;
           =1 sbit SM2   = 0x9D;
           =1 sbit REN   = 0x9C;
           =1 sbit TB8   = 0x9B;
           =1 sbit RB8   = 0x9A;
           =1 sbit TI    = 0x99;
           =1 sbit RI    = 0x98;
           =1 
           =1 /*  8052 Extensions  */
           =1 /*  IE  */
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 11  

           =1 sbit ET2   = 0xAD;
           =1 
           =1 /*  IP  */
           =1 sbit PT2   = 0xBD;
           =1 
           =1 /*  P1  */
           =1 sbit T2EX  = 0x91;
           =1 sbit T2    = 0x90;
           =1              
           =1 /*  T2CON  */
           =1 sbit TF2   = 0xCF;
           =1 sbit EXF2  = 0xCE;
           =1 sbit RCLK  = 0xCD;
           =1 sbit TCLK  = 0xCC;
           =1 sbit EXEN2 = 0xCB;
           =1 sbit TR2   = 0xCA;
           =1 sbit C_T2  = 0xC9;
           =1 sbit CP_RL2= 0xC8;
           =1 
           =1 sfr CHPENR = 0xF6;
           =1 sfr CHPCON = 0xBF;
           =1 sfr SFRAL  = 0xC4;
           =1 sfr SFRAH  = 0xC5;
           =1 sfr SFRFD  = 0xC6;
           =1 sfr SFRCN  = 0xC7;
           =1 
           =1 sbit P0_0  = 0x80;
           =1 sbit P0_1  = 0x81;
           =1 sbit P0_2  = 0x82;
           =1 sbit P0_3  = 0x83;
           =1 sbit P0_4  = 0x84;
           =1 sbit P0_5  = 0x85;
           =1 sbit P0_6  = 0x86;
           =1 sbit P0_7  = 0x87;
           =1 
           =1 sbit P1_0  = 0x90;
           =1 sbit P1_1  = 0x91;
           =1 sbit P1_2  = 0x92;
           =1 sbit P1_3  = 0x93;
           =1 sbit P1_4  = 0x94;
           =1 sbit P1_5  = 0x95;
           =1 sbit P1_6  = 0x96;
           =1 sbit P1_7  = 0x97;
           =1 
           =1 sbit P2_0  = 0xa0;
           =1 sbit P2_1  = 0xa1;
           =1 sbit P2_2  = 0xa2;
           =1 sbit P2_3  = 0xa3;
           =1 sbit P2_4  = 0xa4;
           =1 sbit P2_5  = 0xa5;
           =1 sbit P2_6  = 0xa6;
           =1 sbit P2_7  = 0xa7;
           =1 
           =1 sbit P3_0  = 0xb0;
           =1 sbit P3_1  = 0xb1;
           =1 sbit P3_2  = 0xb2;
           =1 sbit P3_3  = 0xb3;
           =1 sbit P3_4  = 0xb4;
           =1 sbit P3_5  = 0xb5;
           =1 sbit P3_6  = 0xb6;
           =1 sbit P3_7  = 0xb7;
           =1 
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 12  

           =1 #else // external MCU=WINBOND
 189      =1  /*  BYTE Registers  */
 190      =1  sfr P0    = 0x80;
 191      =1  sfr P1    = 0x90;
 192      =1  sfr P2    = 0xA0;
 193      =1  sfr P3    = 0xB0;
 194      =1  sfr PSW   = 0xD0;
 195      =1  sfr ACC   = 0xE0;
 196      =1  sfr B     = 0xF0;
 197      =1  sfr SP    = 0x81;
 198      =1  sfr DPL   = 0x82;
 199      =1  sfr DPH   = 0x83;
 200      =1  sfr PCON  = 0x87;
 201      =1  sfr TCON  = 0x88;
 202      =1  sfr TMOD  = 0x89;
 203      =1  sfr TL0   = 0x8A;
 204      =1  sfr TL1   = 0x8B;
 205      =1  sfr TH0   = 0x8C;
 206      =1  sfr TH1   = 0x8D;
 207      =1  sfr CKCON = 0x8E;   //clock control register, default =0x01
 208      =1  sfr IE    = 0xA8;
 209      =1  sfr IP    = 0xB8;
 210      =1  sfr SCON  = 0x98;
 211      =1  sfr SBUF  = 0x99;
 212      =1  sfr P4 = 0xE8; //Megawin Ryan@970716
 213      =1  //sfr P4    = 0xa5;      //SST MCU
 214      =1  //sfr P4    = 0xd8;   //winbond<960820>
 215      =1  
 216      =1  /*  8052 Extensions  */
 217      =1  sfr ADCTL = 0xC5;   //william-20111017
 218      =1  sfr ADCV = 0xC6;    //william-20111017
 219      =1  sfr ADCVL = 0xE8;   //william-20111017
 220      =1  sfr T2CON = 0xC8;
 221      =1  sfr RCAP2L = 0xCA;
 222      =1  sfr RCAP2H = 0xCB;
 223      =1  sfr TL2   = 0xCC;
 224      =1  sfr TH2   = 0xCD;
 225      =1  
 226      =1  // for UART2
 227      =1  sfr S2CON  = 0xAA;
 228      =1  sfr S2BRT  = 0xBA;
 229      =1  sfr S2BUF  = 0x9A;
 230      =1  sfr AUXR2  = 0xA6;
 231      =1  sfr AUXIE  = 0xAD;
 232      =1  
 233      =1  sfr P1M0  = 0x91;
 234      =1  sfr P1M1  = 0x92;
 235      =1  sfr P0M0  = 0x93;
 236      =1  sfr P0M1  = 0x94;
 237      =1  sfr P2M0  = 0x95;
 238      =1  sfr P2M1  = 0x96;
 239      =1  sfr P3M0  = 0xB1;
 240      =1  sfr P3M1  = 0xB2;
 241      =1  
 242      =1  // for PCA
 243      =1  sfr CCON   = 0xD8;
 244      =1  sfr CMOD   = 0xD9;
 245      =1  sfr CCAPM0 = 0xDA;
 246      =1  sfr CCAPM1 = 0xDB;
 247      =1  sfr CCAPM2 = 0xDC;
 248      =1  sfr CCAPM3 = 0xDD;
 249      =1  sfr CCAPM4 = 0xDE;
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 13  

 250      =1  sfr CCAPM5 = 0xDF;
 251      =1  sfr CL     = 0xE9;
 252      =1  sfr CH     = 0xF9;
 253      =1  sfr CCAP0L = 0xEA;
 254      =1  sfr CCAP0H = 0xFA;
 255      =1  sfr CCAP1L = 0xEB;
 256      =1  sfr CCAP1H = 0xFB;
 257      =1  sfr CCAP2L = 0xEC;
 258      =1  sfr CCAP2H = 0xFC;
 259      =1  sfr CCAP3L = 0xED;
 260      =1  sfr CCAP3H = 0xFD;
 261      =1  sfr CCAP4L = 0xEE;
 262      =1  sfr CCAP4H = 0xFE;
 263      =1  sfr CCAP5L = 0xEF;
 264      =1  sfr CCAP5H = 0xFF;
 265      =1  sfr PCAPWM0= 0xF2;
 266      =1  sfr PCAPWM1= 0xF3;
 267      =1  sfr PCAPWM2= 0xF4;
 268      =1  sfr PCAPWM3= 0xF5;
 269      =1  sfr PCAPWM4= 0xF6;
 270      =1  sfr PCAPWM5= 0xF7;
 271      =1  
 272      =1  /*  BIT Registers  */
 273      =1  /*  PSW  */
 274      =1  sbit CY    = 0xD7;
 275      =1  sbit AC    = 0xD6;
 276      =1  sbit F0    = 0xD5;
 277      =1  sbit RS1   = 0xD4;
 278      =1  sbit RS0   = 0xD3;
 279      =1  sbit OV    = 0xD2;
 280      =1  sbit P     = 0xD0;
 281      =1  
 282      =1  /*  TCON  */
 283      =1  sbit TF1   = 0x8F;
 284      =1  sbit TR1   = 0x8E;
 285      =1  sbit TF0   = 0x8D;
 286      =1  sbit TR0   = 0x8C;
 287      =1  sbit IE1   = 0x8B;
 288      =1  sbit IT1   = 0x8A;
 289      =1  sbit IE0   = 0x89;
 290      =1  sbit IT0   = 0x88;
 291      =1  
 292      =1  /*  IE  */
 293      =1  sbit EA    = 0xAF;
 294      =1  sbit ES    = 0xAC;
 295      =1  sbit ET1   = 0xAB;
 296      =1  sbit EX1   = 0xAA;
 297      =1  sbit ET0   = 0xA9;
 298      =1  sbit EX0   = 0xA8;
 299      =1  
 300      =1  /*  IP  */
 301      =1  sbit PS    = 0xBC;
 302      =1  sbit PT1   = 0xBB;
 303      =1  sbit PX1   = 0xBA;
 304      =1  sbit PT0   = 0xB9;
 305      =1  sbit PX0   = 0xB8;
 306      =1  
 307      =1  /*  P3  */
 308      =1  sbit RD    = 0xB7;
 309      =1  sbit WR    = 0xB6;
 310      =1  sbit T1    = 0xB5;
 311      =1  sbit T0    = 0xB4;
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 14  

 312      =1  sbit INT1  = 0xB3;
 313      =1  sbit INT0  = 0xB2;
 314      =1  sbit TXD   = 0xB1;
 315      =1  sbit RXD   = 0xB0;
 316      =1  
 317      =1  /*  SCON  */
 318      =1  sbit SM0   = 0x9F;
 319      =1  sbit SM1   = 0x9E;
 320      =1  sbit SM2   = 0x9D;
 321      =1  sbit REN   = 0x9C;
 322      =1  sbit TB8   = 0x9B;
 323      =1  sbit RB8   = 0x9A;
 324      =1  sbit TI    = 0x99;
 325      =1  sbit RI    = 0x98;
 326      =1  
 327      =1  /*  8052 Extensions  */
 328      =1  /*  IE  */
 329      =1  sbit ET2   = 0xAD;
 330      =1  
 331      =1  /*  IP  */
 332      =1  sbit PT2   = 0xBD;
 333      =1  
 334      =1  /*  P1  */
 335      =1  sbit T2EX  = 0x91;
 336      =1  sbit T2    = 0x90;
 337      =1               
 338      =1  /*  T2CON  */
 339      =1  sbit TF2   = 0xCF;
 340      =1  sbit EXF2  = 0xCE;
 341      =1  sbit RCLK  = 0xCD;
 342      =1  sbit TCLK  = 0xCC;
 343      =1  sbit EXEN2 = 0xCB;
 344      =1  sbit TR2   = 0xCA;
 345      =1  sbit C_T2  = 0xC9;
 346      =1  sbit CP_RL2= 0xC8;
 347      =1  
 348      =1  sfr CHPENR = 0xF6;
 349      =1  sfr CHPCON = 0xBF;
 350      =1  sfr SFRAL  = 0xC4;
 351      =1  sfr SFRAH  = 0xC5;
 352      =1  sfr SFRFD  = 0xC6;
 353      =1  sfr SFRCN  = 0xC7;
 354      =1  
 355      =1  sbit P0_0  = 0x80;
 356      =1  sbit P0_1  = 0x81;
 357      =1  sbit P0_2  = 0x82;
 358      =1  sbit P0_3  = 0x83;
 359      =1  sbit P0_4  = 0x84;
 360      =1  sbit P0_5  = 0x85;
 361      =1  sbit P0_6  = 0x86;
 362      =1  sbit P0_7  = 0x87;
 363      =1  
 364      =1  sbit P1_0  = 0x90;
 365      =1  sbit P1_1  = 0x91;
 366      =1  sbit P1_2  = 0x92;
 367      =1  sbit P1_3  = 0x93;
 368      =1  sbit P1_4  = 0x94;
 369      =1  sbit P1_5  = 0x95;
 370      =1  sbit P1_6  = 0x96;
 371      =1  sbit P1_7  = 0x97;
 372      =1  
 373      =1  sbit P2_0  = 0xa0;
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 15  

 374      =1  sbit P2_1  = 0xa1;
 375      =1  sbit P2_2  = 0xa2;
 376      =1  sbit P2_3  = 0xa3;
 377      =1  sbit P2_4  = 0xa4;
 378      =1  sbit P2_5  = 0xa5;
 379      =1  sbit P2_6  = 0xa6;
 380      =1  sbit P2_7  = 0xa7;
 381      =1  
 382      =1  sbit P3_0  = 0xb0;
 383      =1  sbit P3_1  = 0xb1;
 384      =1  sbit P3_2  = 0xb2;
 385      =1  sbit P3_3  = 0xb3;
 386      =1  sbit P3_4  = 0xb4;
 387      =1  sbit P3_5  = 0xb5;
 388      =1  sbit P3_6  = 0xb6;
 389      =1  sbit P3_7  = 0xb7;
 390      =1  
 391      =1  sbit P4_0  = P4^0;
 392      =1  sbit P4_1  = P4^1;
 393      =1  sbit INT3  = P4^2;
 394      =1  sbit INT2  = P4^3;
 395      =1  
 396      =1  sfr P4M0  = 0xB3;
 397      =1  sfr P4M1  = 0xB4;
 398      =1  #endif  // INTERNAL_MCU
 399      =1  
 400      =1  #endif  //__REGISTERS__
 401      =1  
   7          #include "regmap.h"
   1      =1  #ifndef __REGMAP__
   2      =1  #define __REGMAP__
   3      =1  
   4      =1  //-----------------------------------------------------------------------------
   5      =1  //        Individual Decoder Registers 
   6      =1  //-----------------------------------------------------------------------------
   7      =1  
   8      =1  #define MCU_STOP_MODE 0xc8  // bit 7 is mcu stop, bit5 is MCU debug
   9      =1  
  10      =1  #define LAD0      0xc9  // Low speed AD channel 0
  11      =1  #define LAD1      0xca  // Low speed AD channel 1
  12      =1  
  13      =1  #define REG_PAGE    0xff
  14      =1  #define STATUS0     0xd0
  15      =1  #define STATUS1     0xd1
  16      =1  #define IRQ_EN1     0xd2
  17      =1  #define IRQ_EN0     0xd3
  18      =1  
  19      =1  //-----------------------------------------------------------------------------
  20      =1  //        Individual Decoder Registers 
  21      =1  //-----------------------------------------------------------------------------
  22      =1  
  23      =1  #define DECODERADDRESS  TW88I2CAddress
  24      =1  
  25      =1  #define CVFMT     0x1e  // Component Video Format
  26      =1  #define FBSHIFT     0x38  // RGB Anti-Alias Filter/FB Shift Level
  27      =1  #define SHUE      0x3e  // RGB Hue
  28      =1  #define SCONTRAST   0x3b  // RGB Contrast
  29      =1  #define SBRIGHT     0x3a  // RGB Brightness
  30      =1  #define SCbGAIN     0x3c  // RGB Cb Gain
  31      =1  #define SCrGAIN     0x3d  // RGB Cb Gain
  32      =1  #define RGBCONTROL    0x36  // RGB Powerdown..
  33      =1  #define RGBMISC     0x39
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 16  

  34      =1  #define FBCONTRL    0x3F
  35      =1  
  36      =1  //#define OSD_ADJ     0xce
  37      =1  #define PNLSHARPNESS  0x78  // Sharpness Control
  38      =1  #define OSDWINSTATUS  0x95
  39      =1  //-----------------------------------------------------------------------------
  40      =1  //        Common Registers
  41      =1  //-----------------------------------------------------------------------------
  42      =1  #define CSTATUS     0x01  // Chip Status
  43      =1  #define INFORM      0x02  // Input Format
  44      =1  #define ACNTL     0x06  // Analog Control
  45      =1  #define CROP_HI     0x07  // Cropping High
  46      =1  #define VDELAY_LO   0x08  // Vertical Delay Low
  47      =1  #define VACTIVE_LO    0x09  // Vertical Active Low
  48      =1  #define HDELAY_LO   0x0a  // Horizontal Delay Low
  49      =1  #define HACTIVE_LO    0x0b  // Horizontal Active Low
  50      =1  #define CNTRL1      0x0c  // Control 1
  51      =1  
  52      =1  #define BRIGHT      0x10  // Brightness Control
  53      =1  #define CONTRAST    0x11  // Contrast Control
  54      =1  #define SHARPNESS   0x12  // Sharpness Control
  55      =1  #define SAT_U     0x13  // Chroma(U) Gain
  56      =1  #define SAT_V     0x14  // Chroma(V) Gain
  57      =1  #define HUE       0x15  // Hue Conrol
  58      =1  #define V_PEAKING   0x17  // Vertical Peaking
  59      =1  
  60      =1  #define CC_STATUS   0x1a  // CC/EDS Status
  61      =1  #define CC_DATA     0x1b  // CC/EDS Data
  62      =1  #define SDT       0x1c  // Standard Selection
  63      =1  #define SDTR      0x1d  // Standard Recognition
  64      =1  
  65      =1  #define V_CONTROL2    0x29  // Vertical Control II
  66      =1  #define HFILTER     0x2c
  67      =1  #define MISC1     0x2d  // Miscellaneous Control 1
  68      =1  #define MISC2     0x2e  // Miscellaneous Control 2
  69      =1  #define MISC3     0x2f  // Miscellaneous Control 2
  70      =1  
  71      =1  #define VBI_CNTL2   0x34  // VBI control 2 - WSSEN
  72      =1  #define CC_ODDLINE    0x35  // CC Odd Line
  73      =1  
  74      =1  #define LADC0     0xc9  //LADC Channel 0 Input Value 
  75      =1  #define LADC1     0xca  //LADC Channel 1 Input Value 
  76      =1  
  77      =1  #define WriteDecoder(index, val)    WriteTW88( index, val )
  78      =1  #define ReadDecoder(index)        ReadTW88( index )
  79      =1  
  80      =1  #endif // __REGMAP__
  81      =1  
   8          #include "cpu.h"
   1      =1  #ifndef __CPU__
   2      =1  #define __CPU__
   3      =1  
   4      =1  /*
   5      =1  #ifdef INTERNAL_MCU
   6      =1  #define I2C_SCL   P2_0
   7      =1  #else
   8      =1  #define I2C_SCL   P1_0
   9      =1  #endif
  10      =1  #define I2C_SDA   P1_1
  11      =1  */
  12      =1  #define I2C_SCL     P1_0
  13      =1  #define I2C_SDA     P1_1
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 17  

  14      =1  #ifdef SUPPORT_SDCARD  //ryan@20170824 
           =1 #define BUF_MAX     8
           =1 #define DVR_BUF_MAX   30
           =1 #else
  18      =1  #define BUF_MAX     20
  19      =1  #define DVR_BUF_MAX   8
  20      =1  #endif
  21      =1  
  22      =1  #ifdef REMO_RC5
           =1 #define EnableRemoconInt()  { RemoDataReady = 0;  EX0 = 1;}
           =1 #endif
  25      =1  void  InitCPU(void);
  26      =1  void  InitVars(void);
  27      =1  void  InitTechwell(void);
  28      =1  void  main_init (void);
  29      =1  void  PowerDown( void );
  30      =1  #if 0
           =1 BYTE  OKSleepTime(void);
           =1 #endif
  33      =1  #ifdef REMO_RC5
           =1 void  InitForRemo(void);
           =1 #endif
  36      =1  void  PowerLED(BYTE flag);
  37      =1  void    Wait_ms(WORD Tms);
  38      =1  BYTE    TW2835Command(char,char,char,char,char);
  39      =1  
  40      =1  #ifdef Monitor_debug
           =1 BYTE RS_rx(void);
           =1 #endif
  43      =1  
  44      =1  #endif
  45      =1  
   9          #include "main.h"
   1      =1  #ifndef __MAIN__
   2      =1  #define __MAIN__
   3      =1  
   4      =1  #define ON          1
   5      =1  #define OFF         0
   6      =1  #if 1//ryan@20171214
   7      =1  #define Hs_debug
   8      =1  #define Monitor_debug  
   9      =1  //#define Trigger_debug 
  10      =1  #endif
  11      =1  
  12      =1  
  13      =1  //#define DVR
  14      =1  #define Format_SDCard
  15      =1  #define BJTSwitch
  16      =1  
  17      =1  #define Panel_Enable()    P4=P4|0x08 //andy 980908
  18      =1  #define Panel_Disable()   P4=P4&0xf7
  19      =1  
  20      =1  #if 0
           =1 #define SetBacklight()      P4=P4|0x04
           =1 #define clrBacklight()      P4=P4&0xfb
           =1 #else
  24      =1  #define SetBacklight()    P4=P4&0xfb
  25      =1  #define clrBacklight()    P4=P4|0x04
  26      =1  #endif
  27      =1  
  28      =1  //InputSelection
  29      =1  struct struct_IdName {
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 18  

  30      =1    BYTE  Id;
  31      =1    BYTE  Name[16];
  32      =1  };
  33      =1  
  34      =1  #define CH_TW2835       1
  35      =1  #define CH_CAMD       2
  36      =1  #define CH_AV         3
  37      =1  #define PC          7
  38      =1  #define ChineseDefaultMenu  8
  39      =1  
  40      =1  #define SVIDEO        2
  41      =1  #define COMPONENT     3
  42      =1  //#define ANALOGDTV     4
  43      =1  #define DTV         4
  44      =1  #define TV          5
  45      =1  #define SCART       6
  46      =1  
  47      =1  #ifdef HS
  48      =1  #define CH_CAMB         4
  49      =1  #endif
  50      =1  
  51      =1  #define DIGITALVGA      8
  52      =1  
  53      =1  #define AIRTV       0 //9
  54      =1  #define CABLETV       1 //0xa
  55      =1  
  56      =1  #define TVTUNER       0xd   //10
  57      =1  #define MUTE        1 
  58      =1  #define MENU        2 
  59      =1  #define TVVOL       4 
  60      =1  #ifdef AWT_ML072S
  61      =1  #define VLOSSINFO     8 
  62      =1  #else
           =1 #define CC          8 
           =1 #endif
  65      =1  #define INPUTINFO     0x10
  66      =1  #define PCINFO        0x20
  67      =1  #define GAUGEINFO       0x40
  68      =1  //#define RATINGINFO      0x40
  69      =1  #define TVCHN       0x80
  70      =1  //#define MUTE        0x40
  71      =1  
  72      =1  #define YPBPR_480i      0
  73      =1  #define YPBPR_576i      1
  74      =1  #define YPBPR_480p      2
  75      =1  #define YPBPR_576p      3
  76      =1  #define YPBPR_1080i     4
  77      =1  #define YPBPR_720p      5
  78      =1  #define YPBPR_720p50    6
  79      =1  
  80      =1  //---------------------- Feature Define ----------------------------
  81      =1  #ifdef AWT_ML072Q
           =1 
           =1 //mask by ryan@20171018   #define AWT_ML720Q_NEW_TRIGGER_FUN    //Pinchi 20141031 add for AWT request each t
             -rigger can work by PRIORITY OFF
           =1 #define AWT_ADD_TRIGGER_DELAY_FUN 
           =1 #define AWT_SUPPORT_4_3_SCREEN    //ryan@20170907 
           =1 #endif
  87      =1  
  88      =1  #ifdef AWT_ML072S
  89      =1  #define AWT_ADD_TRIGGER_DELAY_FUN 
  90      =1  #endif
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 19  

  91      =1  
  92      =1  //--------------------------- P0 Define -----------------------------
  93      =1  //#define SEL_MIX     P0_6  // 
  94      =1  //--------------------------- P1 Define -----------------------------
  95      =1  //#define SEL_DVI     P3_5  //LJY062001   
  96      =1  
  97      =1  #define TW88HWReset     P3_4  //LJY001010 //LJY000721
  98      =1  #define PowerUp       P3_7
  99      =1  //======================= CDS Control ================================= 
 100      =1  //#define CDS_CTRL           P1_5
 101      =1  extern BYTE SelectModeType;
 102      =1  extern BYTE InputSelection;
 103      =1  extern BYTE SEQTime;
 104      =1  extern BYTE Priority;
 105      =1  extern BYTE PowerFlag;
 106      =1  //extern bit AutoDayNight;
 107      =1  extern bit SDCardCoverDetect;
 108      =1  
 109      =1  BYTE keyIn(void);
 110      =1  void TimerForRemocon(void);
 111      =1  void TimerForTick(void);
 112      =1  void DisableRemoconInt(void);
 113      =1  BYTE SetSupport_remocon(BYTE newd);
 114      =1  
 115      =1  void delay(BYTE cnt);
 116      =1  
 117      =1  BYTE RS_ready(void);
 118      =1  #ifdef Monitor_debug
 119      =1  BYTE RS_rx(void);
 120      =1  #endif
 121      =1  void RS_tx(BYTE tx_buf);
 122      =1  
 123      =1  BYTE RS2_rx(void);
 124      =1  void RS2_tx(BYTE tx_buf);
 125      =1  
 126      =1  void NewLine(void);
 127      =1  void PutsP(PDATA_P BYTE *ptr);
 128      =1  #ifdef Hs_debug
 129      =1  //void MonWriteI2C(BYTE addr, BYTE index, BYTE val);
 130      =1  //BYTE MonReadI2C(BYTE addr, BYTE index);
 131      =1  #endif
 132      =1  BYTE Asc1Bin(BYTE asc);
 133      =1  BYTE Asc2Bin(PDATA_P BYTE *s);
 134      =1  
 135      =1  void I2CDeviceInitialize( CODE_P BYTE *RegSet);
 136      =1  
 137      =1  //void RestartSystemClock(WORD clock_hm);
 138      =1  WORD GetTime_ms(void);
 139      =1  #if 0
           =1 BYTE GetTime_H(void);
           =1 BYTE GetTime_M(void);
           =1 #endif
 143      =1  void ChangeTime_H( char add );
 144      =1  void ChangeTime_M( char add );
 145      =1  //WORD GetWakeupTime(void);
 146      =1  //void SetWakeupTime(WORD wtime);
 147      =1  
 148      =1  
 149      =1  //WORD GetOffTime(void);
 150      =1  //void SetOffTime(WORD wtime);
 151      =1  //BYTE GetSleepTimer(void);
 152      =1  //void SetSleepTimer(BYTE stime);
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 20  

 153      =1  WORD DiffTime_ms( WORD stime, WORD etime );
 154      =1  //void SetLastBlockedTime(void);
 155      =1  void SetLastCCTime(void);       //ljy010904...CC_FIX_CLEAR_ON_TIME
 156      =1  
 157      =1  void SetOSDLastKeyInTime(void);
 158      =1  WORD GetOSDLastKeyInTime(void);
 159      =1  WORD GetIVF(void);
 160      =1  DWORD GetIHF(void);
 161      =1  BYTE ReadVInputSTD(void);
 162      =1  void SetVInputStd(BYTE newd);
 163      =1  BYTE GetVInputStd(void);
 164      =1  BYTE GetInputSelection(void);
 165      =1  #ifdef ADD_ANALOGPANEL
           =1 BYTE IsAnalogOn(void);
           =1 #endif
 168      =1  void InitVideoData(BYTE src);
 169      =1  void ChangeVInputStdDetectMode(BYTE val);
 170      =1  BYTE GetVInputStdInx(void);
 171      =1  
 172      =1  void MonWriteI2Cn_(BYTE addr, BYTE *val, BYTE cnt) ;
 173      =1  
 174      =1  void CheckNewTriggerFunc(void);
 175      =1  ///void Usage(void);
 176      =1  #ifdef Monitor_debug
 177      =1    void Prompt(void);
 178      =1  #endif
 179      =1  void DebugKeyIn(BYTE ikey);
 180      =1  void DVIPowerDown(bit flag);
 181      =1  void PowerDown_XTAL(bit flag);
 182      =1  
 183      =1  void ChangeInput(BYTE newsel);
 184      =1  
 185      =1  
 186      =1  void WaitPowerOn(void);
 187      =1  void PowerOff(void);
 188      =1  BYTE GetNextInputSelection(void);
 189      =1  
 190      =1  BYTE WantToStopTVScan(void);
 191      =1  
 192      =1  //BYTE IsTW8801(void);
 193      =1  //BYTE IsTW8803(void);
 194      =1  //BYTE ConvertVideoVSAT(BYTE reg);
 195      =1  
 196      =1  BYTE IsNoInput(void);
 197      =1  void LoadEEPROM (void);
 198      =1  void Hs_InitVars(void);
 199      =1  void AdjustAutoDayNight(BYTE val);
 200      =1  void ACCPowerControl(void);
 201      =1  void ON_LVDS(void);
 202      =1  void OFF_LVDS(void);
 203      =1  void main_loop(void);
 204      =1  struct RegisterInfo
 205      =1  {
 206      =1     int  Min;
 207      =1     int  Max;
 208      =1     int  Default;
 209      =1  };
 210      =1  struct LongRegisterInfo
 211      =1  {
 212      =1     WORD Min;
 213      =1     WORD Max;
 214      =1     WORD Default;
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 21  

 215      =1  };
 216      =1  
 217      =1  
 218      =1  typedef enum   ///add enum  by ryan@20170907
 219      =1  {
 220      =1    NORMALL_MODE,
 221      =1    REVERSE_TRIG,
 222      =1    LEFT_TRIG,
 223      =1    RIGHT_TRIG,
 224      =1  #ifdef USE_CAMD 
           =1   CAMD_TRIG,
           =1 #endif  
 227      =1    CAMC_TRIG,
 228      =1    VGA_TRIG,
 229      =1    PARK_TRIG,
 230      =1    No_TRIG,
 231      =1    TRIGGER_NUM
 232      =1  }TriggerModeType;
 233      =1  
 234      =1  
 235      =1  #endif  // __MAIN__
 236      =1  
  10          #include "I2C.h"
   1      =1  #ifndef __I2C_H__
   2      =1  #define __I2C_H__
   3      =1  
   4      =1  
   5      =1  void I2CReadByte3(BYTE *);
   6      =1  void I2CRead8Byte(BYTE *);
   7      =1  #if 0
           =1 void I2CReadByteMSP(BYTE addr, BYTE index, BYTE *pd, BYTE cnt);
           =1 #endif
  10      =1  BYTE I2CWriteByte2(BYTE);
  11      =1  BYTE I2CWriteByte3(BYTE*);
  12      =1  BYTE I2CWrite8Byte(BYTE *);
  13      =1  
  14      =1  void I2CStart(void);
  15      =1  void I2CWriteData(BYTE value);
  16      =1  BYTE I2CReadData(void);
  17      =1  #if 0
           =1 BYTE I2CReadDataWithACK(void);
           =1 #endif
  20      =1  void I2CStop(void);
  21      =1  void I2Cdelay(void);
  22      =1  
  23      =1  
  24      =1  #define WriteTW88(a,b)    WriteI2C(TW88I2CAddress, a, b)
  25      =1  #define ReadTW88(a)     ReadI2C(TW88I2CAddress, a)
  26      =1  
  27      =1  BYTE WriteTW88_Wait (BYTE, BYTE);
  28      =1  void WriteADC   (BYTE, BYTE);
  29      =1  BYTE ReadADC    (BYTE);
  30      =1  BYTE ReadADC_TW88(BYTE index);
  31      =1  void WriteADC_TW88(BYTE index, BYTE dat);
  32      =1  
  33      =1  void WriteEEP   (WORD, BYTE);
  34      =1  BYTE ReadEEP    (WORD);
  35      =1  WORD ReadALC106(WORD index);
  36      =1  void WriteALC106(WORD index, WORD  dat);
  37      =1  WORD ReadI2CWORD(BYTE addr, BYTE index);
  38      =1  BYTE ReadI2C    (BYTE addr, BYTE index);
  39      =1  void WriteI2C   (BYTE addr, BYTE index, BYTE val);
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 22  

  40      =1  
  41      =1  void WriteI2Cn_(BYTE addr, BYTE *val, BYTE cnt);
  42      =1  void WriteI2Cn (BYTE addr, BYTE index, BYTE *val, BYTE cnt);
  43      =1  void WriteI2CnD(BYTE addr, BYTE index, BYTE val, BYTE cnt);
  44      =1  
  45      =1  void ReadI2Cmn(BYTE addr, BYTE wcnt, BYTE rcnt, BYTE *rwdata);
  46      =1  
  47      =1  #define   WriteADC(a,b) WriteADC_TW88(a,b)
  48      =1  #define   ReadADC(a)    ReadADC_TW88(a)
  49      =1  
  50      =1  #endif  /* __I2C_H__ */
  11          #include "TW88.h"
   1      =1  #ifndef __TW88__
   2      =1  #define __TW88__
   3      =1  
   4      =1  #include "main.h"
   1      =2  #ifndef __MAIN__
           =2 #define __MAIN__
           =2 
           =2 #define ON          1
           =2 #define OFF         0
           =2 #if 1//ryan@20171214
           =2 #define Hs_debug
           =2 #define Monitor_debug  
           =2 //#define Trigger_debug 
           =2 #endif
           =2 
           =2 
           =2 //#define DVR
           =2 #define Format_SDCard
           =2 #define BJTSwitch
           =2 
           =2 #define Panel_Enable()    P4=P4|0x08 //andy 980908
           =2 #define Panel_Disable()   P4=P4&0xf7
           =2 
           =2 #if 0
           =2 #define SetBacklight()      P4=P4|0x04
           =2 #define clrBacklight()      P4=P4&0xfb
           =2 #else
           =2 #define SetBacklight()    P4=P4&0xfb
           =2 #define clrBacklight()    P4=P4|0x04
           =2 #endif
           =2 
           =2 //InputSelection
           =2 struct struct_IdName {
           =2   BYTE  Id;
           =2   BYTE  Name[16];
           =2 };
           =2 
           =2 #define CH_TW2835       1
           =2 #define CH_CAMD       2
           =2 #define CH_AV         3
           =2 #define PC          7
           =2 #define ChineseDefaultMenu  8
           =2 
           =2 #define SVIDEO        2
           =2 #define COMPONENT     3
           =2 //#define ANALOGDTV     4
           =2 #define DTV         4
           =2 #define TV          5
           =2 #define SCART       6
           =2 
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 23  

           =2 #ifdef HS
           =2 #define CH_CAMB         4
           =2 #endif
           =2 
           =2 #define DIGITALVGA      8
           =2 
           =2 #define AIRTV       0 //9
           =2 #define CABLETV       1 //0xa
           =2 
           =2 #define TVTUNER       0xd   //10
           =2 #define MUTE        1 
           =2 #define MENU        2 
           =2 #define TVVOL       4 
           =2 #ifdef AWT_ML072S
           =2 #define VLOSSINFO     8 
           =2 #else
           =2 #define CC          8 
           =2 #endif
           =2 #define INPUTINFO     0x10
           =2 #define PCINFO        0x20
           =2 #define GAUGEINFO       0x40
           =2 //#define RATINGINFO      0x40
           =2 #define TVCHN       0x80
           =2 //#define MUTE        0x40
           =2 
           =2 #define YPBPR_480i      0
           =2 #define YPBPR_576i      1
           =2 #define YPBPR_480p      2
           =2 #define YPBPR_576p      3
           =2 #define YPBPR_1080i     4
           =2 #define YPBPR_720p      5
           =2 #define YPBPR_720p50    6
           =2 
           =2 //---------------------- Feature Define ----------------------------
           =2 #ifdef AWT_ML072Q
           =2 
           =2 //mask by ryan@20171018   #define AWT_ML720Q_NEW_TRIGGER_FUN    //Pinchi 20141031 add for AWT request each t
             -rigger can work by PRIORITY OFF
           =2 #define AWT_ADD_TRIGGER_DELAY_FUN 
           =2 #define AWT_SUPPORT_4_3_SCREEN    //ryan@20170907 
           =2 #endif
           =2 
           =2 #ifdef AWT_ML072S
           =2 #define AWT_ADD_TRIGGER_DELAY_FUN 
           =2 #endif
           =2 
           =2 //--------------------------- P0 Define -----------------------------
           =2 //#define SEL_MIX     P0_6  // 
           =2 //--------------------------- P1 Define -----------------------------
           =2 //#define SEL_DVI     P3_5  //LJY062001   
           =2 
           =2 #define TW88HWReset     P3_4  //LJY001010 //LJY000721
           =2 #define PowerUp       P3_7
           =2 //======================= CDS Control ================================= 
           =2 //#define CDS_CTRL           P1_5
           =2 extern BYTE SelectModeType;
           =2 extern BYTE InputSelection;
           =2 extern BYTE SEQTime;
           =2 extern BYTE Priority;
           =2 extern BYTE PowerFlag;
           =2 //extern bit AutoDayNight;
           =2 extern bit SDCardCoverDetect;
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 24  

           =2 
           =2 BYTE keyIn(void);
           =2 void TimerForRemocon(void);
           =2 void TimerForTick(void);
           =2 void DisableRemoconInt(void);
           =2 BYTE SetSupport_remocon(BYTE newd);
           =2 
           =2 void delay(BYTE cnt);
           =2 
           =2 BYTE RS_ready(void);
           =2 #ifdef Monitor_debug
           =2 BYTE RS_rx(void);
           =2 #endif
           =2 void RS_tx(BYTE tx_buf);
           =2 
           =2 BYTE RS2_rx(void);
           =2 void RS2_tx(BYTE tx_buf);
           =2 
           =2 void NewLine(void);
           =2 void PutsP(PDATA_P BYTE *ptr);
           =2 #ifdef Hs_debug
           =2 //void MonWriteI2C(BYTE addr, BYTE index, BYTE val);
           =2 //BYTE MonReadI2C(BYTE addr, BYTE index);
           =2 #endif
           =2 BYTE Asc1Bin(BYTE asc);
           =2 BYTE Asc2Bin(PDATA_P BYTE *s);
           =2 
           =2 void I2CDeviceInitialize( CODE_P BYTE *RegSet);
           =2 
           =2 //void RestartSystemClock(WORD clock_hm);
           =2 WORD GetTime_ms(void);
           =2 #if 0
           =2 BYTE GetTime_H(void);
           =2 BYTE GetTime_M(void);
           =2 #endif
           =2 void ChangeTime_H( char add );
           =2 void ChangeTime_M( char add );
           =2 //WORD GetWakeupTime(void);
           =2 //void SetWakeupTime(WORD wtime);
           =2 
           =2 
           =2 //WORD GetOffTime(void);
           =2 //void SetOffTime(WORD wtime);
           =2 //BYTE GetSleepTimer(void);
           =2 //void SetSleepTimer(BYTE stime);
           =2 WORD DiffTime_ms( WORD stime, WORD etime );
           =2 //void SetLastBlockedTime(void);
           =2 void SetLastCCTime(void);       //ljy010904...CC_FIX_CLEAR_ON_TIME
           =2 
           =2 void SetOSDLastKeyInTime(void);
           =2 WORD GetOSDLastKeyInTime(void);
           =2 WORD GetIVF(void);
           =2 DWORD GetIHF(void);
           =2 BYTE ReadVInputSTD(void);
           =2 void SetVInputStd(BYTE newd);
           =2 BYTE GetVInputStd(void);
           =2 BYTE GetInputSelection(void);
           =2 #ifdef ADD_ANALOGPANEL
           =2 BYTE IsAnalogOn(void);
           =2 #endif
           =2 void InitVideoData(BYTE src);
           =2 void ChangeVInputStdDetectMode(BYTE val);
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 25  

           =2 BYTE GetVInputStdInx(void);
           =2 
           =2 void MonWriteI2Cn_(BYTE addr, BYTE *val, BYTE cnt) ;
           =2 
           =2 void CheckNewTriggerFunc(void);
           =2 ///void Usage(void);
           =2 #ifdef Monitor_debug
           =2   void Prompt(void);
           =2 #endif
           =2 void DebugKeyIn(BYTE ikey);
           =2 void DVIPowerDown(bit flag);
           =2 void PowerDown_XTAL(bit flag);
           =2 
           =2 void ChangeInput(BYTE newsel);
           =2 
           =2 
           =2 void WaitPowerOn(void);
           =2 void PowerOff(void);
           =2 BYTE GetNextInputSelection(void);
           =2 
           =2 BYTE WantToStopTVScan(void);
           =2 
           =2 //BYTE IsTW8801(void);
           =2 //BYTE IsTW8803(void);
           =2 //BYTE ConvertVideoVSAT(BYTE reg);
           =2 
           =2 BYTE IsNoInput(void);
           =2 void LoadEEPROM (void);
           =2 void Hs_InitVars(void);
           =2 void AdjustAutoDayNight(BYTE val);
           =2 void ACCPowerControl(void);
           =2 void ON_LVDS(void);
           =2 void OFF_LVDS(void);
           =2 void main_loop(void);
           =2 struct RegisterInfo
           =2 {
           =2    int  Min;
           =2    int  Max;
           =2    int  Default;
           =2 };
           =2 struct LongRegisterInfo
           =2 {
           =2    WORD Min;
           =2    WORD Max;
           =2    WORD Default;
           =2 };
           =2 
           =2 
           =2 typedef enum   ///add enum  by ryan@20170907
           =2 {
           =2   NORMALL_MODE,
           =2   REVERSE_TRIG,
           =2   LEFT_TRIG,
           =2   RIGHT_TRIG,
           =2 #ifdef USE_CAMD 
           =2   CAMD_TRIG,
           =2 #endif  
           =2   CAMC_TRIG,
           =2   VGA_TRIG,
           =2   PARK_TRIG,
           =2   No_TRIG,
           =2   TRIGGER_NUM
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 26  

           =2 }TriggerModeType;
           =2 
           =2 
           =2 #endif  // __MAIN__
 236      =2  
   5      =1  
   6      =1  //Value for register 0x44
   7      =1  //#define DECODER_YCbCr   0x08    //xxxx bbxx
   8      =1  //#define RGB_RGB       0x0C
   9      =1  
  10      =1  #define TW88_FPLL0      0xf9
  11      =1  #define TW88_FPLL1      0xfa
  12      =1  #define TW88_FPLL2      0xfb
  13      =1  #define TW88_FSS      0xfc
  14      =1  #define TW88_FSS_PD     0xfd
  15      =1  #define TW88_PLL_DIV    0xfe
  16      =1  
  17      =1  //#define TW88_XSCALE     0x5d
  18      =1  //#define TW88_YSCALE     0x5e
  19      =1  
  20      =1  #define TW88_XUSCALELO    0x60
  21      =1  #define TW88_XDSCALELO    0x61
  22      =1  #define TW88_YUSCALELO    0x62
  23      =1  #define TW88_XYSCALEHI    0x63
  24      =1  #define TW88_XUSCALEFINE  0x69
  25      =1  #define TW88_YUSCALEFINE  0x6a
  26      =1  
  27      =1  //Power Mgt
  28      =1  #define POWER_OFF     0
  29      =1  #define POWER_STANDBY   1
  30      =1  #define POWER_SUSPEND   2
  31      =1  #define POWER_ON      3
  32      =1  
  33      =1  //void TWChipsDetect(void);
  34      =1  void SetAutoDetectStd(void);
  35      =1  void ClearAutoDetectStd(BYTE);
  36      =1  void I2CDeviceInitialize( CODE_P BYTE *RegSet);
  37      =1  
  38      =1  
  39      =1  //0x63.. Register Group
  40      =1  #define GROUP_YCbCr     0x40
  41      =1  #define GROUP_RGB     0
  42      =1  #define SelectPanelAttrRegGroup(A)        WriteTW88(0x70, (ReadTW88(0x70) & 0xbf) | A)
  43      =1  
  44      =1  //#if defined TW8801 || defined TW8803
  45      =1  #define FB_MAIN   2
  46      =1  #define FB_NORMAL 1
  47      =1  #define FB_RGB    0
  48      =1  //void SetFBmode( BYTE mode );
  49      =1  //#endif // TW8801
  50      =1  
  51      =1  
  52      =1  //=============================================================================
  53      =1  //                               LCD Functions   
  54      =1  //=============================================================================
  55      =1  //BYTE GetLCDPowerState(void);
  56      =1  void SetLCDPowerState(BYTE dat);
  57      =1  
  58      =1  BYTE IsFreeRun(void);
  59      =1  #if defined( SUPPORT_PC ) || defined( SUPPORT_DTV )
           =1 void PanelFreeRun(BYTE on);
           =1 void PanelBlack(BYTE on);
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 27  

           =1 #endif
  63      =1  #if 0
           =1 void PanelMute(BYTE on);
           =1 #endif
  66      =1  void LCDPowerON(BYTE mute); 
  67      =1  
  68      =1  #ifdef AWT_ML072S
  69      =1  void LCDPowerOFF(void);
  70      =1  #endif
  71      =1  
  72      =1  #ifdef Hs_debug
  73      =1  void LCDPower(void);
  74      =1  #endif
  75      =1  void DPMSmodeOFF(void);
  76      =1  void DPMSmodeON(void);
  77      =1  //=============================================================================
  78      =1  //                          Get PC Parameter Functions   
  79      =1  //=============================================================================
  80      =1  void GetInitPanelAttribute1(void);
  81      =1  //void GetInitPanelAttribute2(void);
  82      =1  void DefaultPanelAttributeForVideo(void);
  83      =1  void SetPVR(WORD pvr);
  84      =1  void SetPHR(WORD phr);
  85      =1  WORD GetPVR(void);
  86      =1  WORD GetPHR(void);
  87      =1  WORD GetHPN(void);
  88      =1  WORD GetVPN(void);
  89      =1  
  90      =1  //WORD GetVactive(void);
  91      =1  
  92      =1  WORD GetHstart(void);
  93      =1  WORD GetHend(void);
  94      =1  WORD GetVstart(void);
  95      =1  WORD GetVend(void);
  96      =1  void TuneLineBuffer(BYTE field);
  97      =1  void TuneLineBuffer4Video(BYTE field);
  98      =1  
  99      =1  #if defined (SUPPORT_DTV)
           =1 void SetCoarstForDTV(BYTE en);
           =1 #endif
 102      =1  
 103      =1  WORD GetHactiveStart(void);
 104      =1  WORD GetHactiveEnd(void);
 105      =1  WORD GetVactiveStart(void);
 106      =1  //WORD GetVactiveLen(void);
 107      =1  BYTE GetVBackPorch(void);
 108      =1  void SetVBackPorch(BYTE val);
 109      =1  WORD GetPHP(void);
 110      =1  void SetPHP(WORD php);
 111      =1  void SetPVP(WORD period);
 112      =1  WORD GetPVP(void);
 113      =1  //void SetPanelRelatedRegisters(void);
 114      =1  //BYTE ChangedHPN(void);
 115      =1  //WORD GetVSUD(void);
 116      =1  
 117      =1  void SetDefaultPLL(void);
 118      =1  //void SetDefaultFPHSperiod(void);
 119      =1  //BYTE CalcPHP(DWORD ppf, BYTE tol);
 120      =1  //void ChangeFPHSperiod4DecoderInput(WORD vsud, BYTE tol);
 121      =1  
 122      =1  //-------------------------------------------------------------------
 123      =1  //                  Set Active Region Functions
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 28  

 124      =1  //-------------------------------------------------------------------
 125      =1  void SetHactiveStart(WORD hstart);
 126      =1  void SetHactiveEnd(WORD hend);
 127      =1  void SetVactiveStart(WORD vstart);
 128      =1  //void SetVactiveLen(WORD van, WORD vstart);
 129      =1  void SetVactiveLen(WORD van);
 130      =1  //=============================================================================
 131      =1  //                     Set Measurement Window Functions   
 132      =1  //=============================================================================
 133      =1  void SetMeasureWindowH(WORD start, WORD stop);
 134      =1  void SetMeasureWindowV(WORD start, WORD stop);
 135      =1  //=============================================================================
 136      =1  //                          Video Input Functions   
 137      =1  //=============================================================================
 138      =1  BYTE IsVideoInput(void);
 139      =1  BYTE DetectDecoderInput(void);
 140      =1  //=============================================================================
 141      =1  //
 142      =1  //=============================================================================
 143      =1  #if defined( SUPPORT_PC ) || defined( SUPPORT_DTV )
           =1 void AutoPHPCalEnable(void);
           =1 void AutoPHPCalDisable(void);
           =1 #endif
 147      =1  void MakeStartInt(void);
 148      =1  void AVGAInput(void);
 149      =1  void DVIInput(void);
 150      =1  //void DVGAInput(void);
 151      =1  void DisableDVGA(void);
 152      =1  
 153      =1  void COMPOSITE1Input(void);
 154      =1  void COMPOSITE2Input(void);
 155      =1  void COMPOSITE3Input(void);
 156      =1  void COMPOSITE4Input(void);
 157      =1  
 158      =1  void SVIDEOInput(void);
 159      =1  void COMPONENTInput(void);
 160      =1  void ANALOGDTVInput(void);
 161      =1  void DTVInput(void);
 162      =1  void TVInput(void);
 163      =1  void SCARTInput(void);
 164      =1  
 165      =1  //=============================================================================
 166      =1  //                          Measurement Functions
 167      =1  //=============================================================================
 168      =1  ///void SetPanelBitOrder(BYTE swap);
 169      =1  //void SetPanelSingleDouble(BYTE single);
 170      =1  
 171      =1  BYTE MeasureAndWait(BYTE flag);
 172      =1  
 173      =1  //WORD GetHCounter1(BYTE field);
 174      =1  //void SetHInitial(BYTE field, WORD counter);
 175      =1  //=============================================================================
 176      =1  //                          Invert Polarity Functions
 177      =1  //=============================================================================
 178      =1  void InvertHSYNCPolarity(void);
 179      =1  void InvertVSYNCPolarity(void);
 180      =1  //=============================================================================
 181      =1  //            Interrupt / SW Reset Control Functions
 182      =1  //=============================================================================
 183      =1  void SetInt(void);
 184      =1  //void ClearInt(void);
 185      =1  void SetEnDet(void);
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 29  

 186      =1  void ClearEnDet(void);
 187      =1  void SWReset(void);
 188      =1  //void ClearSYNCLossStatus(void);
 189      =1  //void ClearSYNCChangeStatus(void);
 190      =1  //=============================================================================
 191      =1  //
 192      =1  //=============================================================================
 193      =1  BYTE IsBypassmode(void);
 194      =1  //BYTE IsInteraced(void);
 195      =1  void Clear_bypass(void);
 196      =1  void MaskOnSYNCInt(void);
 197      =1  void MaskOffSYNCInt(void);
 198      =1  //=============================================================================
 199      =1  //                                ZoomControl
 200      =1  //=============================================================================
 201      =1  void BypassZoom(void);
 202      =1  
 203      =1  void XscaleU(DWORD scale);
 204      =1  void XscaleD(DWORD scale);
 205      =1  void XScale2(DWORD scale);
 206      =1  void YScale2(DWORD scale);
 207      =1  WORD GetYScale(void);
 208      =1  //=============================================================================
 209      =1  //
 210      =1  //=============================================================================
 211      =1  WORD GetHSYNCPulse(void);
 212      =1  WORD GetVSYNCPulse(void);
 213      =1  //#if defined TW8801 || defined TW8803
 214      =1  WORD GetRelativePosition(void);
 215      =1  //#endif
 216      =1  //=============================================================================
 217      =1  //                MISC2 for decoder
 218      =1  //=============================================================================
 219      =1  #define BLUE_DECODER    2
 220      =1  #define BLACK_DECODER   0
 221      =1  
 222      =1  BYTE ForceDecoderOutput(BYTE color);
 223      =1  BYTE ClearForcedDecoderOutput(void);
 224      =1  //=============================================================================
 225      =1  //                CC and EDS
 226      =1  //=============================================================================
 227      =1  BYTE GetCCStatus(void);
 228      =1  void DisableCC(void);
 229      =1  void EnableCC(void);
 230      =1  BYTE GetCCData(void);
 231      =1  BYTE IsCCEnabled(void);
 232      =1  void EnableEDS(void);
 233      =1  void DisableEDS(void);
 234      =1  void RecoverCCOverflow(void);
 235      =1  
 236      =1  #define CCFIFOHalfFull()      (ReadDecoder(CSTATUS) & 0x04)
 237      =1  //=============================================================================
 238      =1  //                Internal PLL
 239      =1  //=============================================================================
 240      =1  BYTE GetPOST(void);
 241      =1  void SetPLLS(BYTE plls);
 242      =1  BYTE GetREFDM(void);
 243      =1  void SetREFDM(BYTE refdm);
 244      =1  DWORD GetFBDN(void);
 245      =1  void SetFBDN(WORD fbdn, BYTE vcsel);
 246      =1  DWORD GetPPF(void);
 247      =1  void ChangeInternPLL(DWORD _PPF);
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 30  

 248      =1  
 249      =1  //=============================================================================
 250      =1  //                Macros for attribute
 251      =1  //=============================================================================
 252      =1  //#define GetOSDTransReg()            ReadTW88(0xAE)
 253      =1  //#define SetOSDTransReg(AlphaV)          WriteTW88(0xAE, (BYTE)AlphaV )
 254      =1  
 255      =1  #define GetPanelContrastReg(gccolor)      ReadTW88(0x71+gccolor)
 256      =1  #define SetPanelContrastReg(sccolor, cval)    WriteTW88(0x71+sccolor,cval)
 257      =1  
 258      =1  #define GetPanelBrightnessReg(gbcolor)      ReadTW88(0x74+gbcolor);
 259      =1  #define SetPanelBrightnessReg(sbcolor, bval)  WriteTW88(0x74+sbcolor,bval);
 260      =1  
 261      =1  #define SetDTVBrightnessReg(bval)       WriteTW88(0x74,bval);
 262      =1  
 263      =1  #define GetPanelSaturationReg(gbcolor)      ReadTW88(0x72+gbcolor);
 264      =1  #define SetPanelSaturationReg(sbcolor, bval)  WriteTW88(0x72+sbcolor,bval);
 265      =1  
 266      =1  #define SetPanelSharpnessReg(bval)        WriteTW88(0x78,((bval&0x07)|0x38) );
 267      =1  
 268      =1  #define SetPanelHueReg(bval)          WriteTW88(0x70, (ReadTW88(0x70) & 0xc0 | (bval)) );
 269      =1  
 270      =1  #define GetVideoContrastReg()         ReadDecoder(CONTRAST)
 271      =1  #define SetVideoContrastReg(vcval)        WriteDecoder(CONTRAST, vcval)
 272      =1  
 273      =1  #define GetVideoBrightnessReg()         ReadDecoder(BRIGHT)
 274      =1  #define SetVideoBrightnessReg(vbval)      WriteDecoder(BRIGHT, vbval )
 275      =1  
 276      =1  #define GetVideoSaturationReg(gvstype)      ReadDecoder(SAT_U+gvstype)
 277      =1  #define SetVideoSaturationReg(svstype, vsval) WriteDecoder(SAT_U+svstype, vsval)
 278      =1  
 279      =1  #define GetVideoHueReg()            ReadDecoder(HUE)
 280      =1  #define SetVideoHueReg(vhval)         WriteDecoder(HUE, vhval )
 281      =1  
 282      =1  #define GetVideoSharpnessRegDef         (ReadDecoder(SHARPNESS) & 0x0f) 
 283      =1  
 284      =1  #define GetVideoSharpnessReg()          GetVideoSharpnessRegDef
 285      =1  //#define SetVideoSharpnessReg(vshval)      WriteDecoder(SHARPNESS, vshval )
 286      =1  #define SetVideoSharpnessReg(vshval)      WriteDecoder(SHARPNESS, ((ReadDecoder(SHARPNESS) & 0xf0) | (vshval 
             -& 0x0f) ) );
 287      =1  
 288      =1  #ifdef TW9908
           =1 #define SetVideoVPeakingReg(vshval)
           =1 #else
 291      =1  #define SetVideoVPeakingReg(vshval)       WriteDecoder(V_PEAKING, ((ReadDecoder(V_PEAKING) & 0xf8) | (vshval 
             -& 0x07) ) );
 292      =1  #endif
 293      =1  
 294      =1  #define SetVideoHfilterReg(val)         WriteDecoder(HFILTER, ((ReadDecoder(HFILTER) & 0xf8) | (val & 0x07) )|
             -0x08 );
 295      =1  //----------------------------------------------------------------------------------
 296      =1  //color type
 297      =1  #define RED   0
 298      =1  #define GREEN 1
 299      =1  #define BLUE  2
 300      =1  #define WHITE 3
 301      =1  //saturation type
 302      =1  #define U_SAT 0
 303      =1  #define V_SAT 1
 304      =1  
 305      =1  //Alpha Blending Level
 306      =1  #define _0    0
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 31  

 307      =1  #define _25   0x12
 308      =1  #define _37_5 0x13
 309      =1  #define _50   0x14
 310      =1  #define _100  0x18
 311      =1  
 312      =1  BYTE GetKey(BYTE repeat);
 313      =1  
 314      =1  /*
 315      =1  BYTE Mapping( int fromValue, struct RegisterInfo fromRange,
 316      =1                                   int * toValue, struct RegisterInfo toRange );
 317      =1  */
 318      =1  BYTE Mapping1( int fromValue, CODE_P struct RegisterInfo *fromRange,
 319      =1                                   int * toValue, CODE_P struct RegisterInfo *toRange );
 320      =1  #ifdef KEILC
 321      =1  #define Mapping2( A, B, C, D )      Mapping1( A, B, C, D )
 322      =1  #define Mapping3( A, B, C, D )      Mapping1( A, B, C, D )
 323      =1  #else
           =1 BYTE Mapping2( int fromValue, IDATA_P struct RegisterInfo *fromRange,
           =1                                  int * toValue, CODE_P struct RegisterInfo *toRange );
           =1 BYTE Mapping3( int fromValue, CODE_P struct RegisterInfo *fromRange,
           =1                                  int * toValue, IDATA_P struct RegisterInfo *toRange );
           =1 #endif
 329      =1  
 330      =1  BYTE GetAttributesFromNTSCSettings(BYTE index);
 331      =1  
 332      =1  #endif  // __TW88__
 333      =1  
  12          #include "Printf.h"
   1      =1  #ifndef __PRINTF__
   2      =1  #define __PRINTF__
   3      =1  
   4      =1  #define _outchar(c) while(1) { if( !RS_Xbusy ) { SBUF = c; RS_Xbusy=1; break; } }
   5      =1  #define Putch(c) _outchar(c)
   6      =1  
   7      =1  #ifdef SERIAL
   8      =1  
   9      =1   void Printf ( const char CODE_P *fmt, ... );
  10      =1   void Puts ( CODE_P char *ptr );
  11      =1  
  12      =1  #define TW2835Cmd(a)   Puts ( a )
  13      =1  
  14      =1  #else
           =1 
           =1  #undef  DEBUG
           =1  #define Printf(a,b)  //
           =1  #define Puts(a)      //
           =1 
           =1 #endif
  21      =1  
  22      =1  
  23      =1  #ifndef DEBUG
  24      =1  
  25      =1   #define dPuts(a)   //
  26      =1   #define wPuts(a)   //
  27      =1   #define ePuts(a)   //
  28      =1  
  29      =1  #else
           =1 
           =1  void dPrintf( const char CODE_P *fmt, ... );
           =1  void wPrintf( const char CODE_P *fmt, ... );
           =1  void ePrintf( const char CODE_P *fmt, ... );
           =1 
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 32  

           =1  void dPuts( CODE_P char *ptr );
           =1  void wPuts( CODE_P char *ptr );
           =1  void ePuts( CODE_P char *ptr );
           =1 
           =1 #endif  // DEBUG
  40      =1  
  41      =1  BYTE Getch(void);
  42      =1  BYTE Getche(void);
  43      =1  
  44      =1  
  45      =1  #endif  //__PRINTF__
  13          #include "KeyRemo.h"
   1      =1  //
   2      =1  // KeyRemo.h
   3      =1  // Default function for Key Input and Remocon Input
   4      =1  //
   5      =1  //=============================================================================
   6      =1  //                        Operation Key Mapping
   7      =1  //=============================================================================
   8      =1  
   9      =1  
  10      =1  
  11      =1  
  12      =1  #define ResetKey()    { P2 = 0xff;}
  13      =1  //#define ReadKey()   (~P1 & 0xfc);
  14      =1  
  15      =1  #ifdef QUAD
           =1 #define EVENTKEY    0x02
           =1 #endif
  18      =1  #define POWERKEY    0x04 //andy AWT 980907
  19      =1  #define MENUKEY     0x08
  20      =1  
  21      =1  #ifdef AWT_NEW_SLIM_MODEL  //Pinchi 20150203 add for AWT new slim model
           =1 #define UPKEY       0x10
           =1 #define DOWNKEY     0x20
           =1 #define SELECTKEY     0x40
           =1 #define INPUTSOURCEKEY  0x80
           =1 #define VersionKEY    0xC0
           =1 #define UnLockKEY     0xC0
           =1 #else
  29      =1  #define INPUTSOURCEKEY  0x10
  30      =1  #define UPKEY       0x20
  31      =1  #define DOWNKEY       0x40
  32      =1  #define SELECTKEY     0x80
  33      =1    #if 1//Pinchi 20160929 add
  34      =1    #define Tune2835ClkKEY 0x90
  35      =1    #define Enter2835TuneKEY 0x0C
  36      =1    #else
           =1   #define VersionKEY      0x90
           =1   #endif
  39      =1  #endif
  40      =1  
  41      =1  #define REMO_CUSTOM   0
  42      =1  
  43      =1  #define REMO_NUM0   0
  44      =1  #define REMO_NUM1   1
  45      =1  #define REMO_NUM2   2
  46      =1  #define REMO_NUM3   3
  47      =1  #define REMO_NUM4   4
  48      =1  #define REMO_NUM5   5
  49      =1  #define REMO_NUM6   6
  50      =1  #define REMO_NUM7   7
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 33  

  51      =1  #define REMO_NUM8   8
  52      =1  #define REMO_NUM9   9
  53      =1  
  54      =1  #define REMO_STANDBY  12
  55      =1  #define REMO_CHNUP    32
  56      =1  #define REMO_CHNDN    33
  57      =1  #define REMO_VOLUP    16
  58      =1  #define REMO_VOLDN    17
  59      =1  #define REMO_SELECT   21
  60      =1  #define REMO_MENU   63
  61      =1  #define REMO_MUTE   13
  62      =1  #define REMO_INPUT    56
  63      =1  
  64      =1  #define REMO_AUTO   10
  65      =1  #define REMO_INFO   58
  66      =1  #define REMO_AUDIO    38
  67      =1  #define REMO_ASPECT   62
  68      =1  #define REMO_CC     15
  69      =1  #define REMO_EXIT   0x16
  70      =1  
  71      =1  #define REMO_TTXRED     0x37
  72      =1  #define REMO_TTXGREEN   0x36
  73      =1  #define REMO_TTXYELLOW    0x32
  74      =1  #define REMO_TTXCYAN    0x34
  75      =1  
  76      =1  
  77      =1  
  78      =1  //=============================================================================
  79      =1  //                                 RC5 type
  80      =1  //=============================================================================
  81      =1  #ifdef REMO_RC5
           =1 
           =1 #ifdef TECHWELL_REMOCON
           =1 #define REMO_CUSTOM   0
           =1 
           =1 #define REMO_NUM0   0
           =1 #define REMO_NUM1   1
           =1 #define REMO_NUM2   2
           =1 #define REMO_NUM3   3
           =1 #define REMO_NUM4   4
           =1 #define REMO_NUM5   5
           =1 #define REMO_NUM6   6
           =1 #define REMO_NUM7   7
           =1 #define REMO_NUM8   8
           =1 #define REMO_NUM9   9
           =1 
           =1 #define REMO_STANDBY  12
           =1 #define REMO_CHNUP    32
           =1 #define REMO_CHNDN    33
           =1 #define REMO_VOLUP    16
           =1 #define REMO_VOLDN    17
           =1 #define REMO_SELECT   21
           =1 #define REMO_MENU   63
           =1 //#define REMO_TV     63
           =1 //#define REMO_VCR    60
           =1 //#define REMO_SVIDEO   56
           =1 #define REMO_MUTE   13
           =1 #define REMO_INPUT    56
           =1 
           =1 #define REMO_AUTO   10
           =1 #define REMO_INFO   58
           =1 #define REMO_AUDIO    38
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 34  

           =1 #define REMO_ASPECT   62
           =1 #define REMO_CC     15
           =1 #define REMO_EXIT   0x16
           =1 
           =1 #define REMO_TTXRED     0x37
           =1 #define REMO_TTXGREEN   0x36
           =1 #define REMO_TTXYELLOW    0x32
           =1 #define REMO_TTXCYAN    0x34
           =1 
           =1 #ifdef SUPPORT_DEBUG
           =1 #define REMO_DEBUG    0x2b
           =1 #define REMO_READ   0x29
           =1 #define REMO_WRITE    0x2a
           =1 #define REMO_RESERVED 0x30
           =1 #endif
           =1 
           =1 #else 
           =1 #define REMO_CUSTOM   0
           =1 
           =1 #define REMO_NUM0   0
           =1 #define REMO_NUM1   1
           =1 #define REMO_NUM2   2
           =1 #define REMO_NUM3   3
           =1 #define REMO_NUM4   4
           =1 #define REMO_NUM5   5
           =1 #define REMO_NUM6   6
           =1 #define REMO_NUM7   7
           =1 #define REMO_NUM8   8
           =1 #define REMO_NUM9   9
           =1 
           =1 #define REMO_STANDBY  12
           =1 #define REMO_CHNUP    32
           =1 #define REMO_CHNDN    33
           =1 #define REMO_VOLUP    16
           =1 #define REMO_VOLDN    17
           =1 #define REMO_SELECT   18
           =1 #define REMO_MENU   48
           =1 #define REMO_TV     63
           =1 #define REMO_VCR    60
           =1 #define REMO_SVIDEO   56
           =1 #define REMO_MUTE   13
           =1 #define REMO_INPUT    0xff
           =1 
           =1 #define REMO_INFO   0x0a //??
           =1 #endif
           =1 
           =1 //=============================================================================
           =1 //                                 NEC type
           =1 //=============================================================================
           =1 #elif defined REMO_NEC
           =1 /*
           =1 // Techwell Origin
           =1 #define REMO_CUSTOM1  0x20
           =1 #define REMO_CUSTOM2  0xdf
           =1 
           =1 
           =1 #define REMO_NUM0   0x08
           =1 #define REMO_NUM1   0x88
           =1 #define REMO_NUM2   0x48
           =1 #define REMO_NUM3   0xc8
           =1 #define REMO_NUM4   0x28
           =1 #define REMO_NUM5   0xa8
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 35  

           =1 #define REMO_NUM6   0x68
           =1 #define REMO_NUM7   0xe8
           =1 #define REMO_NUM8   0x18
           =1 #define REMO_NUM9   0x98
           =1 
           =1 #define REMO_STANDBY  0x10
           =1 #define REMO_CHNUP    0x00
           =1 #define REMO_CHNDN    0x80
           =1 #define REMO_VOLUP    0x40
           =1 #define REMO_VOLDN    0xc0
           =1 #define REMO_SELECT   0x70
           =1 #define REMO_MENU   0x9c
           =1 #define REMO_MUTE   0x90
           =1 #define REMO_INPUT    0xd0
           =1 */
           =1 
           =1 // Techwell New Remocon after 4/7/2005
           =1 #ifdef PHILIPS_REMOCON
           =1 #define REMO_CUSTOM1  0x02
           =1 #define REMO_CUSTOM2  0xfd
           =1 
           =1 #define REMO_NUM0   0x00
           =1 #define REMO_NUM1   0x80
           =1 #define REMO_NUM2   0x40
           =1 #define REMO_NUM3   0xc0
           =1 #define REMO_NUM4   0x20
           =1 #define REMO_NUM5   0xa0
           =1 #define REMO_NUM6   0x60
           =1 #define REMO_NUM7   0xe0
           =1 #define REMO_NUM8   0x10
           =1 #define REMO_NUM9   0x90
           =1 
           =1 #define REMO_STANDBY  0x48
           =1 #define REMO_CHNUP    0xd8
           =1 #define REMO_CHNDN    0xf8
           =1 #define REMO_VOLUP    0x58
           =1 #define REMO_VOLDN    0x78
           =1 #define REMO_SELECT   0xe8
           =1 #define REMO_MENU   0x01
           =1 #define REMO_MUTE   0x08
           =1 #define REMO_INPUT    0xf0
           =1 
           =1 #define REMO_INFO   0x38
           =1 
           =1 
           =1 
           =1 #define REMO_TTXRED     0x4E
           =1 #define REMO_TTXGREEN   0x8E
           =1 #define REMO_TTXYELLOW    0xC6
           =1 #define REMO_TTXCYAN    0x86
           =1 
           =1 #else
           =1 // RYU For Test
           =1 #define REMO_CUSTOM1    0x04
           =1 #define REMO_CUSTOM2    0xfb
           =1 
           =1 #define REMO_NUM0   0xf8
           =1 #define REMO_NUM1   0x48
           =1 #define REMO_NUM2   0xc8
           =1 #define REMO_NUM3   0x28
           =1 #define REMO_NUM4   0xa8
           =1 #define REMO_NUM5   0x18
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 36  

           =1 #define REMO_NUM6   0x98
           =1 #define REMO_NUM7   0x58
           =1 #define REMO_NUM8   0xd8
           =1 #define REMO_NUM9   0x78
           =1 
           =1 #define REMO_STANDBY  0x00
           =1 #define REMO_CHNUP    0x40  //
           =1 #define REMO_CHNDN    0x70  //
           =1 #define REMO_VOLUP    0x90  //
           =1 #define REMO_VOLDN    0xe0  //
           =1 #define REMO_SELECT   0x11//??
           =1 #define REMO_MENU   0x10
           =1 
           =1 #define REMO_MUTE   0x60
           =1 #define REMO_INPUT    0xc0
           =1 #define REMO_AUTO   0x30
           =1 #define REMO_AUTOSCAN 0x80
           =1 #define REMO_TV     0x20
           =1 #define REMO_EXIT   0xa0
           =1 #define REMO_INFO   0x08
           =1 #define REMO_ASPECT   0x62
           =1 
           =1 #define REMO_TTXRED   0xb8
           =1 #define REMO_TTXGREEN 0x02
           =1 #define REMO_TTXYELLOW  0x82
           =1 #define REMO_TTXCYAN  0x42
           =1 
           =1 #ifdef SUPPORT_DEBUG
           =1 #define REMO_DEBUG    0xb8
           =1 #define REMO_READ   0x02
           =1 #define REMO_WRITE    0x82
           =1 #endif
           =1 
           =1 #endif //PHILIPS_REMOCON
           =1 
           =1 #endif // REMO_NEC
 273      =1  
 274      =1  
 275      =1  
 276      =1  BYTE ActionRemo(BYTE, BYTE);
 277      =1  BYTE CheckKeyIn(void);
 278      =1  BYTE GetKey(BYTE repeat);
 279      =1  BYTE IsRemoDataReady(BYTE *, BYTE *);
 280      =1  
 281      =1  
  14          #include "etc_eep.h"
   1      =1  #ifndef __ETC_EEP__
   2      =1  #define __ETC_EEP__
   3      =1  
   4      =1  
   5      =1  ////eeprom.h
   6      =1  
   7      =1  //=========================================================================
   8      =1  //  EEPROM structure
   9      =1  //  0x00  BYTE  4 'TW88'
  10      =1  #define EEP_FWREV_MAJOR     0x04  //BYTE  1 F/W Rev.-major(Hex) 
  11      =1  #define EEP_FWREV_MINOR     0x05  //BYTE  1 F/W Rev.-minor(Hex)
  12      =1  #define EEP_DEBUGLEVEL      0x06  //BYTE  1 DebugLevel
  13      =1  //
  14      =1  #define EEP_AUTODETECT      0x07  //BYTE  1 Flag for Input Auto Detect  -0:Auto, 1:NTSC,....
  15      =1  #define EEP_AUTODETECTTYTE    0x08  //BYTE  1 Type of Auto-detect(will be value of register 0x1d)
  16      =1  //      ---------------------------------------------------------------
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 37  

  17      =1  #define EEP_WIDEMODE      0x09  //BYTE  1   Wide Mode
  18      =1  
  19      =1  #define EEP_AUTORECOGNITION   0x0a  //BYTE  1 Auto Recognition
  20      =1  #define EEP_VIDEOMODE     0x0b  //BYTE  1   Video Mode
  21      =1  
  22      =1  #define EEP_OSDLANG       0x0c  //BYTE  1   OSDLang           // 0
  23      =1  
  24      =1  #define EEP_OSDPOSITIONMODE   0x0d  //BYTE  1 OSD Position Mode
  25      =1  #define EEP_CCD         0x0e  //BYTE  1 Closed Caption- 0: off, 1:on
  26      =1  
  27      =1  #define EEP_INPUTSELECTION    0x0f  //BYTE  1 InputSelection
  28      =1  
  29      =1  //
  30      =1  #define EEP_PC_CONTRAST     0x10
  31      =1  #define EEP_PC_BRIGHT     0x11
  32      =1  
  33      =1  #define EEP_CONTRAST      0x12  //BYTE  1 Contrast 
  34      =1  #define EEP_BRIGHTNESS      0x13  //BYTE  1 Brightness
  35      =1  #define EEP_SATURATION_U    0x14  //BYTE  1 Saturation :U
  36      =1  #define EEP_SATURATION_V    0x15  //BYTE  1 Saturation :V
  37      =1  #define EEP_SHARPNESS     0x16  //BYTE  1 Sharpness 
  38      =1  #define EEP_HUE         0x17  //BYTE  1 Hue                    
  39      =1  
  40      =1  //====================================HS AWT 981001
  41      =1  #define  EEP_AutoMode           0xa0
  42      =1  #define  EEP_IMAGEMode          0xa1
  43      =1  #define  EEP_RearMode           0xa2
  44      =1  #define  EEP_COSDMode           0xa3
  45      =1  #define  EEP_GAUGEMode          0xa4
  46      =1  #define  EEP_CAMAMode           0xa5 
  47      =1  #define  EEP_CAMBMode           0xa6
  48      =1  #define  EEP_CAMCMode           0xa7
  49      =1  #define  EEP_CAMRMode           0xa8
  50      =1  #define  EEP_CAMOutMode         0xa9  
  51      =1  #define  EEP_TimeStep           0xaa
  52      =1  #define  EEP_Powerflag          0xab   
  53      =1  #define  EEP_ONOFFChoice        0xac 
  54      =1  
  55      =1  #define  EEP_PRIORITY           0xad
  56      =1  #define  EEP_JUMPMode           0xae
  57      =1  #define  EEP_NowModeState       0xaf
  58      =1  #define  EEP_SelectMode         0xb0
  59      =1  #define  EEP_PriorityOffSelectMode  0xb1
  60      =1  #define  EEP_AudioRecord    0xb2
  61      =1  
  62      =1  #define  EEP_FirstNumber    0xb3
  63      =1  #define  EEP_SecondNumber   0xb4
  64      =1  #define  EEP_ThridNumber    0xb5
  65      =1  #define  EEP_FourthNumber   0xb6
  66      =1  
  67      =1  #define  EEP_CAMNUMBER     0xb7
  68      =1  #define  EEP_PELCO       0xb8
  69      =1  #define  EEP_Baud_rate     0xb9
  70      =1  #define  EEP_TriggerVGA    0xba
  71      =1  #define  EEP_DVRDisplay    0xbb
  72      =1  #define  EEP_IMAGE_A_Mode    0xbc//andy A1.4 20100113
  73      =1  #define  EEP_IMAGE_B_Mode    0xbd//andy A1.4 20100113
  74      =1  #define  EEP_IMAGE_C_Mode    0xbe//andy A1.4 20100113
  75      =1  
  76      =1  #define  EEP_SDCardDetect    0xbf//andy A1.4 20100113
  77      =1  
  78      =1  #ifdef HTRV
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 38  

           =1 #define  EEP_Gauge_VStart  0x211   //WILLIAM-970318
           =1 static  BYTE GaugeVStart;
           =1 #endif
  82      =1  
  83      =1  #define  EEP_DELAYCAMA           0xC0 
  84      =1  #define  EEP_DELAYCAMB           0xC1
  85      =1  #define  EEP_DELAYCAMC           0xC2
  86      =1  #define  EEP_DELAYCAMR           0xC3
  87      =1  #ifdef USE_CAMD
           =1 #define  EEP_DELAYCAMD           0xC4
           =1 #endif
  90      =1  //#define  EEP_SelectModeBuf         0xb2
  91      =1  #define  EEP_ReverseMode    0xc5
  92      =1  #define  EEP_JUMPAV_TIMESET 0xc6
  93      =1  #if 0
           =1 #define  EEP_Resolution     0xc0
           =1 #define  EEP_FPS        0xc1
           =1 #define  EEP_Quality      0xc2
           =1 #define  EEP_RecordMode     0xc3
           =1 #define  EEP_RecordLength   0xc4
           =1 #define  EEP_PreAlarmLength   0xc5
           =1 #define  EEP_PostAlarmLength  0xc6
           =1 #endif
 102      =1  //====================================HS AWT 981001
 103      =1  
 104      =1  #ifdef AWT_ADD_TRIGGER_DELAY_FUN  
 105      =1  #define  EEP_CamADelay    0x21b
 106      =1  #define  EEP_CamBDelay    0x21c
 107      =1  #define  EEP_CamCDelay    0x21d
 108      =1  #define  EEP_CamRDelay    0x21e
 109      =1  #endif
 110      =1  //====================================
 111      =1  //
 112      =1  //        ---------------------------------------------------------------
 113      =1  #define EEP_PCAUDIOPVOL   0x37  //BYTE  1   AudioVol
 114      =1  #define EEP_AUDIOPVOL     0x38  //BYTE  1   AudioVol
 115      =1  #define EEP_AUDIOBALANCE    0x39  //BYTE  1   AudioBalance
 116      =1  //
 117      =1  //        ---------------------------------------------------------------
 118      =1  
 119      =1  #define EEP_BLOCKMOVIE      0x40  //BYTE  1 BlockedMovie:Blocked rating for Movie 
 120      =1  #define EEP_BLOCKTV       0x41  //BYTE  1 BlockedTV:Blocked rating for TV     
 121      =1  #define EEP_FVSLD       0x42  //BYTE  6
 122      =1  //                            7    6       4    3    2    1    0
 123      =1  //  FVSLD Level                        ALL   FV(V)   S    L    D    
 124      =1  //  0x43    BYTE    1   TV-Y            X  
 125      =1  //  0x44  BYTE    1   TV-Y7           X    X 
 126      =1  //  0x45  BYTE    1   TV-G            X 
 127      =1  //  0x46  BYTE    1   TV-PG           X       X    X    X    X
 128      =1  //  0x47  BYTE    1   TV-14           X       X    X    X    X 
 129      =1  //  0x48  BYTE    1   TV-MA           X       X    X    X
 130      =1  //
 131      =1  #define EEP_VCHIPPASSWORD   0x49  //BYTE  4   OSDPassword         //Defualt:3366
 132      =1  //      ---------------------------------------------------------------
 133      =1  //
 134      =1  //
 135      =1  //  0x61  WORD  2   PanelXRes
 136      =1  //  0x63  WORD  2 PanelYRes
 137      =1  //  0x65  BYTE  1 PanelHsyncMinPulseWidth
 138      =1  //  0x66  BYTE  1 PanelVsyncMinPulseWidth
 139      =1  //  0x67  WORD  2 PanelHminBackPorch
 140      =1  //  0x69  BYTE  1 PanelHsyncPolarity
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 39  

 141      =1  //  0x6a  BYTE  1 PanelVsyncPolarity
 142      =1  //  0x6b  WORD  2 PanelDotClock
 143      =1  //  0x6d  BYTE  1 PanelPixsPerClock
 144      =1  //  0x6e  BYTE  1 PanelDEonly
 145      =1  //      ---------------------------------------------------------------
 146      =1  //
 147      =1  //  0x80  PC Data
 148      =1  //
 149      =1  //      ---------------------------------------------------------------
 150      =1  //
 151      =1  //  0x300 TV Data
 152      =1  //
 153      =1  //  --- NTSC_TV -------------------------------------------------------------
 154      =1  //  CNT_SAVEDAIR      BYTE  1   Total count of saved Air TV Channel.
 155      =1  //  IDX_CURAIR        BYTE  1   Index of Current Air TV Channel
 156      =1  //  CHN_CURAIR        BYTE    1   Current Air TV Channel.
 157      =1  //
 158      =1  //  FIRSTSAVED_AIRCHN   BYTE    1 First saved Air TV channel no (maximum 100)
 159      =1  //  ....
 160      =1  //
 161      =1  //  CNT_SAVEDCABLE      BYTE  1   Total count of saved Cable TV Channel.
 162      =1  //  IDX_CURCABLE      BYTE  1   Index of Current Cable TV Channel
 163      =1  //  CHN_CURCABLE      BYTE    1   Current Cable TV Channel.
 164      =1  //
 165      =1  //  FIRSTSAVED_CABLECHN   BYTE  1 First saved Cable TV channel no (maximum 100)
 166      =1  //
 167      =1  //  --- PAL_TV --------------------------------------------------------------
 168      =1  //  PR_CUR          BYTE  1   Current PR no.
 169      =1  //  FIRST_SAVEDPR     DWORD 4   Freq of PR0.  (TOTAL_PR)
 170      =1  //  FIRST_SAVEDPR+4     DWORD   4   Freq of PR1.
 171      =1  //  .....
 172      =1  //
 173      =1  
 174      =1  
 175      =1  
 176      =1  //
 177      =1  // Offset of EEPROM
 178      =1  //
 179      =1  /*
 180      =1  #define VIDEOCONTRAST   0x18    // for NTSC.(PAL:0x20,SECAM:0x28)
 181      =1  #define VIDEOBRIGHTNESS   0x19
 182      =1  #define VIDEOSATURATION_U 0x1a
 183      =1  #define VIDEOSATURATION_V 0x1b
 184      =1  #define VIDEOHUE      0x1c    // only for NTSC
 185      =1  #define VIDEOSHARPNESS    0x1d
 186      =1  */
 187      =1  #define CCCOLOR   0x52
 188      =1  #define VOLZOOM   0x53
 189      =1  
 190      =1  #define PANELINFO 0x61
 191      =1  
 192      =1  // PAL_TV
 193      =1  #define  PR_CUR         0x301 
 194      =1  #define  FIRST_SAVEDPR      0x308 
 195      =1   #define TVFREQ_HIGH 0 
 196      =1   #define TVFREQ_LOW  1
 197      =1  #ifdef PAL_TV
           =1  #define TVFINETUNE  2
           =1     // NOT Finetune: 0 , Range: -32 ~ +32
           =1  #define TVPRSYSTEM  3  
           =1     // bit 7: Add:1 Ereased :0
           =1     // 
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 40  

           =1  #define TVCHNAME    4
           =1 
           =1  #define BYTEPERCHANNEL 9 
           =1 #endif
 207      =1  // NTSC_TV
 208      =1  #define  EEP_TVInputSel     0x302
 209      =1  #define  CHN_CURAIR       0x303 
 210      =1  #define  FIRSTSAVED_AIRCHN    0x308 
 211      =1  #define  CHN_CURCABLE     0x403 
 212      =1  #define  FIRSTSAVED_CABLECHN  0x408 
 213      =1  #ifdef NTSC_TV
           =1  #define TVFINETUNE  0
           =1     // NOT Finetune: 0 , Range: -32 ~ +32
           =1  #define TVPRSYSTEM  1  
           =1     // bit 7: Add:1 Ereased :0
           =1     // 
           =1  #define BYTEPERCHANNEL 2
           =1 #endif
 221      =1  
 222      =1  
 223      =1  
 224      =1  
 225      =1  WORD GetFWRevEE(void);
 226      =1  void SaveFWRevEE(WORD);
 227      =1  
 228      =1  BYTE GetDebugLevelEE(void);
 229      =1  void SaveDebugLevelEE(BYTE);
 230      =1  
 231      =1  #ifdef WIDE_SCREEN
           =1 BYTE GetWideModeEE(void);
           =1 void SaveWideModeEE(BYTE dl);
           =1 #endif
 235      =1  
 236      =1  
 237      =1  //BYTE GetRange4CoarseEE(void);
 238      =1  //void SaveRange4CoarseEE(BYTE);
 239      =1  
 240      =1  BYTE GetPossibleAutoDetectStdEE(void);
 241      =1  void SetPossibleAutoDetectStdEE(void);
 242      =1  
 243      =1  //BYTE GetOSDXPositionEE(void);
 244      =1  //BYTE GetOSDYPositionEE(void);
 245      =1  BYTE GetClosedCaptionFlagEE(void);
 246      =1  
 247      =1  BYTE GetVideoDatafromEE(BYTE);
 248      =1  void SaveVideoDatatoEE(BYTE offset, BYTE ndata);
 249      =1  
 250      =1  //BYTE GetVideoBrightnessEE(void);
 251      =1  //BYTE GetVideoSaturationEE(BYTE);
 252      =1  //BYTE GetVideoHueEE(void);
 253      =1  //BYTE GetVideoSharpnessEE(void);
 254      =1  
 255      =1  //void SaveVideoContrastEE(BYTE ndata);
 256      =1  //void SaveVideoBrightnessEE(BYTE ndata);
 257      =1  //void SaveVideoSaturationEE(BYTE, BYTE ndata);
 258      =1  //void SaveVideoHueEE(BYTE ndata);
 259      =1  //void SaveVideoSharpnessEE(BYTE ndata);
 260      =1  
 261      =1  BYTE GetOSDPositionModeEE(void);
 262      =1  void SaveOSDPositionModeEE(BYTE ndata);
 263      =1  //void SaveOSDXPositionEE(BYTE);
 264      =1  //void SaveOSDYPositionEE(BYTE);
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 41  

 265      =1  
 266      =1  void SaveClosedCaptionFlagEE(BYTE);
 267      =1  
 268      =1  BYTE GetBlockedTVEE(void);      
 269      =1  void SaveBlockedTVEE(BYTE vi);    
 270      =1  BYTE GetBlockedTV_FLDSLEE( BYTE level ) ;
 271      =1  void SaveBlockedTV_FLDSLEE(BYTE level, BYTE vi) ;
 272      =1  
 273      =1  BYTE GetBlockedMovieEE(void);   
 274      =1  void SaveBlockedMovieEE(BYTE vi); 
 275      =1  #if 0
           =1 BYTE GetInputSelectionEE(void);
           =1 #endif
 278      =1  void SaveInputSelectionEE(BYTE val);
 279      =1  
 280      =1  //BYTE GetOSDDurationEE(void);
 281      =1  //void SaveOSDDurationEE(BYTE val);
 282      =1  
 283      =1  BYTE GetOSDLangEE(void);
 284      =1  void SaveOSDLangEE(BYTE val);
 285      =1  
 286      =1  //ljy100303...BYTE GetOSDZoomEE(void);
 287      =1  //ljy100303...void SaveOSDZoomEE(BYTE val);
 288      =1  
 289      =1  BYTE GetAudioVolEE(void);
 290      =1  void SetAudioVolEE( BYTE vol );
 291      =1  BYTE GetPCAudioVolEE(void);
 292      =1  void SetPCAudioVolEE( BYTE vol );
 293      =1  #if 0
           =1 BYTE GetAudioBalanceEE(void);
           =1 void SetAudioBalanceEE( BYTE vol );
           =1 BYTE GetAudioBassEE(void);
           =1 void SetAudioBassEE( BYTE vol );
           =1 BYTE GetAudioTrebleEE(void);
           =1 void SetAudioTrebleEE( BYTE vol );
           =1 #endif
 301      =1  //BYTE GetAudioEffectEE(void);
 302      =1  //void SetAudioEffectEE( BYTE vol );
 303      =1  
 304      =1  void ClearBasicEE(void);
 305      =1  
 306      =1  BYTE ValidPassword(DATA_P BYTE *numstr, BYTE index);
 307      =1  BYTE SetNewPassword(DATA_P BYTE *numstr, BYTE index);
 308      =1  
 309      =1  //WORD GetPanelXRes(void);
 310      =1  //WORD GetPanelYRes(void);
 311      =1  BYTE GetPanelHsyncMinPulseWidth(void);
 312      =1  BYTE GetPanelVsyncMinPulseWidth(void);
 313      =1  WORD GetPanelHMinBackPorch(void);
 314      =1  BYTE GetPanelHsyncPolarity(void);
 315      =1  BYTE GetPanelVsyncPolarity(void);
 316      =1  WORD GetPanelDotClock(void);
 317      =1  WORD GetPanelMaxClock(void);
 318      =1  BYTE GetPanelPixsPerClock(void);
 319      =1  // Not used yet *************************  BYTE GetPanelDEonly(void);
 320      =1  
 321      =1  void AddTVChannelEE( BYTE tvtype, BYTE chn);
 322      =1  BYTE GetTVChannelEE( BYTE tvtype, BYTE inx);
 323      =1  void ResetTVChannelEE( BYTE tvtype );
 324      =1  BYTE GetTVChannelCntEE(BYTE tvtype);
 325      =1  BYTE GetTVChnIdxEE(BYTE tvtype);
 326      =1  BYTE GetCurTVChannelEE(BYTE tvtype);
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 42  

 327      =1  void SetTVChnIdxEE(BYTE tvtype, BYTE newd);
 328      =1  void SetCurTVChannelEE(BYTE tvtype, BYTE newd);
 329      =1  BYTE InsertTVChannelEE(BYTE tvtype, BYTE newd);
 330      =1  BYTE RemoveTVChannelEE(BYTE tvtype, BYTE newd);
 331      =1  
 332      =1  void SetTVPrEE(void);
 333      =1  BYTE GetTVPrEE(void);
 334      =1  void SetTVFreqEE(BYTE, WORD);
 335      =1  WORD GetTVFreqEE(BYTE);
 336      =1  void SetFineTuneEE(BYTE, BYTE);
 337      =1  BYTE GetFineTuneEE(BYTE);
 338      =1  BYTE GetTVPrSystem(BYTE);
 339      =1  void SetTVPrSystem(BYTE, BYTE);
 340      =1  BYTE GetTVInputSelEE(void);
 341      =1  void SetTVInputSelEE(BYTE);
 342      =1  
 343      =1  #define GetVInputStdDetectModeEE()        ReadEEP(EEP_AUTODETECTTYTE)
 344      =1  #define SaveVInputStdDetectModeEE(A)      WriteEEP(EEP_AUTODETECTTYTE, A)
 345      =1  
 346      =1  #define GetAutoRecogntionEE()         ReadEEP(EEP_AUTORECOGNITION)
 347      =1  #define SaveAutoRecogntionEE(A)         WriteEEP(EEP_AUTORECOGNITION, A)
 348      =1  
 349      =1  #define SetVideoModeEE( ctid )          WriteEEP( EEP_VIDEOMODE, ctid )
 350      =1  #define GetVideoModeEE()            ReadEEP( EEP_VIDEOMODE )
 351      =1  
 352      =1  #define GetPanelContrastEE()          ReadEEP(0x10)
 353      =1  
 354      =1  #if defined( SUPPORT_PC ) || defined( SUPPORT_DTV )
           =1 //#define GetPanelHueEE()             ReadEEP(0x28)
           =1 //#define GetPanelSharpnessEE()         ReadEEP(0x29)
           =1 #define GetPanelBrightnessEE()          ReadEEP(0x11)
           =1 //#define GetPanelSaturationEE()          ReadEEP(0x2a)
           =1 
           =1 //#define SavePanelHueEE(A)           WriteEEP(0x28, A)
           =1 //#define SavePanelSharpnessEE(A)         WriteEEP(0x29, A)
           =1 #define SavePanelContrastEE(A)          WriteEEP(0x10, A)
           =1 #define SavePanelBrightnessEE(A)        WriteEEP(0x11, A)
           =1 //#define SavePanelSaturationEE(A)        WriteEEP(0x2a, A)
           =1 #endif
 366      =1  
 367      =1  /*
 368      =1  #define GetDigitalVideoContrastEE()       ReadEEP(0x2b)
 369      =1  #define GetDigitalVideoBrightnessEE()     ReadEEP(0x2c)
 370      =1  #define GetDigitalVideoHueEE()          ReadEEP(0x2d)
 371      =1  #define GetDigitalVideoSaturationEE(off)    ReadEEP(0x2e+off)
 372      =1  
 373      =1  #define SaveDigitalVideoContrastEE(A)     WriteEEP(0x2b, A)
 374      =1  #define SaveDigitalVideoBrightnessEE(A)     WriteEEP(0x2c, A)
 375      =1  #define SaveDigitalVideoHueEE(A)        WriteEEP(0x2d, A)
 376      =1  #define SaveDigitalVideoSaturationEE(off,A)   WriteEEP(0x2e+off, A)
 377      =1  */
 378      =1  
 379      =1  #endif  // __ETC_EEP__
  15          #include "pc_eep.h"
   1      =1  #ifndef __PC_EEP__
   2      =1  #define __PC_EEP__
   3      =1  
   4      =1  
   5      =1  // -----------------------------------------------------------------------------
   6      =1  #define PC_COLOR_DATA 0x80  // StartAddress of EEPROM for PC Color Temperature
   7      =1  #define PC_USERCOLOR  0x8A
   8      =1  #define SetPCColorTempModeEE( ctid )      WriteEEP( PC_COLOR_DATA, ctid )
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 43  

   9      =1  #define GetPCColorTempModeEE()          ReadEEP( PC_COLOR_DATA )
  10      =1  
  11      =1  #define GetPCUserColorTempEE( ucolorr)      ReadEEP( PC_USERCOLOR+ucolorr )
  12      =1  #define SavePCUserColorTempEE( ucolorw, uval) WriteEEP( PC_USERCOLOR+ucolorw, uval )
  13      =1  #define GetPCColorEE(index)           ReadEEP(index)
  14      =1  
  15      =1  // -----------------------------------------------------------------------------
  16      =1  #define EE_ADC_GO   0x90  // ADC Gain Offset for PC
  17      =1  #define EE_ADC_GO_DTV 0x98  // ADC Gain Offset for DTV
  18      =1  
  19      =1  #define EE_PCDATA   0xC0  // StartAddress of EEPROM for PCDATA
  20      =1  #define LEN_PCDATA    5   // Length of PCDATA
  21      =1  
  22      =1  WORD GetHPNfromEE(BYTE mode);
  23      =1  
  24      =1  BYTE CheckPcDataEEValid(BYTE, WORD);
  25      =1  
  26      =1  WORD GetVactiveStartEE(BYTE mode);
  27      =1  WORD GetHactiveStartEE(BYTE mode);
  28      =1  
  29      =1  void GetPCDataEE(BYTE mode);
  30      =1  void SavePCDataEE(BYTE mode);
  31      =1  void SaveDefaultPCDataEE(void);
  32      =1  void SaveDefaultPCDataAllEE(void);
  33      =1  
  34      =1  void SaveHactiveEE(BYTE mode);
  35      =1  void SaveVactiveEE(BYTE mode);
  36      =1  void SaveVBackPorchEE(BYTE mode);
  37      =1  void SaveCoarseEE(BYTE mode);
  38      =1  void SavePhaseEE(BYTE mode);
  39      =1  /*
  40      =1  WORD GetHactiveStartEE(BYTE mode);
  41      =1  WORD GetVactiveStartEE(BYTE mode);
  42      =1  */
  43      =1  void DumpPCData(void);
  44      =1  
  45      =1  void SaveActiveVEE(WORD);
  46      =1  void SaveBackPorchEE(BYTE);
  47      =1  void SaveActiveHEE(WORD);
  48      =1  
  49      =1  void SaveADCGainOffsetEE(BYTE mod);
  50      =1  void GetADCGainOffsetEE(void);
  51      =1  
  52      =1  void SaveADCGainOffsetForDTVEE(BYTE mod);
  53      =1  void GetADCGainOffsetForDTVEE(void);
  54      =1  
  55      =1  #endif  // __PC_EEP__
  16          #include "Audio.h"
   1      =1  
   2      =1  #define MAX_SOUND_VOLUME 50
   3      =1  extern  BYTE  AudioVol;
   4      =1  extern  BYTE  PCAudioVol;
   5      =1  
   6      =1  //BYTE ResetMSP(void);
   7      =1  //void SetMSPSCARTPrescale(void);
   8      =1  //void SetMSPSourceSel(void);
   9      =1  //void SetMSPVol(void);
  10      =1  
  11      =1  //BYTE AudioAutoStdDetection(void);
  12      =1  //BYTE SteroMonoDetection(void);
  13      =1  
  14      =1  //BYTE TunerAudio(void);
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 44  

  15      =1  //void ExtAudio(void);
  16      =1  //id PCAudio(void);
  17      =1  //id MuteOn(void);
  18      =1  //BYTE GetAudioVol(void);
  19      =1  BYTE ChangeVol(char);
  20      =1  //BYTE GetAudioBalance(void);
  21      =1  //BYTE ChangeBalance(char);
  22      =1  //BYTE GetAudioBass(void);
  23      =1  //BYTE ChangeBass(char);
  24      =1  //BYTE GetAudioTreble(void);
  25      =1  //BYTE ChangeTreble(char);
  26      =1  //BYTE GetAudioEffect(void);
  27      =1  //BYTE ChangeAudioEffect(char amount);
  28      =1  //void ToggleAudioMute(void);
  29      =1  //void CheckAndClearMuteOn(void);
  30      =1  
  31      =1  //BYTE IsAudioMuteOn(void);
  32      =1  //void SetAudioMute(BYTE on );
  33      =1  //void ChangeMTS(BYTE type);
  34      =1  //void AudioOff(void);
  35      =1  void AudioMute(bit mute);
  36      =1  extern void    Wait_ms(WORD Tms);
  37      =1  
  38      =1  //#define AudioOn()     SetMSPVol()
  39      =1  //void ResetAudioValue();
  17          #include "Measure.h"
   1      =1  #ifndef __MEASURE__
   2      =1  #define __MEASURE__
   3      =1  
   4      =1  #define EE_DOS        0
   5      =1  
   6      =1  #define EE_SP1        1
   7      =1  #define EE_SP2        2
   8      =1  #define EE_SP3        3
   9      =1  
  10      =1  #define EE_VGA_60     4
  11      =1  #define EE_VGA_66     5
  12      =1  #define EE_VGA_70     6
  13      =1  #define EE_VGA_72     7
  14      =1  #define EE_VGA_75     8
  15      =1  #define EE_VGA_85     9
  16      =1  
  17      =1  #define EE_SVGA_56      10
  18      =1  #define EE_SVGA_60      11
  19      =1  #define EE_SVGA_70      12
  20      =1  #define EE_SVGA_72      13
  21      =1  #define EE_SVGA_75      14
  22      =1  #define EE_SVGA_85      15
  23      =1  
  24      =1  #define EE_832_75     16
  25      =1  
  26      =1  #define EE_XGA_60     17
  27      =1  #define EE_XGA_70     18
  28      =1  #define EE_XGA_72     19
  29      =1  #define EE_XGA_75     20
  30      =1  #define EE_XGA_85     21
  31      =1  
  32      =1  #define EE_1152_60      22
  33      =1  #define EE_1152_70      23
  34      =1  #define EE_1152_75      24
  35      =1  
  36      =1  #define EE_SXGA_60      25
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 45  

  37      =1  #define EE_SXGA_70      26
  38      =1  #define EE_SXGA_75      27
  39      =1  
  40      =1  #define EE_RGB_480P     28
  41      =1  #define EE_RGB_720P     29
  42      =1  #define EE_RGB_720P50   30
  43      =1  #define EE_RGB_1080I    31
  44      =1  #define EE_RGB_1080I50A   32
  45      =1  #define EE_RGB_1080I50B   33
  46      =1  #define EE_RGB_480I     34
  47      =1  #define EE_RGB_576I     35
  48      =1  #define EE_RGB_576P     36
  49      =1  
  50      =1  #define EE_YPbPr_480P   37
  51      =1  #define EE_YPbPr_720P   38
  52      =1  #define EE_YPbPr_720P50   39
  53      =1  #define EE_YPbPr_1080I    40
  54      =1  #define EE_YPbPr_1080I50A 41
  55      =1  #define EE_YPbPr_1080I50B 42
  56      =1  #define EE_YPbPr_480I   43
  57      =1  #define EE_YPbPr_576I   44
  58      =1  #define EE_YPbPr_576P   45
  59      =1  
  60      =1  #define EE_PC_MAX     46
  61      =1  
  62      =1  #define EE_PC_NO_SIGNAL   0xfe
  63      =1  #define EE_PC_UNKNOWN   0xff
  64      =1  
  65      =1  struct _PCMDATA {
  66      =1    CODE_P BYTE  Support;
  67      =1    CODE_P WORD  HAN;
  68      =1    CODE_P WORD  VAN;
  69      =1    CODE_P WORD  IVF;
  70      =1    CODE_P WORD  CLOCK;
  71      =1    CODE_P WORD  low;
  72      =1    CODE_P WORD  high;
  73      =1    CODE_P WORD  Hstart;
  74      =1    CODE_P WORD  Vstart;
  75      =1    CODE_P WORD  IPF;   // 0.1MHz
  76      =1    CODE_P WORD  PPF;   // 0.1MHz
  77      =1    CODE_P BYTE  VBack;
  78      =1  };
  79      =1  #ifndef AUTOCALC_PC
           =1 
           =1 #ifdef SUPPORT_DTV
           =1 struct _DTVMDATA {
           =1   CODE_P BYTE Reg62;
           =1   CODE_P BYTE RegBC;
           =1   CODE_P BYTE RegBD;
           =1   CODE_P BYTE RegBE;
           =1   CODE_P WORD PHP;
           =1 };
           =1 #endif
           =1 #endif
  91      =1  #if defined XGA
           =1   #define MAX_PPF    90000000
           =1 #elif defined SXGA
           =1   #define MAX_PPF   135000000
           =1 #elif defined WXGA
           =1   #define MAX_PPF    90000000
           =1 #elif defined WVGA
  98      =1    #define MAX_PPF    90000000
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 46  

  99      =1  #elif defined VGA
           =1   #define MAX_PPF    50000000
           =1 #elif defined SVGA
           =1   #define MAX_PPF    80000000
           =1 #elif defined QVGA
           =1   #define MAX_PPF    30000000
           =1 #elif defined WQVGA
           =1   #define MAX_PPF    30000000
           =1 #endif
 108      =1  
 109      =1  extern BYTE cLastSyncLoss;
 110      =1  extern BYTE PcMode;
 111      =1  
 112      =1  void CompLT170E2(void);
 113      =1  
 114      =1  WORD gap(WORD a, WORD b);
 115      =1  
 116      =1  //===================================================================
 117      =1  WORD GetHpnVpn(BYTE);
 118      =1  
 119      =1  WORD ConvertBasedOnInput(WORD dat);
 120      =1  
 121      =1  BYTE IsDTVInput(void);
 122      =1  
 123      =1  void SetVValueForPanel(WORD vstart);
 124      =1  BYTE SetHValueForPanel(void);
 125      =1  BYTE GetActiveRegion(void);
 126      =1  
 127      =1  BYTE DetectAndSetForVGAInput(BYTE);
 128      =1  #ifdef SUPPORT_DTV
           =1 BYTE DetectAndSetForDTVInput(BYTE);
           =1 #endif
 131      =1  void CheckPCinput(void);
 132      =1  void CheckDTVinput(void);
 133      =1  
 134      =1  WORD GetCoarseValue(void);
 135      =1  BYTE GetPhaseValue(void);
 136      =1  WORD SetPCCoarseValue(BYTE val);
 137      =1  BYTE SetPhaseValue(BYTE val);
 138      =1  
 139      =1  void DisplayResultAndSetActiveRange(void);
 140      =1  
 141      =1  //=============================================================================
 142      =1  //                    PC Screen Position Move Functions
 143      =1  //=============================================================================
 144      =1  void MoveActiveVpos(BYTE val);    // Up/Down
 145      =1  void MoveActiveHpos(BYTE val);    // Left/Right
 146      =1  
 147      =1  BYTE GetVPosition(void);
 148      =1  BYTE SetVPosition(BYTE val);
 149      =1  BYTE GetHPosition(void);
 150      =1  BYTE SetHPosition(BYTE val);
 151      =1  
 152      =1  void ResetPCValue(void);
 153      =1  
 154      =1  CODE_P BYTE *GetPCInputSourceName(void);
 155      =1  BYTE AutoAdjust(void);
 156      =1  
 157      =1  #endif // __MEASURE__
  18          #include "OSDBasic.h"
   1      =1  //osd_basic.h
   2      =1  //LJY11012001
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 47  

   3      =1  #ifndef __OSD_BASIC__
   4      =1  #define __OSD_BASIC__
   5      =1  
   6      =1  // osd_basic.h
   7      =1  // char code
   8      =1  //#include "apilib.h"
   9      =1  
  10      =1  //ljy052903
  11      =1  //definition for internal OSD
  12      =1  #define FONT_WIDTH_TW88     12
  13      =1  #define FONT_HEIGHT_TW88    18
  14      =1  #define PIXS_PER_XSTEP_TW88   8
  15      =1  #define LINES_PER_YSTEP_TW88  4
  16      =1  #define MAX_OSDWINDOW_TW88    8
  17      =1  
  18      =1  // Using TW88 OSD for Menu
  19      =1  #define FONT_WIDTH      12
  20      =1  #define FONT_HEIGHT     18
  21      =1  #define PIXS_PER_XSTEP    8
  22      =1  #define LINES_PER_YSTEP   4
  23      =1  #define MAX_OSDWINDOW   4
  24      =1  
  25      =1  #define MAX_FONT_BYTES    27
  26      =1  #define RAMFONT   0xFE
  27      =1  #define ROMFONT   0xFF
  28      =1  #define NO_UDFONT     226 
  29      =1  
  30      =1  #define FONT_ROM  1
  31      =1  #define FONT_RAM  2
  32      =1  
  33      =1  
  34      =1  /////////////////////////////////
  35      =1  // Old Registers...
  36      =1  /*
  37      =1    #define TW88_WIN1ATTR   0x76
  38      =1    #define TW88_WIN1XSTART   0x77
  39      =1    #define TW88_WIN1YSTART   0x78
  40      =1    #define TW88_WIN1WIDTH    0x79
  41      =1    #define TW88_WIN1HEIGHT   0x7a
  42      =1    #define TW88_WIN1BRDATTR  0x7b
  43      =1    #define TW88_WIN1BRDWIDTH 0x7c
  44      =1    #define TW88_WIN1BRDHEIGHT  0x7d
  45      =1    #define TW88_WIN1XSPACE   0x7e    // between characters.
  46      =1    #define TW88_WIN1YSPACE   0x7f
  47      =1    #define TW88_WIN1SADDR    0x80    // starting address of OSD ram for Windows 1
  48      =1  */
  49      =1  /////////////////////////////////
  50      =1  
  51      =1  // OSD
  52      =1  #define TW88_ENABLERAM    0x94  // TW8804C
  53      =1  #define TW88_FONTRAMADDR  0x99  // TW8804C
  54      =1  #define TW88_FONTRAMDATA  0x9a  // TW8804C
  55      =1  #define TW88_OSDRAMADDRHI 0x95  // TW8804C
  56      =1  #define TW88_OSDRAMADDRLO 0x96  // TW8804C
  57      =1  #define TW88_OSDRAMDATAHI 0x97  // TW8804C
  58      =1  #define TW88_OSDRAMDATALO 0x98  // TW8804C
  59      =1  #define TW88_MULTISTART   0x9b  // TW8804C
  60      =1  #define TW88_OSDLOCKUPSEL 0x9c
  61      =1  #define TW88_WINNUM     0x9e  // TW8804C
  62      =1  #define TW88_WINATTR    0x9f  //
  63      =1  #define TW88_WINXSTART    0xa1  //
  64      =1  #define TW88_WINYSTART    0xa2  //
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 48  

  65      =1  #define TW88_WINSTART_HI  0xa0  //
  66      =1  #define TW88_WINWIDTH   0xa3  //
  67      =1  #define TW88_WINHEIGHT    0xa4  //
  68      =1  #define TW88_WINBRDATTR   0xa5  //
  69      =1  #define TW88_WINBRDWIDTH  0xa6  //
  70      =1  #define TW88_WINBRDHEIGHT 0xa7  //
  71      =1  #define TW88_WINSPACE   0xa8  // between characters.
  72      =1  #define TW88_WINZOOM    0xa9  //
  73      =1  #define TW88_WINSADDRHI   0xa9  // starting address of OSD ram for Windows 1
  74      =1  #define TW88_WINSADDRLO   0xaa  // starting address of OSD ram for Windows 1
  75      =1  
  76      =1  #define TW88_WINSHADOW    0xab  //
  77      =1  #define TW88_WINBLENDING  0xac  //
  78      =1  #define TW88_WINCHEFFECT  0xad  //
  79      =1  
  80      =1  
  81      =1  //Attributes for OSD
  82      =1  #define WINZOOMx1     0x01
  83      =1  #define WINZOOMx2     0x02
  84      =1  #define WINZOOMx3     0x03
  85      =1  #define WINZOOMx4     0x04
  86      =1  #define SHOW        0x08  
  87      =1  
  88      =1  #define EXTENDED_COLOR    0x80
  89      =1  #define BG_COLOR_BLACK    0x00  //For background color of window, border, and char. 
  90      =1  #define BG_COLOR_RED    0x40  
  91      =1  #define BG_COLOR_GREEN    0x20
  92      =1  #define BG_COLOR_YELLOW   0x60
  93      =1  #define BG_COLOR_BLUE   0x10
  94      =1  #define BG_COLOR_MAGENTA  0x50
  95      =1  #define BG_COLOR_CYAN   0x30
  96      =1  #define BG_COLOR_WHITE    0x70
  97      =1  #define BG_COLOR_TRANS    0x80  
  98      =1  #define BG_COLOR_MASK   0xf0  
  99      =1  
 100      =1  #define CH_COLOR_BLACK    0x00  //For color of char.
 101      =1  #define CH_COLOR_RED    0x04  
 102      =1  #define CH_COLOR_GREEN    0x02
 103      =1  #define CH_COLOR_YELLOW   0x06
 104      =1  #define CH_COLOR_BLUE   0x01
 105      =1  #define CH_COLOR_MAGENTA  0x05
 106      =1  #define CH_COLOR_CYAN   0x03
 107      =1  #define CH_COLOR_WHITE    0x07
 108      =1  #define CH_BLINK      0x08  
 109      =1  #define CH_COLOR_MASK   0x0f  
 110      =1  
 111      =1  #define CL_BLACK      0x00  //For color of char.
 112      =1  #define CL_BLUE       0x01
 113      =1  #define CL_GREEN      0x02
 114      =1  #define CL_CYAN       0x03
 115      =1  #define CL_RED        0x04  
 116      =1  #define CL_MAGENTA      0x05
 117      =1  #define CL_YELLOW     0x06
 118      =1  #define CL_WHITE      0x07
 119      =1  #define CL_BLINK      0x08  
 120      =1  
 121      =1  // 0x76*(WindowNo*0x0b)
 122      =1  #define WINDOW_DISABLE    0x00
 123      =1  #define WINDOW_ENABLE   0x01
 124      =1  #define WINDOW_3D_ENABLE    0x04
 125      =1  #define WINDOW_3D_BOTTOM    0x08
 126      =1  #define WINDOW_3D_TOP     0x00
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 49  

 127      =1  #define WINDOW_TRANS_ENABLE 0x80
 128      =1  
 129      =1  #define WINBDCOLOR_ENABLE 0x80
 130      =1  #define WINBDCOLOR_EXTENT 0x80
 131      =1  
 132      =1  
 133      =1  #define WINBLENDING_DISABLE 0x00
 134      =1  #define WINBLENDING_BACK    0x10
 135      =1  #define WINBLENDING_FORE    0x20
 136      =1  #define WINBLENDING_ALL     0x30
 137      =1  
 138      =1  #define WINSHADOW_ENABLE  0x80
 139      =1  // 0xc8*WindowNo
 140      =1  #define WIN_MULTICOLOR_ENABLE 0x20
 141      =1  #define WIN_CH_EFFECT_ENABLE  0x10
 142      =1  #define WIN_CH_EFFECT_SHADOW  0x08
 143      =1  
 144      =1  
 145      =1  
 146      =1  ///////// TW8804C /////////////
 147      =1  // Window Number
 148      =1  #define WINNUM1       1
 149      =1  #define WINNUM2       2
 150      =1  #define WINNUM3       3
 151      =1  #define WINNUM4       4
 152      =1  
 153      =1  // Index 0x9f Defination
 154      =1  #define WIN_BG_COLOR_EX   0x80
 155      =1  #define WIN_BG_COLOR_EX0  0x00
 156      =1  #define WIN_3D_TYPE     0x08
 157      =1  #define WIN_3D_TYPE0    0x00
 158      =1  #define WIN_3D_EN     0x04
 159      =1  #define WIN_3D_EN0      0x00
 160      =1  #define WIN_3D_LEVEL    0x02
 161      =1  #define WIN_EN        0x01
 162      =1  #define WIN_EN0       0x00
 163      =1  
 164      =1  // Index 0xa5 Defination
 165      =1  #define WIN_BD_EN     0x80
 166      =1  #define WIN_BD_EN0      0x00
 167      =1  #define WIN_BD_WIDTH(a)   a
 168      =1  
 169      =1  // Index 0xa6 Defination
 170      =1  #define WIN_BD_COLOR_EX   0x80
 171      =1  #define WIN_BD_COLOR_EX0  0x00
 172      =1  #define WIN_H_BD_W(a)   a
 173      =1  
 174      =1  // Index 0xa7 Defination
 175      =1  #define WIN_V_BD_W(a)   a
 176      =1  
 177      =1  // Index 0xa8
 178      =1  #define WIN_CH_VSPACE(a)  (a<<4)
 179      =1  #define WIN_CH_HSPACE(a)  a
 180      =1  
 181      =1  // Index 0xa9 Defination
 182      =1  #define WIN_VZOOM(a)    (a-1)
 183      =1  #define WIN_HZOOM(a)    (a-1)
 184      =1  #define WIN_SADDR(a)    a
 185      =1  
 186      =1  // Index 0xab
 187      =1  #define WIN_SHADOW_EN   0x80
 188      =1  #define WIN_SHADOW_EN0    0x00
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 50  

 189      =1  #define WIN_SHADOW_W(a)   a
 190      =1  
 191      =1  // ad
 192      =1  #define WIN_SHADOW_COLOR_EX   0x80
 193      =1  #define WIN_SHADOW_COLOR_EX0  0x00
 194      =1  #define WIN_MULTI_EN      0x40
 195      =1  #define WIN_MULTI_EN0     0x00
 196      =1  #define WIN_V_EXT_EN      0x20
 197      =1  #define WIN_V_EXT_EN0     0x00
 198      =1  #define WIN_CH_BDSH_SEL(a)    a
 199      =1  #define SEL_BORDER        0
 200      =1  #define SEL_SHADOW        1
 201      =1  #define WIN_CH_BDSH_COLOR_EX  0x08
 202      =1  #define WIN_CH_BDSH_COLOR_EX0 0x00
 203      =1  
 204      =1  #define OSD_Win_Num(a)      0x9e, a-1
 205      =1  #define OSD_Win_Start_Addr    0xa0
 206      =1  #define OSD_Win_Attr(a)       a
 207      =1  #define OSD_Win_Start(h,v)       (BYTE)(((WORD)h>>8) | (((WORD)v>>8)<<4)),(BYTE)h, (BYTE)v
 208      =1  #define OSD_Win_Width(a)      a
 209      =1  #define OSD_Win_Height(a)     a
 210      =1  #define OSD_Win_Border(a)     a
 211      =1  #define OSD_Win_HBorder(a)      a
 212      =1  #define OSD_Win_VBorder(a)      a
 213      =1  #define OSD_Win_CH_Space(a)     a
 214      =1  #define OSD_Win_ZM_SAddr(h,v,a)   ((h<<6)|(v<<4)|(a>>8)), (BYTE)a
 215      =1  #define OSD_Win_Shadow(a)     a
 216      =1  #define OSD_Win_Blending(a)     a
 217      =1  #define OSD_Win_CH_BorderShadow(a)  a
 218      =1  
 219      =1  
 220      =1  #define SetOSDWindowNum(winno)    WriteTW88(TW88_WINNUM, winno-1)
 221      =1  
 222      =1  //#define  OSD_Window_Attr(Trans_en,Color,3D_Type,3D_en,W_en)       (((( Trans_en | Color ) | 3D_Type) | 3
             -D_en) | W_en)
 223      =1  #define  OSD_Window_Attr(a,b,c,d,e)                 (((( a | b ) | c) | d) | e)
 224      =1  #define  OSD_WShadow_Attr(W_Shadow_en,Color,Width)          W_Shadow_en | Color | Width
 225      =1  //#define  OSD_Blending(en,level)                   en | (level & 0x0f)
 226      =1  //#define  OSD_Ch_Effect(Multi, Effect_En, ShadowBorder, Color)   Multi | Effect_En | ShadowBorder | Color 
             - 
 227      =1  
 228      =1  
 229      =1  struct OSDStrInfo 
 230      =1  {
 231      =1    BYTE  cnt;
 232      =1    WORD  addr;
 233      =1    BYTE  attr;
 234      =1    DWORD str;
 235      =1  };
 236      =1  /*
 237      =1  struct BarInfo {
 238      =1    struct RegisterInfo BarCnt;
 239      =1    BYTE  winno;
 240      =1    BYTE  xoff;
 241      =1    BYTE  yoff;
 242      =1    BYTE  color;
 243      =1    int   bar_cnt;
 244      =1  };
 245      =1  */
 246      =1  struct FontData {
 247      =1    BYTE  font[27];
 248      =1  } ;
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 51  

 249      =1  
 250      =1  //====================================================================
 251      =1  //  Internal OSD Function
 252      =1  void CopyCharToOSDRAM_TW88(BYTE Addr, BYTE attr, BYTE ch);
 253      =1  void CopyUDCharToOSDRAM_TW88(BYTE Addr, BYTE attr, BYTE ch);
 254      =1  //BYTE GetOSDWindowWidth_TW88(BYTE winno);
 255      =1  WORD GetOSDWindowSA_TW88(BYTE winno);
 256      =1  void SetOSDWindowX_TW88(BYTE winno, BYTE x);
 257      =1  void SetOSDWindowY_TW88(BYTE winno, BYTE y);
 258      =1  void SetOSDWindowWidth_TW88(BYTE winno, BYTE w);
 259      =1  void SetOSDWindowSA_TW88(BYTE winno, WORD sa);
 260      =1  
 261      =1  void SetOSDItalicsAndUnderline(BYTE italics, BYTE underline);
 262      =1  
 263      =1  void SetOSDHBorderWidth_TW88(BYTE winno, BYTE w);
 264      =1  //BYTE GetOSDWindowColor_TW88(BYTE winno);
 265      =1  void SetOSDWindowColor_TW88(BYTE CCWin, BYTE color);
 266      =1  void EnableOSDRAMAndChangeFont(BYTE type);
 267      =1  void WriteCharToOSDRAM(WORD addr, BYTE ch, BYTE attr);
 268      =1  
 269      =1  
 270      =1  void ShowOSDWindowAll(BYTE on);
 271      =1  void ShowOSDWindow_TW88(BYTE winno, BYTE onoff);
 272      =1  void ClearOSD_TW88(void);
 273      =1  //void CreateOSDWindow_TW88(BYTE winno, BYTE x, BYTE y, BYTE w, BYTE h, WORD sa, BYTE attr);
 274      =1  /*not yet!!
 275      =1  //ljy012304...CC_ADJUST_POS
 276      =1  void SetOSDWindowXS_TW88(BYTE winno, BYTE xs);
 277      =1  void SetOSDWindowYS_TW88(BYTE winno, BYTE ys);
 278      =1  */
 279      =1  
 280      =1  //====================================================================
 281      =1  //  OSDMenu Functions
 282      =1  
 283      =1  //--------------------------------------------------------------------
 284      =1  //  Functions used in only Menu
 285      =1  #define   CONVERT_CODE      0x80
 286      =1  
 287      =1  void InitOSDWindow(BYTE *ptr);
 288      =1  
 289      =1  WORD GetOSDWindowX(BYTE winno);
 290      =1  WORD GetOSDWindowY(BYTE winno);
 291      =1  BYTE CreateOSDWindowOutline(BYTE winno, BYTE w, BYTE color);
 292      =1  void CreateOSDMenuWindow(BYTE, BYTE, BYTE, BYTE, BYTE, BYTE, BYTE);
 293      =1  void ClearOSDLine(BYTE winno, BYTE sx, BYTE sy, BYTE cnt, BYTE attr);
 294      =1  void WriteStringToAddr(WORD addr, BYTE *str, BYTE cnt);
 295      =1  void DrawAttrString(WORD addr, BYTE *str, BYTE cnt);
 296      =1  void DrawAttrCnt(WORD addr, BYTE color, BYTE cnt);
 297      =1  void ClearDataCnt(WORD, BYTE);
 298      =1  #define   SetOSDWindowX(A, B)       SetOSDWindowX_TW88(A, B)
 299      =1  #define   SetOSDWindowY(A, B)       SetOSDWindowY_TW88(A, B)
 300      =1  
 301      =1  //--------------------------------------------------------------------
 302      =1  //  Functions used in Menu and others
 303      =1  #define   ShowOSDWindow(A, B)       ShowOSDWindow_TW88(A, B)
 304      =1  #define   ClearOSD()              ClearOSD_TW88()
 305      =1  
 306      =1  //================================================================
 307      =1  //  Font
 308      =1  void DownloadUDFont(void);
 309      =1  #ifdef Hs_debug
 310      =1  void DisplayROMFont(BYTE);
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 52  

 311      =1  void DisplayRAMFont(BYTE);
 312      =1  #endif
 313      =1  void DownloadFont(BYTE cod, CODE_P BYTE *fontdata);
 314      =1  //void DisplayGrid( void );
 315      =1  //void DisplayCone( void );
 316      =1  //void DisplayJapanese( void );
 317      =1  void TestRAMFont( void );
 318      =1  #ifdef BANKING
           =1 void DisplayMGrid( BYTE );
           =1 void DisplayMessage( void );
           =1 void DisplayChinese( void );
           =1 void DisplayJapanese( void );
           =1 void DisplayKorean( void );
           =1 void DisplayGridBank0( BYTE n );
           =1 void DisplayGridBank1( BYTE n );
           =1 #endif
 327      =1  
 328      =1  //================================================================
 329      =1  //  OSD COLOR
 330      =1  void Change_OSDColorLookup(void);
 331      =1  void Reset_OSDColorLookup(void);
 332      =1  
 333      =1  //====================================================================
 334      =1  //        Conversion
 335      =1  //====================================================================
 336      =1  BYTE utoa(WORD value, BYTE *str, BYTE radix);
 337      =1  BYTE ltoa_K(long value, BYTE *str, BYTE);
 338      =1  BYTE strlen( BYTE *str );
 339      =1  
 340      =1  #define CStrlen(A)        strlen(A)
 341      =1  
 342      =1  void WaitEndofDisplayArea(void);
 343      =1  
 344      =1  #endif  // __OSD_BASIC__
 345      =1  
  19          #include "OSDMenu.h"
   1      =1  //osdmenu.h
   2      =1  //LJY10292001
   3      =1  #ifndef __OSDMENU__
   4      =1  #define __OSDMENU__
   5      =1  
   6      =1  //=======================================================================
   7      =1  // 
   8      =1  //BYTE GetOSDDuration(void);
   9      =1  
  10      =1  void ResetVideoValue(void);
  11      =1  //#if defined( SUPPORT_PC ) || defined( SUPPORT_DTV )
  12      =1  //void ResetPCValue(void);
  13      =1  //#endif
  14      =1  BYTE GetOSDMenuLevel( void );
  15      =1  
  16      =1  void DrawMenulist(BYTE);
  17      =1  void Display_EnterPin(void);
  18      =1  void OSDHighMenu_sub(void);
  19      =1  void ResetOSDValue(void);
  20      =1  #ifdef E_Wintek
           =1 void ResetUESROSDValue(void);
           =1 #endif
  23      =1  //BYTE OnChangingValue(void);
  24      =1  //Not used yet *******************BYTE OnChangingTime(void);
  25      =1  
  26      =1  //WORD GetOSDclock(void);
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 53  

  27      =1  
  28      =1  #ifdef HS_NEWOSDMENU
           =1 void InitOSDMenu(BYTE OSD_ID);
           =1 void OpenOSDMenu(BYTE OSD_ID);
           =1 #else
  32      =1  void InitOSDMenu(void);
  33      =1  void OpenOSDMenu(void);
  34      =1  #endif
  35      =1  BYTE CloseOSDMenu(void);
  36      =1  
  37      =1  void OpenFORMATMenu(void);
  38      =1  void OSDHighMenu(void);
  39      =1  void OSDSelect(void);
  40      =1  void OSDCursorMove(BYTE flag );
  41      =1  void OSDLeftRight(BYTE flag );
  42      =1  void OSDValueUpDn(BYTE flag);
  43      =1  WORD SetItemValue( BYTE id, BYTE flag );
  44      =1  BYTE DoAction(BYTE id);
  45      =1  
  46      =1  BYTE SaveValue1(void);
  47      =1  void ClearValueWin(void);
  48      =1  
  49      =1  void OSDNumber( BYTE num );
  50      =1  
  51      =1  void Set4WideScreen(BYTE id);
  52      =1  
  53      =1  void SetRGBContrast( BYTE id, BYTE val );
  54      =1  BYTE SetPCColorTemp(BYTE flag);
  55      =1  void ResetPanelAttributeValue(void);
  56      =1  WORD GetItemValue( BYTE);
  57      =1  void DisplayViewBar( WORD,BYTE);
  58      =1  void DrawNum(WORD, CODE_P struct NumType *, WORD);
  59      =1  void DrawStringByLang( WORD, CODE_P struct EnumType *, WORD);
  60      =1  
  61      =1  void DisplayVolumebar(BYTE val);
  62      =1  BYTE GetOSDLang(void);
  63      =1  void InitOSDMenuXY(void);
  64      =1  
  65      =1  void Display_TVGuide_Window(void);
  66      =1  void Display_TVGuide_Status(void);
  67      =1  
  68      =1  void ChangeVchip_LevelCursor(BYTE);
  69      =1  void ChangeVchip_ContentCursor(BYTE);
  70      =1  void Select_VchipLevel(void);
  71      =1  void SetVideoMode(BYTE mode);
  72      =1  BYTE GetVideoDatawithOffset(BYTE offset);
  73      =1  void SetVideoContrast(BYTE newv);
  74      =1  void SetVideoBrightness(BYTE newv);
  75      =1  void SetVideoHue(BYTE newv) ;
  76      =1  void SetVideoSaturation(BYTE svtype, BYTE newv) ;
  77      =1  BYTE SetVideoSharpness(BYTE flag) ;
  78      =1  void SetVideoBacklight(BYTE newv) ;
  79      =1  //------------------------------------------------andy awt 981013
  80      =1  //void DaySelect(BYTE);
  81      =1  void CAMOutDSel(BYTE val);
  82      =1  void DVRAodioSel(BYTE  val);
  83      =1  
  84      =1  //------------------------------------------------andy awt 981013
  85      =1  
  86      =1  void DisplayLineOSD(void);  // OSD Line display Demo
  87      =1  #ifdef CENEC_OSDMENU_ACCM8
           =1 BYTE ChkOSDMENU_TOPWIN(void);  //Weylis 080930
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 54  

           =1 BYTE ChkOSDMENU_WINDOW(void);
           =1 BYTE ChkOSDMENU(void);
           =1 #endif
  92      =1  
  93      =1  #ifdef AWT_ADD_TRIGGER_DELAY_FUN  //Pinchi 20150209 add
  94      =1  void AWT_DisplayViewBar(WORD addr , BYTE val);
  95      =1  #endif
  96      =1  struct MenuType {
  97      =1    BYTE  width,  height;
  98      =1    BYTE  TitleColor; 
  99      =1    BYTE  CursorColor;
 100      =1  };
 101      =1  
 102      =1  struct NumType {
 103      =1    BYTE  PrePostCharLen;   // high nibble(pre) / low nibble(post)
 104      =1    BYTE  PrePostChar[4];
 105      =1  };
 106      =1  
 107      =1  struct NumberStringType {
 108      =1    BYTE  x, y;
 109      =1    BYTE    width;
 110      =1    BYTE  BackColor;
 111      =1    BYTE  Radix;
 112      =1    BYTE  NumColor;
 113      =1    BYTE    MaxLen;       // maximum length of string
 114      =1    BYTE  PrePostCharLen;   // high nibble(pre) / low nibble(post)
 115      =1    BYTE  PrePostChar[3];
 116      =1  };
 117      =1  
 118      =1  struct TimeType {
 119      =1    BYTE  x, y;
 120      =1    BYTE    width;
 121      =1    BYTE  BackColor;
 122      =1    BYTE  Format;       //_24H_TIME
 123      =1    BYTE  TimeColor;
 124      =1    BYTE    CursorColor;
 125      =1  };
 126      =1  
 127      =1  struct EnumType {
 128      =1    BYTE    Sz;//size
 129      =1    BYTE    ByLang;
 130      =1    BYTE  Str[15];      // doesn't matter the size !!!
 131      =1  };
 132      =1  
 133      =1  #define ICON_CH_SZ    2
 134      =1  //#define BAR_NUM_SZ    4
 135      =1  #define ICON_BUF_SZ   2
 136      =1  struct DefineMenu {
 137      =1    //WORD            Icon[ICON_BUF_SZ];  
 138      =1    BYTE        CODE  *Icon;
 139      =1    BYTE            **Desc;       
 140      =1    BYTE            PreFnId, 
 141      =1                  PostFnId;
 142      =1  //  void    (*CalltoFunction)(void);            // Un/Dn/Sel Function
 143      =1    BYTE            IconColor;      //NIL: not to display icon
 144      =1    BYTE            DescColor;      //NIL: not to display desc. (IconColor==NIL && DescColor==NIL)->Last Item
 145      =1    struct DefineMenu CODE  *Child;
 146      =1    BYTE            Type;       // MENU, CHOICEMENU, BAR, NUMBER, TIME, ACTION, ENUM_STRING
 147      =1    BYTE            ActiveWithCursor;
 148      =1    BYTE            Id;
 149      =1    BYTE        CODE  *TypeData;  //MenuType, BarType, NumType,,,
 150      =1  } ;
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 55  

 151      =1  
 152      =1  struct PictureInfo {
 153      =1  
 154      =1    BYTE Register_Addr;
 155      =1    BYTE EEPROM_Addr;
 156      =1    struct RegisterInfo   CODE  *Control_Range;
 157      =1  };
 158      =1  
 159      =1  
 160      =1  //-------------------------------------------------------------------
 161      =1  // OSD Window Information
 162      =1  //-------------------------------------------------------------------
 163      =1  // Window Number
 164      =1  #define OSDCURSORWINDOW     1
 165      =1  #define OSDMENUWINDOW       OSDCURSORWINDOW+1
 166      =1  #define OSDMENU_TOPWIN      OSDCURSORWINDOW+2
 167      =1  #define OSDMENU_TITLEWIN    OSDCURSORWINDOW+3
 168      =1  #define OSDBARWINDOW      OSDCURSORWINDOW
 169      =1  
 170      =1  #define TECHWELLOGO_OSDWIN    1 
 171      =1  #define TVINFO_OSDWIN       2 
 172      =1  #define FONTTEST_OSDWIN     2 
 173      =1  #define INPUTINFO_OSDWIN    3  
 174      =1  #define RATINGINFO_OSDWIN     1 
 175      =1  #define PCINFO_OSDWIN       3
 176      =1  #define VLOSSINFO_OSDWIN    4
 177      =1  
 178      =1  //-------------OSDMENU_TITLEWIN------------------------------------------------------
 179      =1  // Window Start address
 180      =1  #define OSDMENU_MAINADDR  0
 181      =1  //#define OSDMENU_SUBADDR     OSDMENU_MAINADDR+15    //25*9:196
 182      =1  //#define OSDMENU_SUBADDR     OSDMENU_MAINADDR+HS_WIDTH //0+40   //25*9:196
 183      =1  //#define OSDMENU_SUBADDR     OSDMENU_MAINADDR+10 //0+40   //25*9:196
 184      =1  #define OSDMENU_SUBADDR     OSDMENU_MAINADDR + 14 //0+40   //25*9:196  // Weylis 121008 清除 Icon 後面
 185      =1  
 186      =1  #define OSDMENU_BARADDR   200 //OSDMENU_SUBADDR+225    //256   //25x2:50
 187      =1  
 188      =1  #ifdef WQVGA
           =1 #define INPUTINFO1_ADDR   INPUTINFO_ADDR+17 //17x3:51
           =1 #else
 191      =1  #define INPUTINFO1_ADDR   INPUTINFO_ADDR+34 //17x2:51
 192      =1  #endif
 193      =1  
 194      =1  #define MUTEINFO_ADDR     INPUTINFO1_ADDR+51  // 4x1:4
 195      =1  #define TVCHINFO_ADDR     MUTEINFO_ADDR//324  // 3X1:3
 196      =1  #define LOGO_ADDR     0
 197      =1  #ifdef AWT_ML072S
 198      =1  #define RATINGINFO_ADDR   (34)  //addr:210(8x1:8)
 199      =1  #else
           =1 #define RATINGINFO_ADDR   0 //addr:210(8x1:8)
           =1 #endif
 202      =1  #define PCMEASUREINFO_ADDR  OSDMENU_BARADDR //10x1
 203      =1  #ifdef QUAD
           =1 #define INPUTINFO_ADDR    160 // 9x1:9
           =1 #else
 206      =1  #define INPUTINFO_ADDR    0///24  // 9x1:9
 207      =1    #ifdef AWT_ML072S
 208      =1    #define INPUTINFO_MIRROR_ADDR 0//83 //william-v1.0-970804
 209      =1    #else
           =1   #define INPUTINFO_MIRROR_ADDR 73//83  //william-v1.0-970804
           =1   #endif
 212      =1  #define INPUTINFO_WIDTH   40  // 9x1:9    //william-v1.0-971111
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 56  

 213      =1  #endif
 214      =1  #define OSD_VLOSS_ADDR  33 
 215      =1  
 216      =1  
 217      =1  //--------------------------------------------------------------------
 218      =1  // OSD Menu Position Range
 219      =1  #if ((defined WQVGA) && (defined ANALOG_7INCH)) || ((defined QVGA) && (defined SHARP_LQ050Q5DR01))
           =1   #define OSD_PHR_ PHR_/2
           =1 #else
 222      =1    #define OSD_PHR_ PHR_
 223      =1  #endif
 224      =1  
 225      =1  #define OSDHSTART_MAX (OSD_PHR_-(12+1)*25 - 56*2 -4)  //PHR - (pixelsize +Hspace)*MenuWidth - Hborder*2 - 
             -outlinewidth*2
 226      =1  #define OSDVSTART_MAX (PVR_-(18+11)*9 - 5*2 ) //  PVR - (Linesize+Vspace)*MENU_HEIGHT - Vborder*2  - outli
             -newidth*2
 227      =1  
 228      =1  #define OSDHSTART_MAX_A (OSD_PHR_-(12+2)*25 - 56*2 -8) //OSDHSTART_MAX  //PHR - (pixelsize +Hspace)*MenuWi
             -dth - Hborder*2 - outlinewidth*2
 229      =1  #define OSDVSTART_MAX_A OSDVSTART_MAX  //  PVR - (Linesize+Vspace)*MENU_HEIGHT - Vborder*2  - outlinewidth*
             -2
 230      =1  
 231      =1  #define OSDMENUX_MIN 1//0
 232      =1  #define OSDMENUX_MAX (OSDHSTART_MAX>>3)
 233      =1  #define OSDMENUX_50  (OSDHSTART_MAX>>4)
 234      =1  
 235      =1  #define OSDMENUY_MIN 2//0
 236      =1  #define OSDMENUY_MAX (OSDVSTART_MAX>>2)
 237      =1  #define OSDMENUY_50  (OSDVSTART_MAX>>3)
 238      =1  
 239      =1  #ifdef HS_NEWOSDMENU  //Weylis -@121008
           =1 // HS OSD Style
           =1 #define HS_WIDTH      40
           =1 #define HS_CHSPACE      14
           =1 //#define HS_CHSPACE      18
           =1 #define HS_ICONSPACE    1
           =1 #define HS_ICONSADDR    0
           =1 //#define HS_ICONSPACE    2
           =1 //#define HS_ICONSADDR    8
           =1 #endif
 249      =1  
 250      =1  //--------------------------------------------------------------------
 251      =1  // OSD Menu Width, Height 
 252      =1  #ifdef E_Wintek
           =1 #define ICON_HIGH       0x14
           =1 #else
 255      =1  #define ICON_HIGH       0x0a
 256      =1  #endif
 257      =1  
 258      =1  #define TOTAL_MAX_HIGHT     9
 259      =1  #define TOTAL_TOP_HEIGHT    5 // Include blank line!
 260      =1  #define TOPMENU_WIDTH     2
 261      =1  #define TOPMENU_HEIGHT      4 
 262      =1  
 263      =1  #if (defined QVGA) && (defined SHARP_LQ050Q5DR01)
           =1 #define MENU_WIDTH        17 //23//25 
           =1 #define TITLE_MAX_DESC      17 //25 //
           =1 #define BAR_LENGTH        0
           =1 #else
 268      =1  //#define MENU_WIDTH        23  //23//25 
 269      =1  //#define MENU_WIDTH        26  //ryan@20170821
 270      =1  #ifdef AWT_ML072S
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 57  

 271      =1  #define MENU_WIDTH        19  
 272      =1  #else
           =1 #define MENU_WIDTH        24  //ryan@20170821
           =1 #endif
 275      =1  
 276      =1  #define TITLE_MAX_DESC      23  //25  //
 277      =1  #define BAR_LENGTH        5  //8
 278      =1  #endif
 279      =1  
 280      =1  #ifdef TW8816
 281      =1  #define MENU_HEIGHT       8  //6 
 282      =1  #else
           =1 #define MENU_HEIGHT       7  //6 
           =1 #endif
 285      =1  //#define BARNUM_LENGTH       8  //11
 286      =1  
 287      =1  #ifdef AWT_ML072S
 288      =1  #define BARNUM_LENGTH       4//ryan@20170821
 289      =1  #else
           =1 #define BARNUM_LENGTH       9//ryan@20170821
           =1 #endif
 292      =1  
 293      =1  
 294      =1  #ifdef REFERENCE
           =1 #define BACK_COLOR        BG_COLOR_CYAN
           =1 #define DEFAULT_COLOR     BG_COLOR_CYAN   | CH_COLOR_WHITE
           =1 //#define ACTIVE_COLOR      BG_COLOR_YELLOW | CH_COLOR_WHITE
           =1 #define TITLE_BACK_COLOR    BG_COLOR_MAGENTA
           =1 #define TITLE_COLOR       TITLE_BACK_COLOR | CH_COLOR_YELLOW
           =1 #define COMMENT_COLOR     TITLE_BACK_COLOR | CH_COLOR_WHITE
           =1 #define CURSOR_COLOR      BG_COLOR_YELLOW | CH_COLOR_BLUE
           =1 #define OSD_INFO_COLOR      DEFAULT_COLOR
           =1 #define BAR_COLOR       DEFAULT_COLOR 
           =1 #define BAR_NUM_COLOR     DEFAULT_COLOR
           =1 #define NUM_COLOR       DEFAULT_COLOR
           =1 #define OSDMENU_OUTLINE_COLOR BG_COLOR_BLUE
           =1 #else
 308      =1  #define BACK_COLOR        BG_COLOR_CYAN
 309      =1  
 310      =1  #define DEFAULT_COLOR     BG_COLOR_CYAN | CH_COLOR_GREEN//ryan@20170828
 311      =1  
 312      =1  //#define ACTIVE_COLOR      BG_COLOR_YELLOW | CH_COLOR_WHITE
 313      =1  #define TITLE_BACK_COLOR    BG_COLOR_BLUE
 314      =1  #define TITLE_COLOR       TITLE_BACK_COLOR | CH_COLOR_YELLOW
 315      =1  #define COMMENT_COLOR     TITLE_BACK_COLOR | CH_COLOR_WHITE
 316      =1  #define CURSOR_COLOR      BG_COLOR_YELLOW  | CH_COLOR_BLUE
 317      =1  #define OSD_INFO_COLOR      BG_COLOR_CYAN    | CH_COLOR_GREEN
 318      =1  #define BAR_COLOR       DEFAULT_COLOR
 319      =1  #define BAR_NUM_COLOR     DEFAULT_COLOR
 320      =1  #define NUM_COLOR       DEFAULT_COLOR
 321      =1  #define VER_COLOR         BG_COLOR_CYAN   | CH_COLOR_YELLOW   /// V1.1 03/07/07 simonsung
 322      =1  #define OSDMENU_OUTLINE_COLOR   BG_COLOR_CYAN
 323      =1  #define OSD_VLOSS_COLOR     BG_COLOR_CYAN    | CH_COLOR_WHITE
 324      =1  
 325      =1  #endif
 326      =1  
 327      =1  #ifdef HS_NEWOSDMENU
           =1 #define COMMENT1_COLOR      BG_COLOR_CYAN | CH_COLOR_RED
           =1 #endif
 330      =1  
 331      =1  #define Trigger_COLOR       BG_COLOR_CYAN|CH_COLOR_RED      //william-v1.1-970827
 332      =1  #define Mirror_COLOR      BG_COLOR_CYAN|CH_COLOR_YELLOW     //william-v1.1-970827
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 58  

 333      =1  #ifndef AWT_ML072S
           =1 #define Jump_COLOR        BG_COLOR_CYAN|CH_COLOR_GREEN      //william-v1.1-970827
           =1 #else
 336      =1  #define Jump_COLOR        BG_COLOR_CYAN|CH_COLOR_BLUE     //william-v1.1-970827
 337      =1  #endif
 338      =1  #define Gauge_COLOR1      BG_COLOR_BLACK|CH_COLOR_GREEN 
 339      =1  #define Gauge_COLOR2      BG_COLOR_BLACK|CH_COLOR_YELLOW  
 340      =1  #define Gauge_COLOR3      BG_COLOR_BLACK|CH_COLOR_RED
 341      =1  
 342      =1  //DisplayedOSD
 343      =1  //    new   | MENU  TVINFO    CC    INPUTINFO   PCINFO    RATINGINFO
 344      =1  //  current   |
 345      =1  //============|=========================================================================
 346      =1  //  MENU    |     TVINFO    --    INPUTINFO   PCINFO    MENU + RATINGINFO 
 347      =1  //        |            
 348      =1  //------------|-------------------------------------------------------------------------
 349      =1  //  TVINFO    | MENU  TVINFO    --    INPUTINFO   PCINFO    TVINFO+RATING
 350      =1  //------------|-------------------------------------------------------------------------
 351      =1  //  CC      | MENU->  TVINFO->      INPUTINFO->   PCINFO    RATINGINFO
 352      =1  //        |  CC    CC          CC            
 353      =1  //------------|-------------------------------------------------------------------------
 354      =1  //  INPUTINFO | MENU  TVINFO    --    INPUTINFO   PCINFO    --
 355      =1  //------------|-------------------------------------------------------------------------
 356      =1  //  PCINFO    | MENU  x     x   INPUTINFO   PCINFO    x
 357      =1  //------------|-------------------------------------------------------------------------
 358      =1  //  RATINGINFO| MENU  TVINFO     RATING   INPUTINFO   x     RATINGINFO
 359      =1  //                  
 360      =1  
 361      =1  //=======================================================================================
 362      =1  // OSD Menu Constant define.
 363      =1  //=======================================================================================
 364      =1  //Time type
 365      =1  #define _24H_TIME   1
 366      =1  
 367      =1  //for previous, next, parent or child
 368      =1  #define YES       0xfe  
 369      =1  #define NO        0
 370      =1  
 371      =1  //#define OVERWRITE   0
 372      =1  //#define POPUP     1
 373      =1  
 374      =1  //CursorMove
 375      =1  #define VERT      0
 376      =1  #define HORI      1
 377      =1  
 378      =1  //Type of MenuItem
 379      =1  #define OSDMENU     1
 380      =1  #define CHOICEMENU    2
 381      =1  #define ACTION      3
 382      =1  #define BAR       4
 383      =1  #define NUMBER      5
 384      =1  #define CHOICE      6
 385      =1  #define ENUM_STRING   7 //YESNO     7
 386      =1  #define CHOICE1     8
 387      =1  #define TIME      9
 388      =1  #define NUMBER_STRING 10
 389      =1  #define TEXT_STR              11   // V1.1 02/28/07 simonsung
 390      =1  #define INFORMATION              12
 391      =1  #define TEXT_STR_exit 13
 392      =1  
 393      =1  #ifdef HTRV
           =1 #define GRAPH 16
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 59  

           =1 #endif
 396      =1  
 397      =1  //Bar type
 398      =1  #define LEFT_FILLED   1
 399      =1  #define RIGHT_FILLED  2
 400      =1  #define NO_FILLED   3
 401      =1  
 402      =1  //OSDmenu up and down key
 403      =1  #define UP          1
 404      =1  #define DN          2
 405      =1  #define RIGHT       3
 406      =1  #define LEFT          4
 407      =1  
 408      =1  // Action Id
 409      =1  #define DISP_INFO     0x16
 410      =1  
 411      =1  #define INPUTSELECTION    0x2f
 412      =1  
 413      =1  #define CHANGE_TO_COMPOSITE     (0x20|CH_TW2835)      // Low nibble need to start from 1 
 414      =1  #define CHANGE_TO_SVIDEO      (0x20|SVIDEO)       // so that it match with COMPOSITE...
 415      =1  #define CHANGE_TO_COMPONENT     (0x20|COMPONENT)    
 416      =1  #define CHANGE_TO_DTV       (0x20|DTV)    
 417      =1  #define CHANGE_TO_TV        (0x20|TV)         
 418      =1  #define CHANGE_TO_PC        (0x20|PC)         
 419      =1  #define CHANGE_TO_DIGITALVGA    (0x20|DIGITALVGA)     
 420      =1  #define CHANGE_TO_SCART       (0x20|SCART)        
 421      =1  
 422      =1  #define OSDPOSITIONMODE     0x10
 423      =1  #define OSD_VPOS      0x11
 424      =1  #define OSD_HPOS      0x12
 425      =1  #define OSD_HALFTONE    0x13
 426      =1  #define OSD_DURATION    0x14
 427      =1  #define RESET_OSDVALUE    0x15
 428      =1  #define OSDLANG       0x16
 429      =1  
 430      =1  #define PANEL_CONTRAST    0x58
 431      =1  #define PANEL_BRIGHTNESS  0x59
 432      =1  #define PANEL_HUE     0x5a
 433      =1  #define PANEL_SHARPNESS   0x5b
 434      =1  #define PANEL_SATURATION  0x5c
 435      =1  
 436      =1  #define PC_VPOS       0x43
 437      =1  #define PC_HPOS       0x44
 438      =1  #define PC_HSIZE      0x4d
 439      =1  
 440      =1  #define PC_CLOCK      0x45
 441      =1  #define PC_PHASE      0x46
 442      =1  
 443      =1  #define AUTOADJUST      0x47
 444      =1  #define AUTOADJUST2     0x48
 445      =1  //#define SAVE_AUTOADJUST   0x49
 446      =1  #define RESET_AUTOADJUST  0x4a
 447      =1  
 448      =1  #define PCCOLORADJUST   0x4b
 449      =1  #define SAVE_COLORADJUST  0x4c
 450      =1  //#define RESET_COLORADJUST 0x4d
 451      =1  
 452      =1  #define RESET_PCVALUE   0x4e
 453      =1  #define CameraOSD     0x4f
 454      =1  
 455      =1  #define PC_COLOR_MODE   0x3f
 456      =1  #define PC_COLOR_TEMP   0x30
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 60  

 457      =1  #define PC_COLOR_MODE1    0x31
 458      =1  #define PC_COLOR_MODE2    0x32
 459      =1  #define PC_COLOR_MODE3    0x33
 460      =1  #define PC_COLOR_USER   0x34
 461      =1  #define PC_COLOR_R      0x35
 462      =1  #define PC_COLOR_G      0x36
 463      =1  #define PC_COLOR_B      0x37
 464      =1  
 465      =1  #define VIDEO_MODE      0x90
 466      =1  #define VIDEO_MODE1     0x91
 467      =1  #define VIDEO_MODE2     0x92
 468      =1  #define VIDEO_MODE3     0x93
 469      =1  #define VIDEO_USER      0x94
 470      =1  #define VIDEO_CONTRAST    0x95
 471      =1  #define VIDEO_BRIGHTNESS  0x96
 472      =1  #define VIDEO_SATURATION  0x97
 473      =1  #define VIDEO_HUE     0x99
 474      =1  #define VIDEO_SHARPNESS   0x9a
 475      =1  #define VIDEO_BACKLIGHT   0x9c    // add new value 
 476      =1  #define RESET_VIDEOVALUE  0x9b
 477      =1  #define RESET_DVRVALUE    0x9e
 478      =1  #define RESET_MonitorVALUE    0x70
 479      =1  
 480      =1  
 481      =1  #ifdef AWT_ADD_TRIGGER_DELAY_FUN  //Pinchi 20150209 add
 482      =1  #define TRIGGER_CamADelay 0xb2
 483      =1  #define TRIGGER_CamBDelay 0xb3
 484      =1  #define TRIGGER_CamCDelay 0xb4
 485      =1  #define TRIGGER_CamRDelay 0xb5
 486      =1  #endif
 487      =1  
 488      =1  #ifdef HTRV
           =1 #define RESET_GAUGESETUP  0x9d   
           =1 #define Gauge_VStart      0x7a   
           =1 #endif
 492      =1  
 493      =1  #ifdef E_Wintek
           =1 #define RESET_USERVALUE 0x9d
           =1 #endif
 496      =1  #define VIDEOPICTURE    0x9f
 497      =1  
 498      =1  #define INPUTSTD      0x6f
 499      =1  #define CHANGE_TO_AUTO    0x60
 500      =1  #define CHANGE_TO_NTSC    (0x60 | NTSC)
 501      =1  #define CHANGE_TO_PAL   (0x60 | PAL)
 502      =1  #define CHANGE_TO_SECAM   (0x60 | SECAM)
 503      =1  #define CHANGE_TO_NTSC4   (0x60 | NTSC4)
 504      =1  #define CHANGE_TO_PALM    (0x60 | PALM)
 505      =1  #define CHANGE_TO_PALN    (0x60 | PALN)
 506      =1  #define CHANGE_TO_PAL60   (0x60 | PAL60)
 507      =1  
 508      =1  #if 0
           =1 #define CLOSED_CAPTION    0x7f
           =1 #define CLOSEDCAP_OFF   0x70
           =1 #define CLOSEDCAP_CC1   0x71
           =1 #define CLOSEDCAP_CC2   0x72
           =1 #define CLOSEDCAP_CC3   0x73
           =1 #define CLOSEDCAP_CC4   0x74
           =1 #define CLOSEDCAP_T1    0x75
           =1 #define CLOSEDCAP_T2    0x76
           =1 #define CLOSEDCAP_T3    0x77
           =1 #define CLOSEDCAP_T4    0x78
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 61  

           =1 
           =1 #define TV_GUIDE      0x8f
           =1 #define NO_VCHIP_LOCK   0
           =1 #define VCHIP_TV_Y      1
           =1 #define VCHIP_TV_Y7     2
           =1 #define VCHIP_TV_G      3
           =1 #define VCHIP_TV_PG     4
           =1 #define VCHIP_TV_14     5
           =1 #define VCHIP_TV_MA     6
           =1 #define PASSWORD      0x87
           =1 #define NEW_PASSWORD    0x88
           =1 #define CHK_PASSWORD    0x89
           =1 #define RET_CHK_PASSWORD  0x8a
           =1 #endif
 533      =1  
 534      =1  #define MPAA_RATING     0x9f
 535      =1  #define NO_MPAA_RATING    0
 536      =1  #define MPAA_G        1
 537      =1  #define MPAA_PG       2
 538      =1  #define MPAA_PG_13      3
 539      =1  #define MPAA_R        4
 540      =1  #define MPAA_NC_17      5
 541      =1  #define MPAA_X        6
 542      =1  
 543      =1  #define TVINSTALL     0xa0
 544      =1  #define SCAN_CHANNEL    0xa1
 545      =1  #define AIR_CABLE_TV    0xa3
 546      =1  #define STORE_CLEAR_TVCHN 0xa4
 547      =1  #define MTS         0xa5
 548      =1  #define EDIT_CHANNEL    0xa6
 549      =1  #define MTS_STEREO      0//0x10
 550      =1  #define MTS_MONO      1//0x11
 551      =1  
 552      =1  #define AUDIO_VOLUME    0xb7
 553      =1  
 554      =1  #if 0 //andy AWT8.4 20090811
           =1 
           =1 #define AUDIO_BALANCE   0xb9
           =1 #define AUDIO_BASS      0xba
           =1 #define AUDIO_TREBLE    0xbb
           =1 
           =1 #define AUDIO_LOUDNESS    0xbc
           =1 #define AUDIO_EFFECT    0xbd
           =1 #define AUDIO_MUTE      0xbe
           =1 #endif
 564      =1  
 565      =1  #define DayChoice           0xb8
 566      =1  #define CAMOSDONOFF         0xb9
 567      =1  #define GAUGEChoice         0xba
 568      =1  #define OsdLockChoice       0xbb
 569      =1  #define PRIORITYChoice      0xcA
 570      =1  #define DVRDisplay    0xcc
 571      =1  
 572      =1  #define CAMAONOFF       0xc1
 573      =1  #define CAMBONOFF         0xc2
 574      =1  #define CAMCONOFF       0xc3
 575      =1  #define CAMRONOFF     0xc4
 576      =1  
 577      =1  #define IMAGEChoice         0xc5 
 578      =1  #define REARChoice          0xc6
 579      =1  #define JUMPChoice          0xc7
 580      =1  #define CAMOUTChoice        0xc8 
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 62  

 581      =1  #define STIME_STEP        0xc9
 582      =1  #define TriggerVGA        0xcb
 583      =1  #define IMAGE_A_Choice         0xcd
 584      =1  #define IMAGE_B_Choice         0xce
 585      =1  #define IMAGE_C_Choice         0xcf
 586      =1  
 587      =1  #define DELAYCAMA       0xd0
 588      =1  #define DELAYCAMB            0xd1
 589      =1  #define DELAYCAMC       0xd2
 590      =1  #define DELAYCAMR         0xd3
 591      =1  #ifdef USE_CAMD
           =1 #define DELAYCAMD       0xd4
           =1 #endif
 594      =1  #define ReverseMode   0xd6
 595      =1  #ifdef AWT_ML072S //william @20130902 v1.0.1.2
 596      =1  #define JUMP_AV     0xd7
 597      =1  #endif
 598      =1  #define MANUAL_TUNE_CHANNEL 0xab
 599      =1  #define FINE_TUNE_CHANNEL 0xac
 600      =1  #define STORE_PALCHANNEL  0xad
 601      =1  
 602      =1  //#define CLEAR_TVCHN     0xb0
 603      =1  //#define STORE_TVCHN     0xb1
 604      =1  
 605      =1  #define WIDESCREEN      0xc0
 606      =1  #define WIDESCREEN_NORMAL 0 
 607      =1  #define WIDESCREEN_WIDE   1 
 608      =1  #define WIDESCREEN_PANO   2
 609      =1  #define WIDESCREEN_FULL   3 
 610      =1  #define WIDESCREEN_ZOOM   4 
 611      =1  
 612      =1  //#define SYSTEM_CLOCK    0xd1
 613      =1  //#define SYSTEM_CLOCK_H    0xd2
 614      =1  //#define WAKEUP_TIME     0xd3
 615      =1  //#define WAKEUP_TIME_H   0xd4
 616      =1  //#define WAKEUP_PR     0xd5
 617      =1  //#define OFF_TIME      0xd6
 618      =1  //#define OFF_TIME_H      0xd7
 619      =1  //#define SLEEP_TIMER     0xd8
 620      =1  
 621      =1  #define Resolution      0xe0
 622      =1  #define FPS         0xe1
 623      =1  #define Quality       0xe2
 624      =1  #define RecordMode      0xe3
 625      =1  #define RecordLength      0xe4
 626      =1  #define PreAlarmLength    0xe5
 627      =1  #define PostAlarmLength   0xe6
 628      =1  #define Apply       0xe7
 629      =1  #if 0 //william-awt ml073q-20120313
           =1 #define ManualRecordStart 0xe8
           =1 #define ManualRecordStop  0xe9
           =1 #define Snapshot        0xea
           =1 #endif
 634      =1  #define FormatSD      0xeb
 635      =1  #define AudioRecord     0xec
 636      =1  #define FirmwareUpdate    0xed
 637      =1  #define ChangePassword    0xee
 638      =1  #define OverWrite     0xef
 639      =1  
 640      =1  #define UpdateConfig      0xd0
 641      =1  #define SDCardDetect      0xd5
 642      =1  
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 63  

 643      =1  #define Year        0x20
 644      =1  #define Month       0x21
 645      =1  #define Day         0x22
 646      =1  #define Hour        0x23
 647      =1  #define Minute        0x24
 648      =1  
 649      =1  #define DaylightSaving        0x25
 650      =1  #define TimeBeginesMonth      0x26
 651      =1  #define TimeBeginesWeek       0x27
 652      =1  #define TimeBeginesTime       0x28
 653      =1  #define StandardTimeBeginesMonth  0x29
 654      =1  #define StandardTimeBeginesWeek   0x2a
 655      =1  #define StandardTimeBeginesTime   0x2b
 656      =1  #define TimeZone          0x2c
 657      =1  #define FirstNumber         0x2d
 658      =1  #define SecondNumber        0x2e
 659      =1  #define ThridNumber         0x2f
 660      =1  #define FourthNumber        0x38
 661      =1  #define WIFIIPNumber        0x39
 662      =1  #define WIFIMACNumber       0x3a
 663      =1  #define GETWAYNumber        0x3b
 664      =1  
 665      =1  #define OSDLANGI      0xd9
 666      =1  #define OSDLANGII     OSDLANGI+1
 667      =1  #define OSDLANGIII      OSDLANGI+2
 668      =1  #define OSDLANGIV     OSDLANGI+3
 669      =1  
 670      =1  #define TOHIGHMENU      0xf1
 671      =1  #define MOVECURSOR2FIRST  0xf2
 672      =1  #define RESET_ALL     0xf3
 673      =1  #define EXITMENU      0xf4
 674      =1  #define DVRParamApply   0xf5
 675      =1  #define DATETIMEApply   0xf6
 676      =1  
 677      =1  #define CHOICE1_VAL     0xfc
 678      =1  #define CHOICE_VAL      0xfd
 679      =1  #define BAR_VAL       0xfe
 680      =1  #define NUM_VAL       0xff
 681      =1  
 682      =1  #define CAMNumberChoice     0xa3 
 683      =1  #define PelcoChoice         0xa4
 684      =1  #define Baud_rateChoice   0xa5
 685      =1  
 686      =1  
 687      =1  #endif  // __OSDMENU__
 688      =1  
  20          #include "DispInfo.h"
   1      =1  #ifndef __DISPINFO__
   2      =1  #define __DISPINFO__
   3      =1  //==================================================================
   4      =1  //        Display Information
   5      =1  //==================================================================
   6      =1  #if (defined WQVGA) && (defined ANALOG_7INCH)
           =1 #define   INPUTINFO_ZOOM    WINZOOMx1
           =1 #define   LOGO_ZOOM     WINZOOMx3
           =1 
           =1 #else // (defined WQVGA) && (defined SHARP_LQ043T3DX02)
  11      =1  
  12      =1    #ifdef AWT_ML072S
  13      =1    #define   INPUTINFO_ZOOM    WINZOOMx4
  14      =1    #else
           =1   #define   INPUTINFO_ZOOM    WINZOOMx2
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 64  

           =1   #endif
  17      =1  #define   LOGO_ZOOM     WINZOOMx2
  18      =1  #endif
  19      =1  //#define   VOL_ZOOM      WINZOOMx4
  20      =1  #define   MUTE_ZOOM     WINZOOMx3
  21      =1  #define   TVCHN_ZOOM      WINZOOMx4
  22      =1  #define   RATINGINFO_ZOOM   WINZOOMx3
  23      =1  #define     SCANTV_ZOOM     WINZOOMx2   //ljy012304
  24      =1  #define   PCINFO_ZOOM     WINZOOMx2
  25      =1  #define     BAR_ZOOM      WINZOOMx2
  26      =1  
  27      =1  
  28      =1  #define DVRStatus_OSDWIN  4 
  29      =1  #define DVRStatus_ADDR  180
  30      =1  
  31      =1  extern  BYTE  DisplayedOSD;
  32      =1  
  33      =1  
  34      =1  void ClearDisplayedOSD( BYTE newd );
  35      =1  void SetDisplayedOSD( BYTE newd );
  36      =1  BYTE GetDisplayedOSD(void);
  37      =1  void ClearOSDInfo(void);
  38      =1  
  39      =1  void DisplayInput(void);
  40      =1  BYTE ClearInput(void);
  41      =1  BYTE ClearInput2s(void);
  42      =1  
  43      =1  //void DisplayLogo(void);
  44      =1  
  45      =1  void ClearLogo(void);
  46      =1  
  47      =1  void DisplayPCInfo(BYTE CODE *ptr);
  48      =1  void ClearPCInfo(void);
  49      =1  void DisplayAutoAdjust(void);
  50      =1  void ClearAutoAdjust(void);
  51      =1  
  52      =1  
  53      =1  void DisplayVol(void);
  54      =1  #if 0
           =1 void DisplayBrightness(void);
           =1 #endif
  57      =1  #if 0
           =1 void DisplayMuteInfo(void);
           =1 #endif
  60      =1  void ClearMuteInfo(void);
  61      =1  BYTE CheckAndClearOSD(void);
  62      =1  BYTE ClearVlossOsd(void);
  63      =1  #ifdef AWT_ML072S
  64      =1  void VlossHandler(void);
  65      =1  void Check_Vloss(void);
  66      =1  #endif
  67      =1  //==================================================================
  68      =1  //            TV Info
  69      =1  //==================================================================
  70      =1  
  71      =1  BYTE ClearTVInfo(void);
  72      =1  
  73      =1  #endif  // __DISPINFO__
  21          //#include "Monitor.h"
  22          #include "variables.h"
   1      =1  //
   2      =1  //Variables.h : Register declaration
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 65  

   3      =1  //
   4      =1  
   5      =1  #ifndef __VARIABLES__
   6      =1  #define __VARIABLES__
   7      =1  
   8      =1  #ifdef INTERNAL_MCU
           =1 xdata BYTE REG00  _at_ 0xc000;
           =1 xdata BYTE REG01  _at_ 0xc001;
           =1 xdata BYTE REG02  _at_ 0xc002;
           =1 xdata BYTE REG03  _at_ 0xc003;
           =1 xdata BYTE REG04  _at_ 0xc004;
           =1 xdata BYTE REG05  _at_ 0xc005;
           =1 xdata BYTE REG06  _at_ 0xc006;
           =1 xdata BYTE REG07  _at_ 0xc007;
           =1 xdata BYTE REG08  _at_ 0xc008;
           =1 xdata BYTE REG09  _at_ 0xc009;
           =1 xdata BYTE REG0a  _at_ 0xc00a;
           =1 xdata BYTE REG0b  _at_ 0xc00b;
           =1 xdata BYTE REG0c  _at_ 0xc00c;
           =1 xdata BYTE REG0d  _at_ 0xc00d;
           =1 xdata BYTE REG0e  _at_ 0xc00e;
           =1 xdata BYTE REG0f  _at_ 0xc00f;
           =1 xdata BYTE REG10  _at_ 0xc010;
           =1 xdata BYTE REG11  _at_ 0xc011;
           =1 xdata BYTE REG12  _at_ 0xc012;
           =1 xdata BYTE REG13  _at_ 0xc013;
           =1 xdata BYTE REG14  _at_ 0xc014;
           =1 xdata BYTE REG15  _at_ 0xc015;
           =1 xdata BYTE REG16  _at_ 0xc016;
           =1 xdata BYTE REG17  _at_ 0xc017;
           =1 xdata BYTE REG18  _at_ 0xc018;
           =1 xdata BYTE REG19  _at_ 0xc019;
           =1 xdata BYTE REG1a  _at_ 0xc01a;
           =1 xdata BYTE REG1b  _at_ 0xc01b;
           =1 xdata BYTE REG1c  _at_ 0xc01c;
           =1 xdata BYTE REG1d  _at_ 0xc01d;
           =1 xdata BYTE REG1e  _at_ 0xc01e;
           =1 xdata BYTE REG1f  _at_ 0xc01f;
           =1 xdata BYTE REG20  _at_ 0xc020;
           =1 xdata BYTE REG21  _at_ 0xc021;
           =1 xdata BYTE REG22  _at_ 0xc022;
           =1 xdata BYTE REG23  _at_ 0xc023;
           =1 xdata BYTE REG24  _at_ 0xc024;
           =1 xdata BYTE REG25  _at_ 0xc025;
           =1 xdata BYTE REG26  _at_ 0xc026;
           =1 xdata BYTE REG27  _at_ 0xc027;
           =1 xdata BYTE REG28  _at_ 0xc028;
           =1 xdata BYTE REG29  _at_ 0xc029;
           =1 xdata BYTE REG2a  _at_ 0xc02a;
           =1 xdata BYTE REG2b  _at_ 0xc02b;
           =1 xdata BYTE REG2c  _at_ 0xc02c;
           =1 xdata BYTE REG2d  _at_ 0xc02d;
           =1 xdata BYTE REG2e  _at_ 0xc02e;
           =1 xdata BYTE REG2f  _at_ 0xc02f;
           =1 xdata BYTE REG30  _at_ 0xc030;
           =1 xdata BYTE REG31  _at_ 0xc031;
           =1 xdata BYTE REG32  _at_ 0xc032;
           =1 xdata BYTE REG33  _at_ 0xc033;
           =1 xdata BYTE REG34  _at_ 0xc034;
           =1 xdata BYTE REG35  _at_ 0xc035;
           =1 xdata BYTE REG36  _at_ 0xc036;
           =1 xdata BYTE REG37  _at_ 0xc037;
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 66  

           =1 xdata BYTE REG38  _at_ 0xc038;
           =1 xdata BYTE REG39  _at_ 0xc039;
           =1 xdata BYTE REG3a  _at_ 0xc03a;
           =1 xdata BYTE REG3b  _at_ 0xc03b;
           =1 xdata BYTE REG3c  _at_ 0xc03c;
           =1 xdata BYTE REG3d  _at_ 0xc03d;
           =1 xdata BYTE REG3e  _at_ 0xc03e;
           =1 xdata BYTE REG3f  _at_ 0xc03f;
           =1 xdata BYTE REG40  _at_ 0xc040;
           =1 xdata BYTE REG41  _at_ 0xc041;
           =1 xdata BYTE REG42  _at_ 0xc042;
           =1 xdata BYTE REG43  _at_ 0xc043;
           =1 xdata BYTE REG44  _at_ 0xc044;
           =1 xdata BYTE REG45  _at_ 0xc045;
           =1 xdata BYTE REG46  _at_ 0xc046;
           =1 xdata BYTE REG47  _at_ 0xc047;
           =1 xdata BYTE REG48  _at_ 0xc048;
           =1 xdata BYTE REG49  _at_ 0xc049;
           =1 xdata BYTE REG4a  _at_ 0xc04a;
           =1 xdata BYTE REG4b  _at_ 0xc04b;
           =1 xdata BYTE REG4c  _at_ 0xc04c;
           =1 xdata BYTE REG4d  _at_ 0xc04d;
           =1 xdata BYTE REG4e  _at_ 0xc04e;
           =1 xdata BYTE REG4f  _at_ 0xc04f;
           =1 xdata BYTE REG50  _at_ 0xc050;
           =1 xdata BYTE REG51  _at_ 0xc051;
           =1 xdata BYTE REG52  _at_ 0xc052;
           =1 xdata BYTE REG53  _at_ 0xc053;
           =1 xdata BYTE REG54  _at_ 0xc054;
           =1 xdata BYTE REG55  _at_ 0xc055;
           =1 xdata BYTE REG56  _at_ 0xc056;
           =1 xdata BYTE REG57  _at_ 0xc057;
           =1 xdata BYTE REG58  _at_ 0xc058;
           =1 xdata BYTE REG59  _at_ 0xc059;
           =1 xdata BYTE REG5a  _at_ 0xc05a;
           =1 xdata BYTE REG5b  _at_ 0xc05b;
           =1 xdata BYTE REG5c  _at_ 0xc05c;
           =1 xdata BYTE REG5d  _at_ 0xc05d;
           =1 xdata BYTE REG5e  _at_ 0xc05e;
           =1 xdata BYTE REG5f  _at_ 0xc05f;
           =1 xdata BYTE REG60  _at_ 0xc060;
           =1 xdata BYTE REG61  _at_ 0xc061;
           =1 xdata BYTE REG62  _at_ 0xc062;
           =1 xdata BYTE REG63  _at_ 0xc063;
           =1 xdata BYTE REG64  _at_ 0xc064;
           =1 xdata BYTE REG65  _at_ 0xc065;
           =1 xdata BYTE REG66  _at_ 0xc066;
           =1 xdata BYTE REG67  _at_ 0xc067;
           =1 xdata BYTE REG68  _at_ 0xc068;
           =1 xdata BYTE REG69  _at_ 0xc069;
           =1 xdata BYTE REG6a  _at_ 0xc06a;
           =1 xdata BYTE REG6b  _at_ 0xc06b;
           =1 xdata BYTE REG6c  _at_ 0xc06c;
           =1 xdata BYTE REG6d  _at_ 0xc06d;
           =1 xdata BYTE REG6e  _at_ 0xc06e;
           =1 xdata BYTE REG6f  _at_ 0xc06f;
           =1 xdata BYTE REG70  _at_ 0xc070;
           =1 xdata BYTE REG71  _at_ 0xc071;
           =1 xdata BYTE REG72  _at_ 0xc072;
           =1 xdata BYTE REG73  _at_ 0xc073;
           =1 xdata BYTE REG74  _at_ 0xc074;
           =1 xdata BYTE REG75  _at_ 0xc075;
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 67  

           =1 xdata BYTE REG76  _at_ 0xc076;
           =1 xdata BYTE REG77  _at_ 0xc077;
           =1 xdata BYTE REG78  _at_ 0xc078;
           =1 xdata BYTE REG79  _at_ 0xc079;
           =1 xdata BYTE REG7a  _at_ 0xc07a;
           =1 xdata BYTE REG7b  _at_ 0xc07b;
           =1 xdata BYTE REG7c  _at_ 0xc07c;
           =1 xdata BYTE REG7d  _at_ 0xc07d;
           =1 xdata BYTE REG7e  _at_ 0xc07e;
           =1 xdata BYTE REG7f  _at_ 0xc07f;
           =1 xdata BYTE REG80  _at_ 0xc080;
           =1 xdata BYTE REG81  _at_ 0xc081;
           =1 xdata BYTE REG82  _at_ 0xc082;
           =1 xdata BYTE REG83  _at_ 0xc083;
           =1 xdata BYTE REG84  _at_ 0xc084;
           =1 xdata BYTE REG85  _at_ 0xc085;
           =1 xdata BYTE REG86  _at_ 0xc086;
           =1 xdata BYTE REG87  _at_ 0xc087;
           =1 xdata BYTE REG88  _at_ 0xc088;
           =1 xdata BYTE REG89  _at_ 0xc089;
           =1 xdata BYTE REG8a  _at_ 0xc08a;
           =1 xdata BYTE REG8b  _at_ 0xc08b;
           =1 xdata BYTE REG8c  _at_ 0xc08c;
           =1 xdata BYTE REG8d  _at_ 0xc08d;
           =1 xdata BYTE REG8e  _at_ 0xc08e;
           =1 xdata BYTE REG8f  _at_ 0xc08f;
           =1 xdata BYTE REG90  _at_ 0xc090;
           =1 xdata BYTE REG91  _at_ 0xc091;
           =1 xdata BYTE REG92  _at_ 0xc092;
           =1 xdata BYTE REG93  _at_ 0xc093;
           =1 xdata BYTE REG94  _at_ 0xc094;
           =1 xdata BYTE REG95  _at_ 0xc095;
           =1 xdata BYTE REG96  _at_ 0xc096;
           =1 xdata BYTE REG97  _at_ 0xc097;
           =1 xdata BYTE REG98  _at_ 0xc098;
           =1 xdata BYTE REG99  _at_ 0xc099;
           =1 xdata BYTE REG9a  _at_ 0xc09a;
           =1 xdata BYTE REG9b  _at_ 0xc09b;
           =1 xdata BYTE REG9c  _at_ 0xc09c;
           =1 xdata BYTE REG9d  _at_ 0xc09d;
           =1 xdata BYTE REG9e  _at_ 0xc09e;
           =1 xdata BYTE REG9f  _at_ 0xc09f;
           =1 xdata BYTE REGa0  _at_ 0xc0a0;
           =1 xdata BYTE REGa1  _at_ 0xc0a1;
           =1 xdata BYTE REGa2  _at_ 0xc0a2;
           =1 xdata BYTE REGa3  _at_ 0xc0a3;
           =1 xdata BYTE REGa4  _at_ 0xc0a4;
           =1 xdata BYTE REGa5  _at_ 0xc0a5;
           =1 xdata BYTE REGa6  _at_ 0xc0a6;
           =1 xdata BYTE REGa7  _at_ 0xc0a7;
           =1 xdata BYTE REGa8  _at_ 0xc0a8;
           =1 xdata BYTE REGa9  _at_ 0xc0a9;
           =1 xdata BYTE REGaa  _at_ 0xc0aa;
           =1 xdata BYTE REGab  _at_ 0xc0ab;
           =1 xdata BYTE REGac  _at_ 0xc0ac;
           =1 xdata BYTE REGad  _at_ 0xc0ad;
           =1 xdata BYTE REGae  _at_ 0xc0ae;
           =1 xdata BYTE REGaf  _at_ 0xc0af;
           =1 xdata BYTE REGb0  _at_ 0xc0b0;
           =1 xdata BYTE REGb1  _at_ 0xc0b1;
           =1 xdata BYTE REGb2  _at_ 0xc0b2;
           =1 xdata BYTE REGb3  _at_ 0xc0b3;
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 68  

           =1 xdata BYTE REGb4  _at_ 0xc0b4;
           =1 xdata BYTE REGb5  _at_ 0xc0b5;
           =1 xdata BYTE REGb6  _at_ 0xc0b6;
           =1 xdata BYTE REGb7  _at_ 0xc0b7;
           =1 xdata BYTE REGb8  _at_ 0xc0b8;
           =1 xdata BYTE REGb9  _at_ 0xc0b9;
           =1 xdata BYTE REGba  _at_ 0xc0ba;
           =1 xdata BYTE REGbb  _at_ 0xc0bb;
           =1 xdata BYTE REGbc  _at_ 0xc0bc;
           =1 xdata BYTE REGbd  _at_ 0xc0bd;
           =1 xdata BYTE REGbe  _at_ 0xc0be;
           =1 xdata BYTE REGcf  _at_ 0xc0cf;
           =1 xdata BYTE REGc0  _at_ 0xc0c0;
           =1 xdata BYTE REGc1  _at_ 0xc0c1;
           =1 xdata BYTE REGc2  _at_ 0xc0c2;
           =1 xdata BYTE REGc3  _at_ 0xc0c3;
           =1 xdata BYTE REGc4  _at_ 0xc0c4;
           =1 xdata BYTE REGc5  _at_ 0xc0c5;
           =1 xdata BYTE REGc6  _at_ 0xc0c6;
           =1 xdata BYTE REGc7  _at_ 0xc0c7;
           =1 xdata BYTE REGc8  _at_ 0xc0c8;
           =1 xdata BYTE REGc9  _at_ 0xc0c9;
           =1 xdata BYTE REGca  _at_ 0xc0ca;
           =1 xdata BYTE REGcb  _at_ 0xc0cb;
           =1 xdata BYTE REGcc  _at_ 0xc0cc;
           =1 xdata BYTE REGcd  _at_ 0xc0cd;
           =1 xdata BYTE REGce  _at_ 0xc0ce;
           =1 xdata BYTE REGcf  _at_ 0xc0cf;
           =1 xdata BYTE REGd0  _at_ 0xc0d0;
           =1 xdata BYTE REGd1  _at_ 0xc0d1;
           =1 xdata BYTE REGd2  _at_ 0xc0d2;
           =1 xdata BYTE REGd3  _at_ 0xc0d3;
           =1 xdata BYTE REGd4  _at_ 0xc0d4;
           =1 xdata BYTE REGd5  _at_ 0xc0d5;
           =1 xdata BYTE REGd6  _at_ 0xc0d6;
           =1 xdata BYTE REGd7  _at_ 0xc0d7;
           =1 xdata BYTE REGd8  _at_ 0xc0d8;
           =1 xdata BYTE REGd9  _at_ 0xc0d9;
           =1 xdata BYTE REGda  _at_ 0xc0da;
           =1 xdata BYTE REGdb  _at_ 0xc0db;
           =1 xdata BYTE REGdc  _at_ 0xc0dc;
           =1 xdata BYTE REGdd  _at_ 0xc0dd;
           =1 xdata BYTE REGde  _at_ 0xc0de;
           =1 xdata BYTE REGdf  _at_ 0xc0df;
           =1 xdata BYTE REGe0  _at_ 0xc0e0;
           =1 xdata BYTE REGe1  _at_ 0xc0e1;
           =1 xdata BYTE REGe2  _at_ 0xc0e2;
           =1 xdata BYTE REGe3  _at_ 0xc0e3;
           =1 xdata BYTE REGe4  _at_ 0xc0e4;
           =1 xdata BYTE REGe5  _at_ 0xc0e5;
           =1 xdata BYTE REGe6  _at_ 0xc0e6;
           =1 xdata BYTE REGe7  _at_ 0xc0e7;
           =1 xdata BYTE REGe8  _at_ 0xc0e8;
           =1 xdata BYTE REGe9  _at_ 0xc0e9;
           =1 xdata BYTE REGea  _at_ 0xc0ea;
           =1 xdata BYTE REGeb  _at_ 0xc0eb;
           =1 xdata BYTE REGec  _at_ 0xc0ec;
           =1 xdata BYTE REGed  _at_ 0xc0ed;
           =1 xdata BYTE REGee  _at_ 0xc0ee;
           =1 xdata BYTE REGef  _at_ 0xc0ef;
           =1 xdata BYTE REGf0  _at_ 0xc0f0;
           =1 xdata BYTE REGf1  _at_ 0xc0f1;
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 69  

           =1 xdata BYTE REGf2  _at_ 0xc0f2;
           =1 xdata BYTE REGf3  _at_ 0xc0f3;
           =1 xdata BYTE REGf4  _at_ 0xc0f4;
           =1 xdata BYTE REGf5  _at_ 0xc0f5;
           =1 xdata BYTE REGf6  _at_ 0xc0f6;
           =1 xdata BYTE REGf7  _at_ 0xc0f7;
           =1 xdata BYTE REGf8  _at_ 0xc0f8;
           =1 xdata BYTE REGf9  _at_ 0xc0f9;
           =1 xdata BYTE REGfa  _at_ 0xc0fa;
           =1 xdata BYTE REGfb  _at_ 0xc0fb;
           =1 xdata BYTE REGfc  _at_ 0xc0fc;
           =1 xdata BYTE REGfd  _at_ 0xc0fd;
           =1 xdata BYTE REGfe  _at_ 0xc0fe;
           =1 xdata BYTE REGff  _at_ 0xc0ff;
           =1 #endif  // internal MCU only variables
 266      =1  
 267      =1  #endif  //__VARIABLES__
 268      =1  
  23          #include <math.h>
   1      =1  /*--------------------------------------------------------------------------
   2      =1  MATH.H
   3      =1  
   4      =1  Prototypes for mathematic functions.
   5      =1  Copyright (c) 1988-2008 Keil Elektronik GmbH and Keil Software, Inc.
   6      =1  Copyright (c) 2008-2016 ARM Germany GmbH
   7      =1  All rights reserved.
   8      =1  --------------------------------------------------------------------------*/
   9      =1  
  10      =1  #ifndef __MATH_H__
  11      =1  #define __MATH_H__
  12      =1  
  13      =1  #if defined __CX2__ && (__CX2__ >= 558 || __CX2__ == 556 && __CX2_MINOR__ >= 207)
           =1 #ifndef HUGE_VAL
           =1 #define HUGE_VAL __inf__
           =1 #endif // HUGE_VAL
           =1 
           =1 #ifndef NAN
           =1 #define NAN __nan__
           =1 #endif // NAN
           =1 
           =1 #pragma SAVE
           =1 #pragma FUNCTIONS(STATIC)
           =1 /* intrinsic functions are reentrant, but need static attribute */
           =1 extern int    abs  (int   val);
           =1 #pragma RESTORE
           =1 #endif
  28      =1  
  29      =1  #pragma SAVE
  30      =1  #pragma REGPARMS
  31      =1  #if !defined (__CX2__)
  32      =1  extern char  cabs  (char  val);
  33      =1  extern int    abs  (int   val);
  34      =1  extern long  labs  (long  val);
  35      =1  #endif
  36      =1  
  37      =1  extern float fabs  (float val);
  38      =1  extern float sqrt  (float val);
  39      =1  extern float exp   (float val);
  40      =1  extern float log   (float val);
  41      =1  extern float log10 (float val);
  42      =1  extern float sin   (float val);
  43      =1  extern float cos   (float val);
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 70  

  44      =1  extern float tan   (float val);
  45      =1  extern float asin  (float val);
  46      =1  extern float acos  (float val);
  47      =1  extern float atan  (float val);
  48      =1  extern float sinh  (float val);
  49      =1  extern float cosh  (float val);
  50      =1  extern float tanh  (float val);
  51      =1  extern float atan2 (float y, float x);
  52      =1  
  53      =1  extern float ceil  (float val);
  54      =1  extern float floor (float val);
  55      =1  extern float modf  (float val, float *n);
  56      =1  extern float fmod  (float x, float y);
  57      =1  extern float pow   (float x, float y);
  58      =1  
  59      =1  #if defined (__CX2__)
           =1 extern float frexp (float val, int *exp);
           =1 extern float ldexp (float val, int exp);
           =1 #endif
  63      =1  
  64      =1  #pragma RESTORE
  65      =1  
  66      =1  #endif
  24          #include "main.h"
   1      =1  #ifndef __MAIN__
           =1 #define __MAIN__
           =1 
           =1 #define ON          1
           =1 #define OFF         0
           =1 #if 1//ryan@20171214
           =1 #define Hs_debug
           =1 #define Monitor_debug  
           =1 //#define Trigger_debug 
           =1 #endif
           =1 
           =1 
           =1 //#define DVR
           =1 #define Format_SDCard
           =1 #define BJTSwitch
           =1 
           =1 #define Panel_Enable()    P4=P4|0x08 //andy 980908
           =1 #define Panel_Disable()   P4=P4&0xf7
           =1 
           =1 #if 0
           =1 #define SetBacklight()      P4=P4|0x04
           =1 #define clrBacklight()      P4=P4&0xfb
           =1 #else
           =1 #define SetBacklight()    P4=P4&0xfb
           =1 #define clrBacklight()    P4=P4|0x04
           =1 #endif
           =1 
           =1 //InputSelection
           =1 struct struct_IdName {
           =1   BYTE  Id;
           =1   BYTE  Name[16];
           =1 };
           =1 
           =1 #define CH_TW2835       1
           =1 #define CH_CAMD       2
           =1 #define CH_AV         3
           =1 #define PC          7
           =1 #define ChineseDefaultMenu  8
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 71  

           =1 
           =1 #define SVIDEO        2
           =1 #define COMPONENT     3
           =1 //#define ANALOGDTV     4
           =1 #define DTV         4
           =1 #define TV          5
           =1 #define SCART       6
           =1 
           =1 #ifdef HS
           =1 #define CH_CAMB         4
           =1 #endif
           =1 
           =1 #define DIGITALVGA      8
           =1 
           =1 #define AIRTV       0 //9
           =1 #define CABLETV       1 //0xa
           =1 
           =1 #define TVTUNER       0xd   //10
           =1 #define MUTE        1 
           =1 #define MENU        2 
           =1 #define TVVOL       4 
           =1 #ifdef AWT_ML072S
           =1 #define VLOSSINFO     8 
           =1 #else
           =1 #define CC          8 
           =1 #endif
           =1 #define INPUTINFO     0x10
           =1 #define PCINFO        0x20
           =1 #define GAUGEINFO       0x40
           =1 //#define RATINGINFO      0x40
           =1 #define TVCHN       0x80
           =1 //#define MUTE        0x40
           =1 
           =1 #define YPBPR_480i      0
           =1 #define YPBPR_576i      1
           =1 #define YPBPR_480p      2
           =1 #define YPBPR_576p      3
           =1 #define YPBPR_1080i     4
           =1 #define YPBPR_720p      5
           =1 #define YPBPR_720p50    6
           =1 
           =1 //---------------------- Feature Define ----------------------------
           =1 #ifdef AWT_ML072Q
           =1 
           =1 //mask by ryan@20171018   #define AWT_ML720Q_NEW_TRIGGER_FUN    //Pinchi 20141031 add for AWT request each t
             -rigger can work by PRIORITY OFF
           =1 #define AWT_ADD_TRIGGER_DELAY_FUN 
           =1 #define AWT_SUPPORT_4_3_SCREEN    //ryan@20170907 
           =1 #endif
           =1 
           =1 #ifdef AWT_ML072S
           =1 #define AWT_ADD_TRIGGER_DELAY_FUN 
           =1 #endif
           =1 
           =1 //--------------------------- P0 Define -----------------------------
           =1 //#define SEL_MIX     P0_6  // 
           =1 //--------------------------- P1 Define -----------------------------
           =1 //#define SEL_DVI     P3_5  //LJY062001   
           =1 
           =1 #define TW88HWReset     P3_4  //LJY001010 //LJY000721
           =1 #define PowerUp       P3_7
           =1 //======================= CDS Control ================================= 
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 72  

           =1 //#define CDS_CTRL           P1_5
           =1 extern BYTE SelectModeType;
           =1 extern BYTE InputSelection;
           =1 extern BYTE SEQTime;
           =1 extern BYTE Priority;
           =1 extern BYTE PowerFlag;
           =1 //extern bit AutoDayNight;
           =1 extern bit SDCardCoverDetect;
           =1 
           =1 BYTE keyIn(void);
           =1 void TimerForRemocon(void);
           =1 void TimerForTick(void);
           =1 void DisableRemoconInt(void);
           =1 BYTE SetSupport_remocon(BYTE newd);
           =1 
           =1 void delay(BYTE cnt);
           =1 
           =1 BYTE RS_ready(void);
           =1 #ifdef Monitor_debug
           =1 BYTE RS_rx(void);
           =1 #endif
           =1 void RS_tx(BYTE tx_buf);
           =1 
           =1 BYTE RS2_rx(void);
           =1 void RS2_tx(BYTE tx_buf);
           =1 
           =1 void NewLine(void);
           =1 void PutsP(PDATA_P BYTE *ptr);
           =1 #ifdef Hs_debug
           =1 //void MonWriteI2C(BYTE addr, BYTE index, BYTE val);
           =1 //BYTE MonReadI2C(BYTE addr, BYTE index);
           =1 #endif
           =1 BYTE Asc1Bin(BYTE asc);
           =1 BYTE Asc2Bin(PDATA_P BYTE *s);
           =1 
           =1 void I2CDeviceInitialize( CODE_P BYTE *RegSet);
           =1 
           =1 //void RestartSystemClock(WORD clock_hm);
           =1 WORD GetTime_ms(void);
           =1 #if 0
           =1 BYTE GetTime_H(void);
           =1 BYTE GetTime_M(void);
           =1 #endif
           =1 void ChangeTime_H( char add );
           =1 void ChangeTime_M( char add );
           =1 //WORD GetWakeupTime(void);
           =1 //void SetWakeupTime(WORD wtime);
           =1 
           =1 
           =1 //WORD GetOffTime(void);
           =1 //void SetOffTime(WORD wtime);
           =1 //BYTE GetSleepTimer(void);
           =1 //void SetSleepTimer(BYTE stime);
           =1 WORD DiffTime_ms( WORD stime, WORD etime );
           =1 //void SetLastBlockedTime(void);
           =1 void SetLastCCTime(void);       //ljy010904...CC_FIX_CLEAR_ON_TIME
           =1 
           =1 void SetOSDLastKeyInTime(void);
           =1 WORD GetOSDLastKeyInTime(void);
           =1 WORD GetIVF(void);
           =1 DWORD GetIHF(void);
           =1 BYTE ReadVInputSTD(void);
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 73  

           =1 void SetVInputStd(BYTE newd);
           =1 BYTE GetVInputStd(void);
           =1 BYTE GetInputSelection(void);
           =1 #ifdef ADD_ANALOGPANEL
           =1 BYTE IsAnalogOn(void);
           =1 #endif
           =1 void InitVideoData(BYTE src);
           =1 void ChangeVInputStdDetectMode(BYTE val);
           =1 BYTE GetVInputStdInx(void);
           =1 
           =1 void MonWriteI2Cn_(BYTE addr, BYTE *val, BYTE cnt) ;
           =1 
           =1 void CheckNewTriggerFunc(void);
           =1 ///void Usage(void);
           =1 #ifdef Monitor_debug
           =1   void Prompt(void);
           =1 #endif
           =1 void DebugKeyIn(BYTE ikey);
           =1 void DVIPowerDown(bit flag);
           =1 void PowerDown_XTAL(bit flag);
           =1 
           =1 void ChangeInput(BYTE newsel);
           =1 
           =1 
           =1 void WaitPowerOn(void);
           =1 void PowerOff(void);
           =1 BYTE GetNextInputSelection(void);
           =1 
           =1 BYTE WantToStopTVScan(void);
           =1 
           =1 //BYTE IsTW8801(void);
           =1 //BYTE IsTW8803(void);
           =1 //BYTE ConvertVideoVSAT(BYTE reg);
           =1 
           =1 BYTE IsNoInput(void);
           =1 void LoadEEPROM (void);
           =1 void Hs_InitVars(void);
           =1 void AdjustAutoDayNight(BYTE val);
           =1 void ACCPowerControl(void);
           =1 void ON_LVDS(void);
           =1 void OFF_LVDS(void);
           =1 void main_loop(void);
           =1 struct RegisterInfo
           =1 {
           =1    int  Min;
           =1    int  Max;
           =1    int  Default;
           =1 };
           =1 struct LongRegisterInfo
           =1 {
           =1    WORD Min;
           =1    WORD Max;
           =1    WORD Default;
           =1 };
           =1 
           =1 
           =1 typedef enum   ///add enum  by ryan@20170907
           =1 {
           =1   NORMALL_MODE,
           =1   REVERSE_TRIG,
           =1   LEFT_TRIG,
           =1   RIGHT_TRIG,
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 74  

           =1 #ifdef USE_CAMD 
           =1   CAMD_TRIG,
           =1 #endif  
           =1   CAMC_TRIG,
           =1   VGA_TRIG,
           =1   PARK_TRIG,
           =1   No_TRIG,
           =1   TRIGGER_NUM
           =1 }TriggerModeType;
           =1 
           =1 
           =1 #endif  // __MAIN__
 236      =1  
  25          
  26          #include "HS_DisplayOSD.h"
   1      =1  #ifndef _HS_DisplayOSD_
   2      =1  #define _HS_DisplayOSD_
   3      =1  
   4      =1  
   5      =1  enum DisplayInformation
   6      =1  {
   7      =1    InfoOSDMENULOCKED,
   8      =1    InfoOSDMENUATCIVE,
   9      =1  #ifdef SUPPORT_SDCARD  //Pinchi 20150319 add
           =1   InfoFORMATSDCARD,
           =1   InfoFORMATSUCCESS,
           =1   InfoFORMATFAIL,
           =1   InfoRECORDERROR,
           =1   InfoPASSWORDERROR,
           =1   InfoFWUpdate,
           =1   InfoFWUpdateSUCCESS,
           =1   InfoFWUpdateFAIL,
           =1   InfoSDCARDReset,
           =1   InfoSDCARDNotReady,
           =1   InfoUpdateConfigStart,
           =1   InfoUpdateConfigFail,
           =1   InfoUpdateConfigSuccess,
           =1 #endif
  24      =1    InfoAutoDayNight_Auto,
  25      =1    InfoAutoDayNight_Day,
  26      =1    InfoAutoDayNight_Night,
  27      =1    InfoPLZRESETSYSTEM,
  28      =1  #ifdef AWT_NO_SIGNAL_MSG  //Pinchi 20150319 add for to display "NO VIDEO SIGNAL" by AWT request of 2015030
             -2
  29      =1    InfoNoVideoSignal,
  30      =1  #endif
  31      =1  
  32      =1  };
  33      =1  
  34      =1  //#define   InfoUpdateConfigStart 0x01
  35      =1  //#define   InfoUpdateConfigFail    0x02
  36      =1  //#define   InfoUpdateConfigSuccess 0x03
  37      =1  
  38      =1  #define   NORMAL_Record   0x01
  39      =1  #define   Manual_Record 0x02
  40      =1  #define   ALARM_Record  0x04
  41      =1  #define   GPS       0x08
  42      =1  #define   G_Sensor    0x10
  43      =1  #define   WIFI      0x20 
  44      =1  #define   WIFI_Signal   0x40
  45      =1  #define   OverWrite_Record  0x80
  46      =1  
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 75  

  47      =1  void DisplayGaugeOSD(void);
  48      =1  void ClearGAUGEINFO(void);
  49      =1  void DisplaylockOSD(void); 
  50      =1  void DisplayactvOSD(void); 
  51      =1  void DisplayNumber(BYTE addr,WORD val,BYTE type);
  52      =1  //#ifdef SUPPORT_SDCARD
  53      =1  void DisplayDVRStatus(void);
  54      =1  void DisplayFormatOSD(void);
  55      =1  void DisplayFormatOkOSD(void);
  56      =1  void DisplayFormatFailOSD(void);
  57      =1  void DisplayFWUpDate(void);
  58      =1  void DisplayFWUpDateOK(void);
  59      =1  void DisplayFWUpDateFail(void);
  60      =1  void DisplayFWVersion(void) ;
  61      =1  void DisplayDVRnotReady(void);
  62      =1  void DisplayInformation(BYTE info);
  63      =1  //#endif    //#ifdef SUPPORT_SDCARD
  64      =1  
  65      =1  #if 0 //def AWT_NO_SIGNAL_MSG  //Pinchi 20150319 add for to display "NO VIDEO SIGNAL" by AWT request of 20
             -150302
           =1 void AWT_Display_NoVideoSignal(BYTE bOnOff);
           =1 #endif
  68      =1  
  69      =1  #endif
  70      =1  
  27          
  28          #define ClearRemoTimer()  TR2 = 0
  29          
  30          extern BYTE CAM_QUAD_TO;//ryan@20170928
  31          
  32          extern  BYTE AV_MODE_DELAY;
  33          extern BYTE Backlight_TO;
  34          
  35          extern      BYTE  DebugLevel;
  36          #ifdef REMO_RC5
              extern  BYTE RemoDataReady;
              #endif
  39          extern  BYTE RemoSystemCode, RemoDataCode;
  40          extern  BYTE InputSelection;
  41          extern      BYTE  VInputStdDetectMode;
  42          extern  BYTE  VInputStd;
  43          
  44          extern  BYTE  PcMode;
  45          //extern      bit AutoDetect;
  46          extern      bit NoInitAccess;
  47          extern  BYTE  DVR_RecordStatus;
  48          //===================== Timer =================================================
  49              DATA BYTE keytic=0;
  50              DATA BYTE Key=0;
  51              bit KeyReady=0, RepeatKey = 0;
  52          
  53              DATA BYTE tm001;
  54              DATA  WORD  stopWatch;
  55              DATA  WORD  tm01=0;
  56              DATA  BYTE  tic01=0;  //, tic_pc;
  57              DATA  WORD  tic_pc=0;
  58          
  59              DATA DWORD  SystemClock;      //00:00
  60            //#ifdef Format_SDCard  
  61              BYTE FormatSDCard=1;
  62            //#endif
  63          //    xdata DWORD LastBlockedTime;    //00:00
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 76  

  64          //static  DATA WORD WakeupTime;
  65          //static  DATA BYTE WakeupPR;
  66          
  67          //     WORD OffTime;   
  68          //     BYTE SleepTimer;
  69          //     WORD SleepTime;
  70          #ifdef CHIP_MANUAL_TEST //==============================================================
              extern  BYTE ManualFrequency;
              extern  bit   OnChipTest;
              #endif      //==============================================================
  74          
  75          #ifdef SERIAL //=======================================================================
  76          
  77          static  DATA BYTE RS_buf[BUF_MAX];
  78              DATA BYTE RS_buf2[BUF_MAX];
  79              DATA BYTE DVR_buf[DVR_BUF_MAX];
  80              
  81              DATA BYTE RS_in, RS_out;
  82              DATA BYTE RS2_in;
  83              bit     RS_Xbusy=0;     // bit RS_Xbusy=0;
  84              bit     RS2_Xbusy=0;    // bit RS_Xbusy=0;
  85              
  86          #endif  // SERIAL ======================================================================
  87          
  88          //================== Remocon ==================================================
  89          #ifdef REMO_RC5
              
              static  bit   RemoPhase1, RemoPhase2;
                  IDATA BYTE  RemoDataReady=0;
                  IDATA BYTE  RemoSystemCode, RemoDataCode;
              
              #elif defined REMO_NEC
              
              static  bit     RemoPhase=0;
              static  IDATA BYTE  RemoStep=0;
              static  IDATA BYTE  RemoHcnt, RemoLcnt;
                  IDATA BYTE  RemoData[4];
                    IDATA BYTE  RemoDataReady=0;
              static  IDATA BYTE  RemoNum, RemoBit;
              
                    IDATA BYTE  RemoDataCode=0xff;
              #endif  //================== Remocon ======================
 106          
 107          BYTE  keyticSec=0;
 108          BYTE  FormatWait=0;
 109          BYTE  PowerDownWait=0;
 110          BYTE  updn_reg[4]={0,0,0,0};
 111          bit ChangeKey;
 112          BYTE Time5ms;
 113          
 114          extern BYTE SEQFlag;
 115          
 116           extern bit   FormatStart;
 117          extern bit   PowerDownStart;
 118          extern BYTE   KeyBuffer;
 119          extern BYTE year1,year2,month,day,hour,minute,second;
 120          extern BYTE lock_keycnt;
 121          extern BYTE DVR_SDCardAvailable;
 122          //#ifndef QUAD
 123          extern BYTE displayhold_flag;  //Pinchi 20150319 enable
 124          //#endif
 125          extern BYTE TriggerFlag;//ryan@20170914
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 77  

 126          
 127          //====================HS 2835Command================ Andy AWT 980928
 128          code unsigned char *CommTable[] = { 
 129              {"hscom 1 1 ch0:1%1bx ch1:0%1bx ch2:0%1bx ch3:0%1bx\n\r"},        // INDEX_ID=0x00 CAM A
 130              {"hscom 1 1 ch1:1%1bx ch0:0%1bx ch2:0%1bx ch3:0%1bx\n\r"},        // INDEX_ID=0x01 CAM B
 131          #ifdef AWT_TW2835_DRAW_T_ICON  //Pinchi 20150415 add to draw T icon by TW2835 when CAM C trigger
 132              {"hscom 1 1 ch2:%bx ch0:0%1bx ch1:0%1bx ch3:0%1bx\n\r"},          // INDEX_ID=0x02 CAM C
 133          #else
                  {"hscom 1 1 ch2:1%1bx ch0:0%1bx ch1:0%1bx ch3:0%1bx\n\r"},        // INDEX_ID=0x02 CAM C
              #endif
 136              {"hscom 1 1 ch3:1%1bx ch0:0%1bx ch1:0%1bx ch2:0%1bx\n\r"},        // INDEX_ID=0x03 CAM R
 137              {"hscom 2 2 ch0:1%1bx ch1:0%1bx ch2:0%1bx ch3:0%1bx\n\r"},        // INDEX_ID=0x04 CAM A+B
 138          #ifdef AWT_TW2835_DRAW_T_ICON  //Pinchi 20150415 add to draw T icon by TW2835 when CAM C trigger
 139              {"hscom 2 2 ch2:%bx ch3:1%1bx ch0:0%1bx ch1:0%1bx\n\r"},        // INDEX_ID=0x05 CAM C+R
 140          #else
                  {"hscom 2 2 ch2:0%1bx ch3:1%1bx ch0:0%1bx ch1:0%1bx\n\r"},        // INDEX_ID=0x05 CAM C+R
              #endif
 143              {"hscom 2 2 ch0:0%1bx ch3:1%1bx ch1:0%1bx ch2:0%1bx\n\r"},        // INDEX_ID=0x06 CAM A+R
 144              {"hscom 2 2 ch3:1%1bx ch1:0%1bx ch0:0%1bx ch2:0%1bx\n\r"},        // INDEX_ID=0x07 CAM R+B
 145              {"hscom 3 1 ch3:1%1bx ch0:0%1bx ch1:0%1bx ch2:0%1bx\n\r"},        // INDEX_ID=0x08 CAM R+A+B T1
 146              {"hscom 3 3 ch0:0%1bx ch1:0%1bx ch3:1%1bx ch2:0%1bx\n\r"},        // INDEX_ID=0x09 CAM A+B+R T3
 147              {"hscom 3 4 ch0:0%1bx ch1:0%1bx ch3:1%1bx ch2:0%1bx\n\r"},        // INDEX_ID=0x0A CAM A+B+R T4
 148              {"hscom 4 1 ch0:0%1bx ch1:0%1bx ch2:0%1bx ch3:1%1bx\n\r"},        // INDEX_ID=0x0B CAM A+B+C+R
 149              {"hscom 2 2 ch0:1%1bx ch2:0%1bx ch1:0%1bx ch3:0%1bx\n\r"},        // INDEX_ID=0x0C CAM A+C
 150          #ifdef AWT_TW2835_DRAW_T_ICON  //Pinchi 20150415 add to draw T icon by TW2835 when CAM C trigger
 151              {"hscom 2 2 ch2:%bx ch1:0%1bx ch0:0%1bx ch3:0%1bx\n\r"},        // INDEX_ID=0x0D CAM C+B
 152          #else
                  {"hscom 2 2 ch2:1%1bx ch1:0%1bx ch0:0%1bx ch3:0%1bx\n\r"},        // INDEX_ID=0x0D CAM C+B
              #endif
 155              {"hscom 3 3 ch3:1%1bx ch0:0%1bx ch1:0%1bx ch2:0%1bx\n\r"},         // INDEX_ID=0x0E CAM R+AB //Ryan
 156          
 157            //Andy A1.4 2009 1 12 
 158              {"hscom 2 2 ch3:1%1bx ch2:0%1bx ch1:0%1bx ch0:0%1bx\n\r"},        // INDEX_ID=0x0F CAM R+C
 159              {"hscom 3 1 ch3:1%1bx ch0:0%1bx ch2:0%1bx ch1:0%1bx\n\r"},        // INDEX_ID=0x10 CAM R+A+C T1
 160              {"hscom 3 1 ch3:1%1bx ch1:0%1bx ch2:0%1bx ch0:0%1bx\n\r"},        // INDEX_ID=0x11 CAM R+B+C T1
 161              {"hscom 3 3 ch3:1%1bx ch0:0%1bx ch2:0%1bx ch1:0%1bx\n\r"},        // INDEX_ID=0x12 CAM R+AC T3
 162              {"hscom 3 3 ch3:1%1bx ch1:0%1bx ch2:0%1bx ch0:0%1bx\n\r"},         // INDEX_ID=0x13 CAM R+BC T3
 163            //Andy A1.4 2009 1 13 
 164              {"hscom 3 3 ch0:1%1bx ch1:0%1bx ch2:0%1bx ch3:0%1bx\n\r"},        // INDEX_ID=0x14 CAM A+B+C T3
 165              {"hscom 3 3 ch0:0%1bx ch2:0%1bx ch3:1%1bx ch1:0%1bx\n\r"},        // INDEX_ID=0x15 CAM A+C+R T3
 166            //Andy A1.4 2009 1 13 
 167              {"hscom 2 2 ch1:1%1bx ch0:0%1bx ch2:0%1bx ch3:0%1bx\n\r"},        // INDEX_ID=0x16 CAM B+A
 168              {"hscom 2 2 ch1:1%1bx ch2:0%1bx ch3:0%1bx ch0:0%1bx\n\r"},        // INDEX_ID=0x17 CAM B+C
 169              {"hscom 2 2 ch1:0%1bx ch3:1%1bx ch2:0%1bx ch0:0%1bx\n\r"},        // INDEX_ID=0x18 CAM B+R
 170              {"hscom 3 3 ch1:1%1bx ch0:0%1bx ch2:0%1bx ch3:0%1bx\n\r"},        // INDEX_ID=0x19 CAM B+A+C T3
 171              {"hscom 3 3 ch1:0%1bx ch0:0%1bx ch3:1%1bx ch2:0%1bx\n\r"},        // INDEX_ID=0x1A CAM B+A+R T3
 172              {"hscom 3 3 ch1:0%1bx ch2:0%1bx ch3:1%1bx ch0:0%1bx\n\r"},        // INDEX_ID=0x1B CAM B+C+R T3
 173          #ifdef AWT_TW2835_DRAW_T_ICON  //Pinchi 20150415 add to draw T icon by TW2835 when CAM C trigger
 174              {"hscom 2 2 ch2:%bx ch0:0%1bx ch1:0%1bx ch3:0%1bx\n\r"},        // INDEX_ID=0x1C CAM C+A
 175              {"hscom 2 2 ch2:%bx ch1:0%1bx ch3:0%1bx ch0:0%1bx\n\r"},        // INDEX_ID=0x1D CAM C+B
 176              {"hscom 2 2 ch2:%bx ch3:1%1bx ch1:0%1bx ch0:0%1bx\n\r"},        // INDEX_ID=0x1E CAM C+R
 177              {"hscom 3 3 ch2:%bx ch0:0%1bx ch1:0%1bx ch3:0%1bx\n\r"},        // INDEX_ID=0x1F CAM C+A+B T3
 178              {"hscom 3 3 ch2:%bx ch0:0%1bx ch3:1%1bx ch1:0%1bx\n\r"},        // INDEX_ID=0x20 CAM C+A+R T3
 179              {"hscom 3 3 ch2:%bx ch1:0%1bx ch3:1%1bx ch0:0%1bx\n\r"},        // INDEX_ID=0x21 CAM C+B+R T3
 180          #else
                //Andy A1.4 2009 1 13 //C trigger
                  {"hscom 2 2 ch2:1%1bx ch0:0%1bx ch1:0%1bx ch3:0%1bx\n\r"},        // INDEX_ID=0x1C CAM C+A
                  {"hscom 2 2 ch2:1%1bx ch1:0%1bx ch3:0%1bx ch0:0%1bx\n\r"},        // INDEX_ID=0x1D CAM C+B
                  {"hscom 2 2 ch2:0%1bx ch3:1%1bx ch1:0%1bx ch0:0%1bx\n\r"},        // INDEX_ID=0x1E CAM C+R
                  {"hscom 3 3 ch2:1%1bx ch0:0%1bx ch1:0%1bx ch3:0%1bx\n\r"},        // INDEX_ID=0x1F CAM C+A+B T3
                  {"hscom 3 3 ch2:0%1bx ch0:0%1bx ch3:1%1bx ch1:0%1bx\n\r"},        // INDEX_ID=0x20 CAM C+A+R T3
                  {"hscom 3 3 ch2:0%1bx ch1:0%1bx ch3:1%1bx ch0:0%1bx\n\r"},        // INDEX_ID=0x21 CAM C+B+R T3
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 78  

              #endif
 189          
 190          #ifdef HTRV
                #if 1  //Pinchi 20150908 add to fix R/C no audio output
                  {"hscom 2 1 ch3:1%1bx ch2:0%1bx ch1:0%1bx ch0:0%1bx\n\r"},        // INDEX_ID=0x22 CAM R+c 
                #else
                  {"hscom 2 1 ch3:1%1bx ch2:0%1bx ch1:1%1bx ch0:0%1bx\n\r"},        // INDEX_ID=0x22 CAM R+c 
                #endif
              #endif
 197          };
 198          //=========================End===================
 199          
 200          
 201          CODE BYTE PanelInfoStr[]={
 202          #if (defined UXGA)            // 1600 x 1200
                "---> Panel: UXGA-1600*1200"
              #elif (defined SXGA)              // 1280 x 1024
                "---> Panel: SXGA-1280*1024"
              #elif (defined  XGA)              // 1024 x 768
                "---> Panel: XGA-1024*768"
              #elif (defined SVGA)            //  800 x 600
                "---> Panel: SVGA-800*600"
              #elif (defined VGA)             //  640 x 480
                "---> Panel: VGA-640*480"
              #elif (defined WXGA)            // 1280 x 768 (15:9) // 1366 x 768 (16:9)
                "---> Panel: WXGA-1280*768(15:9) or 1366*768(16:9)"
              #elif (defined WSVGA)           // 1024 x 600 *** only video mode
                "---> Panel: WSVGA-1024*600"
              #elif (defined WVGA)            //  800 x 480
 217            #ifdef AU_10INCH
                "---> Panel: WVGA-800*480 -- TTL AU 10inch"
                #elif (defined SAMSUNG_10INCH)
                "---> Panel: WVGA-800*480 -- TTL SAMSUNG 10inch"
                #elif (defined SAMSUNG_TICONLESS_10INCH)
                "---> Panel: WVGA-800*480 -- TICONLESS SAMSUNG 10inch"
                #elif (defined SHARP_TICONLESS_7INCH)
                "---> Panel: WVGA-800*480 -- TICONLESS SHARP 7inch"
                #elif (defined AU_TICONLESS_7INCH)
                "---> Panel: WVGA-800*480 -- TICONLESS AU 7inch"
                #elif (defined HSD070IDW1_7INCH)
 228            "---> Panel: WVGA-800*480 -- TICONLESS HS 7inch"
 229            #elif (defined AU_TICONLESS_10INCH)
                "---> Panel: WVGA-800*480 -- TICONLESS AU 10inch"
                #elif defined HITACHI_T01
                "---> Panel: WVGA-800*480 -- TICONLESS Hitachi TX18D24VM2BAA"
                #elif defined HITACHI_TX23D12
                "---> Panel: WVGA-800*480 -- TICONLESS Hitachi TX23D12"
                #elif defined HITACHI_TX18D24
                "---> Panel: WVGA-800*480 -- TICONLESS Hitachi TX18D24"
                #else
                "---> Panel: WVGA-800*480"
                #endif
 240          #elif (defined HVGA)            //  480 x 320
                "---> Panel: HVGA-480*320"
              #elif (defined QVGA)            //  320 x 240 *** only video mode
                "---> Panel: QVGA-320*240"
              #elif (defined WQVGA)           //  480 x 234 *** only video mode
                  #ifdef ANALOG_7INCH
                "---> Panel: WQVGA-480*234 -- ANALOG TICONLESS AU 7inch"
                #elif (defined SHARP_LQ043T3DX02)
                "---> Panel: WQVGA-480*234 -- TTL SHARP LED 4.3inch panel"
                #else
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 79  

                "---> Panel: WQVGA-480*234 "
                #endif
              #endif
 253          };
 254          
 255          #ifdef ADD_ANALOGPANEL    // Added Analog panel(AU7") from default set panel(expect WQVGA) with DIP #1 switc
             -h.(DIP#1=L:ANALOG, H:DEFAULT)
              CODE BYTE AddedAnalogPanelStr[]={
                  #ifdef ADD_ANALOG_7INCH
                "---> Added Analog Panel(AU 7inch) with DIP SW1=Enabled"
                  #elif defined ADD_TMD_LTA05B352A
                "---> Added Analog Panel(TMD 4inch) with DIP SW1=Enabled"
                  #endif
              };
              #endif
 264          
 265          #if 0   //william-981029
              //=============================================================================
              //                            CheckSpecialMode                                                   
              //=============================================================================
              void CheckSpecialMode(void)
              {
                BYTE i;
              
                i = GetKey(0);
              
                switch( i ) {
                case MENUKEY:
                  Puts("\r\n---- Menu Key is pressed -> Enter Special Mode( To Composite )");
                  SaveInputSelectionEE(CH_TW2835);
                  DebugLevel = 0;
              ///   PcDetectFlag = 0;
                  break;
                }
              }
              #endif
 285          
 286          //=============================================================================
 287          //    Main Initialize Routine
 288          //=============================================================================
 289          void main_init (void)
 290          {
 291   1        extern CODE BYTE *OutOfRangeStr[] ;
 292   1      
 293   1        //BYTE  ikey;
 294   1        WORD  rev;
 295   1      
 296   1        WriteTW88(0xe0, 0x10);  // Disable I2C auto increase mode
 297   1        //PowerLED(ON);
 298   1        //EnableRemoconInt();
 299   1      #if 0   //981103
                ikey = ResetMSP();
                if( ikey ) 
                {
                  #ifdef DEBUG
                  dPrintf("\r\nError on resetting MSP:0x%02x", (WORD)ikey);
                  #endif
                }
              #endif
 308   1        rev = GetFWRevEE();
 309   1        Printf("\r\nPrev.FW:%04x", rev);
 310   1      
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 80  

 311   1        if( GetFWRevEE()!=FWVER )   // exist EEPROM
 312   1        {         
 313   2          Printf("\r\nCurr.FW:%04x", (WORD)FWVER);
 314   2          SaveFWRevEE(FWVER);
 315   2          Printf("\r\nCurr.FW:%04x", (WORD)GetFWRevEE());
 316   2        }
 317   1      
 318   1        //---------- if FW version is not matched, initialize EEPROM data -----------
 319   1      
 320   1        if( GetFWRevEE()==FWVER )
 321   1        {         // exist EEPROM
 322   2          if( rev != FWVER ) 
 323   2          {         //
 324   3            SaveDebugLevelEE(DebugLevel);
 325   3            //Printf("\r\nNew DebugLevel:%02x", (WORD)DebugLevel);//andy awt084 980928
 326   3      
 327   3            SaveInputSelectionEE(CH_TW2835);
 328   3            ClearBasicEE();
 329   3            Printf("\r\n[MSG]main_init()=> rev != FWVER & call ClearBasicEE()\r\n");  //pinchi test
 330   3            #ifdef SUPPORT_PC
                    ResetPanelAttributeValue();
                    SaveDefaultPCDataAllEE();
                    #endif
 334   3          }
 335   2          else 
 336   2          {
 337   3          ////ClearBasicEE();
 338   3            DebugLevel = GetDebugLevelEE();
 339   3            //Printf("\r\nSaved DebugLevel:%02x", (WORD)DebugLevel);//andy awt084 980928
 340   3          }
 341   2        }
 342   1        else 
 343   1        {
 344   2          Printf("\r\nCannot access EEPROM!!!!");
 345   2          Printf("\r\nNo initialize");
 346   2          DebugLevel = 0xff;
 347   2          SetVInputStd( NTSC );
 348   2        ////  InitVideoData(VInputStd);
 349   2        #ifdef DISPLAY_TECHWELL_LOGO  //Pinchi 2050903 add
                  DisplayLogo();
                #endif
 352   2          LCDPowerON(0);
 353   2          return;
 354   2        }
 355   1      
 356   1        #ifdef SUPPORT_GAMMA
                DownLoadGamma();
                #endif
 359   1      
 360   1      #if 1   //awt ml073q william-20120308
 361   1        VInputStdDetectMode = GetVInputStdDetectModeEE();
 362   1        if( VInputStdDetectMode != AUTO )
 363   1          SetVInputStd( VInputStdDetectMode );
 364   1        else
 365   1          SetVInputStd( NTSC );
 366   1      
 367   1        SetPossibleAutoDetectStdEE();
 368   1      
 369   1        //InputSelectionInx  = 0;
 370   1        InputSelection  = UNKNOWN;    //GetInputSelectionEE();
 371   1      ////  InitVideoData(VInputStd);
 372   1      #endif
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 81  

 373   1        //ChangeInput( GetInputSelectionEE() );
 374   1      
 375   1        Change_OSDColorLookup();
 376   1        DownloadUDFont();
 377   1      
 378   1      #ifdef AWT_NO_SIGNAL_MSG  //Pinchi 20150320 add
 379   1        DisplayInformation(InfoNoVideoSignal);
 380   1        delay(10);
 381   1        ClearGAUGEINFO();
 382   1      #endif
 383   1      
 384   1        //AutoDetect = 0;
 385   1      #ifdef ALC106  //Pinchi 20140925 add for AWT ML072Q
                WriteALC106(0x04,0xC000);
                ReadALC106(0x04);
                WriteALC106(0x02,0x9E9E);
              #endif
 390   1        
 391   1      #ifdef Monitor_debug
 392   1        Prompt();
 393   1      #endif
 394   1      
 395   1        //panel mirror  //william-20120921
 396   1        WriteTW88( 0xff, 0x01);
 397   1        WriteTW88( 0x82, 0x01);
 398   1        //WriteTW88( 0x82, 0x0c);
 399   1        WriteTW88( 0xff, 0x00);
 400   1        
 401   1        //////////////////////////////////////////////////////////////////////////////////
 402   1      
 403   1        WriteTW88( 0xd0, 0xff); // clear status
 404   1        WriteTW88( 0xd1, 0xff); // clear status
 405   1      }
 406          
 407          //=============================================================================
 408          //                            Initialize WINBOND CPU                                                   
 409          //=============================================================================
 410          void InitCPU(void)
 411          {
 412   1        CHPENR = 0x87;    // Enable AUX RAM in Winbond(W78E516B)
 413   1        CHPENR = 0x59;    //
 414   1        CHPCON = 0x10;    //
 415   1        CHPENR = 0x00;    // Write Disable
 416   1      
 417   1        /*----- Initialize interrupt -------------*/
 418   1      
 419   1        TH1 = 0xf4;     //    SMOD = 0      SMOD =1 //andy AWT 980924         
 420   1                  // 0ffh :57600 bps        
 421   1                  // 0fdh : 9600 bps  0fdh :19200 bps       
 422   1                  // 0fah : 4800 bps                
 423   1                  // 0f4h : 2400 bps                
 424   1                  // 0e8h : 1200 bps                
 425   1      
 426   1        SCON = 0x50;    // 0100 0000 mode 1 - 8 bit UART        
 427   1                  // Enable serial reception            
 428   1          TMOD = 0x22;    // 0010 0010 timer 0 - 8 bit auto reload    
 429   1                  // timer 1 - baud rate generator        
 430   1          TCON = 0x55;    // 0101 0001 timer 0,1 run            
 431   1                  // int 0,  edge triggered           
 432   1                  // int 1,  edge triggered           
 433   1                  // TF1 TR1 TF0 TR0  EI1 IT1 EI0 IT0       
 434   1        TH0 = TL0 = 64;   // 64=4608 Hz at 11.0592MHz
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 82  

 435   1      
 436   1        PCON = 0x80;    // 0000 0000 SMOD(double baud rate bit) = 1   
 437   1        IP   = 0x02;    // 0000 0000 interrupt priority         
 438   1                  // -  - PT2 PS PT1 PX1 PT0 PX0               
 439   1      
 440   1        #ifdef SERIAL
 441   1        IE   = 0x92;    // 1001 0010 interrupt enable:Serial,TM0    
 442   1                    // EA - ET2 ES ET1 EX1 ET0 EX0          
 443   1      
 444   1        TI   = 1;     // LJY000724 // For Starting Serial TX 
 445   1        ES   = 1;     // LJY000724
 446   1        #else
                IE   = 0x82;
                #endif // SERIAL
 449   1      
 450   1        //------------ Timer 2 for Remocon --------------------------------
 451   1        T2CON  = 0x00;        // Timer2 Clear
 452   1        TR2    = 0;
 453   1        ET2    = 1;
 454   1        //-----------------------------------------------------------------
 455   1      
 456   1        //Uart2
 457   1        //P0M0=0x7F;
 458   1        //P1M0=0x04;
 459   1             S2CON=0x50;                                 //Set UART Mode 1
 460   1             S2BRT=0xf4;                                 //Set 2UART overflow rate
 461   1          //AUXR2=0x08;                                 //SMOD = 1,TX12 = 0 (/12)
 462   1          //AUXR2|=0x10;                                //S2TR = 1
 463   1        AUXR2 |= 0x18;
 464   1      
 465   1        // Enable serial interrupt
 466   1        AUXIE |= 0x10;
 467   1      
 468   1        RS2_Xbusy=0;
 469   1      
 470   1      //set pwm port 1.6
 471   1        CCAPM4=0x42;
 472   1        CCON  |=  0x40;       //Start PCA Counter
 473   1      
 474   1        //ADC P1.6
 475   1        //P1M0=0x80;          //set input p1.6 
 476   1        
 477   1        //P2M0=0x01;
 478   1        //P2M1=0x01;
 479   1        P3M0=0x00;
 480   1        P3M1=0x20;
 481   1      
 482   1      
 483   1          #ifdef SERIAL//ryan@20170824
 484   1          RS_in = RS_out = 0;
 485   1          #endif  // SERIAL
 486   1      }
 487          
 488          //#define _ReadKey()    ( ((~P4>>2)& 0x01) | (~P1 & 0xfc) )
 489          #ifndef INTERNAL_MCU
 490            #ifdef AWT_NEW_SLIM_MODEL  //Pinchi 20150203 add for AWT new slim model
                #define _ReadKey()    ((~P2 & 0xFC))
                #else
 493            #define _ReadKey()    ((~P2 & 0x9c)) //ANDY awt 980907
 494            #endif
 495          #else
              #define _ReadKey()      ( ((~P4>>2)& 0x01) | (~P1 & 0xfe) )
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 83  

              #endif
 498          
 499          
 500          
 501          ////////////////////////////////
 502          
 503          //INTERRUPT(1, timer0_int)
 504          void timer0_int(void) interrupt 1 using 1     // interrupt number1, bank register 2
 505          {
 506   1        BYTE TempKey;
 507   1      
 508   1        tm001++;
 509   1      
 510   1        //Kane @HS 2007 0814 Ver1.31>>>>
 511   1        if(Time5ms)
 512   1          Time5ms--;
 513   1        if(Time5ms==0)
 514   1        {
 515   2        #ifdef AWT_NEW_SLIM_MODEL  //Pinchi 20150203 add for AWT new slim model
                  TempKey = (((P2 & 0x30) >> 4) & 0x03);
                #else
 518   2          TempKey=(( (P2&0x60) >> 5) & 0x03);
 519   2        #endif
 520   2          if(updn_reg[3] != TempKey )  // (( (P2&0x60) >> 5) & 0x03))    //Abel for HS SW key ......951102        
             -                               
 521   2          {                                                                                          
 522   3            updn_reg[0] = updn_reg[1];                                                              
 523   3            updn_reg[1] = updn_reg[2];                                                              
 524   3            updn_reg[2] = updn_reg[3];                                                              
 525   3            updn_reg[3] = TempKey;// ( (P2&0x60) >> 5) & 0x03; 
 526   3            ChangeKey = 1;    
 527   3            //else      //william-v1.42-961130
 528   3            //ChangeKey=0;  //william-v1.42-961130
 529   3            //Time5ms = (48);
 530   3            Time5ms = (40);
 531   3          
 532   3            
 533   3          }
 534   2        }
 535   1          //Kane @HS 2007 0814 Ver1.31<<<<
 536   1        
 537   1        //---------- 0.01 sec timer ------------
 538   1        
 539   1        #ifdef CLOCK_11M
                if( tm001 > 48 ) {      // LJY001220 0.01sec
                #elif defined CLOCK_22M
 542   1        if( tm001 > 48*2 ) {    // LJY001220 0.01sec
 543   2        #endif
 544   2      
 545   2          stopWatch++;
 546   2          tm001 = 0;
 547   2          tic01++;
 548   2      if(Backlight_TO>1)  Backlight_TO--;
 549   2          
 550   2          if( tic01==100 ) 
 551   2          {       // 1 sec
 552   3            if(SEQTime<255) SEQTime++;
 553   3            SystemClock++;
 554   3            tic01 = 0;
 555   3          //date  
 556   3        //#ifndef QUAD
 557   3        #if 1  //Pinchi 20141017 enable for AWT ML072Q
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 84  

 558   3          if(displayhold_flag>1)
 559   3            displayhold_flag--;
 560   3      
 561   3                   if(CAM_QUAD_TO>1)
 562   3              CAM_QUAD_TO--;//ryan@20170928 
 563   3        #endif
 564   3      
 565   3          second++;
 566   3      
 567   3          if(lock_keycnt>0)
 568   3            lock_keycnt--;
 569   3      
 570   3          if(FormatStart==1)
 571   3            FormatWait++;
 572   3          if(PowerDownStart==1)
 573   3            PowerDownWait++;
 574   3          if(second==60)
 575   3          {
 576   4            second=0;
 577   4            minute++;
 578   4          }
 579   3      
 580   3          if(minute==60)
 581   3          {
 582   4            minute=0;
 583   4            hour++;
 584   4          }
 585   3      
 586   3          if(hour==24)
 587   3          {
 588   4            hour=0;
 589   4            day++;
 590   4          }     
 591   3      
 592   3          if(Key)
 593   3            keyticSec++;
 594   3          else
 595   3            keyticSec=0;
 596   3        //#ifdef Format_SDCard
 597   3        #ifdef SUPPORT_SDCARD  //Pinchi 20141014 add for AWT ML072Q
                   if(((DVR_RecordStatus&NORMAL_Record)!=NORMAL_Record) && DVR_SDCardAvailable!=0xff && FormatSDCard!=0)
                    FormatSDCard++;
                #endif  
 601   3      
 602   3          }
 603   2        
 604   2          
 605   2          if( tic_pc!=0xffff ) 
 606   2            tic_pc++;
 607   2      
 608   2          /////////////////////////////////////////// 
 609   2          if( _ReadKey() ) {
 610   3            if( keytic==3 ) {
 611   4              Key = _ReadKey();
 612   4              RepeatKey = 0;
 613   4              KeyReady = 1;
 614   4            }
 615   3            else if( keytic==100 ) {
 616   4              Key = _ReadKey();
 617   4              RepeatKey = 1;
 618   4              KeyReady = 1;
 619   4              keytic = 80;
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 85  

 620   4            }
 621   3            keytic++;
 622   3          }
 623   2          else 
 624   2          {
 625   3            keytic = 0;
 626   3            Key=0;
 627   3          }
 628   2          /////////////////////////////////////////// 
 629   2        }
 630   1      }
 631          
 632          //------------------------------------------------------------------
 633          // void InitVars(void) - variable initialize
 634          //------------------------------------------------------------------
 635          void  InitVars(void)
 636          {
 637   1        SystemClock=0;      //00:00
 638   1        //LastBlockedTime=0xffffffff;   //00:00 //ljy010904...CC_FIX_CLEAR_ON_TIME..oops! previous vchip clear err
             -or 
 639   1        //OffTime=0xffff;
 640   1        //SleepTimer=0;
 641   1        //SleepTime=0xffff;
 642   1      
 643   1        //SEL_DVI=  1;    // disable Digital VGA
 644   1        // ResetKey();
 645   1      
 646   1        DebugLevel    = 0;
 647   1      #ifdef REMO_RC5
                RemoDataReady = 0;
              #endif
 650   1        //P0_7 = 1;
 651   1        delay(100);
 652   1        PowerDown_XTAL(0);
 653   1        
 654   1        TW88HWReset = 1;
 655   1        delay(1);
 656   1      }
 657          
 658          //------------------------------------------------------------------
 659          // void InitTechwell(void) - Techwell Decoder initialize
 660          //------------------------------------------------------------------
 661          void  InitTechwell( void )
 662          {
 663   1        #ifdef NO_INITIALIZE
                if( P0_3==0 ) {// No Initialize
                  NoInitAccess =1;
                  Printf("\r\n No-initialize Test going on with DIP SW4 ..: %d\n", (WORD)P0_3);
                  return;
                }
                #endif
 670   1        #ifdef CHIP_MANUAL_TEST
                if( P0_0==0 ) OnChipTest =1;
                ManualFrequency = 2; //1;
                #endif
 674   1      
 675   1      #ifdef AWT_ML072QS_MSG  //Pinchi 20140925 add
                Puts("\r\n\nDetect ");
              #endif
 678   1      
 679   1        switch( ReadTW88(0) ) {
 680   2          case 0x21:  Puts("TW8816");   break;
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 86  

 681   2          case 0x22:  Puts("TW8816B");  break;
 682   2          case 0x49:  Puts("TW8817");   break;
 683   2          default:  Printf("Nothing --0x%02x\r\n", (WORD)ReadDecoder(0)); 
 684   2            while(1) {
 685   3              #ifdef SERIAL
 686   3              if( RS_ready() ) break;
 687   3              #endif
 688   3      
 689   3              Printf("Check again --0x%02x\r\n", (WORD)ReadDecoder(0));
 690   3              delay(99);
 691   3              if( ReadTW88(0)==0 ) continue;
 692   3              if( ReadTW88(0)==0xff ) continue;
 693   3              break;
 694   3            }
 695   2      
 696   2            delay(99);
 697   2            delay(99);
 698   2            Printf("Last Check --0x%02x\r\n", (WORD)ReadDecoder(0));
 699   2          break;
 700   2        }
 701   1      
 702   1      #ifdef AWT_ML072QS_MSG  //Pinchi 20140925 add
                Printf("%s \n", PanelInfoStr);
              #endif
 705   1        //CheckSpecialMode();   //william-981029
 706   1      } 
 707          
 708          
 709          //=============================================================================
 710          //                            Power LED ON / OFF                                                   
 711          //=============================================================================
 712          void PowerLED(BYTE flag)
 713          {
 714   1      //#define GREEN_LED P3_5
 715   1      //#define RED_LED   P3_3    P4^1
 716   1      
 717   1        if( flag==ON ) {
 718   2          //GREEN_LED = 0;    // ON GREEN
 719   2          P4=P4&0xFE;   //GREEN_LED = 0;    // ON GREEN
 720   2          P4=P4|0x02;   //RED_LED = 1;    // OFF RED
 721   2          dPuts("\r\n(PowerLED)-ON");
 722   2          }
 723   1        else if(flag==OFF)
 724   1          {
 725   2          //GREEN_LED = 1;    // OFF FREEN
 726   2          P4=P4|0x01;   //GREEN_LED = 1;    // OFF GREEN
 727   2          P4=P4&0xFD;   //RED_LED = 0;    // ON RED
 728   2          dPuts("\r\n(PowerLED)-OFF");
 729   2          }
 730   1        else if(flag==2)
 731   1          {
 732   2          //GREEN_LED = 1;    // OFF FREEN
 733   2          P4=P4|0x01;   //GREEN_LED = 1;    // ON GREEN
 734   2          P4=P4|0x02;   //RED_LED = 1;    // OFF RED
 735   2          dPuts("\r\n(PowerLED)-OFF");
 736   2          }
 737   1      }
 738          
 739          
 740          //------------------------ common routines with interrupts --------------------
 741          
 742          /*****************************************************************************/
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 87  

 743          /*      Ext Int 1 Interrupt                                                  */
 744          /*****************************************************************************/
 745          //INTERRUPT(2, ext1_int)
 746          void  ext1_int(void) interrupt 2 using 1
 747          {
 748   1        EX1 = 0;
 749   1      }
 750          
 751          //****************************************************************************/
 752          //      Timer 0 Interrupt                                                  
 753          //      If TL0 overflow,
 754          //       .Invoke this interrupt
 755          //       .TL0 <- TH0
 756          //      TL0 is incremented every machine cycle
 757          //      Every machine cycle is 12*Tosc(11.0592MHz)
 758          //
 759          //      Every machine cycle = 1.085us
 760          //      Interrupt interval = 208us ( 1.085*(256-64(TH0)) )
 761          //      When tm001==48, it's 0.01sec.  48*208us
 762          //              
 763          //****************************************************************************/
 764          
 765          
 766          //=============================================================================
 767          //      Remocon
 768          //=============================================================================
 769          
 770          #ifdef REMO_RC5
              
              void InitForRemo(void)
              {
                WORD temp;
              
                #if defined CLOCK_11M
              
                #ifdef TECHWELL_REMOCON // DONGYANG
                temp = 0x10000 - 193; // 209.62us = 1.085*193
                #else
                temp = 0x10000 - 204; // 221.34us = 1.085*204
                #endif
                
                #elif defined CLOCK_22M
              
                #ifdef TECHWELL_REMOCON // DONGYANG
                temp = 0x10000 - 193*2; // 209.62us = 1.085/2*193*2
                #else
                temp = 0x10000 - 204*2; // 221.34us = 1.085/2*204*2
                #endif
              
                #elif defined CLOCK_27M   // intenal_mcu
              
                #ifdef TECHWELL_REMOCON // DONGYANG
                temp = 0x10000 - 20;  // 209.62us = 1/27 * 283 * 20 = 209.63uS
                T2HIGH = 1;     // 283 = 256 + 27
                T2LOW = 27;     // 
                #else
                temp = 0x10000 - 36;  // 221.34us = 1/27 * 166 * 36 = 221.33uS
                T2HIGH = 0;     // 
                T2LOW = 166;      // 
                #endif
              
                #endif
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 88  

              
                RCAP2H = TH2 = temp>>8;
                RCAP2L = TL2 = (BYTE)(temp & 0xff);
                TR2    = 1;
              
                tm01 = 4;
                RemoPhase1 = 1;
                RemoSystemCode= RemoDataCode=0;
              }
              
              #elif defined REMO_NEC
              
              void InitForRemo(void)
              {
                WORD temp;
              
                #if defined CLOCK_11M
                temp = 0x10000 - 173; // 187.71us = 1.085*173
                #elif defined CLOCK_22M
                temp = 0x10000 - 173*2;
                #elif defined CLOCK_27M 
                T2HIGH = 0;     // 
                T2LOW = 252;      // 
                temp = 0x10000 - 20;  // 186.667uS = 1 /27 * 252 * 20
                #endif
              
                RCAP2H = TH2 = temp>>8;
                RCAP2L = TL2 = (BYTE)(temp & 0xff);
              
                TR2 = 1;
              
                tm01 = 0;
                RemoStep  = 0;
                RemoPhase = 0;
                RemoHcnt  = 0;
                RemoLcnt  = 0;
              }
              
              #endif
 844          
 845          #ifdef REMO_RC5
              
              ///****************************************************************************
              ///*      Ext Int 0 Interrupt                                                
              ///****************************************************************************
              //_interrupt(0) void remocon_int (void)
              //INTERRUPT(0, remocon_int)
              void  remocon_int(void) interrupt 0 using 1
              {
                EX0 = 0;  // Enable Remocon (Enable Ext int0)
                InitForRemo();
              }
              #endif
 858          //*****************************************************************************
 859          //      Serial Interrupt                                                   
 860          //*****************************************************************************
 861          #ifdef SERIAL
 862          
 863          //INTERRUPT(4, serial_int)
 864          void serial_int(void) interrupt 4 using 1   // register bank 1
 865          {
 866   1        
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 89  

 867   1        //day++;
 868   1        //year2=RI;
 869   1        //year1=TI;
 870   1        if( RI ) {          //--- Receive interrupt ----
 871   2          RI = 0;
 872   2          RS_buf2[RS_in]=RS_buf[RS_in]=/*DVR_buf[RS_in]=*/ SBUF;//andy awt 980928
 873   2          //month++;
 874   2            RS_in++;
 875   2          if( RS_in>=BUF_MAX/*DVR_BUF_MAX*/) RS_in = 0;
 876   2        }
 877   1      
 878   1        if( TI ) {          //--- Transmit interrupt ----
 879   2          TI = 0;
 880   2          RS_Xbusy=0;
 881   2        }
 882   1      }
 883          
 884          #if 1
 885          //INTERRUPT(12, serial2_int)
 886          void serial2_int(void) interrupt 12 using 1   
 887          {
 888   1        //--- Receive interrupt ----
 889   1        //day++;
 890   1        //year2=S2CON&0x0f;
 891   1        if ((S2CON & 0x01) == 0x01)
 892   1          {         
 893   2          // Clear reception flag
 894   2          S2CON = S2CON&0xfe;
 895   2          DVR_buf[RS2_in] = S2BUF;
 896   2          //month++;
 897   2            RS2_in++;
 898   2          if( RS2_in>=/*BUF_MAX*/DVR_BUF_MAX) RS2_in = 0;
 899   2        }
 900   1        
 901   1        if ((S2CON & 0x02) == 0x02)
 902   1        {
 903   2          S2CON = S2CON&0xfd;
 904   2          RS2_Xbusy = 0;
 905   2        }
 906   1      }
 907          
 908          #endif
 909          
 910          //=============================================================================
 911          //    Serial RX Check                            
 912          //=============================================================================
 913          BYTE RS_ready(void)
 914          {
 915   1        if( RS_in == RS_out ) return 0;
 916   1        else return 1;
 917   1      }
 918          
 919          
 920          #ifdef Monitor_debug
 921          
 922          //=============================================================================
 923          //    Serial RX                              
 924          //=============================================================================
 925          BYTE RS_rx(void)
 926          {
 927   1        BYTE  ret;
 928   1          
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 90  

 929   1        ES = 0;
 930   1        ret = RS_buf[RS_out];
 931   1        RS_out++;
 932   1        if(RS_out >= BUF_MAX) 
 933   1          RS_out = 0;
 934   1        ES = 1;
 935   1      
 936   1        return ret;
 937   1      }
 938          #endif
 939          
 940          //=============================================================================
 941          //    Serial TX                              
 942          //=============================================================================
 943          void RS_tx(BYTE tx_buf)
 944          {
 945   1        while(RS_Xbusy);
 946   1        SBUF = tx_buf;
 947   1        RS_Xbusy=1;
 948   1      }
 949          
 950          //=============================================================================
 951          //    Serial2 TX                               
 952          //=============================================================================
 953          void RS2_tx(BYTE tx_buf)
 954          {
 955   1      #if 0
                BYTE temp;  
              
                temp = S2CON;
                S2BUF = tx_buf;
                while(S2CON==temp);
                S2CON = temp;
              #endif
 963   1        while(RS2_Xbusy); 
 964   1          S2BUF=tx_buf;
 965   1          RS2_Xbusy=1;
 966   1      }
 967          
 968          #endif  // SERIAL
 969          
 970          //****************************************************************************/
 971          //      Timer 2 Interrupt                                                  
 972          //      If TH2 and TL2 are overflowed,
 973          //       .Invoke this interrupt
 974          //       .TH2 <- RCAP2H
 975          //       .TL2 <- RCAP2L
 976          //      TL2 is incremented every machine cycle
 977          //      Every machine cycle is 12*Tosc(11.0592MHz)
 978          //
 979          //      Every machine cycle = 1.085us
 980          //      Interrupt interval  
 981          //        1) REMO_RC5 
 982          //          221.34us  ( 1.085*204 )   // (256-52) (0x10000-0xff34)
 983          //
 984          //          data length: 14bit (2sync bits, 1 control bit, 11 data bits) 24,889ms
 985          //
 986          //                +----+
 987          //          1 is coded:      |    |
 988          //                   +----+   
 989          //                  T    T
 990          //
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 91  

 991          //                   +----+
 992          //          0 is coded: |    |
 993          //                      +----+    
 994          //                  T    T          T = 889us
 995          //
 996          //          *) DongYang
 997          //            209.62  ( 1.085*193 ) // (256-63) (0x10000-0xff3f)
 998          //-----------------------------------------------------------------------------
 999          //        2) REMO_NEC
1000          //          187.714us ( 1.085*173 )     // (256-83) (0x10000-0xff53)
1001          //              
1002          //****************************************************************************/
1003          //INTERRUPT(5, timer2_int)
1004          void timer2_int(void) interrupt 5 using 1     // using register block 3
1005          {
1006   1        TF2 = 0;          // clear overflow
1007   1      
1008   1        tm01++;
1009   1      
1010   1        #ifdef REMO_RC5
                {
                  BYTE  i;
              
                  i = tm01 & 0x07;
                  if( i>=1 && i<=2 )
                    RemoPhase1 = P3_2;
                  else if( i>=5 && i<=6 )
                    RemoPhase2 = P3_2;
                  else
                    ;
                  if( i==0 ) {  //every 8 tm01
                    if( RemoPhase1==RemoPhase2 ) {  // error
                      ClearRemoTimer();     
                      EnableRemoconInt();
                      return;
                    }
                    if( tm01<=(8*8) ) {       // start control system
                      RemoSystemCode <<=1;
                      if( RemoPhase1==1 && RemoPhase2==0 )
                        RemoSystemCode |=1;
                    }
                    else {              // data
                      RemoDataCode <<=1;
                      if( RemoPhase1==1 && RemoPhase2==0 )
                        RemoDataCode |=1;
                    }
                  }
                  if( tm01 > (8*14) ) {
                    RemoDataReady++;  //LJY051502 RemoDataReady = 1;        // new key
                    ClearRemoTimer();       
                    //RemoOver = 0;
                  }
                }
              
                #elif defined REMO_NEC
                
                {
                  if( RemoDataReady ) return;
              
                  switch( RemoStep ) {
              
                  case 0:
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 92  

                    if( P3_2==0 ) {
                      RemoLcnt++;
                      if( RemoLcnt==0xff ) goto RemoError;
                    }
                    else {
                      RemoHcnt = 0;
                      RemoStep++;
                    }
                    break;
              
                  case 1:
                    if( P3_2==1 ) {
                      RemoHcnt++;
                      if( RemoHcnt==0xff ) goto RemoError;
                    }
                    else {
                      if( RemoLcnt>=15*3 && RemoLcnt<=17*3 ) {
                        
                        if( RemoHcnt>=3*3 && RemoHcnt<=5*3 ) {
                          RemoStep = 3;
                          RemoDataReady = 2;
                          break;
                        }
                        else if( RemoHcnt>=7*3 && RemoHcnt<=9*3 ) {
                          RemoStep++;
                          RemoPhase = 0;
                          RemoLcnt = 0;
                          RemoNum  = 0;
                          RemoBit  = 0;
                          break;
                        }
                      }
                      else goto RemoError;
                    }
                    break;
              
                  case 2:
                    if( RemoPhase==0 ) {
                      if( P3_2==0 )         // Phase=0  Input=0
                        RemoLcnt++;
                      else {              // Phase=0  Input=1
                        RemoPhase = 1;
                        RemoHcnt = 0;
                      }
                    }
                    else {                
                      if( P3_2==1 )         // Phase=1  Input=1
                        RemoHcnt++;
                      else {              // Phase=1  Input=0
                        RemoPhase = 0;
                        if( RemoLcnt>=1 && RemoLcnt<=5 ) {
                          if( RemoHcnt<=2*3 )       // bit 0
                            RemoData[RemoNum] <<= 1;
                          else if( RemoHcnt<=4*3 ) {    // bit 1
                            RemoData[RemoNum] <<= 1;
                            RemoData[RemoNum]++;
                          }
                          else goto RemoError;
              
                          if( ++RemoBit>=8 ) {
                            RemoBit = 0;
                            if( ++RemoNum>=4 ) {
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 93  

                              RemoDataReady = 1;
                              RemoStep++;
                            }
                          }
                          RemoLcnt = 0;
              
                        }
                        else goto RemoError;
                      }
                    }
                    break;
              
                  case 3:
                    break;
                  
                  }
                  return;
              
              RemoError:
                  ClearRemoTimer();       //TimerFor208us();
                  EnableRemoconInt();
                }
              
                #endif  // REMO_NEC
1139   1      }
1140          
1141          
1142          void delay(BYTE cnt)
1143          {
1144   1        WORD ttic01;
1145   1      
1146   1        ttic01 =  ( tic01 + cnt ) % 100;
1147   1        do {
1148   2          ;
1149   2        } while( tic01 != ttic01 );
1150   1      }
1151          
1152          
1153          //=============================================================================
1154          //    Time
1155          //=============================================================================
1156          #define _24H_SECS     86400L      // 24*60*60
1157          WORD GetTime_ms(void)
1158          {
1159   1        WORD tms;
1160   1      
1161   1        tms = tic01;
1162   1        tms += ( SystemClock % 60 ) * 100;
1163   1        return tms; // in ms
1164   1      }
1165          //BYTE GetTime_H(void)
1166          //{
1167          //  return ( SystemClock / 60 / 60 ) % 24 ;
1168          //}
1169          
1170          //BYTE GetTime_M(void)
1171          //{
1172          //  return ( SystemClock / 60  ) % 60 ;
1173          //}
1174          #if 0
              BYTE GetSleepTimer(void)
              {
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 94  

                WORD val;
              
                val = SleepTimer;
                if( val ) { // already set, display rest of time
                  val = ( SleepTime >> 8 ) * 60 + ( SleepTime & 0xff );
                  val -= ( GetTime_H() * 60 + GetTime_M() );
                }
                return (BYTE)val;
              }
              
              void SetSleepTimer(BYTE stime)
              {
                SleepTimer = stime;
                if( SleepTimer==0 )
                  SleepTime = 0xffff;
                else {
                  SleepTime = GetTime_H() + ( GetTime_M() + SleepTimer ) / 60;
                  SleepTime = ( SleepTime << 8 ) | ( ( GetTime_M() + SleepTimer ) % 60 );
                }
              
                #ifdef DEBUG_TIME
                dPrintf("\r\n++(SetSleepTimer) SleepTime:0x%x__", (WORD)SleepTime);
                #endif
              }
              
              BYTE OKSleepTime(void)
              {
                if( GetTime_H() == ( SleepTime >>8 ) && 
                  GetTime_M() == ( SleepTime & 0xff ) ) {
                  SleepTimer=0;
                  SleepTime = 0xffff;
                  return 1;
                }
                return 0;
              }
              #endif
1213          WORD DiffTime_ms( WORD stime, WORD etime )
1214          {
1215   1        //#ifdef DEBUG
1216   1        //dPrintf("\r\n(DiffTime) stime:%d, etime:%d", (WORD)stime, (WORD)etime );
1217   1        //#endif
1218   1        if( etime < stime ) {     // resetted
1219   2          return etime + (6000 - stime);
1220   2        }
1221   1        else {
1222   2          return etime - stime;
1223   2        }
1224   1      }
1225          
1226          void Wait_ms(WORD Tms)
1227          {
1228   1        #define CPU_CLK_KHZ   22118
1229   1        #define CPU_SPEED     1
1230   1        #define CountStick     (1000000U/((CPU_CLK_KHZ*CPU_SPEED)/12))/20     //winbond
1231   1        #define MegawinCountStick    ((1000000U/((CPU_CLK_KHZ*CPU_SPEED)/12))/20)*8 //Megawin
1232   1          WORD count;
1233   1          while(Tms)
1234   1           {
1235   2           for(count=0; count</*CountStick*/MegawinCountStick; count++);//total 20 clock for this loop
1236   2              Tms--;
1237   2           }
1238   1      }
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 95  

1239          
1240          #ifdef AWT_ML072S
1241          #else
              BYTE TW2835Command(char _commid, char _attr0, char _attr1, char _attr2, char _attr3)
              {        
                 BYTE AttrBuf[4];
                 BYTE i,j;
                 WORD WaitCnt;
                 
                 //Kane @HS 2007 0807 Ver1.3 for camera always on
                 _attr0|=0x10;
                 _attr1|=0x10;
              #ifdef AWT_TW2835_DRAW_T_ICON  //Pinchi 20150415 add to draw T icon by TW2835 when CAM C trigger
                 if ((_commid != 0x05) && (_commid != 0x20) && (_commid != 0x21))
              #endif
                    _attr2|=0x10;
                 _attr3|=0x10;
                 //Kane @HS 2007 0807 Ver1.3 for camera always on
               //  Printf("TW2835Command\r\n",0);   //william-v1.44a-970923
                  
                switch(_commid)
                {
                      //A B C R
                  case 0:
                      case 11:
                          AttrBuf[0]=_attr0;
                          AttrBuf[1]=_attr1;
                          AttrBuf[2]=_attr2;
                          AttrBuf[3]=_attr3;
                          break;
              
                      //B A C R     
                      case 22:
                  case 25:  
                  case 1:
                          AttrBuf[0]=_attr1;
                          AttrBuf[1]=_attr0;
                          AttrBuf[2]=_attr2;
                          AttrBuf[3]=_attr3;
                          break;
              
                      //C A B R     
                      case 28:
                  case 31:  
                  case 2:
                          AttrBuf[0]=_attr2;
                          AttrBuf[1]=_attr0;
                          AttrBuf[2]=_attr1;
                          AttrBuf[3]=_attr3;
                          break;
              
                      //R A B C     
                      case 3:
                      case 8:
                    case 14:    
                          AttrBuf[0]=_attr3;
                          AttrBuf[1]=_attr0;
                          AttrBuf[2]=_attr1;
                          AttrBuf[3]=_attr2;
                          break;
              
                      //A B C R     
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 96  

                      case 20:
                  case 4:
                          AttrBuf[0]=_attr0;
                          AttrBuf[1]=_attr1;
                          AttrBuf[2]=_attr2;
                          AttrBuf[3]=_attr3;
                          break;
              
                      //C R A B      
                      case 5:
                          AttrBuf[0]=_attr2;
                          AttrBuf[1]=_attr3;
                          AttrBuf[2]=_attr0;
                          AttrBuf[3]=_attr1;
                          break;
              
                      //A R B C     
                      case 6:
                          AttrBuf[0]=_attr0;
                          AttrBuf[1]=_attr3;
                          AttrBuf[2]=_attr1;
                          AttrBuf[3]=_attr2;
                          break;
              
                     //R B A C      
                      case 7:
                          AttrBuf[0]=_attr3;
                          AttrBuf[1]=_attr1;
                          AttrBuf[2]=_attr0;
                          AttrBuf[3]=_attr2;
                          break;     
              
              // 2007.4.10 Justin add for A+C &  C+B Mode
                      //A C B R 
                      case 12:
                          AttrBuf[0]=_attr0;
                          AttrBuf[1]=_attr2;
                          AttrBuf[2]=_attr1;
                          AttrBuf[3]=_attr3;
                          break;        
              
                      //C B A R
                      case 13:
                          AttrBuf[0]=_attr2;
                          AttrBuf[1]=_attr1;
                          AttrBuf[2]=_attr0;
                          AttrBuf[3]=_attr3;
                          break;              
              
                // 2007.4.10 Justin add for A+C &  C+B Mode
              
                // 2007.4.16  Justin
                      //A B R C
                  case 9:
                    case 10:
                          AttrBuf[0]=_attr0;
                          AttrBuf[1]=_attr1;
                          AttrBuf[2]=_attr3;
                          AttrBuf[3]=_attr2;
                          break;
              
                // 2007.4.16  Justin
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 97  

                      //Andy A1.4 20090113
                      //-----------------------------
                      //R C A B
                  case 15:
                  #ifdef HTRV
                  case 34:  //  +R/C
                  #endif
                        AttrBuf[0]=_attr3;
                          AttrBuf[1]=_attr2;
                          AttrBuf[2]=_attr1;
                          AttrBuf[3]=_attr0;
                    break;
              
                      //R A C B
                  case 16:
                  case 18:           
                    AttrBuf[0]=_attr3;
                          AttrBuf[1]=_attr0;
                          AttrBuf[2]=_attr2;
                          AttrBuf[3]=_attr1;
                    break;
              
                      //R B C A
                  case 17:
                  case 19:
                    AttrBuf[0]=_attr3;
                          AttrBuf[1]=_attr1;
                          AttrBuf[2]=_attr2;
                          AttrBuf[3]=_attr0;
                    break;
              
                      //A C R B
                  case 21:
                      AttrBuf[0]=_attr0;
                          AttrBuf[1]=_attr2;
                          AttrBuf[2]=_attr3;
                          AttrBuf[3]=_attr1;
                    break;
              
                  //B C R A
                  case 23:
                    case 27:
                          AttrBuf[0]=_attr1;
                          AttrBuf[1]=_attr2;
                          AttrBuf[2]=_attr3;
                          AttrBuf[3]=_attr0;
                    break;
              
                      //B R A C
                  case 24:
                    AttrBuf[0]=_attr1;
                          AttrBuf[1]=_attr3;
                          AttrBuf[2]=_attr0;
                          AttrBuf[3]=_attr2;
                    break;
              
                      //B A R C
                  case 26:
                    AttrBuf[0]=_attr1;
                          AttrBuf[1]=_attr0;
                          AttrBuf[2]=_attr3;
                          AttrBuf[3]=_attr2;
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 98  

                    break;
              
                      //C B R A
                  case 29:
                  case 33:
                    AttrBuf[0]=_attr2;
                          AttrBuf[1]=_attr1;
                          AttrBuf[2]=_attr3;
                          AttrBuf[3]=_attr0;
                    break;
              
                  //C R A B
                  case 30:
                    AttrBuf[0]=_attr2;
                          AttrBuf[1]=_attr3;
                          AttrBuf[2]=_attr0;
                          AttrBuf[3]=_attr1;
                    break;
              
                      //C A R B
                  case 32:      
                    AttrBuf[0]=_attr2;
                          AttrBuf[1]=_attr0;
                          AttrBuf[2]=_attr3;
                          AttrBuf[3]=_attr1;
                    break;
                 }
              
                  for(i=0;i<BUF_MAX;i++) {RS_buf2[i]='\0';RS_buf[i]='\0';} // cls RX buffer
              
              #if 1//ryan@20170906
              
              
              if((InputSelection==CH_AV)&&(TriggerFlag==0))///減少AV to CAM 時間延長2S  //ryan@20170915
              {
                 Printf(CommTable[_commid], AttrBuf[0], AttrBuf[1], AttrBuf[2], AttrBuf[3]); 
              }
              else
              {
                  
                  for(j=0;j<3;j++)
                  {       
              
                  Printf(CommTable[_commid], AttrBuf[0], AttrBuf[1], AttrBuf[2], AttrBuf[3]);     
                      WaitCnt=GetTime_ms();
                  while(abs(WaitCnt-GetTime_ms())<40);
                  {
                      
                    for(i=0;i<BUF_MAX;i++) 
                        {  
                          if(RS_buf2[i]=='A' )
                          {
                          
                        //if( RS_buf2[(i+1)%8]=='C' &&  RS_buf2[(i+2)%8]=='K'  ) ///mask by ryan@20170906
                        if( RS_buf2[(i+1)%(BUF_MAX)]=='C' &&  RS_buf2[(i+2)%(BUF_MAX)]=='K'  ) /// ryan@20170906
                        return TRUE;
                      
                          }
                    
                          }
                  
                } 
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 99  

                Wait_ms(200);         
                  
                }
              }
              
              #else
              
              
              
                  for(j=0;j<3;j++)
                  {       
                      Printf(CommTable[_commid], AttrBuf[0], AttrBuf[1], AttrBuf[2], AttrBuf[3]); 
                      WaitCnt=GetTime_ms();
                    while(abs(WaitCnt-GetTime_ms())<40);
                    {
                    for(i=0;i<BUF_MAX;i++) 
                        {  
                          if(RS_buf2[i]=='A' )
                          {
                        if( RS_buf2[(i+1)%8]=='C' &&  RS_buf2[(i+2)%8]=='K'  ) 
                          return TRUE;
                          }   
                          }
                  }
                    Wait_ms(200);         
                }
                
              #endif
              
                return FALSE;
                 
              }
              #endif
1520          
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 100 

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com0066 (BEGIN)
0000         L?0103:
0000 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
0003         L?0104:
0003 F0                MOVX    @DPTR,A
0004 A3                INC     DPTR
0005 EF                MOV     A,R7
0006 F0                MOVX    @DPTR,A
0007 7BFF              MOV     R3,#0FFH
0009 22                RET     
000A         L?0105:
000A         L?0106:
000A E0                MOVX    A,@DPTR
000B D3                SETB    C
000C 9401              SUBB    A,#01H
000E 7480              MOV     A,#080H
0010 9480              SUBB    A,#080H
0012 22                RET     
             ; FUNCTION Com0066 (END)

             ; FUNCTION main_init (BEGIN)
                                           ; SOURCE LINE # 289
                                           ; SOURCE LINE # 290
                                           ; SOURCE LINE # 296
0000 7B10              MOV     R3,#010H
0002 7DE0              MOV     R5,#0E0H
0004 7F8A              MOV     R7,#08AH
0006 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 308
0009 120000      E     LCALL   GetFWRevEE
000C 900000      R     MOV     DPTR,#rev
000F EE                MOV     A,R6
                                           ; SOURCE LINE # 309
0010 120000      R     LCALL   L?0104
0013 7A00        R     MOV     R2,#HIGH ?SC_1750
0015 7900        R     MOV     R1,#LOW ?SC_1750
0017 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
001A EE                MOV     A,R6
001B F0                MOVX    @DPTR,A
001C A3                INC     DPTR
001D EF                MOV     A,R7
001E F0                MOVX    @DPTR,A
001F 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 311
0022 120000      E     LCALL   GetFWRevEE
0025 EF                MOV     A,R7
0026 6410              XRL     A,#010H
0028 7003              JNZ     ?C0087
002A EE                MOV     A,R6
002B 6402              XRL     A,#02H
002D         ?C0087:
002D 6028              JZ      ?C0001
                                           ; SOURCE LINE # 312
                                           ; SOURCE LINE # 313
002F 7BFF              MOV     R3,#0FFH
0031 7A00        R     MOV     R2,#HIGH ?SC_1765
0033 7900        R     MOV     R1,#LOW ?SC_1765
0035 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
0038 7402              MOV     A,#02H
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 101 

003A F0                MOVX    @DPTR,A
003B A3                INC     DPTR
003C 7410              MOV     A,#010H
003E F0                MOVX    @DPTR,A
003F 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 314
0042 7F10              MOV     R7,#010H
0044 7E02              MOV     R6,#02H
0046 120000      E     LCALL   _SaveFWRevEE
                                           ; SOURCE LINE # 315
0049 120000      E     LCALL   GetFWRevEE
004C EE                MOV     A,R6
004D 120000      R     LCALL   L?0103
0050 7A00        R     MOV     R2,#HIGH ?SC_1765
0052 7900        R     MOV     R1,#LOW ?SC_1765
0054 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 316
0057         ?C0001:
                                           ; SOURCE LINE # 320
0057 120000      E     LCALL   GetFWRevEE
005A EF                MOV     A,R7
005B 6410              XRL     A,#010H
005D 7003              JNZ     ?C0088
005F EE                MOV     A,R6
0060 6402              XRL     A,#02H
0062         ?C0088:
0062 7033              JNZ     ?C0002
                                           ; SOURCE LINE # 321
                                           ; SOURCE LINE # 322
0064 900000      R     MOV     DPTR,#rev
0067 E0                MOVX    A,@DPTR
0068 6402              XRL     A,#02H
006A 7004              JNZ     ?C0089
006C A3                INC     DPTR
006D E0                MOVX    A,@DPTR
006E 6410              XRL     A,#010H
0070         ?C0089:
0070 601B              JZ      ?C0003
                                           ; SOURCE LINE # 323
                                           ; SOURCE LINE # 324
0072 900000      E     MOV     DPTR,#DebugLevel
0075 E0                MOVX    A,@DPTR
0076 FF                MOV     R7,A
0077 120000      E     LCALL   _SaveDebugLevelEE
                                           ; SOURCE LINE # 327
007A 7F01              MOV     R7,#01H
007C 120000      E     LCALL   _SaveInputSelectionEE
                                           ; SOURCE LINE # 328
007F 120000      E     LCALL   ClearBasicEE
                                           ; SOURCE LINE # 329
0082 7BFF              MOV     R3,#0FFH
0084 7A00        R     MOV     R2,#HIGH ?SC_1780
0086 7900        R     MOV     R1,#LOW ?SC_1780
0088 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 334
008B 802C              SJMP    ?C0005
008D         ?C0003:
                                           ; SOURCE LINE # 336
                                           ; SOURCE LINE # 338
008D 120000      E     LCALL   GetDebugLevelEE
0090 900000      E     MOV     DPTR,#DebugLevel
0093 EF                MOV     A,R7
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 102 

0094 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 340
                                           ; SOURCE LINE # 341
0095 8022              SJMP    ?C0005
0097         ?C0002:
                                           ; SOURCE LINE # 343
                                           ; SOURCE LINE # 344
0097 7BFF              MOV     R3,#0FFH
0099 7A00        R     MOV     R2,#HIGH ?SC_1838
009B 7900        R     MOV     R1,#LOW ?SC_1838
009D 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 345
00A0 7BFF              MOV     R3,#0FFH
00A2 7A00        R     MOV     R2,#HIGH ?SC_1865
00A4 7900        R     MOV     R1,#LOW ?SC_1865
00A6 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 346
00A9 900000      E     MOV     DPTR,#DebugLevel
00AC 74FF              MOV     A,#0FFH
00AE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 347
00AF 7F01              MOV     R7,#01H
00B1 120000      E     LCALL   _SetVInputStd
                                           ; SOURCE LINE # 352
00B4 E4                CLR     A
00B5 FF                MOV     R7,A
00B6 020000      E     LJMP    _LCDPowerON
                                           ; SOURCE LINE # 354
00B9         ?C0005:
                                           ; SOURCE LINE # 361
00B9 7F08              MOV     R7,#08H
00BB 7E00              MOV     R6,#00H
00BD 120000      E     LCALL   _ReadEEP
00C0 900000      E     MOV     DPTR,#VInputStdDetectMode
00C3 EF                MOV     A,R7
00C4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 362
00C5 6004              JZ      ?C0007
                                           ; SOURCE LINE # 363
00C7 E0                MOVX    A,@DPTR
00C8 FF                MOV     R7,A
00C9 8002              SJMP    ?C0096
00CB         ?C0007:
                                           ; SOURCE LINE # 365
00CB 7F01              MOV     R7,#01H
00CD         ?C0096:
00CD 120000      E     LCALL   _SetVInputStd
00D0         ?C0008:
                                           ; SOURCE LINE # 367
00D0 120000      E     LCALL   SetPossibleAutoDetectStdEE
                                           ; SOURCE LINE # 370
00D3 900000      E     MOV     DPTR,#InputSelection
00D6 74FE              MOV     A,#0FEH
00D8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 375
00D9 120000      E     LCALL   Change_OSDColorLookup
                                           ; SOURCE LINE # 376
00DC 120000      E     LCALL   DownloadUDFont
                                           ; SOURCE LINE # 379
00DF 7F06              MOV     R7,#06H
00E1 120000      E     LCALL   _DisplayInformation
                                           ; SOURCE LINE # 380
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 103 

00E4 7F0A              MOV     R7,#0AH
00E6 120000      R     LCALL   _delay
                                           ; SOURCE LINE # 381
00E9 120000      E     LCALL   ClearGAUGEINFO
                                           ; SOURCE LINE # 392
00EC 120000      E     LCALL   Prompt
                                           ; SOURCE LINE # 396
00EF 7DFF              MOV     R5,#0FFH
00F1 120000      R     LCALL   L?0107
                                           ; SOURCE LINE # 397
00F4 7D82              MOV     R5,#082H
00F6 120000      R     LCALL   L?0107
                                           ; SOURCE LINE # 399
00F9 E4                CLR     A
00FA FB                MOV     R3,A
00FB 7DFF              MOV     R5,#0FFH
00FD 7F8A              MOV     R7,#08AH
00FF 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 403
0102 7BFF              MOV     R3,#0FFH
0104 7DD0              MOV     R5,#0D0H
0106 7F8A              MOV     R7,#08AH
0108 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 404
010B 7BFF              MOV     R3,#0FFH
010D 7DD1              MOV     R5,#0D1H
010F 7F8A              MOV     R7,#08AH
0111 120000      E     LCALL   _WriteI2C
                                           ; SOURCE LINE # 405
0114         ?C0006:
0114 22                RET     
0115         L?0107:
0115 7B01              MOV     R3,#01H
0117 7F8A              MOV     R7,#08AH
0119 120000      E     LCALL   _WriteI2C
011C 22                RET     
             ; FUNCTION main_init (END)

             ; FUNCTION InitCPU (BEGIN)
                                           ; SOURCE LINE # 410
                                           ; SOURCE LINE # 411
                                           ; SOURCE LINE # 412
0000 75F687            MOV     CHPENR,#087H
                                           ; SOURCE LINE # 413
0003 75F659            MOV     CHPENR,#059H
                                           ; SOURCE LINE # 414
0006 75BF10            MOV     CHPCON,#010H
                                           ; SOURCE LINE # 415
0009 E4                CLR     A
000A F5F6              MOV     CHPENR,A
                                           ; SOURCE LINE # 419
000C 758DF4            MOV     TH1,#0F4H
                                           ; SOURCE LINE # 426
000F 759850            MOV     SCON,#050H
                                           ; SOURCE LINE # 428
0012 758922            MOV     TMOD,#022H
                                           ; SOURCE LINE # 430
0015 758855            MOV     TCON,#055H
                                           ; SOURCE LINE # 434
0018 758A40            MOV     TL0,#040H
001B 758C40            MOV     TH0,#040H
                                           ; SOURCE LINE # 436
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 104 

001E 758780            MOV     PCON,#080H
                                           ; SOURCE LINE # 437
0021 75B802            MOV     IP,#02H
                                           ; SOURCE LINE # 441
0024 75A892            MOV     IE,#092H
                                           ; SOURCE LINE # 444
0027 D299              SETB    TI
                                           ; SOURCE LINE # 445
0029 D2AC              SETB    ES
                                           ; SOURCE LINE # 451
002B F5C8              MOV     T2CON,A
                                           ; SOURCE LINE # 452
002D C2CA              CLR     TR2
                                           ; SOURCE LINE # 453
002F D2AD              SETB    ET2
                                           ; SOURCE LINE # 459
0031 75AA50            MOV     S2CON,#050H
                                           ; SOURCE LINE # 460
0034 75BAF4            MOV     S2BRT,#0F4H
                                           ; SOURCE LINE # 463
0037 43A618            ORL     AUXR2,#018H
                                           ; SOURCE LINE # 466
003A 43AD10            ORL     AUXIE,#010H
                                           ; SOURCE LINE # 468
003D C200        R     CLR     RS2_Xbusy
                                           ; SOURCE LINE # 471
003F 75DE42            MOV     CCAPM4,#042H
                                           ; SOURCE LINE # 472
0042 43D840            ORL     CCON,#040H
                                           ; SOURCE LINE # 479
0045 F5B1              MOV     P3M0,A
                                           ; SOURCE LINE # 480
0047 75B220            MOV     P3M1,#020H
                                           ; SOURCE LINE # 484
004A F500        R     MOV     RS_out,A
004C F500        R     MOV     RS_in,A
                                           ; SOURCE LINE # 486
004E 22                RET     
             ; FUNCTION InitCPU (END)

             ; FUNCTION timer0_int (BEGIN)
0000 C0E0              PUSH    ACC
0002 C083              PUSH    DPH
0004 C082              PUSH    DPL
0006 C0D0              PUSH    PSW
0008 75D008            MOV     PSW,#08H
                                           ; SOURCE LINE # 504
                                           ; SOURCE LINE # 508
000B 0500        R     INC     tm001
                                           ; SOURCE LINE # 511
000D 900000      R     MOV     DPTR,#Time5ms
0010 E0                MOVX    A,@DPTR
0011 6002              JZ      ?C0010
                                           ; SOURCE LINE # 512
0013 14                DEC     A
0014 F0                MOVX    @DPTR,A
0015         ?C0010:
                                           ; SOURCE LINE # 513
0015 900000      R     MOV     DPTR,#Time5ms
0018 E0                MOVX    A,@DPTR
0019 7033              JNZ     ?C0011
                                           ; SOURCE LINE # 514
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 105 

                                           ; SOURCE LINE # 518
001B E5A0              MOV     A,P2
001D 5460              ANL     A,#060H
001F C4                SWAP    A
0020 13                RRC     A
0021 5403              ANL     A,#03H
0023 FF                MOV     R7,A
;---- Variable 'TempKey' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 520
0024 900000      R     MOV     DPTR,#updn_reg+03H
0027 E0                MOVX    A,@DPTR
0028 6F                XRL     A,R7
0029 6023              JZ      ?C0011
                                           ; SOURCE LINE # 521
                                           ; SOURCE LINE # 522
002B 900000      R     MOV     DPTR,#updn_reg+01H
002E E0                MOVX    A,@DPTR
002F 900000      R     MOV     DPTR,#updn_reg
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 523
0033 900000      R     MOV     DPTR,#updn_reg+02H
0036 E0                MOVX    A,@DPTR
0037 900000      R     MOV     DPTR,#updn_reg+01H
003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 524
003B 900000      R     MOV     DPTR,#updn_reg+03H
003E E0                MOVX    A,@DPTR
003F 900000      R     MOV     DPTR,#updn_reg+02H
0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 525
0043 A3                INC     DPTR
0044 EF                MOV     A,R7
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 526
0046 D200        R     SETB    ChangeKey
                                           ; SOURCE LINE # 530
0048 900000      R     MOV     DPTR,#Time5ms
004B 7428              MOV     A,#028H
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 533
                                           ; SOURCE LINE # 534
004E         ?C0011:
                                           ; SOURCE LINE # 542
004E D3                SETB    C
004F E500        R     MOV     A,tm001
0051 9460              SUBB    A,#060H
0053 7480              MOV     A,#080H
0055 9480              SUBB    A,#080H
0057 5003              JNC     $ + 5H
0059 020000      R     LJMP    ?C0033
                                           ; SOURCE LINE # 545
005C 0500        R     INC     stopWatch+01H
005E E500        R     MOV     A,stopWatch+01H
0060 7002              JNZ     ?C0090
0062 0500        R     INC     stopWatch
0064         ?C0090:
                                           ; SOURCE LINE # 546
0064 750000      R     MOV     tm001,#00H
                                           ; SOURCE LINE # 547
0067 0500        R     INC     tic01
                                           ; SOURCE LINE # 548
0069 900000      E     MOV     DPTR,#Backlight_TO
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 106 

006C 120000      R     LCALL   L?0105
006F 4003              JC      ?C0014
0071 E0                MOVX    A,@DPTR
0072 14                DEC     A
0073 F0                MOVX    @DPTR,A
0074         ?C0014:
                                           ; SOURCE LINE # 550
0074 E500        R     MOV     A,tic01
0076 6464              XRL     A,#064H
0078 6003              JZ      $ + 5H
007A 020000      R     LJMP    ?C0015
                                           ; SOURCE LINE # 551
                                           ; SOURCE LINE # 552
007D 900000      E     MOV     DPTR,#SEQTime
0080 E0                MOVX    A,@DPTR
0081 C3                CLR     C
0082 94FF              SUBB    A,#0FFH
0084 7480              MOV     A,#080H
0086 9480              SUBB    A,#080H
0088 5003              JNC     ?C0016
008A E0                MOVX    A,@DPTR
008B 04                INC     A
008C F0                MOVX    @DPTR,A
008D         ?C0016:
                                           ; SOURCE LINE # 553
008D E500        R     MOV     A,SystemClock+03H
008F 2401              ADD     A,#01H
0091 FF                MOV     R7,A
0092 E4                CLR     A
0093 3500        R     ADDC    A,SystemClock+02H
0095 FE                MOV     R6,A
0096 E4                CLR     A
0097 3500        R     ADDC    A,SystemClock+01H
0099 FD                MOV     R5,A
009A E4                CLR     A
009B 3500        R     ADDC    A,SystemClock
009D 8F00        R     MOV     SystemClock+03H,R7
009F 8E00        R     MOV     SystemClock+02H,R6
00A1 8D00        R     MOV     SystemClock+01H,R5
00A3 F500        R     MOV     SystemClock,A
                                           ; SOURCE LINE # 554
00A5 750000      R     MOV     tic01,#00H
                                           ; SOURCE LINE # 558
00A8 900000      E     MOV     DPTR,#displayhold_flag
00AB 120000      R     LCALL   L?0105
00AE 4003              JC      ?C0017
                                           ; SOURCE LINE # 559
00B0 E0                MOVX    A,@DPTR
00B1 14                DEC     A
00B2 F0                MOVX    @DPTR,A
00B3         ?C0017:
                                           ; SOURCE LINE # 561
00B3 900000      E     MOV     DPTR,#CAM_QUAD_TO
00B6 120000      R     LCALL   L?0106
00B9 4003              JC      ?C0018
                                           ; SOURCE LINE # 562
00BB E0                MOVX    A,@DPTR
00BC 14                DEC     A
00BD F0                MOVX    @DPTR,A
00BE         ?C0018:
                                           ; SOURCE LINE # 565
00BE 900000      E     MOV     DPTR,#second
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 107 

00C1 E0                MOVX    A,@DPTR
00C2 04                INC     A
00C3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 567
00C4 900000      E     MOV     DPTR,#lock_keycnt
00C7 E0                MOVX    A,@DPTR
00C8 D3                SETB    C
00C9 9400              SUBB    A,#00H
00CB 7480              MOV     A,#080H
00CD 9480              SUBB    A,#080H
00CF 4003              JC      ?C0019
                                           ; SOURCE LINE # 568
00D1 E0                MOVX    A,@DPTR
00D2 14                DEC     A
00D3 F0                MOVX    @DPTR,A
00D4         ?C0019:
                                           ; SOURCE LINE # 570
00D4 300006      E     JNB     FormatStart,?C0020
                                           ; SOURCE LINE # 571
00D7 900000      R     MOV     DPTR,#FormatWait
00DA E0                MOVX    A,@DPTR
00DB 04                INC     A
00DC F0                MOVX    @DPTR,A
00DD         ?C0020:
                                           ; SOURCE LINE # 572
00DD 300006      E     JNB     PowerDownStart,?C0021
                                           ; SOURCE LINE # 573
00E0 900000      R     MOV     DPTR,#PowerDownWait
00E3 E0                MOVX    A,@DPTR
00E4 04                INC     A
00E5 F0                MOVX    @DPTR,A
00E6         ?C0021:
                                           ; SOURCE LINE # 574
00E6 900000      E     MOV     DPTR,#second
00E9 E0                MOVX    A,@DPTR
00EA 643C              XRL     A,#03CH
00EC 7007              JNZ     ?C0022
                                           ; SOURCE LINE # 575
                                           ; SOURCE LINE # 576
00EE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 577
00EF 900000      E     MOV     DPTR,#minute
00F2 E0                MOVX    A,@DPTR
00F3 04                INC     A
00F4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 578
00F5         ?C0022:
                                           ; SOURCE LINE # 580
00F5 900000      E     MOV     DPTR,#minute
00F8 E0                MOVX    A,@DPTR
00F9 643C              XRL     A,#03CH
00FB 7007              JNZ     ?C0023
                                           ; SOURCE LINE # 581
                                           ; SOURCE LINE # 582
00FD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 583
00FE 900000      E     MOV     DPTR,#hour
0101 E0                MOVX    A,@DPTR
0102 04                INC     A
0103 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 584
0104         ?C0023:
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 108 

                                           ; SOURCE LINE # 586
0104 900000      E     MOV     DPTR,#hour
0107 E0                MOVX    A,@DPTR
0108 6418              XRL     A,#018H
010A 7007              JNZ     ?C0024
                                           ; SOURCE LINE # 587
                                           ; SOURCE LINE # 588
010C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 589
010D 900000      E     MOV     DPTR,#day
0110 E0                MOVX    A,@DPTR
0111 04                INC     A
0112 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 590
0113         ?C0024:
                                           ; SOURCE LINE # 592
0113 E500        R     MOV     A,Key
0115 900000      R     MOV     DPTR,#keyticSec
0118 6005              JZ      ?C0025
                                           ; SOURCE LINE # 593
011A E0                MOVX    A,@DPTR
011B 04                INC     A
011C F0                MOVX    @DPTR,A
011D 8002              SJMP    ?C0015
011F         ?C0025:
                                           ; SOURCE LINE # 595
011F E4                CLR     A
0120 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 602
0121         ?C0015:
                                           ; SOURCE LINE # 605
0121 E500        R     MOV     A,tic_pc+01H
0123 F4                CPL     A
0124 7003              JNZ     ?C0091
0126 E500        R     MOV     A,tic_pc
0128 F4                CPL     A
0129         ?C0091:
0129 6008              JZ      ?C0027
                                           ; SOURCE LINE # 606
012B 0500        R     INC     tic_pc+01H
012D E500        R     MOV     A,tic_pc+01H
012F 7002              JNZ     ?C0092
0131 0500        R     INC     tic_pc
0133         ?C0092:
0133         ?C0027:
                                           ; SOURCE LINE # 609
0133 E5A0              MOV     A,P2
0135 F4                CPL     A
0136 549C              ANL     A,#09CH
0138 602E              JZ      ?C0028
                                           ; SOURCE LINE # 610
013A AF00        R     MOV     R7,keytic
013C 7E00              MOV     R6,#00H
013E EF                MOV     A,R7
013F 6403              XRL     A,#03H
0141 700D              JNZ     ?C0029
                                           ; SOURCE LINE # 611
0143 E5A0              MOV     A,P2
0145 F4                CPL     A
0146 549C              ANL     A,#09CH
0148 F500        R     MOV     Key,A
                                           ; SOURCE LINE # 612
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 109 

014A C200        R     CLR     RepeatKey
                                           ; SOURCE LINE # 613
014C D200        R     SETB    KeyReady
                                           ; SOURCE LINE # 614
014E 8014              SJMP    ?C0030
0150         ?C0029:
                                           ; SOURCE LINE # 615
0150 EF                MOV     A,R7
0151 6464              XRL     A,#064H
0153 4E                ORL     A,R6
0154 700E              JNZ     ?C0030
                                           ; SOURCE LINE # 616
0156 E5A0              MOV     A,P2
0158 F4                CPL     A
0159 549C              ANL     A,#09CH
015B F500        R     MOV     Key,A
                                           ; SOURCE LINE # 617
015D D200        R     SETB    RepeatKey
                                           ; SOURCE LINE # 618
015F D200        R     SETB    KeyReady
                                           ; SOURCE LINE # 619
0161 750050      R     MOV     keytic,#050H
                                           ; SOURCE LINE # 620
0164         ?C0030:
                                           ; SOURCE LINE # 621
0164 0500        R     INC     keytic
                                           ; SOURCE LINE # 622
0166 8006              SJMP    ?C0033
0168         ?C0028:
                                           ; SOURCE LINE # 624
                                           ; SOURCE LINE # 625
0168 750000      R     MOV     keytic,#00H
                                           ; SOURCE LINE # 626
016B 750000      R     MOV     Key,#00H
                                           ; SOURCE LINE # 627
                                           ; SOURCE LINE # 629
                                           ; SOURCE LINE # 630
016E         ?C0033:
016E D0D0              POP     PSW
0170 D082              POP     DPL
0172 D083              POP     DPH
0174 D0E0              POP     ACC
0176 32                RETI    
             ; FUNCTION timer0_int (END)

             ; FUNCTION InitVars (BEGIN)
                                           ; SOURCE LINE # 635
                                           ; SOURCE LINE # 636
                                           ; SOURCE LINE # 637
0000 E4                CLR     A
0001 F500        R     MOV     SystemClock+03H,A
0003 F500        R     MOV     SystemClock+02H,A
0005 F500        R     MOV     SystemClock+01H,A
0007 F500        R     MOV     SystemClock,A
                                           ; SOURCE LINE # 646
0009 900000      E     MOV     DPTR,#DebugLevel
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 651
000D 7F64              MOV     R7,#064H
000F 120000      R     LCALL   _delay
                                           ; SOURCE LINE # 652
0012 C200        E     CLR     ?PowerDown_XTAL?BIT
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 110 

0014 120000      E     LCALL   PowerDown_XTAL
                                           ; SOURCE LINE # 654
0017 D2B4              SETB    P3_4
                                           ; SOURCE LINE # 655
0019 7F01              MOV     R7,#01H
001B 020000      R     LJMP    _delay
             ; FUNCTION InitVars (END)

             ; FUNCTION InitTechwell (BEGIN)
                                           ; SOURCE LINE # 661
                                           ; SOURCE LINE # 662
                                           ; SOURCE LINE # 679
0000 120000      R     LCALL   L?0101
0003 EF                MOV     A,R7
0004 24DE              ADD     A,#0DEH
0006 6010              JZ      ?C0037
0008 24D9              ADD     A,#0D9H
000A 6014              JZ      ?C0038
000C 2428              ADD     A,#028H
000E 7019              JNZ     ?C0039
                                           ; SOURCE LINE # 680
0010         ?C0036:
0010 7BFF              MOV     R3,#0FFH
0012 7A00        R     MOV     R2,#HIGH ?SC_1881
0014 7900        R     MOV     R1,#LOW ?SC_1881
0016 800E              SJMP    ?C0098
                                           ; SOURCE LINE # 681
0018         ?C0037:
0018 7BFF              MOV     R3,#0FFH
001A 7A00        R     MOV     R2,#HIGH ?SC_1888
001C 7900        R     MOV     R1,#LOW ?SC_1888
001E         ?C0097:
001E 8006              SJMP    ?C0098
                                           ; SOURCE LINE # 682
0020         ?C0038:
0020 7BFF              MOV     R3,#0FFH
0022 7A00        R     MOV     R2,#HIGH ?SC_1896
0024 7900        R     MOV     R1,#LOW ?SC_1896
0026         ?C0098:
0026 020000      E     LJMP    _Puts
                                           ; SOURCE LINE # 683
0029         ?C0039:
0029 120000      R     LCALL   L?0100
002C 7A00        R     MOV     R2,#HIGH ?SC_1903
002E 7900        R     MOV     R1,#LOW ?SC_1903
0030 120000      E     LCALL   _Printf
0033         ?C0040:
                                           ; SOURCE LINE # 684
                                           ; SOURCE LINE # 686
0033 120000      R     LCALL   RS_ready
0036 EF                MOV     A,R7
0037 7027              JNZ     ?C0041
                                           ; SOURCE LINE # 689
0039 FD                MOV     R5,A
003A 7F8A              MOV     R7,#08AH
003C 120000      E     LCALL   _ReadI2C
003F E4                CLR     A
0040 120000      R     LCALL   L?0103
0043 7A00        R     MOV     R2,#HIGH ?SC_1922
0045 7900        R     MOV     R1,#LOW ?SC_1922
0047 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 690
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 111 

004A 7F63              MOV     R7,#063H
004C 120000      R     LCALL   _delay
                                           ; SOURCE LINE # 691
004F 120000      R     LCALL   L?0101
0052 EF                MOV     A,R7
0053 60DE              JZ      ?C0040
                                           ; SOURCE LINE # 692
0055 E4                CLR     A
0056 FD                MOV     R5,A
0057 7F8A              MOV     R7,#08AH
0059 120000      E     LCALL   _ReadI2C
005C EF                MOV     A,R7
005D F4                CPL     A
005E 60D3              JZ      ?C0040
                                           ; SOURCE LINE # 693
                                           ; SOURCE LINE # 694
0060         ?C0041:
                                           ; SOURCE LINE # 696
0060 7F63              MOV     R7,#063H
0062 120000      R     LCALL   _delay
                                           ; SOURCE LINE # 697
0065 7F63              MOV     R7,#063H
0067 120000      R     LCALL   _delay
                                           ; SOURCE LINE # 698
006A 120000      R     LCALL   L?0100
006D 7A00        R     MOV     R2,#HIGH ?SC_1945
006F 7900        R     MOV     R1,#LOW ?SC_1945
0071 120000      E     LCALL   _Printf
                                           ; SOURCE LINE # 699
                                           ; SOURCE LINE # 700
                                           ; SOURCE LINE # 706
0074         ?C0045:
0074 22                RET     
0075         L?0100:
0075 E4                CLR     A
0076 FD                MOV     R5,A
0077 7F8A              MOV     R7,#08AH
0079 120000      E     LCALL   _ReadI2C
007C 900000      E     MOV     DPTR,#?_Printf?BYTE+03H
007F E4                CLR     A
0080 F0                MOVX    @DPTR,A
0081 A3                INC     DPTR
0082 EF                MOV     A,R7
0083 F0                MOVX    @DPTR,A
0084 7BFF              MOV     R3,#0FFH
0086 22                RET     
0087         L?0101:
0087 E4                CLR     A
0088 FD                MOV     R5,A
0089 7F8A              MOV     R7,#08AH
008B 120000      E     LCALL   _ReadI2C
008E 22                RET     
             ; FUNCTION InitTechwell (END)

             ; FUNCTION _PowerLED (BEGIN)
                                           ; SOURCE LINE # 712
;---- Variable 'flag' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 713
                                           ; SOURCE LINE # 717
0000 EF                MOV     A,R7
0001 FD                MOV     R5,A
0002 7C00              MOV     R4,#00H
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 112 

0004 6401              XRL     A,#01H
0006 7005              JNZ     ?C0046
                                           ; SOURCE LINE # 719
0008 53E8FE            ANL     P4,#0FEH
                                           ; SOURCE LINE # 720
                                           ; SOURCE LINE # 722
000B 8014              SJMP    ?C0099
000D         ?C0046:
                                           ; SOURCE LINE # 723
000D ED                MOV     A,R5
000E 4C                ORL     A,R4
000F 7007              JNZ     ?C0048
                                           ; SOURCE LINE # 724
                                           ; SOURCE LINE # 726
0011 43E801            ORL     P4,#01H
                                           ; SOURCE LINE # 727
0014 53E8FD            ANL     P4,#0FDH
                                           ; SOURCE LINE # 729
0017 22                RET     
0018         ?C0048:
                                           ; SOURCE LINE # 730
0018 ED                MOV     A,R5
0019 6402              XRL     A,#02H
001B 4C                ORL     A,R4
001C 7006              JNZ     ?C0051
                                           ; SOURCE LINE # 731
                                           ; SOURCE LINE # 733
001E 43E801            ORL     P4,#01H
                                           ; SOURCE LINE # 734
0021         ?C0099:
0021 43E802            ORL     P4,#02H
                                           ; SOURCE LINE # 736
                                           ; SOURCE LINE # 737
0024         ?C0051:
0024 22                RET     
             ; FUNCTION _PowerLED (END)

             ; FUNCTION ext1_int (BEGIN)
                                           ; SOURCE LINE # 746
                                           ; SOURCE LINE # 748
0000 C2AA              CLR     EX1
                                           ; SOURCE LINE # 749
0002 32                RETI    
             ; FUNCTION ext1_int (END)

             ; FUNCTION serial_int (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0D0              PUSH    PSW
0004 75D008            MOV     PSW,#08H
                                           ; SOURCE LINE # 864
                                           ; SOURCE LINE # 870
0007 309822            JNB     RI,?C0053
                                           ; SOURCE LINE # 871
000A C298              CLR     RI
                                           ; SOURCE LINE # 872
000C AF99              MOV     R7,SBUF
000E 7400        R     MOV     A,#LOW RS_buf
0010 2500        R     ADD     A,RS_in
0012 F8                MOV     R0,A
0013 EF                MOV     A,R7
0014 F6                MOV     @R0,A
0015 7400        R     MOV     A,#LOW RS_buf2
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 113 

0017 2500        R     ADD     A,RS_in
0019 F8                MOV     R0,A
001A A60F              MOV     @R0,AR7
                                           ; SOURCE LINE # 874
001C 0500        R     INC     RS_in
                                           ; SOURCE LINE # 875
001E C3                CLR     C
001F E500        R     MOV     A,RS_in
0021 9414              SUBB    A,#014H
0023 7480              MOV     A,#080H
0025 9480              SUBB    A,#080H
0027 4003              JC      ?C0053
0029 750000      R     MOV     RS_in,#00H
                                           ; SOURCE LINE # 876
002C         ?C0053:
                                           ; SOURCE LINE # 878
002C 309904            JNB     TI,?C0056
                                           ; SOURCE LINE # 879
002F C299              CLR     TI
                                           ; SOURCE LINE # 880
0031 C200        R     CLR     RS_Xbusy
                                           ; SOURCE LINE # 881
                                           ; SOURCE LINE # 882
0033         ?C0056:
0033 D0D0              POP     PSW
0035 D0E0              POP     ACC
0037 32                RETI    
             ; FUNCTION serial_int (END)

             ; FUNCTION serial2_int (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0D0              PUSH    PSW
0004 75D008            MOV     PSW,#08H
                                           ; SOURCE LINE # 886
                                           ; SOURCE LINE # 891
0007 E5AA              MOV     A,S2CON
0009 5401              ANL     A,#01H
000B 6401              XRL     A,#01H
000D 701A              JNZ     ?C0057
                                           ; SOURCE LINE # 892
                                           ; SOURCE LINE # 894
000F 53AAFE            ANL     S2CON,#0FEH
                                           ; SOURCE LINE # 895
0012 7400        R     MOV     A,#LOW DVR_buf
0014 2500        R     ADD     A,RS2_in
0016 F8                MOV     R0,A
0017 A69A              MOV     @R0,S2BUF
                                           ; SOURCE LINE # 897
0019 0500        R     INC     RS2_in
                                           ; SOURCE LINE # 898
001B C3                CLR     C
001C E500        R     MOV     A,RS2_in
001E 9408              SUBB    A,#08H
0020 7480              MOV     A,#080H
0022 9480              SUBB    A,#080H
0024 4003              JC      ?C0057
0026 750000      R     MOV     RS2_in,#00H
                                           ; SOURCE LINE # 899
0029         ?C0057:
                                           ; SOURCE LINE # 901
0029 E5AA              MOV     A,S2CON
002B 5402              ANL     A,#02H
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 114 

002D 6402              XRL     A,#02H
002F 7005              JNZ     ?C0060
                                           ; SOURCE LINE # 902
                                           ; SOURCE LINE # 903
0031 53AAFD            ANL     S2CON,#0FDH
                                           ; SOURCE LINE # 904
0034 C200        R     CLR     RS2_Xbusy
                                           ; SOURCE LINE # 905
                                           ; SOURCE LINE # 906
0036         ?C0060:
0036 D0D0              POP     PSW
0038 D0E0              POP     ACC
003A 32                RETI    
             ; FUNCTION serial2_int (END)

             ; FUNCTION RS_ready (BEGIN)
                                           ; SOURCE LINE # 913
                                           ; SOURCE LINE # 914
                                           ; SOURCE LINE # 915
0000 E500        R     MOV     A,RS_in
0002 B50003      R     CJNE    A,RS_out,?C0061
0005 7F00              MOV     R7,#00H
0007 22                RET     
0008         ?C0061:
                                           ; SOURCE LINE # 916
0008 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 917
000A         ?C0062:
000A 22                RET     
             ; FUNCTION RS_ready (END)

             ; FUNCTION RS_rx (BEGIN)
                                           ; SOURCE LINE # 925
                                           ; SOURCE LINE # 926
                                           ; SOURCE LINE # 929
0000 C2AC              CLR     ES
                                           ; SOURCE LINE # 930
0002 7400        R     MOV     A,#LOW RS_buf
0004 2500        R     ADD     A,RS_out
0006 F8                MOV     R0,A
0007 E6                MOV     A,@R0
0008 FF                MOV     R7,A
;---- Variable 'ret' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 931
0009 0500        R     INC     RS_out
                                           ; SOURCE LINE # 932
000B E500        R     MOV     A,RS_out
000D C3                CLR     C
000E 9414              SUBB    A,#014H
0010 7480              MOV     A,#080H
0012 9480              SUBB    A,#080H
0014 4003              JC      ?C0064
                                           ; SOURCE LINE # 933
0016 E4                CLR     A
0017 F500        R     MOV     RS_out,A
0019         ?C0064:
                                           ; SOURCE LINE # 934
0019 D2AC              SETB    ES
                                           ; SOURCE LINE # 936
                                           ; SOURCE LINE # 937
001B 22                RET     
             ; FUNCTION RS_rx (END)
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 115 


             ; FUNCTION _RS_tx (BEGIN)
                                           ; SOURCE LINE # 943
;---- Variable 'tx_buf' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 944
0000         ?C0066:
                                           ; SOURCE LINE # 945
0000 2000FD      R     JB      RS_Xbusy,?C0066
                                           ; SOURCE LINE # 946
0003 8F99              MOV     SBUF,R7
                                           ; SOURCE LINE # 947
0005 D200        R     SETB    RS_Xbusy
                                           ; SOURCE LINE # 948
0007 22                RET     
             ; FUNCTION _RS_tx (END)

             ; FUNCTION _RS2_tx (BEGIN)
                                           ; SOURCE LINE # 953
;---- Variable 'tx_buf' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 954
0000         ?C0069:
                                           ; SOURCE LINE # 963
0000 2000FD      R     JB      RS2_Xbusy,?C0069
                                           ; SOURCE LINE # 964
0003 8F9A              MOV     S2BUF,R7
                                           ; SOURCE LINE # 965
0005 D200        R     SETB    RS2_Xbusy
                                           ; SOURCE LINE # 966
0007 22                RET     
             ; FUNCTION _RS2_tx (END)

             ; FUNCTION timer2_int (BEGIN)
0000 C0E0              PUSH    ACC
                                           ; SOURCE LINE # 1004
                                           ; SOURCE LINE # 1006
0002 C2CF              CLR     TF2
                                           ; SOURCE LINE # 1008
0004 0500        R     INC     tm01+01H
0006 E500        R     MOV     A,tm01+01H
0008 7002              JNZ     ?C0093
000A 0500        R     INC     tm01
000C         ?C0093:
                                           ; SOURCE LINE # 1139
000C D0E0              POP     ACC
000E 32                RETI    
             ; FUNCTION timer2_int (END)

             ; FUNCTION _delay (BEGIN)
                                           ; SOURCE LINE # 1142
;---- Variable 'cnt' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1143
                                           ; SOURCE LINE # 1146
0000 E500        R     MOV     A,tic01
0002 2F                ADD     A,R7
0003 FF                MOV     R7,A
0004 E4                CLR     A
0005 33                RLC     A
0006 FE                MOV     R6,A
0007 7C00              MOV     R4,#00H
0009 7D64              MOV     R5,#064H
000B 120000      E     LCALL   ?C?UIDIV
;---- Variable 'ttic01' assigned to Register 'R4/R5' ----
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 116 

                                           ; SOURCE LINE # 1147
                                           ; SOURCE LINE # 1149
000E         ?C0073:
000E E500        R     MOV     A,tic01
0010 B505FB            CJNE    A,AR5,?C0073
0013 E4                CLR     A
0014 B504F7            CJNE    A,AR4,?C0073
                                           ; SOURCE LINE # 1150
0017 22                RET     
             ; FUNCTION _delay (END)

             ; FUNCTION GetTime_ms (BEGIN)
                                           ; SOURCE LINE # 1157
                                           ; SOURCE LINE # 1158
                                           ; SOURCE LINE # 1161
0000 900000      R     MOV     DPTR,#tms
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 E500        R     MOV     A,tic01
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1162
0009 E4                CLR     A
000A 7B3C              MOV     R3,#03CH
000C FA                MOV     R2,A
000D F9                MOV     R1,A
000E F8                MOV     R0,A
000F AF00        R     MOV     R7,SystemClock+03H
0011 AE00        R     MOV     R6,SystemClock+02H
0013 AD00        R     MOV     R5,SystemClock+01H
0015 AC00        R     MOV     R4,SystemClock
0017 120000      E     LCALL   ?C?ULDIV
001A AC00              MOV     R4,AR0
001C AD01              MOV     R5,AR1
001E AE02              MOV     R6,AR2
0020 AF03              MOV     R7,AR3
0022 E4                CLR     A
0023 7B64              MOV     R3,#064H
0025 FA                MOV     R2,A
0026 F9                MOV     R1,A
0027 F8                MOV     R0,A
0028 120000      E     LCALL   ?C?LMUL
002B 900000      R     MOV     DPTR,#tms
002E EE                MOV     A,R6
002F 8FF0              MOV     B,R7
0031 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 1163
0034 900000      R     MOV     DPTR,#tms
0037 E0                MOVX    A,@DPTR
0038 FE                MOV     R6,A
0039 A3                INC     DPTR
003A E0                MOVX    A,@DPTR
003B FF                MOV     R7,A
                                           ; SOURCE LINE # 1164
003C 22                RET     
             ; FUNCTION GetTime_ms (END)

             ; FUNCTION _DiffTime_ms (BEGIN)
                                           ; SOURCE LINE # 1213
;---- Variable 'etime' assigned to Register 'R4/R5' ----
;---- Variable 'stime' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 1214
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 117 

                                           ; SOURCE LINE # 1218
0000 C3                CLR     C
0001 ED                MOV     A,R5
0002 9F                SUBB    A,R7
0003 EC                MOV     A,R4
0004 9E                SUBB    A,R6
0005 5010              JNC     ?C0078
                                           ; SOURCE LINE # 1219
0007 C3                CLR     C
0008 7470              MOV     A,#070H
000A 9F                SUBB    A,R7
000B FF                MOV     R7,A
000C 7417              MOV     A,#017H
000E 9E                SUBB    A,R6
000F FE                MOV     R6,A
0010 EF                MOV     A,R7
0011 2D                ADD     A,R5
0012 FF                MOV     R7,A
0013 EE                MOV     A,R6
0014 3C                ADDC    A,R4
0015 FE                MOV     R6,A
0016 22                RET     
                                           ; SOURCE LINE # 1220
0017         ?C0078:
                                           ; SOURCE LINE # 1221
                                           ; SOURCE LINE # 1222
0017 C3                CLR     C
0018 ED                MOV     A,R5
0019 9F                SUBB    A,R7
001A FF                MOV     R7,A
001B EC                MOV     A,R4
001C 9E                SUBB    A,R6
001D FE                MOV     R6,A
                                           ; SOURCE LINE # 1223
                                           ; SOURCE LINE # 1224
001E         ?C0079:
001E 22                RET     
             ; FUNCTION _DiffTime_ms (END)

             ; FUNCTION _Wait_ms (BEGIN)
                                           ; SOURCE LINE # 1226
0000 900000      R     MOV     DPTR,#Tms
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1227
0008         ?C0081:
                                           ; SOURCE LINE # 1233
0008 900000      R     MOV     DPTR,#Tms
000B E0                MOVX    A,@DPTR
000C 7002              JNZ     ?C0095
000E A3                INC     DPTR
000F E0                MOVX    A,@DPTR
0010         ?C0095:
0010 6035              JZ      ?C0086
                                           ; SOURCE LINE # 1234
                                           ; SOURCE LINE # 1235
0012 E4                CLR     A
0013 900000      R     MOV     DPTR,#count
0016 F0                MOVX    @DPTR,A
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 118 

0017 A3                INC     DPTR
0018 F0                MOVX    @DPTR,A
0019         ?C0083:
0019 900000      R     MOV     DPTR,#count
001C E0                MOVX    A,@DPTR
001D FE                MOV     R6,A
001E A3                INC     DPTR
001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
0021 E4                CLR     A
0022 FC                MOV     R4,A
0023 FD                MOV     R5,A
0024 7BD8              MOV     R3,#0D8H
0026 FA                MOV     R2,A
0027 F9                MOV     R1,A
0028 F8                MOV     R0,A
0029 D3                SETB    C
002A 120000      E     LCALL   ?C?ULCMP
002D 400C              JC      ?C0084
002F 900000      R     MOV     DPTR,#count
0032 E4                CLR     A
0033 75F001            MOV     B,#01H
0036 120000      E     LCALL   ?C?IILDX
0039 80DE              SJMP    ?C0083
003B         ?C0084:
                                           ; SOURCE LINE # 1236
003B 900000      R     MOV     DPTR,#Tms
003E 74FF              MOV     A,#0FFH
0040 F5F0              MOV     B,A
0042 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 1237
0045 80C1              SJMP    ?C0081
                                           ; SOURCE LINE # 1238
0047         ?C0086:
0047 22                RET     
             ; FUNCTION _Wait_ms (END)

C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 119 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


FormatStart. . . . . . . . . . . . . .  EXTERN   DATA   BIT      -----  1
second . . . . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
InitCPU. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
P3M0 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B1H  1
timer0_int . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  TempKey. . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   000FH  1
FormatSDCard . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0000H  1
P3M1 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B2H  1
P2 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A0H  1
DWORD. . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
_SaveDebugLevelEE. . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_LCDPowerON. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
timer2_int . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
ClearGAUGEINFO . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
P4 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E8H  1
CAM_R. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
FormatWait . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0001H  1
TriggerModeType. . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
Prompt . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CAM_BAR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ABR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_CAR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ACR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_CBR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_BCR. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
DVR_buf. . . . . . . . . . . . . . . .  PUBLIC   DATA   ARRAY    0000H  8
keytic . . . . . . . . . . . . . . . .  PUBLIC   DATA   U_CHAR   0008H  1
NumberStringType . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  11
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  width. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  BackColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  Radix. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  NumColor . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  MaxLen . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  PrePostCharLen . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  PrePostChar. . . . . . . . . . . . .  MEMBER   -----  ARRAY    0008H  3
IE . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A8H  1
RS2_in . . . . . . . . . . . . . . . .  PUBLIC   DATA   U_CHAR   0009H  1
RepeatKey. . . . . . . . . . . . . . .  PUBLIC   DATA   BIT      0000H  1
_delay . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  cnt. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  ttic01 . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
Backlight_TO . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
Change_OSDColorLookup. . . . . . . . .  EXTERN   CODE   PROC     -----  -----
GetDebugLevelEE. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
minute . . . . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
FontData . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  27
  font . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  27
P3_4 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B4H  1
RIGHT_TRIG . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
ES . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ACH  1
IP . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B8H  1
CCAPM4 . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DEH  1
LAST_TRIG_NON. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
RI . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0098H  1
TI . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0099H  1
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 120 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


lock_keycnt. . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
RS_ready . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
NORMALL_MODE . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
AVMode . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
displayhold_flag . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
SourceModeType . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
tic01. . . . . . . . . . . . . . . . .  PUBLIC   DATA   U_CHAR   000AH  1
KeyReady . . . . . . . . . . . . . . .  PUBLIC   DATA   BIT      0001H  1
CAM_NUM. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
RS_Xbusy . . . . . . . . . . . . . . .  PUBLIC   DATA   BIT      0002H  1
CCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D8H  1
_RS2_tx. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  tx_buf . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
InfoAutoDayNight_Night . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
SetPossibleAutoDetectStdEE . . . . . .  EXTERN   CODE   PROC     -----  -----
Time5ms. . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0002H  1
keyticSec. . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0003H  1
Key. . . . . . . . . . . . . . . . . .  PUBLIC   DATA   U_CHAR   000BH  1
InfoNoVideoSignal. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAMC_TRIG. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_Puts. . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
LAST_TRIG_RIGHT. . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_RAB_H. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
serial_int . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
ext1_int . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
OSDStrInfo . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  8
  cnt. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  addr . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  attr . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  str. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0004H  4
SBUF . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0099H  1
PCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0087H  1
SCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0098H  1
InitVars . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
TMOD . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0089H  1
TCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0088H  1
CAM_BA . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_AB . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
BYTE . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
TimeType . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  7
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  width. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  BackColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  Format . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  TimeColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  CursorColor. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
CAM_CA . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_AC . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
REVERSE_TRIG . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_BC . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_CB . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
SourceModeTypeEnum . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
struct_IdName. . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  17
  Id . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  Name . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0001H  16
EnumType . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  17
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 121 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  Sz . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  ByLang . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  Str. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0002H  15
MenuType . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  4
  width. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  height . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  TitleColor . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  CursorColor. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
CAM_RAB_T. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
PanelInfoStr . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0815H  47
PowerDownStart . . . . . . . . . . . .  EXTERN   DATA   BIT      -----  1
_ReadI2C . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CHPCON . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BFH  1
CAM_RAC_T. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
WORD . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
main_init. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  rev. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
CAM_RBC_T. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
day. . . . . . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
hour . . . . . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
InputSelection . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
CHPENR . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F6H  1
PowerDownWait. . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0004H  1
tm01 . . . . . . . . . . . . . . . . .  PUBLIC   DATA   U_INT    000CH  2
stopWatch. . . . . . . . . . . . . . .  PUBLIC   DATA   U_INT    000EH  2
LAST_TRIG_CAMC . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
RS_buf . . . . . . . . . . . . . . . .  STATIC   DATA   ARRAY    0010H  20
InfoAutoDayNight_Auto. . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
LEFT_TRIG. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_SetVInputStd. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CAM_AR . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
PowerDown_XTAL . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CAM_BR . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_RB . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
PARK_TRIG. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_CR . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
InfoAutoDayNight_Day . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Register . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
ET2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ADH  1
TF2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CFH  1
TH0. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008CH  1
_WriteI2C. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
TH1. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008DH  1
LAST_TRIG_REVERSE. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_DiffTime_ms . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  stime. . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
  etime. . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
EX1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AAH  1
TL0. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008AH  1
InitTechwell . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
No_TRIG. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
RS2_Xbusy. . . . . . . . . . . . . . .  PUBLIC   DATA   BIT      0003H  1
NumType. . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  5
  PrePostCharLen . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  PrePostChar. . . . . . . . . . . . .  MEMBER   -----  ARRAY    0001H  4
_Wait_ms . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  Tms. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 122 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  count. . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0002H  2
TR2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CAH  1
updn_reg . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    0005H  4
_ReadEEP . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
RegisterInfo . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  Min. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0000H  2
  Max. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0002H  2
  Default. . . . . . . . . . . . . . .  MEMBER   -----  INT      0004H  2
ClearBasicEE . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
LAST_TRIG_LEFT . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_PCMDATA . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  22
  Support. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  HAN. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  VAN. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0003H  2
  IVF. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0005H  2
  CLOCK. . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0007H  2
  low. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0009H  2
  high . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000BH  2
  Hstart . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000DH  2
  Vstart . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000FH  2
  IPF. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0011H  2
  PPF. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0013H  2
  VBack. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0015H  1
RS_in. . . . . . . . . . . . . . . . .  PUBLIC   DATA   U_CHAR   0024H  1
_SaveInputSelectionEE. . . . . . . . .  EXTERN   CODE   PROC     -----  -----
CAM_QUAD . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
RS_out . . . . . . . . . . . . . . . .  PUBLIC   DATA   U_CHAR   0025H  1
CAM_QUAD_TO. . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
InfoOSDMENULOCKED. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
serial2_int. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
S2BUF. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   009AH  1
DebugLevel . . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
DefineMenu . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  16
  Icon . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0000H  2
  Desc . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0002H  3
  PreFnId. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  PostFnId . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  IconColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  DescColor. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
  Child. . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0009H  2
  Type . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000BH  1
  ActiveWithCursor . . . . . . . . . .  MEMBER   -----  U_CHAR   000CH  1
  Id . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000DH  1
  TypeData . . . . . . . . . . . . . .  MEMBER   -----  PTR      000EH  2
_PowerLED. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  flag . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
S2CON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00AAH  1
T2CON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C8H  1
TRIGGER_NUM. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_DisplayInformation. . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
DisplayInformation . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
_SaveFWRevEE . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
SEQ. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
InfoOSDMENUATCIVE. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
LongRegisterInfo . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  Min. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  Max. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
C51 COMPILER V9.60.0.0   CPU                                                               06/22/2022 16:23:01 PAGE 123 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  Default. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
S2BRT. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BAH  1
PictureInfo. . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  4
  Register_Addr. . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  EEPROM_Addr. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  Control_Range. . . . . . . . . . . .  MEMBER   -----  PTR      0002H  2
CAM_RAC_T2 . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ABR_T3 . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
RS_rx. . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ret. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
CAM_RBC_T2 . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ABR_T4 . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
DownloadUDFont . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_RS_tx . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  tx_buf . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
CAM_A. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
tm001. . . . . . . . . . . . . . . . .  PUBLIC   DATA   U_CHAR   0026H  1
AUXR2. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A6H  1
CAM_B. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
ChangeKey. . . . . . . . . . . . . . .  PUBLIC   DATA   BIT      0004H  1
InfoPLZRESETSYSTEM . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
GetTime_ms . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  tms. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
CAM_C. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
tic_pc . . . . . . . . . . . . . . . .  PUBLIC   DATA   U_INT    0027H  2
RS_buf2. . . . . . . . . . . . . . . .  PUBLIC   DATA   ARRAY    0029H  20
_Printf. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
VGA_TRIG . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
SystemClock. . . . . . . . . . . . . .  PUBLIC   DATA   U_LONG   003DH  4
CAM_CAB. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_BAC. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CAM_ABC. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CommTable. . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    07AFH  102
GetFWRevEE . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
AWT_LAST_TRIGGER . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
SEQTime. . . . . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
VInputStdDetectMode. . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
AUXIE. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00ADH  1


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1344    ----
   CONSTANT SIZE    =   2116    ----
   XDATA SIZE       =      9       8
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     65    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      5    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
